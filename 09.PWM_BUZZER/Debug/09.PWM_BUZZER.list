
09.PWM_BUZZER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a918  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800aac8  0800aac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add8  0800add8  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade0  0800ade0  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800ade8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000b00  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ca4  20000ca4  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eaf4  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000401f  00000000  00000000  0003ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c8  00000000  00000000  00042ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001728  00000000  00000000  000445b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d6b  00000000  00000000  00045cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f34b  00000000  00000000  0006ea43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed59a  00000000  00000000  0008dd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017b328  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007398  00000000  00000000  0017b378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aab0 	.word	0x0800aab0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	0800aab0 	.word	0x0800aab0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DHT11_processing>:
// mode select 모드1 : LCD에 온도 습도 정보 출력
#if 1
// dht11time 150 300 200 -> comportmaster
int dht11time = 150;
void DHT11_processing(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];						//

	if (TIM10_10ms_counter >= dht11time)			// 1500ms
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <DHT11_processing+0x94>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <DHT11_processing+0x98>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db3b      	blt.n	8000e0a <DHT11_processing+0x8a>
	{
		TIM10_10ms_counter = 0;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <DHT11_processing+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
		DHT11_trriger();
 8000d98:	f000 f85a 	bl	8000e50 <DHT11_trriger>
		DHT11_DataLine_Input();
 8000d9c:	f000 f86e 	bl	8000e7c <DHT11_DataLine_Input>
		DHT11_dumi_read();
 8000da0:	f000 f8dc 	bl	8000f5c <DHT11_dumi_read>

		i_RH = DHT11_rx_Data();
 8000da4:	f000 f8a4 	bl	8000ef0 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
		d_RH = DHT11_rx_Data();
 8000dac:	f000 f8a0 	bl	8000ef0 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
		i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f89c 	bl	8000ef0 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
		d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f898 	bl	8000ef0 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

		DHT11_DataLine_Output();
 8000dc4:	f000 f876 	bl	8000eb4 <DHT11_DataLine_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <DHT11_processing+0x9c>)
 8000dce:	f003 fb8d 	bl	80044ec <HAL_GPIO_WritePin>

		printf("[Tmp]%d\n",(int)i_Tmp);
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <DHT11_processing+0xa0>)
 8000dd8:	f008 fbd6 	bl	8009588 <iprintf>
		printf("[Wet]%d\n",(int)i_RH);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <DHT11_processing+0xa4>)
 8000de2:	f008 fbd1 	bl	8009588 <iprintf>
		sprintf(lcd_buff, "Tmp:%d Wet:%d", (int)i_Tmp, (int)i_RH);
 8000de6:	7d7a      	ldrb	r2, [r7, #21]
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	4638      	mov	r0, r7
 8000dec:	490e      	ldr	r1, [pc, #56]	; (8000e28 <DHT11_processing+0xa8>)
 8000dee:	f008 fc59 	bl	80096a4 <siprintf>
		if (lcd_display_mode_flag == 1)							// mode select 모드1
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <DHT11_processing+0xac>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d107      	bne.n	8000e0a <DHT11_processing+0x8a>
		{
			move_cursor(0,0);									// 커서 0line 0col 이동
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 fb1d 	bl	800143c <move_cursor>
			lcd_string(lcd_buff); 								// HEX 0x20 미만은 LCD 입력 안됨 (\n 안됨)
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fb04 	bl	8001412 <lcd_string>
		}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000c08 	.word	0x20000c08
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	0800aad8 	.word	0x0800aad8
 8000e24:	0800aae4 	.word	0x0800aae4
 8000e28:	0800aaf0 	.word	0x0800aaf0
 8000e2c:	200001d4 	.word	0x200001d4

08000e30 <DHT11_Init>:
//	FND_update(i_Tmp*100 + i_RH);
}
#endif											// original code

void DHT11_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2101      	movs	r1, #1
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <DHT11_Init+0x1c>)
 8000e3a:	f003 fb57 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000e3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e42:	f002 fc9f 	bl	8003784 <HAL_Delay>
	return;
 8000e46:	bf00      	nop
}
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020000 	.word	0x40020000

08000e50 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <DHT11_trriger+0x28>)
 8000e5a:	f003 fb47 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e5e:	2014      	movs	r0, #20
 8000e60:	f002 fc90 	bl	8003784 <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2101      	movs	r1, #1
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <DHT11_trriger+0x28>)
 8000e6a:	f003 fb3f 	bl	80044ec <HAL_GPIO_WritePin>
	delay_us(7);
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f000 ff2e 	bl	8001cd0 <delay_us>
	return;
 8000e74:	bf00      	nop
}
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020000 	.word	0x40020000

08000e7c <DHT11_DataLine_Input>:

// 데이터 시트보고 오실로스코프 코딩할 줄 알아야
void DHT11_DataLine_Input(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e90:	2301      	movs	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <DHT11_DataLine_Input+0x34>)
 8000ea2:	f003 f95f 	bl	8004164 <HAL_GPIO_Init>
	
	return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <DHT11_DataLine_Output+0x38>)
 8000ede:	f003 f941 	bl	8004164 <HAL_GPIO_Init>
	
	return;
 8000ee2:	bf00      	nop
}
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020000 	.word	0x40020000

08000ef0 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;							// 8bit
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++)						// 8bit read -> oscilloscope 8 pulse
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	e023      	b.n	8000f48 <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );		// low일 때 대기, 0일 동안 읽는다 -> high 되면 빠져나옴
 8000f00:	bf00      	nop
 8000f02:	2101      	movs	r1, #1
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f06:	f003 fad9 	bl	80044bc <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f8      	beq.n	8000f02 <DHT11_rx_Data+0x12>
#if 1
		delay_us(40);													// high 뛰었을 때 0(28ms), 1(70ms) 구분을 위해 40ms 넣어줌
 8000f10:	2028      	movs	r0, #40	; 0x28
 8000f12:	f000 fedd 	bl	8001cd0 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1;													// data 1bit shift
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f20:	f003 facc 	bl	80044bc <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;												// 1
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f32:	bf00      	nop
 8000f34:	2101      	movs	r1, #1
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f38:	f003 fac0 	bl	80044bc <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d0f8      	beq.n	8000f34 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++)						// 8bit read -> oscilloscope 8 pulse
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	ddd8      	ble.n	8000f00 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020000 	.word	0x40020000

08000f5c <DHT11_dumi_read>:


void DHT11_dumi_read(void)											// hand shaking
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f60:	bf00      	nop
 8000f62:	2101      	movs	r1, #1
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f66:	f003 faa9 	bl	80044bc <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d0f8      	beq.n	8000f62 <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f70:	bf00      	nop
 8000f72:	2101      	movs	r1, #1
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f76:	f003 faa1 	bl	80044bc <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f8      	beq.n	8000f72 <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f80:	bf00      	nop
 8000f82:	2101      	movs	r1, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f86:	f003 fa99 	bl	80044bc <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d0f8      	beq.n	8000f82 <DHT11_dumi_read+0x26>
	return;
 8000f90:	bf00      	nop
}
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020000 	.word	0x40020000

08000f98 <lcd_display_mode_select>:
RTC_TimeTypeDef mTime;													// from internal_rtc.c 10 extern 선언하지 않고 별도로 mTime 선언

// LCD 출력 >> 모드0:시간 정보 / 모드1:온습도 정보 / 모드2:거리 정보 / 모드3:시각 보정 기능
uint8_t lcd_display_mode_flag = 0;								// 0번 : 시계 정보를 lcd 에 display   ->  internal_rtc.c & DHT11.c 에 extern 선언
void lcd_display_mode_select(void)								// main.c 105 에 extern 선언 후 while 에서 호출시킴
{
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af02      	add	r7, sp, #8
	char lcd_buff[40];

	if (get_button(GPIOC, GPIO_PIN_13, 4) == BUTTON_PRESS)		// from main.h 62 63
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	4823      	ldr	r0, [pc, #140]	; (8001034 <lcd_display_mode_select+0x9c>)
 8000fa6:	f000 f84f 	bl	8001048 <get_button>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d13d      	bne.n	800102c <lcd_display_mode_select+0x94>
	{
		lcd_command(CLEAR_DISPLAY);								// from i2c_lcd.c 94 for clear
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 f9ad 	bl	8001310 <lcd_command>
		lcd_display_mode_flag++;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fc0:	701a      	strb	r2, [r3, #0]
		lcd_display_mode_flag %= 4;								// 모드 개수 만큼 돌아감
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fce:	701a      	strb	r2, [r3, #0]

		if (lcd_display_mode_flag == 3)							// 기능 추가
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d129      	bne.n	800102c <lcd_display_mode_select+0x94>
		{
			HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BCD);				// from internal_rtc.c 46
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4918      	ldr	r1, [pc, #96]	; (800103c <lcd_display_mode_select+0xa4>)
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <lcd_display_mode_select+0xa8>)
 8000fde:	f005 f805 	bl	8005fec <HAL_RTC_GetTime>
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <lcd_display_mode_select+0xa4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fa40 	bl	800146c <bin2dec>
 8000fec:	4604      	mov	r4, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <lcd_display_mode_select+0xa4>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fa3a 	bl	800146c <bin2dec>
 8000ff8:	4605      	mov	r5, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <lcd_display_mode_select+0xa4>)
 8000ffc:	789b      	ldrb	r3, [r3, #2]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fa34 	bl	800146c <bin2dec>
 8001004:	4603      	mov	r3, r0
 8001006:	4638      	mov	r0, r7
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	462b      	mov	r3, r5
 800100c:	4622      	mov	r2, r4
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <lcd_display_mode_select+0xac>)
 8001010:	f008 fb48 	bl	80096a4 <siprintf>
			move_cursor(1,0);									// 커서 0line 0col 이동
 8001014:	2100      	movs	r1, #0
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fa10 	bl	800143c <move_cursor>
			lcd_string(lcd_buff); 										// HEX 0x20 미만은 LCD 입력 안됨 (\n 안됨)
 800101c:	463b      	mov	r3, r7
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f9f7 	bl	8001412 <lcd_string>
			move_cursor(1,6);									// 시간 정보 fieid(6번 col) 로 커서 이동
 8001024:	2106      	movs	r1, #6
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fa08 	bl	800143c <move_cursor>
		}

	}
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	40020800 	.word	0x40020800
 8001038:	200001d4 	.word	0x200001d4
 800103c:	200001c0 	.word	0x200001c0
 8001040:	200004a0 	.word	0x200004a0
 8001044:	0800ab00 	.word	0x0800ab00

08001048 <get_button>:

// get_button(gpio, pin, button 번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1)을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;																				// 리턴값을 담음

	curr_state = HAL_GPIO_ReadPin(GPIO, GPIO_PIN);		// 0, 1
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f003 fa2d 	bl	80044bc <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]

	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10d      	bne.n	8001088 <get_button+0x40>
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <get_button+0x6c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <get_button+0x40>
	{
		HAL_Delay(80);									// noise 지나가길 기다림
 8001076:	2050      	movs	r0, #80	; 0x50
 8001078:	f002 fb84 	bl	8003784 <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS;					// 현재의 버튼 상태를 저장
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <get_button+0x6c>)
 8001080:	2100      	movs	r1, #0
 8001082:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; 							// 버튼이 눌려진 상태나 아직은 noise 상태로 인정
 8001084:	2301      	movs	r3, #1
 8001086:	e011      	b.n	80010ac <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d10d      	bne.n	80010aa <get_button+0x62>
 800108e:	787b      	ldrb	r3, [r7, #1]
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <get_button+0x6c>)
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d108      	bne.n	80010aa <get_button+0x62>
	{
		// 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태이면 		(버튼 눌렸다 뗀 상태)
		button_status[button_number] = BUTTON_RELEASE;	// 2. button_status table 을 초기화 하고
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <get_button+0x6c>)
 800109c:	2101      	movs	r1, #1
 800109e:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 80010a0:	201e      	movs	r0, #30
 80010a2:	f002 fb6f 	bl	8003784 <HAL_Delay>
		return BUTTON_PRESS;							// 3. 버튼을 1번 눌렀다 뗀 것으로 인정한다.
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <get_button+0x64>
	}
	return BUTTON_RELEASE; 								// 나머지는 버튼 누르지 않은 상태
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000004 	.word	0x20000004

080010b8 <noTone>:
};

 unsigned int duration[] = {1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2};

 void noTone()
 {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
     htim5.Instance->CCR1=0;							// tone 없을 때 듀티 0으로
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <noTone+0x18>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 80010c4:	2032      	movs	r0, #50	; 0x32
 80010c6:	f002 fb5d 	bl	8003784 <HAL_Delay>
 }
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000598 	.word	0x20000598

080010d4 <buzzer_main>:

void buzzer_main()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
   int divide_freq = 1600000;
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <buzzer_main+0x100>)
 80010dc:	607b      	str	r3, [r7, #4]

  while (1)
  {

	// 학교 종이 땡땡땡
    for (int i=0; i < 24; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e026      	b.n	8001132 <buzzer_main+0x5e>
    {
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / school_bell[i]);
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4a3c      	ldr	r2, [pc, #240]	; (80011d8 <buzzer_main+0x104>)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ee:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <buzzer_main+0x108>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	fbb1 f2f2 	udiv	r2, r1, r2
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4937      	ldr	r1, [pc, #220]	; (80011d8 <buzzer_main+0x104>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4a35      	ldr	r2, [pc, #212]	; (80011dc <buzzer_main+0x108>)
 8001108:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / school_bell[i] / 2);
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4932      	ldr	r1, [pc, #200]	; (80011d8 <buzzer_main+0x104>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001114:	fbb2 f2f3 	udiv	r2, r2, r3
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <buzzer_main+0x108>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0852      	lsrs	r2, r2, #1
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001120:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001124:	f002 fb2e 	bl	8003784 <HAL_Delay>
		noTone();  /* note 소리 내고 50ms 끊어주기 */
 8001128:	f7ff ffc6 	bl	80010b8 <noTone>
    for (int i=0; i < 24; i++)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b17      	cmp	r3, #23
 8001136:	ddd5      	ble.n	80010e4 <buzzer_main+0x10>
    }

    /* 음악 끝나고 3초 후 시작*/
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4) ;
 8001138:	210c      	movs	r1, #12
 800113a:	4828      	ldr	r0, [pc, #160]	; (80011dc <buzzer_main+0x108>)
 800113c:	f005 fb1c 	bl	8006778 <HAL_TIM_PWM_Stop>
    HAL_Delay(3000);
 8001140:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001144:	f002 fb1e 	bl	8003784 <HAL_Delay>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4) ;
 8001148:	210c      	movs	r1, #12
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <buzzer_main+0x108>)
 800114c:	f005 fa4c 	bl	80065e8 <HAL_TIM_PWM_Start>

    // happy birthday to you
    for (int i=0; i < 25; i++)							// 해당 악보만큼 for문 돌림
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	e02d      	b.n	80011b2 <buzzer_main+0xde>
    {
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / happy_birthday[i]);
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <buzzer_main+0x10c>)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <buzzer_main+0x108>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	fbb1 f2f2 	udiv	r2, r1, r2
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	491c      	ldr	r1, [pc, #112]	; (80011e0 <buzzer_main+0x10c>)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <buzzer_main+0x108>)
 800117a:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / happy_birthday[i] / 2);
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4918      	ldr	r1, [pc, #96]	; (80011e0 <buzzer_main+0x10c>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001186:	fbb2 f2f3 	udiv	r2, r2, r3
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <buzzer_main+0x108>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0852      	lsrs	r2, r2, #1
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(300*duration[i]);
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <buzzer_main+0x110>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 faee 	bl	8003784 <HAL_Delay>
		noTone();
 80011a8:	f7ff ff86 	bl	80010b8 <noTone>
    for (int i=0; i < 25; i++)							// 해당 악보만큼 for문 돌림
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b18      	cmp	r3, #24
 80011b6:	ddce      	ble.n	8001156 <buzzer_main+0x82>
    }

    /* 음악 끝나고 3초 후 시작 */
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4) ;
 80011b8:	210c      	movs	r1, #12
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <buzzer_main+0x108>)
 80011bc:	f005 fadc 	bl	8006778 <HAL_TIM_PWM_Stop>
    HAL_Delay(3000);
 80011c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011c4:	f002 fade 	bl	8003784 <HAL_Delay>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4) ;
 80011c8:	210c      	movs	r1, #12
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <buzzer_main+0x108>)
 80011cc:	f005 fa0c 	bl	80065e8 <HAL_TIM_PWM_Start>
    for (int i=0; i < 24; i++)
 80011d0:	e785      	b.n	80010de <buzzer_main+0xa>
 80011d2:	bf00      	nop
 80011d4:	00186a00 	.word	0x00186a00
 80011d8:	2000000c 	.word	0x2000000c
 80011dc:	20000598 	.word	0x20000598
 80011e0:	2000006c 	.word	0x2000006c
 80011e4:	200000d0 	.word	0x200000d0

080011e8 <dcmotor_pwm_control>:
#endif

// 버튼 012 -> start/stop, speed-up, speed-down
#if 1																		// original code
void dcmotor_pwm_control(void)					// main.c 에서 호출해서 계속 돌릴 함수
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	// start/stop : button0
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)		// from led.c line-38
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f2:	4841      	ldr	r0, [pc, #260]	; (80012f8 <dcmotor_pwm_control+0x110>)
 80011f4:	f7ff ff28 	bl	8001048 <get_button>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d12e      	bne.n	800125c <dcmotor_pwm_control+0x74>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);								// LD1 (PB0)
 80011fe:	2101      	movs	r1, #1
 8001200:	483e      	ldr	r0, [pc, #248]	; (80012fc <dcmotor_pwm_control+0x114>)
 8001202:	f003 f98c 	bl	800451e <HAL_GPIO_TogglePin>

//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);			// test code 정회전 	-> 동작 x...
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);			// test code		-> 동작 x...

		if (!pwm_start_flag)												// 처음 상태
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <dcmotor_pwm_control+0x118>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d113      	bne.n	8001236 <dcmotor_pwm_control+0x4e>
		{
			pwm_start_flag = 1;
 800120e:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <dcmotor_pwm_control+0x118>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);			// test code
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	4837      	ldr	r0, [pc, #220]	; (80012f8 <dcmotor_pwm_control+0x110>)
 800121c:	f003 f966 	bl	80044ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);			// test code
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001226:	4834      	ldr	r0, [pc, #208]	; (80012f8 <dcmotor_pwm_control+0x110>)
 8001228:	f003 f960 	bl	80044ec <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	4835      	ldr	r0, [pc, #212]	; (8001304 <dcmotor_pwm_control+0x11c>)
 8001230:	f005 f9da 	bl	80065e8 <HAL_TIM_PWM_Start>
 8001234:	e012      	b.n	800125c <dcmotor_pwm_control+0x74>
		}
		else
		{
			pwm_start_flag = 0;
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <dcmotor_pwm_control+0x118>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800123c:	2100      	movs	r1, #0
 800123e:	4831      	ldr	r0, [pc, #196]	; (8001304 <dcmotor_pwm_control+0x11c>)
 8001240:	f005 fa9a 	bl	8006778 <HAL_TIM_PWM_Stop>

			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);			// test code
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124a:	482b      	ldr	r0, [pc, #172]	; (80012f8 <dcmotor_pwm_control+0x110>)
 800124c:	f003 f94e 	bl	80044ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);			// test code
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001256:	4828      	ldr	r0, [pc, #160]	; (80012f8 <dcmotor_pwm_control+0x110>)
 8001258:	f003 f948 	bl	80044ec <HAL_GPIO_WritePin>

		}
	}

	// speed-up : button1
	if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001262:	4825      	ldr	r0, [pc, #148]	; (80012f8 <dcmotor_pwm_control+0x110>)
 8001264:	f7ff fef0 	bl	8001048 <get_button>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11b      	bne.n	80012a6 <dcmotor_pwm_control+0xbe>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);								// LED2
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <dcmotor_pwm_control+0x114>)
 8001272:	f003 f954 	bl	800451e <HAL_GPIO_TogglePin>
		CCR_UP_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);		// PWM 읽어옴
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <dcmotor_pwm_control+0x11c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <dcmotor_pwm_control+0x120>)
 8001280:	801a      	strh	r2, [r3, #0]
		CCR_UP_Value += 10;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <dcmotor_pwm_control+0x120>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	330a      	adds	r3, #10
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <dcmotor_pwm_control+0x120>)
 800128c:	801a      	strh	r2, [r3, #0]
		if (CCR_UP_Value > 100) CCR_UP_Value = 100;							// -> 오실로스코프에서 버튼1 3번 누르면 듀티 100까지 증가
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <dcmotor_pwm_control+0x120>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d902      	bls.n	800129c <dcmotor_pwm_control+0xb4>
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <dcmotor_pwm_control+0x120>)
 8001298:	2264      	movs	r2, #100	; 0x64
 800129a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_UP_Value);			// H/W에 PWM 업데이트
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <dcmotor_pwm_control+0x120>)
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <dcmotor_pwm_control+0x11c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// speed-down : button2
	if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80012a6:	2202      	movs	r2, #2
 80012a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <dcmotor_pwm_control+0x110>)
 80012ae:	f7ff fecb 	bl	8001048 <get_button>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11c      	bne.n	80012f2 <dcmotor_pwm_control+0x10a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);								// LED3
 80012b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <dcmotor_pwm_control+0x114>)
 80012be:	f003 f92e 	bl	800451e <HAL_GPIO_TogglePin>
		CCR_DOWN_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);		// PWM 읽어옴
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <dcmotor_pwm_control+0x11c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <dcmotor_pwm_control+0x124>)
 80012cc:	801a      	strh	r2, [r3, #0]
		CCR_DOWN_Value -= 10;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <dcmotor_pwm_control+0x124>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	3b0a      	subs	r3, #10
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <dcmotor_pwm_control+0x124>)
 80012d8:	801a      	strh	r2, [r3, #0]
		if (CCR_DOWN_Value < 60) CCR_DOWN_Value = 60;						// 모터 속도 디폴트 70 -> 오실로스코프에서 버튼2 누르면 60까지 감소 가능
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <dcmotor_pwm_control+0x124>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b3b      	cmp	r3, #59	; 0x3b
 80012e0:	d802      	bhi.n	80012e8 <dcmotor_pwm_control+0x100>
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <dcmotor_pwm_control+0x124>)
 80012e4:	223c      	movs	r2, #60	; 0x3c
 80012e6:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_DOWN_Value);
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <dcmotor_pwm_control+0x124>)
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <dcmotor_pwm_control+0x11c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40020400 	.word	0x40020400
 8001300:	200001d5 	.word	0x200001d5
 8001304:	20000550 	.word	0x20000550
 8001308:	200001d6 	.word	0x200001d6
 800130c:	200001d8 	.word	0x200001d8

08001310 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af02      	add	r7, sp, #8
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f023 030f 	bic.w	r3, r3, #15
 8001320:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f043 030c 	orr.w	r3, r3, #12
 800132e:	b2db      	uxtb	r3, r3
 8001330:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	b2db      	uxtb	r3, r3
 800133a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	f043 030c 	orr.w	r3, r3, #12
 8001342:	b2db      	uxtb	r3, r3
 8001344:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	b2db      	uxtb	r3, r3
 800134e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001350:	bf00      	nop
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2304      	movs	r3, #4
 800135c:	214e      	movs	r1, #78	; 0x4e
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <lcd_command+0x64>)
 8001360:	f003 fa3c 	bl	80047dc <HAL_I2C_Master_Transmit>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f3      	bne.n	8001352 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800136a:	bf00      	nop
}
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000044c 	.word	0x2000044c

08001378 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f023 030f 	bic.w	r3, r3, #15
 8001388:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f043 030d 	orr.w	r3, r3, #13
 8001396:	b2db      	uxtb	r3, r3
 8001398:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	f043 0309 	orr.w	r3, r3, #9
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	f043 030d 	orr.w	r3, r3, #13
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	f043 0309 	orr.w	r3, r3, #9
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80013b8:	bf00      	nop
 80013ba:	f107 0208 	add.w	r2, r7, #8
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2304      	movs	r3, #4
 80013c4:	214e      	movs	r1, #78	; 0x4e
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <lcd_data+0x64>)
 80013c8:	f003 fa08 	bl	80047dc <HAL_I2C_Master_Transmit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f3      	bne.n	80013ba <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80013d2:	bf00      	nop
}
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000044c 	.word	0x2000044c

080013e0 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80013e4:	2033      	movs	r0, #51	; 0x33
 80013e6:	f7ff ff93 	bl	8001310 <lcd_command>
	lcd_command(0x32);
 80013ea:	2032      	movs	r0, #50	; 0x32
 80013ec:	f7ff ff90 	bl	8001310 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80013f0:	2028      	movs	r0, #40	; 0x28
 80013f2:	f7ff ff8d 	bl	8001310 <lcd_command>
	lcd_command(DISPLAY_ON);
 80013f6:	200c      	movs	r0, #12
 80013f8:	f7ff ff8a 	bl	8001310 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80013fc:	2006      	movs	r0, #6
 80013fe:	f7ff ff87 	bl	8001310 <lcd_command>
	lcd_command(CLEAR_DISPLAY);									// lcd clear 시켜줌 -> button.c 에 #include "i2c_lcd.h" 해줌
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff ff84 	bl	8001310 <lcd_command>
	HAL_Delay(2);
 8001408:	2002      	movs	r0, #2
 800140a:	f002 f9bb 	bl	8003784 <HAL_Delay>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}

08001412 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	while(*str)
 800141a:	e006      	b.n	800142a <lcd_string+0x18>
	{
		lcd_data(*str++);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ffa7 	bl	8001378 <lcd_data>
	while(*str)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f4      	bne.n	800141c <lcd_string+0xa>
	}
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	019b      	lsls	r3, r3, #6
 8001450:	b2da      	uxtb	r2, r3
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff56 	bl	8001310 <lcd_command>
	return;
 8001464:	bf00      	nop
}
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <bin2dec>:
// 0010 0011
// STM32의 RTC로부터 날짜 & 시각 정보를 읽어 오는 함수 (1초에 한 번씩 초가 바뀔 때만 가져오게)

// BIN -> DEC conversion
unsigned char bin2dec(unsigned char byte)			// argument 를 call by value 로 받음
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	low = byte & 0x0f;					// 하위 4 bit (low nibble) 저장
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4)*10;				// 상위 4 bit (high nibble) 저장
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	73bb      	strb	r3, [r7, #14]

	return high + low;
 800148e:	7bba      	ldrb	r2, [r7, #14]
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	4413      	add	r3, r2
 8001494:	b2db      	uxtb	r3, r3
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <dec2bin>:

// decimal --> BCD 예) 23 -> 001 0111
unsigned char dec2bin(unsigned char byte)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	high = (byte / 10) << 4; 						// 4 로 shift
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <dec2bin+0x44>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;								// 나머지
 80014be:	79fa      	ldrb	r2, [r7, #7]
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <dec2bin+0x44>)
 80014c2:	fba3 1302 	umull	r1, r3, r3, r2
 80014c6:	08d9      	lsrs	r1, r3, #3
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	73bb      	strb	r3, [r7, #14]

	return high + low;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	4413      	add	r3, r2
 80014da:	b2db      	uxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	cccccccd 	.word	0xcccccccd

080014ec <get_rtc>:
// YYYY-MM-DD HH:mm:ss	<- comportmaster 에 출력됨 (lcd 에는 온습도, 거리 출력됨)
void get_rtc(void)
{
 80014ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f0:	b08f      	sub	sp, #60	; 0x3c
 80014f2:	af04      	add	r7, sp, #16
	static RTC_TimeTypeDef oldTime;	// 이전 시각 정보를 가지고 있기 위함이다. (이전에 업데이트된 상태 유지하기 위해 static 변수 씀)
	char lcd_buff[40];								//
	// 날짜, 시각 정보 가져옴
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80014f4:	2201      	movs	r2, #1
 80014f6:	494b      	ldr	r1, [pc, #300]	; (8001624 <get_rtc+0x138>)
 80014f8:	484b      	ldr	r0, [pc, #300]	; (8001628 <get_rtc+0x13c>)
 80014fa:	f004 fe59 	bl	80061b0 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80014fe:	2201      	movs	r2, #1
 8001500:	494a      	ldr	r1, [pc, #296]	; (800162c <get_rtc+0x140>)
 8001502:	4849      	ldr	r0, [pc, #292]	; (8001628 <get_rtc+0x13c>)
 8001504:	f004 fd72 	bl	8005fec <HAL_RTC_GetTime>
	// 정보 뿌려줌
	if (oldTime.Seconds != sTime.Seconds)			// 비교
 8001508:	4b49      	ldr	r3, [pc, #292]	; (8001630 <get_rtc+0x144>)
 800150a:	789a      	ldrb	r2, [r3, #2]
 800150c:	4b47      	ldr	r3, [pc, #284]	; (800162c <get_rtc+0x140>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	429a      	cmp	r2, r3
 8001512:	d07d      	beq.n	8001610 <get_rtc+0x124>
	{
		// YYYY-MM-DD HH:mm:ss	<- comportmaster & lcd 출력
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date), 			// bin2dec : BIN -> DEC conversion 함수
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <get_rtc+0x138>)
 8001516:	78db      	ldrb	r3, [r3, #3]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ffa7 	bl	800146c <bin2dec>
 800151e:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001520:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date), 			// bin2dec : BIN -> DEC conversion 함수
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <get_rtc+0x138>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff9f 	bl	800146c <bin2dec>
 800152e:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001530:	4698      	mov	r8, r3
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date), 			// bin2dec : BIN -> DEC conversion 함수
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <get_rtc+0x138>)
 8001534:	789b      	ldrb	r3, [r3, #2]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff98 	bl	800146c <bin2dec>
 800153c:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800153e:	4699      	mov	r9, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <get_rtc+0x140>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff91 	bl	800146c <bin2dec>
 800154a:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800154c:	461d      	mov	r5, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <get_rtc+0x140>)
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff8a 	bl	800146c <bin2dec>
 8001558:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800155a:	461e      	mov	r6, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <get_rtc+0x140>)
 800155e:	789b      	ldrb	r3, [r3, #2]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff83 	bl	800146c <bin2dec>
 8001566:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	9601      	str	r6, [sp, #4]
 800156c:	9500      	str	r5, [sp, #0]
 800156e:	464b      	mov	r3, r9
 8001570:	4642      	mov	r2, r8
 8001572:	4621      	mov	r1, r4
 8001574:	482f      	ldr	r0, [pc, #188]	; (8001634 <get_rtc+0x148>)
 8001576:	f008 f807 	bl	8009588 <iprintf>
		// lcd 뿌리면서 one button 처리
		if (lcd_display_mode_flag == 0)
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <get_rtc+0x14c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d146      	bne.n	8001610 <get_rtc+0x124>
		{
			// sprintf 로 분리
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date)); 			// bin2dec : BIN -> DEC conversion 함수
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <get_rtc+0x138>)
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff70 	bl	800146c <bin2dec>
 800158c:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 800158e:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date)); 			// bin2dec : BIN -> DEC conversion 함수
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <get_rtc+0x138>)
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff68 	bl	800146c <bin2dec>
 800159c:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 800159e:	461d      	mov	r5, r3
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date)); 			// bin2dec : BIN -> DEC conversion 함수
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <get_rtc+0x138>)
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff61 	bl	800146c <bin2dec>
 80015aa:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 80015ac:	4638      	mov	r0, r7
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	462b      	mov	r3, r5
 80015b2:	4622      	mov	r2, r4
 80015b4:	4921      	ldr	r1, [pc, #132]	; (800163c <get_rtc+0x150>)
 80015b6:	f008 f875 	bl	80096a4 <siprintf>
			move_cursor(0,0);
 80015ba:	2100      	movs	r1, #0
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff ff3d 	bl	800143c <move_cursor>
			lcd_string(lcd_buff);
 80015c2:	463b      	mov	r3, r7
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff24 	bl	8001412 <lcd_string>
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <get_rtc+0x140>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff4c 	bl	800146c <bin2dec>
 80015d4:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80015d6:	461c      	mov	r4, r3
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <get_rtc+0x140>)
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff45 	bl	800146c <bin2dec>
 80015e2:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80015e4:	461d      	mov	r5, r3
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <get_rtc+0x140>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff3e 	bl	800146c <bin2dec>
 80015f0:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80015f2:	4638      	mov	r0, r7
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	462b      	mov	r3, r5
 80015f8:	4622      	mov	r2, r4
 80015fa:	4911      	ldr	r1, [pc, #68]	; (8001640 <get_rtc+0x154>)
 80015fc:	f008 f852 	bl	80096a4 <siprintf>
			move_cursor(1,0);
 8001600:	2100      	movs	r1, #0
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff ff1a 	bl	800143c <move_cursor>
			lcd_string(lcd_buff);
 8001608:	463b      	mov	r3, r7
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff01 	bl	8001412 <lcd_string>
		}
	}
	oldTime.Seconds = sTime.Seconds; 				// 현재 시간 업데이트
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <get_rtc+0x140>)
 8001612:	789a      	ldrb	r2, [r3, #2]
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <get_rtc+0x144>)
 8001616:	709a      	strb	r2, [r3, #2]
}
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001622:	bf00      	nop
 8001624:	200001f0 	.word	0x200001f0
 8001628:	200004a0 	.word	0x200004a0
 800162c:	200001dc 	.word	0x200001dc
 8001630:	200001f4 	.word	0x200001f4
 8001634:	0800ab14 	.word	0x0800ab14
 8001638:	200001d4 	.word	0x200001d4
 800163c:	0800ab34 	.word	0x0800ab34
 8001640:	0800ab48 	.word	0x0800ab48

08001644 <set_rtc>:

// setrtc231016103800 <- comportmaster 의 Send 로 설정하기, Send 누르면 시간 보정된다.
//       678901234567 (6~17번방)
void set_rtc(char *date_time)						// 시간 보정 기능
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	// 정보 저장할 아스키 어레이 필요
	char yy[4], mm[4], dd[4];		// date
	char hh[4], min[4], ss[4];		// time

	strncpy(yy, date_time+6, 2);	// yy[0]='2' yy[1]='3' yy[2] = 0; (6번째 offset 에서 2byte 자름)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1d99      	adds	r1, r3, #6
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	2202      	movs	r2, #2
 8001656:	4618      	mov	r0, r3
 8001658:	f008 f858 	bl	800970c <strncpy>
	strncpy(mm, date_time+8, 2);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f103 0108 	add.w	r1, r3, #8
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	2202      	movs	r2, #2
 8001668:	4618      	mov	r0, r3
 800166a:	f008 f84f 	bl	800970c <strncpy>
	strncpy(dd, date_time+10, 2);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 010a 	add.w	r1, r3, #10
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2202      	movs	r2, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f008 f846 	bl	800970c <strncpy>

	strncpy(hh, date_time+12, 2);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f103 010c 	add.w	r1, r3, #12
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	2202      	movs	r2, #2
 800168c:	4618      	mov	r0, r3
 800168e:	f008 f83d 	bl	800970c <strncpy>
	strncpy(min, date_time+14, 2);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f103 010e 	add.w	r1, r3, #14
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2202      	movs	r2, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f008 f834 	bl	800970c <strncpy>
	strncpy(ss, date_time+16, 2);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f103 0110 	add.w	r1, r3, #16
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2202      	movs	r2, #2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 f82b 	bl	800970c <strncpy>

	// ascii --> int --> bcd 변환해서 RTC 칩에 write
	sDate.Year = dec2bin(atoi(yy));
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f007 ff2e 	bl	800951c <atoi>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff feed 	bl	80014a4 <dec2bin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <set_rtc+0x138>)
 80016d0:	70da      	strb	r2, [r3, #3]
	sDate.Month = dec2bin(atoi(mm));
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	4618      	mov	r0, r3
 80016d8:	f007 ff20 	bl	800951c <atoi>
 80016dc:	4603      	mov	r3, r0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fedf 	bl	80014a4 <dec2bin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <set_rtc+0x138>)
 80016ec:	705a      	strb	r2, [r3, #1]
	sDate.Date = dec2bin(atoi(dd));
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 ff12 	bl	800951c <atoi>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fed1 	bl	80014a4 <dec2bin>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <set_rtc+0x138>)
 8001708:	709a      	strb	r2, [r3, #2]

	sTime.Hours = dec2bin(atoi(hh));
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f007 ff04 	bl	800951c <atoi>
 8001714:	4603      	mov	r3, r0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fec3 	bl	80014a4 <dec2bin>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <set_rtc+0x13c>)
 8001724:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = dec2bin(atoi(min));
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4618      	mov	r0, r3
 800172c:	f007 fef6 	bl	800951c <atoi>
 8001730:	4603      	mov	r3, r0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff feb5 	bl	80014a4 <dec2bin>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <set_rtc+0x13c>)
 8001740:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = dec2bin(atoi(ss));
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4618      	mov	r0, r3
 8001748:	f007 fee8 	bl	800951c <atoi>
 800174c:	4603      	mov	r3, r0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fea7 	bl	80014a4 <dec2bin>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <set_rtc+0x13c>)
 800175c:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800175e:	2201      	movs	r2, #1
 8001760:	4906      	ldr	r1, [pc, #24]	; (800177c <set_rtc+0x138>)
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <set_rtc+0x140>)
 8001764:	f004 fca0 	bl	80060a8 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001768:	2201      	movs	r2, #1
 800176a:	4905      	ldr	r1, [pc, #20]	; (8001780 <set_rtc+0x13c>)
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <set_rtc+0x140>)
 800176e:	f004 fba3 	bl	8005eb8 <HAL_RTC_SetTime>
}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200001f0 	.word	0x200001f0
 8001780:	200001dc 	.word	0x200001dc
 8001784:	200004a0 	.word	0x200004a0

08001788 <set_time_button_ui>:
#endif

// 모드 셀렉트 모드 추가 과제 ㅁㅁㅁㅁ
#if 1
void set_time_button_ui(void)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af02      	add	r7, sp, #8
	char lcd_buff[40];

	if (lcd_display_mode_flag == 3)
 800178e:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <set_time_button_ui+0x13c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b03      	cmp	r3, #3
 8001794:	f040 8091 	bne.w	80018ba <set_time_button_ui+0x132>
	{
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)				// from led.c 38
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	484a      	ldr	r0, [pc, #296]	; (80018c8 <set_time_button_ui+0x140>)
 80017a0:	f7ff fc52 	bl	8001048 <get_button>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d113      	bne.n	80017d2 <set_time_button_ui+0x4a>
		{
			// 시간정보 modify
			mTime.Hours++;
 80017aa:	4b48      	ldr	r3, [pc, #288]	; (80018cc <set_time_button_ui+0x144>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <set_time_button_ui+0x144>)
 80017b4:	701a      	strb	r2, [r3, #0]
			mTime.Hours %= 24;
 80017b6:	4b45      	ldr	r3, [pc, #276]	; (80018cc <set_time_button_ui+0x144>)
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <set_time_button_ui+0x148>)
 80017bc:	fba3 1302 	umull	r1, r3, r3, r2
 80017c0:	0919      	lsrs	r1, r3, #4
 80017c2:	460b      	mov	r3, r1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	440b      	add	r3, r1
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <set_time_button_ui+0x144>)
 80017d0:	701a      	strb	r2, [r3, #0]
		}
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d8:	483b      	ldr	r0, [pc, #236]	; (80018c8 <set_time_button_ui+0x140>)
 80017da:	f7ff fc35 	bl	8001048 <get_button>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d113      	bne.n	800180c <set_time_button_ui+0x84>
		{
			// 분정보 modify
			mTime.Minutes++;
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <set_time_button_ui+0x144>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <set_time_button_ui+0x144>)
 80017ee:	705a      	strb	r2, [r3, #1]
			mTime.Minutes %= 60;
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <set_time_button_ui+0x144>)
 80017f2:	785a      	ldrb	r2, [r3, #1]
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <set_time_button_ui+0x14c>)
 80017f6:	fba3 1302 	umull	r1, r3, r3, r2
 80017fa:	0959      	lsrs	r1, r3, #5
 80017fc:	460b      	mov	r3, r1
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a5b      	subs	r3, r3, r1
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <set_time_button_ui+0x144>)
 800180a:	705a      	strb	r2, [r3, #1]

		}
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 800180c:	2202      	movs	r2, #2
 800180e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001812:	482d      	ldr	r0, [pc, #180]	; (80018c8 <set_time_button_ui+0x140>)
 8001814:	f7ff fc18 	bl	8001048 <get_button>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d113      	bne.n	8001846 <set_time_button_ui+0xbe>
		{
			// 초정보 modify
			mTime.Seconds++;
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <set_time_button_ui+0x144>)
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	3301      	adds	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <set_time_button_ui+0x144>)
 8001828:	709a      	strb	r2, [r3, #2]
			mTime.Seconds %= 60;
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <set_time_button_ui+0x144>)
 800182c:	789a      	ldrb	r2, [r3, #2]
 800182e:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <set_time_button_ui+0x14c>)
 8001830:	fba3 1302 	umull	r1, r3, r3, r2
 8001834:	0959      	lsrs	r1, r3, #5
 8001836:	460b      	mov	r3, r1
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a5b      	subs	r3, r3, r1
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <set_time_button_ui+0x144>)
 8001844:	709a      	strb	r2, [r3, #2]

		}
		sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
				bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <set_time_button_ui+0x144>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe0e 	bl	800146c <bin2dec>
 8001850:	4603      	mov	r3, r0
		sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8001852:	461c      	mov	r4, r3
				bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <set_time_button_ui+0x144>)
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fe07 	bl	800146c <bin2dec>
 800185e:	4603      	mov	r3, r0
		sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8001860:	461d      	mov	r5, r3
				bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <set_time_button_ui+0x144>)
 8001864:	789b      	ldrb	r3, [r3, #2]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fe00 	bl	800146c <bin2dec>
 800186c:	4603      	mov	r3, r0
		sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 800186e:	4638      	mov	r0, r7
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	462b      	mov	r3, r5
 8001874:	4622      	mov	r2, r4
 8001876:	4918      	ldr	r1, [pc, #96]	; (80018d8 <set_time_button_ui+0x150>)
 8001878:	f007 ff14 	bl	80096a4 <siprintf>
		move_cursor(1,0);
 800187c:	2100      	movs	r1, #0
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fddc 	bl	800143c <move_cursor>
		lcd_string(lcd_buff);
 8001884:	463b      	mov	r3, r7
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fdc3 	bl	8001412 <lcd_string>


		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 800188c:	2203      	movs	r2, #3
 800188e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <set_time_button_ui+0x140>)
 8001894:	f7ff fbd8 	bl	8001048 <get_button>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <set_time_button_ui+0x132>
		{
			// 완료 버튼
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800189e:	2201      	movs	r2, #1
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <set_time_button_ui+0x154>)
 80018a2:	480f      	ldr	r0, [pc, #60]	; (80018e0 <set_time_button_ui+0x158>)
 80018a4:	f004 fb08 	bl	8005eb8 <HAL_RTC_SetTime>
			mTime.Hours = 0;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <set_time_button_ui+0x144>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
			mTime.Minutes = 0;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <set_time_button_ui+0x144>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	705a      	strb	r2, [r3, #1]
			mTime.Seconds = 0;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <set_time_button_ui+0x144>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	709a      	strb	r2, [r3, #2]
			HAL_Delay(1000);								// 1초
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);		// low
*/
		}
	}
}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bdb0      	pop	{r4, r5, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001d4 	.word	0x200001d4
 80018c8:	40021000 	.word	0x40021000
 80018cc:	200001c0 	.word	0x200001c0
 80018d0:	aaaaaaab 	.word	0xaaaaaaab
 80018d4:	88888889 	.word	0x88888889
 80018d8:	0800ab48 	.word	0x0800ab48
 80018dc:	200001dc 	.word	0x200001dc
 80018e0:	200004a0 	.word	0x200004a0

080018e4 <led_flower_on>:
#endif
	}
}

void led_flower_on(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	static int i = 0;

	if (t1ms_counter >= 200)
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <led_flower_on+0x7c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2bc7      	cmp	r3, #199	; 0xc7
 80018ee:	dd1d      	ble.n	800192c <led_flower_on+0x48>
	{
		t1ms_counter = 0;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <led_flower_on+0x7c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, 1);
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <led_flower_on+0x80>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2210      	movs	r2, #16
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	2201      	movs	r2, #1
 8001904:	4619      	mov	r1, r3
 8001906:	4818      	ldr	r0, [pc, #96]	; (8001968 <led_flower_on+0x84>)
 8001908:	f002 fdf0 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, 1);
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <led_flower_on+0x80>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2208      	movs	r2, #8
 8001912:	fa42 f303 	asr.w	r3, r2, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	2201      	movs	r2, #1
 800191a:	4619      	mov	r1, r3
 800191c:	4812      	ldr	r0, [pc, #72]	; (8001968 <led_flower_on+0x84>)
 800191e:	f002 fde5 	bl	80044ec <HAL_GPIO_WritePin>
		i++;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <led_flower_on+0x80>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <led_flower_on+0x80>)
 800192a:	6013      	str	r3, [r2, #0]
	}
	if (i > 4)
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <led_flower_on+0x80>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b04      	cmp	r3, #4
 8001932:	dd13      	ble.n	800195c <led_flower_on+0x78>
	{
		i = 0;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <led_flower_on+0x80>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
		func_index = (func_index + 1) % 8;
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <led_flower_on+0x88>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	425a      	negs	r2, r3
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	f002 0207 	and.w	r2, r2, #7
 800194a:	bf58      	it	pl
 800194c:	4253      	negpl	r3, r2
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <led_flower_on+0x88>)
 8001950:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	21ff      	movs	r1, #255	; 0xff
 8001956:	4804      	ldr	r0, [pc, #16]	; (8001968 <led_flower_on+0x84>)
 8001958:	f002 fdc8 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_Delay(j*100);
		j++;
	}												// original code>
#endif
*/
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000c14 	.word	0x20000c14
 8001964:	2000020c 	.word	0x2000020c
 8001968:	40020c00 	.word	0x40020c00
 800196c:	20000208 	.word	0x20000208

08001970 <led_flower_off>:

void led_flower_off(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	static int i = 0;

	if (t1ms_counter >= 200)
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <led_flower_off+0x7c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2bc7      	cmp	r3, #199	; 0xc7
 800197a:	dd1d      	ble.n	80019b8 <led_flower_off+0x48>
	{
		t1ms_counter = 0;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <led_flower_off+0x7c>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 0);
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <led_flower_off+0x80>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	b29b      	uxth	r3, r3
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4818      	ldr	r0, [pc, #96]	; (80019f4 <led_flower_off+0x84>)
 8001994:	f002 fdaa 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 0);
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <led_flower_off+0x80>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	fa42 f303 	asr.w	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4812      	ldr	r0, [pc, #72]	; (80019f4 <led_flower_off+0x84>)
 80019aa:	f002 fd9f 	bl	80044ec <HAL_GPIO_WritePin>
		i++;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <led_flower_off+0x80>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <led_flower_off+0x80>)
 80019b6:	6013      	str	r3, [r2, #0]
	}
	if (i > 4)
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <led_flower_off+0x80>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	dd13      	ble.n	80019e8 <led_flower_off+0x78>
	{
		i = 0;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <led_flower_off+0x80>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
		func_index = (func_index + 1) % 8;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <led_flower_off+0x88>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	425a      	negs	r2, r3
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	f002 0207 	and.w	r2, r2, #7
 80019d6:	bf58      	it	pl
 80019d8:	4253      	negpl	r3, r2
 80019da:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <led_flower_off+0x88>)
 80019dc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 1);
 80019de:	2201      	movs	r2, #1
 80019e0:	21ff      	movs	r1, #255	; 0xff
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <led_flower_off+0x84>)
 80019e4:	f002 fd82 	bl	80044ec <HAL_GPIO_WritePin>
	}
	led_all_off();
	HAL_Delay(50);									// original code>
#endif
*/
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000c14 	.word	0x20000c14
 80019f0:	20000210 	.word	0x20000210
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	20000208 	.word	0x20000208

080019fc <led_keepon_up>:

void led_keepon_up(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	static int i = 0;

	if (t1ms_counter >= 200)
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <led_keepon_up+0x68>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2bc7      	cmp	r3, #199	; 0xc7
 8001a06:	dd12      	ble.n	8001a2e <led_keepon_up+0x32>
	{
		t1ms_counter = 0;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <led_keepon_up+0x68>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <led_keepon_up+0x6c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4813      	ldr	r0, [pc, #76]	; (8001a6c <led_keepon_up+0x70>)
 8001a20:	f002 fd64 	bl	80044ec <HAL_GPIO_WritePin>
		i++;
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <led_keepon_up+0x6c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <led_keepon_up+0x6c>)
 8001a2c:	6013      	str	r3, [r2, #0]
	}
	if (i > 8)
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <led_keepon_up+0x6c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	dd13      	ble.n	8001a5e <led_keepon_up+0x62>
	{
		i = 0;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <led_keepon_up+0x6c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
		func_index = (func_index + 1) % 8;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <led_keepon_up+0x74>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	425a      	negs	r2, r3
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	f002 0207 	and.w	r2, r2, #7
 8001a4c:	bf58      	it	pl
 8001a4e:	4253      	negpl	r3, r2
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <led_keepon_up+0x74>)
 8001a52:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	21ff      	movs	r1, #255	; 0xff
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <led_keepon_up+0x70>)
 8001a5a:	f002 fd47 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}												// original code>
#endif
*/
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000c14 	.word	0x20000c14
 8001a68:	20000214 	.word	0x20000214
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	20000208 	.word	0x20000208

08001a74 <led_keepon_down>:

void led_keepon_down(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	static int i = 0;

	if (t1ms_counter >= 200)
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <led_keepon_down+0x68>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2bc7      	cmp	r3, #199	; 0xc7
 8001a7e:	dd12      	ble.n	8001aa6 <led_keepon_down+0x32>
	{
		t1ms_counter = 0;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <led_keepon_down+0x68>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <led_keepon_down+0x6c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	fa42 f303 	asr.w	r3, r2, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <led_keepon_down+0x70>)
 8001a98:	f002 fd28 	bl	80044ec <HAL_GPIO_WritePin>
		i++;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <led_keepon_down+0x6c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <led_keepon_down+0x6c>)
 8001aa4:	6013      	str	r3, [r2, #0]
	}
	if (i > 8)
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <led_keepon_down+0x6c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	dd13      	ble.n	8001ad6 <led_keepon_down+0x62>
	{
		i = 0;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <led_keepon_down+0x6c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
		func_index = (func_index + 1) % 8;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <led_keepon_down+0x74>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	425a      	negs	r2, r3
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	f002 0207 	and.w	r2, r2, #7
 8001ac4:	bf58      	it	pl
 8001ac6:	4253      	negpl	r3, r2
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <led_keepon_down+0x74>)
 8001aca:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	21ff      	movs	r1, #255	; 0xff
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <led_keepon_down+0x70>)
 8001ad2:	f002 fd0b 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}												// original code>
#endif
*/
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000c14 	.word	0x20000c14
 8001ae0:	20000218 	.word	0x20000218
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	20000208 	.word	0x20000208

08001aec <led_on_up>:

// LED 0->1->2->3->4->5->6->7		해당되는 bit의 LED만 ON
void led_on_up(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	static int i = 0;

	if (t1ms_counter >= 200)						// for 문 찢어놓음				// 119 46:00
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <led_on_up+0x68>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2bc7      	cmp	r3, #199	; 0xc7
 8001af6:	dd17      	ble.n	8001b28 <led_on_up+0x3c>
	{
		t1ms_counter = 0;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <led_on_up+0x68>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	21ff      	movs	r1, #255	; 0xff
 8001b02:	4815      	ldr	r0, [pc, #84]	; (8001b58 <led_on_up+0x6c>)
 8001b04:	f002 fcf2 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <led_on_up+0x70>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2201      	movs	r2, #1
 8001b16:	4619      	mov	r1, r3
 8001b18:	480f      	ldr	r0, [pc, #60]	; (8001b58 <led_on_up+0x6c>)
 8001b1a:	f002 fce7 	bl	80044ec <HAL_GPIO_WritePin>
		i++;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <led_on_up+0x70>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <led_on_up+0x70>)
 8001b26:	6013      	str	r3, [r2, #0]
	}
	if (i > 8)
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <led_on_up+0x70>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	dd0e      	ble.n	8001b4e <led_on_up+0x62>
	{
		i = 0;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <led_on_up+0x70>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
		func_index = (func_index + 1) % 8;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <led_on_up+0x74>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	425a      	negs	r2, r3
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	f002 0207 	and.w	r2, r2, #7
 8001b46:	bf58      	it	pl
 8001b48:	4253      	negpl	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <led_on_up+0x74>)
 8001b4c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}												// original code>
#endif
*/
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000c14 	.word	0x20000c14
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	2000021c 	.word	0x2000021c
 8001b60:	20000208 	.word	0x20000208

08001b64 <led_on_down>:

// LED 7->6->5->4->3->2->1->0		해당되는 bit의 LED만 ON
void led_on_down(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	static int i = 0;

	if (t1ms_counter >= 200)
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <led_on_down+0x68>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2bc7      	cmp	r3, #199	; 0xc7
 8001b6e:	dd17      	ble.n	8001ba0 <led_on_down+0x3c>
	{
		t1ms_counter = 0;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <led_on_down+0x68>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	21ff      	movs	r1, #255	; 0xff
 8001b7a:	4815      	ldr	r0, [pc, #84]	; (8001bd0 <led_on_down+0x6c>)
 8001b7c:	f002 fcb6 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <led_on_down+0x70>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	fa42 f303 	asr.w	r3, r2, r3
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <led_on_down+0x6c>)
 8001b92:	f002 fcab 	bl	80044ec <HAL_GPIO_WritePin>
		i++;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <led_on_down+0x70>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <led_on_down+0x70>)
 8001b9e:	6013      	str	r3, [r2, #0]
	}
	if (i > 8)
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <led_on_down+0x70>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	dd0e      	ble.n	8001bc6 <led_on_down+0x62>
	{
		i = 0;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <led_on_down+0x70>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
		func_index = (func_index + 1) % 8;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <led_on_down+0x74>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	425a      	negs	r2, r3
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	f002 0207 	and.w	r2, r2, #7
 8001bbe:	bf58      	it	pl
 8001bc0:	4253      	negpl	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <led_on_down+0x74>)
 8001bc4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);		// 오른쪽으로 shift
		HAL_Delay(200);
	}												// original code>
#endif
*/
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000c14 	.word	0x20000c14
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	20000220 	.word	0x20000220
 8001bd8:	20000208 	.word	0x20000208

08001bdc <led_all_on>:

void led_all_on(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
//			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	if (t1ms_counter >= 200)
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <led_all_on+0x28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2bc7      	cmp	r3, #199	; 0xc7
 8001be6:	dd0a      	ble.n	8001bfe <led_all_on+0x22>
	{
		t1ms_counter = 0;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <led_all_on+0x28>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 1);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	21ff      	movs	r1, #255	; 0xff
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <led_all_on+0x2c>)
 8001bf4:	f002 fc7a 	bl	80044ec <HAL_GPIO_WritePin>
		func_index = LED_ALL_OFF;
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <led_all_on+0x30>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
	}
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000c14 	.word	0x20000c14
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	20000208 	.word	0x20000208

08001c10 <led_all_off>:

void led_all_off(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
//			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	if (t1ms_counter >= 200)
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <led_all_off+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2bc7      	cmp	r3, #199	; 0xc7
 8001c1a:	dd0a      	ble.n	8001c32 <led_all_off+0x22>
	{
		t1ms_counter = 0;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <led_all_off+0x28>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0xFF, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	21ff      	movs	r1, #255	; 0xff
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <led_all_off+0x2c>)
 8001c28:	f002 fc60 	bl	80044ec <HAL_GPIO_WritePin>
		func_index = LED_FLOWER_ON;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <led_all_off+0x30>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	601a      	str	r2, [r3, #0]
	}
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000c14 	.word	0x20000c14
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	20000208 	.word	0x20000208

08001c44 <HAL_SYSTICK_Handler>:
// ARM default timer
// enter here every 1ms
//==============================================
volatile int t1ms_counter = 0;						// volatile : disable optimize
void HAL_SYSTICK_Handler(void)						// func
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	t1ms_counter++;									// 1ms timer
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_SYSTICK_Handler+0x18>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_SYSTICK_Handler+0x18>)
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	20000c14 	.word	0x20000c14

08001c60 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001c68:	1d39      	adds	r1, r7, #4
 8001c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <__io_putchar+0x20>)
 8001c72:	f006 f926 	bl	8007ec2 <HAL_UART_Transmit>

  return ch;
 8001c76:	687b      	ldr	r3, [r7, #4]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000670 	.word	0x20000670

08001c84 <HAL_TIM_PeriodElapsedCallback>:
//----------  printf end -----------------------------------------------------------------------//
// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs
// volatile int TIM10_10ms_counter = 0;							// variation move up line-61
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		// Call back function (move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)								//
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIM10_10ms_counter++;									// 10ms timer counter (increase)
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c9e:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;									// 10ms ultrasonic counter trigger timer
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ca8:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_led++;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cb2:	6013      	str	r3, [r2, #0]
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40014400 	.word	0x40014400
 8001cc4:	20000c08 	.word	0x20000c08
 8001cc8:	20000c0c 	.word	0x20000c0c
 8001ccc:	20000c10 	.word	0x20000c10

08001cd0 <delay_us>:

void delay_us(unsigned long us)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);							// tim11 clear				// H/W counter read pulse
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <delay_us+0x2c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim11) < us)												// cycle reputation 		// 129
 8001ce0:	bf00      	nop
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <delay_us+0x2c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d8f9      	bhi.n	8001ce2 <delay_us+0x12>
		;
}
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20000628 	.word	0x20000628

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f001 fccc 	bl	80036a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f000 f870 	bl	8001dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0c:	f000 fc26 	bl	800255c <MX_GPIO_Init>
  MX_ETH_Init();
 8001d10:	f000 f8d8 	bl	8001ec4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001d14:	f000 fba0 	bl	8002458 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d18:	f000 fbf2 	bl	8002500 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8001d1c:	f000 fbc6 	bl	80024ac <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001d20:	f000 fb52 	bl	80023c8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001d24:	f000 fb74 	bl	8002410 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001d28:	f000 fa0e 	bl	8002148 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001d2c:	f000 f918 	bl	8001f60 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001d30:	f000 fa5e 	bl	80021f0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001d34:	f000 f9ae 	bl	8002094 <MX_TIM2_Init>
  MX_RTC_Init();
 8001d38:	f000 f952 	bl	8001fe0 <MX_RTC_Init>
  MX_TIM5_Init();								//
 8001d3c:	f000 face 	bl	80022dc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);		// assigning to RX INT(interrupt)
 8001d40:	2201      	movs	r2, #1
 8001d42:	491e      	ldr	r1, [pc, #120]	; (8001dbc <main+0xbc>)
 8001d44:	481e      	ldr	r0, [pc, #120]	; (8001dc0 <main+0xc0>)
 8001d46:	f006 f94e 	bl	8007fe6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);		// for BT assigning to RX INT(interrupt)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	491d      	ldr	r1, [pc, #116]	; (8001dc4 <main+0xc4>)
 8001d4e:	481e      	ldr	r0, [pc, #120]	; (8001dc8 <main+0xc8>)
 8001d50:	f006 f949 	bl	8007fe6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);					// ADD_Juhee_1011
 8001d54:	481d      	ldr	r0, [pc, #116]	; (8001dcc <main+0xcc>)
 8001d56:	f004 fb87 	bl	8006468 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);					// ADD_Juhee_1011
 8001d5a:	481d      	ldr	r0, [pc, #116]	; (8001dd0 <main+0xd0>)
 8001d5c:	f004 fb84 	bl	8006468 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);		// for count pulse (rising edge & falling edge) -> interrupt
 8001d60:	2100      	movs	r1, #0
 8001d62:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <main+0xd4>)
 8001d64:	f004 fede 	bl	8006b24 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);			// for DC motor PWM control
 8001d68:	2100      	movs	r1, #0
 8001d6a:	481b      	ldr	r0, [pc, #108]	; (8001dd8 <main+0xd8>)
 8001d6c:	f004 fd74 	bl	8006858 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);				// for SERVO motor PWM control
 8001d70:	2100      	movs	r1, #0
 8001d72:	481a      	ldr	r0, [pc, #104]	; (8001ddc <main+0xdc>)
 8001d74:	f004 fc38 	bl	80065e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);					// PIEZO BUzzer (Pinout -> Channel:4)
 8001d78:	210c      	movs	r1, #12
 8001d7a:	4819      	ldr	r0, [pc, #100]	; (8001de0 <main+0xe0>)
 8001d7c:	f004 fc34 	bl	80065e8 <HAL_TIM_PWM_Start>

DHT11_Init();								// clear
 8001d80:	f7ff f856 	bl	8000e30 <DHT11_Init>
i2c_lcd_init();								// clear
 8001d84:	f7ff fb2c 	bl	80013e0 <i2c_lcd_init>

TIM10_10ms_counter = 0;								// for clear
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <main+0xe4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
TIM10_10ms_counter_led = 0;
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <main+0xe8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
//	printf("led_main() start !!!\n");  	  	  	  	// test code
//  led_main();										// write only func name
//  DHT11_main();									// test code
//	i2c_lcd_main();									// test -> Hello World print check -> delete
//	servo_motor_test_main();					// for servo test code -> infinite loop(lcd on x)
buzzer_main();
 8001d94:	f7ff f99e 	bl	80010d4 <buzzer_main>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT11_processing();	  							// all func cycle
 8001d98:	f7fe fff2 	bl	8000d80 <DHT11_processing>
	  pc_command_processing();							// call cycle
 8001d9c:	f001 fa8c 	bl	80032b8 <pc_command_processing>
	  bt_command_processing();							// call
 8001da0:	f001 fb28 	bl	80033f4 <bt_command_processing>
	  ultrasonic_processing();
 8001da4:	f001 fbd8 	bl	8003558 <ultrasonic_processing>
	  dcmotor_pwm_control();
 8001da8:	f7ff fa1e 	bl	80011e8 <dcmotor_pwm_control>
	  get_rtc();										//
 8001dac:	f7ff fb9e 	bl	80014ec <get_rtc>
	  lcd_display_mode_select();						//
 8001db0:	f7ff f8f2 	bl	8000f98 <lcd_display_mode_select>
	  set_time_button_ui();								//
 8001db4:	f7ff fce8 	bl	8001788 <set_time_button_ui>
	  DHT11_processing();	  							// all func cycle
 8001db8:	e7ee      	b.n	8001d98 <main+0x98>
 8001dba:	bf00      	nop
 8001dbc:	20000c04 	.word	0x20000c04
 8001dc0:	20000670 	.word	0x20000670
 8001dc4:	20000c05 	.word	0x20000c05
 8001dc8:	200006b4 	.word	0x200006b4
 8001dcc:	200005e0 	.word	0x200005e0
 8001dd0:	20000628 	.word	0x20000628
 8001dd4:	20000508 	.word	0x20000508
 8001dd8:	20000550 	.word	0x20000550
 8001ddc:	200004c0 	.word	0x200004c0
 8001de0:	20000598 	.word	0x20000598
 8001de4:	20000c08 	.word	0x20000c08
 8001de8:	20000c10 	.word	0x20000c10

08001dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b094      	sub	sp, #80	; 0x50
 8001df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df2:	f107 0320 	add.w	r3, r7, #32
 8001df6:	2230      	movs	r2, #48	; 0x30
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f007 fbbc 	bl	8009578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <SystemClock_Config+0xd4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <SystemClock_Config+0xd4>)
 8001e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <SystemClock_Config+0xd4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e48:	2309      	movs	r3, #9
 8001e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e52:	2301      	movs	r3, #1
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e56:	2302      	movs	r3, #2
 8001e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e60:	2304      	movs	r3, #4
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e64:	23a8      	movs	r3, #168	; 0xa8
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 f951 	bl	800511c <HAL_RCC_OscConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e80:	f000 fc9a 	bl	80027b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e84:	230f      	movs	r3, #15
 8001e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2105      	movs	r1, #5
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fbb2 	bl	800560c <HAL_RCC_ClockConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001eae:	f000 fc83 	bl	80027b8 <Error_Handler>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3750      	adds	r7, #80	; 0x50
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <MX_ETH_Init+0x84>)
 8001eca:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <MX_ETH_Init+0x88>)
 8001ecc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <MX_ETH_Init+0x8c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_ETH_Init+0x8c>)
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <MX_ETH_Init+0x8c>)
 8001edc:	22e1      	movs	r2, #225	; 0xe1
 8001ede:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <MX_ETH_Init+0x8c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <MX_ETH_Init+0x8c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <MX_ETH_Init+0x8c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_ETH_Init+0x84>)
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <MX_ETH_Init+0x8c>)
 8001ef6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_ETH_Init+0x84>)
 8001efa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001efe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_ETH_Init+0x84>)
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <MX_ETH_Init+0x90>)
 8001f04:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_ETH_Init+0x84>)
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <MX_ETH_Init+0x94>)
 8001f0a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_ETH_Init+0x84>)
 8001f0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f12:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <MX_ETH_Init+0x84>)
 8001f16:	f001 fdfd 	bl	8003b14 <HAL_ETH_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001f20:	f000 fc4a 	bl	80027b8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f24:	2238      	movs	r2, #56	; 0x38
 8001f26:	2100      	movs	r1, #0
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <MX_ETH_Init+0x98>)
 8001f2a:	f007 fb25 	bl	8009578 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_ETH_Init+0x98>)
 8001f30:	2221      	movs	r2, #33	; 0x21
 8001f32:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_ETH_Init+0x98>)
 8001f36:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001f3a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <MX_ETH_Init+0x98>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000039c 	.word	0x2000039c
 8001f4c:	40028000 	.word	0x40028000
 8001f50:	20000c18 	.word	0x20000c18
 8001f54:	200002fc 	.word	0x200002fc
 8001f58:	2000025c 	.word	0x2000025c
 8001f5c:	20000224 	.word	0x20000224

08001f60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <MX_I2C1_Init+0x78>)
 8001f68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <MX_I2C1_Init+0x7c>)
 8001f6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001f9e:	f002 fad9 	bl	8004554 <HAL_I2C_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fa8:	f000 fc06 	bl	80027b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fac:	2100      	movs	r1, #0
 8001fae:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001fb0:	f002 ff1b 	bl	8004dea <HAL_I2CEx_ConfigAnalogFilter>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001fba:	f000 fbfd 	bl	80027b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_I2C1_Init+0x74>)
 8001fc2:	f002 ff4e 	bl	8004e62 <HAL_I2CEx_ConfigDigitalFilter>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001fcc:	f000 fbf4 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000044c 	.word	0x2000044c
 8001fd8:	40005400 	.word	0x40005400
 8001fdc:	000186a0 	.word	0x000186a0

08001fe0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <MX_RTC_Init+0xac>)
 8001ffa:	4a25      	ldr	r2, [pc, #148]	; (8002090 <MX_RTC_Init+0xb0>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <MX_RTC_Init+0xac>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <MX_RTC_Init+0xac>)
 8002006:	227f      	movs	r2, #127	; 0x7f
 8002008:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <MX_RTC_Init+0xac>)
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <MX_RTC_Init+0xac>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <MX_RTC_Init+0xac>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <MX_RTC_Init+0xac>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002022:	481a      	ldr	r0, [pc, #104]	; (800208c <MX_RTC_Init+0xac>)
 8002024:	f003 fed2 	bl	8005dcc <HAL_RTC_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800202e:	f000 fbc3 	bl	80027b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8002032:	2309      	movs	r3, #9
 8002034:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8002036:	2338      	movs	r3, #56	; 0x38
 8002038:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800203a:	2300      	movs	r3, #0
 800203c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2201      	movs	r2, #1
 800204a:	4619      	mov	r1, r3
 800204c:	480f      	ldr	r0, [pc, #60]	; (800208c <MX_RTC_Init+0xac>)
 800204e:	f003 ff33 	bl	8005eb8 <HAL_RTC_SetTime>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002058:	f000 fbae 	bl	80027b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800205c:	2301      	movs	r3, #1
 800205e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8002060:	2310      	movs	r3, #16
 8002062:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8002064:	2316      	movs	r3, #22
 8002066:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8002068:	2323      	movs	r3, #35	; 0x23
 800206a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <MX_RTC_Init+0xac>)
 8002074:	f004 f818 	bl	80060a8 <HAL_RTC_SetDate>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800207e:	f000 fb9b 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200004a0 	.word	0x200004a0
 8002090:	40002800 	.word	0x40002800

08002094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209a:	f107 0320 	add.w	r3, r7, #32
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	615a      	str	r2, [r3, #20]
 80020b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <MX_TIM2_Init+0xb0>)
 80020b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <MX_TIM2_Init+0xb0>)
 80020c0:	f240 628f 	movw	r2, #1679	; 0x68f
 80020c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_TIM2_Init+0xb0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_TIM2_Init+0xb0>)
 80020ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <MX_TIM2_Init+0xb0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MX_TIM2_Init+0xb0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020e0:	4818      	ldr	r0, [pc, #96]	; (8002144 <MX_TIM2_Init+0xb0>)
 80020e2:	f004 fa31 	bl	8006548 <HAL_TIM_PWM_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80020ec:	f000 fb64 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f8:	f107 0320 	add.w	r3, r7, #32
 80020fc:	4619      	mov	r1, r3
 80020fe:	4811      	ldr	r0, [pc, #68]	; (8002144 <MX_TIM2_Init+0xb0>)
 8002100:	f005 fe02 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800210a:	f000 fb55 	bl	80027b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210e:	2360      	movs	r3, #96	; 0x60
 8002110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002112:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	4619      	mov	r1, r3
 8002126:	4807      	ldr	r0, [pc, #28]	; (8002144 <MX_TIM2_Init+0xb0>)
 8002128:	f004 ffc8 	bl	80070bc <HAL_TIM_PWM_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002132:	f000 fb41 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002136:	4803      	ldr	r0, [pc, #12]	; (8002144 <MX_TIM2_Init+0xb0>)
 8002138:	f000 fd9c 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200004c0 	.word	0x200004c0

08002148 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002158:	463b      	mov	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <MX_TIM3_Init+0xa0>)
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <MX_TIM3_Init+0xa4>)
 8002168:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <MX_TIM3_Init+0xa0>)
 800216c:	2253      	movs	r2, #83	; 0x53
 800216e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_TIM3_Init+0xa0>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_TIM3_Init+0xa0>)
 8002178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_TIM3_Init+0xa0>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <MX_TIM3_Init+0xa0>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800218a:	4817      	ldr	r0, [pc, #92]	; (80021e8 <MX_TIM3_Init+0xa0>)
 800218c:	f004 fc7a 	bl	8006a84 <HAL_TIM_IC_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002196:	f000 fb0f 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	4619      	mov	r1, r3
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <MX_TIM3_Init+0xa0>)
 80021aa:	f005 fdad 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80021b4:	f000 fb00 	bl	80027b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80021b8:	230a      	movs	r3, #10
 80021ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021bc:	2301      	movs	r3, #1
 80021be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <MX_TIM3_Init+0xa0>)
 80021d0:	f004 fed8 	bl	8006f84 <HAL_TIM_IC_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80021da:	f000 faed 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000508 	.word	0x20000508
 80021ec:	40000400 	.word	0x40000400

080021f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002220:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002222:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <MX_TIM4_Init+0xe8>)
 8002224:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002228:	f240 3247 	movw	r2, #839	; 0x347
 800222c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002236:	2263      	movs	r2, #99	; 0x63
 8002238:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <MX_TIM4_Init+0xe4>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002246:	4823      	ldr	r0, [pc, #140]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002248:	f004 f8be 	bl	80063c8 <HAL_TIM_Base_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002252:	f000 fab1 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800225c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002260:	4619      	mov	r1, r3
 8002262:	481c      	ldr	r0, [pc, #112]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002264:	f004 ffec 	bl	8007240 <HAL_TIM_ConfigClockSource>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800226e:	f000 faa3 	bl	80027b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002272:	4818      	ldr	r0, [pc, #96]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002274:	f004 f968 	bl	8006548 <HAL_TIM_PWM_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800227e:	f000 fa9b 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	4619      	mov	r1, r3
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <MX_TIM4_Init+0xe4>)
 8002292:	f005 fd39 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800229c:	f000 fa8c 	bl	80027b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a0:	2360      	movs	r3, #96	; 0x60
 80022a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 80022a4:	2345      	movs	r3, #69	; 0x45
 80022a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80022ac:	2304      	movs	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	4619      	mov	r1, r3
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <MX_TIM4_Init+0xe4>)
 80022b8:	f004 ff00 	bl	80070bc <HAL_TIM_PWM_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80022c2:	f000 fa79 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <MX_TIM4_Init+0xe4>)
 80022c8:	f000 fcd4 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 80022cc:	bf00      	nop
 80022ce:	3738      	adds	r7, #56	; 0x38
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000550 	.word	0x20000550
 80022d8:	40000800 	.word	0x40000800

080022dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08e      	sub	sp, #56	; 0x38
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	f107 0320 	add.w	r3, r7, #32
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
 8002308:	615a      	str	r2, [r3, #20]
 800230a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <MX_TIM5_Init+0xe4>)
 800230e:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <MX_TIM5_Init+0xe8>)
 8002310:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8002312:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <MX_TIM5_Init+0xe4>)
 8002314:	2233      	movs	r2, #51	; 0x33
 8002316:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <MX_TIM5_Init+0xe4>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800231e:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <MX_TIM5_Init+0xe4>)
 8002320:	f240 128f 	movw	r2, #399	; 0x18f
 8002324:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <MX_TIM5_Init+0xe4>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <MX_TIM5_Init+0xe4>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002332:	4823      	ldr	r0, [pc, #140]	; (80023c0 <MX_TIM5_Init+0xe4>)
 8002334:	f004 f848 	bl	80063c8 <HAL_TIM_Base_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800233e:	f000 fa3b 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800234c:	4619      	mov	r1, r3
 800234e:	481c      	ldr	r0, [pc, #112]	; (80023c0 <MX_TIM5_Init+0xe4>)
 8002350:	f004 ff76 	bl	8007240 <HAL_TIM_ConfigClockSource>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800235a:	f000 fa2d 	bl	80027b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800235e:	4818      	ldr	r0, [pc, #96]	; (80023c0 <MX_TIM5_Init+0xe4>)
 8002360:	f004 f8f2 	bl	8006548 <HAL_TIM_PWM_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800236a:	f000 fa25 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	4619      	mov	r1, r3
 800237c:	4810      	ldr	r0, [pc, #64]	; (80023c0 <MX_TIM5_Init+0xe4>)
 800237e:	f005 fcc3 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002388:	f000 fa16 	bl	80027b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238c:	2360      	movs	r3, #96	; 0x60
 800238e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8002390:	23c7      	movs	r3, #199	; 0xc7
 8002392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	220c      	movs	r2, #12
 80023a0:	4619      	mov	r1, r3
 80023a2:	4807      	ldr	r0, [pc, #28]	; (80023c0 <MX_TIM5_Init+0xe4>)
 80023a4:	f004 fe8a 	bl	80070bc <HAL_TIM_PWM_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80023ae:	f000 fa03 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <MX_TIM5_Init+0xe4>)
 80023b4:	f000 fc5e 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 80023b8:	bf00      	nop
 80023ba:	3738      	adds	r7, #56	; 0x38
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000598 	.word	0x20000598
 80023c4:	40000c00 	.word	0x40000c00

080023c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_TIM10_Init+0x40>)
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <MX_TIM10_Init+0x44>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <MX_TIM10_Init+0x40>)
 80023d4:	22a7      	movs	r2, #167	; 0xa7
 80023d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <MX_TIM10_Init+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <MX_TIM10_Init+0x40>)
 80023e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80023e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <MX_TIM10_Init+0x40>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <MX_TIM10_Init+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_TIM10_Init+0x40>)
 80023f4:	f003 ffe8 	bl	80063c8 <HAL_TIM_Base_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80023fe:	f000 f9db 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200005e0 	.word	0x200005e0
 800240c:	40014400 	.word	0x40014400

08002410 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_TIM11_Init+0x40>)
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <MX_TIM11_Init+0x44>)
 8002418:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <MX_TIM11_Init+0x40>)
 800241c:	22a7      	movs	r2, #167	; 0xa7
 800241e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_TIM11_Init+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <MX_TIM11_Init+0x40>)
 8002428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800242c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_TIM11_Init+0x40>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_TIM11_Init+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_TIM11_Init+0x40>)
 800243c:	f003 ffc4 	bl	80063c8 <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002446:	f000 f9b7 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000628 	.word	0x20000628
 8002454:	40014800 	.word	0x40014800

08002458 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <MX_USART3_UART_Init+0x50>)
 8002460:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002468:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_USART3_UART_Init+0x4c>)
 8002490:	f005 fcca 	bl	8007e28 <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800249a:	f000 f98d 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000670 	.word	0x20000670
 80024a8:	40004800 	.word	0x40004800

080024ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <MX_USART6_UART_Init+0x50>)
 80024b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024d2:	220c      	movs	r2, #12
 80024d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_USART6_UART_Init+0x4c>)
 80024e4:	f005 fca0 	bl	8007e28 <HAL_UART_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024ee:	f000 f963 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200006b4 	.word	0x200006b4
 80024fc:	40011400 	.word	0x40011400

08002500 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002506:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800250a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250e:	2204      	movs	r2, #4
 8002510:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002514:	2202      	movs	r2, #2
 8002516:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002520:	2202      	movs	r2, #2
 8002522:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002526:	2201      	movs	r2, #1
 8002528:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002538:	2201      	movs	r2, #1
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002544:	f002 fccc 	bl	8004ee0 <HAL_PCD_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800254e:	f000 f933 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200006f8 	.word	0x200006f8

0800255c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a87      	ldr	r2, [pc, #540]	; (8002798 <MX_GPIO_Init+0x23c>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b85      	ldr	r3, [pc, #532]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	4b81      	ldr	r3, [pc, #516]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a80      	ldr	r2, [pc, #512]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	4b7a      	ldr	r3, [pc, #488]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a79      	ldr	r2, [pc, #484]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b77      	ldr	r3, [pc, #476]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a72      	ldr	r2, [pc, #456]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b70      	ldr	r3, [pc, #448]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b6c      	ldr	r3, [pc, #432]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a6b      	ldr	r2, [pc, #428]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025ec:	f043 0320 	orr.w	r3, r3, #32
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b69      	ldr	r3, [pc, #420]	; (8002798 <MX_GPIO_Init+0x23c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a64      	ldr	r2, [pc, #400]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <MX_GPIO_Init+0x23c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	4b57      	ldr	r3, [pc, #348]	; (8002798 <MX_GPIO_Init+0x23c>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a56      	ldr	r2, [pc, #344]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b54      	ldr	r3, [pc, #336]	; (8002798 <MX_GPIO_Init+0x23c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	4851      	ldr	r0, [pc, #324]	; (800279c <MX_GPIO_Init+0x240>)
 8002658:	f001 ff48 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002662:	484f      	ldr	r0, [pc, #316]	; (80027a0 <MX_GPIO_Init+0x244>)
 8002664:	f001 ff42 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002668:	2200      	movs	r2, #0
 800266a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800266e:	484d      	ldr	r0, [pc, #308]	; (80027a4 <MX_GPIO_Init+0x248>)
 8002670:	f001 ff3c 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTER_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 800267a:	484b      	ldr	r0, [pc, #300]	; (80027a8 <MX_GPIO_Init+0x24c>)
 800267c:	f001 ff36 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	4849      	ldr	r0, [pc, #292]	; (80027ac <MX_GPIO_Init+0x250>)
 8002686:	f001 ff31 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800268a:	2200      	movs	r2, #0
 800268c:	21ff      	movs	r1, #255	; 0xff
 800268e:	4848      	ldr	r0, [pc, #288]	; (80027b0 <MX_GPIO_Init+0x254>)
 8002690:	f001 ff2c 	bl	80044ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800269a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80026a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a8:	4619      	mov	r1, r3
 80026aa:	4842      	ldr	r0, [pc, #264]	; (80027b4 <MX_GPIO_Init+0x258>)
 80026ac:	f001 fd5a 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80026b0:	2301      	movs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80026c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c4:	4619      	mov	r1, r3
 80026c6:	4835      	ldr	r0, [pc, #212]	; (800279c <MX_GPIO_Init+0x240>)
 80026c8:	f001 fd4c 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80026cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e2:	4619      	mov	r1, r3
 80026e4:	482e      	ldr	r0, [pc, #184]	; (80027a0 <MX_GPIO_Init+0x244>)
 80026e6:	f001 fd3d 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80026ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002700:	4619      	mov	r1, r3
 8002702:	4828      	ldr	r0, [pc, #160]	; (80027a4 <MX_GPIO_Init+0x248>)
 8002704:	f001 fd2e 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTER_Pin PE13 */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTER_Pin|GPIO_PIN_13;
 8002708:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270e:	2301      	movs	r3, #1
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800271a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271e:	4619      	mov	r1, r3
 8002720:	4821      	ldr	r0, [pc, #132]	; (80027a8 <MX_GPIO_Init+0x24c>)
 8002722:	f001 fd1f 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8002726:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272c:	2300      	movs	r3, #0
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002738:	4619      	mov	r1, r3
 800273a:	481b      	ldr	r0, [pc, #108]	; (80027a8 <MX_GPIO_Init+0x24c>)
 800273c:	f001 fd12 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002754:	4619      	mov	r1, r3
 8002756:	4815      	ldr	r0, [pc, #84]	; (80027ac <MX_GPIO_Init+0x250>)
 8002758:	f001 fd04 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276c:	4619      	mov	r1, r3
 800276e:	480f      	ldr	r0, [pc, #60]	; (80027ac <MX_GPIO_Init+0x250>)
 8002770:	f001 fcf8 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002774:	23ff      	movs	r3, #255	; 0xff
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4809      	ldr	r0, [pc, #36]	; (80027b0 <MX_GPIO_Init+0x254>)
 800278c:	f001 fcea 	bl	8004164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002790:	bf00      	nop
 8002792:	3738      	adds	r7, #56	; 0x38
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40021400 	.word	0x40021400
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40021800 	.word	0x40021800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40020800 	.word	0x40020800

080027b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i
}
 80027be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <Error_Handler+0x8>
	...

080027c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_MspInit+0x4c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_MspInit+0x4c>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_MspInit+0x4c>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_MspInit+0x4c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a08      	ldr	r2, [pc, #32]	; (8002810 <HAL_MspInit+0x4c>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_MspInit+0x4c>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a55      	ldr	r2, [pc, #340]	; (8002988 <HAL_ETH_MspInit+0x174>)
 8002832:	4293      	cmp	r3, r2
 8002834:	f040 80a4 	bne.w	8002980 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_ETH_MspInit+0x178>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002846:	6313      	str	r3, [r2, #48]	; 0x30
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_ETH_MspInit+0x178>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_ETH_MspInit+0x178>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a4b      	ldr	r2, [pc, #300]	; (800298c <HAL_ETH_MspInit+0x178>)
 800285e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b49      	ldr	r3, [pc, #292]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	4b45      	ldr	r3, [pc, #276]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a44      	ldr	r2, [pc, #272]	; (800298c <HAL_ETH_MspInit+0x178>)
 800287a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	4b3e      	ldr	r3, [pc, #248]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4a3d      	ldr	r2, [pc, #244]	; (800298c <HAL_ETH_MspInit+0x178>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6313      	str	r3, [r2, #48]	; 0x30
 800289c:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_ETH_MspInit+0x178>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	4a36      	ldr	r2, [pc, #216]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6313      	str	r3, [r2, #48]	; 0x30
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	4a2f      	ldr	r2, [pc, #188]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	6313      	str	r3, [r2, #48]	; 0x30
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_ETH_MspInit+0x178>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028fc:	2332      	movs	r3, #50	; 0x32
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800290c:	230b      	movs	r3, #11
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	481e      	ldr	r0, [pc, #120]	; (8002990 <HAL_ETH_MspInit+0x17c>)
 8002918:	f001 fc24 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800291c:	2386      	movs	r3, #134	; 0x86
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800292c:	230b      	movs	r3, #11
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	4817      	ldr	r0, [pc, #92]	; (8002994 <HAL_ETH_MspInit+0x180>)
 8002938:	f001 fc14 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800293c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800294e:	230b      	movs	r3, #11
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002956:	4619      	mov	r1, r3
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <HAL_ETH_MspInit+0x184>)
 800295a:	f001 fc03 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800295e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002970:	230b      	movs	r3, #11
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002978:	4619      	mov	r1, r3
 800297a:	4808      	ldr	r0, [pc, #32]	; (800299c <HAL_ETH_MspInit+0x188>)
 800297c:	f001 fbf2 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002980:	bf00      	nop
 8002982:	3738      	adds	r7, #56	; 0x38
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40028000 	.word	0x40028000
 800298c:	40023800 	.word	0x40023800
 8002990:	40020800 	.word	0x40020800
 8002994:	40020000 	.word	0x40020000
 8002998:	40020400 	.word	0x40020400
 800299c:	40021800 	.word	0x40021800

080029a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_I2C_MspInit+0x84>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d12c      	bne.n	8002a1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_I2C_MspInit+0x88>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_I2C_MspInit+0x88>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_I2C_MspInit+0x88>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e4:	2312      	movs	r3, #18
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029f0:	2304      	movs	r3, #4
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	480c      	ldr	r0, [pc, #48]	; (8002a2c <HAL_I2C_MspInit+0x8c>)
 80029fc:	f001 fbb2 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_I2C_MspInit+0x88>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <HAL_I2C_MspInit+0x88>)
 8002a0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_I2C_MspInit+0x88>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40005400 	.word	0x40005400
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020400 	.word	0x40020400

08002a30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	2230      	movs	r2, #48	; 0x30
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f006 fd99 	bl	8009578 <memset>
  if(hrtc->Instance==RTC)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_RTC_MspInit+0x4c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a50:	2320      	movs	r3, #32
 8002a52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 fff4 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a6a:	f7ff fea5 	bl	80027b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RTC_MspInit+0x50>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3738      	adds	r7, #56	; 0x38
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40002800 	.word	0x40002800
 8002a80:	42470e3c 	.word	0x42470e3c

08002a84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a94:	d115      	bne.n	8002ac2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_TIM_PWM_MspInit+0x48>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <HAL_TIM_PWM_MspInit+0x48>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_TIM_PWM_MspInit+0x48>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	201c      	movs	r0, #28
 8002ab8:	f000 ff63 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002abc:	201c      	movs	r0, #28
 8002abe:	f000 ff7c 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_TIM_IC_MspInit+0x94>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d133      	bne.n	8002b5a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_TIM_IC_MspInit+0x98>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <HAL_TIM_IC_MspInit+0x98>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_TIM_IC_MspInit+0x98>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_TIM_IC_MspInit+0x98>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <HAL_TIM_IC_MspInit+0x98>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_TIM_IC_MspInit+0x98>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8002b2a:	2340      	movs	r3, #64	; 0x40
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	4809      	ldr	r0, [pc, #36]	; (8002b6c <HAL_TIM_IC_MspInit+0x9c>)
 8002b46:	f001 fb0d 	bl	8004164 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	201d      	movs	r0, #29
 8002b50:	f000 ff17 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b54:	201d      	movs	r0, #29
 8002b56:	f000 ff30 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b5a:	bf00      	nop
 8002b5c:	3728      	adds	r7, #40	; 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <HAL_TIM_Base_MspInit+0xf0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d116      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a36      	ldr	r2, [pc, #216]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	201e      	movs	r0, #30
 8002ba4:	f000 feed 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ba8:	201e      	movs	r0, #30
 8002baa:	f000 ff06 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002bae:	e052      	b.n	8002c56 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <HAL_TIM_Base_MspInit+0xf8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d116      	bne.n	8002be8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2032      	movs	r0, #50	; 0x32
 8002bdc:	f000 fed1 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002be0:	2032      	movs	r0, #50	; 0x32
 8002be2:	f000 feea 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002be6:	e036      	b.n	8002c56 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_TIM_Base_MspInit+0xfc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d116      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	2019      	movs	r0, #25
 8002c14:	f000 feb5 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c18:	2019      	movs	r0, #25
 8002c1a:	f000 fece 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002c1e:	e01a      	b.n	8002c56 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <HAL_TIM_Base_MspInit+0x100>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d115      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_TIM_Base_MspInit+0xf4>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	201a      	movs	r0, #26
 8002c4c:	f000 fe99 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c50:	201a      	movs	r0, #26
 8002c52:	f000 feb2 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d11e      	bne.n	8002cd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4828      	ldr	r0, [pc, #160]	; (8002d70 <HAL_TIM_MspPostInit+0xfc>)
 8002cce:	f001 fa49 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002cd2:	e047      	b.n	8002d64 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <HAL_TIM_MspPostInit+0x100>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d11f      	bne.n	8002d1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	4818      	ldr	r0, [pc, #96]	; (8002d78 <HAL_TIM_MspPostInit+0x104>)
 8002d18:	f001 fa24 	bl	8004164 <HAL_GPIO_Init>
}
 8002d1c:	e022      	b.n	8002d64 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_TIM_MspPostInit+0x108>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d11d      	bne.n	8002d64 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6313      	str	r3, [r2, #48]	; 0x30
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_TIM_MspPostInit+0xf8>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d44:	2308      	movs	r3, #8
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d54:	2302      	movs	r3, #2
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4804      	ldr	r0, [pc, #16]	; (8002d70 <HAL_TIM_MspPostInit+0xfc>)
 8002d60:	f001 fa00 	bl	8004164 <HAL_GPIO_Init>
}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	40000c00 	.word	0x40000c00

08002d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 031c 	add.w	r3, r7, #28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3a      	ldr	r2, [pc, #232]	; (8002e88 <HAL_UART_MspInit+0x108>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d135      	bne.n	8002e0e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dec:	2307      	movs	r3, #7
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	4826      	ldr	r0, [pc, #152]	; (8002e90 <HAL_UART_MspInit+0x110>)
 8002df8:	f001 f9b4 	bl	8004164 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2027      	movs	r0, #39	; 0x27
 8002e02:	f000 fdbe 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e06:	2027      	movs	r0, #39	; 0x27
 8002e08:	f000 fdd7 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e0c:	e038      	b.n	8002e80 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a20      	ldr	r2, [pc, #128]	; (8002e94 <HAL_UART_MspInit+0x114>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d133      	bne.n	8002e80 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002e22:	f043 0320 	orr.w	r3, r3, #32
 8002e26:	6453      	str	r3, [r2, #68]	; 0x44
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6313      	str	r3, [r2, #48]	; 0x30
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_UART_MspInit+0x10c>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e50:	23c0      	movs	r3, #192	; 0xc0
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e60:	2308      	movs	r3, #8
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	4619      	mov	r1, r3
 8002e6a:	480b      	ldr	r0, [pc, #44]	; (8002e98 <HAL_UART_MspInit+0x118>)
 8002e6c:	f001 f97a 	bl	8004164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	2047      	movs	r0, #71	; 0x47
 8002e76:	f000 fd84 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e7a:	2047      	movs	r0, #71	; 0x47
 8002e7c:	f000 fd9d 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002e80:	bf00      	nop
 8002e82:	3730      	adds	r7, #48	; 0x30
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40004800 	.word	0x40004800
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020c00 	.word	0x40020c00
 8002e94:	40011400 	.word	0x40011400
 8002e98:	40020800 	.word	0x40020800

08002e9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ebc:	d13f      	bne.n	8002f3e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002eda:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002eec:	230a      	movs	r3, #10
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4815      	ldr	r0, [pc, #84]	; (8002f4c <HAL_PCD_MspInit+0xb0>)
 8002ef8:	f001 f934 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f107 0314 	add.w	r3, r7, #20
 8002f0e:	4619      	mov	r1, r3
 8002f10:	480e      	ldr	r0, [pc, #56]	; (8002f4c <HAL_PCD_MspInit+0xb0>)
 8002f12:	f001 f927 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f20:	6353      	str	r3, [r2, #52]	; 0x34
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f30:	6453      	str	r3, [r2, #68]	; 0x44
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_PCD_MspInit+0xac>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020000 	.word	0x40020000

08002f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <NMI_Handler+0x4>

08002f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f5a:	e7fe      	b.n	8002f5a <HardFault_Handler+0x4>

08002f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <MemManage_Handler+0x4>

08002f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f66:	e7fe      	b.n	8002f66 <BusFault_Handler+0x4>

08002f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <UsageFault_Handler+0x4>

08002f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f9c:	f000 fbd2 	bl	8003744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();														// ADD_Juhee_231006
 8002fa0:	f7fe fe50 	bl	8001c44 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fae:	f003 fee1 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200005e0 	.word	0x200005e0

08002fbc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002fc2:	f003 fed7 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000628 	.word	0x20000628

08002fd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <TIM2_IRQHandler+0x10>)
 8002fd6:	f003 fecd 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200004c0 	.word	0x200004c0

08002fe4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <TIM3_IRQHandler+0x10>)
 8002fea:	f003 fec3 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000508 	.word	0x20000508

08002ff8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <TIM4_IRQHandler+0x10>)
 8002ffe:	f003 feb9 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000550 	.word	0x20000550

0800300c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <USART3_IRQHandler+0x10>)
 8003012:	f005 f819 	bl	8008048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000670 	.word	0x20000670

08003020 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003024:	4802      	ldr	r0, [pc, #8]	; (8003030 <TIM5_IRQHandler+0x10>)
 8003026:	f003 fea5 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000598 	.word	0x20000598

08003034 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003038:	4802      	ldr	r0, [pc, #8]	; (8003044 <USART6_IRQHandler+0x10>)
 800303a:	f005 f805 	bl	8008048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	200006b4 	.word	0x200006b4

08003048 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	e00a      	b.n	8003070 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800305a:	f3af 8000 	nop.w
 800305e:	4601      	mov	r1, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	60ba      	str	r2, [r7, #8]
 8003066:	b2ca      	uxtb	r2, r1
 8003068:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	dbf0      	blt.n	800305a <_read+0x12>
  }

  return len;
 8003078:	687b      	ldr	r3, [r7, #4]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e009      	b.n	80030a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	60ba      	str	r2, [r7, #8]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fddf 	bl	8001c60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	dbf1      	blt.n	8003094 <_write+0x12>
  }
  return len;
 80030b0:	687b      	ldr	r3, [r7, #4]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <_close>:

int _close(int file)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030e2:	605a      	str	r2, [r3, #4]
  return 0;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <_isatty>:

int _isatty(int file)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <_sbrk+0x5c>)
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <_sbrk+0x60>)
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <_sbrk+0x64>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <_sbrk+0x64>)
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <_sbrk+0x68>)
 8003144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	429a      	cmp	r2, r3
 8003152:	d207      	bcs.n	8003164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003154:	f006 f9e6 	bl	8009524 <__errno>
 8003158:	4603      	mov	r3, r0
 800315a:	220c      	movs	r2, #12
 800315c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	e009      	b.n	8003178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <_sbrk+0x64>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <_sbrk+0x64>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <_sbrk+0x64>)
 8003174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20030000 	.word	0x20030000
 8003184:	00000400 	.word	0x00000400
 8003188:	20000c20 	.word	0x20000c20
 800318c:	20000ca8 	.word	0x20000ca8

08003190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <SystemInit+0x20>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <SystemInit+0x20>)
 800319c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <HAL_UART_RxCpltCallback>:
	}
}

#else																					// original
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	// PC
	if (huart == &huart3)									// comport master 와 연결된 uart
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a32      	ldr	r2, [pc, #200]	; (8003288 <HAL_UART_RxCpltCallback+0xd4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d12c      	bne.n	800321e <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH)						// 현재까지 들어온 byte 가 40 byte 를 넘지 않으면 save
 80031c4:	4b31      	ldr	r3, [pc, #196]	; (800328c <HAL_UART_RxCpltCallback+0xd8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b27      	cmp	r3, #39	; 0x27
 80031ca:	dc1d      	bgt.n	8003208 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_UART_RxCpltCallback+0xdc>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b0a      	cmp	r3, #10
 80031d2:	d003      	beq.n	80031dc <HAL_UART_RxCpltCallback+0x28>
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_UART_RxCpltCallback+0xdc>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b0d      	cmp	r3, #13
 80031da:	d10b      	bne.n	80031f4 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; 						// '\0' 을 넣음
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_UART_RxCpltCallback+0xd8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_UART_RxCpltCallback+0xe0>)
 80031e2:	2100      	movs	r1, #0
 80031e4:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag = 1;					//  new line 을 만났다는 flag 를 set 한다.
 80031e6:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <HAL_UART_RxCpltCallback+0xe4>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
				rx_index = 0; 								//	다음 message 저장을 위해서 rx_index 값을 0으로 한다.
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_UART_RxCpltCallback+0xd8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e00f      	b.n	8003214 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++] = rx_data;				// rx_data 를 save
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_UART_RxCpltCallback+0xd8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	4924      	ldr	r1, [pc, #144]	; (800328c <HAL_UART_RxCpltCallback+0xd8>)
 80031fc:	600a      	str	r2, [r1, #0]
 80031fe:	4a24      	ldr	r2, [pc, #144]	; (8003290 <HAL_UART_RxCpltCallback+0xdc>)
 8003200:	7811      	ldrb	r1, [r2, #0]
 8003202:	4a24      	ldr	r2, [pc, #144]	; (8003294 <HAL_UART_RxCpltCallback+0xe0>)
 8003204:	54d1      	strb	r1, [r2, r3]
 8003206:	e005      	b.n	8003214 <HAL_UART_RxCpltCallback+0x60>
			}
		}
		else		// 40 byte 를 넘으면
		{
			rx_index = 0;
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_UART_RxCpltCallback+0xd8>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 800320e:	4823      	ldr	r0, [pc, #140]	; (800329c <HAL_UART_RxCpltCallback+0xe8>)
 8003210:	f006 fa40 	bl	8009694 <puts>
		}
		// 주의 : 반드시 HAL_UART_Receive_IT 를 call 해줘야 다음 INT 가 발생된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8003214:	2201      	movs	r2, #1
 8003216:	491e      	ldr	r1, [pc, #120]	; (8003290 <HAL_UART_RxCpltCallback+0xdc>)
 8003218:	481b      	ldr	r0, [pc, #108]	; (8003288 <HAL_UART_RxCpltCallback+0xd4>)
 800321a:	f004 fee4 	bl	8007fe6 <HAL_UART_Receive_IT>
	}

	// BT
	if (huart == &huart6)									// BT 와 연결된 uart
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_UART_RxCpltCallback+0xec>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12c      	bne.n	8003280 <HAL_UART_RxCpltCallback+0xcc>
		{
			if (bt_rx_index < COMMAND_LENGTH)				// 현재까지 들어온 byte 가 40 byte 를 넘지 않으면 save
 8003226:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_UART_RxCpltCallback+0xf0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b27      	cmp	r3, #39	; 0x27
 800322c:	dc1d      	bgt.n	800326a <HAL_UART_RxCpltCallback+0xb6>
			{
				if (bt_rx_data == '\n' || bt_rx_data == '\r')
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_UART_RxCpltCallback+0xf4>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b0a      	cmp	r3, #10
 8003234:	d003      	beq.n	800323e <HAL_UART_RxCpltCallback+0x8a>
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <HAL_UART_RxCpltCallback+0xf4>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b0d      	cmp	r3, #13
 800323c:	d10b      	bne.n	8003256 <HAL_UART_RxCpltCallback+0xa2>
				{
					bt_rx_buff[bt_rx_index] = 0; 			// '\0' 을 넣음
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_UART_RxCpltCallback+0xf0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_UART_RxCpltCallback+0xf8>)
 8003244:	2100      	movs	r1, #0
 8003246:	54d1      	strb	r1, [r2, r3]
					bt_newline_detect_flag = 1;				//  new line 을 만났다는 flag 를 set 한다.
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_UART_RxCpltCallback+0xfc>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
					bt_rx_index = 0; 						//	다음 message 저장을 위해서 rx_index 값을 0으로 한다.
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_UART_RxCpltCallback+0xf0>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e00f      	b.n	8003276 <HAL_UART_RxCpltCallback+0xc2>
				}
				else
				{
					bt_rx_buff[bt_rx_index++] = bt_rx_data;	// rx_data 를 save
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_UART_RxCpltCallback+0xf0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	4911      	ldr	r1, [pc, #68]	; (80032a4 <HAL_UART_RxCpltCallback+0xf0>)
 800325e:	600a      	str	r2, [r1, #0]
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_UART_RxCpltCallback+0xf4>)
 8003262:	7811      	ldrb	r1, [r2, #0]
 8003264:	4a11      	ldr	r2, [pc, #68]	; (80032ac <HAL_UART_RxCpltCallback+0xf8>)
 8003266:	54d1      	strb	r1, [r2, r3]
 8003268:	e005      	b.n	8003276 <HAL_UART_RxCpltCallback+0xc2>
				}
			}
			else		// 40 byte 를 넘으면
			{
				bt_rx_index = 0;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_UART_RxCpltCallback+0xf0>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
				printf("BT Message Overflow !!!\n");
 8003270:	4810      	ldr	r0, [pc, #64]	; (80032b4 <HAL_UART_RxCpltCallback+0x100>)
 8003272:	f006 fa0f 	bl	8009694 <puts>
			}
			// 주의 : 반드시 HAL_UART_Receive_IT 를 call 해줘야 다음 INT 가 발생된다.
			HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8003276:	2201      	movs	r2, #1
 8003278:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_UART_RxCpltCallback+0xf4>)
 800327a:	4809      	ldr	r0, [pc, #36]	; (80032a0 <HAL_UART_RxCpltCallback+0xec>)
 800327c:	f004 feb3 	bl	8007fe6 <HAL_UART_Receive_IT>
		}
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000670 	.word	0x20000670
 800328c:	20000c4c 	.word	0x20000c4c
 8003290:	20000c04 	.word	0x20000c04
 8003294:	20000c24 	.word	0x20000c24
 8003298:	20000c50 	.word	0x20000c50
 800329c:	0800ab5c 	.word	0x0800ab5c
 80032a0:	200006b4 	.word	0x200006b4
 80032a4:	20000c7c 	.word	0x20000c7c
 80032a8:	20000c05 	.word	0x20000c05
 80032ac:	20000c54 	.word	0x20000c54
 80032b0:	20000c80 	.word	0x20000c80
 80032b4:	0800ab74 	.word	0x0800ab74

080032b8 <pc_command_processing>:
#endif

#if 1																					// original
// PC
void pc_command_processing(void)										// 정의 (newline 만날 때 까지 계속 돌아감)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	if (newline_detect_flag)											// comport master 로부터 완전한 문장이 들어오면 (\n을 만나면)
 80032bc:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <pc_command_processing+0x104>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d079      	beq.n	80033b8 <pc_command_processing+0x100>
	{
		newline_detect_flag = 0;
 80032c4:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <pc_command_processing+0x104>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 80032ca:	483d      	ldr	r0, [pc, #244]	; (80033c0 <pc_command_processing+0x108>)
 80032cc:	f006 f9e2 	bl	8009694 <puts>

		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))		// if ( strncmp(rx_buff, "led_all_on", strlen("led_all_on") == 0 )
 80032d0:	220a      	movs	r2, #10
 80032d2:	493c      	ldr	r1, [pc, #240]	; (80033c4 <pc_command_processing+0x10c>)
 80032d4:	483a      	ldr	r0, [pc, #232]	; (80033c0 <pc_command_processing+0x108>)
 80032d6:	f006 fa05 	bl	80096e4 <strncmp>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <pc_command_processing+0x2e>
		{
//			HAL_GPIO_WritePin(GPIOD, 0xff, 1);
			led_all_on();
 80032e0:	f7fe fc7c 	bl	8001bdc <led_all_on>
			return;														// 불러준 곳으로 다시 리턴
 80032e4:	e068      	b.n	80033b8 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))
 80032e6:	220b      	movs	r2, #11
 80032e8:	4937      	ldr	r1, [pc, #220]	; (80033c8 <pc_command_processing+0x110>)
 80032ea:	4835      	ldr	r0, [pc, #212]	; (80033c0 <pc_command_processing+0x108>)
 80032ec:	f006 f9fa 	bl	80096e4 <strncmp>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <pc_command_processing+0x44>
		{
//			HAL_GPIO_WritePin(GPIOD, 0xff, 0);
			led_all_off();
 80032f6:	f7fe fc8b 	bl	8001c10 <led_all_off>
			return;
 80032fa:	e05d      	b.n	80033b8 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))
 80032fc:	2209      	movs	r2, #9
 80032fe:	4933      	ldr	r1, [pc, #204]	; (80033cc <pc_command_processing+0x114>)
 8003300:	482f      	ldr	r0, [pc, #188]	; (80033c0 <pc_command_processing+0x108>)
 8003302:	f006 f9ef 	bl	80096e4 <strncmp>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <pc_command_processing+0x5a>
		{
			led_on_up();
 800330c:	f7fe fbee 	bl	8001aec <led_on_up>
			return;
 8003310:	e052      	b.n	80033b8 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))
 8003312:	220b      	movs	r2, #11
 8003314:	492e      	ldr	r1, [pc, #184]	; (80033d0 <pc_command_processing+0x118>)
 8003316:	482a      	ldr	r0, [pc, #168]	; (80033c0 <pc_command_processing+0x108>)
 8003318:	f006 f9e4 	bl	80096e4 <strncmp>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <pc_command_processing+0x70>
		{
			led_on_down();
 8003322:	f7fe fc1f 	bl	8001b64 <led_on_down>
			return;
 8003326:	e047      	b.n	80033b8 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))
 8003328:	220d      	movs	r2, #13
 800332a:	492a      	ldr	r1, [pc, #168]	; (80033d4 <pc_command_processing+0x11c>)
 800332c:	4824      	ldr	r0, [pc, #144]	; (80033c0 <pc_command_processing+0x108>)
 800332e:	f006 f9d9 	bl	80096e4 <strncmp>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <pc_command_processing+0x86>
		{
			led_keepon_up();
 8003338:	f7fe fb60 	bl	80019fc <led_keepon_up>
			return;
 800333c:	e03c      	b.n	80033b8 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))
 800333e:	220f      	movs	r2, #15
 8003340:	4925      	ldr	r1, [pc, #148]	; (80033d8 <pc_command_processing+0x120>)
 8003342:	481f      	ldr	r0, [pc, #124]	; (80033c0 <pc_command_processing+0x108>)
 8003344:	f006 f9ce 	bl	80096e4 <strncmp>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <pc_command_processing+0x9c>
		{
			led_keepon_down();
 800334e:	f7fe fb91 	bl	8001a74 <led_keepon_down>
			return;
 8003352:	e031      	b.n	80033b8 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_flower_on", strlen("led_flower_on")))
 8003354:	220d      	movs	r2, #13
 8003356:	4921      	ldr	r1, [pc, #132]	; (80033dc <pc_command_processing+0x124>)
 8003358:	4819      	ldr	r0, [pc, #100]	; (80033c0 <pc_command_processing+0x108>)
 800335a:	f006 f9c3 	bl	80096e4 <strncmp>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <pc_command_processing+0xb2>
		{
			led_flower_on();
 8003364:	f7fe fabe 	bl	80018e4 <led_flower_on>
			return;
 8003368:	e026      	b.n	80033b8 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_flower_off", strlen("led_flower_off")))
 800336a:	220e      	movs	r2, #14
 800336c:	491c      	ldr	r1, [pc, #112]	; (80033e0 <pc_command_processing+0x128>)
 800336e:	4814      	ldr	r0, [pc, #80]	; (80033c0 <pc_command_processing+0x108>)
 8003370:	f006 f9b8 	bl	80096e4 <strncmp>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <pc_command_processing+0xc8>
		{
			led_flower_off();
 800337a:	f7fe faf9 	bl	8001970 <led_flower_off>
			return;
 800337e:	e01b      	b.n	80033b8 <pc_command_processing+0x100>
		}
		// dht11time150 DHT11
		if (!strncmp(rx_buff, "dht11time", strlen("dht11time")))
 8003380:	2209      	movs	r2, #9
 8003382:	4918      	ldr	r1, [pc, #96]	; (80033e4 <pc_command_processing+0x12c>)
 8003384:	480e      	ldr	r0, [pc, #56]	; (80033c0 <pc_command_processing+0x108>)
 8003386:	f006 f9ad 	bl	80096e4 <strncmp>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <pc_command_processing+0xe8>
		{
			dht11time = atoi(rx_buff + 9);								// ascii -> int
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <pc_command_processing+0x130>)
 8003392:	4618      	mov	r0, r3
 8003394:	f006 f8c2 	bl	800951c <atoi>
 8003398:	4603      	mov	r3, r0
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <pc_command_processing+0x134>)
 800339c:	6013      	str	r3, [r2, #0]
			return;
 800339e:	e00b      	b.n	80033b8 <pc_command_processing+0x100>
		{
			ultrasonic_on_off_flag = 0;
			return;
		}
*/
		if (!strncmp(rx_buff, "setrtc", strlen("setrtc")))
 80033a0:	2206      	movs	r2, #6
 80033a2:	4913      	ldr	r1, [pc, #76]	; (80033f0 <pc_command_processing+0x138>)
 80033a4:	4806      	ldr	r0, [pc, #24]	; (80033c0 <pc_command_processing+0x108>)
 80033a6:	f006 f99d 	bl	80096e4 <strncmp>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <pc_command_processing+0x100>
		{
			set_rtc(rx_buff);
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <pc_command_processing+0x108>)
 80033b2:	f7fe f947 	bl	8001644 <set_rtc>
			return;
 80033b6:	bf00      	nop
		}
	}
}
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000c50 	.word	0x20000c50
 80033c0:	20000c24 	.word	0x20000c24
 80033c4:	0800ab8c 	.word	0x0800ab8c
 80033c8:	0800ab98 	.word	0x0800ab98
 80033cc:	0800aba4 	.word	0x0800aba4
 80033d0:	0800abb0 	.word	0x0800abb0
 80033d4:	0800abbc 	.word	0x0800abbc
 80033d8:	0800abcc 	.word	0x0800abcc
 80033dc:	0800abdc 	.word	0x0800abdc
 80033e0:	0800abec 	.word	0x0800abec
 80033e4:	0800abfc 	.word	0x0800abfc
 80033e8:	20000c2d 	.word	0x20000c2d
 80033ec:	20000000 	.word	0x20000000
 80033f0:	0800ac08 	.word	0x0800ac08

080033f4 <bt_command_processing>:

// BT
void bt_command_processing(void)										// 정의 (newline 만날 때 까지 계속 돌아감)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)											// comport master 로부터 완전한 문장이 들어오면 (\n을 만나면)
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <bt_command_processing+0xcc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d05d      	beq.n	80034bc <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag = 0;
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <bt_command_processing+0xcc>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8003406:	482f      	ldr	r0, [pc, #188]	; (80034c4 <bt_command_processing+0xd0>)
 8003408:	f006 f944 	bl	8009694 <puts>

		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))		// if ( strncmp(rx_buff, "led_all_on", strlen("led_all_on") == 0 )
 800340c:	220a      	movs	r2, #10
 800340e:	492e      	ldr	r1, [pc, #184]	; (80034c8 <bt_command_processing+0xd4>)
 8003410:	482c      	ldr	r0, [pc, #176]	; (80034c4 <bt_command_processing+0xd0>)
 8003412:	f006 f967 	bl	80096e4 <strncmp>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <bt_command_processing+0x2e>
		{
//			HAL_GPIO_WritePin(GPIOD, 0xff, 1);
			led_all_on();
 800341c:	f7fe fbde 	bl	8001bdc <led_all_on>
			return;
 8003420:	e04c      	b.n	80034bc <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))
 8003422:	220b      	movs	r2, #11
 8003424:	4929      	ldr	r1, [pc, #164]	; (80034cc <bt_command_processing+0xd8>)
 8003426:	4827      	ldr	r0, [pc, #156]	; (80034c4 <bt_command_processing+0xd0>)
 8003428:	f006 f95c 	bl	80096e4 <strncmp>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <bt_command_processing+0x44>
		{
//			HAL_GPIO_WritePin(GPIOD, 0xff, 0);
			led_all_off();
 8003432:	f7fe fbed 	bl	8001c10 <led_all_off>
			return;
 8003436:	e041      	b.n	80034bc <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))
 8003438:	2209      	movs	r2, #9
 800343a:	4925      	ldr	r1, [pc, #148]	; (80034d0 <bt_command_processing+0xdc>)
 800343c:	4821      	ldr	r0, [pc, #132]	; (80034c4 <bt_command_processing+0xd0>)
 800343e:	f006 f951 	bl	80096e4 <strncmp>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <bt_command_processing+0x5a>
		{
			led_on_up();
 8003448:	f7fe fb50 	bl	8001aec <led_on_up>
			return;
 800344c:	e036      	b.n	80034bc <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))
 800344e:	220b      	movs	r2, #11
 8003450:	4920      	ldr	r1, [pc, #128]	; (80034d4 <bt_command_processing+0xe0>)
 8003452:	481c      	ldr	r0, [pc, #112]	; (80034c4 <bt_command_processing+0xd0>)
 8003454:	f006 f946 	bl	80096e4 <strncmp>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <bt_command_processing+0x70>
		{
			led_on_down();
 800345e:	f7fe fb81 	bl	8001b64 <led_on_down>
			return;
 8003462:	e02b      	b.n	80034bc <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))
 8003464:	220d      	movs	r2, #13
 8003466:	491c      	ldr	r1, [pc, #112]	; (80034d8 <bt_command_processing+0xe4>)
 8003468:	4816      	ldr	r0, [pc, #88]	; (80034c4 <bt_command_processing+0xd0>)
 800346a:	f006 f93b 	bl	80096e4 <strncmp>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <bt_command_processing+0x86>
		{
			led_keepon_up();
 8003474:	f7fe fac2 	bl	80019fc <led_keepon_up>
			return;
 8003478:	e020      	b.n	80034bc <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))
 800347a:	220f      	movs	r2, #15
 800347c:	4917      	ldr	r1, [pc, #92]	; (80034dc <bt_command_processing+0xe8>)
 800347e:	4811      	ldr	r0, [pc, #68]	; (80034c4 <bt_command_processing+0xd0>)
 8003480:	f006 f930 	bl	80096e4 <strncmp>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <bt_command_processing+0x9c>
		{
			led_keepon_down();
 800348a:	f7fe faf3 	bl	8001a74 <led_keepon_down>
			return;
 800348e:	e015      	b.n	80034bc <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_on", strlen("led_flower_on")))
 8003490:	220d      	movs	r2, #13
 8003492:	4913      	ldr	r1, [pc, #76]	; (80034e0 <bt_command_processing+0xec>)
 8003494:	480b      	ldr	r0, [pc, #44]	; (80034c4 <bt_command_processing+0xd0>)
 8003496:	f006 f925 	bl	80096e4 <strncmp>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <bt_command_processing+0xb2>
		{
			led_flower_on();
 80034a0:	f7fe fa20 	bl	80018e4 <led_flower_on>
			return;
 80034a4:	e00a      	b.n	80034bc <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_flower_off", strlen("led_flower_off")))
 80034a6:	220e      	movs	r2, #14
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <bt_command_processing+0xf0>)
 80034aa:	4806      	ldr	r0, [pc, #24]	; (80034c4 <bt_command_processing+0xd0>)
 80034ac:	f006 f91a 	bl	80096e4 <strncmp>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <bt_command_processing+0xc8>
		{
			led_flower_off();
 80034b6:	f7fe fa5b 	bl	8001970 <led_flower_off>
			return;
 80034ba:	bf00      	nop
		}
	}
}
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000c80 	.word	0x20000c80
 80034c4:	20000c54 	.word	0x20000c54
 80034c8:	0800ab8c 	.word	0x0800ab8c
 80034cc:	0800ab98 	.word	0x0800ab98
 80034d0:	0800aba4 	.word	0x0800aba4
 80034d4:	0800abb0 	.word	0x0800abb0
 80034d8:	0800abbc 	.word	0x0800abbc
 80034dc:	0800abcc 	.word	0x0800abcc
 80034e0:	0800abdc 	.word	0x0800abdc
 80034e4:	0800abec 	.word	0x0800abec

080034e8 <HAL_TIM_IC_CaptureCallback>:
// Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c 에 가서
// void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)을 잘라내서 이곳으로 가져온다.
// 2. 초음파 센서의 ECHO 핀의 상승 엣지와 하강 엣지 발생 시 이곳으로 들어온다.
volatile uint8_t is_first_capture = 0;							// 0:상승엣지 1:하강엣지 (for rising, falling edge 구분을 위한 변수)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)												//
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11f      	bne.n	800353a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if ( is_first_capture == 0)											// 상승엣지
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_TIM_IC_CaptureCallback+0x60>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);									// clear H/W counter (변수 초기화 필요, 0 넣어줌)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1;											// 상승엣지를 만났다는 flag 변수 indicator 를 set
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_TIM_IC_CaptureCallback+0x60>)
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0;											// 다음 echo 펄스를 count 하기 위해 변수 초기화 필요
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);			// 현재까지 count 한 펄스 수를 읽어온다. -> 변수 선언 필요 (line-3)
			ic_cpt_finish_flag = 1; 										// 초음파 거리 측정 완료 -> 변수 선언 필요 (line-4)
		}
	}
}
 8003512:	e012      	b.n	800353a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)										// 하강엣지를 만나면
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10d      	bne.n	800353a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0;											// 다음 echo 펄스를 count 하기 위해 변수 초기화 필요
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);			// 현재까지 count 한 펄스 수를 읽어온다. -> 변수 선언 필요 (line-3)
 8003524:	2100      	movs	r1, #0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f003 ff52 	bl	80073d0 <HAL_TIM_ReadCapturedValue>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_TIM_IC_CaptureCallback+0x64>)
 8003532:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1; 										// 초음파 거리 측정 완료 -> 변수 선언 필요 (line-4)
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40000400 	.word	0x40000400
 8003548:	20000c8c 	.word	0x20000c8c
 800354c:	20000c84 	.word	0x20000c84
 8003550:	20000c88 	.word	0x20000c88
 8003554:	00000000 	.word	0x00000000

08003558 <ultrasonic_processing>:

// mode select 모드2 : LCD에 거리 정보 출력
#if 1
void ultrasonic_processing(void)								// main.c 에서 계속 부름
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
	int dis;										// 거리를 측정한 펄스 개수를 저장하는 변수 선언 -> 지역변수
	char lcd_buff[20];											//

	if (TIM10_10ms_ultrasonic >= 100)				// 1초
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <ultrasonic_processing+0xa0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b63      	cmp	r3, #99	; 0x63
 8003564:	dd3e      	ble.n	80035e4 <ultrasonic_processing+0x8c>
	{
		TIM10_10ms_ultrasonic = 0; 					// 다음 1초를 위해 clear
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <ultrasonic_processing+0xa0>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
		make_trigger();								// 호출
 800356c:	f000 f850 	bl	8003610 <make_trigger>
		if (ic_cpt_finish_flag) 					// 초음파 센서 측정 완료되었으면 (if (ic_cpt_finish_flag >= 1) 코드와 동일)
 8003570:	4b22      	ldr	r3, [pc, #136]	; (80035fc <ultrasonic_processing+0xa4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d035      	beq.n	80035e4 <ultrasonic_processing+0x8c>
		{
			ic_cpt_finish_flag = 0;
 8003578:	4b20      	ldr	r3, [pc, #128]	; (80035fc <ultrasonic_processing+0xa4>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
			dis = distance;										// 전역 변수를 복사한 값 사용 -> dis 지역변수 선언 필요
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <ultrasonic_processing+0xa8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
			dis = dis * 0.034 / 2;					// 1us 가 034cm 를 이동
 8003584:	6978      	ldr	r0, [r7, #20]
 8003586:	f7fc ffd5 	bl	8000534 <__aeabi_i2d>
 800358a:	a319      	add	r3, pc, #100	; (adr r3, 80035f0 <ultrasonic_processing+0x98>)
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f7fd f83a 	bl	8000608 <__aeabi_dmul>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035a4:	f7fd f95a 	bl	800085c <__aeabi_ddiv>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd fa3c 	bl	8000a2c <__aeabi_d2iz>
 80035b4:	4603      	mov	r3, r0
 80035b6:	617b      	str	r3, [r7, #20]
			// 왕복 거리를 리턴해주기 때문에 나누기2 해주는 것이다.
			printf("dis : %dcm\n", dis);
 80035b8:	6979      	ldr	r1, [r7, #20]
 80035ba:	4812      	ldr	r0, [pc, #72]	; (8003604 <ultrasonic_processing+0xac>)
 80035bc:	f005 ffe4 	bl	8009588 <iprintf>
			sprintf(lcd_buff, "dis:%d", dis);
 80035c0:	463b      	mov	r3, r7
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4910      	ldr	r1, [pc, #64]	; (8003608 <ultrasonic_processing+0xb0>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f006 f86c 	bl	80096a4 <siprintf>
			if (lcd_display_mode_flag == 2)						// mode select 모드2
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <ultrasonic_processing+0xb4>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d107      	bne.n	80035e4 <ultrasonic_processing+0x8c>
			{
				move_cursor(1,0);								// 커서 1line 0col 이동
 80035d4:	2100      	movs	r1, #0
 80035d6:	2001      	movs	r0, #1
 80035d8:	f7fd ff30 	bl	800143c <move_cursor>
				lcd_string(lcd_buff); 							// HEX 0x20 미만은 LCD 입력 안됨 (\n 안됨)
 80035dc:	463b      	mov	r3, r7
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd ff17 	bl	8001412 <lcd_string>
			}
		}
	}
}
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	f3af 8000 	nop.w
 80035f0:	b020c49c 	.word	0xb020c49c
 80035f4:	3fa16872 	.word	0x3fa16872
 80035f8:	20000c0c 	.word	0x20000c0c
 80035fc:	20000c88 	.word	0x20000c88
 8003600:	20000c84 	.word	0x20000c84
 8003604:	0800ac10 	.word	0x0800ac10
 8003608:	0800ac1c 	.word	0x0800ac1c
 800360c:	200001d4 	.word	0x200001d4

08003610 <make_trigger>:
	}
}
#endif

void make_trigger(void)											// trigger 구형파 완성 (Trigger Input to module - square pulse)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);		// from main.h line-82, 83
 8003614:	2200      	movs	r2, #0
 8003616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361a:	480b      	ldr	r0, [pc, #44]	; (8003648 <make_trigger+0x38>)
 800361c:	f000 ff66 	bl	80044ec <HAL_GPIO_WritePin>
	delay_us(2);				// 2us 로 low
 8003620:	2002      	movs	r0, #2
 8003622:	f7fe fb55 	bl	8001cd0 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8003626:	2201      	movs	r2, #1
 8003628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800362c:	4806      	ldr	r0, [pc, #24]	; (8003648 <make_trigger+0x38>)
 800362e:	f000 ff5d 	bl	80044ec <HAL_GPIO_WritePin>
	delay_us(10);				// high 로 10us 준다
 8003632:	200a      	movs	r0, #10
 8003634:	f7fe fb4c 	bl	8001cd0 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800363e:	4802      	ldr	r0, [pc, #8]	; (8003648 <make_trigger+0x38>)
 8003640:	f000 ff54 	bl	80044ec <HAL_GPIO_WritePin>
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021400 	.word	0x40021400

0800364c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800364c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003684 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003652:	490e      	ldr	r1, [pc, #56]	; (800368c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003658:	e002      	b.n	8003660 <LoopCopyDataInit>

0800365a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800365a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800365c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800365e:	3304      	adds	r3, #4

08003660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003664:	d3f9      	bcc.n	800365a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003666:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003668:	4c0b      	ldr	r4, [pc, #44]	; (8003698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800366c:	e001      	b.n	8003672 <LoopFillZerobss>

0800366e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800366e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003670:	3204      	adds	r2, #4

08003672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003674:	d3fb      	bcc.n	800366e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003676:	f7ff fd8b 	bl	8003190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800367a:	f005 ff59 	bl	8009530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800367e:	f7fe fb3f 	bl	8001d00 <main>
  bx  lr    
 8003682:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003684:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800368c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003690:	0800ade8 	.word	0x0800ade8
  ldr r2, =_sbss
 8003694:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8003698:	20000ca4 	.word	0x20000ca4

0800369c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800369c:	e7fe      	b.n	800369c <ADC_IRQHandler>
	...

080036a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_Init+0x40>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_Init+0x40>)
 80036aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_Init+0x40>)
 80036b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_Init+0x40>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_Init+0x40>)
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c8:	2003      	movs	r0, #3
 80036ca:	f000 f94f 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ce:	2000      	movs	r0, #0
 80036d0:	f000 f808 	bl	80036e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036d4:	f7ff f876 	bl	80027c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023c00 	.word	0x40023c00

080036e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_InitTick+0x54>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_InitTick+0x58>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f967 	bl	80039d6 <HAL_SYSTICK_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e00e      	b.n	8003730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d80a      	bhi.n	800372e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003718:	2200      	movs	r2, #0
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f000 f92f 	bl	8003982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <HAL_InitTick+0x5c>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000134 	.word	0x20000134
 800373c:	2000013c 	.word	0x2000013c
 8003740:	20000138 	.word	0x20000138

08003744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_IncTick+0x20>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_IncTick+0x24>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_IncTick+0x24>)
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000013c 	.word	0x2000013c
 8003768:	20000c90 	.word	0x20000c90

0800376c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return uwTick;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_GetTick+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000c90 	.word	0x20000c90

08003784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7ff ffee 	bl	800376c <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d005      	beq.n	80037aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_Delay+0x44>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037aa:	bf00      	nop
 80037ac:	f7ff ffde 	bl	800376c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d8f7      	bhi.n	80037ac <HAL_Delay+0x28>
  {
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000013c 	.word	0x2000013c

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fe:	4a04      	ldr	r2, [pc, #16]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	60d3      	str	r3, [r2, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	; (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	; (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	; (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
         );
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	f7ff ff8e 	bl	800386c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff29 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff3e 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff8e 	bl	80038c0 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5d 	bl	800386c <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff31 	bl	8003830 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa2 	bl	8003928 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff feb6 	bl	800376c <HAL_GetTick>
 8003a00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d008      	beq.n	8003a20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e052      	b.n	8003ac6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0216 	bic.w	r2, r2, #22
 8003a2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <HAL_DMA_Abort+0x62>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0208 	bic.w	r2, r2, #8
 8003a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a70:	e013      	b.n	8003a9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a72:	f7ff fe7b 	bl	800376c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d90c      	bls.n	8003a9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e015      	b.n	8003ac6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e4      	bne.n	8003a72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	223f      	movs	r2, #63	; 0x3f
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e00c      	b.n	8003b06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2205      	movs	r2, #5
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e06c      	b.n	8003c00 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2223      	movs	r2, #35	; 0x23
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fe fe6b 	bl	8002814 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_ETH_Init+0xf4>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <HAL_ETH_Init+0xf4>)
 8003b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_ETH_Init+0xf4>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b5a:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_ETH_Init+0xf8>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	; (8003c0c <HAL_ETH_Init+0xf8>)
 8003b60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_ETH_Init+0xf8>)
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4927      	ldr	r1, [pc, #156]	; (8003c0c <HAL_ETH_Init+0xf8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_ETH_Init+0xf8>)
 8003b76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7ff fdec 	bl	800376c <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b96:	e011      	b.n	8003bbc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b98:	f7ff fde8 	bl	800376c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ba6:	d909      	bls.n	8003bbc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2204      	movs	r2, #4
 8003bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	22e0      	movs	r2, #224	; 0xe0
 8003bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e021      	b.n	8003c00 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e4      	bne.n	8003b98 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f958 	bl	8003e84 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f9ff 	bl	8003fd8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa55 	bl	800408a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	461a      	mov	r2, r3
 8003be6:	2100      	movs	r1, #0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f9bd 	bl	8003f68 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40013800 	.word	0x40013800

08003c10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <ETH_SetMACConfig+0x15c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	7c1b      	ldrb	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <ETH_SetMACConfig+0x28>
 8003c32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c36:	e000      	b.n	8003c3a <ETH_SetMACConfig+0x2a>
 8003c38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	7c5b      	ldrb	r3, [r3, #17]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <ETH_SetMACConfig+0x38>
 8003c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c46:	e000      	b.n	8003c4a <ETH_SetMACConfig+0x3a>
 8003c48:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c4a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	7fdb      	ldrb	r3, [r3, #31]
 8003c56:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c58:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	7f92      	ldrb	r2, [r2, #30]
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d102      	bne.n	8003c6e <ETH_SetMACConfig+0x5e>
 8003c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c6c:	e000      	b.n	8003c70 <ETH_SetMACConfig+0x60>
 8003c6e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	7f1b      	ldrb	r3, [r3, #28]
 8003c76:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c78:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	791b      	ldrb	r3, [r3, #4]
 8003c84:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003c86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	d102      	bne.n	8003c98 <ETH_SetMACConfig+0x88>
 8003c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c96:	e000      	b.n	8003c9a <ETH_SetMACConfig+0x8a>
 8003c98:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	7bdb      	ldrb	r3, [r3, #15]
 8003ca0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ca2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ca8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cb0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f7ff fd5a 	bl	8003784 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003cf6:	2a00      	cmp	r2, #0
 8003cf8:	d101      	bne.n	8003cfe <ETH_SetMACConfig+0xee>
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	e000      	b.n	8003d00 <ETH_SetMACConfig+0xf0>
 8003cfe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d00:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d0e:	2a01      	cmp	r2, #1
 8003d10:	d101      	bne.n	8003d16 <ETH_SetMACConfig+0x106>
 8003d12:	2208      	movs	r2, #8
 8003d14:	e000      	b.n	8003d18 <ETH_SetMACConfig+0x108>
 8003d16:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d20:	2a01      	cmp	r2, #1
 8003d22:	d101      	bne.n	8003d28 <ETH_SetMACConfig+0x118>
 8003d24:	2204      	movs	r2, #4
 8003d26:	e000      	b.n	8003d2a <ETH_SetMACConfig+0x11a>
 8003d28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d32:	2a01      	cmp	r2, #1
 8003d34:	d101      	bne.n	8003d3a <ETH_SetMACConfig+0x12a>
 8003d36:	2202      	movs	r2, #2
 8003d38:	e000      	b.n	8003d3c <ETH_SetMACConfig+0x12c>
 8003d3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d54:	2001      	movs	r0, #1
 8003d56:	f7ff fd15 	bl	8003784 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	619a      	str	r2, [r3, #24]
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	ff20810f 	.word	0xff20810f

08003d70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <ETH_SetDMAConfig+0x110>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	7b1b      	ldrb	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <ETH_SetDMAConfig+0x2c>
 8003d96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d9a:	e000      	b.n	8003d9e <ETH_SetDMAConfig+0x2e>
 8003d9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	7b5b      	ldrb	r3, [r3, #13]
 8003da2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003da4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	7f52      	ldrb	r2, [r2, #29]
 8003daa:	2a00      	cmp	r2, #0
 8003dac:	d102      	bne.n	8003db4 <ETH_SetDMAConfig+0x44>
 8003dae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003db2:	e000      	b.n	8003db6 <ETH_SetDMAConfig+0x46>
 8003db4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003db6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	7b9b      	ldrb	r3, [r3, #14]
 8003dbc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dbe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dc4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	7f1b      	ldrb	r3, [r3, #28]
 8003dca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003dcc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	7f9b      	ldrb	r3, [r3, #30]
 8003dd2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dd4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003dda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003de4:	4313      	orrs	r3, r2
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	461a      	mov	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e06:	2001      	movs	r0, #1
 8003e08:	f7ff fcbc 	bl	8003784 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e14:	461a      	mov	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	791b      	ldrb	r3, [r3, #4]
 8003e1e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e24:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e2a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e30:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e38:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e3a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e42:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e48:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e56:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e64:	2001      	movs	r0, #1
 8003e66:	f7ff fc8d 	bl	8003784 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e72:	461a      	mov	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6013      	str	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	f8de3f23 	.word	0xf8de3f23

08003e84 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b0a6      	sub	sp, #152	; 0x98
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ef8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fe86 	bl	8003c10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f26:	2300      	movs	r3, #0
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f38:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f54:	f107 0308 	add.w	r3, r7, #8
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ff08 	bl	8003d70 <ETH_SetDMAConfig>
}
 8003f60:	bf00      	nop
 8003f62:	3798      	adds	r7, #152	; 0x98
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3305      	adds	r3, #5
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	3204      	adds	r2, #4
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <ETH_MACAddressConfig+0x68>)
 8003f8a:	4413      	add	r3, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3303      	adds	r3, #3
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	061a      	lsls	r2, r3, #24
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	4313      	orrs	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <ETH_MACAddressConfig+0x6c>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40028040 	.word	0x40028040
 8003fd4:	40028044 	.word	0x40028044

08003fd8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e03e      	b.n	8004064 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68d9      	ldr	r1, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2200      	movs	r2, #0
 8004002:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	3206      	adds	r2, #6
 8004018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d80c      	bhi.n	8004048 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	e004      	b.n	8004052 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	461a      	mov	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d9bd      	bls.n	8003fe6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407c:	611a      	str	r2, [r3, #16]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e046      	b.n	8004126 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6919      	ldr	r1, [r3, #16]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	440b      	add	r3, r1
 80040a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80040dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	3212      	adds	r2, #18
 80040f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d80c      	bhi.n	8004116 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6919      	ldr	r1, [r3, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	e004      	b.n	8004120 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	461a      	mov	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d9b5      	bls.n	8004098 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004156:	60da      	str	r2, [r3, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e177      	b.n	8004470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	f040 8166 	bne.w	800446a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d005      	beq.n	80041b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d130      	bne.n	8004218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ec:	2201      	movs	r2, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0201 	and.w	r2, r3, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b03      	cmp	r3, #3
 8004222:	d017      	beq.n	8004254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	2203      	movs	r2, #3
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d123      	bne.n	80042a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	08da      	lsrs	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3208      	adds	r2, #8
 8004268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	220f      	movs	r2, #15
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	08da      	lsrs	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3208      	adds	r2, #8
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0203 	and.w	r2, r3, #3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80c0 	beq.w	800446a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	4b66      	ldr	r3, [pc, #408]	; (8004488 <HAL_GPIO_Init+0x324>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	4a65      	ldr	r2, [pc, #404]	; (8004488 <HAL_GPIO_Init+0x324>)
 80042f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f8:	6453      	str	r3, [r2, #68]	; 0x44
 80042fa:	4b63      	ldr	r3, [pc, #396]	; (8004488 <HAL_GPIO_Init+0x324>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004306:	4a61      	ldr	r2, [pc, #388]	; (800448c <HAL_GPIO_Init+0x328>)
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	3302      	adds	r3, #2
 800430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	220f      	movs	r2, #15
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a58      	ldr	r2, [pc, #352]	; (8004490 <HAL_GPIO_Init+0x32c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d037      	beq.n	80043a2 <HAL_GPIO_Init+0x23e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a57      	ldr	r2, [pc, #348]	; (8004494 <HAL_GPIO_Init+0x330>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d031      	beq.n	800439e <HAL_GPIO_Init+0x23a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a56      	ldr	r2, [pc, #344]	; (8004498 <HAL_GPIO_Init+0x334>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02b      	beq.n	800439a <HAL_GPIO_Init+0x236>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a55      	ldr	r2, [pc, #340]	; (800449c <HAL_GPIO_Init+0x338>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d025      	beq.n	8004396 <HAL_GPIO_Init+0x232>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a54      	ldr	r2, [pc, #336]	; (80044a0 <HAL_GPIO_Init+0x33c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01f      	beq.n	8004392 <HAL_GPIO_Init+0x22e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a53      	ldr	r2, [pc, #332]	; (80044a4 <HAL_GPIO_Init+0x340>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d019      	beq.n	800438e <HAL_GPIO_Init+0x22a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a52      	ldr	r2, [pc, #328]	; (80044a8 <HAL_GPIO_Init+0x344>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_GPIO_Init+0x226>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a51      	ldr	r2, [pc, #324]	; (80044ac <HAL_GPIO_Init+0x348>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00d      	beq.n	8004386 <HAL_GPIO_Init+0x222>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a50      	ldr	r2, [pc, #320]	; (80044b0 <HAL_GPIO_Init+0x34c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d007      	beq.n	8004382 <HAL_GPIO_Init+0x21e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a4f      	ldr	r2, [pc, #316]	; (80044b4 <HAL_GPIO_Init+0x350>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d101      	bne.n	800437e <HAL_GPIO_Init+0x21a>
 800437a:	2309      	movs	r3, #9
 800437c:	e012      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 800437e:	230a      	movs	r3, #10
 8004380:	e010      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 8004382:	2308      	movs	r3, #8
 8004384:	e00e      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 8004386:	2307      	movs	r3, #7
 8004388:	e00c      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 800438a:	2306      	movs	r3, #6
 800438c:	e00a      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 800438e:	2305      	movs	r3, #5
 8004390:	e008      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 8004392:	2304      	movs	r3, #4
 8004394:	e006      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 8004396:	2303      	movs	r3, #3
 8004398:	e004      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 800439a:	2302      	movs	r3, #2
 800439c:	e002      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_GPIO_Init+0x240>
 80043a2:	2300      	movs	r3, #0
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	f002 0203 	and.w	r2, r2, #3
 80043aa:	0092      	lsls	r2, r2, #2
 80043ac:	4093      	lsls	r3, r2
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b4:	4935      	ldr	r1, [pc, #212]	; (800448c <HAL_GPIO_Init+0x328>)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	3302      	adds	r3, #2
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043c2:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_GPIO_Init+0x354>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043e6:	4a34      	ldr	r2, [pc, #208]	; (80044b8 <HAL_GPIO_Init+0x354>)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043ec:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_GPIO_Init+0x354>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004410:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <HAL_GPIO_Init+0x354>)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_GPIO_Init+0x354>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	43db      	mvns	r3, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4013      	ands	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800443a:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <HAL_GPIO_Init+0x354>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <HAL_GPIO_Init+0x354>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <HAL_GPIO_Init+0x354>)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	3301      	adds	r3, #1
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b0f      	cmp	r3, #15
 8004474:	f67f ae84 	bls.w	8004180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3724      	adds	r7, #36	; 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	40013800 	.word	0x40013800
 8004490:	40020000 	.word	0x40020000
 8004494:	40020400 	.word	0x40020400
 8004498:	40020800 	.word	0x40020800
 800449c:	40020c00 	.word	0x40020c00
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40021400 	.word	0x40021400
 80044a8:	40021800 	.word	0x40021800
 80044ac:	40021c00 	.word	0x40021c00
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40022400 	.word	0x40022400
 80044b8:	40013c00 	.word	0x40013c00

080044bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e001      	b.n	80044de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004508:	e003      	b.n	8004512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	041a      	lsls	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004530:	887a      	ldrh	r2, [r7, #2]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4013      	ands	r3, r2
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	43d9      	mvns	r1, r3
 800453c:	887b      	ldrh	r3, [r7, #2]
 800453e:	400b      	ands	r3, r1
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e12b      	b.n	80047be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fe fa10 	bl	80029a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	; 0x24
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045b8:	f001 fa20 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 80045bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4a81      	ldr	r2, [pc, #516]	; (80047c8 <HAL_I2C_Init+0x274>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d807      	bhi.n	80045d8 <HAL_I2C_Init+0x84>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a80      	ldr	r2, [pc, #512]	; (80047cc <HAL_I2C_Init+0x278>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	bf94      	ite	ls
 80045d0:	2301      	movls	r3, #1
 80045d2:	2300      	movhi	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e006      	b.n	80045e6 <HAL_I2C_Init+0x92>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a7d      	ldr	r2, [pc, #500]	; (80047d0 <HAL_I2C_Init+0x27c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	bf94      	ite	ls
 80045e0:	2301      	movls	r3, #1
 80045e2:	2300      	movhi	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0e7      	b.n	80047be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a78      	ldr	r2, [pc, #480]	; (80047d4 <HAL_I2C_Init+0x280>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0c9b      	lsrs	r3, r3, #18
 80045f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a6a      	ldr	r2, [pc, #424]	; (80047c8 <HAL_I2C_Init+0x274>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d802      	bhi.n	8004628 <HAL_I2C_Init+0xd4>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3301      	adds	r3, #1
 8004626:	e009      	b.n	800463c <HAL_I2C_Init+0xe8>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	4a69      	ldr	r2, [pc, #420]	; (80047d8 <HAL_I2C_Init+0x284>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	3301      	adds	r3, #1
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	430b      	orrs	r3, r1
 8004642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800464e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	495c      	ldr	r1, [pc, #368]	; (80047c8 <HAL_I2C_Init+0x274>)
 8004658:	428b      	cmp	r3, r1
 800465a:	d819      	bhi.n	8004690 <HAL_I2C_Init+0x13c>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1e59      	subs	r1, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	fbb1 f3f3 	udiv	r3, r1, r3
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004670:	400b      	ands	r3, r1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_I2C_Init+0x138>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1e59      	subs	r1, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	fbb1 f3f3 	udiv	r3, r1, r3
 8004684:	3301      	adds	r3, #1
 8004686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468a:	e051      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 800468c:	2304      	movs	r3, #4
 800468e:	e04f      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d111      	bne.n	80046bc <HAL_I2C_Init+0x168>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	440b      	add	r3, r1
 80046a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e012      	b.n	80046e2 <HAL_I2C_Init+0x18e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1e58      	subs	r0, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	0099      	lsls	r1, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Init+0x196>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e022      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10e      	bne.n	8004710 <HAL_I2C_Init+0x1bc>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1e58      	subs	r0, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	440b      	add	r3, r1
 8004700:	fbb0 f3f3 	udiv	r3, r0, r3
 8004704:	3301      	adds	r3, #1
 8004706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	e00f      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1e58      	subs	r0, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	0099      	lsls	r1, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	fbb0 f3f3 	udiv	r3, r0, r3
 8004726:	3301      	adds	r3, #1
 8004728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	6809      	ldr	r1, [r1, #0]
 8004734:	4313      	orrs	r3, r2
 8004736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800475e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6911      	ldr	r1, [r2, #16]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	430b      	orrs	r3, r1
 8004772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	000186a0 	.word	0x000186a0
 80047cc:	001e847f 	.word	0x001e847f
 80047d0:	003d08ff 	.word	0x003d08ff
 80047d4:	431bde83 	.word	0x431bde83
 80047d8:	10624dd3 	.word	0x10624dd3

080047dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	460b      	mov	r3, r1
 80047ea:	817b      	strh	r3, [r7, #10]
 80047ec:	4613      	mov	r3, r2
 80047ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047f0:	f7fe ffbc 	bl	800376c <HAL_GetTick>
 80047f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b20      	cmp	r3, #32
 8004800:	f040 80e0 	bne.w	80049c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2319      	movs	r3, #25
 800480a:	2201      	movs	r2, #1
 800480c:	4970      	ldr	r1, [pc, #448]	; (80049d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f964 	bl	8004adc <I2C_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800481a:	2302      	movs	r3, #2
 800481c:	e0d3      	b.n	80049c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_I2C_Master_Transmit+0x50>
 8004828:	2302      	movs	r3, #2
 800482a:	e0cc      	b.n	80049c6 <HAL_I2C_Master_Transmit+0x1ea>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d007      	beq.n	8004852 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2221      	movs	r2, #33	; 0x21
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2210      	movs	r2, #16
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	893a      	ldrh	r2, [r7, #8]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a50      	ldr	r2, [pc, #320]	; (80049d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004894:	8979      	ldrh	r1, [r7, #10]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f89c 	bl	80049d8 <I2C_MasterRequestWrite>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e08d      	b.n	80049c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048c0:	e066      	b.n	8004990 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	6a39      	ldr	r1, [r7, #32]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f9de 	bl	8004c88 <I2C_WaitOnTXEFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d107      	bne.n	80048ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e06b      	b.n	80049c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	781a      	ldrb	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b04      	cmp	r3, #4
 800492a:	d11b      	bne.n	8004964 <HAL_I2C_Master_Transmit+0x188>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d017      	beq.n	8004964 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	781a      	ldrb	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	6a39      	ldr	r1, [r7, #32]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f9ce 	bl	8004d0a <I2C_WaitOnBTFFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	2b04      	cmp	r3, #4
 800497a:	d107      	bne.n	800498c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e01a      	b.n	80049c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d194      	bne.n	80048c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e000      	b.n	80049c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049c4:	2302      	movs	r3, #2
  }
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	00100002 	.word	0x00100002
 80049d4:	ffff0000 	.word	0xffff0000

080049d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	460b      	mov	r3, r1
 80049e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d006      	beq.n	8004a02 <I2C_MasterRequestWrite+0x2a>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d003      	beq.n	8004a02 <I2C_MasterRequestWrite+0x2a>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a00:	d108      	bne.n	8004a14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e00b      	b.n	8004a2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	2b12      	cmp	r3, #18
 8004a1a:	d107      	bne.n	8004a2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f84f 	bl	8004adc <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a52:	d103      	bne.n	8004a5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e035      	b.n	8004acc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a68:	d108      	bne.n	8004a7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a78:	611a      	str	r2, [r3, #16]
 8004a7a:	e01b      	b.n	8004ab4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a7c:	897b      	ldrh	r3, [r7, #10]
 8004a7e:	11db      	asrs	r3, r3, #7
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f063 030f 	orn	r3, r3, #15
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	490e      	ldr	r1, [pc, #56]	; (8004ad4 <I2C_MasterRequestWrite+0xfc>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f875 	bl	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e010      	b.n	8004acc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4907      	ldr	r1, [pc, #28]	; (8004ad8 <I2C_MasterRequestWrite+0x100>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f865 	bl	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	00010008 	.word	0x00010008
 8004ad8:	00010002 	.word	0x00010002

08004adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aec:	e025      	b.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d021      	beq.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af6:	f7fe fe39 	bl	800376c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d116      	bne.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e023      	b.n	8004b82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10d      	bne.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	e00c      	b.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	43da      	mvns	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bf0c      	ite	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	2300      	movne	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d0b6      	beq.n	8004aee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b98:	e051      	b.n	8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba8:	d123      	bne.n	8004bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f043 0204 	orr.w	r2, r3, #4
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e046      	b.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d021      	beq.n	8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fe fdb7 	bl	800376c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d116      	bne.n	8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e020      	b.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d10c      	bne.n	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	e00b      	b.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	43da      	mvns	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf14      	ite	ne
 8004c74:	2301      	movne	r3, #1
 8004c76:	2300      	moveq	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d18d      	bne.n	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c94:	e02d      	b.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f878 	bl	8004d8c <I2C_IsAcknowledgeFailed>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e02d      	b.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d021      	beq.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fe fd5d 	bl	800376c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d116      	bne.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e007      	b.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d1ca      	bne.n	8004c96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d16:	e02d      	b.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f837 	bl	8004d8c <I2C_IsAcknowledgeFailed>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e02d      	b.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d021      	beq.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fe fd1c 	bl	800376c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d116      	bne.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e007      	b.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d1ca      	bne.n	8004d18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da2:	d11b      	bne.n	8004ddc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f043 0204 	orr.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d129      	bne.n	8004e54 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2224      	movs	r2, #36	; 0x24
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0210 	bic.w	r2, r2, #16
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d12a      	bne.n	8004ed2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	f023 030f 	bic.w	r3, r3, #15
 8004ea2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	89fa      	ldrh	r2, [r7, #14]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	b08f      	sub	sp, #60	; 0x3c
 8004ee4:	af0a      	add	r7, sp, #40	; 0x28
 8004ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e10f      	b.n	8005112 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fd ffc5 	bl	8002e9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2203      	movs	r2, #3
 8004f16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f004 f852 	bl	8008fda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	687e      	ldr	r6, [r7, #4]
 8004f3e:	466d      	mov	r5, sp
 8004f40:	f106 0410 	add.w	r4, r6, #16
 8004f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f50:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f54:	1d33      	adds	r3, r6, #4
 8004f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f58:	6838      	ldr	r0, [r7, #0]
 8004f5a:	f003 ffdd 	bl	8008f18 <USB_CoreInit>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0d0      	b.n	8005112 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f004 f840 	bl	8008ffc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e04a      	b.n	8005018 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	333d      	adds	r3, #61	; 0x3d
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	333c      	adds	r3, #60	; 0x3c
 8004fa6:	7bfa      	ldrb	r2, [r7, #15]
 8004fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	b298      	uxth	r0, r3
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3344      	adds	r3, #68	; 0x44
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3340      	adds	r3, #64	; 0x40
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3348      	adds	r3, #72	; 0x48
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fea:	7bfa      	ldrb	r2, [r7, #15]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	334c      	adds	r3, #76	; 0x4c
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	3354      	adds	r3, #84	; 0x54
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	3301      	adds	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d3af      	bcc.n	8004f82 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	e044      	b.n	80050b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800503e:	7bfa      	ldrb	r2, [r7, #15]
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005050:	7bfa      	ldrb	r2, [r7, #15]
 8005052:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	3301      	adds	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d3b5      	bcc.n	8005028 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	687e      	ldr	r6, [r7, #4]
 80050c4:	466d      	mov	r5, sp
 80050c6:	f106 0410 	add.w	r4, r6, #16
 80050ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80050da:	1d33      	adds	r3, r6, #4
 80050dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050de:	6838      	ldr	r0, [r7, #0]
 80050e0:	f003 ffd8 	bl	8009094 <USB_DevInit>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e00d      	b.n	8005112 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f004 f9a3 	bl	8009456 <USB_DevDisconnect>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800511c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e267      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d075      	beq.n	8005226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800513a:	4b88      	ldr	r3, [pc, #544]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b04      	cmp	r3, #4
 8005144:	d00c      	beq.n	8005160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005146:	4b85      	ldr	r3, [pc, #532]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800514e:	2b08      	cmp	r3, #8
 8005150:	d112      	bne.n	8005178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005152:	4b82      	ldr	r3, [pc, #520]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515e:	d10b      	bne.n	8005178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005160:	4b7e      	ldr	r3, [pc, #504]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d05b      	beq.n	8005224 <HAL_RCC_OscConfig+0x108>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d157      	bne.n	8005224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e242      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d106      	bne.n	8005190 <HAL_RCC_OscConfig+0x74>
 8005182:	4b76      	ldr	r3, [pc, #472]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a75      	ldr	r2, [pc, #468]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e01d      	b.n	80051cc <HAL_RCC_OscConfig+0xb0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x98>
 800519a:	4b70      	ldr	r3, [pc, #448]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a6f      	ldr	r2, [pc, #444]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	4b6d      	ldr	r3, [pc, #436]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a6c      	ldr	r2, [pc, #432]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0xb0>
 80051b4:	4b69      	ldr	r3, [pc, #420]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a68      	ldr	r2, [pc, #416]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a65      	ldr	r2, [pc, #404]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fe faca 	bl	800376c <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fe fac6 	bl	800376c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e207      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b5b      	ldr	r3, [pc, #364]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0xc0>
 80051fa:	e014      	b.n	8005226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fe fab6 	bl	800376c <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005204:	f7fe fab2 	bl	800376c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e1f3      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005216:	4b51      	ldr	r3, [pc, #324]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0xe8>
 8005222:	e000      	b.n	8005226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d063      	beq.n	80052fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005232:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005246:	2b08      	cmp	r3, #8
 8005248:	d11c      	bne.n	8005284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524a:	4b44      	ldr	r3, [pc, #272]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d116      	bne.n	8005284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005256:	4b41      	ldr	r3, [pc, #260]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_RCC_OscConfig+0x152>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e1c7      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526e:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4937      	ldr	r1, [pc, #220]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005282:	e03a      	b.n	80052fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d020      	beq.n	80052ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800528c:	4b34      	ldr	r3, [pc, #208]	; (8005360 <HAL_RCC_OscConfig+0x244>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fe fa6b 	bl	800376c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800529a:	f7fe fa67 	bl	800376c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e1a8      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ac:	4b2b      	ldr	r3, [pc, #172]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b8:	4b28      	ldr	r3, [pc, #160]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4925      	ldr	r1, [pc, #148]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
 80052cc:	e015      	b.n	80052fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCC_OscConfig+0x244>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fe fa4a 	bl	800376c <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052dc:	f7fe fa46 	bl	800376c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e187      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d036      	beq.n	8005374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530e:	4b15      	ldr	r3, [pc, #84]	; (8005364 <HAL_RCC_OscConfig+0x248>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005314:	f7fe fa2a 	bl	800376c <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531c:	f7fe fa26 	bl	800376c <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e167      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x200>
 800533a:	e01b      	b.n	8005374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_OscConfig+0x248>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005342:	f7fe fa13 	bl	800376c <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005348:	e00e      	b.n	8005368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800534a:	f7fe fa0f 	bl	800376c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d907      	bls.n	8005368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e150      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
 800535c:	40023800 	.word	0x40023800
 8005360:	42470000 	.word	0x42470000
 8005364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005368:	4b88      	ldr	r3, [pc, #544]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800536a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ea      	bne.n	800534a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8097 	beq.w	80054b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005386:	4b81      	ldr	r3, [pc, #516]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10f      	bne.n	80053b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	4b7d      	ldr	r3, [pc, #500]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a7c      	ldr	r2, [pc, #496]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40
 80053a2:	4b7a      	ldr	r3, [pc, #488]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b2:	4b77      	ldr	r3, [pc, #476]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d118      	bne.n	80053f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053be:	4b74      	ldr	r3, [pc, #464]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a73      	ldr	r2, [pc, #460]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ca:	f7fe f9cf 	bl	800376c <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d2:	f7fe f9cb 	bl	800376c <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e10c      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e4:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <HAL_RCC_OscConfig+0x2ea>
 80053f8:	4b64      	ldr	r3, [pc, #400]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a63      	ldr	r2, [pc, #396]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
 8005404:	e01c      	b.n	8005440 <HAL_RCC_OscConfig+0x324>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b05      	cmp	r3, #5
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x30c>
 800540e:	4b5f      	ldr	r3, [pc, #380]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a5e      	ldr	r2, [pc, #376]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005414:	f043 0304 	orr.w	r3, r3, #4
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	4b5c      	ldr	r3, [pc, #368]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a5b      	ldr	r2, [pc, #364]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
 8005426:	e00b      	b.n	8005440 <HAL_RCC_OscConfig+0x324>
 8005428:	4b58      	ldr	r3, [pc, #352]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	4a57      	ldr	r2, [pc, #348]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	6713      	str	r3, [r2, #112]	; 0x70
 8005434:	4b55      	ldr	r3, [pc, #340]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	4a54      	ldr	r2, [pc, #336]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800543a:	f023 0304 	bic.w	r3, r3, #4
 800543e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d015      	beq.n	8005474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fe f990 	bl	800376c <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005450:	f7fe f98c 	bl	800376c <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e0cb      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005466:	4b49      	ldr	r3, [pc, #292]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0ee      	beq.n	8005450 <HAL_RCC_OscConfig+0x334>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005474:	f7fe f97a 	bl	800376c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800547a:	e00a      	b.n	8005492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800547c:	f7fe f976 	bl	800376c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0b5      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005492:	4b3e      	ldr	r3, [pc, #248]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1ee      	bne.n	800547c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d105      	bne.n	80054b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a4:	4b39      	ldr	r3, [pc, #228]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	4a38      	ldr	r2, [pc, #224]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a1 	beq.w	80055fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ba:	4b34      	ldr	r3, [pc, #208]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d05c      	beq.n	8005580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d141      	bne.n	8005552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ce:	4b31      	ldr	r3, [pc, #196]	; (8005594 <HAL_RCC_OscConfig+0x478>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fe f94a 	bl	800376c <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054dc:	f7fe f946 	bl	800376c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e087      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	3b01      	subs	r3, #1
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	061b      	lsls	r3, r3, #24
 800551e:	491b      	ldr	r1, [pc, #108]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x478>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552a:	f7fe f91f 	bl	800376c <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005532:	f7fe f91b 	bl	800376c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e05c      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005544:	4b11      	ldr	r3, [pc, #68]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x416>
 8005550:	e054      	b.n	80055fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <HAL_RCC_OscConfig+0x478>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005558:	f7fe f908 	bl	800376c <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005560:	f7fe f904 	bl	800376c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e045      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x444>
 800557e:	e03d      	b.n	80055fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d107      	bne.n	8005598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e038      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
 800558c:	40023800 	.word	0x40023800
 8005590:	40007000 	.word	0x40007000
 8005594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCC_OscConfig+0x4ec>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d028      	beq.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d121      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d11a      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055c8:	4013      	ands	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d111      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	3b01      	subs	r3, #1
 80055e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d107      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800

0800560c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0cc      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005620:	4b68      	ldr	r3, [pc, #416]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d90c      	bls.n	8005648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562e:	4b65      	ldr	r3, [pc, #404]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0b8      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d020      	beq.n	8005696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005660:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a58      	ldr	r2, [pc, #352]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800566a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005678:	4b53      	ldr	r3, [pc, #332]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a52      	ldr	r2, [pc, #328]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005684:	4b50      	ldr	r3, [pc, #320]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	494d      	ldr	r1, [pc, #308]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	4313      	orrs	r3, r2
 8005694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d044      	beq.n	800572c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d107      	bne.n	80056ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056aa:	4b47      	ldr	r3, [pc, #284]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d119      	bne.n	80056ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e07f      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d003      	beq.n	80056ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d107      	bne.n	80056da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ca:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e06f      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056da:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e067      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ea:	4b37      	ldr	r3, [pc, #220]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 0203 	bic.w	r2, r3, #3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4934      	ldr	r1, [pc, #208]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056fc:	f7fe f836 	bl	800376c <HAL_GetTick>
 8005700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005702:	e00a      	b.n	800571a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005704:	f7fe f832 	bl	800376c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e04f      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 020c 	and.w	r2, r3, #12
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	429a      	cmp	r2, r3
 800572a:	d1eb      	bne.n	8005704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d20c      	bcs.n	8005754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573a:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e032      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005760:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4916      	ldr	r1, [pc, #88]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	490e      	ldr	r1, [pc, #56]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005792:	f000 f821 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 8005796:	4602      	mov	r2, r0
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	490a      	ldr	r1, [pc, #40]	; (80057cc <HAL_RCC_ClockConfig+0x1c0>)
 80057a4:	5ccb      	ldrb	r3, [r1, r3]
 80057a6:	fa22 f303 	lsr.w	r3, r2, r3
 80057aa:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <HAL_RCC_ClockConfig+0x1c4>)
 80057ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_RCC_ClockConfig+0x1c8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd ff96 	bl	80036e4 <HAL_InitTick>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40023c00 	.word	0x40023c00
 80057c8:	40023800 	.word	0x40023800
 80057cc:	0800ac24 	.word	0x0800ac24
 80057d0:	20000134 	.word	0x20000134
 80057d4:	20000138 	.word	0x20000138

080057d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057dc:	b094      	sub	sp, #80	; 0x50
 80057de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	647b      	str	r3, [r7, #68]	; 0x44
 80057e4:	2300      	movs	r3, #0
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e8:	2300      	movs	r3, #0
 80057ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057f0:	4b79      	ldr	r3, [pc, #484]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d00d      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0x40>
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	f200 80e1 	bhi.w	80059c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x34>
 8005806:	2b04      	cmp	r3, #4
 8005808:	d003      	beq.n	8005812 <HAL_RCC_GetSysClockFreq+0x3a>
 800580a:	e0db      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4b73      	ldr	r3, [pc, #460]	; (80059dc <HAL_RCC_GetSysClockFreq+0x204>)
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005810:	e0db      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005812:	4b73      	ldr	r3, [pc, #460]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005816:	e0d8      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005818:	4b6f      	ldr	r3, [pc, #444]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005822:	4b6d      	ldr	r3, [pc, #436]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d063      	beq.n	80058f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582e:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	099b      	lsrs	r3, r3, #6
 8005834:	2200      	movs	r2, #0
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	63fa      	str	r2, [r7, #60]	; 0x3c
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005840:	633b      	str	r3, [r7, #48]	; 0x30
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800584a:	4622      	mov	r2, r4
 800584c:	462b      	mov	r3, r5
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	0159      	lsls	r1, r3, #5
 8005858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800585c:	0150      	lsls	r0, r2, #5
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4621      	mov	r1, r4
 8005864:	1a51      	subs	r1, r2, r1
 8005866:	6139      	str	r1, [r7, #16]
 8005868:	4629      	mov	r1, r5
 800586a:	eb63 0301 	sbc.w	r3, r3, r1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800587c:	4659      	mov	r1, fp
 800587e:	018b      	lsls	r3, r1, #6
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005886:	4651      	mov	r1, sl
 8005888:	018a      	lsls	r2, r1, #6
 800588a:	4651      	mov	r1, sl
 800588c:	ebb2 0801 	subs.w	r8, r2, r1
 8005890:	4659      	mov	r1, fp
 8005892:	eb63 0901 	sbc.w	r9, r3, r1
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058aa:	4690      	mov	r8, r2
 80058ac:	4699      	mov	r9, r3
 80058ae:	4623      	mov	r3, r4
 80058b0:	eb18 0303 	adds.w	r3, r8, r3
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	462b      	mov	r3, r5
 80058b8:	eb49 0303 	adc.w	r3, r9, r3
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058ca:	4629      	mov	r1, r5
 80058cc:	024b      	lsls	r3, r1, #9
 80058ce:	4621      	mov	r1, r4
 80058d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058d4:	4621      	mov	r1, r4
 80058d6:	024a      	lsls	r2, r1, #9
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058de:	2200      	movs	r2, #0
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058e8:	f7fb f8c8 	bl	8000a7c <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4613      	mov	r3, r2
 80058f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f4:	e058      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f6:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	2200      	movs	r2, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	4611      	mov	r1, r2
 8005902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
 800590c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f04f 0100 	mov.w	r1, #0
 800591c:	0159      	lsls	r1, r3, #5
 800591e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005922:	0150      	lsls	r0, r2, #5
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4641      	mov	r1, r8
 800592a:	ebb2 0a01 	subs.w	sl, r2, r1
 800592e:	4649      	mov	r1, r9
 8005930:	eb63 0b01 	sbc.w	fp, r3, r1
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005948:	ebb2 040a 	subs.w	r4, r2, sl
 800594c:	eb63 050b 	sbc.w	r5, r3, fp
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	00eb      	lsls	r3, r5, #3
 800595a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800595e:	00e2      	lsls	r2, r4, #3
 8005960:	4614      	mov	r4, r2
 8005962:	461d      	mov	r5, r3
 8005964:	4643      	mov	r3, r8
 8005966:	18e3      	adds	r3, r4, r3
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	464b      	mov	r3, r9
 800596c:	eb45 0303 	adc.w	r3, r5, r3
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800597e:	4629      	mov	r1, r5
 8005980:	028b      	lsls	r3, r1, #10
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005988:	4621      	mov	r1, r4
 800598a:	028a      	lsls	r2, r1, #10
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005992:	2200      	movs	r2, #0
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	61fa      	str	r2, [r7, #28]
 8005998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800599c:	f7fb f86e 	bl	8000a7c <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	3301      	adds	r3, #1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059c2:	e002      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RCC_GetSysClockFreq+0x204>)
 80059c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3750      	adds	r7, #80	; 0x50
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	007a1200 	.word	0x007a1200

080059e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000134 	.word	0x20000134

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a00:	f7ff fff0 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0a9b      	lsrs	r3, r3, #10
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800ac34 	.word	0x0800ac34

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a28:	f7ff ffdc 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0b5b      	lsrs	r3, r3, #13
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4903      	ldr	r1, [pc, #12]	; (8005a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	0800ac34 	.word	0x0800ac34

08005a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d075      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a80:	4b91      	ldr	r3, [pc, #580]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a86:	f7fd fe71 	bl	800376c <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a8e:	f7fd fe6d 	bl	800376c <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e189      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aa0:	4b8a      	ldr	r3, [pc, #552]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f0      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	019a      	lsls	r2, r3, #6
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	071b      	lsls	r3, r3, #28
 8005ac4:	4981      	ldr	r1, [pc, #516]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01f      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ad8:	4b7c      	ldr	r3, [pc, #496]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ade:	0f1b      	lsrs	r3, r3, #28
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	019a      	lsls	r2, r3, #6
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	061b      	lsls	r3, r3, #24
 8005af2:	431a      	orrs	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	071b      	lsls	r3, r3, #28
 8005af8:	4974      	ldr	r1, [pc, #464]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b00:	4b72      	ldr	r3, [pc, #456]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b06:	f023 021f 	bic.w	r2, r3, #31
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	496e      	ldr	r1, [pc, #440]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	019a      	lsls	r2, r3, #6
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	071b      	lsls	r3, r3, #28
 8005b38:	4964      	ldr	r1, [pc, #400]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b40:	4b61      	ldr	r3, [pc, #388]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b46:	f7fd fe11 	bl	800376c <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b4e:	f7fd fe0d 	bl	800376c <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e129      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b60:	4b5a      	ldr	r3, [pc, #360]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d079      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b84:	4b52      	ldr	r3, [pc, #328]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b8a:	f7fd fdef 	bl	800376c <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b92:	f7fd fdeb 	bl	800376c <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e107      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ba4:	4b49      	ldr	r3, [pc, #292]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb0:	d0ef      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bbe:	4b43      	ldr	r3, [pc, #268]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	0f1b      	lsrs	r3, r3, #28
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	019a      	lsls	r2, r3, #6
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	061b      	lsls	r3, r3, #24
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	071b      	lsls	r3, r3, #28
 8005bde:	493b      	ldr	r1, [pc, #236]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005be6:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	4934      	ldr	r1, [pc, #208]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01e      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c0c:	4b2f      	ldr	r3, [pc, #188]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	0e1b      	lsrs	r3, r3, #24
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	019a      	lsls	r2, r3, #6
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	061b      	lsls	r3, r3, #24
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	071b      	lsls	r3, r3, #28
 8005c2c:	4927      	ldr	r1, [pc, #156]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c34:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	4922      	ldr	r1, [pc, #136]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c4a:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c50:	f7fd fd8c 	bl	800376c <HAL_GetTick>
 8005c54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c58:	f7fd fd88 	bl	800376c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e0a4      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c6a:	4b18      	ldr	r3, [pc, #96]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c76:	d1ef      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 808b 	beq.w	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	4a0f      	ldr	r2, [pc, #60]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6413      	str	r3, [r2, #64]	; 0x40
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cae:	f7fd fd5d 	bl	800376c <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cb4:	e010      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cb6:	f7fd fd59 	bl	800376c <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d909      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e075      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005cc8:	42470068 	.word	0x42470068
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	42470070 	.word	0x42470070
 8005cd4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cd8:	4b38      	ldr	r3, [pc, #224]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0e8      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ce4:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02f      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d028      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d02:	4b2f      	ldr	r3, [pc, #188]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d12:	4b2c      	ldr	r3, [pc, #176]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d18:	4a29      	ldr	r2, [pc, #164]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d1e:	4b28      	ldr	r3, [pc, #160]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d114      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d2a:	f7fd fd1f 	bl	800376c <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d30:	e00a      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d32:	f7fd fd1b 	bl	800376c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e035      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0ee      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d60:	d10d      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	4912      	ldr	r1, [pc, #72]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	608b      	str	r3, [r1, #8]
 8005d7c:	e005      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	4a0f      	ldr	r2, [pc, #60]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d88:	6093      	str	r3, [r2, #8]
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d96:	490a      	ldr	r1, [pc, #40]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005db0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40007000 	.word	0x40007000
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	42470e40 	.word	0x42470e40
 8005dc8:	424711e0 	.word	0x424711e0

08005dcc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e066      	b.n	8005eb0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7f5b      	ldrb	r3, [r3, #29]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fc fe1c 	bl	8002a30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	22ca      	movs	r2, #202	; 0xca
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2253      	movs	r2, #83	; 0x53
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa45 	bl	800629e <RTC_EnterInitMode>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d12c      	bne.n	8005e78 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e30:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6899      	ldr	r1, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	68d2      	ldr	r2, [r2, #12]
 8005e58:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6919      	ldr	r1, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	041a      	lsls	r2, r3, #16
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa4c 	bl	800630c <RTC_ExitInitMode>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d113      	bne.n	8005ea6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	22ff      	movs	r2, #255	; 0xff
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	7f1b      	ldrb	r3, [r3, #28]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_RTC_SetTime+0x1c>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e087      	b.n	8005fe4 <HAL_RTC_SetTime+0x12c>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2202      	movs	r2, #2
 8005ede:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d126      	bne.n	8005f34 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fa29 	bl	8006356 <RTC_ByteToBcd2>
 8005f04:	4603      	mov	r3, r0
 8005f06:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fa22 	bl	8006356 <RTC_ByteToBcd2>
 8005f12:	4603      	mov	r3, r0
 8005f14:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f16:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	789b      	ldrb	r3, [r3, #2]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fa1a 	bl	8006356 <RTC_ByteToBcd2>
 8005f22:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f24:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	78db      	ldrb	r3, [r3, #3]
 8005f2c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e018      	b.n	8005f66 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f54:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f5a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	78db      	ldrb	r3, [r3, #3]
 8005f60:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	22ca      	movs	r2, #202	; 0xca
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2253      	movs	r2, #83	; 0x53
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f991 	bl	800629e <RTC_EnterInitMode>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f80:	7cfb      	ldrb	r3, [r7, #19]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d120      	bne.n	8005fc8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f90:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f94:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fa4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6899      	ldr	r1, [r3, #8]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f9a4 	bl	800630c <RTC_ExitInitMode>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	22ff      	movs	r2, #255	; 0xff
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	771a      	strb	r2, [r3, #28]

  return status;
 8005fe2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}

08005fec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800601e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006022:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603e:	b2da      	uxtb	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800604c:	b2da      	uxtb	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	0d9b      	lsrs	r3, r3, #22
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11a      	bne.n	800609e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 f98f 	bl	8006390 <RTC_Bcd2ToByte>
 8006072:	4603      	mov	r3, r0
 8006074:	461a      	mov	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f986 	bl	8006390 <RTC_Bcd2ToByte>
 8006084:	4603      	mov	r3, r0
 8006086:	461a      	mov	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	789b      	ldrb	r3, [r3, #2]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f97d 	bl	8006390 <RTC_Bcd2ToByte>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	7f1b      	ldrb	r3, [r3, #28]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_RTC_SetDate+0x1c>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e071      	b.n	80061a8 <HAL_RTC_SetDate+0x100>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2202      	movs	r2, #2
 80060ce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10e      	bne.n	80060f4 <HAL_RTC_SetDate+0x4c>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	330a      	adds	r3, #10
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11c      	bne.n	8006134 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	78db      	ldrb	r3, [r3, #3]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f929 	bl	8006356 <RTC_ByteToBcd2>
 8006104:	4603      	mov	r3, r0
 8006106:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 f922 	bl	8006356 <RTC_ByteToBcd2>
 8006112:	4603      	mov	r3, r0
 8006114:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006116:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	789b      	ldrb	r3, [r3, #2]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f91a 	bl	8006356 <RTC_ByteToBcd2>
 8006122:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006124:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	e00e      	b.n	8006152 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	78db      	ldrb	r3, [r3, #3]
 8006138:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006140:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006146:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	22ca      	movs	r2, #202	; 0xca
 8006158:	625a      	str	r2, [r3, #36]	; 0x24
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2253      	movs	r2, #83	; 0x53
 8006160:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f89b 	bl	800629e <RTC_EnterInitMode>
 8006168:	4603      	mov	r3, r0
 800616a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800616c:	7cfb      	ldrb	r3, [r7, #19]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10c      	bne.n	800618c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800617c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006180:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f8c2 	bl	800630c <RTC_ExitInitMode>
 8006188:	4603      	mov	r3, r0
 800618a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	771a      	strb	r2, [r3, #28]

  return status;
 80061a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd90      	pop	{r4, r7, pc}

080061b0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	0a1b      	lsrs	r3, r3, #8
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	0b5b      	lsrs	r3, r3, #13
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d11a      	bne.n	8006244 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	78db      	ldrb	r3, [r3, #3]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f8bc 	bl	8006390 <RTC_Bcd2ToByte>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f8b3 	bl	8006390 <RTC_Bcd2ToByte>
 800622a:	4603      	mov	r3, r0
 800622c:	461a      	mov	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	789b      	ldrb	r3, [r3, #2]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f8aa 	bl	8006390 <RTC_Bcd2ToByte>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006268:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800626a:	f7fd fa7f 	bl	800376c <HAL_GetTick>
 800626e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006270:	e009      	b.n	8006286 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006272:	f7fd fa7b 	bl	800376c <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006280:	d901      	bls.n	8006286 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e007      	b.n	8006296 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0ee      	beq.n	8006272 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d122      	bne.n	8006302 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062cc:	f7fd fa4e 	bl	800376c <HAL_GetTick>
 80062d0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80062d2:	e00c      	b.n	80062ee <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062d4:	f7fd fa4a 	bl	800376c <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062e2:	d904      	bls.n	80062ee <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2204      	movs	r2, #4
 80062e8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <RTC_EnterInitMode+0x64>
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d1e8      	bne.n	80062d4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006326:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ff89 	bl	800624e <HAL_RTC_WaitForSynchro>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2204      	movs	r2, #4
 8006346:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	4603      	mov	r3, r0
 800635e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006364:	e005      	b.n	8006372 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	3301      	adds	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	3b0a      	subs	r3, #10
 8006370:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	2b09      	cmp	r3, #9
 8006376:	d8f6      	bhi.n	8006366 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	b2da      	uxtb	r2, r3
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	4313      	orrs	r3, r2
 8006382:	b2db      	uxtb	r3, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	0092      	lsls	r2, r2, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	4413      	add	r3, r2
 80063ba:	b2db      	uxtb	r3, r3
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e041      	b.n	800645e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fc fbbe 	bl	8002b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f001 f844 	bl	8007494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d001      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e04e      	b.n	800651e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a23      	ldr	r2, [pc, #140]	; (800652c <HAL_TIM_Base_Start_IT+0xc4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d022      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064aa:	d01d      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1f      	ldr	r2, [pc, #124]	; (8006530 <HAL_TIM_Base_Start_IT+0xc8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d018      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <HAL_TIM_Base_Start_IT+0xcc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <HAL_TIM_Base_Start_IT+0xd0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1b      	ldr	r2, [pc, #108]	; (800653c <HAL_TIM_Base_Start_IT+0xd4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a19      	ldr	r2, [pc, #100]	; (8006540 <HAL_TIM_Base_Start_IT+0xd8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a18      	ldr	r2, [pc, #96]	; (8006544 <HAL_TIM_Base_Start_IT+0xdc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d111      	bne.n	800650c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d010      	beq.n	800651c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	e007      	b.n	800651c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40010000 	.word	0x40010000
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40010400 	.word	0x40010400
 8006540:	40014000 	.word	0x40014000
 8006544:	40001800 	.word	0x40001800

08006548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e041      	b.n	80065de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fc fa88 	bl	8002a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f000 ff84 	bl	8007494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <HAL_TIM_PWM_Start+0x24>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b01      	cmp	r3, #1
 8006602:	bf14      	ite	ne
 8006604:	2301      	movne	r3, #1
 8006606:	2300      	moveq	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e022      	b.n	8006652 <HAL_TIM_PWM_Start+0x6a>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b04      	cmp	r3, #4
 8006610:	d109      	bne.n	8006626 <HAL_TIM_PWM_Start+0x3e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	bf14      	ite	ne
 800661e:	2301      	movne	r3, #1
 8006620:	2300      	moveq	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	e015      	b.n	8006652 <HAL_TIM_PWM_Start+0x6a>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d109      	bne.n	8006640 <HAL_TIM_PWM_Start+0x58>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e008      	b.n	8006652 <HAL_TIM_PWM_Start+0x6a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e07c      	b.n	8006754 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0x82>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006668:	e013      	b.n	8006692 <HAL_TIM_PWM_Start+0xaa>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b04      	cmp	r3, #4
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0x92>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006678:	e00b      	b.n	8006692 <HAL_TIM_PWM_Start+0xaa>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start+0xa2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006688:	e003      	b.n	8006692 <HAL_TIM_PWM_Start+0xaa>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2201      	movs	r2, #1
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fb0e 	bl	8007cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a2d      	ldr	r2, [pc, #180]	; (800675c <HAL_TIM_PWM_Start+0x174>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_TIM_PWM_Start+0xcc>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a2c      	ldr	r2, [pc, #176]	; (8006760 <HAL_TIM_PWM_Start+0x178>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d101      	bne.n	80066b8 <HAL_TIM_PWM_Start+0xd0>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_TIM_PWM_Start+0xd2>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a22      	ldr	r2, [pc, #136]	; (800675c <HAL_TIM_PWM_Start+0x174>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d022      	beq.n	800671e <HAL_TIM_PWM_Start+0x136>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e0:	d01d      	beq.n	800671e <HAL_TIM_PWM_Start+0x136>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <HAL_TIM_PWM_Start+0x17c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d018      	beq.n	800671e <HAL_TIM_PWM_Start+0x136>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <HAL_TIM_PWM_Start+0x180>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_TIM_PWM_Start+0x136>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1c      	ldr	r2, [pc, #112]	; (800676c <HAL_TIM_PWM_Start+0x184>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00e      	beq.n	800671e <HAL_TIM_PWM_Start+0x136>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a16      	ldr	r2, [pc, #88]	; (8006760 <HAL_TIM_PWM_Start+0x178>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <HAL_TIM_PWM_Start+0x136>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a18      	ldr	r2, [pc, #96]	; (8006770 <HAL_TIM_PWM_Start+0x188>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d004      	beq.n	800671e <HAL_TIM_PWM_Start+0x136>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a16      	ldr	r2, [pc, #88]	; (8006774 <HAL_TIM_PWM_Start+0x18c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d111      	bne.n	8006742 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b06      	cmp	r3, #6
 800672e:	d010      	beq.n	8006752 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006740:	e007      	b.n	8006752 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40010000 	.word	0x40010000
 8006760:	40010400 	.word	0x40010400
 8006764:	40000400 	.word	0x40000400
 8006768:	40000800 	.word	0x40000800
 800676c:	40000c00 	.word	0x40000c00
 8006770:	40014000 	.word	0x40014000
 8006774:	40001800 	.word	0x40001800

08006778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f001 fa96 	bl	8007cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_TIM_PWM_Stop+0xd8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d004      	beq.n	80067a4 <HAL_TIM_PWM_Stop+0x2c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a2d      	ldr	r2, [pc, #180]	; (8006854 <HAL_TIM_PWM_Stop+0xdc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d101      	bne.n	80067a8 <HAL_TIM_PWM_Stop+0x30>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <HAL_TIM_PWM_Stop+0x32>
 80067a8:	2300      	movs	r3, #0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d017      	beq.n	80067de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a1a      	ldr	r2, [r3, #32]
 80067b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10f      	bne.n	80067de <HAL_TIM_PWM_Stop+0x66>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a1a      	ldr	r2, [r3, #32]
 80067c4:	f240 4344 	movw	r3, #1092	; 0x444
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <HAL_TIM_PWM_Stop+0x66>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10f      	bne.n	800680e <HAL_TIM_PWM_Stop+0x96>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	f240 4344 	movw	r3, #1092	; 0x444
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d107      	bne.n	800680e <HAL_TIM_PWM_Stop+0x96>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0201 	bic.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <HAL_TIM_PWM_Stop+0xa6>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800681c:	e013      	b.n	8006846 <HAL_TIM_PWM_Stop+0xce>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d104      	bne.n	800682e <HAL_TIM_PWM_Stop+0xb6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800682c:	e00b      	b.n	8006846 <HAL_TIM_PWM_Stop+0xce>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b08      	cmp	r3, #8
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Stop+0xc6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800683c:	e003      	b.n	8006846 <HAL_TIM_PWM_Stop+0xce>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40010000 	.word	0x40010000
 8006854:	40010400 	.word	0x40010400

08006858 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_TIM_PWM_Start_IT+0x28>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	e022      	b.n	80068c6 <HAL_TIM_PWM_Start_IT+0x6e>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d109      	bne.n	800689a <HAL_TIM_PWM_Start_IT+0x42>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	bf14      	ite	ne
 8006892:	2301      	movne	r3, #1
 8006894:	2300      	moveq	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	e015      	b.n	80068c6 <HAL_TIM_PWM_Start_IT+0x6e>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b08      	cmp	r3, #8
 800689e:	d109      	bne.n	80068b4 <HAL_TIM_PWM_Start_IT+0x5c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e008      	b.n	80068c6 <HAL_TIM_PWM_Start_IT+0x6e>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	bf14      	ite	ne
 80068c0:	2301      	movne	r3, #1
 80068c2:	2300      	moveq	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e0c7      	b.n	8006a5e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <HAL_TIM_PWM_Start_IT+0x86>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068dc:	e013      	b.n	8006906 <HAL_TIM_PWM_Start_IT+0xae>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d104      	bne.n	80068ee <HAL_TIM_PWM_Start_IT+0x96>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ec:	e00b      	b.n	8006906 <HAL_TIM_PWM_Start_IT+0xae>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d104      	bne.n	80068fe <HAL_TIM_PWM_Start_IT+0xa6>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068fc:	e003      	b.n	8006906 <HAL_TIM_PWM_Start_IT+0xae>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b0c      	cmp	r3, #12
 800690a:	d841      	bhi.n	8006990 <HAL_TIM_PWM_Start_IT+0x138>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <HAL_TIM_PWM_Start_IT+0xbc>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006949 	.word	0x08006949
 8006918:	08006991 	.word	0x08006991
 800691c:	08006991 	.word	0x08006991
 8006920:	08006991 	.word	0x08006991
 8006924:	0800695b 	.word	0x0800695b
 8006928:	08006991 	.word	0x08006991
 800692c:	08006991 	.word	0x08006991
 8006930:	08006991 	.word	0x08006991
 8006934:	0800696d 	.word	0x0800696d
 8006938:	08006991 	.word	0x08006991
 800693c:	08006991 	.word	0x08006991
 8006940:	08006991 	.word	0x08006991
 8006944:	0800697f 	.word	0x0800697f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0202 	orr.w	r2, r2, #2
 8006956:	60da      	str	r2, [r3, #12]
      break;
 8006958:	e01d      	b.n	8006996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0204 	orr.w	r2, r2, #4
 8006968:	60da      	str	r2, [r3, #12]
      break;
 800696a:	e014      	b.n	8006996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0208 	orr.w	r2, r2, #8
 800697a:	60da      	str	r2, [r3, #12]
      break;
 800697c:	e00b      	b.n	8006996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0210 	orr.w	r2, r2, #16
 800698c:	60da      	str	r2, [r3, #12]
      break;
 800698e:	e002      	b.n	8006996 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      break;
 8006994:	bf00      	nop
  }

  if (status == HAL_OK)
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d15f      	bne.n	8006a5c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2201      	movs	r2, #1
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f989 	bl	8007cbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2e      	ldr	r2, [pc, #184]	; (8006a68 <HAL_TIM_PWM_Start_IT+0x210>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d004      	beq.n	80069be <HAL_TIM_PWM_Start_IT+0x166>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <HAL_TIM_PWM_Start_IT+0x214>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d101      	bne.n	80069c2 <HAL_TIM_PWM_Start_IT+0x16a>
 80069be:	2301      	movs	r3, #1
 80069c0:	e000      	b.n	80069c4 <HAL_TIM_PWM_Start_IT+0x16c>
 80069c2:	2300      	movs	r3, #0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a22      	ldr	r2, [pc, #136]	; (8006a68 <HAL_TIM_PWM_Start_IT+0x210>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d022      	beq.n	8006a28 <HAL_TIM_PWM_Start_IT+0x1d0>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ea:	d01d      	beq.n	8006a28 <HAL_TIM_PWM_Start_IT+0x1d0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <HAL_TIM_PWM_Start_IT+0x218>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d018      	beq.n	8006a28 <HAL_TIM_PWM_Start_IT+0x1d0>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1e      	ldr	r2, [pc, #120]	; (8006a74 <HAL_TIM_PWM_Start_IT+0x21c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d013      	beq.n	8006a28 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1c      	ldr	r2, [pc, #112]	; (8006a78 <HAL_TIM_PWM_Start_IT+0x220>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00e      	beq.n	8006a28 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a17      	ldr	r2, [pc, #92]	; (8006a6c <HAL_TIM_PWM_Start_IT+0x214>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d009      	beq.n	8006a28 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <HAL_TIM_PWM_Start_IT+0x224>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a17      	ldr	r2, [pc, #92]	; (8006a80 <HAL_TIM_PWM_Start_IT+0x228>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d111      	bne.n	8006a4c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b06      	cmp	r3, #6
 8006a38:	d010      	beq.n	8006a5c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 0201 	orr.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4a:	e007      	b.n	8006a5c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0201 	orr.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	40000c00 	.word	0x40000c00
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40001800 	.word	0x40001800

08006a84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e041      	b.n	8006b1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fc f810 	bl	8002ad0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f000 fce6 	bl	8007494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <HAL_TIM_IC_Start_IT+0x1e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	e013      	b.n	8006b6a <HAL_TIM_IC_Start_IT+0x46>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_IC_Start_IT+0x2e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	e00b      	b.n	8006b6a <HAL_TIM_IC_Start_IT+0x46>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d104      	bne.n	8006b62 <HAL_TIM_IC_Start_IT+0x3e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	e003      	b.n	8006b6a <HAL_TIM_IC_Start_IT+0x46>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <HAL_TIM_IC_Start_IT+0x58>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	e013      	b.n	8006ba4 <HAL_TIM_IC_Start_IT+0x80>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d104      	bne.n	8006b8c <HAL_TIM_IC_Start_IT+0x68>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e00b      	b.n	8006ba4 <HAL_TIM_IC_Start_IT+0x80>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d104      	bne.n	8006b9c <HAL_TIM_IC_Start_IT+0x78>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	e003      	b.n	8006ba4 <HAL_TIM_IC_Start_IT+0x80>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d102      	bne.n	8006bb2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bac:	7b7b      	ldrb	r3, [r7, #13]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d001      	beq.n	8006bb6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0cc      	b.n	8006d50 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <HAL_TIM_IC_Start_IT+0xa2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bc4:	e013      	b.n	8006bee <HAL_TIM_IC_Start_IT+0xca>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d104      	bne.n	8006bd6 <HAL_TIM_IC_Start_IT+0xb2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bd4:	e00b      	b.n	8006bee <HAL_TIM_IC_Start_IT+0xca>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d104      	bne.n	8006be6 <HAL_TIM_IC_Start_IT+0xc2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006be4:	e003      	b.n	8006bee <HAL_TIM_IC_Start_IT+0xca>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_IC_Start_IT+0xda>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bfc:	e013      	b.n	8006c26 <HAL_TIM_IC_Start_IT+0x102>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_IC_Start_IT+0xea>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c0c:	e00b      	b.n	8006c26 <HAL_TIM_IC_Start_IT+0x102>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_IC_Start_IT+0xfa>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c1c:	e003      	b.n	8006c26 <HAL_TIM_IC_Start_IT+0x102>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b0c      	cmp	r3, #12
 8006c2a:	d841      	bhi.n	8006cb0 <HAL_TIM_IC_Start_IT+0x18c>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <HAL_TIM_IC_Start_IT+0x110>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c69 	.word	0x08006c69
 8006c38:	08006cb1 	.word	0x08006cb1
 8006c3c:	08006cb1 	.word	0x08006cb1
 8006c40:	08006cb1 	.word	0x08006cb1
 8006c44:	08006c7b 	.word	0x08006c7b
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006cb1 	.word	0x08006cb1
 8006c50:	08006cb1 	.word	0x08006cb1
 8006c54:	08006c8d 	.word	0x08006c8d
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006c9f 	.word	0x08006c9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0202 	orr.w	r2, r2, #2
 8006c76:	60da      	str	r2, [r3, #12]
      break;
 8006c78:	e01d      	b.n	8006cb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0204 	orr.w	r2, r2, #4
 8006c88:	60da      	str	r2, [r3, #12]
      break;
 8006c8a:	e014      	b.n	8006cb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0208 	orr.w	r2, r2, #8
 8006c9a:	60da      	str	r2, [r3, #12]
      break;
 8006c9c:	e00b      	b.n	8006cb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0210 	orr.w	r2, r2, #16
 8006cac:	60da      	str	r2, [r3, #12]
      break;
 8006cae:	e002      	b.n	8006cb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d148      	bne.n	8006d4e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fff9 	bl	8007cbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a22      	ldr	r2, [pc, #136]	; (8006d58 <HAL_TIM_IC_Start_IT+0x234>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d022      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0x1f6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cdc:	d01d      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0x1f6>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <HAL_TIM_IC_Start_IT+0x238>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d018      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0x1f6>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1c      	ldr	r2, [pc, #112]	; (8006d60 <HAL_TIM_IC_Start_IT+0x23c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0x1f6>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1b      	ldr	r2, [pc, #108]	; (8006d64 <HAL_TIM_IC_Start_IT+0x240>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00e      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0x1f6>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a19      	ldr	r2, [pc, #100]	; (8006d68 <HAL_TIM_IC_Start_IT+0x244>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d009      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0x1f6>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a18      	ldr	r2, [pc, #96]	; (8006d6c <HAL_TIM_IC_Start_IT+0x248>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0x1f6>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <HAL_TIM_IC_Start_IT+0x24c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d111      	bne.n	8006d3e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b06      	cmp	r3, #6
 8006d2a:	d010      	beq.n	8006d4e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3c:	e007      	b.n	8006d4e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40010400 	.word	0x40010400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40001800 	.word	0x40001800

08006d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0202 	mvn.w	r2, #2
 8006da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fc fb96 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fb4a 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fb51 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0204 	mvn.w	r2, #4
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fc fb6c 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fb20 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fb27 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d122      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0208 	mvn.w	r2, #8
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fc fb42 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 faf6 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fafd 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d122      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d11b      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0210 	mvn.w	r2, #16
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fc fb18 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 facc 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fad3 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d107      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0201 	mvn.w	r2, #1
 8006ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fa fec6 	bl	8001c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d10e      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d107      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 ff78 	bl	8007e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d10e      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d107      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa98 	bl	8007480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d10e      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d107      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0220 	mvn.w	r2, #32
 8006f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 ff42 	bl	8007e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e088      	b.n	80070b4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d11b      	bne.n	8006fe8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6819      	ldr	r1, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f000 fcb8 	bl	8007934 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 020c 	bic.w	r2, r2, #12
 8006fd2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6999      	ldr	r1, [r3, #24]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	619a      	str	r2, [r3, #24]
 8006fe6:	e060      	b.n	80070aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d11c      	bne.n	8007028 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6819      	ldr	r1, [r3, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f000 fd3c 	bl	8007a7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007010:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6999      	ldr	r1, [r3, #24]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	021a      	lsls	r2, r3, #8
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	619a      	str	r2, [r3, #24]
 8007026:	e040      	b.n	80070aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b08      	cmp	r3, #8
 800702c:	d11b      	bne.n	8007066 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f000 fd89 	bl	8007b54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 020c 	bic.w	r2, r2, #12
 8007050:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69d9      	ldr	r1, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	61da      	str	r2, [r3, #28]
 8007064:	e021      	b.n	80070aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b0c      	cmp	r3, #12
 800706a:	d11c      	bne.n	80070a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f000 fda6 	bl	8007bcc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69da      	ldr	r2, [r3, #28]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800708e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69d9      	ldr	r1, [r3, #28]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	021a      	lsls	r2, r3, #8
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	61da      	str	r2, [r3, #28]
 80070a4:	e001      	b.n	80070aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e0ae      	b.n	8007238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b0c      	cmp	r3, #12
 80070e6:	f200 809f 	bhi.w	8007228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007125 	.word	0x08007125
 80070f4:	08007229 	.word	0x08007229
 80070f8:	08007229 	.word	0x08007229
 80070fc:	08007229 	.word	0x08007229
 8007100:	08007165 	.word	0x08007165
 8007104:	08007229 	.word	0x08007229
 8007108:	08007229 	.word	0x08007229
 800710c:	08007229 	.word	0x08007229
 8007110:	080071a7 	.word	0x080071a7
 8007114:	08007229 	.word	0x08007229
 8007118:	08007229 	.word	0x08007229
 800711c:	08007229 	.word	0x08007229
 8007120:	080071e7 	.word	0x080071e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fa52 	bl	80075d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0208 	orr.w	r2, r2, #8
 800713e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0204 	bic.w	r2, r2, #4
 800714e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6999      	ldr	r1, [r3, #24]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	619a      	str	r2, [r3, #24]
      break;
 8007162:	e064      	b.n	800722e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 faa2 	bl	80076b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800717e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800718e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6999      	ldr	r1, [r3, #24]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	021a      	lsls	r2, r3, #8
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	619a      	str	r2, [r3, #24]
      break;
 80071a4:	e043      	b.n	800722e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 faf7 	bl	80077a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0208 	orr.w	r2, r2, #8
 80071c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0204 	bic.w	r2, r2, #4
 80071d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69d9      	ldr	r1, [r3, #28]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	61da      	str	r2, [r3, #28]
      break;
 80071e4:	e023      	b.n	800722e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fb4b 	bl	8007888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69da      	ldr	r2, [r3, #28]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69d9      	ldr	r1, [r3, #28]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	021a      	lsls	r2, r3, #8
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	61da      	str	r2, [r3, #28]
      break;
 8007226:	e002      	b.n	800722e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
      break;
 800722c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007236:	7dfb      	ldrb	r3, [r7, #23]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIM_ConfigClockSource+0x1c>
 8007258:	2302      	movs	r3, #2
 800725a:	e0b4      	b.n	80073c6 <HAL_TIM_ConfigClockSource+0x186>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800727a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007294:	d03e      	beq.n	8007314 <HAL_TIM_ConfigClockSource+0xd4>
 8007296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800729a:	f200 8087 	bhi.w	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 800729e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a2:	f000 8086 	beq.w	80073b2 <HAL_TIM_ConfigClockSource+0x172>
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	d87f      	bhi.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 80072ac:	2b70      	cmp	r3, #112	; 0x70
 80072ae:	d01a      	beq.n	80072e6 <HAL_TIM_ConfigClockSource+0xa6>
 80072b0:	2b70      	cmp	r3, #112	; 0x70
 80072b2:	d87b      	bhi.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 80072b4:	2b60      	cmp	r3, #96	; 0x60
 80072b6:	d050      	beq.n	800735a <HAL_TIM_ConfigClockSource+0x11a>
 80072b8:	2b60      	cmp	r3, #96	; 0x60
 80072ba:	d877      	bhi.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 80072bc:	2b50      	cmp	r3, #80	; 0x50
 80072be:	d03c      	beq.n	800733a <HAL_TIM_ConfigClockSource+0xfa>
 80072c0:	2b50      	cmp	r3, #80	; 0x50
 80072c2:	d873      	bhi.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	d058      	beq.n	800737a <HAL_TIM_ConfigClockSource+0x13a>
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	d86f      	bhi.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 80072cc:	2b30      	cmp	r3, #48	; 0x30
 80072ce:	d064      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x15a>
 80072d0:	2b30      	cmp	r3, #48	; 0x30
 80072d2:	d86b      	bhi.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d060      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x15a>
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d867      	bhi.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d05c      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x15a>
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d05a      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x15a>
 80072e4:	e062      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6818      	ldr	r0, [r3, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6899      	ldr	r1, [r3, #8]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f000 fcc1 	bl	8007c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	609a      	str	r2, [r3, #8]
      break;
 8007312:	e04f      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6899      	ldr	r1, [r3, #8]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f000 fcaa 	bl	8007c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007336:	609a      	str	r2, [r3, #8]
      break;
 8007338:	e03c      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	6859      	ldr	r1, [r3, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	461a      	mov	r2, r3
 8007348:	f000 fb68 	bl	8007a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2150      	movs	r1, #80	; 0x50
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fc77 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 8007358:	e02c      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6859      	ldr	r1, [r3, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	461a      	mov	r2, r3
 8007368:	f000 fbc4 	bl	8007af4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2160      	movs	r1, #96	; 0x60
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fc67 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 8007378:	e01c      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	461a      	mov	r2, r3
 8007388:	f000 fb48 	bl	8007a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2140      	movs	r1, #64	; 0x40
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fc57 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 8007398:	e00c      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f000 fc4e 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 80073aa:	e003      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
      break;
 80073b0:	e000      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b0c      	cmp	r3, #12
 80073e2:	d831      	bhi.n	8007448 <HAL_TIM_ReadCapturedValue+0x78>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007421 	.word	0x08007421
 80073f0:	08007449 	.word	0x08007449
 80073f4:	08007449 	.word	0x08007449
 80073f8:	08007449 	.word	0x08007449
 80073fc:	0800742b 	.word	0x0800742b
 8007400:	08007449 	.word	0x08007449
 8007404:	08007449 	.word	0x08007449
 8007408:	08007449 	.word	0x08007449
 800740c:	08007435 	.word	0x08007435
 8007410:	08007449 	.word	0x08007449
 8007414:	08007449 	.word	0x08007449
 8007418:	08007449 	.word	0x08007449
 800741c:	0800743f 	.word	0x0800743f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	60fb      	str	r3, [r7, #12]

      break;
 8007428:	e00f      	b.n	800744a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	60fb      	str	r3, [r7, #12]

      break;
 8007432:	e00a      	b.n	800744a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	60fb      	str	r3, [r7, #12]

      break;
 800743c:	e005      	b.n	800744a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	60fb      	str	r3, [r7, #12]

      break;
 8007446:	e000      	b.n	800744a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007448:	bf00      	nop
  }

  return tmpreg;
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a40      	ldr	r2, [pc, #256]	; (80075a8 <TIM_Base_SetConfig+0x114>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d013      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b2:	d00f      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3d      	ldr	r2, [pc, #244]	; (80075ac <TIM_Base_SetConfig+0x118>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00b      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a3c      	ldr	r2, [pc, #240]	; (80075b0 <TIM_Base_SetConfig+0x11c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d007      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a3b      	ldr	r2, [pc, #236]	; (80075b4 <TIM_Base_SetConfig+0x120>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d003      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a3a      	ldr	r2, [pc, #232]	; (80075b8 <TIM_Base_SetConfig+0x124>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d108      	bne.n	80074e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2f      	ldr	r2, [pc, #188]	; (80075a8 <TIM_Base_SetConfig+0x114>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d02b      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f4:	d027      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2c      	ldr	r2, [pc, #176]	; (80075ac <TIM_Base_SetConfig+0x118>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d023      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2b      	ldr	r2, [pc, #172]	; (80075b0 <TIM_Base_SetConfig+0x11c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01f      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <TIM_Base_SetConfig+0x120>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01b      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a29      	ldr	r2, [pc, #164]	; (80075b8 <TIM_Base_SetConfig+0x124>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d017      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a28      	ldr	r2, [pc, #160]	; (80075bc <TIM_Base_SetConfig+0x128>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <TIM_Base_SetConfig+0x12c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00f      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a26      	ldr	r2, [pc, #152]	; (80075c4 <TIM_Base_SetConfig+0x130>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00b      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a25      	ldr	r2, [pc, #148]	; (80075c8 <TIM_Base_SetConfig+0x134>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a24      	ldr	r2, [pc, #144]	; (80075cc <TIM_Base_SetConfig+0x138>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a23      	ldr	r2, [pc, #140]	; (80075d0 <TIM_Base_SetConfig+0x13c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800754c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <TIM_Base_SetConfig+0x114>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_Base_SetConfig+0xf8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <TIM_Base_SetConfig+0x124>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d103      	bne.n	8007594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	615a      	str	r2, [r3, #20]
}
 800759a:	bf00      	nop
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40010400 	.word	0x40010400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800
 80075c8:	40001800 	.word	0x40001800
 80075cc:	40001c00 	.word	0x40001c00
 80075d0:	40002000 	.word	0x40002000

080075d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f023 0201 	bic.w	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0303 	bic.w	r3, r3, #3
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 0302 	bic.w	r3, r3, #2
 800761c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a20      	ldr	r2, [pc, #128]	; (80076ac <TIM_OC1_SetConfig+0xd8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_OC1_SetConfig+0x64>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <TIM_OC1_SetConfig+0xdc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10c      	bne.n	8007652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0308 	bic.w	r3, r3, #8
 800763e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 0304 	bic.w	r3, r3, #4
 8007650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <TIM_OC1_SetConfig+0xd8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_OC1_SetConfig+0x8e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a14      	ldr	r2, [pc, #80]	; (80076b0 <TIM_OC1_SetConfig+0xdc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d111      	bne.n	8007686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	621a      	str	r2, [r3, #32]
}
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40010400 	.word	0x40010400

080076b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0210 	bic.w	r2, r3, #16
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0320 	bic.w	r3, r3, #32
 80076fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a22      	ldr	r2, [pc, #136]	; (8007798 <TIM_OC2_SetConfig+0xe4>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_OC2_SetConfig+0x68>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a21      	ldr	r2, [pc, #132]	; (800779c <TIM_OC2_SetConfig+0xe8>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d10d      	bne.n	8007738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a17      	ldr	r2, [pc, #92]	; (8007798 <TIM_OC2_SetConfig+0xe4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_OC2_SetConfig+0x94>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a16      	ldr	r2, [pc, #88]	; (800779c <TIM_OC2_SetConfig+0xe8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d113      	bne.n	8007770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800774e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40010000 	.word	0x40010000
 800779c:	40010400 	.word	0x40010400

080077a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a21      	ldr	r2, [pc, #132]	; (8007880 <TIM_OC3_SetConfig+0xe0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <TIM_OC3_SetConfig+0x66>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a20      	ldr	r2, [pc, #128]	; (8007884 <TIM_OC3_SetConfig+0xe4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d10d      	bne.n	8007822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800780c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	; (8007880 <TIM_OC3_SetConfig+0xe0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_OC3_SetConfig+0x92>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a15      	ldr	r2, [pc, #84]	; (8007884 <TIM_OC3_SetConfig+0xe4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d113      	bne.n	800785a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	621a      	str	r2, [r3, #32]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	40010000 	.word	0x40010000
 8007884:	40010400 	.word	0x40010400

08007888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	031b      	lsls	r3, r3, #12
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a12      	ldr	r2, [pc, #72]	; (800792c <TIM_OC4_SetConfig+0xa4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_OC4_SetConfig+0x68>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a11      	ldr	r2, [pc, #68]	; (8007930 <TIM_OC4_SetConfig+0xa8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d109      	bne.n	8007904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	40010400 	.word	0x40010400

08007934 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f023 0201 	bic.w	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4a28      	ldr	r2, [pc, #160]	; (8007a00 <TIM_TI1_SetConfig+0xcc>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d01b      	beq.n	800799a <TIM_TI1_SetConfig+0x66>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007968:	d017      	beq.n	800799a <TIM_TI1_SetConfig+0x66>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <TIM_TI1_SetConfig+0xd0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <TIM_TI1_SetConfig+0x66>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a24      	ldr	r2, [pc, #144]	; (8007a08 <TIM_TI1_SetConfig+0xd4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00f      	beq.n	800799a <TIM_TI1_SetConfig+0x66>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4a23      	ldr	r2, [pc, #140]	; (8007a0c <TIM_TI1_SetConfig+0xd8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00b      	beq.n	800799a <TIM_TI1_SetConfig+0x66>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <TIM_TI1_SetConfig+0xdc>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d007      	beq.n	800799a <TIM_TI1_SetConfig+0x66>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_TI1_SetConfig+0xe0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d003      	beq.n	800799a <TIM_TI1_SetConfig+0x66>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_TI1_SetConfig+0xe4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d101      	bne.n	800799e <TIM_TI1_SetConfig+0x6a>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <TIM_TI1_SetConfig+0x6c>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	e003      	b.n	80079be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f023 030a 	bic.w	r3, r3, #10
 80079d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f003 030a 	and.w	r3, r3, #10
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40000400 	.word	0x40000400
 8007a08:	40000800 	.word	0x40000800
 8007a0c:	40000c00 	.word	0x40000c00
 8007a10:	40010400 	.word	0x40010400
 8007a14:	40014000 	.word	0x40014000
 8007a18:	40001800 	.word	0x40001800

08007a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f023 0201 	bic.w	r2, r3, #1
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f023 030a 	bic.w	r3, r3, #10
 8007a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b087      	sub	sp, #28
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	f023 0210 	bic.w	r2, r3, #16
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	031b      	lsls	r3, r3, #12
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007acc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	621a      	str	r2, [r3, #32]
}
 8007ae8:	bf00      	nop
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f023 0210 	bic.w	r2, r3, #16
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	031b      	lsls	r3, r3, #12
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	621a      	str	r2, [r3, #32]
}
 8007b48:	bf00      	nop
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f023 0303 	bic.w	r3, r3, #3
 8007b80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	021b      	lsls	r3, r3, #8
 8007baa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	621a      	str	r2, [r3, #32]
}
 8007bc0:	bf00      	nop
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	021b      	lsls	r3, r3, #8
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	031b      	lsls	r3, r3, #12
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	031b      	lsls	r3, r3, #12
 8007c24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f043 0307 	orr.w	r3, r3, #7
 8007c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	609a      	str	r2, [r3, #8]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	021a      	lsls	r2, r3, #8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	609a      	str	r2, [r3, #8]
}
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	2201      	movs	r2, #1
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	401a      	ands	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e05a      	b.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a21      	ldr	r2, [pc, #132]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d022      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d01d      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d013      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a1a      	ldr	r2, [pc, #104]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d10c      	bne.n	8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40010000 	.word	0x40010000
 8007de8:	40000400 	.word	0x40000400
 8007dec:	40000800 	.word	0x40000800
 8007df0:	40000c00 	.word	0x40000c00
 8007df4:	40010400 	.word	0x40010400
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40001800 	.word	0x40001800

08007e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e03f      	b.n	8007eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fa ff96 	bl	8002d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2224      	movs	r2, #36	; 0x24
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fddf 	bl	8008a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	695a      	ldr	r2, [r3, #20]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b08a      	sub	sp, #40	; 0x28
 8007ec6:	af02      	add	r7, sp, #8
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d17c      	bne.n	8007fdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_UART_Transmit+0x2c>
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e075      	b.n	8007fde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_UART_Transmit+0x3e>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e06e      	b.n	8007fde <HAL_UART_Transmit+0x11c>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f16:	f7fb fc29 	bl	800376c <HAL_GetTick>
 8007f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	88fa      	ldrh	r2, [r7, #6]
 8007f20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f30:	d108      	bne.n	8007f44 <HAL_UART_Transmit+0x82>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	61bb      	str	r3, [r7, #24]
 8007f42:	e003      	b.n	8007f4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f54:	e02a      	b.n	8007fac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fb1f 	bl	80085a4 <UART_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e036      	b.n	8007fde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10b      	bne.n	8007f8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	3302      	adds	r3, #2
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	e007      	b.n	8007f9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1cf      	bne.n	8007f56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2140      	movs	r1, #64	; 0x40
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 faef 	bl	80085a4 <UART_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e006      	b.n	8007fde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d11d      	bne.n	800803c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_UART_Receive_IT+0x26>
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e016      	b.n	800803e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_UART_Receive_IT+0x38>
 800801a:	2302      	movs	r3, #2
 800801c:	e00f      	b.n	800803e <HAL_UART_Receive_IT+0x58>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	461a      	mov	r2, r3
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fb24 	bl	8008680 <UART_Start_Receive_IT>
 8008038:	4603      	mov	r3, r0
 800803a:	e000      	b.n	800803e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b0ba      	sub	sp, #232	; 0xe8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800806e:	2300      	movs	r3, #0
 8008070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008074:	2300      	movs	r3, #0
 8008076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10f      	bne.n	80080ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800808e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <HAL_UART_IRQHandler+0x66>
 800809a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fc07 	bl	80088ba <UART_Receive_IT>
      return;
 80080ac:	e256      	b.n	800855c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80de 	beq.w	8008274 <HAL_UART_IRQHandler+0x22c>
 80080b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80d1 	beq.w	8008274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <HAL_UART_IRQHandler+0xae>
 80080de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	f043 0201 	orr.w	r2, r3, #1
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <HAL_UART_IRQHandler+0xd2>
 8008102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f043 0202 	orr.w	r2, r3, #2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <HAL_UART_IRQHandler+0xf6>
 8008126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	f043 0204 	orr.w	r2, r3, #4
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d011      	beq.n	800816e <HAL_UART_IRQHandler+0x126>
 800814a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d105      	bne.n	8008162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	f043 0208 	orr.w	r2, r3, #8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 81ed 	beq.w	8008552 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_UART_IRQHandler+0x14e>
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fb92 	bl	80088ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	bf0c      	ite	eq
 80081a4:	2301      	moveq	r3, #1
 80081a6:	2300      	movne	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <HAL_UART_IRQHandler+0x17a>
 80081ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d04f      	beq.n	8008262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa9a 	bl	80086fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d141      	bne.n	800825a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3314      	adds	r3, #20
 80081dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3314      	adds	r3, #20
 80081fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800820e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800821a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1d9      	bne.n	80081d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	2b00      	cmp	r3, #0
 8008228:	d013      	beq.n	8008252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	4a7d      	ldr	r2, [pc, #500]	; (8008424 <HAL_UART_IRQHandler+0x3dc>)
 8008230:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	4618      	mov	r0, r3
 8008238:	f7fb fc49 	bl	8003ace <HAL_DMA_Abort_IT>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d016      	beq.n	8008270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	e00e      	b.n	8008270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f990 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e00a      	b.n	8008270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f98c 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	e006      	b.n	8008270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f988 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800826e:	e170      	b.n	8008552 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008270:	bf00      	nop
    return;
 8008272:	e16e      	b.n	8008552 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008278:	2b01      	cmp	r3, #1
 800827a:	f040 814a 	bne.w	8008512 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8143 	beq.w	8008512 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800828c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 813c 	beq.w	8008512 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800829a:	2300      	movs	r3, #0
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	f040 80b4 	bne.w	8008428 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8140 	beq.w	8008556 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082de:	429a      	cmp	r2, r3
 80082e0:	f080 8139 	bcs.w	8008556 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f6:	f000 8088 	beq.w	800840a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	330c      	adds	r3, #12
 8008322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800832a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800833e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1d9      	bne.n	80082fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3314      	adds	r3, #20
 800834c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3314      	adds	r3, #20
 8008366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800836a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800836e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800837c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e1      	bne.n	8008346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e3      	bne.n	8008382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	330c      	adds	r3, #12
 80083ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083da:	f023 0310 	bic.w	r3, r3, #16
 80083de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80083ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e3      	bne.n	80083c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	4618      	mov	r0, r3
 8008406:	f7fb faf2 	bl	80039ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008412:	b29b      	uxth	r3, r3
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	b29b      	uxth	r3, r3
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f8b6 	bl	800858c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008420:	e099      	b.n	8008556 <HAL_UART_IRQHandler+0x50e>
 8008422:	bf00      	nop
 8008424:	080087c3 	.word	0x080087c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008430:	b29b      	uxth	r3, r3
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 808b 	beq.w	800855a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8086 	beq.w	800855a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	330c      	adds	r3, #12
 8008454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	330c      	adds	r3, #12
 800846e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008472:	647a      	str	r2, [r7, #68]	; 0x44
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e3      	bne.n	800844e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3314      	adds	r3, #20
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	623b      	str	r3, [r7, #32]
   return(result);
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	f023 0301 	bic.w	r3, r3, #1
 800849c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084aa:	633a      	str	r2, [r7, #48]	; 0x30
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e3      	bne.n	8008486 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	330c      	adds	r3, #12
 80084d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60fb      	str	r3, [r7, #12]
   return(result);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0310 	bic.w	r3, r3, #16
 80084e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	330c      	adds	r3, #12
 80084ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084f0:	61fa      	str	r2, [r7, #28]
 80084f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	617b      	str	r3, [r7, #20]
   return(result);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e3      	bne.n	80084cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f83e 	bl	800858c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008510:	e023      	b.n	800855a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851a:	2b00      	cmp	r3, #0
 800851c:	d009      	beq.n	8008532 <HAL_UART_IRQHandler+0x4ea>
 800851e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f95d 	bl	80087ea <UART_Transmit_IT>
    return;
 8008530:	e014      	b.n	800855c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00e      	beq.n	800855c <HAL_UART_IRQHandler+0x514>
 800853e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d008      	beq.n	800855c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f99d 	bl	800888a <UART_EndTransmit_IT>
    return;
 8008550:	e004      	b.n	800855c <HAL_UART_IRQHandler+0x514>
    return;
 8008552:	bf00      	nop
 8008554:	e002      	b.n	800855c <HAL_UART_IRQHandler+0x514>
      return;
 8008556:	bf00      	nop
 8008558:	e000      	b.n	800855c <HAL_UART_IRQHandler+0x514>
      return;
 800855a:	bf00      	nop
  }
}
 800855c:	37e8      	adds	r7, #232	; 0xe8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop

08008564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b090      	sub	sp, #64	; 0x40
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b4:	e050      	b.n	8008658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085bc:	d04c      	beq.n	8008658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80085c4:	f7fb f8d2 	bl	800376c <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d241      	bcs.n	8008658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	330c      	adds	r3, #12
 80085f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085f4:	637a      	str	r2, [r7, #52]	; 0x34
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e5      	bne.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3314      	adds	r3, #20
 800860e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	613b      	str	r3, [r7, #16]
   return(result);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3314      	adds	r3, #20
 8008626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008628:	623a      	str	r2, [r7, #32]
 800862a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	69f9      	ldr	r1, [r7, #28]
 800862e:	6a3a      	ldr	r2, [r7, #32]
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	61bb      	str	r3, [r7, #24]
   return(result);
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e00f      	b.n	8008678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4013      	ands	r3, r2
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	429a      	cmp	r2, r3
 8008666:	bf0c      	ite	eq
 8008668:	2301      	moveq	r3, #1
 800866a:	2300      	movne	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	429a      	cmp	r2, r3
 8008674:	d09f      	beq.n	80085b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3740      	adds	r7, #64	; 0x40
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2222      	movs	r2, #34	; 0x22
 80086aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f042 0201 	orr.w	r2, r2, #1
 80086dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0220 	orr.w	r2, r2, #32
 80086ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b095      	sub	sp, #84	; 0x54
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	330c      	adds	r3, #12
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800871a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	330c      	adds	r3, #12
 8008722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008724:	643a      	str	r2, [r7, #64]	; 0x40
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800872a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e5      	bne.n	8008704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3314      	adds	r3, #20
 800873e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	61fb      	str	r3, [r7, #28]
   return(result);
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3314      	adds	r3, #20
 8008756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e5      	bne.n	8008738 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	2b01      	cmp	r3, #1
 8008772:	d119      	bne.n	80087a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60bb      	str	r3, [r7, #8]
   return(result);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 0310 	bic.w	r3, r3, #16
 800878a:	647b      	str	r3, [r7, #68]	; 0x44
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008794:	61ba      	str	r2, [r7, #24]
 8008796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6979      	ldr	r1, [r7, #20]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	613b      	str	r3, [r7, #16]
   return(result);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087b6:	bf00      	nop
 80087b8:	3754      	adds	r7, #84	; 0x54
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f7ff fecb 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b21      	cmp	r3, #33	; 0x21
 80087fc:	d13e      	bne.n	800887c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008806:	d114      	bne.n	8008832 <UART_Transmit_IT+0x48>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d110      	bne.n	8008832 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	1c9a      	adds	r2, r3, #2
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	621a      	str	r2, [r3, #32]
 8008830:	e008      	b.n	8008844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	1c59      	adds	r1, r3, #1
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6211      	str	r1, [r2, #32]
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29b      	uxth	r3, r3
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	4619      	mov	r1, r3
 8008852:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10f      	bne.n	8008878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	e000      	b.n	800887e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800887c:	2302      	movs	r3, #2
  }
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe5a 	bl	8008564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b08c      	sub	sp, #48	; 0x30
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b22      	cmp	r3, #34	; 0x22
 80088cc:	f040 80ab 	bne.w	8008a26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d8:	d117      	bne.n	800890a <UART_Receive_IT+0x50>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d113      	bne.n	800890a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	1c9a      	adds	r2, r3, #2
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	629a      	str	r2, [r3, #40]	; 0x28
 8008908:	e026      	b.n	8008958 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800891c:	d007      	beq.n	800892e <UART_Receive_IT+0x74>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <UART_Receive_IT+0x82>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	b2da      	uxtb	r2, r3
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e008      	b.n	800894e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008948:	b2da      	uxtb	r2, r3
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29b      	uxth	r3, r3
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	4619      	mov	r1, r3
 8008966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008968:	2b00      	cmp	r3, #0
 800896a:	d15a      	bne.n	8008a22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0220 	bic.w	r2, r2, #32
 800897a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800898a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d135      	bne.n	8008a18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	613b      	str	r3, [r7, #16]
   return(result);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	330c      	adds	r3, #12
 80089d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d2:	623a      	str	r2, [r7, #32]
 80089d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	69f9      	ldr	r1, [r7, #28]
 80089d8:	6a3a      	ldr	r2, [r7, #32]
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	61bb      	str	r3, [r7, #24]
   return(result);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e5      	bne.n	80089b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0310 	and.w	r3, r3, #16
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d10a      	bne.n	8008a0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff fdbb 	bl	800858c <HAL_UARTEx_RxEventCallback>
 8008a16:	e002      	b.n	8008a1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fa fbcb 	bl	80031b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e002      	b.n	8008a28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	e000      	b.n	8008a28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a26:	2302      	movs	r3, #2
  }
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3730      	adds	r7, #48	; 0x30
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a34:	b0c0      	sub	sp, #256	; 0x100
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4c:	68d9      	ldr	r1, [r3, #12]
 8008a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	ea40 0301 	orr.w	r3, r0, r1
 8008a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a88:	f021 010c 	bic.w	r1, r1, #12
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a96:	430b      	orrs	r3, r1
 8008a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aaa:	6999      	ldr	r1, [r3, #24]
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	ea40 0301 	orr.w	r3, r0, r1
 8008ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b8f      	ldr	r3, [pc, #572]	; (8008cfc <UART_SetConfig+0x2cc>)
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d005      	beq.n	8008ad0 <UART_SetConfig+0xa0>
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b8d      	ldr	r3, [pc, #564]	; (8008d00 <UART_SetConfig+0x2d0>)
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d104      	bne.n	8008ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ad0:	f7fc ffa8 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8008ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ad8:	e003      	b.n	8008ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ada:	f7fc ff8f 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8008ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aec:	f040 810c 	bne.w	8008d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	1891      	adds	r1, r2, r2
 8008b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b0a:	415b      	adcs	r3, r3
 8008b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b12:	4621      	mov	r1, r4
 8008b14:	eb12 0801 	adds.w	r8, r2, r1
 8008b18:	4629      	mov	r1, r5
 8008b1a:	eb43 0901 	adc.w	r9, r3, r1
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b32:	4690      	mov	r8, r2
 8008b34:	4699      	mov	r9, r3
 8008b36:	4623      	mov	r3, r4
 8008b38:	eb18 0303 	adds.w	r3, r8, r3
 8008b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b40:	462b      	mov	r3, r5
 8008b42:	eb49 0303 	adc.w	r3, r9, r3
 8008b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b5e:	460b      	mov	r3, r1
 8008b60:	18db      	adds	r3, r3, r3
 8008b62:	653b      	str	r3, [r7, #80]	; 0x50
 8008b64:	4613      	mov	r3, r2
 8008b66:	eb42 0303 	adc.w	r3, r2, r3
 8008b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b74:	f7f7 ff82 	bl	8000a7c <__aeabi_uldivmod>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4b61      	ldr	r3, [pc, #388]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	011c      	lsls	r4, r3, #4
 8008b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b98:	4642      	mov	r2, r8
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	1891      	adds	r1, r2, r2
 8008b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ba0:	415b      	adcs	r3, r3
 8008ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ba8:	4641      	mov	r1, r8
 8008baa:	eb12 0a01 	adds.w	sl, r2, r1
 8008bae:	4649      	mov	r1, r9
 8008bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	f04f 0300 	mov.w	r3, #0
 8008bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bc8:	4692      	mov	sl, r2
 8008bca:	469b      	mov	fp, r3
 8008bcc:	4643      	mov	r3, r8
 8008bce:	eb1a 0303 	adds.w	r3, sl, r3
 8008bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8008bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	18db      	adds	r3, r3, r3
 8008bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	eb42 0303 	adc.w	r3, r2, r3
 8008c00:	647b      	str	r3, [r7, #68]	; 0x44
 8008c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c0a:	f7f7 ff37 	bl	8000a7c <__aeabi_uldivmod>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	4b3b      	ldr	r3, [pc, #236]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008c16:	fba3 2301 	umull	r2, r3, r3, r1
 8008c1a:	095b      	lsrs	r3, r3, #5
 8008c1c:	2264      	movs	r2, #100	; 0x64
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
 8008c22:	1acb      	subs	r3, r1, r3
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c2a:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8008c30:	095b      	lsrs	r3, r3, #5
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c38:	441c      	add	r4, r3
 8008c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	1891      	adds	r1, r2, r2
 8008c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c54:	415b      	adcs	r3, r3
 8008c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	1851      	adds	r1, r2, r1
 8008c60:	6339      	str	r1, [r7, #48]	; 0x30
 8008c62:	4649      	mov	r1, r9
 8008c64:	414b      	adcs	r3, r1
 8008c66:	637b      	str	r3, [r7, #52]	; 0x34
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	f04f 0300 	mov.w	r3, #0
 8008c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c74:	4659      	mov	r1, fp
 8008c76:	00cb      	lsls	r3, r1, #3
 8008c78:	4651      	mov	r1, sl
 8008c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c7e:	4651      	mov	r1, sl
 8008c80:	00ca      	lsls	r2, r1, #3
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	4642      	mov	r2, r8
 8008c8a:	189b      	adds	r3, r3, r2
 8008c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c90:	464b      	mov	r3, r9
 8008c92:	460a      	mov	r2, r1
 8008c94:	eb42 0303 	adc.w	r3, r2, r3
 8008c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	18db      	adds	r3, r3, r3
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	eb42 0303 	adc.w	r3, r2, r3
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008cc6:	f7f7 fed9 	bl	8000a7c <__aeabi_uldivmod>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	2164      	movs	r1, #100	; 0x64
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	3332      	adds	r3, #50	; 0x32
 8008ce2:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce8:	095b      	lsrs	r3, r3, #5
 8008cea:	f003 0207 	and.w	r2, r3, #7
 8008cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4422      	add	r2, r4
 8008cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cf8:	e105      	b.n	8008f06 <UART_SetConfig+0x4d6>
 8008cfa:	bf00      	nop
 8008cfc:	40011000 	.word	0x40011000
 8008d00:	40011400 	.word	0x40011400
 8008d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d1a:	4642      	mov	r2, r8
 8008d1c:	464b      	mov	r3, r9
 8008d1e:	1891      	adds	r1, r2, r2
 8008d20:	6239      	str	r1, [r7, #32]
 8008d22:	415b      	adcs	r3, r3
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
 8008d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	1854      	adds	r4, r2, r1
 8008d2e:	4649      	mov	r1, r9
 8008d30:	eb43 0501 	adc.w	r5, r3, r1
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	00eb      	lsls	r3, r5, #3
 8008d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d42:	00e2      	lsls	r2, r4, #3
 8008d44:	4614      	mov	r4, r2
 8008d46:	461d      	mov	r5, r3
 8008d48:	4643      	mov	r3, r8
 8008d4a:	18e3      	adds	r3, r4, r3
 8008d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d50:	464b      	mov	r3, r9
 8008d52:	eb45 0303 	adc.w	r3, r5, r3
 8008d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d76:	4629      	mov	r1, r5
 8008d78:	008b      	lsls	r3, r1, #2
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d80:	4621      	mov	r1, r4
 8008d82:	008a      	lsls	r2, r1, #2
 8008d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d88:	f7f7 fe78 	bl	8000a7c <__aeabi_uldivmod>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4b60      	ldr	r3, [pc, #384]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008d92:	fba3 2302 	umull	r2, r3, r3, r2
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	011c      	lsls	r4, r3, #4
 8008d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008dac:	4642      	mov	r2, r8
 8008dae:	464b      	mov	r3, r9
 8008db0:	1891      	adds	r1, r2, r2
 8008db2:	61b9      	str	r1, [r7, #24]
 8008db4:	415b      	adcs	r3, r3
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	1851      	adds	r1, r2, r1
 8008dc0:	6139      	str	r1, [r7, #16]
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	414b      	adcs	r3, r1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dd4:	4659      	mov	r1, fp
 8008dd6:	00cb      	lsls	r3, r1, #3
 8008dd8:	4651      	mov	r1, sl
 8008dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dde:	4651      	mov	r1, sl
 8008de0:	00ca      	lsls	r2, r1, #3
 8008de2:	4610      	mov	r0, r2
 8008de4:	4619      	mov	r1, r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	4642      	mov	r2, r8
 8008dea:	189b      	adds	r3, r3, r2
 8008dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008df0:	464b      	mov	r3, r9
 8008df2:	460a      	mov	r2, r1
 8008df4:	eb42 0303 	adc.w	r3, r2, r3
 8008df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e14:	4649      	mov	r1, r9
 8008e16:	008b      	lsls	r3, r1, #2
 8008e18:	4641      	mov	r1, r8
 8008e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e1e:	4641      	mov	r1, r8
 8008e20:	008a      	lsls	r2, r1, #2
 8008e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e26:	f7f7 fe29 	bl	8000a7c <__aeabi_uldivmod>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008e30:	fba3 1302 	umull	r1, r3, r3, r2
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	2164      	movs	r1, #100	; 0x64
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	3332      	adds	r3, #50	; 0x32
 8008e42:	4a34      	ldr	r2, [pc, #208]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008e44:	fba2 2303 	umull	r2, r3, r2, r3
 8008e48:	095b      	lsrs	r3, r3, #5
 8008e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e4e:	441c      	add	r4, r3
 8008e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e54:	2200      	movs	r2, #0
 8008e56:	673b      	str	r3, [r7, #112]	; 0x70
 8008e58:	677a      	str	r2, [r7, #116]	; 0x74
 8008e5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	1891      	adds	r1, r2, r2
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	415b      	adcs	r3, r3
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e6e:	4641      	mov	r1, r8
 8008e70:	1851      	adds	r1, r2, r1
 8008e72:	6039      	str	r1, [r7, #0]
 8008e74:	4649      	mov	r1, r9
 8008e76:	414b      	adcs	r3, r1
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e86:	4659      	mov	r1, fp
 8008e88:	00cb      	lsls	r3, r1, #3
 8008e8a:	4651      	mov	r1, sl
 8008e8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e90:	4651      	mov	r1, sl
 8008e92:	00ca      	lsls	r2, r1, #3
 8008e94:	4610      	mov	r0, r2
 8008e96:	4619      	mov	r1, r3
 8008e98:	4603      	mov	r3, r0
 8008e9a:	4642      	mov	r2, r8
 8008e9c:	189b      	adds	r3, r3, r2
 8008e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ea0:	464b      	mov	r3, r9
 8008ea2:	460a      	mov	r2, r1
 8008ea4:	eb42 0303 	adc.w	r3, r2, r3
 8008ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8008eb4:	667a      	str	r2, [r7, #100]	; 0x64
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	008b      	lsls	r3, r1, #2
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ecc:	4641      	mov	r1, r8
 8008ece:	008a      	lsls	r2, r1, #2
 8008ed0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ed4:	f7f7 fdd2 	bl	8000a7c <__aeabi_uldivmod>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008ede:	fba3 1302 	umull	r1, r3, r3, r2
 8008ee2:	095b      	lsrs	r3, r3, #5
 8008ee4:	2164      	movs	r1, #100	; 0x64
 8008ee6:	fb01 f303 	mul.w	r3, r1, r3
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	3332      	adds	r3, #50	; 0x32
 8008ef0:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef6:	095b      	lsrs	r3, r3, #5
 8008ef8:	f003 020f 	and.w	r2, r3, #15
 8008efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4422      	add	r2, r4
 8008f04:	609a      	str	r2, [r3, #8]
}
 8008f06:	bf00      	nop
 8008f08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f12:	bf00      	nop
 8008f14:	51eb851f 	.word	0x51eb851f

08008f18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f18:	b084      	sub	sp, #16
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	f107 001c 	add.w	r0, r7, #28
 8008f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d122      	bne.n	8008f76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d105      	bne.n	8008f6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 faa2 	bl	80094b4 <USB_CoreReset>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	e01a      	b.n	8008fac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa96 	bl	80094b4 <USB_CoreReset>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f9e:	e005      	b.n	8008fac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d10b      	bne.n	8008fca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f043 0206 	orr.w	r2, r3, #6
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f043 0220 	orr.w	r2, r3, #32
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd6:	b004      	add	sp, #16
 8008fd8:	4770      	bx	lr

08008fda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f023 0201 	bic.w	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d115      	bne.n	800904a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800902a:	2001      	movs	r0, #1
 800902c:	f7fa fbaa 	bl	8003784 <HAL_Delay>
      ms++;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3301      	adds	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa2e 	bl	8009498 <USB_GetMode>
 800903c:	4603      	mov	r3, r0
 800903e:	2b01      	cmp	r3, #1
 8009040:	d01e      	beq.n	8009080 <USB_SetCurrentMode+0x84>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b31      	cmp	r3, #49	; 0x31
 8009046:	d9f0      	bls.n	800902a <USB_SetCurrentMode+0x2e>
 8009048:	e01a      	b.n	8009080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d115      	bne.n	800907c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800905c:	2001      	movs	r0, #1
 800905e:	f7fa fb91 	bl	8003784 <HAL_Delay>
      ms++;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3301      	adds	r3, #1
 8009066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa15 	bl	8009498 <USB_GetMode>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <USB_SetCurrentMode+0x84>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b31      	cmp	r3, #49	; 0x31
 8009078:	d9f0      	bls.n	800905c <USB_SetCurrentMode+0x60>
 800907a:	e001      	b.n	8009080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e005      	b.n	800908c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b32      	cmp	r3, #50	; 0x32
 8009084:	d101      	bne.n	800908a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009094:	b084      	sub	sp, #16
 8009096:	b580      	push	{r7, lr}
 8009098:	b086      	sub	sp, #24
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090ae:	2300      	movs	r3, #0
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	e009      	b.n	80090c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3340      	adds	r3, #64	; 0x40
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	2200      	movs	r2, #0
 80090c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	3301      	adds	r3, #1
 80090c6:	613b      	str	r3, [r7, #16]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b0e      	cmp	r3, #14
 80090cc:	d9f2      	bls.n	80090b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d11c      	bne.n	800910e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090e2:	f043 0302 	orr.w	r3, r3, #2
 80090e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
 800910c:	e00b      	b.n	8009126 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800912c:	461a      	mov	r2, r3
 800912e:	2300      	movs	r3, #0
 8009130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009138:	4619      	mov	r1, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009140:	461a      	mov	r2, r3
 8009142:	680b      	ldr	r3, [r1, #0]
 8009144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	2b01      	cmp	r3, #1
 800914a:	d10c      	bne.n	8009166 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d104      	bne.n	800915c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009152:	2100      	movs	r1, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f965 	bl	8009424 <USB_SetDevSpeed>
 800915a:	e008      	b.n	800916e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800915c:	2101      	movs	r1, #1
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f960 	bl	8009424 <USB_SetDevSpeed>
 8009164:	e003      	b.n	800916e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009166:	2103      	movs	r1, #3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f95b 	bl	8009424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800916e:	2110      	movs	r1, #16
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f8f3 	bl	800935c <USB_FlushTxFifo>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f91f 	bl	80093c4 <USB_FlushRxFifo>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009196:	461a      	mov	r2, r3
 8009198:	2300      	movs	r3, #0
 800919a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a2:	461a      	mov	r2, r3
 80091a4:	2300      	movs	r3, #0
 80091a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ae:	461a      	mov	r2, r3
 80091b0:	2300      	movs	r3, #0
 80091b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091b4:	2300      	movs	r3, #0
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	e043      	b.n	8009242 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d0:	d118      	bne.n	8009204 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e4:	461a      	mov	r2, r3
 80091e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	e013      	b.n	8009216 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fa:	461a      	mov	r2, r3
 80091fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	e008      	b.n	8009216 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009210:	461a      	mov	r2, r3
 8009212:	2300      	movs	r3, #0
 8009214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009222:	461a      	mov	r2, r3
 8009224:	2300      	movs	r3, #0
 8009226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	461a      	mov	r2, r3
 8009236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800923a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	3301      	adds	r3, #1
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	429a      	cmp	r2, r3
 8009248:	d3b7      	bcc.n	80091ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800924a:	2300      	movs	r3, #0
 800924c:	613b      	str	r3, [r7, #16]
 800924e:	e043      	b.n	80092d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009266:	d118      	bne.n	800929a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927a:	461a      	mov	r2, r3
 800927c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	e013      	b.n	80092ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009290:	461a      	mov	r2, r3
 8009292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	e008      	b.n	80092ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a6:	461a      	mov	r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b8:	461a      	mov	r2, r3
 80092ba:	2300      	movs	r3, #0
 80092bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	461a      	mov	r2, r3
 80092cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	3301      	adds	r3, #1
 80092d6:	613b      	str	r3, [r7, #16]
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d3b7      	bcc.n	8009250 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009300:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	2b00      	cmp	r3, #0
 8009306:	d105      	bne.n	8009314 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	f043 0210 	orr.w	r2, r3, #16
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699a      	ldr	r2, [r3, #24]
 8009318:	4b0f      	ldr	r3, [pc, #60]	; (8009358 <USB_DevInit+0x2c4>)
 800931a:	4313      	orrs	r3, r2
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	f043 0208 	orr.w	r2, r3, #8
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009334:	2b01      	cmp	r3, #1
 8009336:	d107      	bne.n	8009348 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009340:	f043 0304 	orr.w	r3, r3, #4
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009354:	b004      	add	sp, #16
 8009356:	4770      	bx	lr
 8009358:	803c3800 	.word	0x803c3800

0800935c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4a13      	ldr	r2, [pc, #76]	; (80093c0 <USB_FlushTxFifo+0x64>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d901      	bls.n	800937c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e01b      	b.n	80093b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	daf2      	bge.n	800936a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	019b      	lsls	r3, r3, #6
 800938c:	f043 0220 	orr.w	r2, r3, #32
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3301      	adds	r3, #1
 8009398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	4a08      	ldr	r2, [pc, #32]	; (80093c0 <USB_FlushTxFifo+0x64>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d901      	bls.n	80093a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e006      	b.n	80093b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d0f0      	beq.n	8009394 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	00030d40 	.word	0x00030d40

080093c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4a11      	ldr	r2, [pc, #68]	; (8009420 <USB_FlushRxFifo+0x5c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d901      	bls.n	80093e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e018      	b.n	8009414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	daf2      	bge.n	80093d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2210      	movs	r2, #16
 80093f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4a08      	ldr	r2, [pc, #32]	; (8009420 <USB_FlushRxFifo+0x5c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d901      	bls.n	8009406 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e006      	b.n	8009414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	2b10      	cmp	r3, #16
 8009410:	d0f0      	beq.n	80093f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	00030d40 	.word	0x00030d40

08009424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	68f9      	ldr	r1, [r7, #12]
 8009440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009444:	4313      	orrs	r3, r2
 8009446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009484:	f043 0302 	orr.w	r3, r3, #2
 8009488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f003 0301 	and.w	r3, r3, #1
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3301      	adds	r3, #1
 80094c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4a13      	ldr	r2, [pc, #76]	; (8009518 <USB_CoreReset+0x64>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d901      	bls.n	80094d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e01b      	b.n	800950a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	daf2      	bge.n	80094c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f043 0201 	orr.w	r2, r3, #1
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4a09      	ldr	r2, [pc, #36]	; (8009518 <USB_CoreReset+0x64>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d901      	bls.n	80094fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e006      	b.n	800950a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b01      	cmp	r3, #1
 8009506:	d0f0      	beq.n	80094ea <USB_CoreReset+0x36>

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	00030d40 	.word	0x00030d40

0800951c <atoi>:
 800951c:	220a      	movs	r2, #10
 800951e:	2100      	movs	r1, #0
 8009520:	f000 b98a 	b.w	8009838 <strtol>

08009524 <__errno>:
 8009524:	4b01      	ldr	r3, [pc, #4]	; (800952c <__errno+0x8>)
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000140 	.word	0x20000140

08009530 <__libc_init_array>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	4d0d      	ldr	r5, [pc, #52]	; (8009568 <__libc_init_array+0x38>)
 8009534:	4c0d      	ldr	r4, [pc, #52]	; (800956c <__libc_init_array+0x3c>)
 8009536:	1b64      	subs	r4, r4, r5
 8009538:	10a4      	asrs	r4, r4, #2
 800953a:	2600      	movs	r6, #0
 800953c:	42a6      	cmp	r6, r4
 800953e:	d109      	bne.n	8009554 <__libc_init_array+0x24>
 8009540:	4d0b      	ldr	r5, [pc, #44]	; (8009570 <__libc_init_array+0x40>)
 8009542:	4c0c      	ldr	r4, [pc, #48]	; (8009574 <__libc_init_array+0x44>)
 8009544:	f001 fab4 	bl	800aab0 <_init>
 8009548:	1b64      	subs	r4, r4, r5
 800954a:	10a4      	asrs	r4, r4, #2
 800954c:	2600      	movs	r6, #0
 800954e:	42a6      	cmp	r6, r4
 8009550:	d105      	bne.n	800955e <__libc_init_array+0x2e>
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	f855 3b04 	ldr.w	r3, [r5], #4
 8009558:	4798      	blx	r3
 800955a:	3601      	adds	r6, #1
 800955c:	e7ee      	b.n	800953c <__libc_init_array+0xc>
 800955e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009562:	4798      	blx	r3
 8009564:	3601      	adds	r6, #1
 8009566:	e7f2      	b.n	800954e <__libc_init_array+0x1e>
 8009568:	0800ade0 	.word	0x0800ade0
 800956c:	0800ade0 	.word	0x0800ade0
 8009570:	0800ade0 	.word	0x0800ade0
 8009574:	0800ade4 	.word	0x0800ade4

08009578 <memset>:
 8009578:	4402      	add	r2, r0
 800957a:	4603      	mov	r3, r0
 800957c:	4293      	cmp	r3, r2
 800957e:	d100      	bne.n	8009582 <memset+0xa>
 8009580:	4770      	bx	lr
 8009582:	f803 1b01 	strb.w	r1, [r3], #1
 8009586:	e7f9      	b.n	800957c <memset+0x4>

08009588 <iprintf>:
 8009588:	b40f      	push	{r0, r1, r2, r3}
 800958a:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <iprintf+0x2c>)
 800958c:	b513      	push	{r0, r1, r4, lr}
 800958e:	681c      	ldr	r4, [r3, #0]
 8009590:	b124      	cbz	r4, 800959c <iprintf+0x14>
 8009592:	69a3      	ldr	r3, [r4, #24]
 8009594:	b913      	cbnz	r3, 800959c <iprintf+0x14>
 8009596:	4620      	mov	r0, r4
 8009598:	f000 fb32 	bl	8009c00 <__sinit>
 800959c:	ab05      	add	r3, sp, #20
 800959e:	9a04      	ldr	r2, [sp, #16]
 80095a0:	68a1      	ldr	r1, [r4, #8]
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 fe97 	bl	800a2d8 <_vfiprintf_r>
 80095aa:	b002      	add	sp, #8
 80095ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b0:	b004      	add	sp, #16
 80095b2:	4770      	bx	lr
 80095b4:	20000140 	.word	0x20000140

080095b8 <_puts_r>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	460e      	mov	r6, r1
 80095bc:	4605      	mov	r5, r0
 80095be:	b118      	cbz	r0, 80095c8 <_puts_r+0x10>
 80095c0:	6983      	ldr	r3, [r0, #24]
 80095c2:	b90b      	cbnz	r3, 80095c8 <_puts_r+0x10>
 80095c4:	f000 fb1c 	bl	8009c00 <__sinit>
 80095c8:	69ab      	ldr	r3, [r5, #24]
 80095ca:	68ac      	ldr	r4, [r5, #8]
 80095cc:	b913      	cbnz	r3, 80095d4 <_puts_r+0x1c>
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 fb16 	bl	8009c00 <__sinit>
 80095d4:	4b2c      	ldr	r3, [pc, #176]	; (8009688 <_puts_r+0xd0>)
 80095d6:	429c      	cmp	r4, r3
 80095d8:	d120      	bne.n	800961c <_puts_r+0x64>
 80095da:	686c      	ldr	r4, [r5, #4]
 80095dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095de:	07db      	lsls	r3, r3, #31
 80095e0:	d405      	bmi.n	80095ee <_puts_r+0x36>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	0598      	lsls	r0, r3, #22
 80095e6:	d402      	bmi.n	80095ee <_puts_r+0x36>
 80095e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ea:	f000 fba7 	bl	8009d3c <__retarget_lock_acquire_recursive>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	0719      	lsls	r1, r3, #28
 80095f2:	d51d      	bpl.n	8009630 <_puts_r+0x78>
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	b1db      	cbz	r3, 8009630 <_puts_r+0x78>
 80095f8:	3e01      	subs	r6, #1
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009600:	3b01      	subs	r3, #1
 8009602:	60a3      	str	r3, [r4, #8]
 8009604:	bb39      	cbnz	r1, 8009656 <_puts_r+0x9e>
 8009606:	2b00      	cmp	r3, #0
 8009608:	da38      	bge.n	800967c <_puts_r+0xc4>
 800960a:	4622      	mov	r2, r4
 800960c:	210a      	movs	r1, #10
 800960e:	4628      	mov	r0, r5
 8009610:	f000 f91c 	bl	800984c <__swbuf_r>
 8009614:	3001      	adds	r0, #1
 8009616:	d011      	beq.n	800963c <_puts_r+0x84>
 8009618:	250a      	movs	r5, #10
 800961a:	e011      	b.n	8009640 <_puts_r+0x88>
 800961c:	4b1b      	ldr	r3, [pc, #108]	; (800968c <_puts_r+0xd4>)
 800961e:	429c      	cmp	r4, r3
 8009620:	d101      	bne.n	8009626 <_puts_r+0x6e>
 8009622:	68ac      	ldr	r4, [r5, #8]
 8009624:	e7da      	b.n	80095dc <_puts_r+0x24>
 8009626:	4b1a      	ldr	r3, [pc, #104]	; (8009690 <_puts_r+0xd8>)
 8009628:	429c      	cmp	r4, r3
 800962a:	bf08      	it	eq
 800962c:	68ec      	ldreq	r4, [r5, #12]
 800962e:	e7d5      	b.n	80095dc <_puts_r+0x24>
 8009630:	4621      	mov	r1, r4
 8009632:	4628      	mov	r0, r5
 8009634:	f000 f95c 	bl	80098f0 <__swsetup_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	d0dd      	beq.n	80095f8 <_puts_r+0x40>
 800963c:	f04f 35ff 	mov.w	r5, #4294967295
 8009640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009642:	07da      	lsls	r2, r3, #31
 8009644:	d405      	bmi.n	8009652 <_puts_r+0x9a>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	059b      	lsls	r3, r3, #22
 800964a:	d402      	bmi.n	8009652 <_puts_r+0x9a>
 800964c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800964e:	f000 fb76 	bl	8009d3e <__retarget_lock_release_recursive>
 8009652:	4628      	mov	r0, r5
 8009654:	bd70      	pop	{r4, r5, r6, pc}
 8009656:	2b00      	cmp	r3, #0
 8009658:	da04      	bge.n	8009664 <_puts_r+0xac>
 800965a:	69a2      	ldr	r2, [r4, #24]
 800965c:	429a      	cmp	r2, r3
 800965e:	dc06      	bgt.n	800966e <_puts_r+0xb6>
 8009660:	290a      	cmp	r1, #10
 8009662:	d004      	beq.n	800966e <_puts_r+0xb6>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	6022      	str	r2, [r4, #0]
 800966a:	7019      	strb	r1, [r3, #0]
 800966c:	e7c5      	b.n	80095fa <_puts_r+0x42>
 800966e:	4622      	mov	r2, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 f8eb 	bl	800984c <__swbuf_r>
 8009676:	3001      	adds	r0, #1
 8009678:	d1bf      	bne.n	80095fa <_puts_r+0x42>
 800967a:	e7df      	b.n	800963c <_puts_r+0x84>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	250a      	movs	r5, #10
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	6022      	str	r2, [r4, #0]
 8009684:	701d      	strb	r5, [r3, #0]
 8009686:	e7db      	b.n	8009640 <_puts_r+0x88>
 8009688:	0800ad64 	.word	0x0800ad64
 800968c:	0800ad84 	.word	0x0800ad84
 8009690:	0800ad44 	.word	0x0800ad44

08009694 <puts>:
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <puts+0xc>)
 8009696:	4601      	mov	r1, r0
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f7ff bf8d 	b.w	80095b8 <_puts_r>
 800969e:	bf00      	nop
 80096a0:	20000140 	.word	0x20000140

080096a4 <siprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	b500      	push	{lr}
 80096a8:	b09c      	sub	sp, #112	; 0x70
 80096aa:	ab1d      	add	r3, sp, #116	; 0x74
 80096ac:	9002      	str	r0, [sp, #8]
 80096ae:	9006      	str	r0, [sp, #24]
 80096b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096b4:	4809      	ldr	r0, [pc, #36]	; (80096dc <siprintf+0x38>)
 80096b6:	9107      	str	r1, [sp, #28]
 80096b8:	9104      	str	r1, [sp, #16]
 80096ba:	4909      	ldr	r1, [pc, #36]	; (80096e0 <siprintf+0x3c>)
 80096bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c0:	9105      	str	r1, [sp, #20]
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	a902      	add	r1, sp, #8
 80096c8:	f000 fcdc 	bl	800a084 <_svfiprintf_r>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	b01c      	add	sp, #112	; 0x70
 80096d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d8:	b003      	add	sp, #12
 80096da:	4770      	bx	lr
 80096dc:	20000140 	.word	0x20000140
 80096e0:	ffff0208 	.word	0xffff0208

080096e4 <strncmp>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	b17a      	cbz	r2, 8009708 <strncmp+0x24>
 80096e8:	4603      	mov	r3, r0
 80096ea:	3901      	subs	r1, #1
 80096ec:	1884      	adds	r4, r0, r2
 80096ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096f6:	4290      	cmp	r0, r2
 80096f8:	d101      	bne.n	80096fe <strncmp+0x1a>
 80096fa:	42a3      	cmp	r3, r4
 80096fc:	d101      	bne.n	8009702 <strncmp+0x1e>
 80096fe:	1a80      	subs	r0, r0, r2
 8009700:	bd10      	pop	{r4, pc}
 8009702:	2800      	cmp	r0, #0
 8009704:	d1f3      	bne.n	80096ee <strncmp+0xa>
 8009706:	e7fa      	b.n	80096fe <strncmp+0x1a>
 8009708:	4610      	mov	r0, r2
 800970a:	e7f9      	b.n	8009700 <strncmp+0x1c>

0800970c <strncpy>:
 800970c:	b510      	push	{r4, lr}
 800970e:	3901      	subs	r1, #1
 8009710:	4603      	mov	r3, r0
 8009712:	b132      	cbz	r2, 8009722 <strncpy+0x16>
 8009714:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009718:	f803 4b01 	strb.w	r4, [r3], #1
 800971c:	3a01      	subs	r2, #1
 800971e:	2c00      	cmp	r4, #0
 8009720:	d1f7      	bne.n	8009712 <strncpy+0x6>
 8009722:	441a      	add	r2, r3
 8009724:	2100      	movs	r1, #0
 8009726:	4293      	cmp	r3, r2
 8009728:	d100      	bne.n	800972c <strncpy+0x20>
 800972a:	bd10      	pop	{r4, pc}
 800972c:	f803 1b01 	strb.w	r1, [r3], #1
 8009730:	e7f9      	b.n	8009726 <strncpy+0x1a>
	...

08009734 <_strtol_l.constprop.0>:
 8009734:	2b01      	cmp	r3, #1
 8009736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800973a:	d001      	beq.n	8009740 <_strtol_l.constprop.0+0xc>
 800973c:	2b24      	cmp	r3, #36	; 0x24
 800973e:	d906      	bls.n	800974e <_strtol_l.constprop.0+0x1a>
 8009740:	f7ff fef0 	bl	8009524 <__errno>
 8009744:	2316      	movs	r3, #22
 8009746:	6003      	str	r3, [r0, #0]
 8009748:	2000      	movs	r0, #0
 800974a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009834 <_strtol_l.constprop.0+0x100>
 8009752:	460d      	mov	r5, r1
 8009754:	462e      	mov	r6, r5
 8009756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800975a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800975e:	f017 0708 	ands.w	r7, r7, #8
 8009762:	d1f7      	bne.n	8009754 <_strtol_l.constprop.0+0x20>
 8009764:	2c2d      	cmp	r4, #45	; 0x2d
 8009766:	d132      	bne.n	80097ce <_strtol_l.constprop.0+0x9a>
 8009768:	782c      	ldrb	r4, [r5, #0]
 800976a:	2701      	movs	r7, #1
 800976c:	1cb5      	adds	r5, r6, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d05b      	beq.n	800982a <_strtol_l.constprop.0+0xf6>
 8009772:	2b10      	cmp	r3, #16
 8009774:	d109      	bne.n	800978a <_strtol_l.constprop.0+0x56>
 8009776:	2c30      	cmp	r4, #48	; 0x30
 8009778:	d107      	bne.n	800978a <_strtol_l.constprop.0+0x56>
 800977a:	782c      	ldrb	r4, [r5, #0]
 800977c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009780:	2c58      	cmp	r4, #88	; 0x58
 8009782:	d14d      	bne.n	8009820 <_strtol_l.constprop.0+0xec>
 8009784:	786c      	ldrb	r4, [r5, #1]
 8009786:	2310      	movs	r3, #16
 8009788:	3502      	adds	r5, #2
 800978a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800978e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009792:	f04f 0c00 	mov.w	ip, #0
 8009796:	fbb8 f9f3 	udiv	r9, r8, r3
 800979a:	4666      	mov	r6, ip
 800979c:	fb03 8a19 	mls	sl, r3, r9, r8
 80097a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80097a4:	f1be 0f09 	cmp.w	lr, #9
 80097a8:	d816      	bhi.n	80097d8 <_strtol_l.constprop.0+0xa4>
 80097aa:	4674      	mov	r4, lr
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	dd24      	ble.n	80097fa <_strtol_l.constprop.0+0xc6>
 80097b0:	f1bc 0f00 	cmp.w	ip, #0
 80097b4:	db1e      	blt.n	80097f4 <_strtol_l.constprop.0+0xc0>
 80097b6:	45b1      	cmp	r9, r6
 80097b8:	d31c      	bcc.n	80097f4 <_strtol_l.constprop.0+0xc0>
 80097ba:	d101      	bne.n	80097c0 <_strtol_l.constprop.0+0x8c>
 80097bc:	45a2      	cmp	sl, r4
 80097be:	db19      	blt.n	80097f4 <_strtol_l.constprop.0+0xc0>
 80097c0:	fb06 4603 	mla	r6, r6, r3, r4
 80097c4:	f04f 0c01 	mov.w	ip, #1
 80097c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097cc:	e7e8      	b.n	80097a0 <_strtol_l.constprop.0+0x6c>
 80097ce:	2c2b      	cmp	r4, #43	; 0x2b
 80097d0:	bf04      	itt	eq
 80097d2:	782c      	ldrbeq	r4, [r5, #0]
 80097d4:	1cb5      	addeq	r5, r6, #2
 80097d6:	e7ca      	b.n	800976e <_strtol_l.constprop.0+0x3a>
 80097d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097dc:	f1be 0f19 	cmp.w	lr, #25
 80097e0:	d801      	bhi.n	80097e6 <_strtol_l.constprop.0+0xb2>
 80097e2:	3c37      	subs	r4, #55	; 0x37
 80097e4:	e7e2      	b.n	80097ac <_strtol_l.constprop.0+0x78>
 80097e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097ea:	f1be 0f19 	cmp.w	lr, #25
 80097ee:	d804      	bhi.n	80097fa <_strtol_l.constprop.0+0xc6>
 80097f0:	3c57      	subs	r4, #87	; 0x57
 80097f2:	e7db      	b.n	80097ac <_strtol_l.constprop.0+0x78>
 80097f4:	f04f 3cff 	mov.w	ip, #4294967295
 80097f8:	e7e6      	b.n	80097c8 <_strtol_l.constprop.0+0x94>
 80097fa:	f1bc 0f00 	cmp.w	ip, #0
 80097fe:	da05      	bge.n	800980c <_strtol_l.constprop.0+0xd8>
 8009800:	2322      	movs	r3, #34	; 0x22
 8009802:	6003      	str	r3, [r0, #0]
 8009804:	4646      	mov	r6, r8
 8009806:	b942      	cbnz	r2, 800981a <_strtol_l.constprop.0+0xe6>
 8009808:	4630      	mov	r0, r6
 800980a:	e79e      	b.n	800974a <_strtol_l.constprop.0+0x16>
 800980c:	b107      	cbz	r7, 8009810 <_strtol_l.constprop.0+0xdc>
 800980e:	4276      	negs	r6, r6
 8009810:	2a00      	cmp	r2, #0
 8009812:	d0f9      	beq.n	8009808 <_strtol_l.constprop.0+0xd4>
 8009814:	f1bc 0f00 	cmp.w	ip, #0
 8009818:	d000      	beq.n	800981c <_strtol_l.constprop.0+0xe8>
 800981a:	1e69      	subs	r1, r5, #1
 800981c:	6011      	str	r1, [r2, #0]
 800981e:	e7f3      	b.n	8009808 <_strtol_l.constprop.0+0xd4>
 8009820:	2430      	movs	r4, #48	; 0x30
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1b1      	bne.n	800978a <_strtol_l.constprop.0+0x56>
 8009826:	2308      	movs	r3, #8
 8009828:	e7af      	b.n	800978a <_strtol_l.constprop.0+0x56>
 800982a:	2c30      	cmp	r4, #48	; 0x30
 800982c:	d0a5      	beq.n	800977a <_strtol_l.constprop.0+0x46>
 800982e:	230a      	movs	r3, #10
 8009830:	e7ab      	b.n	800978a <_strtol_l.constprop.0+0x56>
 8009832:	bf00      	nop
 8009834:	0800ac41 	.word	0x0800ac41

08009838 <strtol>:
 8009838:	4613      	mov	r3, r2
 800983a:	460a      	mov	r2, r1
 800983c:	4601      	mov	r1, r0
 800983e:	4802      	ldr	r0, [pc, #8]	; (8009848 <strtol+0x10>)
 8009840:	6800      	ldr	r0, [r0, #0]
 8009842:	f7ff bf77 	b.w	8009734 <_strtol_l.constprop.0>
 8009846:	bf00      	nop
 8009848:	20000140 	.word	0x20000140

0800984c <__swbuf_r>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	460e      	mov	r6, r1
 8009850:	4614      	mov	r4, r2
 8009852:	4605      	mov	r5, r0
 8009854:	b118      	cbz	r0, 800985e <__swbuf_r+0x12>
 8009856:	6983      	ldr	r3, [r0, #24]
 8009858:	b90b      	cbnz	r3, 800985e <__swbuf_r+0x12>
 800985a:	f000 f9d1 	bl	8009c00 <__sinit>
 800985e:	4b21      	ldr	r3, [pc, #132]	; (80098e4 <__swbuf_r+0x98>)
 8009860:	429c      	cmp	r4, r3
 8009862:	d12b      	bne.n	80098bc <__swbuf_r+0x70>
 8009864:	686c      	ldr	r4, [r5, #4]
 8009866:	69a3      	ldr	r3, [r4, #24]
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	071a      	lsls	r2, r3, #28
 800986e:	d52f      	bpl.n	80098d0 <__swbuf_r+0x84>
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	b36b      	cbz	r3, 80098d0 <__swbuf_r+0x84>
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	6820      	ldr	r0, [r4, #0]
 8009878:	1ac0      	subs	r0, r0, r3
 800987a:	6963      	ldr	r3, [r4, #20]
 800987c:	b2f6      	uxtb	r6, r6
 800987e:	4283      	cmp	r3, r0
 8009880:	4637      	mov	r7, r6
 8009882:	dc04      	bgt.n	800988e <__swbuf_r+0x42>
 8009884:	4621      	mov	r1, r4
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f926 	bl	8009ad8 <_fflush_r>
 800988c:	bb30      	cbnz	r0, 80098dc <__swbuf_r+0x90>
 800988e:	68a3      	ldr	r3, [r4, #8]
 8009890:	3b01      	subs	r3, #1
 8009892:	60a3      	str	r3, [r4, #8]
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	6022      	str	r2, [r4, #0]
 800989a:	701e      	strb	r6, [r3, #0]
 800989c:	6963      	ldr	r3, [r4, #20]
 800989e:	3001      	adds	r0, #1
 80098a0:	4283      	cmp	r3, r0
 80098a2:	d004      	beq.n	80098ae <__swbuf_r+0x62>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	07db      	lsls	r3, r3, #31
 80098a8:	d506      	bpl.n	80098b8 <__swbuf_r+0x6c>
 80098aa:	2e0a      	cmp	r6, #10
 80098ac:	d104      	bne.n	80098b8 <__swbuf_r+0x6c>
 80098ae:	4621      	mov	r1, r4
 80098b0:	4628      	mov	r0, r5
 80098b2:	f000 f911 	bl	8009ad8 <_fflush_r>
 80098b6:	b988      	cbnz	r0, 80098dc <__swbuf_r+0x90>
 80098b8:	4638      	mov	r0, r7
 80098ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <__swbuf_r+0x9c>)
 80098be:	429c      	cmp	r4, r3
 80098c0:	d101      	bne.n	80098c6 <__swbuf_r+0x7a>
 80098c2:	68ac      	ldr	r4, [r5, #8]
 80098c4:	e7cf      	b.n	8009866 <__swbuf_r+0x1a>
 80098c6:	4b09      	ldr	r3, [pc, #36]	; (80098ec <__swbuf_r+0xa0>)
 80098c8:	429c      	cmp	r4, r3
 80098ca:	bf08      	it	eq
 80098cc:	68ec      	ldreq	r4, [r5, #12]
 80098ce:	e7ca      	b.n	8009866 <__swbuf_r+0x1a>
 80098d0:	4621      	mov	r1, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 f80c 	bl	80098f0 <__swsetup_r>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d0cb      	beq.n	8009874 <__swbuf_r+0x28>
 80098dc:	f04f 37ff 	mov.w	r7, #4294967295
 80098e0:	e7ea      	b.n	80098b8 <__swbuf_r+0x6c>
 80098e2:	bf00      	nop
 80098e4:	0800ad64 	.word	0x0800ad64
 80098e8:	0800ad84 	.word	0x0800ad84
 80098ec:	0800ad44 	.word	0x0800ad44

080098f0 <__swsetup_r>:
 80098f0:	4b32      	ldr	r3, [pc, #200]	; (80099bc <__swsetup_r+0xcc>)
 80098f2:	b570      	push	{r4, r5, r6, lr}
 80098f4:	681d      	ldr	r5, [r3, #0]
 80098f6:	4606      	mov	r6, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	b125      	cbz	r5, 8009906 <__swsetup_r+0x16>
 80098fc:	69ab      	ldr	r3, [r5, #24]
 80098fe:	b913      	cbnz	r3, 8009906 <__swsetup_r+0x16>
 8009900:	4628      	mov	r0, r5
 8009902:	f000 f97d 	bl	8009c00 <__sinit>
 8009906:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <__swsetup_r+0xd0>)
 8009908:	429c      	cmp	r4, r3
 800990a:	d10f      	bne.n	800992c <__swsetup_r+0x3c>
 800990c:	686c      	ldr	r4, [r5, #4]
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009914:	0719      	lsls	r1, r3, #28
 8009916:	d42c      	bmi.n	8009972 <__swsetup_r+0x82>
 8009918:	06dd      	lsls	r5, r3, #27
 800991a:	d411      	bmi.n	8009940 <__swsetup_r+0x50>
 800991c:	2309      	movs	r3, #9
 800991e:	6033      	str	r3, [r6, #0]
 8009920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	f04f 30ff 	mov.w	r0, #4294967295
 800992a:	e03e      	b.n	80099aa <__swsetup_r+0xba>
 800992c:	4b25      	ldr	r3, [pc, #148]	; (80099c4 <__swsetup_r+0xd4>)
 800992e:	429c      	cmp	r4, r3
 8009930:	d101      	bne.n	8009936 <__swsetup_r+0x46>
 8009932:	68ac      	ldr	r4, [r5, #8]
 8009934:	e7eb      	b.n	800990e <__swsetup_r+0x1e>
 8009936:	4b24      	ldr	r3, [pc, #144]	; (80099c8 <__swsetup_r+0xd8>)
 8009938:	429c      	cmp	r4, r3
 800993a:	bf08      	it	eq
 800993c:	68ec      	ldreq	r4, [r5, #12]
 800993e:	e7e6      	b.n	800990e <__swsetup_r+0x1e>
 8009940:	0758      	lsls	r0, r3, #29
 8009942:	d512      	bpl.n	800996a <__swsetup_r+0x7a>
 8009944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009946:	b141      	cbz	r1, 800995a <__swsetup_r+0x6a>
 8009948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800994c:	4299      	cmp	r1, r3
 800994e:	d002      	beq.n	8009956 <__swsetup_r+0x66>
 8009950:	4630      	mov	r0, r6
 8009952:	f000 fa5b 	bl	8009e0c <_free_r>
 8009956:	2300      	movs	r3, #0
 8009958:	6363      	str	r3, [r4, #52]	; 0x34
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	2300      	movs	r3, #0
 8009964:	6063      	str	r3, [r4, #4]
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f043 0308 	orr.w	r3, r3, #8
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	b94b      	cbnz	r3, 800998a <__swsetup_r+0x9a>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800997c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009980:	d003      	beq.n	800998a <__swsetup_r+0x9a>
 8009982:	4621      	mov	r1, r4
 8009984:	4630      	mov	r0, r6
 8009986:	f000 fa01 	bl	8009d8c <__smakebuf_r>
 800998a:	89a0      	ldrh	r0, [r4, #12]
 800998c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009990:	f010 0301 	ands.w	r3, r0, #1
 8009994:	d00a      	beq.n	80099ac <__swsetup_r+0xbc>
 8009996:	2300      	movs	r3, #0
 8009998:	60a3      	str	r3, [r4, #8]
 800999a:	6963      	ldr	r3, [r4, #20]
 800999c:	425b      	negs	r3, r3
 800999e:	61a3      	str	r3, [r4, #24]
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	b943      	cbnz	r3, 80099b6 <__swsetup_r+0xc6>
 80099a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099a8:	d1ba      	bne.n	8009920 <__swsetup_r+0x30>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	0781      	lsls	r1, r0, #30
 80099ae:	bf58      	it	pl
 80099b0:	6963      	ldrpl	r3, [r4, #20]
 80099b2:	60a3      	str	r3, [r4, #8]
 80099b4:	e7f4      	b.n	80099a0 <__swsetup_r+0xb0>
 80099b6:	2000      	movs	r0, #0
 80099b8:	e7f7      	b.n	80099aa <__swsetup_r+0xba>
 80099ba:	bf00      	nop
 80099bc:	20000140 	.word	0x20000140
 80099c0:	0800ad64 	.word	0x0800ad64
 80099c4:	0800ad84 	.word	0x0800ad84
 80099c8:	0800ad44 	.word	0x0800ad44

080099cc <__sflush_r>:
 80099cc:	898a      	ldrh	r2, [r1, #12]
 80099ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d2:	4605      	mov	r5, r0
 80099d4:	0710      	lsls	r0, r2, #28
 80099d6:	460c      	mov	r4, r1
 80099d8:	d458      	bmi.n	8009a8c <__sflush_r+0xc0>
 80099da:	684b      	ldr	r3, [r1, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dc05      	bgt.n	80099ec <__sflush_r+0x20>
 80099e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dc02      	bgt.n	80099ec <__sflush_r+0x20>
 80099e6:	2000      	movs	r0, #0
 80099e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ee:	2e00      	cmp	r6, #0
 80099f0:	d0f9      	beq.n	80099e6 <__sflush_r+0x1a>
 80099f2:	2300      	movs	r3, #0
 80099f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099f8:	682f      	ldr	r7, [r5, #0]
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	d032      	beq.n	8009a64 <__sflush_r+0x98>
 80099fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	075a      	lsls	r2, r3, #29
 8009a04:	d505      	bpl.n	8009a12 <__sflush_r+0x46>
 8009a06:	6863      	ldr	r3, [r4, #4]
 8009a08:	1ac0      	subs	r0, r0, r3
 8009a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a0c:	b10b      	cbz	r3, 8009a12 <__sflush_r+0x46>
 8009a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a10:	1ac0      	subs	r0, r0, r3
 8009a12:	2300      	movs	r3, #0
 8009a14:	4602      	mov	r2, r0
 8009a16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a18:	6a21      	ldr	r1, [r4, #32]
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b0      	blx	r6
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	d106      	bne.n	8009a32 <__sflush_r+0x66>
 8009a24:	6829      	ldr	r1, [r5, #0]
 8009a26:	291d      	cmp	r1, #29
 8009a28:	d82c      	bhi.n	8009a84 <__sflush_r+0xb8>
 8009a2a:	4a2a      	ldr	r2, [pc, #168]	; (8009ad4 <__sflush_r+0x108>)
 8009a2c:	40ca      	lsrs	r2, r1
 8009a2e:	07d6      	lsls	r6, r2, #31
 8009a30:	d528      	bpl.n	8009a84 <__sflush_r+0xb8>
 8009a32:	2200      	movs	r2, #0
 8009a34:	6062      	str	r2, [r4, #4]
 8009a36:	04d9      	lsls	r1, r3, #19
 8009a38:	6922      	ldr	r2, [r4, #16]
 8009a3a:	6022      	str	r2, [r4, #0]
 8009a3c:	d504      	bpl.n	8009a48 <__sflush_r+0x7c>
 8009a3e:	1c42      	adds	r2, r0, #1
 8009a40:	d101      	bne.n	8009a46 <__sflush_r+0x7a>
 8009a42:	682b      	ldr	r3, [r5, #0]
 8009a44:	b903      	cbnz	r3, 8009a48 <__sflush_r+0x7c>
 8009a46:	6560      	str	r0, [r4, #84]	; 0x54
 8009a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a4a:	602f      	str	r7, [r5, #0]
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	d0ca      	beq.n	80099e6 <__sflush_r+0x1a>
 8009a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a54:	4299      	cmp	r1, r3
 8009a56:	d002      	beq.n	8009a5e <__sflush_r+0x92>
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f000 f9d7 	bl	8009e0c <_free_r>
 8009a5e:	2000      	movs	r0, #0
 8009a60:	6360      	str	r0, [r4, #52]	; 0x34
 8009a62:	e7c1      	b.n	80099e8 <__sflush_r+0x1c>
 8009a64:	6a21      	ldr	r1, [r4, #32]
 8009a66:	2301      	movs	r3, #1
 8009a68:	4628      	mov	r0, r5
 8009a6a:	47b0      	blx	r6
 8009a6c:	1c41      	adds	r1, r0, #1
 8009a6e:	d1c7      	bne.n	8009a00 <__sflush_r+0x34>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0c4      	beq.n	8009a00 <__sflush_r+0x34>
 8009a76:	2b1d      	cmp	r3, #29
 8009a78:	d001      	beq.n	8009a7e <__sflush_r+0xb2>
 8009a7a:	2b16      	cmp	r3, #22
 8009a7c:	d101      	bne.n	8009a82 <__sflush_r+0xb6>
 8009a7e:	602f      	str	r7, [r5, #0]
 8009a80:	e7b1      	b.n	80099e6 <__sflush_r+0x1a>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	e7ad      	b.n	80099e8 <__sflush_r+0x1c>
 8009a8c:	690f      	ldr	r7, [r1, #16]
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	d0a9      	beq.n	80099e6 <__sflush_r+0x1a>
 8009a92:	0793      	lsls	r3, r2, #30
 8009a94:	680e      	ldr	r6, [r1, #0]
 8009a96:	bf08      	it	eq
 8009a98:	694b      	ldreq	r3, [r1, #20]
 8009a9a:	600f      	str	r7, [r1, #0]
 8009a9c:	bf18      	it	ne
 8009a9e:	2300      	movne	r3, #0
 8009aa0:	eba6 0807 	sub.w	r8, r6, r7
 8009aa4:	608b      	str	r3, [r1, #8]
 8009aa6:	f1b8 0f00 	cmp.w	r8, #0
 8009aaa:	dd9c      	ble.n	80099e6 <__sflush_r+0x1a>
 8009aac:	6a21      	ldr	r1, [r4, #32]
 8009aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ab0:	4643      	mov	r3, r8
 8009ab2:	463a      	mov	r2, r7
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	47b0      	blx	r6
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	dc06      	bgt.n	8009aca <__sflush_r+0xfe>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	e78e      	b.n	80099e8 <__sflush_r+0x1c>
 8009aca:	4407      	add	r7, r0
 8009acc:	eba8 0800 	sub.w	r8, r8, r0
 8009ad0:	e7e9      	b.n	8009aa6 <__sflush_r+0xda>
 8009ad2:	bf00      	nop
 8009ad4:	20400001 	.word	0x20400001

08009ad8 <_fflush_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	690b      	ldr	r3, [r1, #16]
 8009adc:	4605      	mov	r5, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	b913      	cbnz	r3, 8009ae8 <_fflush_r+0x10>
 8009ae2:	2500      	movs	r5, #0
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	b118      	cbz	r0, 8009af2 <_fflush_r+0x1a>
 8009aea:	6983      	ldr	r3, [r0, #24]
 8009aec:	b90b      	cbnz	r3, 8009af2 <_fflush_r+0x1a>
 8009aee:	f000 f887 	bl	8009c00 <__sinit>
 8009af2:	4b14      	ldr	r3, [pc, #80]	; (8009b44 <_fflush_r+0x6c>)
 8009af4:	429c      	cmp	r4, r3
 8009af6:	d11b      	bne.n	8009b30 <_fflush_r+0x58>
 8009af8:	686c      	ldr	r4, [r5, #4]
 8009afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0ef      	beq.n	8009ae2 <_fflush_r+0xa>
 8009b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b04:	07d0      	lsls	r0, r2, #31
 8009b06:	d404      	bmi.n	8009b12 <_fflush_r+0x3a>
 8009b08:	0599      	lsls	r1, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_fflush_r+0x3a>
 8009b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0e:	f000 f915 	bl	8009d3c <__retarget_lock_acquire_recursive>
 8009b12:	4628      	mov	r0, r5
 8009b14:	4621      	mov	r1, r4
 8009b16:	f7ff ff59 	bl	80099cc <__sflush_r>
 8009b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b1c:	07da      	lsls	r2, r3, #31
 8009b1e:	4605      	mov	r5, r0
 8009b20:	d4e0      	bmi.n	8009ae4 <_fflush_r+0xc>
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	059b      	lsls	r3, r3, #22
 8009b26:	d4dd      	bmi.n	8009ae4 <_fflush_r+0xc>
 8009b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2a:	f000 f908 	bl	8009d3e <__retarget_lock_release_recursive>
 8009b2e:	e7d9      	b.n	8009ae4 <_fflush_r+0xc>
 8009b30:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <_fflush_r+0x70>)
 8009b32:	429c      	cmp	r4, r3
 8009b34:	d101      	bne.n	8009b3a <_fflush_r+0x62>
 8009b36:	68ac      	ldr	r4, [r5, #8]
 8009b38:	e7df      	b.n	8009afa <_fflush_r+0x22>
 8009b3a:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <_fflush_r+0x74>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	bf08      	it	eq
 8009b40:	68ec      	ldreq	r4, [r5, #12]
 8009b42:	e7da      	b.n	8009afa <_fflush_r+0x22>
 8009b44:	0800ad64 	.word	0x0800ad64
 8009b48:	0800ad84 	.word	0x0800ad84
 8009b4c:	0800ad44 	.word	0x0800ad44

08009b50 <std>:
 8009b50:	2300      	movs	r3, #0
 8009b52:	b510      	push	{r4, lr}
 8009b54:	4604      	mov	r4, r0
 8009b56:	e9c0 3300 	strd	r3, r3, [r0]
 8009b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b5e:	6083      	str	r3, [r0, #8]
 8009b60:	8181      	strh	r1, [r0, #12]
 8009b62:	6643      	str	r3, [r0, #100]	; 0x64
 8009b64:	81c2      	strh	r2, [r0, #14]
 8009b66:	6183      	str	r3, [r0, #24]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	2208      	movs	r2, #8
 8009b6c:	305c      	adds	r0, #92	; 0x5c
 8009b6e:	f7ff fd03 	bl	8009578 <memset>
 8009b72:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <std+0x38>)
 8009b74:	6263      	str	r3, [r4, #36]	; 0x24
 8009b76:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <std+0x3c>)
 8009b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <std+0x40>)
 8009b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <std+0x44>)
 8009b80:	6224      	str	r4, [r4, #32]
 8009b82:	6323      	str	r3, [r4, #48]	; 0x30
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	bf00      	nop
 8009b88:	0800a881 	.word	0x0800a881
 8009b8c:	0800a8a3 	.word	0x0800a8a3
 8009b90:	0800a8db 	.word	0x0800a8db
 8009b94:	0800a8ff 	.word	0x0800a8ff

08009b98 <_cleanup_r>:
 8009b98:	4901      	ldr	r1, [pc, #4]	; (8009ba0 <_cleanup_r+0x8>)
 8009b9a:	f000 b8af 	b.w	8009cfc <_fwalk_reent>
 8009b9e:	bf00      	nop
 8009ba0:	08009ad9 	.word	0x08009ad9

08009ba4 <__sfmoreglue>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	2268      	movs	r2, #104	; 0x68
 8009ba8:	1e4d      	subs	r5, r1, #1
 8009baa:	4355      	muls	r5, r2
 8009bac:	460e      	mov	r6, r1
 8009bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bb2:	f000 f997 	bl	8009ee4 <_malloc_r>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	b140      	cbz	r0, 8009bcc <__sfmoreglue+0x28>
 8009bba:	2100      	movs	r1, #0
 8009bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8009bc0:	300c      	adds	r0, #12
 8009bc2:	60a0      	str	r0, [r4, #8]
 8009bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bc8:	f7ff fcd6 	bl	8009578 <memset>
 8009bcc:	4620      	mov	r0, r4
 8009bce:	bd70      	pop	{r4, r5, r6, pc}

08009bd0 <__sfp_lock_acquire>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__sfp_lock_acquire+0x8>)
 8009bd2:	f000 b8b3 	b.w	8009d3c <__retarget_lock_acquire_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	20000c95 	.word	0x20000c95

08009bdc <__sfp_lock_release>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__sfp_lock_release+0x8>)
 8009bde:	f000 b8ae 	b.w	8009d3e <__retarget_lock_release_recursive>
 8009be2:	bf00      	nop
 8009be4:	20000c95 	.word	0x20000c95

08009be8 <__sinit_lock_acquire>:
 8009be8:	4801      	ldr	r0, [pc, #4]	; (8009bf0 <__sinit_lock_acquire+0x8>)
 8009bea:	f000 b8a7 	b.w	8009d3c <__retarget_lock_acquire_recursive>
 8009bee:	bf00      	nop
 8009bf0:	20000c96 	.word	0x20000c96

08009bf4 <__sinit_lock_release>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__sinit_lock_release+0x8>)
 8009bf6:	f000 b8a2 	b.w	8009d3e <__retarget_lock_release_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20000c96 	.word	0x20000c96

08009c00 <__sinit>:
 8009c00:	b510      	push	{r4, lr}
 8009c02:	4604      	mov	r4, r0
 8009c04:	f7ff fff0 	bl	8009be8 <__sinit_lock_acquire>
 8009c08:	69a3      	ldr	r3, [r4, #24]
 8009c0a:	b11b      	cbz	r3, 8009c14 <__sinit+0x14>
 8009c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c10:	f7ff bff0 	b.w	8009bf4 <__sinit_lock_release>
 8009c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c18:	6523      	str	r3, [r4, #80]	; 0x50
 8009c1a:	4b13      	ldr	r3, [pc, #76]	; (8009c68 <__sinit+0x68>)
 8009c1c:	4a13      	ldr	r2, [pc, #76]	; (8009c6c <__sinit+0x6c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c22:	42a3      	cmp	r3, r4
 8009c24:	bf04      	itt	eq
 8009c26:	2301      	moveq	r3, #1
 8009c28:	61a3      	streq	r3, [r4, #24]
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 f820 	bl	8009c70 <__sfp>
 8009c30:	6060      	str	r0, [r4, #4]
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 f81c 	bl	8009c70 <__sfp>
 8009c38:	60a0      	str	r0, [r4, #8]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 f818 	bl	8009c70 <__sfp>
 8009c40:	2200      	movs	r2, #0
 8009c42:	60e0      	str	r0, [r4, #12]
 8009c44:	2104      	movs	r1, #4
 8009c46:	6860      	ldr	r0, [r4, #4]
 8009c48:	f7ff ff82 	bl	8009b50 <std>
 8009c4c:	68a0      	ldr	r0, [r4, #8]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	2109      	movs	r1, #9
 8009c52:	f7ff ff7d 	bl	8009b50 <std>
 8009c56:	68e0      	ldr	r0, [r4, #12]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	2112      	movs	r1, #18
 8009c5c:	f7ff ff78 	bl	8009b50 <std>
 8009c60:	2301      	movs	r3, #1
 8009c62:	61a3      	str	r3, [r4, #24]
 8009c64:	e7d2      	b.n	8009c0c <__sinit+0xc>
 8009c66:	bf00      	nop
 8009c68:	0800ac3c 	.word	0x0800ac3c
 8009c6c:	08009b99 	.word	0x08009b99

08009c70 <__sfp>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	4607      	mov	r7, r0
 8009c74:	f7ff ffac 	bl	8009bd0 <__sfp_lock_acquire>
 8009c78:	4b1e      	ldr	r3, [pc, #120]	; (8009cf4 <__sfp+0x84>)
 8009c7a:	681e      	ldr	r6, [r3, #0]
 8009c7c:	69b3      	ldr	r3, [r6, #24]
 8009c7e:	b913      	cbnz	r3, 8009c86 <__sfp+0x16>
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7ff ffbd 	bl	8009c00 <__sinit>
 8009c86:	3648      	adds	r6, #72	; 0x48
 8009c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	d503      	bpl.n	8009c98 <__sfp+0x28>
 8009c90:	6833      	ldr	r3, [r6, #0]
 8009c92:	b30b      	cbz	r3, 8009cd8 <__sfp+0x68>
 8009c94:	6836      	ldr	r6, [r6, #0]
 8009c96:	e7f7      	b.n	8009c88 <__sfp+0x18>
 8009c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c9c:	b9d5      	cbnz	r5, 8009cd4 <__sfp+0x64>
 8009c9e:	4b16      	ldr	r3, [pc, #88]	; (8009cf8 <__sfp+0x88>)
 8009ca0:	60e3      	str	r3, [r4, #12]
 8009ca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ca8:	f000 f847 	bl	8009d3a <__retarget_lock_init_recursive>
 8009cac:	f7ff ff96 	bl	8009bdc <__sfp_lock_release>
 8009cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cb8:	6025      	str	r5, [r4, #0]
 8009cba:	61a5      	str	r5, [r4, #24]
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cc4:	f7ff fc58 	bl	8009578 <memset>
 8009cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd4:	3468      	adds	r4, #104	; 0x68
 8009cd6:	e7d9      	b.n	8009c8c <__sfp+0x1c>
 8009cd8:	2104      	movs	r1, #4
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f7ff ff62 	bl	8009ba4 <__sfmoreglue>
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	6030      	str	r0, [r6, #0]
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d1d5      	bne.n	8009c94 <__sfp+0x24>
 8009ce8:	f7ff ff78 	bl	8009bdc <__sfp_lock_release>
 8009cec:	230c      	movs	r3, #12
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	e7ee      	b.n	8009cd0 <__sfp+0x60>
 8009cf2:	bf00      	nop
 8009cf4:	0800ac3c 	.word	0x0800ac3c
 8009cf8:	ffff0001 	.word	0xffff0001

08009cfc <_fwalk_reent>:
 8009cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d00:	4606      	mov	r6, r0
 8009d02:	4688      	mov	r8, r1
 8009d04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d08:	2700      	movs	r7, #0
 8009d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8009d12:	d505      	bpl.n	8009d20 <_fwalk_reent+0x24>
 8009d14:	6824      	ldr	r4, [r4, #0]
 8009d16:	2c00      	cmp	r4, #0
 8009d18:	d1f7      	bne.n	8009d0a <_fwalk_reent+0xe>
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d20:	89ab      	ldrh	r3, [r5, #12]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d907      	bls.n	8009d36 <_fwalk_reent+0x3a>
 8009d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	d003      	beq.n	8009d36 <_fwalk_reent+0x3a>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4630      	mov	r0, r6
 8009d32:	47c0      	blx	r8
 8009d34:	4307      	orrs	r7, r0
 8009d36:	3568      	adds	r5, #104	; 0x68
 8009d38:	e7e9      	b.n	8009d0e <_fwalk_reent+0x12>

08009d3a <__retarget_lock_init_recursive>:
 8009d3a:	4770      	bx	lr

08009d3c <__retarget_lock_acquire_recursive>:
 8009d3c:	4770      	bx	lr

08009d3e <__retarget_lock_release_recursive>:
 8009d3e:	4770      	bx	lr

08009d40 <__swhatbuf_r>:
 8009d40:	b570      	push	{r4, r5, r6, lr}
 8009d42:	460e      	mov	r6, r1
 8009d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	b096      	sub	sp, #88	; 0x58
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	461d      	mov	r5, r3
 8009d50:	da08      	bge.n	8009d64 <__swhatbuf_r+0x24>
 8009d52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	061a      	lsls	r2, r3, #24
 8009d5c:	d410      	bmi.n	8009d80 <__swhatbuf_r+0x40>
 8009d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d62:	e00e      	b.n	8009d82 <__swhatbuf_r+0x42>
 8009d64:	466a      	mov	r2, sp
 8009d66:	f000 fdf1 	bl	800a94c <_fstat_r>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	dbf1      	blt.n	8009d52 <__swhatbuf_r+0x12>
 8009d6e:	9a01      	ldr	r2, [sp, #4]
 8009d70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d78:	425a      	negs	r2, r3
 8009d7a:	415a      	adcs	r2, r3
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	e7ee      	b.n	8009d5e <__swhatbuf_r+0x1e>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	2000      	movs	r0, #0
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	b016      	add	sp, #88	; 0x58
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d8c <__smakebuf_r>:
 8009d8c:	898b      	ldrh	r3, [r1, #12]
 8009d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d90:	079d      	lsls	r5, r3, #30
 8009d92:	4606      	mov	r6, r0
 8009d94:	460c      	mov	r4, r1
 8009d96:	d507      	bpl.n	8009da8 <__smakebuf_r+0x1c>
 8009d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	6123      	str	r3, [r4, #16]
 8009da0:	2301      	movs	r3, #1
 8009da2:	6163      	str	r3, [r4, #20]
 8009da4:	b002      	add	sp, #8
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	ab01      	add	r3, sp, #4
 8009daa:	466a      	mov	r2, sp
 8009dac:	f7ff ffc8 	bl	8009d40 <__swhatbuf_r>
 8009db0:	9900      	ldr	r1, [sp, #0]
 8009db2:	4605      	mov	r5, r0
 8009db4:	4630      	mov	r0, r6
 8009db6:	f000 f895 	bl	8009ee4 <_malloc_r>
 8009dba:	b948      	cbnz	r0, 8009dd0 <__smakebuf_r+0x44>
 8009dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc0:	059a      	lsls	r2, r3, #22
 8009dc2:	d4ef      	bmi.n	8009da4 <__smakebuf_r+0x18>
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	f043 0302 	orr.w	r3, r3, #2
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	e7e3      	b.n	8009d98 <__smakebuf_r+0xc>
 8009dd0:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <__smakebuf_r+0x7c>)
 8009dd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	6020      	str	r0, [r4, #0]
 8009dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	9b00      	ldr	r3, [sp, #0]
 8009de0:	6163      	str	r3, [r4, #20]
 8009de2:	9b01      	ldr	r3, [sp, #4]
 8009de4:	6120      	str	r0, [r4, #16]
 8009de6:	b15b      	cbz	r3, 8009e00 <__smakebuf_r+0x74>
 8009de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dec:	4630      	mov	r0, r6
 8009dee:	f000 fdbf 	bl	800a970 <_isatty_r>
 8009df2:	b128      	cbz	r0, 8009e00 <__smakebuf_r+0x74>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f023 0303 	bic.w	r3, r3, #3
 8009dfa:	f043 0301 	orr.w	r3, r3, #1
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	89a0      	ldrh	r0, [r4, #12]
 8009e02:	4305      	orrs	r5, r0
 8009e04:	81a5      	strh	r5, [r4, #12]
 8009e06:	e7cd      	b.n	8009da4 <__smakebuf_r+0x18>
 8009e08:	08009b99 	.word	0x08009b99

08009e0c <_free_r>:
 8009e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	d044      	beq.n	8009e9c <_free_r+0x90>
 8009e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e16:	9001      	str	r0, [sp, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e1e:	bfb8      	it	lt
 8009e20:	18e4      	addlt	r4, r4, r3
 8009e22:	f000 fdef 	bl	800aa04 <__malloc_lock>
 8009e26:	4a1e      	ldr	r2, [pc, #120]	; (8009ea0 <_free_r+0x94>)
 8009e28:	9801      	ldr	r0, [sp, #4]
 8009e2a:	6813      	ldr	r3, [r2, #0]
 8009e2c:	b933      	cbnz	r3, 8009e3c <_free_r+0x30>
 8009e2e:	6063      	str	r3, [r4, #4]
 8009e30:	6014      	str	r4, [r2, #0]
 8009e32:	b003      	add	sp, #12
 8009e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e38:	f000 bdea 	b.w	800aa10 <__malloc_unlock>
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	d908      	bls.n	8009e52 <_free_r+0x46>
 8009e40:	6825      	ldr	r5, [r4, #0]
 8009e42:	1961      	adds	r1, r4, r5
 8009e44:	428b      	cmp	r3, r1
 8009e46:	bf01      	itttt	eq
 8009e48:	6819      	ldreq	r1, [r3, #0]
 8009e4a:	685b      	ldreq	r3, [r3, #4]
 8009e4c:	1949      	addeq	r1, r1, r5
 8009e4e:	6021      	streq	r1, [r4, #0]
 8009e50:	e7ed      	b.n	8009e2e <_free_r+0x22>
 8009e52:	461a      	mov	r2, r3
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	b10b      	cbz	r3, 8009e5c <_free_r+0x50>
 8009e58:	42a3      	cmp	r3, r4
 8009e5a:	d9fa      	bls.n	8009e52 <_free_r+0x46>
 8009e5c:	6811      	ldr	r1, [r2, #0]
 8009e5e:	1855      	adds	r5, r2, r1
 8009e60:	42a5      	cmp	r5, r4
 8009e62:	d10b      	bne.n	8009e7c <_free_r+0x70>
 8009e64:	6824      	ldr	r4, [r4, #0]
 8009e66:	4421      	add	r1, r4
 8009e68:	1854      	adds	r4, r2, r1
 8009e6a:	42a3      	cmp	r3, r4
 8009e6c:	6011      	str	r1, [r2, #0]
 8009e6e:	d1e0      	bne.n	8009e32 <_free_r+0x26>
 8009e70:	681c      	ldr	r4, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	6053      	str	r3, [r2, #4]
 8009e76:	4421      	add	r1, r4
 8009e78:	6011      	str	r1, [r2, #0]
 8009e7a:	e7da      	b.n	8009e32 <_free_r+0x26>
 8009e7c:	d902      	bls.n	8009e84 <_free_r+0x78>
 8009e7e:	230c      	movs	r3, #12
 8009e80:	6003      	str	r3, [r0, #0]
 8009e82:	e7d6      	b.n	8009e32 <_free_r+0x26>
 8009e84:	6825      	ldr	r5, [r4, #0]
 8009e86:	1961      	adds	r1, r4, r5
 8009e88:	428b      	cmp	r3, r1
 8009e8a:	bf04      	itt	eq
 8009e8c:	6819      	ldreq	r1, [r3, #0]
 8009e8e:	685b      	ldreq	r3, [r3, #4]
 8009e90:	6063      	str	r3, [r4, #4]
 8009e92:	bf04      	itt	eq
 8009e94:	1949      	addeq	r1, r1, r5
 8009e96:	6021      	streq	r1, [r4, #0]
 8009e98:	6054      	str	r4, [r2, #4]
 8009e9a:	e7ca      	b.n	8009e32 <_free_r+0x26>
 8009e9c:	b003      	add	sp, #12
 8009e9e:	bd30      	pop	{r4, r5, pc}
 8009ea0:	20000c98 	.word	0x20000c98

08009ea4 <sbrk_aligned>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	4e0e      	ldr	r6, [pc, #56]	; (8009ee0 <sbrk_aligned+0x3c>)
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	6831      	ldr	r1, [r6, #0]
 8009eac:	4605      	mov	r5, r0
 8009eae:	b911      	cbnz	r1, 8009eb6 <sbrk_aligned+0x12>
 8009eb0:	f000 fcd6 	bl	800a860 <_sbrk_r>
 8009eb4:	6030      	str	r0, [r6, #0]
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f000 fcd1 	bl	800a860 <_sbrk_r>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d00a      	beq.n	8009ed8 <sbrk_aligned+0x34>
 8009ec2:	1cc4      	adds	r4, r0, #3
 8009ec4:	f024 0403 	bic.w	r4, r4, #3
 8009ec8:	42a0      	cmp	r0, r4
 8009eca:	d007      	beq.n	8009edc <sbrk_aligned+0x38>
 8009ecc:	1a21      	subs	r1, r4, r0
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f000 fcc6 	bl	800a860 <_sbrk_r>
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d101      	bne.n	8009edc <sbrk_aligned+0x38>
 8009ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8009edc:	4620      	mov	r0, r4
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	20000c9c 	.word	0x20000c9c

08009ee4 <_malloc_r>:
 8009ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	1ccd      	adds	r5, r1, #3
 8009eea:	f025 0503 	bic.w	r5, r5, #3
 8009eee:	3508      	adds	r5, #8
 8009ef0:	2d0c      	cmp	r5, #12
 8009ef2:	bf38      	it	cc
 8009ef4:	250c      	movcc	r5, #12
 8009ef6:	2d00      	cmp	r5, #0
 8009ef8:	4607      	mov	r7, r0
 8009efa:	db01      	blt.n	8009f00 <_malloc_r+0x1c>
 8009efc:	42a9      	cmp	r1, r5
 8009efe:	d905      	bls.n	8009f0c <_malloc_r+0x28>
 8009f00:	230c      	movs	r3, #12
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	2600      	movs	r6, #0
 8009f06:	4630      	mov	r0, r6
 8009f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f0c:	4e2e      	ldr	r6, [pc, #184]	; (8009fc8 <_malloc_r+0xe4>)
 8009f0e:	f000 fd79 	bl	800aa04 <__malloc_lock>
 8009f12:	6833      	ldr	r3, [r6, #0]
 8009f14:	461c      	mov	r4, r3
 8009f16:	bb34      	cbnz	r4, 8009f66 <_malloc_r+0x82>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ffc2 	bl	8009ea4 <sbrk_aligned>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	4604      	mov	r4, r0
 8009f24:	d14d      	bne.n	8009fc2 <_malloc_r+0xde>
 8009f26:	6834      	ldr	r4, [r6, #0]
 8009f28:	4626      	mov	r6, r4
 8009f2a:	2e00      	cmp	r6, #0
 8009f2c:	d140      	bne.n	8009fb0 <_malloc_r+0xcc>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	4631      	mov	r1, r6
 8009f32:	4638      	mov	r0, r7
 8009f34:	eb04 0803 	add.w	r8, r4, r3
 8009f38:	f000 fc92 	bl	800a860 <_sbrk_r>
 8009f3c:	4580      	cmp	r8, r0
 8009f3e:	d13a      	bne.n	8009fb6 <_malloc_r+0xd2>
 8009f40:	6821      	ldr	r1, [r4, #0]
 8009f42:	3503      	adds	r5, #3
 8009f44:	1a6d      	subs	r5, r5, r1
 8009f46:	f025 0503 	bic.w	r5, r5, #3
 8009f4a:	3508      	adds	r5, #8
 8009f4c:	2d0c      	cmp	r5, #12
 8009f4e:	bf38      	it	cc
 8009f50:	250c      	movcc	r5, #12
 8009f52:	4629      	mov	r1, r5
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff ffa5 	bl	8009ea4 <sbrk_aligned>
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d02b      	beq.n	8009fb6 <_malloc_r+0xd2>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	442b      	add	r3, r5
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	e00e      	b.n	8009f84 <_malloc_r+0xa0>
 8009f66:	6822      	ldr	r2, [r4, #0]
 8009f68:	1b52      	subs	r2, r2, r5
 8009f6a:	d41e      	bmi.n	8009faa <_malloc_r+0xc6>
 8009f6c:	2a0b      	cmp	r2, #11
 8009f6e:	d916      	bls.n	8009f9e <_malloc_r+0xba>
 8009f70:	1961      	adds	r1, r4, r5
 8009f72:	42a3      	cmp	r3, r4
 8009f74:	6025      	str	r5, [r4, #0]
 8009f76:	bf18      	it	ne
 8009f78:	6059      	strne	r1, [r3, #4]
 8009f7a:	6863      	ldr	r3, [r4, #4]
 8009f7c:	bf08      	it	eq
 8009f7e:	6031      	streq	r1, [r6, #0]
 8009f80:	5162      	str	r2, [r4, r5]
 8009f82:	604b      	str	r3, [r1, #4]
 8009f84:	4638      	mov	r0, r7
 8009f86:	f104 060b 	add.w	r6, r4, #11
 8009f8a:	f000 fd41 	bl	800aa10 <__malloc_unlock>
 8009f8e:	f026 0607 	bic.w	r6, r6, #7
 8009f92:	1d23      	adds	r3, r4, #4
 8009f94:	1af2      	subs	r2, r6, r3
 8009f96:	d0b6      	beq.n	8009f06 <_malloc_r+0x22>
 8009f98:	1b9b      	subs	r3, r3, r6
 8009f9a:	50a3      	str	r3, [r4, r2]
 8009f9c:	e7b3      	b.n	8009f06 <_malloc_r+0x22>
 8009f9e:	6862      	ldr	r2, [r4, #4]
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	bf0c      	ite	eq
 8009fa4:	6032      	streq	r2, [r6, #0]
 8009fa6:	605a      	strne	r2, [r3, #4]
 8009fa8:	e7ec      	b.n	8009f84 <_malloc_r+0xa0>
 8009faa:	4623      	mov	r3, r4
 8009fac:	6864      	ldr	r4, [r4, #4]
 8009fae:	e7b2      	b.n	8009f16 <_malloc_r+0x32>
 8009fb0:	4634      	mov	r4, r6
 8009fb2:	6876      	ldr	r6, [r6, #4]
 8009fb4:	e7b9      	b.n	8009f2a <_malloc_r+0x46>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f000 fd28 	bl	800aa10 <__malloc_unlock>
 8009fc0:	e7a1      	b.n	8009f06 <_malloc_r+0x22>
 8009fc2:	6025      	str	r5, [r4, #0]
 8009fc4:	e7de      	b.n	8009f84 <_malloc_r+0xa0>
 8009fc6:	bf00      	nop
 8009fc8:	20000c98 	.word	0x20000c98

08009fcc <__ssputs_r>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	688e      	ldr	r6, [r1, #8]
 8009fd2:	429e      	cmp	r6, r3
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4690      	mov	r8, r2
 8009fda:	461f      	mov	r7, r3
 8009fdc:	d838      	bhi.n	800a050 <__ssputs_r+0x84>
 8009fde:	898a      	ldrh	r2, [r1, #12]
 8009fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe4:	d032      	beq.n	800a04c <__ssputs_r+0x80>
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	6909      	ldr	r1, [r1, #16]
 8009fea:	eba5 0901 	sub.w	r9, r5, r1
 8009fee:	6965      	ldr	r5, [r4, #20]
 8009ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	444b      	add	r3, r9
 8009ffc:	106d      	asrs	r5, r5, #1
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf38      	it	cc
 800a002:	461d      	movcc	r5, r3
 800a004:	0553      	lsls	r3, r2, #21
 800a006:	d531      	bpl.n	800a06c <__ssputs_r+0xa0>
 800a008:	4629      	mov	r1, r5
 800a00a:	f7ff ff6b 	bl	8009ee4 <_malloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	b950      	cbnz	r0, 800a028 <__ssputs_r+0x5c>
 800a012:	230c      	movs	r3, #12
 800a014:	f8ca 3000 	str.w	r3, [sl]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	6921      	ldr	r1, [r4, #16]
 800a02a:	464a      	mov	r2, r9
 800a02c:	f000 fcc2 	bl	800a9b4 <memcpy>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	6126      	str	r6, [r4, #16]
 800a03e:	6165      	str	r5, [r4, #20]
 800a040:	444e      	add	r6, r9
 800a042:	eba5 0509 	sub.w	r5, r5, r9
 800a046:	6026      	str	r6, [r4, #0]
 800a048:	60a5      	str	r5, [r4, #8]
 800a04a:	463e      	mov	r6, r7
 800a04c:	42be      	cmp	r6, r7
 800a04e:	d900      	bls.n	800a052 <__ssputs_r+0x86>
 800a050:	463e      	mov	r6, r7
 800a052:	6820      	ldr	r0, [r4, #0]
 800a054:	4632      	mov	r2, r6
 800a056:	4641      	mov	r1, r8
 800a058:	f000 fcba 	bl	800a9d0 <memmove>
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	1b9b      	subs	r3, r3, r6
 800a060:	60a3      	str	r3, [r4, #8]
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	4433      	add	r3, r6
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	2000      	movs	r0, #0
 800a06a:	e7db      	b.n	800a024 <__ssputs_r+0x58>
 800a06c:	462a      	mov	r2, r5
 800a06e:	f000 fcd5 	bl	800aa1c <_realloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	2800      	cmp	r0, #0
 800a076:	d1e1      	bne.n	800a03c <__ssputs_r+0x70>
 800a078:	6921      	ldr	r1, [r4, #16]
 800a07a:	4650      	mov	r0, sl
 800a07c:	f7ff fec6 	bl	8009e0c <_free_r>
 800a080:	e7c7      	b.n	800a012 <__ssputs_r+0x46>
	...

0800a084 <_svfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4698      	mov	r8, r3
 800a08a:	898b      	ldrh	r3, [r1, #12]
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	b09d      	sub	sp, #116	; 0x74
 800a090:	4607      	mov	r7, r0
 800a092:	460d      	mov	r5, r1
 800a094:	4614      	mov	r4, r2
 800a096:	d50e      	bpl.n	800a0b6 <_svfiprintf_r+0x32>
 800a098:	690b      	ldr	r3, [r1, #16]
 800a09a:	b963      	cbnz	r3, 800a0b6 <_svfiprintf_r+0x32>
 800a09c:	2140      	movs	r1, #64	; 0x40
 800a09e:	f7ff ff21 	bl	8009ee4 <_malloc_r>
 800a0a2:	6028      	str	r0, [r5, #0]
 800a0a4:	6128      	str	r0, [r5, #16]
 800a0a6:	b920      	cbnz	r0, 800a0b2 <_svfiprintf_r+0x2e>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	603b      	str	r3, [r7, #0]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e0d1      	b.n	800a256 <_svfiprintf_r+0x1d2>
 800a0b2:	2340      	movs	r3, #64	; 0x40
 800a0b4:	616b      	str	r3, [r5, #20]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	2320      	movs	r3, #32
 800a0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c4:	2330      	movs	r3, #48	; 0x30
 800a0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a270 <_svfiprintf_r+0x1ec>
 800a0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ce:	f04f 0901 	mov.w	r9, #1
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	469a      	mov	sl, r3
 800a0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0da:	b10a      	cbz	r2, 800a0e0 <_svfiprintf_r+0x5c>
 800a0dc:	2a25      	cmp	r2, #37	; 0x25
 800a0de:	d1f9      	bne.n	800a0d4 <_svfiprintf_r+0x50>
 800a0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e4:	d00b      	beq.n	800a0fe <_svfiprintf_r+0x7a>
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff ff6d 	bl	8009fcc <__ssputs_r>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f000 80aa 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fa:	445a      	add	r2, fp
 800a0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80a2 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a108:	2300      	movs	r3, #0
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a112:	f10a 0a01 	add.w	sl, sl, #1
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	9307      	str	r3, [sp, #28]
 800a11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11e:	931a      	str	r3, [sp, #104]	; 0x68
 800a120:	4654      	mov	r4, sl
 800a122:	2205      	movs	r2, #5
 800a124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a128:	4851      	ldr	r0, [pc, #324]	; (800a270 <_svfiprintf_r+0x1ec>)
 800a12a:	f7f6 f861 	bl	80001f0 <memchr>
 800a12e:	9a04      	ldr	r2, [sp, #16]
 800a130:	b9d8      	cbnz	r0, 800a16a <_svfiprintf_r+0xe6>
 800a132:	06d0      	lsls	r0, r2, #27
 800a134:	bf44      	itt	mi
 800a136:	2320      	movmi	r3, #32
 800a138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13c:	0711      	lsls	r1, r2, #28
 800a13e:	bf44      	itt	mi
 800a140:	232b      	movmi	r3, #43	; 0x2b
 800a142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a146:	f89a 3000 	ldrb.w	r3, [sl]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d015      	beq.n	800a17a <_svfiprintf_r+0xf6>
 800a14e:	9a07      	ldr	r2, [sp, #28]
 800a150:	4654      	mov	r4, sl
 800a152:	2000      	movs	r0, #0
 800a154:	f04f 0c0a 	mov.w	ip, #10
 800a158:	4621      	mov	r1, r4
 800a15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15e:	3b30      	subs	r3, #48	; 0x30
 800a160:	2b09      	cmp	r3, #9
 800a162:	d94e      	bls.n	800a202 <_svfiprintf_r+0x17e>
 800a164:	b1b0      	cbz	r0, 800a194 <_svfiprintf_r+0x110>
 800a166:	9207      	str	r2, [sp, #28]
 800a168:	e014      	b.n	800a194 <_svfiprintf_r+0x110>
 800a16a:	eba0 0308 	sub.w	r3, r0, r8
 800a16e:	fa09 f303 	lsl.w	r3, r9, r3
 800a172:	4313      	orrs	r3, r2
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	46a2      	mov	sl, r4
 800a178:	e7d2      	b.n	800a120 <_svfiprintf_r+0x9c>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	1d19      	adds	r1, r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9103      	str	r1, [sp, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	bfbb      	ittet	lt
 800a186:	425b      	neglt	r3, r3
 800a188:	f042 0202 	orrlt.w	r2, r2, #2
 800a18c:	9307      	strge	r3, [sp, #28]
 800a18e:	9307      	strlt	r3, [sp, #28]
 800a190:	bfb8      	it	lt
 800a192:	9204      	strlt	r2, [sp, #16]
 800a194:	7823      	ldrb	r3, [r4, #0]
 800a196:	2b2e      	cmp	r3, #46	; 0x2e
 800a198:	d10c      	bne.n	800a1b4 <_svfiprintf_r+0x130>
 800a19a:	7863      	ldrb	r3, [r4, #1]
 800a19c:	2b2a      	cmp	r3, #42	; 0x2a
 800a19e:	d135      	bne.n	800a20c <_svfiprintf_r+0x188>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9203      	str	r2, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfb8      	it	lt
 800a1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b0:	3402      	adds	r4, #2
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a280 <_svfiprintf_r+0x1fc>
 800a1b8:	7821      	ldrb	r1, [r4, #0]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	4650      	mov	r0, sl
 800a1be:	f7f6 f817 	bl	80001f0 <memchr>
 800a1c2:	b140      	cbz	r0, 800a1d6 <_svfiprintf_r+0x152>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	4303      	orrs	r3, r0
 800a1d2:	3401      	adds	r4, #1
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1da:	4826      	ldr	r0, [pc, #152]	; (800a274 <_svfiprintf_r+0x1f0>)
 800a1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e0:	2206      	movs	r2, #6
 800a1e2:	f7f6 f805 	bl	80001f0 <memchr>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d038      	beq.n	800a25c <_svfiprintf_r+0x1d8>
 800a1ea:	4b23      	ldr	r3, [pc, #140]	; (800a278 <_svfiprintf_r+0x1f4>)
 800a1ec:	bb1b      	cbnz	r3, 800a236 <_svfiprintf_r+0x1b2>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	4433      	add	r3, r6
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	e767      	b.n	800a0d2 <_svfiprintf_r+0x4e>
 800a202:	fb0c 3202 	mla	r2, ip, r2, r3
 800a206:	460c      	mov	r4, r1
 800a208:	2001      	movs	r0, #1
 800a20a:	e7a5      	b.n	800a158 <_svfiprintf_r+0xd4>
 800a20c:	2300      	movs	r3, #0
 800a20e:	3401      	adds	r4, #1
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	4619      	mov	r1, r3
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4620      	mov	r0, r4
 800a21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21e:	3a30      	subs	r2, #48	; 0x30
 800a220:	2a09      	cmp	r2, #9
 800a222:	d903      	bls.n	800a22c <_svfiprintf_r+0x1a8>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0c5      	beq.n	800a1b4 <_svfiprintf_r+0x130>
 800a228:	9105      	str	r1, [sp, #20]
 800a22a:	e7c3      	b.n	800a1b4 <_svfiprintf_r+0x130>
 800a22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a230:	4604      	mov	r4, r0
 800a232:	2301      	movs	r3, #1
 800a234:	e7f0      	b.n	800a218 <_svfiprintf_r+0x194>
 800a236:	ab03      	add	r3, sp, #12
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	462a      	mov	r2, r5
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a23e:	a904      	add	r1, sp, #16
 800a240:	4638      	mov	r0, r7
 800a242:	f3af 8000 	nop.w
 800a246:	1c42      	adds	r2, r0, #1
 800a248:	4606      	mov	r6, r0
 800a24a:	d1d6      	bne.n	800a1fa <_svfiprintf_r+0x176>
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	065b      	lsls	r3, r3, #25
 800a250:	f53f af2c 	bmi.w	800a0ac <_svfiprintf_r+0x28>
 800a254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a256:	b01d      	add	sp, #116	; 0x74
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4b06      	ldr	r3, [pc, #24]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4638      	mov	r0, r7
 800a268:	f000 f9d4 	bl	800a614 <_printf_i>
 800a26c:	e7eb      	b.n	800a246 <_svfiprintf_r+0x1c2>
 800a26e:	bf00      	nop
 800a270:	0800ada4 	.word	0x0800ada4
 800a274:	0800adae 	.word	0x0800adae
 800a278:	00000000 	.word	0x00000000
 800a27c:	08009fcd 	.word	0x08009fcd
 800a280:	0800adaa 	.word	0x0800adaa

0800a284 <__sfputc_r>:
 800a284:	6893      	ldr	r3, [r2, #8]
 800a286:	3b01      	subs	r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	b410      	push	{r4}
 800a28c:	6093      	str	r3, [r2, #8]
 800a28e:	da08      	bge.n	800a2a2 <__sfputc_r+0x1e>
 800a290:	6994      	ldr	r4, [r2, #24]
 800a292:	42a3      	cmp	r3, r4
 800a294:	db01      	blt.n	800a29a <__sfputc_r+0x16>
 800a296:	290a      	cmp	r1, #10
 800a298:	d103      	bne.n	800a2a2 <__sfputc_r+0x1e>
 800a29a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a29e:	f7ff bad5 	b.w	800984c <__swbuf_r>
 800a2a2:	6813      	ldr	r3, [r2, #0]
 800a2a4:	1c58      	adds	r0, r3, #1
 800a2a6:	6010      	str	r0, [r2, #0]
 800a2a8:	7019      	strb	r1, [r3, #0]
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <__sfputs_r>:
 800a2b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	460f      	mov	r7, r1
 800a2b8:	4614      	mov	r4, r2
 800a2ba:	18d5      	adds	r5, r2, r3
 800a2bc:	42ac      	cmp	r4, r5
 800a2be:	d101      	bne.n	800a2c4 <__sfputs_r+0x12>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e007      	b.n	800a2d4 <__sfputs_r+0x22>
 800a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c8:	463a      	mov	r2, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7ff ffda 	bl	800a284 <__sfputc_r>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d1f3      	bne.n	800a2bc <__sfputs_r+0xa>
 800a2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2d8 <_vfiprintf_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	460d      	mov	r5, r1
 800a2de:	b09d      	sub	sp, #116	; 0x74
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	4698      	mov	r8, r3
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	b118      	cbz	r0, 800a2f0 <_vfiprintf_r+0x18>
 800a2e8:	6983      	ldr	r3, [r0, #24]
 800a2ea:	b90b      	cbnz	r3, 800a2f0 <_vfiprintf_r+0x18>
 800a2ec:	f7ff fc88 	bl	8009c00 <__sinit>
 800a2f0:	4b89      	ldr	r3, [pc, #548]	; (800a518 <_vfiprintf_r+0x240>)
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	d11b      	bne.n	800a32e <_vfiprintf_r+0x56>
 800a2f6:	6875      	ldr	r5, [r6, #4]
 800a2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fa:	07d9      	lsls	r1, r3, #31
 800a2fc:	d405      	bmi.n	800a30a <_vfiprintf_r+0x32>
 800a2fe:	89ab      	ldrh	r3, [r5, #12]
 800a300:	059a      	lsls	r2, r3, #22
 800a302:	d402      	bmi.n	800a30a <_vfiprintf_r+0x32>
 800a304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a306:	f7ff fd19 	bl	8009d3c <__retarget_lock_acquire_recursive>
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	071b      	lsls	r3, r3, #28
 800a30e:	d501      	bpl.n	800a314 <_vfiprintf_r+0x3c>
 800a310:	692b      	ldr	r3, [r5, #16]
 800a312:	b9eb      	cbnz	r3, 800a350 <_vfiprintf_r+0x78>
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff faea 	bl	80098f0 <__swsetup_r>
 800a31c:	b1c0      	cbz	r0, 800a350 <_vfiprintf_r+0x78>
 800a31e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a320:	07dc      	lsls	r4, r3, #31
 800a322:	d50e      	bpl.n	800a342 <_vfiprintf_r+0x6a>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b01d      	add	sp, #116	; 0x74
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	4b7b      	ldr	r3, [pc, #492]	; (800a51c <_vfiprintf_r+0x244>)
 800a330:	429d      	cmp	r5, r3
 800a332:	d101      	bne.n	800a338 <_vfiprintf_r+0x60>
 800a334:	68b5      	ldr	r5, [r6, #8]
 800a336:	e7df      	b.n	800a2f8 <_vfiprintf_r+0x20>
 800a338:	4b79      	ldr	r3, [pc, #484]	; (800a520 <_vfiprintf_r+0x248>)
 800a33a:	429d      	cmp	r5, r3
 800a33c:	bf08      	it	eq
 800a33e:	68f5      	ldreq	r5, [r6, #12]
 800a340:	e7da      	b.n	800a2f8 <_vfiprintf_r+0x20>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	0598      	lsls	r0, r3, #22
 800a346:	d4ed      	bmi.n	800a324 <_vfiprintf_r+0x4c>
 800a348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34a:	f7ff fcf8 	bl	8009d3e <__retarget_lock_release_recursive>
 800a34e:	e7e9      	b.n	800a324 <_vfiprintf_r+0x4c>
 800a350:	2300      	movs	r3, #0
 800a352:	9309      	str	r3, [sp, #36]	; 0x24
 800a354:	2320      	movs	r3, #32
 800a356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a35a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a35e:	2330      	movs	r3, #48	; 0x30
 800a360:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a524 <_vfiprintf_r+0x24c>
 800a364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a368:	f04f 0901 	mov.w	r9, #1
 800a36c:	4623      	mov	r3, r4
 800a36e:	469a      	mov	sl, r3
 800a370:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a374:	b10a      	cbz	r2, 800a37a <_vfiprintf_r+0xa2>
 800a376:	2a25      	cmp	r2, #37	; 0x25
 800a378:	d1f9      	bne.n	800a36e <_vfiprintf_r+0x96>
 800a37a:	ebba 0b04 	subs.w	fp, sl, r4
 800a37e:	d00b      	beq.n	800a398 <_vfiprintf_r+0xc0>
 800a380:	465b      	mov	r3, fp
 800a382:	4622      	mov	r2, r4
 800a384:	4629      	mov	r1, r5
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ff93 	bl	800a2b2 <__sfputs_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	f000 80aa 	beq.w	800a4e6 <_vfiprintf_r+0x20e>
 800a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a394:	445a      	add	r2, fp
 800a396:	9209      	str	r2, [sp, #36]	; 0x24
 800a398:	f89a 3000 	ldrb.w	r3, [sl]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80a2 	beq.w	800a4e6 <_vfiprintf_r+0x20e>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ac:	f10a 0a01 	add.w	sl, sl, #1
 800a3b0:	9304      	str	r3, [sp, #16]
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ba:	4654      	mov	r4, sl
 800a3bc:	2205      	movs	r2, #5
 800a3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c2:	4858      	ldr	r0, [pc, #352]	; (800a524 <_vfiprintf_r+0x24c>)
 800a3c4:	f7f5 ff14 	bl	80001f0 <memchr>
 800a3c8:	9a04      	ldr	r2, [sp, #16]
 800a3ca:	b9d8      	cbnz	r0, 800a404 <_vfiprintf_r+0x12c>
 800a3cc:	06d1      	lsls	r1, r2, #27
 800a3ce:	bf44      	itt	mi
 800a3d0:	2320      	movmi	r3, #32
 800a3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d6:	0713      	lsls	r3, r2, #28
 800a3d8:	bf44      	itt	mi
 800a3da:	232b      	movmi	r3, #43	; 0x2b
 800a3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e6:	d015      	beq.n	800a414 <_vfiprintf_r+0x13c>
 800a3e8:	9a07      	ldr	r2, [sp, #28]
 800a3ea:	4654      	mov	r4, sl
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f04f 0c0a 	mov.w	ip, #10
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3f8:	3b30      	subs	r3, #48	; 0x30
 800a3fa:	2b09      	cmp	r3, #9
 800a3fc:	d94e      	bls.n	800a49c <_vfiprintf_r+0x1c4>
 800a3fe:	b1b0      	cbz	r0, 800a42e <_vfiprintf_r+0x156>
 800a400:	9207      	str	r2, [sp, #28]
 800a402:	e014      	b.n	800a42e <_vfiprintf_r+0x156>
 800a404:	eba0 0308 	sub.w	r3, r0, r8
 800a408:	fa09 f303 	lsl.w	r3, r9, r3
 800a40c:	4313      	orrs	r3, r2
 800a40e:	9304      	str	r3, [sp, #16]
 800a410:	46a2      	mov	sl, r4
 800a412:	e7d2      	b.n	800a3ba <_vfiprintf_r+0xe2>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	1d19      	adds	r1, r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	9103      	str	r1, [sp, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfbb      	ittet	lt
 800a420:	425b      	neglt	r3, r3
 800a422:	f042 0202 	orrlt.w	r2, r2, #2
 800a426:	9307      	strge	r3, [sp, #28]
 800a428:	9307      	strlt	r3, [sp, #28]
 800a42a:	bfb8      	it	lt
 800a42c:	9204      	strlt	r2, [sp, #16]
 800a42e:	7823      	ldrb	r3, [r4, #0]
 800a430:	2b2e      	cmp	r3, #46	; 0x2e
 800a432:	d10c      	bne.n	800a44e <_vfiprintf_r+0x176>
 800a434:	7863      	ldrb	r3, [r4, #1]
 800a436:	2b2a      	cmp	r3, #42	; 0x2a
 800a438:	d135      	bne.n	800a4a6 <_vfiprintf_r+0x1ce>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	1d1a      	adds	r2, r3, #4
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	9203      	str	r2, [sp, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	bfb8      	it	lt
 800a446:	f04f 33ff 	movlt.w	r3, #4294967295
 800a44a:	3402      	adds	r4, #2
 800a44c:	9305      	str	r3, [sp, #20]
 800a44e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a534 <_vfiprintf_r+0x25c>
 800a452:	7821      	ldrb	r1, [r4, #0]
 800a454:	2203      	movs	r2, #3
 800a456:	4650      	mov	r0, sl
 800a458:	f7f5 feca 	bl	80001f0 <memchr>
 800a45c:	b140      	cbz	r0, 800a470 <_vfiprintf_r+0x198>
 800a45e:	2340      	movs	r3, #64	; 0x40
 800a460:	eba0 000a 	sub.w	r0, r0, sl
 800a464:	fa03 f000 	lsl.w	r0, r3, r0
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	4303      	orrs	r3, r0
 800a46c:	3401      	adds	r4, #1
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a474:	482c      	ldr	r0, [pc, #176]	; (800a528 <_vfiprintf_r+0x250>)
 800a476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a47a:	2206      	movs	r2, #6
 800a47c:	f7f5 feb8 	bl	80001f0 <memchr>
 800a480:	2800      	cmp	r0, #0
 800a482:	d03f      	beq.n	800a504 <_vfiprintf_r+0x22c>
 800a484:	4b29      	ldr	r3, [pc, #164]	; (800a52c <_vfiprintf_r+0x254>)
 800a486:	bb1b      	cbnz	r3, 800a4d0 <_vfiprintf_r+0x1f8>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	3307      	adds	r3, #7
 800a48c:	f023 0307 	bic.w	r3, r3, #7
 800a490:	3308      	adds	r3, #8
 800a492:	9303      	str	r3, [sp, #12]
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	443b      	add	r3, r7
 800a498:	9309      	str	r3, [sp, #36]	; 0x24
 800a49a:	e767      	b.n	800a36c <_vfiprintf_r+0x94>
 800a49c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	e7a5      	b.n	800a3f2 <_vfiprintf_r+0x11a>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	3401      	adds	r4, #1
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f04f 0c0a 	mov.w	ip, #10
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4b8:	3a30      	subs	r2, #48	; 0x30
 800a4ba:	2a09      	cmp	r2, #9
 800a4bc:	d903      	bls.n	800a4c6 <_vfiprintf_r+0x1ee>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0c5      	beq.n	800a44e <_vfiprintf_r+0x176>
 800a4c2:	9105      	str	r1, [sp, #20]
 800a4c4:	e7c3      	b.n	800a44e <_vfiprintf_r+0x176>
 800a4c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e7f0      	b.n	800a4b2 <_vfiprintf_r+0x1da>
 800a4d0:	ab03      	add	r3, sp, #12
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	4b16      	ldr	r3, [pc, #88]	; (800a530 <_vfiprintf_r+0x258>)
 800a4d8:	a904      	add	r1, sp, #16
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	1c78      	adds	r0, r7, #1
 800a4e4:	d1d6      	bne.n	800a494 <_vfiprintf_r+0x1bc>
 800a4e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4e8:	07d9      	lsls	r1, r3, #31
 800a4ea:	d405      	bmi.n	800a4f8 <_vfiprintf_r+0x220>
 800a4ec:	89ab      	ldrh	r3, [r5, #12]
 800a4ee:	059a      	lsls	r2, r3, #22
 800a4f0:	d402      	bmi.n	800a4f8 <_vfiprintf_r+0x220>
 800a4f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f4:	f7ff fc23 	bl	8009d3e <__retarget_lock_release_recursive>
 800a4f8:	89ab      	ldrh	r3, [r5, #12]
 800a4fa:	065b      	lsls	r3, r3, #25
 800a4fc:	f53f af12 	bmi.w	800a324 <_vfiprintf_r+0x4c>
 800a500:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a502:	e711      	b.n	800a328 <_vfiprintf_r+0x50>
 800a504:	ab03      	add	r3, sp, #12
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	462a      	mov	r2, r5
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <_vfiprintf_r+0x258>)
 800a50c:	a904      	add	r1, sp, #16
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f880 	bl	800a614 <_printf_i>
 800a514:	e7e4      	b.n	800a4e0 <_vfiprintf_r+0x208>
 800a516:	bf00      	nop
 800a518:	0800ad64 	.word	0x0800ad64
 800a51c:	0800ad84 	.word	0x0800ad84
 800a520:	0800ad44 	.word	0x0800ad44
 800a524:	0800ada4 	.word	0x0800ada4
 800a528:	0800adae 	.word	0x0800adae
 800a52c:	00000000 	.word	0x00000000
 800a530:	0800a2b3 	.word	0x0800a2b3
 800a534:	0800adaa 	.word	0x0800adaa

0800a538 <_printf_common>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	4616      	mov	r6, r2
 800a53e:	4699      	mov	r9, r3
 800a540:	688a      	ldr	r2, [r1, #8]
 800a542:	690b      	ldr	r3, [r1, #16]
 800a544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a548:	4293      	cmp	r3, r2
 800a54a:	bfb8      	it	lt
 800a54c:	4613      	movlt	r3, r2
 800a54e:	6033      	str	r3, [r6, #0]
 800a550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a554:	4607      	mov	r7, r0
 800a556:	460c      	mov	r4, r1
 800a558:	b10a      	cbz	r2, 800a55e <_printf_common+0x26>
 800a55a:	3301      	adds	r3, #1
 800a55c:	6033      	str	r3, [r6, #0]
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	0699      	lsls	r1, r3, #26
 800a562:	bf42      	ittt	mi
 800a564:	6833      	ldrmi	r3, [r6, #0]
 800a566:	3302      	addmi	r3, #2
 800a568:	6033      	strmi	r3, [r6, #0]
 800a56a:	6825      	ldr	r5, [r4, #0]
 800a56c:	f015 0506 	ands.w	r5, r5, #6
 800a570:	d106      	bne.n	800a580 <_printf_common+0x48>
 800a572:	f104 0a19 	add.w	sl, r4, #25
 800a576:	68e3      	ldr	r3, [r4, #12]
 800a578:	6832      	ldr	r2, [r6, #0]
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	42ab      	cmp	r3, r5
 800a57e:	dc26      	bgt.n	800a5ce <_printf_common+0x96>
 800a580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a584:	1e13      	subs	r3, r2, #0
 800a586:	6822      	ldr	r2, [r4, #0]
 800a588:	bf18      	it	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	0692      	lsls	r2, r2, #26
 800a58e:	d42b      	bmi.n	800a5e8 <_printf_common+0xb0>
 800a590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a594:	4649      	mov	r1, r9
 800a596:	4638      	mov	r0, r7
 800a598:	47c0      	blx	r8
 800a59a:	3001      	adds	r0, #1
 800a59c:	d01e      	beq.n	800a5dc <_printf_common+0xa4>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	68e5      	ldr	r5, [r4, #12]
 800a5a2:	6832      	ldr	r2, [r6, #0]
 800a5a4:	f003 0306 	and.w	r3, r3, #6
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	bf08      	it	eq
 800a5ac:	1aad      	subeq	r5, r5, r2
 800a5ae:	68a3      	ldr	r3, [r4, #8]
 800a5b0:	6922      	ldr	r2, [r4, #16]
 800a5b2:	bf0c      	ite	eq
 800a5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5b8:	2500      	movne	r5, #0
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	bfc4      	itt	gt
 800a5be:	1a9b      	subgt	r3, r3, r2
 800a5c0:	18ed      	addgt	r5, r5, r3
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	341a      	adds	r4, #26
 800a5c6:	42b5      	cmp	r5, r6
 800a5c8:	d11a      	bne.n	800a600 <_printf_common+0xc8>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e008      	b.n	800a5e0 <_printf_common+0xa8>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	4652      	mov	r2, sl
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	47c0      	blx	r8
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d103      	bne.n	800a5e4 <_printf_common+0xac>
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	e7c6      	b.n	800a576 <_printf_common+0x3e>
 800a5e8:	18e1      	adds	r1, r4, r3
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	2030      	movs	r0, #48	; 0x30
 800a5ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5f2:	4422      	add	r2, r4
 800a5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	e7c7      	b.n	800a590 <_printf_common+0x58>
 800a600:	2301      	movs	r3, #1
 800a602:	4622      	mov	r2, r4
 800a604:	4649      	mov	r1, r9
 800a606:	4638      	mov	r0, r7
 800a608:	47c0      	blx	r8
 800a60a:	3001      	adds	r0, #1
 800a60c:	d0e6      	beq.n	800a5dc <_printf_common+0xa4>
 800a60e:	3601      	adds	r6, #1
 800a610:	e7d9      	b.n	800a5c6 <_printf_common+0x8e>
	...

0800a614 <_printf_i>:
 800a614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	7e0f      	ldrb	r7, [r1, #24]
 800a61a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a61c:	2f78      	cmp	r7, #120	; 0x78
 800a61e:	4691      	mov	r9, r2
 800a620:	4680      	mov	r8, r0
 800a622:	460c      	mov	r4, r1
 800a624:	469a      	mov	sl, r3
 800a626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a62a:	d807      	bhi.n	800a63c <_printf_i+0x28>
 800a62c:	2f62      	cmp	r7, #98	; 0x62
 800a62e:	d80a      	bhi.n	800a646 <_printf_i+0x32>
 800a630:	2f00      	cmp	r7, #0
 800a632:	f000 80d8 	beq.w	800a7e6 <_printf_i+0x1d2>
 800a636:	2f58      	cmp	r7, #88	; 0x58
 800a638:	f000 80a3 	beq.w	800a782 <_printf_i+0x16e>
 800a63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a644:	e03a      	b.n	800a6bc <_printf_i+0xa8>
 800a646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a64a:	2b15      	cmp	r3, #21
 800a64c:	d8f6      	bhi.n	800a63c <_printf_i+0x28>
 800a64e:	a101      	add	r1, pc, #4	; (adr r1, 800a654 <_printf_i+0x40>)
 800a650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a654:	0800a6ad 	.word	0x0800a6ad
 800a658:	0800a6c1 	.word	0x0800a6c1
 800a65c:	0800a63d 	.word	0x0800a63d
 800a660:	0800a63d 	.word	0x0800a63d
 800a664:	0800a63d 	.word	0x0800a63d
 800a668:	0800a63d 	.word	0x0800a63d
 800a66c:	0800a6c1 	.word	0x0800a6c1
 800a670:	0800a63d 	.word	0x0800a63d
 800a674:	0800a63d 	.word	0x0800a63d
 800a678:	0800a63d 	.word	0x0800a63d
 800a67c:	0800a63d 	.word	0x0800a63d
 800a680:	0800a7cd 	.word	0x0800a7cd
 800a684:	0800a6f1 	.word	0x0800a6f1
 800a688:	0800a7af 	.word	0x0800a7af
 800a68c:	0800a63d 	.word	0x0800a63d
 800a690:	0800a63d 	.word	0x0800a63d
 800a694:	0800a7ef 	.word	0x0800a7ef
 800a698:	0800a63d 	.word	0x0800a63d
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a63d 	.word	0x0800a63d
 800a6a4:	0800a63d 	.word	0x0800a63d
 800a6a8:	0800a7b7 	.word	0x0800a7b7
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	1d1a      	adds	r2, r3, #4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	602a      	str	r2, [r5, #0]
 800a6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e0a3      	b.n	800a808 <_printf_i+0x1f4>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	6829      	ldr	r1, [r5, #0]
 800a6c4:	0606      	lsls	r6, r0, #24
 800a6c6:	f101 0304 	add.w	r3, r1, #4
 800a6ca:	d50a      	bpl.n	800a6e2 <_printf_i+0xce>
 800a6cc:	680e      	ldr	r6, [r1, #0]
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	2e00      	cmp	r6, #0
 800a6d2:	da03      	bge.n	800a6dc <_printf_i+0xc8>
 800a6d4:	232d      	movs	r3, #45	; 0x2d
 800a6d6:	4276      	negs	r6, r6
 800a6d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6dc:	485e      	ldr	r0, [pc, #376]	; (800a858 <_printf_i+0x244>)
 800a6de:	230a      	movs	r3, #10
 800a6e0:	e019      	b.n	800a716 <_printf_i+0x102>
 800a6e2:	680e      	ldr	r6, [r1, #0]
 800a6e4:	602b      	str	r3, [r5, #0]
 800a6e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6ea:	bf18      	it	ne
 800a6ec:	b236      	sxthne	r6, r6
 800a6ee:	e7ef      	b.n	800a6d0 <_printf_i+0xbc>
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	6820      	ldr	r0, [r4, #0]
 800a6f4:	1d19      	adds	r1, r3, #4
 800a6f6:	6029      	str	r1, [r5, #0]
 800a6f8:	0601      	lsls	r1, r0, #24
 800a6fa:	d501      	bpl.n	800a700 <_printf_i+0xec>
 800a6fc:	681e      	ldr	r6, [r3, #0]
 800a6fe:	e002      	b.n	800a706 <_printf_i+0xf2>
 800a700:	0646      	lsls	r6, r0, #25
 800a702:	d5fb      	bpl.n	800a6fc <_printf_i+0xe8>
 800a704:	881e      	ldrh	r6, [r3, #0]
 800a706:	4854      	ldr	r0, [pc, #336]	; (800a858 <_printf_i+0x244>)
 800a708:	2f6f      	cmp	r7, #111	; 0x6f
 800a70a:	bf0c      	ite	eq
 800a70c:	2308      	moveq	r3, #8
 800a70e:	230a      	movne	r3, #10
 800a710:	2100      	movs	r1, #0
 800a712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a716:	6865      	ldr	r5, [r4, #4]
 800a718:	60a5      	str	r5, [r4, #8]
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	bfa2      	ittt	ge
 800a71e:	6821      	ldrge	r1, [r4, #0]
 800a720:	f021 0104 	bicge.w	r1, r1, #4
 800a724:	6021      	strge	r1, [r4, #0]
 800a726:	b90e      	cbnz	r6, 800a72c <_printf_i+0x118>
 800a728:	2d00      	cmp	r5, #0
 800a72a:	d04d      	beq.n	800a7c8 <_printf_i+0x1b4>
 800a72c:	4615      	mov	r5, r2
 800a72e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a732:	fb03 6711 	mls	r7, r3, r1, r6
 800a736:	5dc7      	ldrb	r7, [r0, r7]
 800a738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a73c:	4637      	mov	r7, r6
 800a73e:	42bb      	cmp	r3, r7
 800a740:	460e      	mov	r6, r1
 800a742:	d9f4      	bls.n	800a72e <_printf_i+0x11a>
 800a744:	2b08      	cmp	r3, #8
 800a746:	d10b      	bne.n	800a760 <_printf_i+0x14c>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	07de      	lsls	r6, r3, #31
 800a74c:	d508      	bpl.n	800a760 <_printf_i+0x14c>
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	4299      	cmp	r1, r3
 800a754:	bfde      	ittt	le
 800a756:	2330      	movle	r3, #48	; 0x30
 800a758:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a75c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a760:	1b52      	subs	r2, r2, r5
 800a762:	6122      	str	r2, [r4, #16]
 800a764:	f8cd a000 	str.w	sl, [sp]
 800a768:	464b      	mov	r3, r9
 800a76a:	aa03      	add	r2, sp, #12
 800a76c:	4621      	mov	r1, r4
 800a76e:	4640      	mov	r0, r8
 800a770:	f7ff fee2 	bl	800a538 <_printf_common>
 800a774:	3001      	adds	r0, #1
 800a776:	d14c      	bne.n	800a812 <_printf_i+0x1fe>
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	b004      	add	sp, #16
 800a77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a782:	4835      	ldr	r0, [pc, #212]	; (800a858 <_printf_i+0x244>)
 800a784:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a788:	6829      	ldr	r1, [r5, #0]
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a790:	6029      	str	r1, [r5, #0]
 800a792:	061d      	lsls	r5, r3, #24
 800a794:	d514      	bpl.n	800a7c0 <_printf_i+0x1ac>
 800a796:	07df      	lsls	r7, r3, #31
 800a798:	bf44      	itt	mi
 800a79a:	f043 0320 	orrmi.w	r3, r3, #32
 800a79e:	6023      	strmi	r3, [r4, #0]
 800a7a0:	b91e      	cbnz	r6, 800a7aa <_printf_i+0x196>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	f023 0320 	bic.w	r3, r3, #32
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	e7b0      	b.n	800a710 <_printf_i+0xfc>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	f043 0320 	orr.w	r3, r3, #32
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	2378      	movs	r3, #120	; 0x78
 800a7b8:	4828      	ldr	r0, [pc, #160]	; (800a85c <_printf_i+0x248>)
 800a7ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7be:	e7e3      	b.n	800a788 <_printf_i+0x174>
 800a7c0:	0659      	lsls	r1, r3, #25
 800a7c2:	bf48      	it	mi
 800a7c4:	b2b6      	uxthmi	r6, r6
 800a7c6:	e7e6      	b.n	800a796 <_printf_i+0x182>
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	e7bb      	b.n	800a744 <_printf_i+0x130>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	6826      	ldr	r6, [r4, #0]
 800a7d0:	6961      	ldr	r1, [r4, #20]
 800a7d2:	1d18      	adds	r0, r3, #4
 800a7d4:	6028      	str	r0, [r5, #0]
 800a7d6:	0635      	lsls	r5, r6, #24
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	d501      	bpl.n	800a7e0 <_printf_i+0x1cc>
 800a7dc:	6019      	str	r1, [r3, #0]
 800a7de:	e002      	b.n	800a7e6 <_printf_i+0x1d2>
 800a7e0:	0670      	lsls	r0, r6, #25
 800a7e2:	d5fb      	bpl.n	800a7dc <_printf_i+0x1c8>
 800a7e4:	8019      	strh	r1, [r3, #0]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6123      	str	r3, [r4, #16]
 800a7ea:	4615      	mov	r5, r2
 800a7ec:	e7ba      	b.n	800a764 <_printf_i+0x150>
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	1d1a      	adds	r2, r3, #4
 800a7f2:	602a      	str	r2, [r5, #0]
 800a7f4:	681d      	ldr	r5, [r3, #0]
 800a7f6:	6862      	ldr	r2, [r4, #4]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	f7f5 fcf8 	bl	80001f0 <memchr>
 800a800:	b108      	cbz	r0, 800a806 <_printf_i+0x1f2>
 800a802:	1b40      	subs	r0, r0, r5
 800a804:	6060      	str	r0, [r4, #4]
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	2300      	movs	r3, #0
 800a80c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a810:	e7a8      	b.n	800a764 <_printf_i+0x150>
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	462a      	mov	r2, r5
 800a816:	4649      	mov	r1, r9
 800a818:	4640      	mov	r0, r8
 800a81a:	47d0      	blx	sl
 800a81c:	3001      	adds	r0, #1
 800a81e:	d0ab      	beq.n	800a778 <_printf_i+0x164>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	079b      	lsls	r3, r3, #30
 800a824:	d413      	bmi.n	800a84e <_printf_i+0x23a>
 800a826:	68e0      	ldr	r0, [r4, #12]
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	4298      	cmp	r0, r3
 800a82c:	bfb8      	it	lt
 800a82e:	4618      	movlt	r0, r3
 800a830:	e7a4      	b.n	800a77c <_printf_i+0x168>
 800a832:	2301      	movs	r3, #1
 800a834:	4632      	mov	r2, r6
 800a836:	4649      	mov	r1, r9
 800a838:	4640      	mov	r0, r8
 800a83a:	47d0      	blx	sl
 800a83c:	3001      	adds	r0, #1
 800a83e:	d09b      	beq.n	800a778 <_printf_i+0x164>
 800a840:	3501      	adds	r5, #1
 800a842:	68e3      	ldr	r3, [r4, #12]
 800a844:	9903      	ldr	r1, [sp, #12]
 800a846:	1a5b      	subs	r3, r3, r1
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dcf2      	bgt.n	800a832 <_printf_i+0x21e>
 800a84c:	e7eb      	b.n	800a826 <_printf_i+0x212>
 800a84e:	2500      	movs	r5, #0
 800a850:	f104 0619 	add.w	r6, r4, #25
 800a854:	e7f5      	b.n	800a842 <_printf_i+0x22e>
 800a856:	bf00      	nop
 800a858:	0800adb5 	.word	0x0800adb5
 800a85c:	0800adc6 	.word	0x0800adc6

0800a860 <_sbrk_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d06      	ldr	r5, [pc, #24]	; (800a87c <_sbrk_r+0x1c>)
 800a864:	2300      	movs	r3, #0
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	602b      	str	r3, [r5, #0]
 800a86c:	f7f8 fc5a 	bl	8003124 <_sbrk>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_sbrk_r+0x1a>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_sbrk_r+0x1a>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	20000ca0 	.word	0x20000ca0

0800a880 <__sread>:
 800a880:	b510      	push	{r4, lr}
 800a882:	460c      	mov	r4, r1
 800a884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a888:	f000 f8f8 	bl	800aa7c <_read_r>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	bfab      	itete	ge
 800a890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a892:	89a3      	ldrhlt	r3, [r4, #12]
 800a894:	181b      	addge	r3, r3, r0
 800a896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a89a:	bfac      	ite	ge
 800a89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a89e:	81a3      	strhlt	r3, [r4, #12]
 800a8a0:	bd10      	pop	{r4, pc}

0800a8a2 <__swrite>:
 800a8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a6:	461f      	mov	r7, r3
 800a8a8:	898b      	ldrh	r3, [r1, #12]
 800a8aa:	05db      	lsls	r3, r3, #23
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	d505      	bpl.n	800a8c0 <__swrite+0x1e>
 800a8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f000 f868 	bl	800a990 <_lseek_r>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	463b      	mov	r3, r7
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d6:	f000 b817 	b.w	800a908 <_write_r>

0800a8da <__sseek>:
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	460c      	mov	r4, r1
 800a8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e2:	f000 f855 	bl	800a990 <_lseek_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	bf15      	itete	ne
 800a8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8f6:	81a3      	strheq	r3, [r4, #12]
 800a8f8:	bf18      	it	ne
 800a8fa:	81a3      	strhne	r3, [r4, #12]
 800a8fc:	bd10      	pop	{r4, pc}

0800a8fe <__sclose>:
 800a8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a902:	f000 b813 	b.w	800a92c <_close_r>
	...

0800a908 <_write_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	; (800a928 <_write_r+0x20>)
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	602a      	str	r2, [r5, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f8 fbb3 	bl	8003082 <_write>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_write_r+0x1e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_write_r+0x1e>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	20000ca0 	.word	0x20000ca0

0800a92c <_close_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d06      	ldr	r5, [pc, #24]	; (800a948 <_close_r+0x1c>)
 800a930:	2300      	movs	r3, #0
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	f7f8 fbbf 	bl	80030ba <_close>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_close_r+0x1a>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_close_r+0x1a>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20000ca0 	.word	0x20000ca0

0800a94c <_fstat_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_fstat_r+0x20>)
 800a950:	2300      	movs	r3, #0
 800a952:	4604      	mov	r4, r0
 800a954:	4608      	mov	r0, r1
 800a956:	4611      	mov	r1, r2
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	f7f8 fbba 	bl	80030d2 <_fstat>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	d102      	bne.n	800a968 <_fstat_r+0x1c>
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	b103      	cbz	r3, 800a968 <_fstat_r+0x1c>
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	bd38      	pop	{r3, r4, r5, pc}
 800a96a:	bf00      	nop
 800a96c:	20000ca0 	.word	0x20000ca0

0800a970 <_isatty_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4d06      	ldr	r5, [pc, #24]	; (800a98c <_isatty_r+0x1c>)
 800a974:	2300      	movs	r3, #0
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	602b      	str	r3, [r5, #0]
 800a97c:	f7f8 fbb9 	bl	80030f2 <_isatty>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_isatty_r+0x1a>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_isatty_r+0x1a>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	20000ca0 	.word	0x20000ca0

0800a990 <_lseek_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d07      	ldr	r5, [pc, #28]	; (800a9b0 <_lseek_r+0x20>)
 800a994:	4604      	mov	r4, r0
 800a996:	4608      	mov	r0, r1
 800a998:	4611      	mov	r1, r2
 800a99a:	2200      	movs	r2, #0
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f7f8 fbb2 	bl	8003108 <_lseek>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_lseek_r+0x1e>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_lseek_r+0x1e>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	20000ca0 	.word	0x20000ca0

0800a9b4 <memcpy>:
 800a9b4:	440a      	add	r2, r1
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9bc:	d100      	bne.n	800a9c0 <memcpy+0xc>
 800a9be:	4770      	bx	lr
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	d1f9      	bne.n	800a9c2 <memcpy+0xe>
 800a9ce:	bd10      	pop	{r4, pc}

0800a9d0 <memmove>:
 800a9d0:	4288      	cmp	r0, r1
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	eb01 0402 	add.w	r4, r1, r2
 800a9d8:	d902      	bls.n	800a9e0 <memmove+0x10>
 800a9da:	4284      	cmp	r4, r0
 800a9dc:	4623      	mov	r3, r4
 800a9de:	d807      	bhi.n	800a9f0 <memmove+0x20>
 800a9e0:	1e43      	subs	r3, r0, #1
 800a9e2:	42a1      	cmp	r1, r4
 800a9e4:	d008      	beq.n	800a9f8 <memmove+0x28>
 800a9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ee:	e7f8      	b.n	800a9e2 <memmove+0x12>
 800a9f0:	4402      	add	r2, r0
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	428a      	cmp	r2, r1
 800a9f6:	d100      	bne.n	800a9fa <memmove+0x2a>
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa02:	e7f7      	b.n	800a9f4 <memmove+0x24>

0800aa04 <__malloc_lock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__malloc_lock+0x8>)
 800aa06:	f7ff b999 	b.w	8009d3c <__retarget_lock_acquire_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20000c94 	.word	0x20000c94

0800aa10 <__malloc_unlock>:
 800aa10:	4801      	ldr	r0, [pc, #4]	; (800aa18 <__malloc_unlock+0x8>)
 800aa12:	f7ff b994 	b.w	8009d3e <__retarget_lock_release_recursive>
 800aa16:	bf00      	nop
 800aa18:	20000c94 	.word	0x20000c94

0800aa1c <_realloc_r>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	4680      	mov	r8, r0
 800aa22:	4614      	mov	r4, r2
 800aa24:	460e      	mov	r6, r1
 800aa26:	b921      	cbnz	r1, 800aa32 <_realloc_r+0x16>
 800aa28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	f7ff ba59 	b.w	8009ee4 <_malloc_r>
 800aa32:	b92a      	cbnz	r2, 800aa40 <_realloc_r+0x24>
 800aa34:	f7ff f9ea 	bl	8009e0c <_free_r>
 800aa38:	4625      	mov	r5, r4
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa40:	f000 f82e 	bl	800aaa0 <_malloc_usable_size_r>
 800aa44:	4284      	cmp	r4, r0
 800aa46:	4607      	mov	r7, r0
 800aa48:	d802      	bhi.n	800aa50 <_realloc_r+0x34>
 800aa4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa4e:	d812      	bhi.n	800aa76 <_realloc_r+0x5a>
 800aa50:	4621      	mov	r1, r4
 800aa52:	4640      	mov	r0, r8
 800aa54:	f7ff fa46 	bl	8009ee4 <_malloc_r>
 800aa58:	4605      	mov	r5, r0
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d0ed      	beq.n	800aa3a <_realloc_r+0x1e>
 800aa5e:	42bc      	cmp	r4, r7
 800aa60:	4622      	mov	r2, r4
 800aa62:	4631      	mov	r1, r6
 800aa64:	bf28      	it	cs
 800aa66:	463a      	movcs	r2, r7
 800aa68:	f7ff ffa4 	bl	800a9b4 <memcpy>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7ff f9cc 	bl	8009e0c <_free_r>
 800aa74:	e7e1      	b.n	800aa3a <_realloc_r+0x1e>
 800aa76:	4635      	mov	r5, r6
 800aa78:	e7df      	b.n	800aa3a <_realloc_r+0x1e>
	...

0800aa7c <_read_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4d07      	ldr	r5, [pc, #28]	; (800aa9c <_read_r+0x20>)
 800aa80:	4604      	mov	r4, r0
 800aa82:	4608      	mov	r0, r1
 800aa84:	4611      	mov	r1, r2
 800aa86:	2200      	movs	r2, #0
 800aa88:	602a      	str	r2, [r5, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f7f8 fadc 	bl	8003048 <_read>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d102      	bne.n	800aa9a <_read_r+0x1e>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	b103      	cbz	r3, 800aa9a <_read_r+0x1e>
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	20000ca0 	.word	0x20000ca0

0800aaa0 <_malloc_usable_size_r>:
 800aaa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa4:	1f18      	subs	r0, r3, #4
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfbc      	itt	lt
 800aaaa:	580b      	ldrlt	r3, [r1, r0]
 800aaac:	18c0      	addlt	r0, r0, r3
 800aaae:	4770      	bx	lr

0800aab0 <_init>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	bf00      	nop
 800aab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab6:	bc08      	pop	{r3}
 800aab8:	469e      	mov	lr, r3
 800aaba:	4770      	bx	lr

0800aabc <_fini>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr
