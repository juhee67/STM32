
11.DOTMATRIX_STEPMOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f54  08008f54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f5c  08008f5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f5c  08008f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f60  08008f60  00018f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000ae8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b5c  20000b5c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dee5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037ee  00000000  00000000  0003df89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  00041778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001770  00000000  00000000  00043038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000046d1  00000000  00000000  000447a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dbef  00000000  00000000  00048e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9faa  00000000  00000000  00066a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160a12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007248  00000000  00000000  00160a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008dc8 	.word	0x08008dc8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08008dc8 	.word	0x08008dc8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_SYSTICK_Handler+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a03      	ldr	r2, [pc, #12]	; (80005ac <HAL_SYSTICK_Handler+0x18>)
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	20000ac4 	.word	0x20000ac4

080005b0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <__io_putchar+0x20>)
 80005c2:	f006 f89e 	bl	8006702 <HAL_UART_Transmit>

  return ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000524 	.word	0x20000524

080005d4 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d109      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005ee:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005f8:	6013      	str	r3, [r2, #0]
	}
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40014400 	.word	0x40014400
 800060c:	20000abc 	.word	0x20000abc
 8000610:	20000ac0 	.word	0x20000ac0

08000614 <HAL_GPIO_EXTI_Callback>:

// 1. move from Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c
// 2. enter here every external interrupt
volatile int ext_int_no = -1;	// for comparing with GPIO_Pin0
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	2b08      	cmp	r3, #8
 8000622:	d016      	beq.n	8000652 <HAL_GPIO_EXTI_Callback+0x3e>
 8000624:	2b08      	cmp	r3, #8
 8000626:	dc1d      	bgt.n	8000664 <HAL_GPIO_EXTI_Callback+0x50>
 8000628:	2b01      	cmp	r3, #1
 800062a:	d002      	beq.n	8000632 <HAL_GPIO_EXTI_Callback+0x1e>
 800062c:	2b04      	cmp	r3, #4
 800062e:	d008      	beq.n	8000642 <HAL_GPIO_EXTI_Callback+0x2e>
	case PHOTO2_Pin:
		ext_int_no = GPIO_Pin;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);   // LED3
		break;
	}
}
 8000630:	e018      	b.n	8000664 <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no = GPIO_Pin;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <HAL_GPIO_EXTI_Callback+0x58>)
 8000636:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LED1
 8000638:	2101      	movs	r1, #1
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <HAL_GPIO_EXTI_Callback+0x5c>)
 800063c:	f002 ffb9 	bl	80035b2 <HAL_GPIO_TogglePin>
		break;
 8000640:	e010      	b.n	8000664 <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no = GPIO_Pin;
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <HAL_GPIO_EXTI_Callback+0x58>)
 8000646:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);   // LED2
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <HAL_GPIO_EXTI_Callback+0x5c>)
 800064c:	f002 ffb1 	bl	80035b2 <HAL_GPIO_TogglePin>
		break;
 8000650:	e008      	b.n	8000664 <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no = GPIO_Pin;
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <HAL_GPIO_EXTI_Callback+0x58>)
 8000656:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);   // LED3
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <HAL_GPIO_EXTI_Callback+0x5c>)
 800065e:	f002 ffa8 	bl	80035b2 <HAL_GPIO_TogglePin>
		break;
 8000662:	bf00      	nop
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000000 	.word	0x20000000
 8000670:	40020400 	.word	0x40020400

08000674 <HAL_ADC_ConvCpltCallback>:


uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d109      	bne.n	800069a <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000688:	f001 fea8 	bl	80023dc <HAL_ADC_GetValue>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_ADC_ConvCpltCallback+0x38>)
 8000692:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000696:	f001 fcb3 	bl	8002000 <HAL_ADC_Start_IT>
	}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012000 	.word	0x40012000
 80006a8:	20000208 	.word	0x20000208
 80006ac:	20000ac8 	.word	0x20000ac8

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f001 fbca 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f87a 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 fc5a 	bl	8000f74 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 fbd6 	bl	8000e70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c4:	f000 fc28 	bl	8000f18 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80006c8:	f000 fbfc 	bl	8000ec4 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80006cc:	f000 fb88 	bl	8000de0 <MX_TIM10_Init>
  MX_TIM11_Init();
 80006d0:	f000 fbaa 	bl	8000e28 <MX_TIM11_Init>
  MX_TIM3_Init();
 80006d4:	f000 fa6c 	bl	8000bb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006d8:	f000 fabe 	bl	8000c58 <MX_TIM4_Init>
  MX_TIM2_Init();
 80006dc:	f000 fa0e 	bl	8000afc <MX_TIM2_Init>
  MX_RTC_Init();
 80006e0:	f000 f9b2 	bl	8000a48 <MX_RTC_Init>
  MX_TIM5_Init();
 80006e4:	f000 fb06 	bl	8000cf4 <MX_TIM5_Init>
  MX_I2C1_Init();
 80006e8:	f000 f96e 	bl	80009c8 <MX_I2C1_Init>
  MX_ADC1_Init();
 80006ec:	f000 f8cc 	bl	8000888 <MX_ADC1_Init>
  MX_ETH_Init();
 80006f0:	f000 f91c 	bl	800092c <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 80006f4:	2201      	movs	r2, #1
 80006f6:	491f      	ldr	r1, [pc, #124]	; (8000774 <main+0xc4>)
 80006f8:	481f      	ldr	r0, [pc, #124]	; (8000778 <main+0xc8>)
 80006fa:	f006 f894 	bl	8006826 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 80006fe:	2201      	movs	r2, #1
 8000700:	491e      	ldr	r1, [pc, #120]	; (800077c <main+0xcc>)
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <main+0xd0>)
 8000704:	f006 f88f 	bl	8006826 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000708:	481e      	ldr	r0, [pc, #120]	; (8000784 <main+0xd4>)
 800070a:	f004 fb3d 	bl	8004d88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 800070e:	481e      	ldr	r0, [pc, #120]	; (8000788 <main+0xd8>)
 8000710:	f004 fb3a 	bl	8004d88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000714:	2100      	movs	r1, #0
 8000716:	481d      	ldr	r0, [pc, #116]	; (800078c <main+0xdc>)
 8000718:	f004 fe24 	bl	8005364 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 800071c:	2100      	movs	r1, #0
 800071e:	481c      	ldr	r0, [pc, #112]	; (8000790 <main+0xe0>)
 8000720:	f004 fcba 	bl	8005098 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000724:	2100      	movs	r1, #0
 8000726:	481b      	ldr	r0, [pc, #108]	; (8000794 <main+0xe4>)
 8000728:	f004 fbee 	bl	8004f08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 800072c:	210c      	movs	r1, #12
 800072e:	481a      	ldr	r0, [pc, #104]	; (8000798 <main+0xe8>)
 8000730:	f004 fbea 	bl	8004f08 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);	// Start
 8000734:	4819      	ldr	r0, [pc, #100]	; (800079c <main+0xec>)
 8000736:	f001 fc63 	bl	8002000 <HAL_ADC_Start_IT>


//  DHT11_Init();
//  i2c_lcd_init();

  TIM10_10ms_counter=0;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <main+0xf0>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("cds sensor : %d\n", adcValue[0]);
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <main+0xf4>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <main+0xf8>)
 8000748:	f007 fb3a 	bl	8007dc0 <iprintf>
	  if (adcValue[0] < 2500 )
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0xf4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000754:	4293      	cmp	r3, r2
 8000756:	d804      	bhi.n	8000762 <main+0xb2>
	  {
		  //nucleo_stm32
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);   // LED1
 8000758:	2102      	movs	r1, #2
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0xfc>)
 800075c:	f002 ff29 	bl	80035b2 <HAL_GPIO_TogglePin>
 8000760:	e003      	b.n	800076a <main+0xba>
	  }
	  else
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LED1
 8000762:	2101      	movs	r1, #1
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <main+0xfc>)
 8000766:	f002 ff24 	bl	80035b2 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(10); 	//10ms
 800076a:	200a      	movs	r0, #10
 800076c:	f001 fbe0 	bl	8001f30 <HAL_Delay>
  {
 8000770:	e7e6      	b.n	8000740 <main+0x90>
 8000772:	bf00      	nop
 8000774:	20000ab8 	.word	0x20000ab8
 8000778:	20000524 	.word	0x20000524
 800077c:	20000ab9 	.word	0x20000ab9
 8000780:	20000568 	.word	0x20000568
 8000784:	20000494 	.word	0x20000494
 8000788:	200004dc 	.word	0x200004dc
 800078c:	200003bc 	.word	0x200003bc
 8000790:	20000404 	.word	0x20000404
 8000794:	20000374 	.word	0x20000374
 8000798:	2000044c 	.word	0x2000044c
 800079c:	20000208 	.word	0x20000208
 80007a0:	20000abc 	.word	0x20000abc
 80007a4:	20000ac8 	.word	0x20000ac8
 80007a8:	08008de0 	.word	0x08008de0
 80007ac:	40020400 	.word	0x40020400

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f007 faf6 	bl	8007db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a28      	ldr	r2, [pc, #160]	; (8000880 <SystemClock_Config+0xd0>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <SystemClock_Config+0xd0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <SystemClock_Config+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a22      	ldr	r2, [pc, #136]	; (8000884 <SystemClock_Config+0xd4>)
 80007fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <SystemClock_Config+0xd4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800080c:	2309      	movs	r3, #9
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000810:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000828:	23a8      	movs	r3, #168	; 0xa8
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000830:	2307      	movs	r3, #7
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f003 f9c9 	bl	8003bd0 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000844:	f000 fcde 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2105      	movs	r1, #5
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fc2a 	bl	80040c0 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000872:	f000 fcc7 	bl	8001204 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_ADC1_Init+0x98>)
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <MX_ADC1_Init+0x9c>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_ADC1_Init+0x98>)
 80008a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_ADC1_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_ADC1_Init+0x98>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_ADC1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_ADC1_Init+0x98>)
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_ADC1_Init+0xa0>)
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_ADC1_Init+0x98>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_ADC1_Init+0x98>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_ADC1_Init+0x98>)
 80008ea:	f001 fb45 	bl	8001f78 <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008f4:	f000 fc86 	bl	8001204 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000900:	2307      	movs	r3, #7
 8000902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_ADC1_Init+0x98>)
 800090a:	f001 fd89 	bl	8002420 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000914:	f000 fc76 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000208 	.word	0x20000208
 8000924:	40012000 	.word	0x40012000
 8000928:	0f000001 	.word	0x0f000001

0800092c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_ETH_Init+0x84>)
 8000932:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <MX_ETH_Init+0x88>)
 8000934:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_ETH_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_ETH_Init+0x8c>)
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_ETH_Init+0x8c>)
 8000944:	22e1      	movs	r2, #225	; 0xe1
 8000946:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_ETH_Init+0x8c>)
 800094a:	2200      	movs	r2, #0
 800094c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ETH_Init+0x8c>)
 8000950:	2200      	movs	r2, #0
 8000952:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_ETH_Init+0x8c>)
 8000956:	2200      	movs	r2, #0
 8000958:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_ETH_Init+0x84>)
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <MX_ETH_Init+0x8c>)
 800095e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_ETH_Init+0x84>)
 8000962:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000966:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_ETH_Init+0x84>)
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <MX_ETH_Init+0x90>)
 800096c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_ETH_Init+0x84>)
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_ETH_Init+0x94>)
 8000972:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_ETH_Init+0x84>)
 8000976:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800097a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ETH_Init+0x84>)
 800097e:	f002 f92b 	bl	8002bd8 <HAL_ETH_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 fc3c 	bl	8001204 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800098c:	2238      	movs	r2, #56	; 0x38
 800098e:	2100      	movs	r1, #0
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x98>)
 8000992:	f007 fa0d 	bl	8007db0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_ETH_Init+0x98>)
 8000998:	2221      	movs	r2, #33	; 0x21
 800099a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_ETH_Init+0x98>)
 800099e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009a2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_ETH_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000250 	.word	0x20000250
 80009b4:	40028000 	.word	0x40028000
 80009b8:	20000ad0 	.word	0x20000ad0
 80009bc:	20000168 	.word	0x20000168
 80009c0:	200000c8 	.word	0x200000c8
 80009c4:	20000090 	.word	0x20000090

080009c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <MX_I2C1_Init+0x78>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <MX_I2C1_Init+0x7c>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_I2C1_Init+0x74>)
 8000a06:	f002 fe07 	bl	8003618 <HAL_I2C_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a10:	f000 fbf8 	bl	8001204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4809      	ldr	r0, [pc, #36]	; (8000a3c <MX_I2C1_Init+0x74>)
 8000a18:	f002 ff42 	bl	80038a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a22:	f000 fbef 	bl	8001204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_I2C1_Init+0x74>)
 8000a2a:	f002 ff75 	bl	8003918 <HAL_I2CEx_ConfigDigitalFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 fbe6 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000300 	.word	0x20000300
 8000a40:	40005400 	.word	0x40005400
 8000a44:	000186a0 	.word	0x000186a0

08000a48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a62:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a6e:	227f      	movs	r2, #127	; 0x7f
 8000a70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a8a:	481a      	ldr	r0, [pc, #104]	; (8000af4 <MX_RTC_Init+0xac>)
 8000a8c:	f003 fef8 	bl	8004880 <HAL_RTC_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 fbb5 	bl	8001204 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000a9e:	2338      	movs	r3, #56	; 0x38
 8000aa0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480f      	ldr	r0, [pc, #60]	; (8000af4 <MX_RTC_Init+0xac>)
 8000ab6:	f003 ff59 	bl	800496c <HAL_RTC_SetTime>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f000 fba0 	bl	8001204 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000acc:	2316      	movs	r3, #22
 8000ace:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000ad0:	2323      	movs	r3, #35	; 0x23
 8000ad2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_RTC_Init+0xac>)
 8000adc:	f003 ffe0 	bl	8004aa0 <HAL_RTC_SetDate>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000ae6:	f000 fb8d 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000354 	.word	0x20000354
 8000af8:	40002800 	.word	0x40002800

08000afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1e:	4b23      	ldr	r3, [pc, #140]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b28:	f240 628f 	movw	r2, #1679	; 0x68f
 8000b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b48:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b4a:	f004 f98d 	bl	8004e68 <HAL_TIM_PWM_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f000 fb56 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b68:	f005 fcee 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b72:	f000 fb47 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b76:	2360      	movs	r3, #96	; 0x60
 8000b78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000b7a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000b7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000b90:	f004 feb4 	bl	80058fc <HAL_TIM_PWM_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000b9a:	f000 fb33 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM2_Init+0xb0>)
 8000ba0:	f000 fdda 	bl	8001758 <HAL_TIM_MspPostInit>

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000374 	.word	0x20000374

08000bb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <MX_TIM3_Init+0xa4>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000bd4:	2253      	movs	r2, #83	; 0x53
 8000bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bf2:	4817      	ldr	r0, [pc, #92]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000bf4:	f004 fb66 	bl	80052c4 <HAL_TIM_IC_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000bfe:	f000 fb01 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000c12:	f005 fc99 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c1c:	f000 faf2 	bl	8001204 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c20:	230a      	movs	r3, #10
 8000c22:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_TIM3_Init+0xa0>)
 8000c38:	f004 fdc4 	bl	80057c4 <HAL_TIM_IC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c42:	f000 fadf 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200003bc 	.word	0x200003bc
 8000c54:	40000400 	.word	0x40000400

08000c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM4_Init+0x94>)
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <MX_TIM4_Init+0x98>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM4_Init+0x94>)
 8000c7c:	f240 3247 	movw	r2, #839	; 0x347
 8000c80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM4_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM4_Init+0x94>)
 8000c8a:	2263      	movs	r2, #99	; 0x63
 8000c8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM4_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM4_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM4_Init+0x94>)
 8000c9c:	f004 f825 	bl	8004cea <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ca6:	f000 faad 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM4_Init+0x94>)
 8000cb8:	f004 fee2 	bl	8005a80 <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 fa9f 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM4_Init+0x94>)
 8000cd4:	f005 fc38 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000cde:	f000 fa91 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000404 	.word	0x20000404
 8000cf0:	40000800 	.word	0x40000800

08000cf4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	; 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d26:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <MX_TIM5_Init+0xe8>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d2c:	2233      	movs	r2, #51	; 0x33
 8000d2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d38:	f240 128f 	movw	r2, #399	; 0x18f
 8000d3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d4a:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d4c:	f003 ffcd 	bl	8004cea <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000d56:	f000 fa55 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d68:	f004 fe8a 	bl	8005a80 <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000d72:	f000 fa47 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d78:	f004 f876 	bl	8004e68 <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000d82:	f000 fa3f 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	4619      	mov	r1, r3
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000d96:	f005 fbd7 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000da0:	f000 fa30 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000da8:	23c7      	movs	r3, #199	; 0xc7
 8000daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	220c      	movs	r2, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000dbc:	f004 fd9e 	bl	80058fc <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000dc6:	f000 fa1d 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM5_Init+0xe4>)
 8000dcc:	f000 fcc4 	bl	8001758 <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3738      	adds	r7, #56	; 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000044c 	.word	0x2000044c
 8000ddc:	40000c00 	.word	0x40000c00

08000de0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_TIM10_Init+0x40>)
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <MX_TIM10_Init+0x44>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MX_TIM10_Init+0x40>)
 8000dec:	22a7      	movs	r2, #167	; 0xa7
 8000dee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_TIM10_Init+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_TIM10_Init+0x40>)
 8000df8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dfc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_TIM10_Init+0x40>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_TIM10_Init+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_TIM10_Init+0x40>)
 8000e0c:	f003 ff6d 	bl	8004cea <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000e16:	f000 f9f5 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000494 	.word	0x20000494
 8000e24:	40014400 	.word	0x40014400

08000e28 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_TIM11_Init+0x40>)
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <MX_TIM11_Init+0x44>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <MX_TIM11_Init+0x40>)
 8000e34:	22a7      	movs	r2, #167	; 0xa7
 8000e36:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_TIM11_Init+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_TIM11_Init+0x40>)
 8000e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e44:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_TIM11_Init+0x40>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_TIM11_Init+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_TIM11_Init+0x40>)
 8000e54:	f003 ff49 	bl	8004cea <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000e5e:	f000 f9d1 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200004dc 	.word	0x200004dc
 8000e6c:	40014800 	.word	0x40014800

08000e70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART3_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000ea8:	f005 fbde 	bl	8006668 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f000 f9a7 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000524 	.word	0x20000524
 8000ec0:	40004800 	.word	0x40004800

08000ec4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART6_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART6_UART_Init+0x4c>)
 8000efc:	f005 fbb4 	bl	8006668 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f000 f97d 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000568 	.word	0x20000568
 8000f14:	40011400 	.word	0x40011400

08000f18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5c:	f002 fd1b 	bl	8003996 <HAL_PCD_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f66:	f000 f94d 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200005ac 	.word	0x200005ac

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
 8000f8e:	4b95      	ldr	r3, [pc, #596]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b92      	ldr	r3, [pc, #584]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	623b      	str	r3, [r7, #32]
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	4b8e      	ldr	r3, [pc, #568]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a8d      	ldr	r2, [pc, #564]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	4b87      	ldr	r3, [pc, #540]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a86      	ldr	r2, [pc, #536]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b84      	ldr	r3, [pc, #528]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	4b80      	ldr	r3, [pc, #512]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a7f      	ldr	r2, [pc, #508]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b7d      	ldr	r3, [pc, #500]	; (80011e4 <MX_GPIO_Init+0x270>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b79      	ldr	r3, [pc, #484]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a78      	ldr	r2, [pc, #480]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b76      	ldr	r3, [pc, #472]	; (80011e4 <MX_GPIO_Init+0x270>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b72      	ldr	r3, [pc, #456]	; (80011e4 <MX_GPIO_Init+0x270>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a71      	ldr	r2, [pc, #452]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b6f      	ldr	r3, [pc, #444]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a6a      	ldr	r2, [pc, #424]	; (80011e4 <MX_GPIO_Init+0x270>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b64      	ldr	r3, [pc, #400]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a63      	ldr	r2, [pc, #396]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <MX_GPIO_Init+0x270>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001070:	485d      	ldr	r0, [pc, #372]	; (80011e8 <MX_GPIO_Init+0x274>)
 8001072:	f002 fa85 	bl	8003580 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2101      	movs	r1, #1
 800107a:	485c      	ldr	r0, [pc, #368]	; (80011ec <MX_GPIO_Init+0x278>)
 800107c:	f002 fa80 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f244 0181 	movw	r1, #16513	; 0x4081
 8001086:	485a      	ldr	r0, [pc, #360]	; (80011f0 <MX_GPIO_Init+0x27c>)
 8001088:	f002 fa7a 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4858      	ldr	r0, [pc, #352]	; (80011f4 <MX_GPIO_Init+0x280>)
 8001094:	f002 fa74 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001098:	2200      	movs	r2, #0
 800109a:	f647 01ff 	movw	r1, #30975	; 0x78ff
 800109e:	4856      	ldr	r0, [pc, #344]	; (80011f8 <MX_GPIO_Init+0x284>)
 80010a0:	f002 fa6e 	bl	8003580 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	4854      	ldr	r0, [pc, #336]	; (80011fc <MX_GPIO_Init+0x288>)
 80010aa:	f002 fa69 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 80010ae:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4848      	ldr	r0, [pc, #288]	; (80011e8 <MX_GPIO_Init+0x274>)
 80010c8:	f002 f8ae 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 80010cc:	f242 030d 	movw	r3, #8205	; 0x200d
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4847      	ldr	r0, [pc, #284]	; (8001200 <MX_GPIO_Init+0x28c>)
 80010e4:	f002 f8a0 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80010e8:	2301      	movs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	483b      	ldr	r0, [pc, #236]	; (80011ec <MX_GPIO_Init+0x278>)
 8001100:	f002 f892 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001104:	f244 0381 	movw	r3, #16513	; 0x4081
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4834      	ldr	r0, [pc, #208]	; (80011f0 <MX_GPIO_Init+0x27c>)
 800111e:	f002 f883 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	482e      	ldr	r0, [pc, #184]	; (80011f4 <MX_GPIO_Init+0x280>)
 800113c:	f002 f874 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001140:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4824      	ldr	r0, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x274>)
 8001156:	f002 f867 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800115a:	f647 03ff 	movw	r3, #30975	; 0x78ff
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <MX_GPIO_Init+0x284>)
 8001174:	f002 f858 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001178:	2340      	movs	r3, #64	; 0x40
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <MX_GPIO_Init+0x288>)
 8001190:	f002 f84a 	bl	8003228 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_GPIO_Init+0x288>)
 80011a8:	f002 f83e 	bl	8003228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2006      	movs	r0, #6
 80011b2:	f001 fc48 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011b6:	2006      	movs	r0, #6
 80011b8:	f001 fc61 	bl	8002a7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2008      	movs	r0, #8
 80011c2:	f001 fc40 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011c6:	2008      	movs	r0, #8
 80011c8:	f001 fc59 	bl	8002a7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2009      	movs	r0, #9
 80011d2:	f001 fc38 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011d6:	2009      	movs	r0, #9
 80011d8:	f001 fc51 	bl	8002a7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011dc:	bf00      	nop
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021800 	.word	0x40021800
 8001200:	40020800 	.word	0x40020800

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_MspInit+0x4c>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x4c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_ADC_MspInit+0x8c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12f      	bne.n	80012e2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_ADC_MspInit+0x90>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_ADC_MspInit+0x90>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_ADC_MspInit+0x90>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_ADC_MspInit+0x90>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_ADC_MspInit+0x90>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_ADC_MspInit+0x90>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ba:	2310      	movs	r3, #16
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_ADC_MspInit+0x94>)
 80012ce:	f001 ffab 	bl	8003228 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2012      	movs	r0, #18
 80012d8:	f001 fbb5 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012dc:	2012      	movs	r0, #18
 80012de:	f001 fbce 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012000 	.word	0x40012000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	; 0x38
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a55      	ldr	r2, [pc, #340]	; (800146c <HAL_ETH_MspInit+0x174>)
 8001316:	4293      	cmp	r3, r2
 8001318:	f040 80a4 	bne.w	8001464 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800132a:	6313      	str	r3, [r2, #48]	; 0x30
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_ETH_MspInit+0x178>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001334:	623b      	str	r3, [r7, #32]
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <HAL_ETH_MspInit+0x178>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a4b      	ldr	r2, [pc, #300]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b49      	ldr	r3, [pc, #292]	; (8001470 <HAL_ETH_MspInit+0x178>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <HAL_ETH_MspInit+0x178>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a44      	ldr	r2, [pc, #272]	; (8001470 <HAL_ETH_MspInit+0x178>)
 800135e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <HAL_ETH_MspInit+0x178>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a36      	ldr	r2, [pc, #216]	; (8001470 <HAL_ETH_MspInit+0x178>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_ETH_MspInit+0x178>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_ETH_MspInit+0x178>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <HAL_ETH_MspInit+0x178>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_ETH_MspInit+0x178>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_ETH_MspInit+0x178>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_ETH_MspInit+0x178>)
 80013ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_ETH_MspInit+0x178>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013e0:	2332      	movs	r3, #50	; 0x32
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f0:	230b      	movs	r3, #11
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	481e      	ldr	r0, [pc, #120]	; (8001474 <HAL_ETH_MspInit+0x17c>)
 80013fc:	f001 ff14 	bl	8003228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001400:	2386      	movs	r3, #134	; 0x86
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001410:	230b      	movs	r3, #11
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	4817      	ldr	r0, [pc, #92]	; (8001478 <HAL_ETH_MspInit+0x180>)
 800141c:	f001 ff04 	bl	8003228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001432:	230b      	movs	r3, #11
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <HAL_ETH_MspInit+0x184>)
 800143e:	f001 fef3 	bl	8003228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001442:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001454:	230b      	movs	r3, #11
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	4808      	ldr	r0, [pc, #32]	; (8001480 <HAL_ETH_MspInit+0x188>)
 8001460:	f001 fee2 	bl	8003228 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40028000 	.word	0x40028000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020800 	.word	0x40020800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40021800 	.word	0x40021800

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_I2C_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12c      	bne.n	8001500 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d4:	2304      	movs	r3, #4
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_I2C_MspInit+0x8c>)
 80014e0:	f001 fea2 	bl	8003228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40005400 	.word	0x40005400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400

08001514 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2230      	movs	r2, #48	; 0x30
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f006 fc43 	bl	8007db0 <memset>
  if(hrtc->Instance==RTC)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_RTC_MspInit+0x4c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d111      	bne.n	8001558 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001534:	2320      	movs	r3, #32
 8001536:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4618      	mov	r0, r3
 8001544:	f002 ffdc 	bl	8004500 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800154e:	f7ff fe59 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <HAL_RTC_MspInit+0x50>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3738      	adds	r7, #56	; 0x38
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40002800 	.word	0x40002800
 8001564:	42470e3c 	.word	0x42470e3c

08001568 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001578:	d115      	bne.n	80015a6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_TIM_PWM_MspInit+0x48>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_TIM_PWM_MspInit+0x48>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_TIM_PWM_MspInit+0x48>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	201c      	movs	r0, #28
 800159c:	f001 fa53 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a0:	201c      	movs	r0, #28
 80015a2:	f001 fa6c 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_TIM_IC_MspInit+0x94>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d133      	bne.n	800163e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_TIM_IC_MspInit+0x98>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_TIM_IC_MspInit+0x98>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_TIM_IC_MspInit+0x98>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_TIM_IC_MspInit+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_TIM_IC_MspInit+0x98>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_TIM_IC_MspInit+0x98>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800161e:	2302      	movs	r3, #2
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <HAL_TIM_IC_MspInit+0x9c>)
 800162a:	f001 fdfd 	bl	8003228 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201d      	movs	r0, #29
 8001634:	f001 fa07 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001638:	201d      	movs	r0, #29
 800163a:	f001 fa20 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40000400 	.word	0x40000400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a38      	ldr	r2, [pc, #224]	; (8001744 <HAL_TIM_Base_MspInit+0xf0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d116      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a36      	ldr	r2, [pc, #216]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201e      	movs	r0, #30
 8001688:	f001 f9dd 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800168c:	201e      	movs	r0, #30
 800168e:	f001 f9f6 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001692:	e052      	b.n	800173a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2c      	ldr	r2, [pc, #176]	; (800174c <HAL_TIM_Base_MspInit+0xf8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d116      	bne.n	80016cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2032      	movs	r0, #50	; 0x32
 80016c0:	f001 f9c1 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016c4:	2032      	movs	r0, #50	; 0x32
 80016c6:	f001 f9da 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 80016ca:	e036      	b.n	800173a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_TIM_Base_MspInit+0xfc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d116      	bne.n	8001704 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2019      	movs	r0, #25
 80016f8:	f001 f9a5 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016fc:	2019      	movs	r0, #25
 80016fe:	f001 f9be 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001702:	e01a      	b.n	800173a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_TIM_Base_MspInit+0x100>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d115      	bne.n	800173a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_TIM_Base_MspInit+0xf4>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	201a      	movs	r0, #26
 8001730:	f001 f989 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001734:	201a      	movs	r0, #26
 8001736:	f001 f9a2 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40000800 	.word	0x40000800
 8001748:	40023800 	.word	0x40023800
 800174c:	40000c00 	.word	0x40000c00
 8001750:	40014400 	.word	0x40014400
 8001754:	40014800 	.word	0x40014800

08001758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001778:	d11e      	bne.n	80017b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <HAL_TIM_MspPostInit+0xb0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a21      	ldr	r2, [pc, #132]	; (8001808 <HAL_TIM_MspPostInit+0xb0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_TIM_MspPostInit+0xb0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001796:	2320      	movs	r3, #32
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017a6:	2301      	movs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4816      	ldr	r0, [pc, #88]	; (800180c <HAL_TIM_MspPostInit+0xb4>)
 80017b2:	f001 fd39 	bl	8003228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80017b6:	e022      	b.n	80017fe <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_TIM_MspPostInit+0xb8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d11d      	bne.n	80017fe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_TIM_MspPostInit+0xb0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_TIM_MspPostInit+0xb0>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_TIM_MspPostInit+0xb0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017de:	2308      	movs	r3, #8
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017ee:	2302      	movs	r3, #2
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <HAL_TIM_MspPostInit+0xb4>)
 80017fa:	f001 fd15 	bl	8003228 <HAL_GPIO_Init>
}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40000c00 	.word	0x40000c00

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3a      	ldr	r2, [pc, #232]	; (800191c <HAL_UART_MspInit+0x108>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d135      	bne.n	80018a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_UART_MspInit+0x10c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_UART_MspInit+0x10c>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_UART_MspInit+0x10c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_UART_MspInit+0x10c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a31      	ldr	r2, [pc, #196]	; (8001920 <HAL_UART_MspInit+0x10c>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_UART_MspInit+0x10c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800186e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001880:	2307      	movs	r3, #7
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4826      	ldr	r0, [pc, #152]	; (8001924 <HAL_UART_MspInit+0x110>)
 800188c:	f001 fccc 	bl	8003228 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2027      	movs	r0, #39	; 0x27
 8001896:	f001 f8d6 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800189a:	2027      	movs	r0, #39	; 0x27
 800189c:	f001 f8ef 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018a0:	e038      	b.n	8001914 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a20      	ldr	r2, [pc, #128]	; (8001928 <HAL_UART_MspInit+0x114>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d133      	bne.n	8001914 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_UART_MspInit+0x10c>)
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <HAL_UART_MspInit+0x10c>)
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	6453      	str	r3, [r2, #68]	; 0x44
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_UART_MspInit+0x10c>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_UART_MspInit+0x10c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <HAL_UART_MspInit+0x10c>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0x10c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e4:	23c0      	movs	r3, #192	; 0xc0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018f4:	2308      	movs	r3, #8
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	480b      	ldr	r0, [pc, #44]	; (800192c <HAL_UART_MspInit+0x118>)
 8001900:	f001 fc92 	bl	8003228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2047      	movs	r0, #71	; 0x47
 800190a:	f001 f89c 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800190e:	2047      	movs	r0, #71	; 0x47
 8001910:	f001 f8b5 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	; 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40004800 	.word	0x40004800
 8001920:	40023800 	.word	0x40023800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40011400 	.word	0x40011400
 800192c:	40020800 	.word	0x40020800

08001930 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001950:	d13f      	bne.n	80019d2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_PCD_MspInit+0xac>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_PCD_MspInit+0xac>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_PCD_MspInit+0xac>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800196e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001980:	230a      	movs	r3, #10
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4815      	ldr	r0, [pc, #84]	; (80019e0 <HAL_PCD_MspInit+0xb0>)
 800198c:	f001 fc4c 	bl	8003228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	480e      	ldr	r0, [pc, #56]	; (80019e0 <HAL_PCD_MspInit+0xb0>)
 80019a6:	f001 fc3f 	bl	8003228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_PCD_MspInit+0xac>)
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_PCD_MspInit+0xac>)
 80019b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b4:	6353      	str	r3, [r2, #52]	; 0x34
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_PCD_MspInit+0xac>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_PCD_MspInit+0xac>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_PCD_MspInit+0xac>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 fa5e 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8001a34:	f7fe fdae 	bl	8000594 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f001 fdd1 	bl	80035e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 8001a4e:	2004      	movs	r0, #4
 8001a50:	f001 fdca 	bl	80035e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f001 fdc3 	bl	80035e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <ADC_IRQHandler+0x10>)
 8001a6e:	f000 fba5 	bl	80021bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000208 	.word	0x20000208

08001a7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a82:	f003 fd97 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000494 	.word	0x20000494

08001a90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a96:	f003 fd8d 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200004dc 	.word	0x200004dc

08001aa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM2_IRQHandler+0x10>)
 8001aaa:	f003 fd83 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000374 	.word	0x20000374

08001ab8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM3_IRQHandler+0x10>)
 8001abe:	f003 fd79 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003bc 	.word	0x200003bc

08001acc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM4_IRQHandler+0x10>)
 8001ad2:	f003 fd6f 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000404 	.word	0x20000404

08001ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <USART3_IRQHandler+0x10>)
 8001ae6:	f004 fecf 	bl	8006888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000524 	.word	0x20000524

08001af4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <TIM5_IRQHandler+0x10>)
 8001afa:	f003 fd5b 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000044c 	.word	0x2000044c

08001b08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <USART6_IRQHandler+0x10>)
 8001b0e:	f004 febb 	bl	8006888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000568 	.word	0x20000568

08001b1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e00a      	b.n	8001b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b2e:	f3af 8000 	nop.w
 8001b32:	4601      	mov	r1, r0
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	b2ca      	uxtb	r2, r1
 8001b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf0      	blt.n	8001b2e <_read+0x12>
  }

  return len;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e009      	b.n	8001b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fd1d 	bl	80005b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf1      	blt.n	8001b68 <_write+0x12>
  }
  return len;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_close>:

int _close(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_isatty>:

int _isatty(int file)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f006 f898 	bl	8007d5c <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20030000 	.word	0x20030000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	20000ad8 	.word	0x20000ad8
 8001c60:	20000b60 	.word	0x20000b60

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <HAL_UART_RxCpltCallback+0xd4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d12c      	bne.n	8001cf2 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001c98:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_UART_RxCpltCallback+0xd8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b27      	cmp	r3, #39	; 0x27
 8001c9e:	dc1d      	bgt.n	8001cdc <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <HAL_UART_RxCpltCallback+0xdc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b0a      	cmp	r3, #10
 8001ca6:	d003      	beq.n	8001cb0 <HAL_UART_RxCpltCallback+0x28>
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_UART_RxCpltCallback+0xdc>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b0d      	cmp	r3, #13
 8001cae:	d10b      	bne.n	8001cc8 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_UART_RxCpltCallback+0xd8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <HAL_UART_RxCpltCallback+0xe0>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_UART_RxCpltCallback+0xe4>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_UART_RxCpltCallback+0xd8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e00f      	b.n	8001ce8 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_UART_RxCpltCallback+0xd8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	4924      	ldr	r1, [pc, #144]	; (8001d60 <HAL_UART_RxCpltCallback+0xd8>)
 8001cd0:	600a      	str	r2, [r1, #0]
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <HAL_UART_RxCpltCallback+0xdc>)
 8001cd4:	7811      	ldrb	r1, [r2, #0]
 8001cd6:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <HAL_UART_RxCpltCallback+0xe0>)
 8001cd8:	54d1      	strb	r1, [r2, r3]
 8001cda:	e005      	b.n	8001ce8 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_UART_RxCpltCallback+0xd8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001ce2:	4823      	ldr	r0, [pc, #140]	; (8001d70 <HAL_UART_RxCpltCallback+0xe8>)
 8001ce4:	f006 f8f2 	bl	8007ecc <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	491e      	ldr	r1, [pc, #120]	; (8001d64 <HAL_UART_RxCpltCallback+0xdc>)
 8001cec:	481b      	ldr	r0, [pc, #108]	; (8001d5c <HAL_UART_RxCpltCallback+0xd4>)
 8001cee:	f004 fd9a 	bl	8006826 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_UART_RxCpltCallback+0xec>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d12c      	bne.n	8001d54 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HAL_UART_RxCpltCallback+0xf0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b27      	cmp	r3, #39	; 0x27
 8001d00:	dc1d      	bgt.n	8001d3e <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_UART_RxCpltCallback+0xf4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b0a      	cmp	r3, #10
 8001d08:	d003      	beq.n	8001d12 <HAL_UART_RxCpltCallback+0x8a>
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_UART_RxCpltCallback+0xf4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b0d      	cmp	r3, #13
 8001d10:	d10b      	bne.n	8001d2a <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_UART_RxCpltCallback+0xd8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_UART_RxCpltCallback+0xf8>)
 8001d18:	2100      	movs	r1, #0
 8001d1a:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_UART_RxCpltCallback+0xfc>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_UART_RxCpltCallback+0xf0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e00f      	b.n	8001d4a <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_UART_RxCpltCallback+0xf0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4911      	ldr	r1, [pc, #68]	; (8001d78 <HAL_UART_RxCpltCallback+0xf0>)
 8001d32:	600a      	str	r2, [r1, #0]
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_UART_RxCpltCallback+0xf4>)
 8001d36:	7811      	ldrb	r1, [r2, #0]
 8001d38:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_UART_RxCpltCallback+0xf8>)
 8001d3a:	54d1      	strb	r1, [r2, r3]
 8001d3c:	e005      	b.n	8001d4a <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_UART_RxCpltCallback+0xf0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <HAL_UART_RxCpltCallback+0x100>)
 8001d46:	f006 f8c1 	bl	8007ecc <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	490b      	ldr	r1, [pc, #44]	; (8001d7c <HAL_UART_RxCpltCallback+0xf4>)
 8001d4e:	4809      	ldr	r0, [pc, #36]	; (8001d74 <HAL_UART_RxCpltCallback+0xec>)
 8001d50:	f004 fd69 	bl	8006826 <HAL_UART_Receive_IT>
	}
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000524 	.word	0x20000524
 8001d60:	20000b04 	.word	0x20000b04
 8001d64:	20000ab8 	.word	0x20000ab8
 8001d68:	20000adc 	.word	0x20000adc
 8001d6c:	20000b08 	.word	0x20000b08
 8001d70:	08008df4 	.word	0x08008df4
 8001d74:	20000568 	.word	0x20000568
 8001d78:	20000b34 	.word	0x20000b34
 8001d7c:	20000ab9 	.word	0x20000ab9
 8001d80:	20000b0c 	.word	0x20000b0c
 8001d84:	20000b38 	.word	0x20000b38
 8001d88:	08008e0c 	.word	0x08008e0c

08001d8c <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d11f      	bne.n	8001dde <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x60>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x60>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001db6:	e012      	b.n	8001dde <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x60>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10d      	bne.n	8001dde <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x60>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001dc8:	2100      	movs	r1, #0
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f003 ff20 	bl	8005c10 <HAL_TIM_ReadCapturedValue>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001dd6:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40000400 	.word	0x40000400
 8001dec:	20000b44 	.word	0x20000b44
 8001df0:	20000b3c 	.word	0x20000b3c
 8001df4:	20000b40 	.word	0x20000b40

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfe:	490e      	ldr	r1, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e14:	4c0b      	ldr	r4, [pc, #44]	; (8001e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e22:	f7ff ff1f 	bl	8001c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f005 ff9f 	bl	8007d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7fe fc41 	bl	80006b0 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e3c:	08008f64 	.word	0x08008f64
  ldr r2, =_sbss
 8001e40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e44:	20000b5c 	.word	0x20000b5c

08001e48 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <CAN1_RX0_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 fddb 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff f9c6 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fdf3 	bl	8002a9a <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 fdbb 	bl	8002a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	2000000c 	.word	0x2000000c
 8001eec:	20000008 	.word	0x20000008

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000000c 	.word	0x2000000c
 8001f14:	20000b48 	.word	0x20000b48

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000b48 	.word	0x20000b48

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000000c 	.word	0x2000000c

08001f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e033      	b.n	8001ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff f962 	bl	8001260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fbe:	f023 0302 	bic.w	r3, r3, #2
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fb5a 	bl	8002684 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe6:	e001      	b.n	8001fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Start_IT+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e0bd      	b.n	8002196 <HAL_ADC_Start_IT+0x196>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d018      	beq.n	8002062 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_ADC_Start_IT+0x1a4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_ADC_Start_IT+0x1a8>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9a      	lsrs	r2, r3, #18
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 8085 	bne.w	800217c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f023 0206 	bic.w	r2, r3, #6
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
 80020be:	e002      	b.n	80020c6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_ADC_Start_IT+0x1ac>)
 80020d0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020da:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ea:	f043 0320 	orr.w	r3, r3, #32
 80020ee:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12a      	bne.n	8002152 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <HAL_ADC_Start_IT+0x1b0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d015      	beq.n	8002132 <HAL_ADC_Start_IT+0x132>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <HAL_ADC_Start_IT+0x1b4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d105      	bne.n	800211c <HAL_ADC_Start_IT+0x11c>
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_ADC_Start_IT+0x1ac>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <HAL_ADC_Start_IT+0x1b8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d136      	bne.n	8002194 <HAL_ADC_Start_IT+0x194>
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_ADC_Start_IT+0x1ac>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d130      	bne.n	8002194 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d129      	bne.n	8002194 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	e020      	b.n	8002194 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_ADC_Start_IT+0x1b0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d11b      	bne.n	8002194 <HAL_ADC_Start_IT+0x194>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d114      	bne.n	8002194 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	e00b      	b.n	8002194 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0210 	orr.w	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000004 	.word	0x20000004
 80021a8:	431bde83 	.word	0x431bde83
 80021ac:	40012300 	.word	0x40012300
 80021b0:	40012000 	.word	0x40012000
 80021b4:	40012100 	.word	0x40012100
 80021b8:	40012200 	.word	0x40012200

080021bc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d049      	beq.n	8002286 <HAL_ADC_IRQHandler+0xca>
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d046      	beq.n	8002286 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12b      	bne.n	8002276 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d127      	bne.n	8002276 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800223e:	2b00      	cmp	r3, #0
 8002240:	d119      	bne.n	8002276 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0220 	bic.w	r2, r2, #32
 8002250:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe f9fc 	bl	8000674 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0212 	mvn.w	r2, #18
 8002284:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d057      	beq.n	800234c <HAL_ADC_IRQHandler+0x190>
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d054      	beq.n	800234c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d139      	bne.n	800233c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12b      	bne.n	800233c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d124      	bne.n	800233c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11d      	bne.n	800233c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d119      	bne.n	800233c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002316:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fa9d 	bl	800287c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f06f 020c 	mvn.w	r2, #12
 800234a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d017      	beq.n	8002392 <HAL_ADC_IRQHandler+0x1d6>
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d014      	beq.n	8002392 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10d      	bne.n	8002392 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f837 	bl	80023f6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0201 	mvn.w	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d015      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x218>
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d012      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f043 0202 	orr.w	r2, r3, #2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f06f 0220 	mvn.w	r2, #32
 80023c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f820 	bl	800240a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0220 	mvn.w	r2, #32
 80023d2:	601a      	str	r2, [r3, #0]
  }
}
 80023d4:	bf00      	nop
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1c>
 8002438:	2302      	movs	r3, #2
 800243a:	e113      	b.n	8002664 <HAL_ADC_ConfigChannel+0x244>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b09      	cmp	r3, #9
 800244a:	d925      	bls.n	8002498 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68d9      	ldr	r1, [r3, #12]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	3b1e      	subs	r3, #30
 8002462:	2207      	movs	r2, #7
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43da      	mvns	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	400a      	ands	r2, r1
 8002470:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68d9      	ldr	r1, [r3, #12]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	4603      	mov	r3, r0
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4403      	add	r3, r0
 800248a:	3b1e      	subs	r3, #30
 800248c:	409a      	lsls	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	e022      	b.n	80024de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	2207      	movs	r2, #7
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	400a      	ands	r2, r1
 80024ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6919      	ldr	r1, [r3, #16]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4403      	add	r3, r0
 80024d4:	409a      	lsls	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d824      	bhi.n	8002530 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b05      	subs	r3, #5
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b05      	subs	r3, #5
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	635a      	str	r2, [r3, #52]	; 0x34
 800252e:	e04c      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b0c      	cmp	r3, #12
 8002536:	d824      	bhi.n	8002582 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3b23      	subs	r3, #35	; 0x23
 800254a:	221f      	movs	r2, #31
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43da      	mvns	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	400a      	ands	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	4618      	mov	r0, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b23      	subs	r3, #35	; 0x23
 8002574:	fa00 f203 	lsl.w	r2, r0, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
 8002580:	e023      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b41      	subs	r3, #65	; 0x41
 8002594:	221f      	movs	r2, #31
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b41      	subs	r3, #65	; 0x41
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ca:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_ADC_ConfigChannel+0x250>)
 80025cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <HAL_ADC_ConfigChannel+0x254>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10f      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1d8>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b12      	cmp	r3, #18
 80025de:	d10b      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <HAL_ADC_ConfigChannel+0x254>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d12b      	bne.n	800265a <HAL_ADC_ConfigChannel+0x23a>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <HAL_ADC_ConfigChannel+0x258>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <HAL_ADC_ConfigChannel+0x1f4>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b11      	cmp	r3, #17
 8002612:	d122      	bne.n	800265a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_ADC_ConfigChannel+0x258>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d111      	bne.n	800265a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_ADC_ConfigChannel+0x25c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <HAL_ADC_ConfigChannel+0x260>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	0c9a      	lsrs	r2, r3, #18
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800264c:	e002      	b.n	8002654 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3b01      	subs	r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	40012300 	.word	0x40012300
 8002674:	40012000 	.word	0x40012000
 8002678:	10000012 	.word	0x10000012
 800267c:	20000004 	.word	0x20000004
 8002680:	431bde83 	.word	0x431bde83

08002684 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800268c:	4b79      	ldr	r3, [pc, #484]	; (8002874 <ADC_Init+0x1f0>)
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	021a      	lsls	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	4a58      	ldr	r2, [pc, #352]	; (8002878 <ADC_Init+0x1f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800272a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6899      	ldr	r1, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800274c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	e00f      	b.n	8002782 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002780:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0202 	bic.w	r2, r2, #2
 8002790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7e1b      	ldrb	r3, [r3, #24]
 800279c:	005a      	lsls	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01b      	beq.n	80027e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	3b01      	subs	r3, #1
 80027dc:	035a      	lsls	r2, r3, #13
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	e007      	b.n	80027f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	3b01      	subs	r3, #1
 8002814:	051a      	lsls	r2, r3, #20
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800282c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800283a:	025a      	lsls	r2, r3, #9
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	029a      	lsls	r2, r3, #10
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40012300 	.word	0x40012300
 8002878:	0f000001 	.word	0x0f000001

0800287c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff29 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff3e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff8e 	bl	8002984 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5d 	bl	8002930 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff31 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff fa2a 	bl	8001f18 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d008      	beq.n	8002ae4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e052      	b.n	8002b8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0216 	bic.w	r2, r2, #22
 8002af2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_DMA_Abort+0x62>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0208 	bic.w	r2, r2, #8
 8002b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b34:	e013      	b.n	8002b5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b36:	f7ff f9ef 	bl	8001f18 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d90c      	bls.n	8002b5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e015      	b.n	8002b8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1e4      	bne.n	8002b36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	223f      	movs	r2, #63	; 0x3f
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e00c      	b.n	8002bca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2205      	movs	r2, #5
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06c      	b.n	8002cc4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2223      	movs	r2, #35	; 0x23
 8002bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fb7b 	bl	80012f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_ETH_Init+0xf4>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a30      	ldr	r2, [pc, #192]	; (8002ccc <HAL_ETH_Init+0xf4>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_ETH_Init+0xf4>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_ETH_Init+0xf8>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <HAL_ETH_Init+0xf8>)
 8002c24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c28:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_ETH_Init+0xf8>)
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4927      	ldr	r1, [pc, #156]	; (8002cd0 <HAL_ETH_Init+0xf8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_ETH_Init+0xf8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c54:	f7ff f960 	bl	8001f18 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c5a:	e011      	b.n	8002c80 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c5c:	f7ff f95c 	bl	8001f18 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c6a:	d909      	bls.n	8002c80 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	22e0      	movs	r2, #224	; 0xe0
 8002c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e021      	b.n	8002cc4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e4      	bne.n	8002c5c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f958 	bl	8002f48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f9ff 	bl	800309c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa55 	bl	800314e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9bd 	bl	800302c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40013800 	.word	0x40013800

08002cd4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4b51      	ldr	r3, [pc, #324]	; (8002e30 <ETH_SetMACConfig+0x15c>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	7c1b      	ldrb	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <ETH_SetMACConfig+0x28>
 8002cf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cfa:	e000      	b.n	8002cfe <ETH_SetMACConfig+0x2a>
 8002cfc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	7c5b      	ldrb	r3, [r3, #17]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <ETH_SetMACConfig+0x38>
 8002d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d0a:	e000      	b.n	8002d0e <ETH_SetMACConfig+0x3a>
 8002d0c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d0e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	7fdb      	ldrb	r3, [r3, #31]
 8002d1a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d1c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	7f92      	ldrb	r2, [r2, #30]
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	d102      	bne.n	8002d32 <ETH_SetMACConfig+0x5e>
 8002d2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d30:	e000      	b.n	8002d34 <ETH_SetMACConfig+0x60>
 8002d32:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	7f1b      	ldrb	r3, [r3, #28]
 8002d3a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d3c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d102      	bne.n	8002d5c <ETH_SetMACConfig+0x88>
 8002d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5a:	e000      	b.n	8002d5e <ETH_SetMACConfig+0x8a>
 8002d5c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7bdb      	ldrb	r3, [r3, #15]
 8002d64:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d66:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d74:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d76:	4313      	orrs	r3, r2
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7ff f8ce 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002daa:	4013      	ands	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002dba:	2a00      	cmp	r2, #0
 8002dbc:	d101      	bne.n	8002dc2 <ETH_SetMACConfig+0xee>
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	e000      	b.n	8002dc4 <ETH_SetMACConfig+0xf0>
 8002dc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dc4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002dd2:	2a01      	cmp	r2, #1
 8002dd4:	d101      	bne.n	8002dda <ETH_SetMACConfig+0x106>
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	e000      	b.n	8002ddc <ETH_SetMACConfig+0x108>
 8002dda:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ddc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002de4:	2a01      	cmp	r2, #1
 8002de6:	d101      	bne.n	8002dec <ETH_SetMACConfig+0x118>
 8002de8:	2204      	movs	r2, #4
 8002dea:	e000      	b.n	8002dee <ETH_SetMACConfig+0x11a>
 8002dec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002df6:	2a01      	cmp	r2, #1
 8002df8:	d101      	bne.n	8002dfe <ETH_SetMACConfig+0x12a>
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	e000      	b.n	8002e00 <ETH_SetMACConfig+0x12c>
 8002dfe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e00:	4313      	orrs	r3, r2
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7ff f889 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	ff20810f 	.word	0xff20810f

08002e34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <ETH_SetDMAConfig+0x110>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7b1b      	ldrb	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <ETH_SetDMAConfig+0x2c>
 8002e5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e5e:	e000      	b.n	8002e62 <ETH_SetDMAConfig+0x2e>
 8002e60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	7b5b      	ldrb	r3, [r3, #13]
 8002e66:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e68:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	7f52      	ldrb	r2, [r2, #29]
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d102      	bne.n	8002e78 <ETH_SetDMAConfig+0x44>
 8002e72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e76:	e000      	b.n	8002e7a <ETH_SetDMAConfig+0x46>
 8002e78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	7b9b      	ldrb	r3, [r3, #14]
 8002e80:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e82:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	7f1b      	ldrb	r3, [r3, #28]
 8002e8e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	7f9b      	ldrb	r3, [r3, #30]
 8002e96:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e98:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f7ff f830 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	791b      	ldrb	r3, [r3, #4]
 8002ee2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ee8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002eee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ef4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002efc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002efe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f7ff f801 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6013      	str	r3, [r2, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	f8de3f23 	.word	0xf8de3f23

08002f48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0a6      	sub	sp, #152	; 0x98
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f84:	2300      	movs	r3, #0
 8002f86:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fe86 	bl	8002cd4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ffc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003002:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003008:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003010:	2300      	movs	r3, #0
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ff08 	bl	8002e34 <ETH_SetDMAConfig>
}
 8003024:	bf00      	nop
 8003026:	3798      	adds	r7, #152	; 0x98
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3305      	adds	r3, #5
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	3204      	adds	r2, #4
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <ETH_MACAddressConfig+0x68>)
 800304e:	4413      	add	r3, r2
 8003050:	461a      	mov	r2, r3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3303      	adds	r3, #3
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	061a      	lsls	r2, r3, #24
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3302      	adds	r3, #2
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3301      	adds	r3, #1
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	4313      	orrs	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <ETH_MACAddressConfig+0x6c>)
 800307e:	4413      	add	r3, r2
 8003080:	461a      	mov	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	6013      	str	r3, [r2, #0]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40028040 	.word	0x40028040
 8003098:	40028044 	.word	0x40028044

0800309c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e03e      	b.n	8003128 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68d9      	ldr	r1, [r3, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2200      	movs	r2, #0
 80030c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	3206      	adds	r2, #6
 80030dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d80c      	bhi.n	800310c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68d9      	ldr	r1, [r3, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	e004      	b.n	8003116 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d9bd      	bls.n	80030aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003140:	611a      	str	r2, [r3, #16]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e046      	b.n	80031ea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6919      	ldr	r1, [r3, #16]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003198:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80031a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	3212      	adds	r2, #18
 80031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d80c      	bhi.n	80031da <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6919      	ldr	r1, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	e004      	b.n	80031e4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d9b5      	bls.n	800315c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321a:	60da      	str	r2, [r3, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e177      	b.n	8003534 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	f040 8166 	bne.w	800352e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d005      	beq.n	800327a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003276:	2b02      	cmp	r3, #2
 8003278:	d130      	bne.n	80032dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b0:	2201      	movs	r2, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0201 	and.w	r2, r3, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d017      	beq.n	8003318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d123      	bne.n	800336c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	08da      	lsrs	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3208      	adds	r2, #8
 800332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	220f      	movs	r2, #15
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0203 	and.w	r2, r3, #3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80c0 	beq.w	800352e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_GPIO_Init+0x324>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_GPIO_Init+0x324>)
 80033b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033bc:	6453      	str	r3, [r2, #68]	; 0x44
 80033be:	4b63      	ldr	r3, [pc, #396]	; (800354c <HAL_GPIO_Init+0x324>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ca:	4a61      	ldr	r2, [pc, #388]	; (8003550 <HAL_GPIO_Init+0x328>)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	3302      	adds	r3, #2
 80033d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	220f      	movs	r2, #15
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a58      	ldr	r2, [pc, #352]	; (8003554 <HAL_GPIO_Init+0x32c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d037      	beq.n	8003466 <HAL_GPIO_Init+0x23e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a57      	ldr	r2, [pc, #348]	; (8003558 <HAL_GPIO_Init+0x330>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_GPIO_Init+0x23a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_GPIO_Init+0x334>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02b      	beq.n	800345e <HAL_GPIO_Init+0x236>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a55      	ldr	r2, [pc, #340]	; (8003560 <HAL_GPIO_Init+0x338>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d025      	beq.n	800345a <HAL_GPIO_Init+0x232>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a54      	ldr	r2, [pc, #336]	; (8003564 <HAL_GPIO_Init+0x33c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01f      	beq.n	8003456 <HAL_GPIO_Init+0x22e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a53      	ldr	r2, [pc, #332]	; (8003568 <HAL_GPIO_Init+0x340>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_Init+0x22a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_GPIO_Init+0x344>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0x226>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_GPIO_Init+0x348>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_Init+0x222>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a50      	ldr	r2, [pc, #320]	; (8003574 <HAL_GPIO_Init+0x34c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_Init+0x21e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4f      	ldr	r2, [pc, #316]	; (8003578 <HAL_GPIO_Init+0x350>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_Init+0x21a>
 800343e:	2309      	movs	r3, #9
 8003440:	e012      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003442:	230a      	movs	r3, #10
 8003444:	e010      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003446:	2308      	movs	r3, #8
 8003448:	e00e      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800344a:	2307      	movs	r3, #7
 800344c:	e00c      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800344e:	2306      	movs	r3, #6
 8003450:	e00a      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003452:	2305      	movs	r3, #5
 8003454:	e008      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003456:	2304      	movs	r3, #4
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800345a:	2303      	movs	r3, #3
 800345c:	e004      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800345e:	2302      	movs	r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003466:	2300      	movs	r3, #0
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f002 0203 	and.w	r2, r2, #3
 800346e:	0092      	lsls	r2, r2, #2
 8003470:	4093      	lsls	r3, r2
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003478:	4935      	ldr	r1, [pc, #212]	; (8003550 <HAL_GPIO_Init+0x328>)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003486:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_GPIO_Init+0x354>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034aa:	4a34      	ldr	r2, [pc, #208]	; (800357c <HAL_GPIO_Init+0x354>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b0:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_GPIO_Init+0x354>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d4:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_GPIO_Init+0x354>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_GPIO_Init+0x354>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034fe:	4a1f      	ldr	r2, [pc, #124]	; (800357c <HAL_GPIO_Init+0x354>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_GPIO_Init+0x354>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003528:	4a14      	ldr	r2, [pc, #80]	; (800357c <HAL_GPIO_Init+0x354>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	f67f ae84 	bls.w	8003244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40013800 	.word	0x40013800
 8003554:	40020000 	.word	0x40020000
 8003558:	40020400 	.word	0x40020400
 800355c:	40020800 	.word	0x40020800
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40021000 	.word	0x40021000
 8003568:	40021400 	.word	0x40021400
 800356c:	40021800 	.word	0x40021800
 8003570:	40021c00 	.word	0x40021c00
 8003574:	40022000 	.word	0x40022000
 8003578:	40022400 	.word	0x40022400
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035c4:	887a      	ldrh	r2, [r7, #2]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	041a      	lsls	r2, r3, #16
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	400b      	ands	r3, r1
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035fe:	4a05      	ldr	r2, [pc, #20]	; (8003614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd f804 	bl	8000614 <HAL_GPIO_EXTI_Callback>
  }
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40013c00 	.word	0x40013c00

08003618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e12b      	b.n	8003882 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd ff20 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	; 0x24
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800367c:	f000 ff18 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8003680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4a81      	ldr	r2, [pc, #516]	; (800388c <HAL_I2C_Init+0x274>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d807      	bhi.n	800369c <HAL_I2C_Init+0x84>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_I2C_Init+0x278>)
 8003690:	4293      	cmp	r3, r2
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e006      	b.n	80036aa <HAL_I2C_Init+0x92>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a7d      	ldr	r2, [pc, #500]	; (8003894 <HAL_I2C_Init+0x27c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0e7      	b.n	8003882 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a78      	ldr	r2, [pc, #480]	; (8003898 <HAL_I2C_Init+0x280>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0c9b      	lsrs	r3, r3, #18
 80036bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a6a      	ldr	r2, [pc, #424]	; (800388c <HAL_I2C_Init+0x274>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d802      	bhi.n	80036ec <HAL_I2C_Init+0xd4>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3301      	adds	r3, #1
 80036ea:	e009      	b.n	8003700 <HAL_I2C_Init+0xe8>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	4a69      	ldr	r2, [pc, #420]	; (800389c <HAL_I2C_Init+0x284>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	3301      	adds	r3, #1
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	495c      	ldr	r1, [pc, #368]	; (800388c <HAL_I2C_Init+0x274>)
 800371c:	428b      	cmp	r3, r1
 800371e:	d819      	bhi.n	8003754 <HAL_I2C_Init+0x13c>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e59      	subs	r1, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fbb1 f3f3 	udiv	r3, r1, r3
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003734:	400b      	ands	r3, r1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_I2C_Init+0x138>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e59      	subs	r1, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fbb1 f3f3 	udiv	r3, r1, r3
 8003748:	3301      	adds	r3, #1
 800374a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374e:	e051      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 8003750:	2304      	movs	r3, #4
 8003752:	e04f      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <HAL_I2C_Init+0x168>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e58      	subs	r0, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e012      	b.n	80037a6 <HAL_I2C_Init+0x18e>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Init+0x196>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e022      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10e      	bne.n	80037d4 <HAL_I2C_Init+0x1bc>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e58      	subs	r0, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	440b      	add	r3, r1
 80037c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d2:	e00f      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	6809      	ldr	r1, [r1, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6911      	ldr	r1, [r2, #16]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	430b      	orrs	r3, r1
 8003836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	000186a0 	.word	0x000186a0
 8003890:	001e847f 	.word	0x001e847f
 8003894:	003d08ff 	.word	0x003d08ff
 8003898:	431bde83 	.word	0x431bde83
 800389c:	10624dd3 	.word	0x10624dd3

080038a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d129      	bne.n	800390a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2224      	movs	r2, #36	; 0x24
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0210 	bic.w	r2, r2, #16
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d12a      	bne.n	8003988 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2224      	movs	r2, #36	; 0x24
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003952:	89fb      	ldrh	r3, [r7, #14]
 8003954:	f023 030f 	bic.w	r3, r3, #15
 8003958:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	b29a      	uxth	r2, r3
 800395e:	89fb      	ldrh	r3, [r7, #14]
 8003960:	4313      	orrs	r3, r2
 8003962:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	89fa      	ldrh	r2, [r7, #14]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003998:	b08f      	sub	sp, #60	; 0x3c
 800399a:	af0a      	add	r7, sp, #40	; 0x28
 800399c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e10f      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd ffb4 	bl	8001930 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 ff17 	bl	800781a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	687e      	ldr	r6, [r7, #4]
 80039f4:	466d      	mov	r5, sp
 80039f6:	f106 0410 	add.w	r4, r6, #16
 80039fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a0a:	1d33      	adds	r3, r6, #4
 8003a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	f003 fea2 	bl	8007758 <USB_CoreInit>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0d0      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 ff05 	bl	800783c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e04a      	b.n	8003ace <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	333d      	adds	r3, #61	; 0x3d
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	333c      	adds	r3, #60	; 0x3c
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	b298      	uxth	r0, r3
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3344      	adds	r3, #68	; 0x44
 8003a74:	4602      	mov	r2, r0
 8003a76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3340      	adds	r3, #64	; 0x40
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3348      	adds	r3, #72	; 0x48
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334c      	adds	r3, #76	; 0x4c
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3354      	adds	r3, #84	; 0x54
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3af      	bcc.n	8003a38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e044      	b.n	8003b68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	3301      	adds	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d3b5      	bcc.n	8003ade <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	687e      	ldr	r6, [r7, #4]
 8003b7a:	466d      	mov	r5, sp
 8003b7c:	f106 0410 	add.w	r4, r6, #16
 8003b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b90:	1d33      	adds	r3, r6, #4
 8003b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b94:	6838      	ldr	r0, [r7, #0]
 8003b96:	f003 fe9d 	bl	80078d4 <USB_DevInit>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e00d      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 f868 	bl	8007c96 <USB_DevDisconnect>

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e267      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b82      	ldr	r3, [pc, #520]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x108>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d157      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e242      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x74>
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6c      	ldr	r2, [pc, #432]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a68      	ldr	r2, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a65      	ldr	r2, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe f946 	bl	8001f18 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fe f942 	bl	8001f18 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e207      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0xc0>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f932 	bl	8001f18 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe f92e 	bl	8001f18 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1f3      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xe8>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e1c7      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4937      	ldr	r1, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe f8e7 	bl	8001f18 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe f8e3 	bl	8001f18 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1a8      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4925      	ldr	r1, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe f8c6 	bl	8001f18 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fe f8c2 	bl	8001f18 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e187      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fe f8a6 	bl	8001f18 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fe f8a2 	bl	8001f18 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e167      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x200>
 8003dee:	e01b      	b.n	8003e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe f88f 	bl	8001f18 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e00e      	b.n	8003e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fe f88b 	bl	8001f18 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d907      	bls.n	8003e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e150      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	42470000 	.word	0x42470000
 8003e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b88      	ldr	r3, [pc, #544]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ea      	bne.n	8003dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8097 	beq.w	8003f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b81      	ldr	r3, [pc, #516]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a7c      	ldr	r2, [pc, #496]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b7a      	ldr	r3, [pc, #488]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b77      	ldr	r3, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b74      	ldr	r3, [pc, #464]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a73      	ldr	r2, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe f84b 	bl	8001f18 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e86:	f7fe f847 	bl	8001f18 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e10c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x2ea>
 8003eac:	4b64      	ldr	r3, [pc, #400]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a63      	ldr	r2, [pc, #396]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	e01c      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x30c>
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003edc:	4b58      	ldr	r3, [pc, #352]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a57      	ldr	r2, [pc, #348]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a54      	ldr	r2, [pc, #336]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0304 	bic.w	r3, r3, #4
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fe f80c 	bl	8001f18 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe f808 	bl	8001f18 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0cb      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCC_OscConfig+0x334>
 8003f26:	e014      	b.n	8003f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fd fff6 	bl	8001f18 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fd fff2 	bl	8001f18 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0b5      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f46:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ee      	bne.n	8003f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	4a38      	ldr	r2, [pc, #224]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a1 	beq.w	80040b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f6e:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d05c      	beq.n	8004034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d141      	bne.n	8004006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd ffc6 	bl	8001f18 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd ffc2 	bl	8001f18 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e087      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b27      	ldr	r3, [pc, #156]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	491b      	ldr	r1, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fd ff9b 	bl	8001f18 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd ff97 	bl	8001f18 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e05c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x416>
 8004004:	e054      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd ff84 	bl	8001f18 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd ff80 	bl	8001f18 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e045      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x444>
 8004032:	e03d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e038      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
 8004048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x4ec>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d028      	beq.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d121      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11a      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fd feb2 	bl	8001f18 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd feae 	bl	8001f18 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f821 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fd fe12 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	08008ea4 	.word	0x08008ea4
 8004284:	20000004 	.word	0x20000004
 8004288:	20000008 	.word	0x20000008

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b094      	sub	sp, #80	; 0x50
 8004292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	647b      	str	r3, [r7, #68]	; 0x44
 8004298:	2300      	movs	r3, #0
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	2300      	movs	r3, #0
 800429e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a4:	4b79      	ldr	r3, [pc, #484]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d00d      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x40>
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	f200 80e1 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042be:	e0db      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b73      	ldr	r3, [pc, #460]	; (8004490 <HAL_RCC_GetSysClockFreq+0x204>)
 80042c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042c4:	e0db      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c6:	4b73      	ldr	r3, [pc, #460]	; (8004494 <HAL_RCC_GetSysClockFreq+0x208>)
 80042c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ca:	e0d8      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042cc:	4b6f      	ldr	r3, [pc, #444]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d6:	4b6d      	ldr	r3, [pc, #436]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	2200      	movs	r2, #0
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30
 80042f6:	2300      	movs	r3, #0
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	0159      	lsls	r1, r3, #5
 800430c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004310:	0150      	lsls	r0, r2, #5
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4621      	mov	r1, r4
 8004318:	1a51      	subs	r1, r2, r1
 800431a:	6139      	str	r1, [r7, #16]
 800431c:	4629      	mov	r1, r5
 800431e:	eb63 0301 	sbc.w	r3, r3, r1
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004330:	4659      	mov	r1, fp
 8004332:	018b      	lsls	r3, r1, #6
 8004334:	4651      	mov	r1, sl
 8004336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800433a:	4651      	mov	r1, sl
 800433c:	018a      	lsls	r2, r1, #6
 800433e:	4651      	mov	r1, sl
 8004340:	ebb2 0801 	subs.w	r8, r2, r1
 8004344:	4659      	mov	r1, fp
 8004346:	eb63 0901 	sbc.w	r9, r3, r1
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800435e:	4690      	mov	r8, r2
 8004360:	4699      	mov	r9, r3
 8004362:	4623      	mov	r3, r4
 8004364:	eb18 0303 	adds.w	r3, r8, r3
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	462b      	mov	r3, r5
 800436c:	eb49 0303 	adc.w	r3, r9, r3
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800437e:	4629      	mov	r1, r5
 8004380:	024b      	lsls	r3, r1, #9
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004388:	4621      	mov	r1, r4
 800438a:	024a      	lsls	r2, r1, #9
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	2200      	movs	r2, #0
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800439c:	f7fb ff78 	bl	8000290 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4613      	mov	r3, r2
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	e058      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	2200      	movs	r2, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	4611      	mov	r1, r2
 80043b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	f04f 0000 	mov.w	r0, #0
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	0159      	lsls	r1, r3, #5
 80043d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d6:	0150      	lsls	r0, r2, #5
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4641      	mov	r1, r8
 80043de:	ebb2 0a01 	subs.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004400:	eb63 050b 	sbc.w	r5, r3, fp
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	00eb      	lsls	r3, r5, #3
 800440e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004412:	00e2      	lsls	r2, r4, #3
 8004414:	4614      	mov	r4, r2
 8004416:	461d      	mov	r5, r3
 8004418:	4643      	mov	r3, r8
 800441a:	18e3      	adds	r3, r4, r3
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	464b      	mov	r3, r9
 8004420:	eb45 0303 	adc.w	r3, r5, r3
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004432:	4629      	mov	r1, r5
 8004434:	028b      	lsls	r3, r1, #10
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800443c:	4621      	mov	r1, r4
 800443e:	028a      	lsls	r2, r1, #10
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	61fa      	str	r2, [r7, #28]
 800444c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004450:	f7fb ff1e 	bl	8000290 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetSysClockFreq+0x200>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	3301      	adds	r3, #1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800446c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004476:	e002      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetSysClockFreq+0x204>)
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800447c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004480:	4618      	mov	r0, r3
 8004482:	3750      	adds	r7, #80	; 0x50
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	007a1200 	.word	0x007a1200

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000004 	.word	0x20000004

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08008eb4 	.word	0x08008eb4

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044dc:	f7ff ffdc 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0b5b      	lsrs	r3, r3, #13
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	08008eb4 	.word	0x08008eb4

08004500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004530:	2b00      	cmp	r3, #0
 8004532:	d075      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004534:	4b91      	ldr	r3, [pc, #580]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453a:	f7fd fced 	bl	8001f18 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004542:	f7fd fce9 	bl	8001f18 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e189      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004554:	4b8a      	ldr	r3, [pc, #552]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	019a      	lsls	r2, r3, #6
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	071b      	lsls	r3, r3, #28
 8004578:	4981      	ldr	r1, [pc, #516]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800458c:	4b7c      	ldr	r3, [pc, #496]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	431a      	orrs	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	071b      	lsls	r3, r3, #28
 80045ac:	4974      	ldr	r1, [pc, #464]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045b4:	4b72      	ldr	r3, [pc, #456]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ba:	f023 021f 	bic.w	r2, r3, #31
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	496e      	ldr	r1, [pc, #440]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	019a      	lsls	r2, r3, #6
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	071b      	lsls	r3, r3, #28
 80045ec:	4964      	ldr	r1, [pc, #400]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045f4:	4b61      	ldr	r3, [pc, #388]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045fa:	f7fd fc8d 	bl	8001f18 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004602:	f7fd fc89 	bl	8001f18 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e129      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004614:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004634:	2b00      	cmp	r3, #0
 8004636:	d079      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004638:	4b52      	ldr	r3, [pc, #328]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800463e:	f7fd fc6b 	bl	8001f18 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004646:	f7fd fc67 	bl	8001f18 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e107      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004658:	4b49      	ldr	r3, [pc, #292]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004664:	d0ef      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004672:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	0f1b      	lsrs	r3, r3, #28
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	019a      	lsls	r2, r3, #6
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	431a      	orrs	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	071b      	lsls	r3, r3, #28
 8004692:	493b      	ldr	r1, [pc, #236]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800469a:	4b39      	ldr	r3, [pc, #228]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800469c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	4934      	ldr	r1, [pc, #208]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01e      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046c0:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	0e1b      	lsrs	r3, r3, #24
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	019a      	lsls	r2, r3, #6
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	071b      	lsls	r3, r3, #28
 80046e0:	4927      	ldr	r1, [pc, #156]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	4922      	ldr	r1, [pc, #136]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046fe:	4b21      	ldr	r3, [pc, #132]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004704:	f7fd fc08 	bl	8001f18 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800470c:	f7fd fc04 	bl	8001f18 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0a4      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472a:	d1ef      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 808b 	beq.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004762:	f7fd fbd9 	bl	8001f18 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004768:	e010      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fd fbd5 	bl	8001f18 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d909      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e075      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800477c:	42470068 	.word	0x42470068
 8004780:	40023800 	.word	0x40023800
 8004784:	42470070 	.word	0x42470070
 8004788:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800478c:	4b38      	ldr	r3, [pc, #224]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0e8      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004798:	4b36      	ldr	r3, [pc, #216]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d028      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b6:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047c0:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047c6:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047cc:	4a29      	ldr	r2, [pc, #164]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047d2:	4b28      	ldr	r3, [pc, #160]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d114      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047de:	f7fd fb9b 	bl	8001f18 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fd fb97 	bl	8001f18 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e035      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004814:	d10d      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	4912      	ldr	r1, [pc, #72]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]
 8004830:	e005      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	4a0f      	ldr	r2, [pc, #60]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004838:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800483c:	6093      	str	r3, [r2, #8]
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484a:	490a      	ldr	r1, [pc, #40]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800484c:	4313      	orrs	r3, r2
 800484e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004864:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40007000 	.word	0x40007000
 8004874:	40023800 	.word	0x40023800
 8004878:	42470e40 	.word	0x42470e40
 800487c:	424711e0 	.word	0x424711e0

08004880 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e066      	b.n	8004964 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7f5b      	ldrb	r3, [r3, #29]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc fe34 	bl	8001514 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	22ca      	movs	r2, #202	; 0xca
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2253      	movs	r2, #83	; 0x53
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f998 	bl	8004bf8 <RTC_EnterInitMode>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d12c      	bne.n	800492c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6899      	ldr	r1, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68d2      	ldr	r2, [r2, #12]
 800490c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6919      	ldr	r1, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f99f 	bl	8004c66 <RTC_ExitInitMode>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d113      	bne.n	800495a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699a      	ldr	r2, [r3, #24]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	7f1b      	ldrb	r3, [r3, #28]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_RTC_SetTime+0x1c>
 8004984:	2302      	movs	r3, #2
 8004986:	e087      	b.n	8004a98 <HAL_RTC_SetTime+0x12c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2202      	movs	r2, #2
 8004992:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d126      	bne.n	80049e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f97c 	bl	8004cb0 <RTC_ByteToBcd2>
 80049b8:	4603      	mov	r3, r0
 80049ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 f975 	bl	8004cb0 <RTC_ByteToBcd2>
 80049c6:	4603      	mov	r3, r0
 80049c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	789b      	ldrb	r3, [r3, #2]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f96d 	bl	8004cb0 <RTC_ByteToBcd2>
 80049d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	78db      	ldrb	r3, [r3, #3]
 80049e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e018      	b.n	8004a1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2200      	movs	r2, #0
 80049fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a08:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	78db      	ldrb	r3, [r3, #3]
 8004a14:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	22ca      	movs	r2, #202	; 0xca
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2253      	movs	r2, #83	; 0x53
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f8e4 	bl	8004bf8 <RTC_EnterInitMode>
 8004a30:	4603      	mov	r3, r0
 8004a32:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d120      	bne.n	8004a7c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f8f7 	bl	8004c66 <RTC_ExitInitMode>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	22ff      	movs	r2, #255	; 0xff
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	771a      	strb	r2, [r3, #28]

  return status;
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd90      	pop	{r4, r7, pc}

08004aa0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	7f1b      	ldrb	r3, [r3, #28]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_RTC_SetDate+0x1c>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e071      	b.n	8004ba0 <HAL_RTC_SetDate+0x100>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10e      	bne.n	8004aec <HAL_RTC_SetDate+0x4c>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	f023 0310 	bic.w	r3, r3, #16
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	330a      	adds	r3, #10
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11c      	bne.n	8004b2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	78db      	ldrb	r3, [r3, #3]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f8da 	bl	8004cb0 <RTC_ByteToBcd2>
 8004afc:	4603      	mov	r3, r0
 8004afe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f8d3 	bl	8004cb0 <RTC_ByteToBcd2>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f8cb 	bl	8004cb0 <RTC_ByteToBcd2>
 8004b1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e00e      	b.n	8004b4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	78db      	ldrb	r3, [r3, #3]
 8004b30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b38:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	22ca      	movs	r2, #202	; 0xca
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2253      	movs	r2, #83	; 0x53
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f84c 	bl	8004bf8 <RTC_EnterInitMode>
 8004b60:	4603      	mov	r3, r0
 8004b62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10c      	bne.n	8004b84 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f873 	bl	8004c66 <RTC_ExitInitMode>
 8004b80:	4603      	mov	r3, r0
 8004b82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	22ff      	movs	r2, #255	; 0xff
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	771a      	strb	r2, [r3, #28]

  return status;
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd90      	pop	{r4, r7, pc}

08004ba8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bc4:	f7fd f9a8 	bl	8001f18 <HAL_GetTick>
 8004bc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004bca:	e009      	b.n	8004be0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bcc:	f7fd f9a4 	bl	8001f18 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bda:	d901      	bls.n	8004be0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e007      	b.n	8004bf0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ee      	beq.n	8004bcc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d122      	bne.n	8004c5c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c26:	f7fd f977 	bl	8001f18 <HAL_GetTick>
 8004c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c2c:	e00c      	b.n	8004c48 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c2e:	f7fd f973 	bl	8001f18 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3c:	d904      	bls.n	8004c48 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <RTC_EnterInitMode+0x64>
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d1e8      	bne.n	8004c2e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c80:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff89 	bl	8004ba8 <HAL_RTC_WaitForSynchro>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004cbe:	e005      	b.n	8004ccc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	3b0a      	subs	r3, #10
 8004cca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	2b09      	cmp	r3, #9
 8004cd0:	d8f6      	bhi.n	8004cc0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	b2db      	uxtb	r3, r3
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e041      	b.n	8004d80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fc fc9f 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f000 ffd3 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d001      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e04e      	b.n	8004e3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <HAL_TIM_Base_Start_IT+0xc4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d022      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d01d      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d111      	bne.n	8004e2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d010      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2a:	e007      	b.n	8004e3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40001800 	.word	0x40001800

08004e68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e041      	b.n	8004efe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fb6a 	bl	8001568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f000 ff14 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <HAL_TIM_PWM_Start+0x24>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e022      	b.n	8004f72 <HAL_TIM_PWM_Start+0x6a>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d109      	bne.n	8004f46 <HAL_TIM_PWM_Start+0x3e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e015      	b.n	8004f72 <HAL_TIM_PWM_Start+0x6a>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d109      	bne.n	8004f60 <HAL_TIM_PWM_Start+0x58>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e008      	b.n	8004f72 <HAL_TIM_PWM_Start+0x6a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e07c      	b.n	8005074 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0x82>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	e013      	b.n	8004fb2 <HAL_TIM_PWM_Start+0xaa>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0x92>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f98:	e00b      	b.n	8004fb2 <HAL_TIM_PWM_Start+0xaa>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	e003      	b.n	8004fb2 <HAL_TIM_PWM_Start+0xaa>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	6839      	ldr	r1, [r7, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 fa9e 	bl	80064fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2d      	ldr	r2, [pc, #180]	; (800507c <HAL_TIM_PWM_Start+0x174>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <HAL_TIM_PWM_Start+0xcc>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <HAL_TIM_PWM_Start+0x178>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIM_PWM_Start+0xd0>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_TIM_PWM_Start+0xd2>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a22      	ldr	r2, [pc, #136]	; (800507c <HAL_TIM_PWM_Start+0x174>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d022      	beq.n	800503e <HAL_TIM_PWM_Start+0x136>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d01d      	beq.n	800503e <HAL_TIM_PWM_Start+0x136>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <HAL_TIM_PWM_Start+0x17c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_TIM_PWM_Start+0x136>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <HAL_TIM_PWM_Start+0x180>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_TIM_PWM_Start+0x136>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1c      	ldr	r2, [pc, #112]	; (800508c <HAL_TIM_PWM_Start+0x184>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_TIM_PWM_Start+0x136>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a16      	ldr	r2, [pc, #88]	; (8005080 <HAL_TIM_PWM_Start+0x178>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_TIM_PWM_Start+0x136>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_TIM_PWM_Start+0x188>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIM_PWM_Start+0x136>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a16      	ldr	r2, [pc, #88]	; (8005094 <HAL_TIM_PWM_Start+0x18c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d111      	bne.n	8005062 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d010      	beq.n	8005072 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	e007      	b.n	8005072 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40010000 	.word	0x40010000
 8005080:	40010400 	.word	0x40010400
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40014000 	.word	0x40014000
 8005094:	40001800 	.word	0x40001800

08005098 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start_IT+0x28>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e022      	b.n	8005106 <HAL_TIM_PWM_Start_IT+0x6e>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d109      	bne.n	80050da <HAL_TIM_PWM_Start_IT+0x42>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	bf14      	ite	ne
 80050d2:	2301      	movne	r3, #1
 80050d4:	2300      	moveq	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e015      	b.n	8005106 <HAL_TIM_PWM_Start_IT+0x6e>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d109      	bne.n	80050f4 <HAL_TIM_PWM_Start_IT+0x5c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e008      	b.n	8005106 <HAL_TIM_PWM_Start_IT+0x6e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e0c7      	b.n	800529e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start_IT+0x86>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800511c:	e013      	b.n	8005146 <HAL_TIM_PWM_Start_IT+0xae>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Start_IT+0x96>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512c:	e00b      	b.n	8005146 <HAL_TIM_PWM_Start_IT+0xae>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d104      	bne.n	800513e <HAL_TIM_PWM_Start_IT+0xa6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800513c:	e003      	b.n	8005146 <HAL_TIM_PWM_Start_IT+0xae>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b0c      	cmp	r3, #12
 800514a:	d841      	bhi.n	80051d0 <HAL_TIM_PWM_Start_IT+0x138>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <HAL_TIM_PWM_Start_IT+0xbc>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005189 	.word	0x08005189
 8005158:	080051d1 	.word	0x080051d1
 800515c:	080051d1 	.word	0x080051d1
 8005160:	080051d1 	.word	0x080051d1
 8005164:	0800519b 	.word	0x0800519b
 8005168:	080051d1 	.word	0x080051d1
 800516c:	080051d1 	.word	0x080051d1
 8005170:	080051d1 	.word	0x080051d1
 8005174:	080051ad 	.word	0x080051ad
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051d1 	.word	0x080051d1
 8005180:	080051d1 	.word	0x080051d1
 8005184:	080051bf 	.word	0x080051bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0202 	orr.w	r2, r2, #2
 8005196:	60da      	str	r2, [r3, #12]
      break;
 8005198:	e01d      	b.n	80051d6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0204 	orr.w	r2, r2, #4
 80051a8:	60da      	str	r2, [r3, #12]
      break;
 80051aa:	e014      	b.n	80051d6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	60da      	str	r2, [r3, #12]
      break;
 80051bc:	e00b      	b.n	80051d6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0210 	orr.w	r2, r2, #16
 80051cc:	60da      	str	r2, [r3, #12]
      break;
 80051ce:	e002      	b.n	80051d6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      break;
 80051d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d15f      	bne.n	800529c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2201      	movs	r2, #1
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 f989 	bl	80064fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a2e      	ldr	r2, [pc, #184]	; (80052a8 <HAL_TIM_PWM_Start_IT+0x210>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIM_PWM_Start_IT+0x166>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <HAL_TIM_PWM_Start_IT+0x214>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_Start_IT+0x16a>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <HAL_TIM_PWM_Start_IT+0x16c>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_TIM_PWM_Start_IT+0x210>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d01d      	beq.n	8005268 <HAL_TIM_PWM_Start_IT+0x1d0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <HAL_TIM_PWM_Start_IT+0x218>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <HAL_TIM_PWM_Start_IT+0x220>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_TIM_PWM_Start_IT+0x1d0>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_TIM_PWM_Start_IT+0x214>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <HAL_TIM_PWM_Start_IT+0x224>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_PWM_Start_IT+0x1d0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <HAL_TIM_PWM_Start_IT+0x228>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d111      	bne.n	800528c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d010      	beq.n	800529c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	e007      	b.n	800529c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40010400 	.word	0x40010400
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40001800 	.word	0x40001800

080052c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e041      	b.n	800535a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc f962 	bl	80015b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 fce6 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d104      	bne.n	8005382 <HAL_TIM_IC_Start_IT+0x1e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e013      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x46>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b04      	cmp	r3, #4
 8005386:	d104      	bne.n	8005392 <HAL_TIM_IC_Start_IT+0x2e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800538e:	b2db      	uxtb	r3, r3
 8005390:	e00b      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x46>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b08      	cmp	r3, #8
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_IC_Start_IT+0x3e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e003      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x46>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <HAL_TIM_IC_Start_IT+0x58>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e013      	b.n	80053e4 <HAL_TIM_IC_Start_IT+0x80>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d104      	bne.n	80053cc <HAL_TIM_IC_Start_IT+0x68>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e00b      	b.n	80053e4 <HAL_TIM_IC_Start_IT+0x80>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d104      	bne.n	80053dc <HAL_TIM_IC_Start_IT+0x78>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e003      	b.n	80053e4 <HAL_TIM_IC_Start_IT+0x80>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d102      	bne.n	80053f2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053ec:	7b7b      	ldrb	r3, [r7, #13]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d001      	beq.n	80053f6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e0cc      	b.n	8005590 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005404:	e013      	b.n	800542e <HAL_TIM_IC_Start_IT+0xca>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d104      	bne.n	8005416 <HAL_TIM_IC_Start_IT+0xb2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005414:	e00b      	b.n	800542e <HAL_TIM_IC_Start_IT+0xca>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d104      	bne.n	8005426 <HAL_TIM_IC_Start_IT+0xc2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005424:	e003      	b.n	800542e <HAL_TIM_IC_Start_IT+0xca>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_IC_Start_IT+0xda>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800543c:	e013      	b.n	8005466 <HAL_TIM_IC_Start_IT+0x102>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_IC_Start_IT+0xea>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800544c:	e00b      	b.n	8005466 <HAL_TIM_IC_Start_IT+0x102>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_IC_Start_IT+0xfa>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800545c:	e003      	b.n	8005466 <HAL_TIM_IC_Start_IT+0x102>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b0c      	cmp	r3, #12
 800546a:	d841      	bhi.n	80054f0 <HAL_TIM_IC_Start_IT+0x18c>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <HAL_TIM_IC_Start_IT+0x110>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	080054a9 	.word	0x080054a9
 8005478:	080054f1 	.word	0x080054f1
 800547c:	080054f1 	.word	0x080054f1
 8005480:	080054f1 	.word	0x080054f1
 8005484:	080054bb 	.word	0x080054bb
 8005488:	080054f1 	.word	0x080054f1
 800548c:	080054f1 	.word	0x080054f1
 8005490:	080054f1 	.word	0x080054f1
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054f1 	.word	0x080054f1
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	080054df 	.word	0x080054df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0202 	orr.w	r2, r2, #2
 80054b6:	60da      	str	r2, [r3, #12]
      break;
 80054b8:	e01d      	b.n	80054f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0204 	orr.w	r2, r2, #4
 80054c8:	60da      	str	r2, [r3, #12]
      break;
 80054ca:	e014      	b.n	80054f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	60da      	str	r2, [r3, #12]
      break;
 80054dc:	e00b      	b.n	80054f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0210 	orr.w	r2, r2, #16
 80054ec:	60da      	str	r2, [r3, #12]
      break;
 80054ee:	e002      	b.n	80054f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      break;
 80054f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d148      	bne.n	800558e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2201      	movs	r2, #1
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fff9 	bl	80064fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a22      	ldr	r2, [pc, #136]	; (8005598 <HAL_TIM_IC_Start_IT+0x234>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d022      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x1f6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551c:	d01d      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x1f6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1e      	ldr	r2, [pc, #120]	; (800559c <HAL_TIM_IC_Start_IT+0x238>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d018      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x1f6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <HAL_TIM_IC_Start_IT+0x23c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x1f6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <HAL_TIM_IC_Start_IT+0x240>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00e      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x1f6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a19      	ldr	r2, [pc, #100]	; (80055a8 <HAL_TIM_IC_Start_IT+0x244>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x1f6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a18      	ldr	r2, [pc, #96]	; (80055ac <HAL_TIM_IC_Start_IT+0x248>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x1f6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d111      	bne.n	800557e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b06      	cmp	r3, #6
 800556a:	d010      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	e007      	b.n	800558e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40010000 	.word	0x40010000
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40010400 	.word	0x40010400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40001800 	.word	0x40001800

080055b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0202 	mvn.w	r2, #2
 80055e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fc fbc8 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb4a 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fb51 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0204 	mvn.w	r2, #4
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fc fb9e 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fb20 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb27 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b08      	cmp	r3, #8
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b08      	cmp	r3, #8
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0208 	mvn.w	r2, #8
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2204      	movs	r2, #4
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc fb74 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 faf6 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fafd 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0210 	mvn.w	r2, #16
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2208      	movs	r2, #8
 80056e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc fb4a 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 facc 	bl	8005c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fad3 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0201 	mvn.w	r2, #1
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fa ff4e 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 ff78 	bl	8006654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d10e      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	d107      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa98 	bl	8005cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b20      	cmp	r3, #32
 800579c:	d10e      	bne.n	80057bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0220 	mvn.w	r2, #32
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 ff42 	bl	8006640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80057de:	2302      	movs	r3, #2
 80057e0:	e088      	b.n	80058f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11b      	bne.n	8005828 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f000 fcb8 	bl	8006174 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 020c 	bic.w	r2, r2, #12
 8005812:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	619a      	str	r2, [r3, #24]
 8005826:	e060      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d11c      	bne.n	8005868 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f000 fd3c 	bl	80062ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005850:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6999      	ldr	r1, [r3, #24]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	619a      	str	r2, [r3, #24]
 8005866:	e040      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b08      	cmp	r3, #8
 800586c:	d11b      	bne.n	80058a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f000 fd89 	bl	8006394 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 020c 	bic.w	r2, r2, #12
 8005890:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69d9      	ldr	r1, [r3, #28]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	61da      	str	r2, [r3, #28]
 80058a4:	e021      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b0c      	cmp	r3, #12
 80058aa:	d11c      	bne.n	80058e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f000 fda6 	bl	800640c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69da      	ldr	r2, [r3, #28]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69d9      	ldr	r1, [r3, #28]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	61da      	str	r2, [r3, #28]
 80058e4:	e001      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005916:	2302      	movs	r3, #2
 8005918:	e0ae      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b0c      	cmp	r3, #12
 8005926:	f200 809f 	bhi.w	8005a68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005965 	.word	0x08005965
 8005934:	08005a69 	.word	0x08005a69
 8005938:	08005a69 	.word	0x08005a69
 800593c:	08005a69 	.word	0x08005a69
 8005940:	080059a5 	.word	0x080059a5
 8005944:	08005a69 	.word	0x08005a69
 8005948:	08005a69 	.word	0x08005a69
 800594c:	08005a69 	.word	0x08005a69
 8005950:	080059e7 	.word	0x080059e7
 8005954:	08005a69 	.word	0x08005a69
 8005958:	08005a69 	.word	0x08005a69
 800595c:	08005a69 	.word	0x08005a69
 8005960:	08005a27 	.word	0x08005a27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa52 	bl	8005e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0208 	orr.w	r2, r2, #8
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0204 	bic.w	r2, r2, #4
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	619a      	str	r2, [r3, #24]
      break;
 80059a2:	e064      	b.n	8005a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 faa2 	bl	8005ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6999      	ldr	r1, [r3, #24]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	619a      	str	r2, [r3, #24]
      break;
 80059e4:	e043      	b.n	8005a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 faf7 	bl	8005fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0208 	orr.w	r2, r2, #8
 8005a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0204 	bic.w	r2, r2, #4
 8005a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	61da      	str	r2, [r3, #28]
      break;
 8005a24:	e023      	b.n	8005a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fb4b 	bl	80060c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69d9      	ldr	r1, [r3, #28]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	021a      	lsls	r2, r3, #8
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	61da      	str	r2, [r3, #28]
      break;
 8005a66:	e002      	b.n	8005a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e0b4      	b.n	8005c06 <HAL_TIM_ConfigClockSource+0x186>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad4:	d03e      	beq.n	8005b54 <HAL_TIM_ConfigClockSource+0xd4>
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ada:	f200 8087 	bhi.w	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	f000 8086 	beq.w	8005bf2 <HAL_TIM_ConfigClockSource+0x172>
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d87f      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b70      	cmp	r3, #112	; 0x70
 8005aee:	d01a      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0xa6>
 8005af0:	2b70      	cmp	r3, #112	; 0x70
 8005af2:	d87b      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b60      	cmp	r3, #96	; 0x60
 8005af6:	d050      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x11a>
 8005af8:	2b60      	cmp	r3, #96	; 0x60
 8005afa:	d877      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b50      	cmp	r3, #80	; 0x50
 8005afe:	d03c      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0xfa>
 8005b00:	2b50      	cmp	r3, #80	; 0x50
 8005b02:	d873      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d058      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x13a>
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d86f      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005b0c:	2b30      	cmp	r3, #48	; 0x30
 8005b0e:	d064      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15a>
 8005b10:	2b30      	cmp	r3, #48	; 0x30
 8005b12:	d86b      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d060      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15a>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d867      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d05c      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15a>
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d05a      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15a>
 8005b24:	e062      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6899      	ldr	r1, [r3, #8]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f000 fcc1 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	609a      	str	r2, [r3, #8]
      break;
 8005b52:	e04f      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	6899      	ldr	r1, [r3, #8]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f000 fcaa 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b76:	609a      	str	r2, [r3, #8]
      break;
 8005b78:	e03c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 fb68 	bl	800625c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2150      	movs	r1, #80	; 0x50
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fc77 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005b98:	e02c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fbc4 	bl	8006334 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2160      	movs	r1, #96	; 0x60
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fc67 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e01c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 fb48 	bl	800625c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fc57 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e00c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f000 fc4e 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005bea:	e003      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e000      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b0c      	cmp	r3, #12
 8005c22:	d831      	bhi.n	8005c88 <HAL_TIM_ReadCapturedValue+0x78>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08005c89 	.word	0x08005c89
 8005c34:	08005c89 	.word	0x08005c89
 8005c38:	08005c89 	.word	0x08005c89
 8005c3c:	08005c6b 	.word	0x08005c6b
 8005c40:	08005c89 	.word	0x08005c89
 8005c44:	08005c89 	.word	0x08005c89
 8005c48:	08005c89 	.word	0x08005c89
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c89 	.word	0x08005c89
 8005c54:	08005c89 	.word	0x08005c89
 8005c58:	08005c89 	.word	0x08005c89
 8005c5c:	08005c7f 	.word	0x08005c7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	60fb      	str	r3, [r7, #12]

      break;
 8005c68:	e00f      	b.n	8005c8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	60fb      	str	r3, [r7, #12]

      break;
 8005c72:	e00a      	b.n	8005c8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	60fb      	str	r3, [r7, #12]

      break;
 8005c7c:	e005      	b.n	8005c8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	60fb      	str	r3, [r7, #12]

      break;
 8005c86:	e000      	b.n	8005c8a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005c88:	bf00      	nop
  }

  return tmpreg;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a40      	ldr	r2, [pc, #256]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf2:	d00f      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3d      	ldr	r2, [pc, #244]	; (8005dec <TIM_Base_SetConfig+0x118>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3c      	ldr	r2, [pc, #240]	; (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3b      	ldr	r2, [pc, #236]	; (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3a      	ldr	r2, [pc, #232]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2f      	ldr	r2, [pc, #188]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d027      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2c      	ldr	r2, [pc, #176]	; (8005dec <TIM_Base_SetConfig+0x118>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d023      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01f      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a29      	ldr	r2, [pc, #164]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d017      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <TIM_Base_SetConfig+0x128>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a27      	ldr	r2, [pc, #156]	; (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <TIM_Base_SetConfig+0x130>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <TIM_Base_SetConfig+0x134>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a24      	ldr	r2, [pc, #144]	; (8005e0c <TIM_Base_SetConfig+0x138>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a23      	ldr	r2, [pc, #140]	; (8005e10 <TIM_Base_SetConfig+0x13c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d108      	bne.n	8005d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a0c      	ldr	r2, [pc, #48]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d103      	bne.n	8005dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	615a      	str	r2, [r3, #20]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40010400 	.word	0x40010400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	40001800 	.word	0x40001800
 8005e0c:	40001c00 	.word	0x40001c00
 8005e10:	40002000 	.word	0x40002000

08005e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f023 0201 	bic.w	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a20      	ldr	r2, [pc, #128]	; (8005eec <TIM_OC1_SetConfig+0xd8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC1_SetConfig+0x64>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <TIM_OC1_SetConfig+0xdc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d10c      	bne.n	8005e92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0308 	bic.w	r3, r3, #8
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 0304 	bic.w	r3, r3, #4
 8005e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a15      	ldr	r2, [pc, #84]	; (8005eec <TIM_OC1_SetConfig+0xd8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_OC1_SetConfig+0x8e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <TIM_OC1_SetConfig+0xdc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0210 	bic.w	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0320 	bic.w	r3, r3, #32
 8005f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <TIM_OC2_SetConfig+0xe4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC2_SetConfig+0x68>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <TIM_OC2_SetConfig+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d10d      	bne.n	8005f78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <TIM_OC2_SetConfig+0xe4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC2_SetConfig+0x94>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC2_SetConfig+0xe8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d113      	bne.n	8005fb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40010400 	.word	0x40010400

08005fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a21      	ldr	r2, [pc, #132]	; (80060c0 <TIM_OC3_SetConfig+0xe0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_OC3_SetConfig+0x66>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a20      	ldr	r2, [pc, #128]	; (80060c4 <TIM_OC3_SetConfig+0xe4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d10d      	bne.n	8006062 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <TIM_OC3_SetConfig+0xe0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC3_SetConfig+0x92>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <TIM_OC3_SetConfig+0xe4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d113      	bne.n	800609a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40010000 	.word	0x40010000
 80060c4:	40010400 	.word	0x40010400

080060c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	031b      	lsls	r3, r3, #12
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a12      	ldr	r2, [pc, #72]	; (800616c <TIM_OC4_SetConfig+0xa4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_OC4_SetConfig+0x68>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a11      	ldr	r2, [pc, #68]	; (8006170 <TIM_OC4_SetConfig+0xa8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d109      	bne.n	8006144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	019b      	lsls	r3, r3, #6
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40010000 	.word	0x40010000
 8006170:	40010400 	.word	0x40010400

08006174 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f023 0201 	bic.w	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a28      	ldr	r2, [pc, #160]	; (8006240 <TIM_TI1_SetConfig+0xcc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01b      	beq.n	80061da <TIM_TI1_SetConfig+0x66>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a8:	d017      	beq.n	80061da <TIM_TI1_SetConfig+0x66>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a25      	ldr	r2, [pc, #148]	; (8006244 <TIM_TI1_SetConfig+0xd0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <TIM_TI1_SetConfig+0x66>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a24      	ldr	r2, [pc, #144]	; (8006248 <TIM_TI1_SetConfig+0xd4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00f      	beq.n	80061da <TIM_TI1_SetConfig+0x66>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a23      	ldr	r2, [pc, #140]	; (800624c <TIM_TI1_SetConfig+0xd8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00b      	beq.n	80061da <TIM_TI1_SetConfig+0x66>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a22      	ldr	r2, [pc, #136]	; (8006250 <TIM_TI1_SetConfig+0xdc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <TIM_TI1_SetConfig+0x66>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a21      	ldr	r2, [pc, #132]	; (8006254 <TIM_TI1_SetConfig+0xe0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_TI1_SetConfig+0x66>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a20      	ldr	r2, [pc, #128]	; (8006258 <TIM_TI1_SetConfig+0xe4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d101      	bne.n	80061de <TIM_TI1_SetConfig+0x6a>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <TIM_TI1_SetConfig+0x6c>
 80061de:	2300      	movs	r3, #0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0303 	bic.w	r3, r3, #3
 80061ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e003      	b.n	80061fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	b2db      	uxtb	r3, r3
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f023 030a 	bic.w	r3, r3, #10
 8006218:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f003 030a 	and.w	r3, r3, #10
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	621a      	str	r2, [r3, #32]
}
 8006232:	bf00      	nop
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40010000 	.word	0x40010000
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40010400 	.word	0x40010400
 8006254:	40014000 	.word	0x40014000
 8006258:	40001800 	.word	0x40001800

0800625c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f023 0201 	bic.w	r2, r3, #1
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f023 030a 	bic.w	r3, r3, #10
 8006298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b087      	sub	sp, #28
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f023 0210 	bic.w	r2, r3, #16
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	031b      	lsls	r3, r3, #12
 80062fe:	b29b      	uxth	r3, r3
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800630c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	621a      	str	r2, [r3, #32]
}
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f023 0210 	bic.w	r2, r3, #16
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800635e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	031b      	lsls	r3, r3, #12
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 0303 	bic.w	r3, r3, #3
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006438:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800644a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	031b      	lsls	r3, r3, #12
 8006450:	b29b      	uxth	r3, r3
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800645e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	031b      	lsls	r3, r3, #12
 8006464:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f043 0307 	orr.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	431a      	orrs	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2201      	movs	r2, #1
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1a      	ldr	r2, [r3, #32]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	43db      	mvns	r3, r3
 800651e:	401a      	ands	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	431a      	orrs	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800655c:	2302      	movs	r3, #2
 800655e:	e05a      	b.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a21      	ldr	r2, [pc, #132]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d022      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d01d      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d018      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1a      	ldr	r2, [pc, #104]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00e      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a18      	ldr	r2, [pc, #96]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d009      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d10c      	bne.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800
 8006630:	40000c00 	.word	0x40000c00
 8006634:	40010400 	.word	0x40010400
 8006638:	40014000 	.word	0x40014000
 800663c:	40001800 	.word	0x40001800

08006640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e03f      	b.n	80066fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fb f8c0 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2224      	movs	r2, #36	; 0x24
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fddf 	bl	8007270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b08a      	sub	sp, #40	; 0x28
 8006706:	af02      	add	r7, sp, #8
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	603b      	str	r3, [r7, #0]
 800670e:	4613      	mov	r3, r2
 8006710:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b20      	cmp	r3, #32
 8006720:	d17c      	bne.n	800681c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_UART_Transmit+0x2c>
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e075      	b.n	800681e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_UART_Transmit+0x3e>
 800673c:	2302      	movs	r3, #2
 800673e:	e06e      	b.n	800681e <HAL_UART_Transmit+0x11c>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2221      	movs	r2, #33	; 0x21
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006756:	f7fb fbdf 	bl	8001f18 <HAL_GetTick>
 800675a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006770:	d108      	bne.n	8006784 <HAL_UART_Transmit+0x82>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e003      	b.n	800678c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006794:	e02a      	b.n	80067ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2200      	movs	r2, #0
 800679e:	2180      	movs	r1, #128	; 0x80
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fb1f 	bl	8006de4 <UART_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e036      	b.n	800681e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	3302      	adds	r3, #2
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e007      	b.n	80067de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	3301      	adds	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1cf      	bne.n	8006796 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2200      	movs	r2, #0
 80067fe:	2140      	movs	r1, #64	; 0x40
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 faef 	bl	8006de4 <UART_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e006      	b.n	800681e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e000      	b.n	800681e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	4613      	mov	r3, r2
 8006832:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b20      	cmp	r3, #32
 800683e:	d11d      	bne.n	800687c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_UART_Receive_IT+0x26>
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e016      	b.n	800687e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_UART_Receive_IT+0x38>
 800685a:	2302      	movs	r3, #2
 800685c:	e00f      	b.n	800687e <HAL_UART_Receive_IT+0x58>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800686c:	88fb      	ldrh	r3, [r7, #6]
 800686e:	461a      	mov	r2, r3
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fb24 	bl	8006ec0 <UART_Start_Receive_IT>
 8006878:	4603      	mov	r3, r0
 800687a:	e000      	b.n	800687e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b0ba      	sub	sp, #232	; 0xe8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10f      	bne.n	80068ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <HAL_UART_IRQHandler+0x66>
 80068da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fc07 	bl	80070fa <UART_Receive_IT>
      return;
 80068ec:	e256      	b.n	8006d9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80de 	beq.w	8006ab4 <HAL_UART_IRQHandler+0x22c>
 80068f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006908:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80d1 	beq.w	8006ab4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <HAL_UART_IRQHandler+0xae>
 800691e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f043 0201 	orr.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <HAL_UART_IRQHandler+0xd2>
 8006942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0202 	orr.w	r2, r3, #2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800695a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <HAL_UART_IRQHandler+0xf6>
 8006966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f043 0204 	orr.w	r2, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d011      	beq.n	80069ae <HAL_UART_IRQHandler+0x126>
 800698a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b00      	cmp	r3, #0
 8006994:	d105      	bne.n	80069a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f043 0208 	orr.w	r2, r3, #8
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 81ed 	beq.w	8006d92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <HAL_UART_IRQHandler+0x14e>
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fb92 	bl	80070fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	bf0c      	ite	eq
 80069e4:	2301      	moveq	r3, #1
 80069e6:	2300      	movne	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <HAL_UART_IRQHandler+0x17a>
 80069fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d04f      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa9a 	bl	8006f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d141      	bne.n	8006a9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3314      	adds	r3, #20
 8006a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3314      	adds	r3, #20
 8006a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1d9      	bne.n	8006a16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d013      	beq.n	8006a92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	4a7d      	ldr	r2, [pc, #500]	; (8006c64 <HAL_UART_IRQHandler+0x3dc>)
 8006a70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fc f88b 	bl	8002b92 <HAL_DMA_Abort_IT>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	e00e      	b.n	8006ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f990 	bl	8006db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a98:	e00a      	b.n	8006ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f98c 	bl	8006db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	e006      	b.n	8006ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f988 	bl	8006db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006aae:	e170      	b.n	8006d92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	bf00      	nop
    return;
 8006ab2:	e16e      	b.n	8006d92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	f040 814a 	bne.w	8006d52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8143 	beq.w	8006d52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 813c 	beq.w	8006d52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	60bb      	str	r3, [r7, #8]
 8006aee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afa:	2b40      	cmp	r3, #64	; 0x40
 8006afc:	f040 80b4 	bne.w	8006c68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8140 	beq.w	8006d96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	f080 8139 	bcs.w	8006d96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b36:	f000 8088 	beq.w	8006c4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1d9      	bne.n	8006b3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3314      	adds	r3, #20
 8006ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006baa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e1      	bne.n	8006b86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3314      	adds	r3, #20
 8006bc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e3      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e3      	bne.n	8006c08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fb ff34 	bl	8002ab2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f8b6 	bl	8006dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c60:	e099      	b.n	8006d96 <HAL_UART_IRQHandler+0x50e>
 8006c62:	bf00      	nop
 8006c64:	08007003 	.word	0x08007003
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 808b 	beq.w	8006d9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8086 	beq.w	8006d9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cb2:	647a      	str	r2, [r7, #68]	; 0x44
 8006cb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e3      	bne.n	8006c8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3314      	adds	r3, #20
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cea:	633a      	str	r2, [r7, #48]	; 0x30
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e3      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d30:	61fa      	str	r2, [r7, #28]
 8006d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	69b9      	ldr	r1, [r7, #24]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e3      	bne.n	8006d0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f83e 	bl	8006dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d50:	e023      	b.n	8006d9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <HAL_UART_IRQHandler+0x4ea>
 8006d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f95d 	bl	800702a <UART_Transmit_IT>
    return;
 8006d70:	e014      	b.n	8006d9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00e      	beq.n	8006d9c <HAL_UART_IRQHandler+0x514>
 8006d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f99d 	bl	80070ca <UART_EndTransmit_IT>
    return;
 8006d90:	e004      	b.n	8006d9c <HAL_UART_IRQHandler+0x514>
    return;
 8006d92:	bf00      	nop
 8006d94:	e002      	b.n	8006d9c <HAL_UART_IRQHandler+0x514>
      return;
 8006d96:	bf00      	nop
 8006d98:	e000      	b.n	8006d9c <HAL_UART_IRQHandler+0x514>
      return;
 8006d9a:	bf00      	nop
  }
}
 8006d9c:	37e8      	adds	r7, #232	; 0xe8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b090      	sub	sp, #64	; 0x40
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df4:	e050      	b.n	8006e98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d04c      	beq.n	8006e98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e04:	f7fb f888 	bl	8001f18 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d241      	bcs.n	8006e98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e34:	637a      	str	r2, [r7, #52]	; 0x34
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e5      	bne.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3314      	adds	r3, #20
 8006e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	613b      	str	r3, [r7, #16]
   return(result);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e68:	623a      	str	r2, [r7, #32]
 8006e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	69f9      	ldr	r1, [r7, #28]
 8006e6e:	6a3a      	ldr	r2, [r7, #32]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e00f      	b.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	bf0c      	ite	eq
 8006ea8:	2301      	moveq	r3, #1
 8006eaa:	2300      	movne	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d09f      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3740      	adds	r7, #64	; 0x40
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	88fa      	ldrh	r2, [r7, #6]
 8006ede:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2222      	movs	r2, #34	; 0x22
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695a      	ldr	r2, [r3, #20]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0220 	orr.w	r2, r2, #32
 8006f2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b095      	sub	sp, #84	; 0x54
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f64:	643a      	str	r2, [r7, #64]	; 0x40
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e5      	bne.n	8006f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3314      	adds	r3, #20
 8006f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3314      	adds	r3, #20
 8006f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d119      	bne.n	8006fe8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f023 0310 	bic.w	r3, r3, #16
 8006fca:	647b      	str	r3, [r7, #68]	; 0x44
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	330c      	adds	r3, #12
 8006fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd4:	61ba      	str	r2, [r7, #24]
 8006fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6979      	ldr	r1, [r7, #20]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e5      	bne.n	8006fb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ff6:	bf00      	nop
 8006ff8:	3754      	adds	r7, #84	; 0x54
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff fecb 	bl	8006db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b21      	cmp	r3, #33	; 0x21
 800703c:	d13e      	bne.n	80070bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007046:	d114      	bne.n	8007072 <UART_Transmit_IT+0x48>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d110      	bne.n	8007072 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007064:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	1c9a      	adds	r2, r3, #2
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	621a      	str	r2, [r3, #32]
 8007070:	e008      	b.n	8007084 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	1c59      	adds	r1, r3, #1
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6211      	str	r1, [r2, #32]
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29b      	uxth	r3, r3
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	4619      	mov	r1, r3
 8007092:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10f      	bne.n	80070b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff fe5a 	bl	8006da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b08c      	sub	sp, #48	; 0x30
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b22      	cmp	r3, #34	; 0x22
 800710c:	f040 80ab 	bne.w	8007266 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007118:	d117      	bne.n	800714a <UART_Receive_IT+0x50>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d113      	bne.n	800714a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007138:	b29a      	uxth	r2, r3
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	1c9a      	adds	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	629a      	str	r2, [r3, #40]	; 0x28
 8007148:	e026      	b.n	8007198 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715c:	d007      	beq.n	800716e <UART_Receive_IT+0x74>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <UART_Receive_IT+0x82>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	b2da      	uxtb	r2, r3
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	e008      	b.n	800718e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007188:	b2da      	uxtb	r2, r3
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4619      	mov	r1, r3
 80071a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d15a      	bne.n	8007262 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0220 	bic.w	r2, r2, #32
 80071ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d135      	bne.n	8007258 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	613b      	str	r3, [r7, #16]
   return(result);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f023 0310 	bic.w	r3, r3, #16
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007212:	623a      	str	r2, [r7, #32]
 8007214:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	69f9      	ldr	r1, [r7, #28]
 8007218:	6a3a      	ldr	r2, [r7, #32]
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e5      	bne.n	80071f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b10      	cmp	r3, #16
 8007232:	d10a      	bne.n	800724a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff fdbb 	bl	8006dcc <HAL_UARTEx_RxEventCallback>
 8007256:	e002      	b.n	800725e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fa fd15 	bl	8001c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	e002      	b.n	8007268 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e000      	b.n	8007268 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007266:	2302      	movs	r3, #2
  }
}
 8007268:	4618      	mov	r0, r3
 800726a:	3730      	adds	r7, #48	; 0x30
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007274:	b0c0      	sub	sp, #256	; 0x100
 8007276:	af00      	add	r7, sp, #0
 8007278:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728c:	68d9      	ldr	r1, [r3, #12]
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	ea40 0301 	orr.w	r3, r0, r1
 8007298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072c8:	f021 010c 	bic.w	r1, r1, #12
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072d6:	430b      	orrs	r3, r1
 80072d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	6999      	ldr	r1, [r3, #24]
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	ea40 0301 	orr.w	r3, r0, r1
 80072f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b8f      	ldr	r3, [pc, #572]	; (800753c <UART_SetConfig+0x2cc>)
 8007300:	429a      	cmp	r2, r3
 8007302:	d005      	beq.n	8007310 <UART_SetConfig+0xa0>
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <UART_SetConfig+0x2d0>)
 800730c:	429a      	cmp	r2, r3
 800730e:	d104      	bne.n	800731a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007310:	f7fd f8e2 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8007314:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007318:	e003      	b.n	8007322 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800731a:	f7fd f8c9 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 800731e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732c:	f040 810c 	bne.w	8007548 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007334:	2200      	movs	r2, #0
 8007336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800733a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800733e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007342:	4622      	mov	r2, r4
 8007344:	462b      	mov	r3, r5
 8007346:	1891      	adds	r1, r2, r2
 8007348:	65b9      	str	r1, [r7, #88]	; 0x58
 800734a:	415b      	adcs	r3, r3
 800734c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800734e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007352:	4621      	mov	r1, r4
 8007354:	eb12 0801 	adds.w	r8, r2, r1
 8007358:	4629      	mov	r1, r5
 800735a:	eb43 0901 	adc.w	r9, r3, r1
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800736a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800736e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007372:	4690      	mov	r8, r2
 8007374:	4699      	mov	r9, r3
 8007376:	4623      	mov	r3, r4
 8007378:	eb18 0303 	adds.w	r3, r8, r3
 800737c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007380:	462b      	mov	r3, r5
 8007382:	eb49 0303 	adc.w	r3, r9, r3
 8007386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007396:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800739a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800739e:	460b      	mov	r3, r1
 80073a0:	18db      	adds	r3, r3, r3
 80073a2:	653b      	str	r3, [r7, #80]	; 0x50
 80073a4:	4613      	mov	r3, r2
 80073a6:	eb42 0303 	adc.w	r3, r2, r3
 80073aa:	657b      	str	r3, [r7, #84]	; 0x54
 80073ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073b4:	f7f8 ff6c 	bl	8000290 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4b61      	ldr	r3, [pc, #388]	; (8007544 <UART_SetConfig+0x2d4>)
 80073be:	fba3 2302 	umull	r2, r3, r3, r2
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	011c      	lsls	r4, r3, #4
 80073c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	1891      	adds	r1, r2, r2
 80073de:	64b9      	str	r1, [r7, #72]	; 0x48
 80073e0:	415b      	adcs	r3, r3
 80073e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073e8:	4641      	mov	r1, r8
 80073ea:	eb12 0a01 	adds.w	sl, r2, r1
 80073ee:	4649      	mov	r1, r9
 80073f0:	eb43 0b01 	adc.w	fp, r3, r1
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007400:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007408:	4692      	mov	sl, r2
 800740a:	469b      	mov	fp, r3
 800740c:	4643      	mov	r3, r8
 800740e:	eb1a 0303 	adds.w	r3, sl, r3
 8007412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007416:	464b      	mov	r3, r9
 8007418:	eb4b 0303 	adc.w	r3, fp, r3
 800741c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800742c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007430:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007434:	460b      	mov	r3, r1
 8007436:	18db      	adds	r3, r3, r3
 8007438:	643b      	str	r3, [r7, #64]	; 0x40
 800743a:	4613      	mov	r3, r2
 800743c:	eb42 0303 	adc.w	r3, r2, r3
 8007440:	647b      	str	r3, [r7, #68]	; 0x44
 8007442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007446:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800744a:	f7f8 ff21 	bl	8000290 <__aeabi_uldivmod>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4611      	mov	r1, r2
 8007454:	4b3b      	ldr	r3, [pc, #236]	; (8007544 <UART_SetConfig+0x2d4>)
 8007456:	fba3 2301 	umull	r2, r3, r3, r1
 800745a:	095b      	lsrs	r3, r3, #5
 800745c:	2264      	movs	r2, #100	; 0x64
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	1acb      	subs	r3, r1, r3
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800746a:	4b36      	ldr	r3, [pc, #216]	; (8007544 <UART_SetConfig+0x2d4>)
 800746c:	fba3 2302 	umull	r2, r3, r3, r2
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007478:	441c      	add	r4, r3
 800747a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800747e:	2200      	movs	r2, #0
 8007480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007484:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007488:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	1891      	adds	r1, r2, r2
 8007492:	63b9      	str	r1, [r7, #56]	; 0x38
 8007494:	415b      	adcs	r3, r3
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800749c:	4641      	mov	r1, r8
 800749e:	1851      	adds	r1, r2, r1
 80074a0:	6339      	str	r1, [r7, #48]	; 0x30
 80074a2:	4649      	mov	r1, r9
 80074a4:	414b      	adcs	r3, r1
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074b4:	4659      	mov	r1, fp
 80074b6:	00cb      	lsls	r3, r1, #3
 80074b8:	4651      	mov	r1, sl
 80074ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074be:	4651      	mov	r1, sl
 80074c0:	00ca      	lsls	r2, r1, #3
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	4642      	mov	r2, r8
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074d0:	464b      	mov	r3, r9
 80074d2:	460a      	mov	r2, r1
 80074d4:	eb42 0303 	adc.w	r3, r2, r3
 80074d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074f0:	460b      	mov	r3, r1
 80074f2:	18db      	adds	r3, r3, r3
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f6:	4613      	mov	r3, r2
 80074f8:	eb42 0303 	adc.w	r3, r2, r3
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007502:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007506:	f7f8 fec3 	bl	8000290 <__aeabi_uldivmod>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4b0d      	ldr	r3, [pc, #52]	; (8007544 <UART_SetConfig+0x2d4>)
 8007510:	fba3 1302 	umull	r1, r3, r3, r2
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	2164      	movs	r1, #100	; 0x64
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	3332      	adds	r3, #50	; 0x32
 8007522:	4a08      	ldr	r2, [pc, #32]	; (8007544 <UART_SetConfig+0x2d4>)
 8007524:	fba2 2303 	umull	r2, r3, r2, r3
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	f003 0207 	and.w	r2, r3, #7
 800752e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4422      	add	r2, r4
 8007536:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007538:	e105      	b.n	8007746 <UART_SetConfig+0x4d6>
 800753a:	bf00      	nop
 800753c:	40011000 	.word	0x40011000
 8007540:	40011400 	.word	0x40011400
 8007544:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800754c:	2200      	movs	r2, #0
 800754e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800755a:	4642      	mov	r2, r8
 800755c:	464b      	mov	r3, r9
 800755e:	1891      	adds	r1, r2, r2
 8007560:	6239      	str	r1, [r7, #32]
 8007562:	415b      	adcs	r3, r3
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
 8007566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800756a:	4641      	mov	r1, r8
 800756c:	1854      	adds	r4, r2, r1
 800756e:	4649      	mov	r1, r9
 8007570:	eb43 0501 	adc.w	r5, r3, r1
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	00eb      	lsls	r3, r5, #3
 800757e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007582:	00e2      	lsls	r2, r4, #3
 8007584:	4614      	mov	r4, r2
 8007586:	461d      	mov	r5, r3
 8007588:	4643      	mov	r3, r8
 800758a:	18e3      	adds	r3, r4, r3
 800758c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007590:	464b      	mov	r3, r9
 8007592:	eb45 0303 	adc.w	r3, r5, r3
 8007596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800759a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075b6:	4629      	mov	r1, r5
 80075b8:	008b      	lsls	r3, r1, #2
 80075ba:	4621      	mov	r1, r4
 80075bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c0:	4621      	mov	r1, r4
 80075c2:	008a      	lsls	r2, r1, #2
 80075c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075c8:	f7f8 fe62 	bl	8000290 <__aeabi_uldivmod>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4b60      	ldr	r3, [pc, #384]	; (8007754 <UART_SetConfig+0x4e4>)
 80075d2:	fba3 2302 	umull	r2, r3, r3, r2
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	011c      	lsls	r4, r3, #4
 80075da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075ec:	4642      	mov	r2, r8
 80075ee:	464b      	mov	r3, r9
 80075f0:	1891      	adds	r1, r2, r2
 80075f2:	61b9      	str	r1, [r7, #24]
 80075f4:	415b      	adcs	r3, r3
 80075f6:	61fb      	str	r3, [r7, #28]
 80075f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075fc:	4641      	mov	r1, r8
 80075fe:	1851      	adds	r1, r2, r1
 8007600:	6139      	str	r1, [r7, #16]
 8007602:	4649      	mov	r1, r9
 8007604:	414b      	adcs	r3, r1
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007614:	4659      	mov	r1, fp
 8007616:	00cb      	lsls	r3, r1, #3
 8007618:	4651      	mov	r1, sl
 800761a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761e:	4651      	mov	r1, sl
 8007620:	00ca      	lsls	r2, r1, #3
 8007622:	4610      	mov	r0, r2
 8007624:	4619      	mov	r1, r3
 8007626:	4603      	mov	r3, r0
 8007628:	4642      	mov	r2, r8
 800762a:	189b      	adds	r3, r3, r2
 800762c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007630:	464b      	mov	r3, r9
 8007632:	460a      	mov	r2, r1
 8007634:	eb42 0303 	adc.w	r3, r2, r3
 8007638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	67bb      	str	r3, [r7, #120]	; 0x78
 8007646:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007654:	4649      	mov	r1, r9
 8007656:	008b      	lsls	r3, r1, #2
 8007658:	4641      	mov	r1, r8
 800765a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800765e:	4641      	mov	r1, r8
 8007660:	008a      	lsls	r2, r1, #2
 8007662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007666:	f7f8 fe13 	bl	8000290 <__aeabi_uldivmod>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4b39      	ldr	r3, [pc, #228]	; (8007754 <UART_SetConfig+0x4e4>)
 8007670:	fba3 1302 	umull	r1, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	2164      	movs	r1, #100	; 0x64
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	3332      	adds	r3, #50	; 0x32
 8007682:	4a34      	ldr	r2, [pc, #208]	; (8007754 <UART_SetConfig+0x4e4>)
 8007684:	fba2 2303 	umull	r2, r3, r2, r3
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800768e:	441c      	add	r4, r3
 8007690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007694:	2200      	movs	r2, #0
 8007696:	673b      	str	r3, [r7, #112]	; 0x70
 8007698:	677a      	str	r2, [r7, #116]	; 0x74
 800769a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800769e:	4642      	mov	r2, r8
 80076a0:	464b      	mov	r3, r9
 80076a2:	1891      	adds	r1, r2, r2
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	415b      	adcs	r3, r3
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ae:	4641      	mov	r1, r8
 80076b0:	1851      	adds	r1, r2, r1
 80076b2:	6039      	str	r1, [r7, #0]
 80076b4:	4649      	mov	r1, r9
 80076b6:	414b      	adcs	r3, r1
 80076b8:	607b      	str	r3, [r7, #4]
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076c6:	4659      	mov	r1, fp
 80076c8:	00cb      	lsls	r3, r1, #3
 80076ca:	4651      	mov	r1, sl
 80076cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076d0:	4651      	mov	r1, sl
 80076d2:	00ca      	lsls	r2, r1, #3
 80076d4:	4610      	mov	r0, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	4603      	mov	r3, r0
 80076da:	4642      	mov	r2, r8
 80076dc:	189b      	adds	r3, r3, r2
 80076de:	66bb      	str	r3, [r7, #104]	; 0x68
 80076e0:	464b      	mov	r3, r9
 80076e2:	460a      	mov	r2, r1
 80076e4:	eb42 0303 	adc.w	r3, r2, r3
 80076e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	663b      	str	r3, [r7, #96]	; 0x60
 80076f4:	667a      	str	r2, [r7, #100]	; 0x64
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007702:	4649      	mov	r1, r9
 8007704:	008b      	lsls	r3, r1, #2
 8007706:	4641      	mov	r1, r8
 8007708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800770c:	4641      	mov	r1, r8
 800770e:	008a      	lsls	r2, r1, #2
 8007710:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007714:	f7f8 fdbc 	bl	8000290 <__aeabi_uldivmod>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <UART_SetConfig+0x4e4>)
 800771e:	fba3 1302 	umull	r1, r3, r3, r2
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2164      	movs	r1, #100	; 0x64
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	3332      	adds	r3, #50	; 0x32
 8007730:	4a08      	ldr	r2, [pc, #32]	; (8007754 <UART_SetConfig+0x4e4>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4422      	add	r2, r4
 8007744:	609a      	str	r2, [r3, #8]
}
 8007746:	bf00      	nop
 8007748:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800774c:	46bd      	mov	sp, r7
 800774e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007752:	bf00      	nop
 8007754:	51eb851f 	.word	0x51eb851f

08007758 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007758:	b084      	sub	sp, #16
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	f107 001c 	add.w	r0, r7, #28
 8007766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	2b01      	cmp	r3, #1
 800776e:	d122      	bne.n	80077b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 faa2 	bl	8007cf4 <USB_CoreReset>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e01a      	b.n	80077ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa96 	bl	8007cf4 <USB_CoreReset>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
 80077de:	e005      	b.n	80077ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d10b      	bne.n	800780a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f043 0206 	orr.w	r2, r3, #6
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f043 0220 	orr.w	r2, r3, #32
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007816:	b004      	add	sp, #16
 8007818:	4770      	bx	lr

0800781a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f023 0201 	bic.w	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d115      	bne.n	800788a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800786a:	2001      	movs	r0, #1
 800786c:	f7fa fb60 	bl	8001f30 <HAL_Delay>
      ms++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa2e 	bl	8007cd8 <USB_GetMode>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d01e      	beq.n	80078c0 <USB_SetCurrentMode+0x84>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b31      	cmp	r3, #49	; 0x31
 8007886:	d9f0      	bls.n	800786a <USB_SetCurrentMode+0x2e>
 8007888:	e01a      	b.n	80078c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d115      	bne.n	80078bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800789c:	2001      	movs	r0, #1
 800789e:	f7fa fb47 	bl	8001f30 <HAL_Delay>
      ms++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3301      	adds	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa15 	bl	8007cd8 <USB_GetMode>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <USB_SetCurrentMode+0x84>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b31      	cmp	r3, #49	; 0x31
 80078b8:	d9f0      	bls.n	800789c <USB_SetCurrentMode+0x60>
 80078ba:	e001      	b.n	80078c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e005      	b.n	80078cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b32      	cmp	r3, #50	; 0x32
 80078c4:	d101      	bne.n	80078ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078d4:	b084      	sub	sp, #16
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b086      	sub	sp, #24
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078ee:	2300      	movs	r3, #0
 80078f0:	613b      	str	r3, [r7, #16]
 80078f2:	e009      	b.n	8007908 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3340      	adds	r3, #64	; 0x40
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	2200      	movs	r2, #0
 8007900:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	3301      	adds	r3, #1
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b0e      	cmp	r3, #14
 800790c:	d9f2      	bls.n	80078f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800790e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d11c      	bne.n	800794e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007922:	f043 0302 	orr.w	r3, r3, #2
 8007926:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	639a      	str	r2, [r3, #56]	; 0x38
 800794c:	e00b      	b.n	8007966 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007978:	4619      	mov	r1, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	461a      	mov	r2, r3
 8007982:	680b      	ldr	r3, [r1, #0]
 8007984:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	2b01      	cmp	r3, #1
 800798a:	d10c      	bne.n	80079a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007992:	2100      	movs	r1, #0
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f965 	bl	8007c64 <USB_SetDevSpeed>
 800799a:	e008      	b.n	80079ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800799c:	2101      	movs	r1, #1
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f960 	bl	8007c64 <USB_SetDevSpeed>
 80079a4:	e003      	b.n	80079ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079a6:	2103      	movs	r1, #3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f95b 	bl	8007c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ae:	2110      	movs	r1, #16
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f8f3 	bl	8007b9c <USB_FlushTxFifo>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f91f 	bl	8007c04 <USB_FlushRxFifo>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	461a      	mov	r2, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	461a      	mov	r2, r3
 80079e4:	2300      	movs	r3, #0
 80079e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	461a      	mov	r2, r3
 80079f0:	2300      	movs	r3, #0
 80079f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f4:	2300      	movs	r3, #0
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	e043      	b.n	8007a82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a10:	d118      	bne.n	8007a44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a24:	461a      	mov	r2, r3
 8007a26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	e013      	b.n	8007a56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e008      	b.n	8007a56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	461a      	mov	r2, r3
 8007a52:	2300      	movs	r3, #0
 8007a54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	461a      	mov	r2, r3
 8007a64:	2300      	movs	r3, #0
 8007a66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a74:	461a      	mov	r2, r3
 8007a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d3b7      	bcc.n	80079fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	e043      	b.n	8007b18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa6:	d118      	bne.n	8007ada <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	461a      	mov	r2, r3
 8007abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e013      	b.n	8007aec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	e008      	b.n	8007aec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3301      	adds	r3, #1
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d3b7      	bcc.n	8007a90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f043 0210 	orr.w	r2, r3, #16
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <USB_DevInit+0x2c4>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f043 0208 	orr.w	r2, r3, #8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d107      	bne.n	8007b88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b80:	f043 0304 	orr.w	r3, r3, #4
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b94:	b004      	add	sp, #16
 8007b96:	4770      	bx	lr
 8007b98:	803c3800 	.word	0x803c3800

08007b9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a13      	ldr	r2, [pc, #76]	; (8007c00 <USB_FlushTxFifo+0x64>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e01b      	b.n	8007bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	daf2      	bge.n	8007baa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	019b      	lsls	r3, r3, #6
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <USB_FlushTxFifo+0x64>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d901      	bls.n	8007be6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e006      	b.n	8007bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d0f0      	beq.n	8007bd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	00030d40 	.word	0x00030d40

08007c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <USB_FlushRxFifo+0x5c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d901      	bls.n	8007c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e018      	b.n	8007c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	daf2      	bge.n	8007c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2210      	movs	r2, #16
 8007c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a08      	ldr	r2, [pc, #32]	; (8007c60 <USB_FlushRxFifo+0x5c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d901      	bls.n	8007c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e006      	b.n	8007c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d0f0      	beq.n	8007c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	00030d40 	.word	0x00030d40

08007c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cb0:	f023 0303 	bic.w	r3, r3, #3
 8007cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc4:	f043 0302 	orr.w	r3, r3, #2
 8007cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <USB_CoreReset+0x64>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e01b      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	daf2      	bge.n	8007d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f043 0201 	orr.w	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <USB_CoreReset+0x64>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d901      	bls.n	8007d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d0f0      	beq.n	8007d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	00030d40 	.word	0x00030d40

08007d5c <__errno>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <__errno+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000010 	.word	0x20000010

08007d68 <__libc_init_array>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4d0d      	ldr	r5, [pc, #52]	; (8007da0 <__libc_init_array+0x38>)
 8007d6c:	4c0d      	ldr	r4, [pc, #52]	; (8007da4 <__libc_init_array+0x3c>)
 8007d6e:	1b64      	subs	r4, r4, r5
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	2600      	movs	r6, #0
 8007d74:	42a6      	cmp	r6, r4
 8007d76:	d109      	bne.n	8007d8c <__libc_init_array+0x24>
 8007d78:	4d0b      	ldr	r5, [pc, #44]	; (8007da8 <__libc_init_array+0x40>)
 8007d7a:	4c0c      	ldr	r4, [pc, #48]	; (8007dac <__libc_init_array+0x44>)
 8007d7c:	f001 f824 	bl	8008dc8 <_init>
 8007d80:	1b64      	subs	r4, r4, r5
 8007d82:	10a4      	asrs	r4, r4, #2
 8007d84:	2600      	movs	r6, #0
 8007d86:	42a6      	cmp	r6, r4
 8007d88:	d105      	bne.n	8007d96 <__libc_init_array+0x2e>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d90:	4798      	blx	r3
 8007d92:	3601      	adds	r6, #1
 8007d94:	e7ee      	b.n	8007d74 <__libc_init_array+0xc>
 8007d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9a:	4798      	blx	r3
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	e7f2      	b.n	8007d86 <__libc_init_array+0x1e>
 8007da0:	08008f5c 	.word	0x08008f5c
 8007da4:	08008f5c 	.word	0x08008f5c
 8007da8:	08008f5c 	.word	0x08008f5c
 8007dac:	08008f60 	.word	0x08008f60

08007db0 <memset>:
 8007db0:	4402      	add	r2, r0
 8007db2:	4603      	mov	r3, r0
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d100      	bne.n	8007dba <memset+0xa>
 8007db8:	4770      	bx	lr
 8007dba:	f803 1b01 	strb.w	r1, [r3], #1
 8007dbe:	e7f9      	b.n	8007db4 <memset+0x4>

08007dc0 <iprintf>:
 8007dc0:	b40f      	push	{r0, r1, r2, r3}
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <iprintf+0x2c>)
 8007dc4:	b513      	push	{r0, r1, r4, lr}
 8007dc6:	681c      	ldr	r4, [r3, #0]
 8007dc8:	b124      	cbz	r4, 8007dd4 <iprintf+0x14>
 8007dca:	69a3      	ldr	r3, [r4, #24]
 8007dcc:	b913      	cbnz	r3, 8007dd4 <iprintf+0x14>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 fa5e 	bl	8008290 <__sinit>
 8007dd4:	ab05      	add	r3, sp, #20
 8007dd6:	9a04      	ldr	r2, [sp, #16]
 8007dd8:	68a1      	ldr	r1, [r4, #8]
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 fc67 	bl	80086b0 <_vfiprintf_r>
 8007de2:	b002      	add	sp, #8
 8007de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de8:	b004      	add	sp, #16
 8007dea:	4770      	bx	lr
 8007dec:	20000010 	.word	0x20000010

08007df0 <_puts_r>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	460e      	mov	r6, r1
 8007df4:	4605      	mov	r5, r0
 8007df6:	b118      	cbz	r0, 8007e00 <_puts_r+0x10>
 8007df8:	6983      	ldr	r3, [r0, #24]
 8007dfa:	b90b      	cbnz	r3, 8007e00 <_puts_r+0x10>
 8007dfc:	f000 fa48 	bl	8008290 <__sinit>
 8007e00:	69ab      	ldr	r3, [r5, #24]
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	b913      	cbnz	r3, 8007e0c <_puts_r+0x1c>
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 fa42 	bl	8008290 <__sinit>
 8007e0c:	4b2c      	ldr	r3, [pc, #176]	; (8007ec0 <_puts_r+0xd0>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d120      	bne.n	8007e54 <_puts_r+0x64>
 8007e12:	686c      	ldr	r4, [r5, #4]
 8007e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e16:	07db      	lsls	r3, r3, #31
 8007e18:	d405      	bmi.n	8007e26 <_puts_r+0x36>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	0598      	lsls	r0, r3, #22
 8007e1e:	d402      	bmi.n	8007e26 <_puts_r+0x36>
 8007e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e22:	f000 fad3 	bl	80083cc <__retarget_lock_acquire_recursive>
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	0719      	lsls	r1, r3, #28
 8007e2a:	d51d      	bpl.n	8007e68 <_puts_r+0x78>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	b1db      	cbz	r3, 8007e68 <_puts_r+0x78>
 8007e30:	3e01      	subs	r6, #1
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	60a3      	str	r3, [r4, #8]
 8007e3c:	bb39      	cbnz	r1, 8007e8e <_puts_r+0x9e>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	da38      	bge.n	8007eb4 <_puts_r+0xc4>
 8007e42:	4622      	mov	r2, r4
 8007e44:	210a      	movs	r1, #10
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f848 	bl	8007edc <__swbuf_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d011      	beq.n	8007e74 <_puts_r+0x84>
 8007e50:	250a      	movs	r5, #10
 8007e52:	e011      	b.n	8007e78 <_puts_r+0x88>
 8007e54:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <_puts_r+0xd4>)
 8007e56:	429c      	cmp	r4, r3
 8007e58:	d101      	bne.n	8007e5e <_puts_r+0x6e>
 8007e5a:	68ac      	ldr	r4, [r5, #8]
 8007e5c:	e7da      	b.n	8007e14 <_puts_r+0x24>
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <_puts_r+0xd8>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	bf08      	it	eq
 8007e64:	68ec      	ldreq	r4, [r5, #12]
 8007e66:	e7d5      	b.n	8007e14 <_puts_r+0x24>
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 f888 	bl	8007f80 <__swsetup_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d0dd      	beq.n	8007e30 <_puts_r+0x40>
 8007e74:	f04f 35ff 	mov.w	r5, #4294967295
 8007e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e7a:	07da      	lsls	r2, r3, #31
 8007e7c:	d405      	bmi.n	8007e8a <_puts_r+0x9a>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	059b      	lsls	r3, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_puts_r+0x9a>
 8007e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e86:	f000 faa2 	bl	80083ce <__retarget_lock_release_recursive>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	da04      	bge.n	8007e9c <_puts_r+0xac>
 8007e92:	69a2      	ldr	r2, [r4, #24]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	dc06      	bgt.n	8007ea6 <_puts_r+0xb6>
 8007e98:	290a      	cmp	r1, #10
 8007e9a:	d004      	beq.n	8007ea6 <_puts_r+0xb6>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	7019      	strb	r1, [r3, #0]
 8007ea4:	e7c5      	b.n	8007e32 <_puts_r+0x42>
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 f817 	bl	8007edc <__swbuf_r>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d1bf      	bne.n	8007e32 <_puts_r+0x42>
 8007eb2:	e7df      	b.n	8007e74 <_puts_r+0x84>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	250a      	movs	r5, #10
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	6022      	str	r2, [r4, #0]
 8007ebc:	701d      	strb	r5, [r3, #0]
 8007ebe:	e7db      	b.n	8007e78 <_puts_r+0x88>
 8007ec0:	08008ee0 	.word	0x08008ee0
 8007ec4:	08008f00 	.word	0x08008f00
 8007ec8:	08008ec0 	.word	0x08008ec0

08007ecc <puts>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <puts+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f7ff bf8d 	b.w	8007df0 <_puts_r>
 8007ed6:	bf00      	nop
 8007ed8:	20000010 	.word	0x20000010

08007edc <__swbuf_r>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	460e      	mov	r6, r1
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	b118      	cbz	r0, 8007eee <__swbuf_r+0x12>
 8007ee6:	6983      	ldr	r3, [r0, #24]
 8007ee8:	b90b      	cbnz	r3, 8007eee <__swbuf_r+0x12>
 8007eea:	f000 f9d1 	bl	8008290 <__sinit>
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <__swbuf_r+0x98>)
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	d12b      	bne.n	8007f4c <__swbuf_r+0x70>
 8007ef4:	686c      	ldr	r4, [r5, #4]
 8007ef6:	69a3      	ldr	r3, [r4, #24]
 8007ef8:	60a3      	str	r3, [r4, #8]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	071a      	lsls	r2, r3, #28
 8007efe:	d52f      	bpl.n	8007f60 <__swbuf_r+0x84>
 8007f00:	6923      	ldr	r3, [r4, #16]
 8007f02:	b36b      	cbz	r3, 8007f60 <__swbuf_r+0x84>
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	6820      	ldr	r0, [r4, #0]
 8007f08:	1ac0      	subs	r0, r0, r3
 8007f0a:	6963      	ldr	r3, [r4, #20]
 8007f0c:	b2f6      	uxtb	r6, r6
 8007f0e:	4283      	cmp	r3, r0
 8007f10:	4637      	mov	r7, r6
 8007f12:	dc04      	bgt.n	8007f1e <__swbuf_r+0x42>
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f926 	bl	8008168 <_fflush_r>
 8007f1c:	bb30      	cbnz	r0, 8007f6c <__swbuf_r+0x90>
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	60a3      	str	r3, [r4, #8]
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	6022      	str	r2, [r4, #0]
 8007f2a:	701e      	strb	r6, [r3, #0]
 8007f2c:	6963      	ldr	r3, [r4, #20]
 8007f2e:	3001      	adds	r0, #1
 8007f30:	4283      	cmp	r3, r0
 8007f32:	d004      	beq.n	8007f3e <__swbuf_r+0x62>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	07db      	lsls	r3, r3, #31
 8007f38:	d506      	bpl.n	8007f48 <__swbuf_r+0x6c>
 8007f3a:	2e0a      	cmp	r6, #10
 8007f3c:	d104      	bne.n	8007f48 <__swbuf_r+0x6c>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 f911 	bl	8008168 <_fflush_r>
 8007f46:	b988      	cbnz	r0, 8007f6c <__swbuf_r+0x90>
 8007f48:	4638      	mov	r0, r7
 8007f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <__swbuf_r+0x9c>)
 8007f4e:	429c      	cmp	r4, r3
 8007f50:	d101      	bne.n	8007f56 <__swbuf_r+0x7a>
 8007f52:	68ac      	ldr	r4, [r5, #8]
 8007f54:	e7cf      	b.n	8007ef6 <__swbuf_r+0x1a>
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <__swbuf_r+0xa0>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	bf08      	it	eq
 8007f5c:	68ec      	ldreq	r4, [r5, #12]
 8007f5e:	e7ca      	b.n	8007ef6 <__swbuf_r+0x1a>
 8007f60:	4621      	mov	r1, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 f80c 	bl	8007f80 <__swsetup_r>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d0cb      	beq.n	8007f04 <__swbuf_r+0x28>
 8007f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f70:	e7ea      	b.n	8007f48 <__swbuf_r+0x6c>
 8007f72:	bf00      	nop
 8007f74:	08008ee0 	.word	0x08008ee0
 8007f78:	08008f00 	.word	0x08008f00
 8007f7c:	08008ec0 	.word	0x08008ec0

08007f80 <__swsetup_r>:
 8007f80:	4b32      	ldr	r3, [pc, #200]	; (800804c <__swsetup_r+0xcc>)
 8007f82:	b570      	push	{r4, r5, r6, lr}
 8007f84:	681d      	ldr	r5, [r3, #0]
 8007f86:	4606      	mov	r6, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	b125      	cbz	r5, 8007f96 <__swsetup_r+0x16>
 8007f8c:	69ab      	ldr	r3, [r5, #24]
 8007f8e:	b913      	cbnz	r3, 8007f96 <__swsetup_r+0x16>
 8007f90:	4628      	mov	r0, r5
 8007f92:	f000 f97d 	bl	8008290 <__sinit>
 8007f96:	4b2e      	ldr	r3, [pc, #184]	; (8008050 <__swsetup_r+0xd0>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	d10f      	bne.n	8007fbc <__swsetup_r+0x3c>
 8007f9c:	686c      	ldr	r4, [r5, #4]
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fa4:	0719      	lsls	r1, r3, #28
 8007fa6:	d42c      	bmi.n	8008002 <__swsetup_r+0x82>
 8007fa8:	06dd      	lsls	r5, r3, #27
 8007faa:	d411      	bmi.n	8007fd0 <__swsetup_r+0x50>
 8007fac:	2309      	movs	r3, #9
 8007fae:	6033      	str	r3, [r6, #0]
 8007fb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fb4:	81a3      	strh	r3, [r4, #12]
 8007fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fba:	e03e      	b.n	800803a <__swsetup_r+0xba>
 8007fbc:	4b25      	ldr	r3, [pc, #148]	; (8008054 <__swsetup_r+0xd4>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d101      	bne.n	8007fc6 <__swsetup_r+0x46>
 8007fc2:	68ac      	ldr	r4, [r5, #8]
 8007fc4:	e7eb      	b.n	8007f9e <__swsetup_r+0x1e>
 8007fc6:	4b24      	ldr	r3, [pc, #144]	; (8008058 <__swsetup_r+0xd8>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	bf08      	it	eq
 8007fcc:	68ec      	ldreq	r4, [r5, #12]
 8007fce:	e7e6      	b.n	8007f9e <__swsetup_r+0x1e>
 8007fd0:	0758      	lsls	r0, r3, #29
 8007fd2:	d512      	bpl.n	8007ffa <__swsetup_r+0x7a>
 8007fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fd6:	b141      	cbz	r1, 8007fea <__swsetup_r+0x6a>
 8007fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fdc:	4299      	cmp	r1, r3
 8007fde:	d002      	beq.n	8007fe6 <__swsetup_r+0x66>
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 fa5b 	bl	800849c <_free_r>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	6063      	str	r3, [r4, #4]
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f043 0308 	orr.w	r3, r3, #8
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	6923      	ldr	r3, [r4, #16]
 8008004:	b94b      	cbnz	r3, 800801a <__swsetup_r+0x9a>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800800c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008010:	d003      	beq.n	800801a <__swsetup_r+0x9a>
 8008012:	4621      	mov	r1, r4
 8008014:	4630      	mov	r0, r6
 8008016:	f000 fa01 	bl	800841c <__smakebuf_r>
 800801a:	89a0      	ldrh	r0, [r4, #12]
 800801c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008020:	f010 0301 	ands.w	r3, r0, #1
 8008024:	d00a      	beq.n	800803c <__swsetup_r+0xbc>
 8008026:	2300      	movs	r3, #0
 8008028:	60a3      	str	r3, [r4, #8]
 800802a:	6963      	ldr	r3, [r4, #20]
 800802c:	425b      	negs	r3, r3
 800802e:	61a3      	str	r3, [r4, #24]
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	b943      	cbnz	r3, 8008046 <__swsetup_r+0xc6>
 8008034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008038:	d1ba      	bne.n	8007fb0 <__swsetup_r+0x30>
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	0781      	lsls	r1, r0, #30
 800803e:	bf58      	it	pl
 8008040:	6963      	ldrpl	r3, [r4, #20]
 8008042:	60a3      	str	r3, [r4, #8]
 8008044:	e7f4      	b.n	8008030 <__swsetup_r+0xb0>
 8008046:	2000      	movs	r0, #0
 8008048:	e7f7      	b.n	800803a <__swsetup_r+0xba>
 800804a:	bf00      	nop
 800804c:	20000010 	.word	0x20000010
 8008050:	08008ee0 	.word	0x08008ee0
 8008054:	08008f00 	.word	0x08008f00
 8008058:	08008ec0 	.word	0x08008ec0

0800805c <__sflush_r>:
 800805c:	898a      	ldrh	r2, [r1, #12]
 800805e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008062:	4605      	mov	r5, r0
 8008064:	0710      	lsls	r0, r2, #28
 8008066:	460c      	mov	r4, r1
 8008068:	d458      	bmi.n	800811c <__sflush_r+0xc0>
 800806a:	684b      	ldr	r3, [r1, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dc05      	bgt.n	800807c <__sflush_r+0x20>
 8008070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc02      	bgt.n	800807c <__sflush_r+0x20>
 8008076:	2000      	movs	r0, #0
 8008078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800807e:	2e00      	cmp	r6, #0
 8008080:	d0f9      	beq.n	8008076 <__sflush_r+0x1a>
 8008082:	2300      	movs	r3, #0
 8008084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008088:	682f      	ldr	r7, [r5, #0]
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	d032      	beq.n	80080f4 <__sflush_r+0x98>
 800808e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	075a      	lsls	r2, r3, #29
 8008094:	d505      	bpl.n	80080a2 <__sflush_r+0x46>
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	1ac0      	subs	r0, r0, r3
 800809a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800809c:	b10b      	cbz	r3, 80080a2 <__sflush_r+0x46>
 800809e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	2300      	movs	r3, #0
 80080a4:	4602      	mov	r2, r0
 80080a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b0      	blx	r6
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	d106      	bne.n	80080c2 <__sflush_r+0x66>
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	291d      	cmp	r1, #29
 80080b8:	d82c      	bhi.n	8008114 <__sflush_r+0xb8>
 80080ba:	4a2a      	ldr	r2, [pc, #168]	; (8008164 <__sflush_r+0x108>)
 80080bc:	40ca      	lsrs	r2, r1
 80080be:	07d6      	lsls	r6, r2, #31
 80080c0:	d528      	bpl.n	8008114 <__sflush_r+0xb8>
 80080c2:	2200      	movs	r2, #0
 80080c4:	6062      	str	r2, [r4, #4]
 80080c6:	04d9      	lsls	r1, r3, #19
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	d504      	bpl.n	80080d8 <__sflush_r+0x7c>
 80080ce:	1c42      	adds	r2, r0, #1
 80080d0:	d101      	bne.n	80080d6 <__sflush_r+0x7a>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	b903      	cbnz	r3, 80080d8 <__sflush_r+0x7c>
 80080d6:	6560      	str	r0, [r4, #84]	; 0x54
 80080d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080da:	602f      	str	r7, [r5, #0]
 80080dc:	2900      	cmp	r1, #0
 80080de:	d0ca      	beq.n	8008076 <__sflush_r+0x1a>
 80080e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d002      	beq.n	80080ee <__sflush_r+0x92>
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 f9d7 	bl	800849c <_free_r>
 80080ee:	2000      	movs	r0, #0
 80080f0:	6360      	str	r0, [r4, #52]	; 0x34
 80080f2:	e7c1      	b.n	8008078 <__sflush_r+0x1c>
 80080f4:	6a21      	ldr	r1, [r4, #32]
 80080f6:	2301      	movs	r3, #1
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b0      	blx	r6
 80080fc:	1c41      	adds	r1, r0, #1
 80080fe:	d1c7      	bne.n	8008090 <__sflush_r+0x34>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0c4      	beq.n	8008090 <__sflush_r+0x34>
 8008106:	2b1d      	cmp	r3, #29
 8008108:	d001      	beq.n	800810e <__sflush_r+0xb2>
 800810a:	2b16      	cmp	r3, #22
 800810c:	d101      	bne.n	8008112 <__sflush_r+0xb6>
 800810e:	602f      	str	r7, [r5, #0]
 8008110:	e7b1      	b.n	8008076 <__sflush_r+0x1a>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	e7ad      	b.n	8008078 <__sflush_r+0x1c>
 800811c:	690f      	ldr	r7, [r1, #16]
 800811e:	2f00      	cmp	r7, #0
 8008120:	d0a9      	beq.n	8008076 <__sflush_r+0x1a>
 8008122:	0793      	lsls	r3, r2, #30
 8008124:	680e      	ldr	r6, [r1, #0]
 8008126:	bf08      	it	eq
 8008128:	694b      	ldreq	r3, [r1, #20]
 800812a:	600f      	str	r7, [r1, #0]
 800812c:	bf18      	it	ne
 800812e:	2300      	movne	r3, #0
 8008130:	eba6 0807 	sub.w	r8, r6, r7
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	f1b8 0f00 	cmp.w	r8, #0
 800813a:	dd9c      	ble.n	8008076 <__sflush_r+0x1a>
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008140:	4643      	mov	r3, r8
 8008142:	463a      	mov	r2, r7
 8008144:	4628      	mov	r0, r5
 8008146:	47b0      	blx	r6
 8008148:	2800      	cmp	r0, #0
 800814a:	dc06      	bgt.n	800815a <__sflush_r+0xfe>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	e78e      	b.n	8008078 <__sflush_r+0x1c>
 800815a:	4407      	add	r7, r0
 800815c:	eba8 0800 	sub.w	r8, r8, r0
 8008160:	e7e9      	b.n	8008136 <__sflush_r+0xda>
 8008162:	bf00      	nop
 8008164:	20400001 	.word	0x20400001

08008168 <_fflush_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	690b      	ldr	r3, [r1, #16]
 800816c:	4605      	mov	r5, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b913      	cbnz	r3, 8008178 <_fflush_r+0x10>
 8008172:	2500      	movs	r5, #0
 8008174:	4628      	mov	r0, r5
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	b118      	cbz	r0, 8008182 <_fflush_r+0x1a>
 800817a:	6983      	ldr	r3, [r0, #24]
 800817c:	b90b      	cbnz	r3, 8008182 <_fflush_r+0x1a>
 800817e:	f000 f887 	bl	8008290 <__sinit>
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <_fflush_r+0x6c>)
 8008184:	429c      	cmp	r4, r3
 8008186:	d11b      	bne.n	80081c0 <_fflush_r+0x58>
 8008188:	686c      	ldr	r4, [r5, #4]
 800818a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0ef      	beq.n	8008172 <_fflush_r+0xa>
 8008192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008194:	07d0      	lsls	r0, r2, #31
 8008196:	d404      	bmi.n	80081a2 <_fflush_r+0x3a>
 8008198:	0599      	lsls	r1, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_fflush_r+0x3a>
 800819c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819e:	f000 f915 	bl	80083cc <__retarget_lock_acquire_recursive>
 80081a2:	4628      	mov	r0, r5
 80081a4:	4621      	mov	r1, r4
 80081a6:	f7ff ff59 	bl	800805c <__sflush_r>
 80081aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ac:	07da      	lsls	r2, r3, #31
 80081ae:	4605      	mov	r5, r0
 80081b0:	d4e0      	bmi.n	8008174 <_fflush_r+0xc>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	059b      	lsls	r3, r3, #22
 80081b6:	d4dd      	bmi.n	8008174 <_fflush_r+0xc>
 80081b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ba:	f000 f908 	bl	80083ce <__retarget_lock_release_recursive>
 80081be:	e7d9      	b.n	8008174 <_fflush_r+0xc>
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <_fflush_r+0x70>)
 80081c2:	429c      	cmp	r4, r3
 80081c4:	d101      	bne.n	80081ca <_fflush_r+0x62>
 80081c6:	68ac      	ldr	r4, [r5, #8]
 80081c8:	e7df      	b.n	800818a <_fflush_r+0x22>
 80081ca:	4b04      	ldr	r3, [pc, #16]	; (80081dc <_fflush_r+0x74>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	bf08      	it	eq
 80081d0:	68ec      	ldreq	r4, [r5, #12]
 80081d2:	e7da      	b.n	800818a <_fflush_r+0x22>
 80081d4:	08008ee0 	.word	0x08008ee0
 80081d8:	08008f00 	.word	0x08008f00
 80081dc:	08008ec0 	.word	0x08008ec0

080081e0 <std>:
 80081e0:	2300      	movs	r3, #0
 80081e2:	b510      	push	{r4, lr}
 80081e4:	4604      	mov	r4, r0
 80081e6:	e9c0 3300 	strd	r3, r3, [r0]
 80081ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ee:	6083      	str	r3, [r0, #8]
 80081f0:	8181      	strh	r1, [r0, #12]
 80081f2:	6643      	str	r3, [r0, #100]	; 0x64
 80081f4:	81c2      	strh	r2, [r0, #14]
 80081f6:	6183      	str	r3, [r0, #24]
 80081f8:	4619      	mov	r1, r3
 80081fa:	2208      	movs	r2, #8
 80081fc:	305c      	adds	r0, #92	; 0x5c
 80081fe:	f7ff fdd7 	bl	8007db0 <memset>
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <std+0x38>)
 8008204:	6263      	str	r3, [r4, #36]	; 0x24
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <std+0x3c>)
 8008208:	62a3      	str	r3, [r4, #40]	; 0x28
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <std+0x40>)
 800820c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800820e:	4b05      	ldr	r3, [pc, #20]	; (8008224 <std+0x44>)
 8008210:	6224      	str	r4, [r4, #32]
 8008212:	6323      	str	r3, [r4, #48]	; 0x30
 8008214:	bd10      	pop	{r4, pc}
 8008216:	bf00      	nop
 8008218:	08008c59 	.word	0x08008c59
 800821c:	08008c7b 	.word	0x08008c7b
 8008220:	08008cb3 	.word	0x08008cb3
 8008224:	08008cd7 	.word	0x08008cd7

08008228 <_cleanup_r>:
 8008228:	4901      	ldr	r1, [pc, #4]	; (8008230 <_cleanup_r+0x8>)
 800822a:	f000 b8af 	b.w	800838c <_fwalk_reent>
 800822e:	bf00      	nop
 8008230:	08008169 	.word	0x08008169

08008234 <__sfmoreglue>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	2268      	movs	r2, #104	; 0x68
 8008238:	1e4d      	subs	r5, r1, #1
 800823a:	4355      	muls	r5, r2
 800823c:	460e      	mov	r6, r1
 800823e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008242:	f000 f997 	bl	8008574 <_malloc_r>
 8008246:	4604      	mov	r4, r0
 8008248:	b140      	cbz	r0, 800825c <__sfmoreglue+0x28>
 800824a:	2100      	movs	r1, #0
 800824c:	e9c0 1600 	strd	r1, r6, [r0]
 8008250:	300c      	adds	r0, #12
 8008252:	60a0      	str	r0, [r4, #8]
 8008254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008258:	f7ff fdaa 	bl	8007db0 <memset>
 800825c:	4620      	mov	r0, r4
 800825e:	bd70      	pop	{r4, r5, r6, pc}

08008260 <__sfp_lock_acquire>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__sfp_lock_acquire+0x8>)
 8008262:	f000 b8b3 	b.w	80083cc <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	20000b4d 	.word	0x20000b4d

0800826c <__sfp_lock_release>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__sfp_lock_release+0x8>)
 800826e:	f000 b8ae 	b.w	80083ce <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	20000b4d 	.word	0x20000b4d

08008278 <__sinit_lock_acquire>:
 8008278:	4801      	ldr	r0, [pc, #4]	; (8008280 <__sinit_lock_acquire+0x8>)
 800827a:	f000 b8a7 	b.w	80083cc <__retarget_lock_acquire_recursive>
 800827e:	bf00      	nop
 8008280:	20000b4e 	.word	0x20000b4e

08008284 <__sinit_lock_release>:
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <__sinit_lock_release+0x8>)
 8008286:	f000 b8a2 	b.w	80083ce <__retarget_lock_release_recursive>
 800828a:	bf00      	nop
 800828c:	20000b4e 	.word	0x20000b4e

08008290 <__sinit>:
 8008290:	b510      	push	{r4, lr}
 8008292:	4604      	mov	r4, r0
 8008294:	f7ff fff0 	bl	8008278 <__sinit_lock_acquire>
 8008298:	69a3      	ldr	r3, [r4, #24]
 800829a:	b11b      	cbz	r3, 80082a4 <__sinit+0x14>
 800829c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a0:	f7ff bff0 	b.w	8008284 <__sinit_lock_release>
 80082a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082a8:	6523      	str	r3, [r4, #80]	; 0x50
 80082aa:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <__sinit+0x68>)
 80082ac:	4a13      	ldr	r2, [pc, #76]	; (80082fc <__sinit+0x6c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80082b2:	42a3      	cmp	r3, r4
 80082b4:	bf04      	itt	eq
 80082b6:	2301      	moveq	r3, #1
 80082b8:	61a3      	streq	r3, [r4, #24]
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 f820 	bl	8008300 <__sfp>
 80082c0:	6060      	str	r0, [r4, #4]
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 f81c 	bl	8008300 <__sfp>
 80082c8:	60a0      	str	r0, [r4, #8]
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f818 	bl	8008300 <__sfp>
 80082d0:	2200      	movs	r2, #0
 80082d2:	60e0      	str	r0, [r4, #12]
 80082d4:	2104      	movs	r1, #4
 80082d6:	6860      	ldr	r0, [r4, #4]
 80082d8:	f7ff ff82 	bl	80081e0 <std>
 80082dc:	68a0      	ldr	r0, [r4, #8]
 80082de:	2201      	movs	r2, #1
 80082e0:	2109      	movs	r1, #9
 80082e2:	f7ff ff7d 	bl	80081e0 <std>
 80082e6:	68e0      	ldr	r0, [r4, #12]
 80082e8:	2202      	movs	r2, #2
 80082ea:	2112      	movs	r1, #18
 80082ec:	f7ff ff78 	bl	80081e0 <std>
 80082f0:	2301      	movs	r3, #1
 80082f2:	61a3      	str	r3, [r4, #24]
 80082f4:	e7d2      	b.n	800829c <__sinit+0xc>
 80082f6:	bf00      	nop
 80082f8:	08008ebc 	.word	0x08008ebc
 80082fc:	08008229 	.word	0x08008229

08008300 <__sfp>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	4607      	mov	r7, r0
 8008304:	f7ff ffac 	bl	8008260 <__sfp_lock_acquire>
 8008308:	4b1e      	ldr	r3, [pc, #120]	; (8008384 <__sfp+0x84>)
 800830a:	681e      	ldr	r6, [r3, #0]
 800830c:	69b3      	ldr	r3, [r6, #24]
 800830e:	b913      	cbnz	r3, 8008316 <__sfp+0x16>
 8008310:	4630      	mov	r0, r6
 8008312:	f7ff ffbd 	bl	8008290 <__sinit>
 8008316:	3648      	adds	r6, #72	; 0x48
 8008318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800831c:	3b01      	subs	r3, #1
 800831e:	d503      	bpl.n	8008328 <__sfp+0x28>
 8008320:	6833      	ldr	r3, [r6, #0]
 8008322:	b30b      	cbz	r3, 8008368 <__sfp+0x68>
 8008324:	6836      	ldr	r6, [r6, #0]
 8008326:	e7f7      	b.n	8008318 <__sfp+0x18>
 8008328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800832c:	b9d5      	cbnz	r5, 8008364 <__sfp+0x64>
 800832e:	4b16      	ldr	r3, [pc, #88]	; (8008388 <__sfp+0x88>)
 8008330:	60e3      	str	r3, [r4, #12]
 8008332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008336:	6665      	str	r5, [r4, #100]	; 0x64
 8008338:	f000 f847 	bl	80083ca <__retarget_lock_init_recursive>
 800833c:	f7ff ff96 	bl	800826c <__sfp_lock_release>
 8008340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008348:	6025      	str	r5, [r4, #0]
 800834a:	61a5      	str	r5, [r4, #24]
 800834c:	2208      	movs	r2, #8
 800834e:	4629      	mov	r1, r5
 8008350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008354:	f7ff fd2c 	bl	8007db0 <memset>
 8008358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800835c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008360:	4620      	mov	r0, r4
 8008362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008364:	3468      	adds	r4, #104	; 0x68
 8008366:	e7d9      	b.n	800831c <__sfp+0x1c>
 8008368:	2104      	movs	r1, #4
 800836a:	4638      	mov	r0, r7
 800836c:	f7ff ff62 	bl	8008234 <__sfmoreglue>
 8008370:	4604      	mov	r4, r0
 8008372:	6030      	str	r0, [r6, #0]
 8008374:	2800      	cmp	r0, #0
 8008376:	d1d5      	bne.n	8008324 <__sfp+0x24>
 8008378:	f7ff ff78 	bl	800826c <__sfp_lock_release>
 800837c:	230c      	movs	r3, #12
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	e7ee      	b.n	8008360 <__sfp+0x60>
 8008382:	bf00      	nop
 8008384:	08008ebc 	.word	0x08008ebc
 8008388:	ffff0001 	.word	0xffff0001

0800838c <_fwalk_reent>:
 800838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008390:	4606      	mov	r6, r0
 8008392:	4688      	mov	r8, r1
 8008394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008398:	2700      	movs	r7, #0
 800839a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800839e:	f1b9 0901 	subs.w	r9, r9, #1
 80083a2:	d505      	bpl.n	80083b0 <_fwalk_reent+0x24>
 80083a4:	6824      	ldr	r4, [r4, #0]
 80083a6:	2c00      	cmp	r4, #0
 80083a8:	d1f7      	bne.n	800839a <_fwalk_reent+0xe>
 80083aa:	4638      	mov	r0, r7
 80083ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b0:	89ab      	ldrh	r3, [r5, #12]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d907      	bls.n	80083c6 <_fwalk_reent+0x3a>
 80083b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083ba:	3301      	adds	r3, #1
 80083bc:	d003      	beq.n	80083c6 <_fwalk_reent+0x3a>
 80083be:	4629      	mov	r1, r5
 80083c0:	4630      	mov	r0, r6
 80083c2:	47c0      	blx	r8
 80083c4:	4307      	orrs	r7, r0
 80083c6:	3568      	adds	r5, #104	; 0x68
 80083c8:	e7e9      	b.n	800839e <_fwalk_reent+0x12>

080083ca <__retarget_lock_init_recursive>:
 80083ca:	4770      	bx	lr

080083cc <__retarget_lock_acquire_recursive>:
 80083cc:	4770      	bx	lr

080083ce <__retarget_lock_release_recursive>:
 80083ce:	4770      	bx	lr

080083d0 <__swhatbuf_r>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	460e      	mov	r6, r1
 80083d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d8:	2900      	cmp	r1, #0
 80083da:	b096      	sub	sp, #88	; 0x58
 80083dc:	4614      	mov	r4, r2
 80083de:	461d      	mov	r5, r3
 80083e0:	da08      	bge.n	80083f4 <__swhatbuf_r+0x24>
 80083e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	602a      	str	r2, [r5, #0]
 80083ea:	061a      	lsls	r2, r3, #24
 80083ec:	d410      	bmi.n	8008410 <__swhatbuf_r+0x40>
 80083ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f2:	e00e      	b.n	8008412 <__swhatbuf_r+0x42>
 80083f4:	466a      	mov	r2, sp
 80083f6:	f000 fc95 	bl	8008d24 <_fstat_r>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	dbf1      	blt.n	80083e2 <__swhatbuf_r+0x12>
 80083fe:	9a01      	ldr	r2, [sp, #4]
 8008400:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008404:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008408:	425a      	negs	r2, r3
 800840a:	415a      	adcs	r2, r3
 800840c:	602a      	str	r2, [r5, #0]
 800840e:	e7ee      	b.n	80083ee <__swhatbuf_r+0x1e>
 8008410:	2340      	movs	r3, #64	; 0x40
 8008412:	2000      	movs	r0, #0
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	b016      	add	sp, #88	; 0x58
 8008418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800841c <__smakebuf_r>:
 800841c:	898b      	ldrh	r3, [r1, #12]
 800841e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008420:	079d      	lsls	r5, r3, #30
 8008422:	4606      	mov	r6, r0
 8008424:	460c      	mov	r4, r1
 8008426:	d507      	bpl.n	8008438 <__smakebuf_r+0x1c>
 8008428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	6123      	str	r3, [r4, #16]
 8008430:	2301      	movs	r3, #1
 8008432:	6163      	str	r3, [r4, #20]
 8008434:	b002      	add	sp, #8
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	ab01      	add	r3, sp, #4
 800843a:	466a      	mov	r2, sp
 800843c:	f7ff ffc8 	bl	80083d0 <__swhatbuf_r>
 8008440:	9900      	ldr	r1, [sp, #0]
 8008442:	4605      	mov	r5, r0
 8008444:	4630      	mov	r0, r6
 8008446:	f000 f895 	bl	8008574 <_malloc_r>
 800844a:	b948      	cbnz	r0, 8008460 <__smakebuf_r+0x44>
 800844c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008450:	059a      	lsls	r2, r3, #22
 8008452:	d4ef      	bmi.n	8008434 <__smakebuf_r+0x18>
 8008454:	f023 0303 	bic.w	r3, r3, #3
 8008458:	f043 0302 	orr.w	r3, r3, #2
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	e7e3      	b.n	8008428 <__smakebuf_r+0xc>
 8008460:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <__smakebuf_r+0x7c>)
 8008462:	62b3      	str	r3, [r6, #40]	; 0x28
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	6020      	str	r0, [r4, #0]
 8008468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	9b00      	ldr	r3, [sp, #0]
 8008470:	6163      	str	r3, [r4, #20]
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	6120      	str	r0, [r4, #16]
 8008476:	b15b      	cbz	r3, 8008490 <__smakebuf_r+0x74>
 8008478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800847c:	4630      	mov	r0, r6
 800847e:	f000 fc63 	bl	8008d48 <_isatty_r>
 8008482:	b128      	cbz	r0, 8008490 <__smakebuf_r+0x74>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	f023 0303 	bic.w	r3, r3, #3
 800848a:	f043 0301 	orr.w	r3, r3, #1
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	89a0      	ldrh	r0, [r4, #12]
 8008492:	4305      	orrs	r5, r0
 8008494:	81a5      	strh	r5, [r4, #12]
 8008496:	e7cd      	b.n	8008434 <__smakebuf_r+0x18>
 8008498:	08008229 	.word	0x08008229

0800849c <_free_r>:
 800849c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800849e:	2900      	cmp	r1, #0
 80084a0:	d044      	beq.n	800852c <_free_r+0x90>
 80084a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a6:	9001      	str	r0, [sp, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f1a1 0404 	sub.w	r4, r1, #4
 80084ae:	bfb8      	it	lt
 80084b0:	18e4      	addlt	r4, r4, r3
 80084b2:	f000 fc6b 	bl	8008d8c <__malloc_lock>
 80084b6:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <_free_r+0x94>)
 80084b8:	9801      	ldr	r0, [sp, #4]
 80084ba:	6813      	ldr	r3, [r2, #0]
 80084bc:	b933      	cbnz	r3, 80084cc <_free_r+0x30>
 80084be:	6063      	str	r3, [r4, #4]
 80084c0:	6014      	str	r4, [r2, #0]
 80084c2:	b003      	add	sp, #12
 80084c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084c8:	f000 bc66 	b.w	8008d98 <__malloc_unlock>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d908      	bls.n	80084e2 <_free_r+0x46>
 80084d0:	6825      	ldr	r5, [r4, #0]
 80084d2:	1961      	adds	r1, r4, r5
 80084d4:	428b      	cmp	r3, r1
 80084d6:	bf01      	itttt	eq
 80084d8:	6819      	ldreq	r1, [r3, #0]
 80084da:	685b      	ldreq	r3, [r3, #4]
 80084dc:	1949      	addeq	r1, r1, r5
 80084de:	6021      	streq	r1, [r4, #0]
 80084e0:	e7ed      	b.n	80084be <_free_r+0x22>
 80084e2:	461a      	mov	r2, r3
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b10b      	cbz	r3, 80084ec <_free_r+0x50>
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d9fa      	bls.n	80084e2 <_free_r+0x46>
 80084ec:	6811      	ldr	r1, [r2, #0]
 80084ee:	1855      	adds	r5, r2, r1
 80084f0:	42a5      	cmp	r5, r4
 80084f2:	d10b      	bne.n	800850c <_free_r+0x70>
 80084f4:	6824      	ldr	r4, [r4, #0]
 80084f6:	4421      	add	r1, r4
 80084f8:	1854      	adds	r4, r2, r1
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	6011      	str	r1, [r2, #0]
 80084fe:	d1e0      	bne.n	80084c2 <_free_r+0x26>
 8008500:	681c      	ldr	r4, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	6053      	str	r3, [r2, #4]
 8008506:	4421      	add	r1, r4
 8008508:	6011      	str	r1, [r2, #0]
 800850a:	e7da      	b.n	80084c2 <_free_r+0x26>
 800850c:	d902      	bls.n	8008514 <_free_r+0x78>
 800850e:	230c      	movs	r3, #12
 8008510:	6003      	str	r3, [r0, #0]
 8008512:	e7d6      	b.n	80084c2 <_free_r+0x26>
 8008514:	6825      	ldr	r5, [r4, #0]
 8008516:	1961      	adds	r1, r4, r5
 8008518:	428b      	cmp	r3, r1
 800851a:	bf04      	itt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	6063      	str	r3, [r4, #4]
 8008522:	bf04      	itt	eq
 8008524:	1949      	addeq	r1, r1, r5
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	6054      	str	r4, [r2, #4]
 800852a:	e7ca      	b.n	80084c2 <_free_r+0x26>
 800852c:	b003      	add	sp, #12
 800852e:	bd30      	pop	{r4, r5, pc}
 8008530:	20000b50 	.word	0x20000b50

08008534 <sbrk_aligned>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4e0e      	ldr	r6, [pc, #56]	; (8008570 <sbrk_aligned+0x3c>)
 8008538:	460c      	mov	r4, r1
 800853a:	6831      	ldr	r1, [r6, #0]
 800853c:	4605      	mov	r5, r0
 800853e:	b911      	cbnz	r1, 8008546 <sbrk_aligned+0x12>
 8008540:	f000 fb7a 	bl	8008c38 <_sbrk_r>
 8008544:	6030      	str	r0, [r6, #0]
 8008546:	4621      	mov	r1, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f000 fb75 	bl	8008c38 <_sbrk_r>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d00a      	beq.n	8008568 <sbrk_aligned+0x34>
 8008552:	1cc4      	adds	r4, r0, #3
 8008554:	f024 0403 	bic.w	r4, r4, #3
 8008558:	42a0      	cmp	r0, r4
 800855a:	d007      	beq.n	800856c <sbrk_aligned+0x38>
 800855c:	1a21      	subs	r1, r4, r0
 800855e:	4628      	mov	r0, r5
 8008560:	f000 fb6a 	bl	8008c38 <_sbrk_r>
 8008564:	3001      	adds	r0, #1
 8008566:	d101      	bne.n	800856c <sbrk_aligned+0x38>
 8008568:	f04f 34ff 	mov.w	r4, #4294967295
 800856c:	4620      	mov	r0, r4
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	20000b54 	.word	0x20000b54

08008574 <_malloc_r>:
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	1ccd      	adds	r5, r1, #3
 800857a:	f025 0503 	bic.w	r5, r5, #3
 800857e:	3508      	adds	r5, #8
 8008580:	2d0c      	cmp	r5, #12
 8008582:	bf38      	it	cc
 8008584:	250c      	movcc	r5, #12
 8008586:	2d00      	cmp	r5, #0
 8008588:	4607      	mov	r7, r0
 800858a:	db01      	blt.n	8008590 <_malloc_r+0x1c>
 800858c:	42a9      	cmp	r1, r5
 800858e:	d905      	bls.n	800859c <_malloc_r+0x28>
 8008590:	230c      	movs	r3, #12
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	2600      	movs	r6, #0
 8008596:	4630      	mov	r0, r6
 8008598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859c:	4e2e      	ldr	r6, [pc, #184]	; (8008658 <_malloc_r+0xe4>)
 800859e:	f000 fbf5 	bl	8008d8c <__malloc_lock>
 80085a2:	6833      	ldr	r3, [r6, #0]
 80085a4:	461c      	mov	r4, r3
 80085a6:	bb34      	cbnz	r4, 80085f6 <_malloc_r+0x82>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4638      	mov	r0, r7
 80085ac:	f7ff ffc2 	bl	8008534 <sbrk_aligned>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	4604      	mov	r4, r0
 80085b4:	d14d      	bne.n	8008652 <_malloc_r+0xde>
 80085b6:	6834      	ldr	r4, [r6, #0]
 80085b8:	4626      	mov	r6, r4
 80085ba:	2e00      	cmp	r6, #0
 80085bc:	d140      	bne.n	8008640 <_malloc_r+0xcc>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	4631      	mov	r1, r6
 80085c2:	4638      	mov	r0, r7
 80085c4:	eb04 0803 	add.w	r8, r4, r3
 80085c8:	f000 fb36 	bl	8008c38 <_sbrk_r>
 80085cc:	4580      	cmp	r8, r0
 80085ce:	d13a      	bne.n	8008646 <_malloc_r+0xd2>
 80085d0:	6821      	ldr	r1, [r4, #0]
 80085d2:	3503      	adds	r5, #3
 80085d4:	1a6d      	subs	r5, r5, r1
 80085d6:	f025 0503 	bic.w	r5, r5, #3
 80085da:	3508      	adds	r5, #8
 80085dc:	2d0c      	cmp	r5, #12
 80085de:	bf38      	it	cc
 80085e0:	250c      	movcc	r5, #12
 80085e2:	4629      	mov	r1, r5
 80085e4:	4638      	mov	r0, r7
 80085e6:	f7ff ffa5 	bl	8008534 <sbrk_aligned>
 80085ea:	3001      	adds	r0, #1
 80085ec:	d02b      	beq.n	8008646 <_malloc_r+0xd2>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	442b      	add	r3, r5
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	e00e      	b.n	8008614 <_malloc_r+0xa0>
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	1b52      	subs	r2, r2, r5
 80085fa:	d41e      	bmi.n	800863a <_malloc_r+0xc6>
 80085fc:	2a0b      	cmp	r2, #11
 80085fe:	d916      	bls.n	800862e <_malloc_r+0xba>
 8008600:	1961      	adds	r1, r4, r5
 8008602:	42a3      	cmp	r3, r4
 8008604:	6025      	str	r5, [r4, #0]
 8008606:	bf18      	it	ne
 8008608:	6059      	strne	r1, [r3, #4]
 800860a:	6863      	ldr	r3, [r4, #4]
 800860c:	bf08      	it	eq
 800860e:	6031      	streq	r1, [r6, #0]
 8008610:	5162      	str	r2, [r4, r5]
 8008612:	604b      	str	r3, [r1, #4]
 8008614:	4638      	mov	r0, r7
 8008616:	f104 060b 	add.w	r6, r4, #11
 800861a:	f000 fbbd 	bl	8008d98 <__malloc_unlock>
 800861e:	f026 0607 	bic.w	r6, r6, #7
 8008622:	1d23      	adds	r3, r4, #4
 8008624:	1af2      	subs	r2, r6, r3
 8008626:	d0b6      	beq.n	8008596 <_malloc_r+0x22>
 8008628:	1b9b      	subs	r3, r3, r6
 800862a:	50a3      	str	r3, [r4, r2]
 800862c:	e7b3      	b.n	8008596 <_malloc_r+0x22>
 800862e:	6862      	ldr	r2, [r4, #4]
 8008630:	42a3      	cmp	r3, r4
 8008632:	bf0c      	ite	eq
 8008634:	6032      	streq	r2, [r6, #0]
 8008636:	605a      	strne	r2, [r3, #4]
 8008638:	e7ec      	b.n	8008614 <_malloc_r+0xa0>
 800863a:	4623      	mov	r3, r4
 800863c:	6864      	ldr	r4, [r4, #4]
 800863e:	e7b2      	b.n	80085a6 <_malloc_r+0x32>
 8008640:	4634      	mov	r4, r6
 8008642:	6876      	ldr	r6, [r6, #4]
 8008644:	e7b9      	b.n	80085ba <_malloc_r+0x46>
 8008646:	230c      	movs	r3, #12
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	4638      	mov	r0, r7
 800864c:	f000 fba4 	bl	8008d98 <__malloc_unlock>
 8008650:	e7a1      	b.n	8008596 <_malloc_r+0x22>
 8008652:	6025      	str	r5, [r4, #0]
 8008654:	e7de      	b.n	8008614 <_malloc_r+0xa0>
 8008656:	bf00      	nop
 8008658:	20000b50 	.word	0x20000b50

0800865c <__sfputc_r>:
 800865c:	6893      	ldr	r3, [r2, #8]
 800865e:	3b01      	subs	r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	b410      	push	{r4}
 8008664:	6093      	str	r3, [r2, #8]
 8008666:	da08      	bge.n	800867a <__sfputc_r+0x1e>
 8008668:	6994      	ldr	r4, [r2, #24]
 800866a:	42a3      	cmp	r3, r4
 800866c:	db01      	blt.n	8008672 <__sfputc_r+0x16>
 800866e:	290a      	cmp	r1, #10
 8008670:	d103      	bne.n	800867a <__sfputc_r+0x1e>
 8008672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008676:	f7ff bc31 	b.w	8007edc <__swbuf_r>
 800867a:	6813      	ldr	r3, [r2, #0]
 800867c:	1c58      	adds	r0, r3, #1
 800867e:	6010      	str	r0, [r2, #0]
 8008680:	7019      	strb	r1, [r3, #0]
 8008682:	4608      	mov	r0, r1
 8008684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008688:	4770      	bx	lr

0800868a <__sfputs_r>:
 800868a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868c:	4606      	mov	r6, r0
 800868e:	460f      	mov	r7, r1
 8008690:	4614      	mov	r4, r2
 8008692:	18d5      	adds	r5, r2, r3
 8008694:	42ac      	cmp	r4, r5
 8008696:	d101      	bne.n	800869c <__sfputs_r+0x12>
 8008698:	2000      	movs	r0, #0
 800869a:	e007      	b.n	80086ac <__sfputs_r+0x22>
 800869c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a0:	463a      	mov	r2, r7
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ffda 	bl	800865c <__sfputc_r>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d1f3      	bne.n	8008694 <__sfputs_r+0xa>
 80086ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086b0 <_vfiprintf_r>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	460d      	mov	r5, r1
 80086b6:	b09d      	sub	sp, #116	; 0x74
 80086b8:	4614      	mov	r4, r2
 80086ba:	4698      	mov	r8, r3
 80086bc:	4606      	mov	r6, r0
 80086be:	b118      	cbz	r0, 80086c8 <_vfiprintf_r+0x18>
 80086c0:	6983      	ldr	r3, [r0, #24]
 80086c2:	b90b      	cbnz	r3, 80086c8 <_vfiprintf_r+0x18>
 80086c4:	f7ff fde4 	bl	8008290 <__sinit>
 80086c8:	4b89      	ldr	r3, [pc, #548]	; (80088f0 <_vfiprintf_r+0x240>)
 80086ca:	429d      	cmp	r5, r3
 80086cc:	d11b      	bne.n	8008706 <_vfiprintf_r+0x56>
 80086ce:	6875      	ldr	r5, [r6, #4]
 80086d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d2:	07d9      	lsls	r1, r3, #31
 80086d4:	d405      	bmi.n	80086e2 <_vfiprintf_r+0x32>
 80086d6:	89ab      	ldrh	r3, [r5, #12]
 80086d8:	059a      	lsls	r2, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_vfiprintf_r+0x32>
 80086dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086de:	f7ff fe75 	bl	80083cc <__retarget_lock_acquire_recursive>
 80086e2:	89ab      	ldrh	r3, [r5, #12]
 80086e4:	071b      	lsls	r3, r3, #28
 80086e6:	d501      	bpl.n	80086ec <_vfiprintf_r+0x3c>
 80086e8:	692b      	ldr	r3, [r5, #16]
 80086ea:	b9eb      	cbnz	r3, 8008728 <_vfiprintf_r+0x78>
 80086ec:	4629      	mov	r1, r5
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7ff fc46 	bl	8007f80 <__swsetup_r>
 80086f4:	b1c0      	cbz	r0, 8008728 <_vfiprintf_r+0x78>
 80086f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086f8:	07dc      	lsls	r4, r3, #31
 80086fa:	d50e      	bpl.n	800871a <_vfiprintf_r+0x6a>
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	b01d      	add	sp, #116	; 0x74
 8008702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008706:	4b7b      	ldr	r3, [pc, #492]	; (80088f4 <_vfiprintf_r+0x244>)
 8008708:	429d      	cmp	r5, r3
 800870a:	d101      	bne.n	8008710 <_vfiprintf_r+0x60>
 800870c:	68b5      	ldr	r5, [r6, #8]
 800870e:	e7df      	b.n	80086d0 <_vfiprintf_r+0x20>
 8008710:	4b79      	ldr	r3, [pc, #484]	; (80088f8 <_vfiprintf_r+0x248>)
 8008712:	429d      	cmp	r5, r3
 8008714:	bf08      	it	eq
 8008716:	68f5      	ldreq	r5, [r6, #12]
 8008718:	e7da      	b.n	80086d0 <_vfiprintf_r+0x20>
 800871a:	89ab      	ldrh	r3, [r5, #12]
 800871c:	0598      	lsls	r0, r3, #22
 800871e:	d4ed      	bmi.n	80086fc <_vfiprintf_r+0x4c>
 8008720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008722:	f7ff fe54 	bl	80083ce <__retarget_lock_release_recursive>
 8008726:	e7e9      	b.n	80086fc <_vfiprintf_r+0x4c>
 8008728:	2300      	movs	r3, #0
 800872a:	9309      	str	r3, [sp, #36]	; 0x24
 800872c:	2320      	movs	r3, #32
 800872e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008732:	f8cd 800c 	str.w	r8, [sp, #12]
 8008736:	2330      	movs	r3, #48	; 0x30
 8008738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088fc <_vfiprintf_r+0x24c>
 800873c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008740:	f04f 0901 	mov.w	r9, #1
 8008744:	4623      	mov	r3, r4
 8008746:	469a      	mov	sl, r3
 8008748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800874c:	b10a      	cbz	r2, 8008752 <_vfiprintf_r+0xa2>
 800874e:	2a25      	cmp	r2, #37	; 0x25
 8008750:	d1f9      	bne.n	8008746 <_vfiprintf_r+0x96>
 8008752:	ebba 0b04 	subs.w	fp, sl, r4
 8008756:	d00b      	beq.n	8008770 <_vfiprintf_r+0xc0>
 8008758:	465b      	mov	r3, fp
 800875a:	4622      	mov	r2, r4
 800875c:	4629      	mov	r1, r5
 800875e:	4630      	mov	r0, r6
 8008760:	f7ff ff93 	bl	800868a <__sfputs_r>
 8008764:	3001      	adds	r0, #1
 8008766:	f000 80aa 	beq.w	80088be <_vfiprintf_r+0x20e>
 800876a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800876c:	445a      	add	r2, fp
 800876e:	9209      	str	r2, [sp, #36]	; 0x24
 8008770:	f89a 3000 	ldrb.w	r3, [sl]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 80a2 	beq.w	80088be <_vfiprintf_r+0x20e>
 800877a:	2300      	movs	r3, #0
 800877c:	f04f 32ff 	mov.w	r2, #4294967295
 8008780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008784:	f10a 0a01 	add.w	sl, sl, #1
 8008788:	9304      	str	r3, [sp, #16]
 800878a:	9307      	str	r3, [sp, #28]
 800878c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008790:	931a      	str	r3, [sp, #104]	; 0x68
 8008792:	4654      	mov	r4, sl
 8008794:	2205      	movs	r2, #5
 8008796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800879a:	4858      	ldr	r0, [pc, #352]	; (80088fc <_vfiprintf_r+0x24c>)
 800879c:	f7f7 fd28 	bl	80001f0 <memchr>
 80087a0:	9a04      	ldr	r2, [sp, #16]
 80087a2:	b9d8      	cbnz	r0, 80087dc <_vfiprintf_r+0x12c>
 80087a4:	06d1      	lsls	r1, r2, #27
 80087a6:	bf44      	itt	mi
 80087a8:	2320      	movmi	r3, #32
 80087aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ae:	0713      	lsls	r3, r2, #28
 80087b0:	bf44      	itt	mi
 80087b2:	232b      	movmi	r3, #43	; 0x2b
 80087b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087b8:	f89a 3000 	ldrb.w	r3, [sl]
 80087bc:	2b2a      	cmp	r3, #42	; 0x2a
 80087be:	d015      	beq.n	80087ec <_vfiprintf_r+0x13c>
 80087c0:	9a07      	ldr	r2, [sp, #28]
 80087c2:	4654      	mov	r4, sl
 80087c4:	2000      	movs	r0, #0
 80087c6:	f04f 0c0a 	mov.w	ip, #10
 80087ca:	4621      	mov	r1, r4
 80087cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087d0:	3b30      	subs	r3, #48	; 0x30
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	d94e      	bls.n	8008874 <_vfiprintf_r+0x1c4>
 80087d6:	b1b0      	cbz	r0, 8008806 <_vfiprintf_r+0x156>
 80087d8:	9207      	str	r2, [sp, #28]
 80087da:	e014      	b.n	8008806 <_vfiprintf_r+0x156>
 80087dc:	eba0 0308 	sub.w	r3, r0, r8
 80087e0:	fa09 f303 	lsl.w	r3, r9, r3
 80087e4:	4313      	orrs	r3, r2
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	46a2      	mov	sl, r4
 80087ea:	e7d2      	b.n	8008792 <_vfiprintf_r+0xe2>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	1d19      	adds	r1, r3, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	9103      	str	r1, [sp, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bfbb      	ittet	lt
 80087f8:	425b      	neglt	r3, r3
 80087fa:	f042 0202 	orrlt.w	r2, r2, #2
 80087fe:	9307      	strge	r3, [sp, #28]
 8008800:	9307      	strlt	r3, [sp, #28]
 8008802:	bfb8      	it	lt
 8008804:	9204      	strlt	r2, [sp, #16]
 8008806:	7823      	ldrb	r3, [r4, #0]
 8008808:	2b2e      	cmp	r3, #46	; 0x2e
 800880a:	d10c      	bne.n	8008826 <_vfiprintf_r+0x176>
 800880c:	7863      	ldrb	r3, [r4, #1]
 800880e:	2b2a      	cmp	r3, #42	; 0x2a
 8008810:	d135      	bne.n	800887e <_vfiprintf_r+0x1ce>
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	1d1a      	adds	r2, r3, #4
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	9203      	str	r2, [sp, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	bfb8      	it	lt
 800881e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008822:	3402      	adds	r4, #2
 8008824:	9305      	str	r3, [sp, #20]
 8008826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800890c <_vfiprintf_r+0x25c>
 800882a:	7821      	ldrb	r1, [r4, #0]
 800882c:	2203      	movs	r2, #3
 800882e:	4650      	mov	r0, sl
 8008830:	f7f7 fcde 	bl	80001f0 <memchr>
 8008834:	b140      	cbz	r0, 8008848 <_vfiprintf_r+0x198>
 8008836:	2340      	movs	r3, #64	; 0x40
 8008838:	eba0 000a 	sub.w	r0, r0, sl
 800883c:	fa03 f000 	lsl.w	r0, r3, r0
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	4303      	orrs	r3, r0
 8008844:	3401      	adds	r4, #1
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	482c      	ldr	r0, [pc, #176]	; (8008900 <_vfiprintf_r+0x250>)
 800884e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008852:	2206      	movs	r2, #6
 8008854:	f7f7 fccc 	bl	80001f0 <memchr>
 8008858:	2800      	cmp	r0, #0
 800885a:	d03f      	beq.n	80088dc <_vfiprintf_r+0x22c>
 800885c:	4b29      	ldr	r3, [pc, #164]	; (8008904 <_vfiprintf_r+0x254>)
 800885e:	bb1b      	cbnz	r3, 80088a8 <_vfiprintf_r+0x1f8>
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	3307      	adds	r3, #7
 8008864:	f023 0307 	bic.w	r3, r3, #7
 8008868:	3308      	adds	r3, #8
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886e:	443b      	add	r3, r7
 8008870:	9309      	str	r3, [sp, #36]	; 0x24
 8008872:	e767      	b.n	8008744 <_vfiprintf_r+0x94>
 8008874:	fb0c 3202 	mla	r2, ip, r2, r3
 8008878:	460c      	mov	r4, r1
 800887a:	2001      	movs	r0, #1
 800887c:	e7a5      	b.n	80087ca <_vfiprintf_r+0x11a>
 800887e:	2300      	movs	r3, #0
 8008880:	3401      	adds	r4, #1
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	4619      	mov	r1, r3
 8008886:	f04f 0c0a 	mov.w	ip, #10
 800888a:	4620      	mov	r0, r4
 800888c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008890:	3a30      	subs	r2, #48	; 0x30
 8008892:	2a09      	cmp	r2, #9
 8008894:	d903      	bls.n	800889e <_vfiprintf_r+0x1ee>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0c5      	beq.n	8008826 <_vfiprintf_r+0x176>
 800889a:	9105      	str	r1, [sp, #20]
 800889c:	e7c3      	b.n	8008826 <_vfiprintf_r+0x176>
 800889e:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a2:	4604      	mov	r4, r0
 80088a4:	2301      	movs	r3, #1
 80088a6:	e7f0      	b.n	800888a <_vfiprintf_r+0x1da>
 80088a8:	ab03      	add	r3, sp, #12
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	462a      	mov	r2, r5
 80088ae:	4b16      	ldr	r3, [pc, #88]	; (8008908 <_vfiprintf_r+0x258>)
 80088b0:	a904      	add	r1, sp, #16
 80088b2:	4630      	mov	r0, r6
 80088b4:	f3af 8000 	nop.w
 80088b8:	4607      	mov	r7, r0
 80088ba:	1c78      	adds	r0, r7, #1
 80088bc:	d1d6      	bne.n	800886c <_vfiprintf_r+0x1bc>
 80088be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088c0:	07d9      	lsls	r1, r3, #31
 80088c2:	d405      	bmi.n	80088d0 <_vfiprintf_r+0x220>
 80088c4:	89ab      	ldrh	r3, [r5, #12]
 80088c6:	059a      	lsls	r2, r3, #22
 80088c8:	d402      	bmi.n	80088d0 <_vfiprintf_r+0x220>
 80088ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088cc:	f7ff fd7f 	bl	80083ce <__retarget_lock_release_recursive>
 80088d0:	89ab      	ldrh	r3, [r5, #12]
 80088d2:	065b      	lsls	r3, r3, #25
 80088d4:	f53f af12 	bmi.w	80086fc <_vfiprintf_r+0x4c>
 80088d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088da:	e711      	b.n	8008700 <_vfiprintf_r+0x50>
 80088dc:	ab03      	add	r3, sp, #12
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	462a      	mov	r2, r5
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <_vfiprintf_r+0x258>)
 80088e4:	a904      	add	r1, sp, #16
 80088e6:	4630      	mov	r0, r6
 80088e8:	f000 f880 	bl	80089ec <_printf_i>
 80088ec:	e7e4      	b.n	80088b8 <_vfiprintf_r+0x208>
 80088ee:	bf00      	nop
 80088f0:	08008ee0 	.word	0x08008ee0
 80088f4:	08008f00 	.word	0x08008f00
 80088f8:	08008ec0 	.word	0x08008ec0
 80088fc:	08008f20 	.word	0x08008f20
 8008900:	08008f2a 	.word	0x08008f2a
 8008904:	00000000 	.word	0x00000000
 8008908:	0800868b 	.word	0x0800868b
 800890c:	08008f26 	.word	0x08008f26

08008910 <_printf_common>:
 8008910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008914:	4616      	mov	r6, r2
 8008916:	4699      	mov	r9, r3
 8008918:	688a      	ldr	r2, [r1, #8]
 800891a:	690b      	ldr	r3, [r1, #16]
 800891c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008920:	4293      	cmp	r3, r2
 8008922:	bfb8      	it	lt
 8008924:	4613      	movlt	r3, r2
 8008926:	6033      	str	r3, [r6, #0]
 8008928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800892c:	4607      	mov	r7, r0
 800892e:	460c      	mov	r4, r1
 8008930:	b10a      	cbz	r2, 8008936 <_printf_common+0x26>
 8008932:	3301      	adds	r3, #1
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	0699      	lsls	r1, r3, #26
 800893a:	bf42      	ittt	mi
 800893c:	6833      	ldrmi	r3, [r6, #0]
 800893e:	3302      	addmi	r3, #2
 8008940:	6033      	strmi	r3, [r6, #0]
 8008942:	6825      	ldr	r5, [r4, #0]
 8008944:	f015 0506 	ands.w	r5, r5, #6
 8008948:	d106      	bne.n	8008958 <_printf_common+0x48>
 800894a:	f104 0a19 	add.w	sl, r4, #25
 800894e:	68e3      	ldr	r3, [r4, #12]
 8008950:	6832      	ldr	r2, [r6, #0]
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	42ab      	cmp	r3, r5
 8008956:	dc26      	bgt.n	80089a6 <_printf_common+0x96>
 8008958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800895c:	1e13      	subs	r3, r2, #0
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	bf18      	it	ne
 8008962:	2301      	movne	r3, #1
 8008964:	0692      	lsls	r2, r2, #26
 8008966:	d42b      	bmi.n	80089c0 <_printf_common+0xb0>
 8008968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800896c:	4649      	mov	r1, r9
 800896e:	4638      	mov	r0, r7
 8008970:	47c0      	blx	r8
 8008972:	3001      	adds	r0, #1
 8008974:	d01e      	beq.n	80089b4 <_printf_common+0xa4>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	68e5      	ldr	r5, [r4, #12]
 800897a:	6832      	ldr	r2, [r6, #0]
 800897c:	f003 0306 	and.w	r3, r3, #6
 8008980:	2b04      	cmp	r3, #4
 8008982:	bf08      	it	eq
 8008984:	1aad      	subeq	r5, r5, r2
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	6922      	ldr	r2, [r4, #16]
 800898a:	bf0c      	ite	eq
 800898c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008990:	2500      	movne	r5, #0
 8008992:	4293      	cmp	r3, r2
 8008994:	bfc4      	itt	gt
 8008996:	1a9b      	subgt	r3, r3, r2
 8008998:	18ed      	addgt	r5, r5, r3
 800899a:	2600      	movs	r6, #0
 800899c:	341a      	adds	r4, #26
 800899e:	42b5      	cmp	r5, r6
 80089a0:	d11a      	bne.n	80089d8 <_printf_common+0xc8>
 80089a2:	2000      	movs	r0, #0
 80089a4:	e008      	b.n	80089b8 <_printf_common+0xa8>
 80089a6:	2301      	movs	r3, #1
 80089a8:	4652      	mov	r2, sl
 80089aa:	4649      	mov	r1, r9
 80089ac:	4638      	mov	r0, r7
 80089ae:	47c0      	blx	r8
 80089b0:	3001      	adds	r0, #1
 80089b2:	d103      	bne.n	80089bc <_printf_common+0xac>
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089bc:	3501      	adds	r5, #1
 80089be:	e7c6      	b.n	800894e <_printf_common+0x3e>
 80089c0:	18e1      	adds	r1, r4, r3
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	2030      	movs	r0, #48	; 0x30
 80089c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089ca:	4422      	add	r2, r4
 80089cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089d4:	3302      	adds	r3, #2
 80089d6:	e7c7      	b.n	8008968 <_printf_common+0x58>
 80089d8:	2301      	movs	r3, #1
 80089da:	4622      	mov	r2, r4
 80089dc:	4649      	mov	r1, r9
 80089de:	4638      	mov	r0, r7
 80089e0:	47c0      	blx	r8
 80089e2:	3001      	adds	r0, #1
 80089e4:	d0e6      	beq.n	80089b4 <_printf_common+0xa4>
 80089e6:	3601      	adds	r6, #1
 80089e8:	e7d9      	b.n	800899e <_printf_common+0x8e>
	...

080089ec <_printf_i>:
 80089ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f0:	7e0f      	ldrb	r7, [r1, #24]
 80089f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089f4:	2f78      	cmp	r7, #120	; 0x78
 80089f6:	4691      	mov	r9, r2
 80089f8:	4680      	mov	r8, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	469a      	mov	sl, r3
 80089fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a02:	d807      	bhi.n	8008a14 <_printf_i+0x28>
 8008a04:	2f62      	cmp	r7, #98	; 0x62
 8008a06:	d80a      	bhi.n	8008a1e <_printf_i+0x32>
 8008a08:	2f00      	cmp	r7, #0
 8008a0a:	f000 80d8 	beq.w	8008bbe <_printf_i+0x1d2>
 8008a0e:	2f58      	cmp	r7, #88	; 0x58
 8008a10:	f000 80a3 	beq.w	8008b5a <_printf_i+0x16e>
 8008a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a1c:	e03a      	b.n	8008a94 <_printf_i+0xa8>
 8008a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a22:	2b15      	cmp	r3, #21
 8008a24:	d8f6      	bhi.n	8008a14 <_printf_i+0x28>
 8008a26:	a101      	add	r1, pc, #4	; (adr r1, 8008a2c <_printf_i+0x40>)
 8008a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a2c:	08008a85 	.word	0x08008a85
 8008a30:	08008a99 	.word	0x08008a99
 8008a34:	08008a15 	.word	0x08008a15
 8008a38:	08008a15 	.word	0x08008a15
 8008a3c:	08008a15 	.word	0x08008a15
 8008a40:	08008a15 	.word	0x08008a15
 8008a44:	08008a99 	.word	0x08008a99
 8008a48:	08008a15 	.word	0x08008a15
 8008a4c:	08008a15 	.word	0x08008a15
 8008a50:	08008a15 	.word	0x08008a15
 8008a54:	08008a15 	.word	0x08008a15
 8008a58:	08008ba5 	.word	0x08008ba5
 8008a5c:	08008ac9 	.word	0x08008ac9
 8008a60:	08008b87 	.word	0x08008b87
 8008a64:	08008a15 	.word	0x08008a15
 8008a68:	08008a15 	.word	0x08008a15
 8008a6c:	08008bc7 	.word	0x08008bc7
 8008a70:	08008a15 	.word	0x08008a15
 8008a74:	08008ac9 	.word	0x08008ac9
 8008a78:	08008a15 	.word	0x08008a15
 8008a7c:	08008a15 	.word	0x08008a15
 8008a80:	08008b8f 	.word	0x08008b8f
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	1d1a      	adds	r2, r3, #4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	602a      	str	r2, [r5, #0]
 8008a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a94:	2301      	movs	r3, #1
 8008a96:	e0a3      	b.n	8008be0 <_printf_i+0x1f4>
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	6829      	ldr	r1, [r5, #0]
 8008a9c:	0606      	lsls	r6, r0, #24
 8008a9e:	f101 0304 	add.w	r3, r1, #4
 8008aa2:	d50a      	bpl.n	8008aba <_printf_i+0xce>
 8008aa4:	680e      	ldr	r6, [r1, #0]
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	2e00      	cmp	r6, #0
 8008aaa:	da03      	bge.n	8008ab4 <_printf_i+0xc8>
 8008aac:	232d      	movs	r3, #45	; 0x2d
 8008aae:	4276      	negs	r6, r6
 8008ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab4:	485e      	ldr	r0, [pc, #376]	; (8008c30 <_printf_i+0x244>)
 8008ab6:	230a      	movs	r3, #10
 8008ab8:	e019      	b.n	8008aee <_printf_i+0x102>
 8008aba:	680e      	ldr	r6, [r1, #0]
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ac2:	bf18      	it	ne
 8008ac4:	b236      	sxthne	r6, r6
 8008ac6:	e7ef      	b.n	8008aa8 <_printf_i+0xbc>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	6820      	ldr	r0, [r4, #0]
 8008acc:	1d19      	adds	r1, r3, #4
 8008ace:	6029      	str	r1, [r5, #0]
 8008ad0:	0601      	lsls	r1, r0, #24
 8008ad2:	d501      	bpl.n	8008ad8 <_printf_i+0xec>
 8008ad4:	681e      	ldr	r6, [r3, #0]
 8008ad6:	e002      	b.n	8008ade <_printf_i+0xf2>
 8008ad8:	0646      	lsls	r6, r0, #25
 8008ada:	d5fb      	bpl.n	8008ad4 <_printf_i+0xe8>
 8008adc:	881e      	ldrh	r6, [r3, #0]
 8008ade:	4854      	ldr	r0, [pc, #336]	; (8008c30 <_printf_i+0x244>)
 8008ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2308      	moveq	r3, #8
 8008ae6:	230a      	movne	r3, #10
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aee:	6865      	ldr	r5, [r4, #4]
 8008af0:	60a5      	str	r5, [r4, #8]
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	bfa2      	ittt	ge
 8008af6:	6821      	ldrge	r1, [r4, #0]
 8008af8:	f021 0104 	bicge.w	r1, r1, #4
 8008afc:	6021      	strge	r1, [r4, #0]
 8008afe:	b90e      	cbnz	r6, 8008b04 <_printf_i+0x118>
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	d04d      	beq.n	8008ba0 <_printf_i+0x1b4>
 8008b04:	4615      	mov	r5, r2
 8008b06:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b0a:	fb03 6711 	mls	r7, r3, r1, r6
 8008b0e:	5dc7      	ldrb	r7, [r0, r7]
 8008b10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b14:	4637      	mov	r7, r6
 8008b16:	42bb      	cmp	r3, r7
 8008b18:	460e      	mov	r6, r1
 8008b1a:	d9f4      	bls.n	8008b06 <_printf_i+0x11a>
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d10b      	bne.n	8008b38 <_printf_i+0x14c>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	07de      	lsls	r6, r3, #31
 8008b24:	d508      	bpl.n	8008b38 <_printf_i+0x14c>
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	6861      	ldr	r1, [r4, #4]
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	bfde      	ittt	le
 8008b2e:	2330      	movle	r3, #48	; 0x30
 8008b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b38:	1b52      	subs	r2, r2, r5
 8008b3a:	6122      	str	r2, [r4, #16]
 8008b3c:	f8cd a000 	str.w	sl, [sp]
 8008b40:	464b      	mov	r3, r9
 8008b42:	aa03      	add	r2, sp, #12
 8008b44:	4621      	mov	r1, r4
 8008b46:	4640      	mov	r0, r8
 8008b48:	f7ff fee2 	bl	8008910 <_printf_common>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d14c      	bne.n	8008bea <_printf_i+0x1fe>
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	b004      	add	sp, #16
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	4835      	ldr	r0, [pc, #212]	; (8008c30 <_printf_i+0x244>)
 8008b5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b60:	6829      	ldr	r1, [r5, #0]
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b68:	6029      	str	r1, [r5, #0]
 8008b6a:	061d      	lsls	r5, r3, #24
 8008b6c:	d514      	bpl.n	8008b98 <_printf_i+0x1ac>
 8008b6e:	07df      	lsls	r7, r3, #31
 8008b70:	bf44      	itt	mi
 8008b72:	f043 0320 	orrmi.w	r3, r3, #32
 8008b76:	6023      	strmi	r3, [r4, #0]
 8008b78:	b91e      	cbnz	r6, 8008b82 <_printf_i+0x196>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	f023 0320 	bic.w	r3, r3, #32
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	2310      	movs	r3, #16
 8008b84:	e7b0      	b.n	8008ae8 <_printf_i+0xfc>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	f043 0320 	orr.w	r3, r3, #32
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	2378      	movs	r3, #120	; 0x78
 8008b90:	4828      	ldr	r0, [pc, #160]	; (8008c34 <_printf_i+0x248>)
 8008b92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b96:	e7e3      	b.n	8008b60 <_printf_i+0x174>
 8008b98:	0659      	lsls	r1, r3, #25
 8008b9a:	bf48      	it	mi
 8008b9c:	b2b6      	uxthmi	r6, r6
 8008b9e:	e7e6      	b.n	8008b6e <_printf_i+0x182>
 8008ba0:	4615      	mov	r5, r2
 8008ba2:	e7bb      	b.n	8008b1c <_printf_i+0x130>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	6826      	ldr	r6, [r4, #0]
 8008ba8:	6961      	ldr	r1, [r4, #20]
 8008baa:	1d18      	adds	r0, r3, #4
 8008bac:	6028      	str	r0, [r5, #0]
 8008bae:	0635      	lsls	r5, r6, #24
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	d501      	bpl.n	8008bb8 <_printf_i+0x1cc>
 8008bb4:	6019      	str	r1, [r3, #0]
 8008bb6:	e002      	b.n	8008bbe <_printf_i+0x1d2>
 8008bb8:	0670      	lsls	r0, r6, #25
 8008bba:	d5fb      	bpl.n	8008bb4 <_printf_i+0x1c8>
 8008bbc:	8019      	strh	r1, [r3, #0]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6123      	str	r3, [r4, #16]
 8008bc2:	4615      	mov	r5, r2
 8008bc4:	e7ba      	b.n	8008b3c <_printf_i+0x150>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	1d1a      	adds	r2, r3, #4
 8008bca:	602a      	str	r2, [r5, #0]
 8008bcc:	681d      	ldr	r5, [r3, #0]
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f7f7 fb0c 	bl	80001f0 <memchr>
 8008bd8:	b108      	cbz	r0, 8008bde <_printf_i+0x1f2>
 8008bda:	1b40      	subs	r0, r0, r5
 8008bdc:	6060      	str	r0, [r4, #4]
 8008bde:	6863      	ldr	r3, [r4, #4]
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	2300      	movs	r3, #0
 8008be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be8:	e7a8      	b.n	8008b3c <_printf_i+0x150>
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	462a      	mov	r2, r5
 8008bee:	4649      	mov	r1, r9
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	47d0      	blx	sl
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d0ab      	beq.n	8008b50 <_printf_i+0x164>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	079b      	lsls	r3, r3, #30
 8008bfc:	d413      	bmi.n	8008c26 <_printf_i+0x23a>
 8008bfe:	68e0      	ldr	r0, [r4, #12]
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	4298      	cmp	r0, r3
 8008c04:	bfb8      	it	lt
 8008c06:	4618      	movlt	r0, r3
 8008c08:	e7a4      	b.n	8008b54 <_printf_i+0x168>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4632      	mov	r2, r6
 8008c0e:	4649      	mov	r1, r9
 8008c10:	4640      	mov	r0, r8
 8008c12:	47d0      	blx	sl
 8008c14:	3001      	adds	r0, #1
 8008c16:	d09b      	beq.n	8008b50 <_printf_i+0x164>
 8008c18:	3501      	adds	r5, #1
 8008c1a:	68e3      	ldr	r3, [r4, #12]
 8008c1c:	9903      	ldr	r1, [sp, #12]
 8008c1e:	1a5b      	subs	r3, r3, r1
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	dcf2      	bgt.n	8008c0a <_printf_i+0x21e>
 8008c24:	e7eb      	b.n	8008bfe <_printf_i+0x212>
 8008c26:	2500      	movs	r5, #0
 8008c28:	f104 0619 	add.w	r6, r4, #25
 8008c2c:	e7f5      	b.n	8008c1a <_printf_i+0x22e>
 8008c2e:	bf00      	nop
 8008c30:	08008f31 	.word	0x08008f31
 8008c34:	08008f42 	.word	0x08008f42

08008c38 <_sbrk_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d06      	ldr	r5, [pc, #24]	; (8008c54 <_sbrk_r+0x1c>)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4604      	mov	r4, r0
 8008c40:	4608      	mov	r0, r1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	f7f8 ffd8 	bl	8001bf8 <_sbrk>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_sbrk_r+0x1a>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_sbrk_r+0x1a>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	20000b58 	.word	0x20000b58

08008c58 <__sread>:
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c60:	f000 f8a0 	bl	8008da4 <_read_r>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	bfab      	itete	ge
 8008c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c6c:	181b      	addge	r3, r3, r0
 8008c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c72:	bfac      	ite	ge
 8008c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c76:	81a3      	strhlt	r3, [r4, #12]
 8008c78:	bd10      	pop	{r4, pc}

08008c7a <__swrite>:
 8008c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7e:	461f      	mov	r7, r3
 8008c80:	898b      	ldrh	r3, [r1, #12]
 8008c82:	05db      	lsls	r3, r3, #23
 8008c84:	4605      	mov	r5, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	4616      	mov	r6, r2
 8008c8a:	d505      	bpl.n	8008c98 <__swrite+0x1e>
 8008c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c90:	2302      	movs	r3, #2
 8008c92:	2200      	movs	r2, #0
 8008c94:	f000 f868 	bl	8008d68 <_lseek_r>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	4628      	mov	r0, r5
 8008caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cae:	f000 b817 	b.w	8008ce0 <_write_r>

08008cb2 <__sseek>:
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cba:	f000 f855 	bl	8008d68 <_lseek_r>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	bf15      	itete	ne
 8008cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cce:	81a3      	strheq	r3, [r4, #12]
 8008cd0:	bf18      	it	ne
 8008cd2:	81a3      	strhne	r3, [r4, #12]
 8008cd4:	bd10      	pop	{r4, pc}

08008cd6 <__sclose>:
 8008cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cda:	f000 b813 	b.w	8008d04 <_close_r>
	...

08008ce0 <_write_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d07      	ldr	r5, [pc, #28]	; (8008d00 <_write_r+0x20>)
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4611      	mov	r1, r2
 8008cea:	2200      	movs	r2, #0
 8008cec:	602a      	str	r2, [r5, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f7f8 ff31 	bl	8001b56 <_write>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_write_r+0x1e>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_write_r+0x1e>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	20000b58 	.word	0x20000b58

08008d04 <_close_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d06      	ldr	r5, [pc, #24]	; (8008d20 <_close_r+0x1c>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f8 ff3d 	bl	8001b8e <_close>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_close_r+0x1a>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_close_r+0x1a>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	20000b58 	.word	0x20000b58

08008d24 <_fstat_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	; (8008d44 <_fstat_r+0x20>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	4611      	mov	r1, r2
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	f7f8 ff38 	bl	8001ba6 <_fstat>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d102      	bne.n	8008d40 <_fstat_r+0x1c>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	b103      	cbz	r3, 8008d40 <_fstat_r+0x1c>
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	bf00      	nop
 8008d44:	20000b58 	.word	0x20000b58

08008d48 <_isatty_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d06      	ldr	r5, [pc, #24]	; (8008d64 <_isatty_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7f8 ff37 	bl	8001bc6 <_isatty>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_isatty_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_isatty_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000b58 	.word	0x20000b58

08008d68 <_lseek_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d07      	ldr	r5, [pc, #28]	; (8008d88 <_lseek_r+0x20>)
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4611      	mov	r1, r2
 8008d72:	2200      	movs	r2, #0
 8008d74:	602a      	str	r2, [r5, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f7f8 ff30 	bl	8001bdc <_lseek>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_lseek_r+0x1e>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_lseek_r+0x1e>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	20000b58 	.word	0x20000b58

08008d8c <__malloc_lock>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__malloc_lock+0x8>)
 8008d8e:	f7ff bb1d 	b.w	80083cc <__retarget_lock_acquire_recursive>
 8008d92:	bf00      	nop
 8008d94:	20000b4c 	.word	0x20000b4c

08008d98 <__malloc_unlock>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__malloc_unlock+0x8>)
 8008d9a:	f7ff bb18 	b.w	80083ce <__retarget_lock_release_recursive>
 8008d9e:	bf00      	nop
 8008da0:	20000b4c 	.word	0x20000b4c

08008da4 <_read_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d07      	ldr	r5, [pc, #28]	; (8008dc4 <_read_r+0x20>)
 8008da8:	4604      	mov	r4, r0
 8008daa:	4608      	mov	r0, r1
 8008dac:	4611      	mov	r1, r2
 8008dae:	2200      	movs	r2, #0
 8008db0:	602a      	str	r2, [r5, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	f7f8 feb2 	bl	8001b1c <_read>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_read_r+0x1e>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_read_r+0x1e>
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	20000b58 	.word	0x20000b58

08008dc8 <_init>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr

08008dd4 <_fini>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	bf00      	nop
 8008dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dda:	bc08      	pop	{r3}
 8008ddc:	469e      	mov	lr, r3
 8008dde:	4770      	bx	lr
