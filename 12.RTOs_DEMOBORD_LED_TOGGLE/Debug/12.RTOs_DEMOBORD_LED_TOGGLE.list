
12.RTOs_DEMOBORD_LED_TOGGLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006694  08006694  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800669c  0800669c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005210  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005284  20005284  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fbf7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003900  00000000  00000000  0003fc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  000435a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001770  00000000  00000000  00044e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c19  00000000  00000000  000465b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a007  00000000  00000000  0004a1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec6c1  00000000  00000000  000641d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150899  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d34  00000000  00000000  001508ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006538 	.word	0x08006538

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006538 	.word	0x08006538

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcb6 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f846 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f954 	bl	80007ac <MX_GPIO_Init>
  MX_ETH_Init();
 8000504:	f000 f8ac 	bl	8000660 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000508:	f000 f8f8 	bl	80006fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800050c:	f000 f920 	bl	8000750 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f003 f996 	bl	8003840 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <main+0x68>)
 8000516:	2100      	movs	r1, #0
 8000518:	4811      	ldr	r0, [pc, #68]	; (8000560 <main+0x6c>)
 800051a:	f003 f9db 	bl	80038d4 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <main+0x70>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 8000524:	4a10      	ldr	r2, [pc, #64]	; (8000568 <main+0x74>)
 8000526:	2100      	movs	r1, #0
 8000528:	4810      	ldr	r0, [pc, #64]	; (800056c <main+0x78>)
 800052a:	f003 f9d3 	bl	80038d4 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <main+0x7c>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <main+0x80>)
 8000536:	2100      	movs	r1, #0
 8000538:	480f      	ldr	r0, [pc, #60]	; (8000578 <main+0x84>)
 800053a:	f003 f9cb 	bl	80038d4 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <main+0x88>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_func, NULL, &Task3_attributes);
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <main+0x8c>)
 8000546:	2100      	movs	r1, #0
 8000548:	480e      	ldr	r0, [pc, #56]	; (8000584 <main+0x90>)
 800054a:	f003 f9c3 	bl	80038d4 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <main+0x94>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f003 f998 	bl	8003888 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x64>
 800055a:	bf00      	nop
 800055c:	0800658c 	.word	0x0800658c
 8000560:	08000909 	.word	0x08000909
 8000564:	20000808 	.word	0x20000808
 8000568:	080065b0 	.word	0x080065b0
 800056c:	08000919 	.word	0x08000919
 8000570:	2000080c 	.word	0x2000080c
 8000574:	080065d4 	.word	0x080065d4
 8000578:	08000935 	.word	0x08000935
 800057c:	20000810 	.word	0x20000810
 8000580:	080065f8 	.word	0x080065f8
 8000584:	08000951 	.word	0x08000951
 8000588:	20000814 	.word	0x20000814

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 ff02 	bl	80063a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a27      	ldr	r2, [pc, #156]	; (8000658 <SystemClock_Config+0xcc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd0>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000600:	23a8      	movs	r3, #168	; 0xa8
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000608:	2307      	movs	r3, #7
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fb95 	bl	8001d40 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f9ba 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2105      	movs	r1, #5
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fdf6 	bl	8002230 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800064a:	f000 f9a3 	bl	8000994 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ETH_Init+0x84>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <MX_ETH_Init+0x88>)
 8000668:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_ETH_Init+0x8c>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_ETH_Init+0x8c>)
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_ETH_Init+0x8c>)
 8000678:	22e1      	movs	r2, #225	; 0xe1
 800067a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_ETH_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_ETH_Init+0x8c>)
 8000684:	2200      	movs	r2, #0
 8000686:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_ETH_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_ETH_Init+0x84>)
 8000690:	4a16      	ldr	r2, [pc, #88]	; (80006ec <MX_ETH_Init+0x8c>)
 8000692:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_ETH_Init+0x84>)
 8000696:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800069a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_ETH_Init+0x84>)
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <MX_ETH_Init+0x90>)
 80006a0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_ETH_Init+0x84>)
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_ETH_Init+0x94>)
 80006a6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_ETH_Init+0x84>)
 80006aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006ae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <MX_ETH_Init+0x84>)
 80006b2:	f000 fd21 	bl	80010f8 <HAL_ETH_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 f96a 	bl	8000994 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006c0:	2238      	movs	r2, #56	; 0x38
 80006c2:	2100      	movs	r1, #0
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_ETH_Init+0x98>)
 80006c6:	f005 fe6d 	bl	80063a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_ETH_Init+0x98>)
 80006cc:	2221      	movs	r2, #33	; 0x21
 80006ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_ETH_Init+0x98>)
 80006d2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_ETH_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000208 	.word	0x20000208
 80006e8:	40028000 	.word	0x40028000
 80006ec:	20000818 	.word	0x20000818
 80006f0:	20000168 	.word	0x20000168
 80006f4:	200000c8 	.word	0x200000c8
 80006f8:	20000090 	.word	0x20000090

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART3_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000734:	f002 fa7c 	bl	8002c30 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f929 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200002b8 	.word	0x200002b8
 800074c:	40004800 	.word	0x40004800

08000750 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800075a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2204      	movs	r2, #4
 8000760:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2202      	movs	r2, #2
 8000766:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2202      	movs	r2, #2
 8000772:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2201      	movs	r2, #1
 8000778:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2201      	movs	r2, #1
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	f001 f9b7 	bl	8001b06 <HAL_PCD_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8f9 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200002fc 	.word	0x200002fc

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a4b      	ldr	r2, [pc, #300]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a44      	ldr	r2, [pc, #272]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3d      	ldr	r2, [pc, #244]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a36      	ldr	r2, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <MX_GPIO_Init+0x150>)
 8000872:	f001 f915 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <MX_GPIO_Init+0x154>)
 800087c:	f001 f910 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <MX_GPIO_Init+0x158>)
 8000898:	f000 ff56 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800089c:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <MX_GPIO_Init+0x150>)
 80008b6:	f000 ff47 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0x154>)
 80008d2:	f000 ff39 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_GPIO_Init+0x154>)
 80008ea:	f000 ff2d 	bl	8001748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400
 8000900:	40021800 	.word	0x40021800
 8000904:	40020800 	.word	0x40020800

08000908 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f003 f871 	bl	80039f8 <osDelay>
 8000916:	e7fb      	b.n	8000910 <StartDefaultTask+0x8>

08000918 <Task1_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
  /* Infinite loop */
  for(;;)	//while(1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); 	// LED1
 8000920:	2101      	movs	r1, #1
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <Task1_func+0x18>)
 8000924:	f001 f8d5 	bl	8001ad2 <HAL_GPIO_TogglePin>
    osDelay(100);	//100ms
 8000928:	2064      	movs	r0, #100	; 0x64
 800092a:	f003 f865 	bl	80039f8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); 	// LED1
 800092e:	e7f7      	b.n	8000920 <Task1_func+0x8>
 8000930:	40020400 	.word	0x40020400

08000934 <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); 	// LED2
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <Task2_func+0x18>)
 8000940:	f001 f8c7 	bl	8001ad2 <HAL_GPIO_TogglePin>
    osDelay(100);	//100ms
 8000944:	2064      	movs	r0, #100	; 0x64
 8000946:	f003 f857 	bl	80039f8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); 	// LED2
 800094a:	e7f7      	b.n	800093c <Task2_func+0x8>
 800094c:	40020400 	.word	0x40020400

08000950 <Task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_func */
void Task3_func(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_func */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	// LED2
 8000958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <Task3_func+0x1c>)
 800095e:	f001 f8b8 	bl	8001ad2 <HAL_GPIO_TogglePin>
	osDelay(100);	//100ms
 8000962:	2064      	movs	r0, #100	; 0x64
 8000964:	f003 f848 	bl	80039f8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	// LED2
 8000968:	e7f6      	b.n	8000958 <Task3_func+0x8>
 800096a:	bf00      	nop
 800096c:	40020400 	.word	0x40020400

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 fa93 	bl	8000eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40014800 	.word	0x40014800

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <HAL_MspInit+0x54>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_MspInit+0x54>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 fb5d 	bl	80010a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a55      	ldr	r2, [pc, #340]	; (8000b6c <HAL_ETH_MspInit+0x174>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	f040 80a4 	bne.w	8000b64 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
 8000a20:	4b53      	ldr	r3, [pc, #332]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a52      	ldr	r2, [pc, #328]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b50      	ldr	r3, [pc, #320]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a34:	623b      	str	r3, [r7, #32]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a4b      	ldr	r2, [pc, #300]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b49      	ldr	r3, [pc, #292]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a3d      	ldr	r2, [pc, #244]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a36      	ldr	r2, [pc, #216]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ae0:	2332      	movs	r3, #50	; 0x32
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	481e      	ldr	r0, [pc, #120]	; (8000b74 <HAL_ETH_MspInit+0x17c>)
 8000afc:	f000 fe24 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b00:	2386      	movs	r3, #134	; 0x86
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b10:	230b      	movs	r3, #11
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <HAL_ETH_MspInit+0x180>)
 8000b1c:	f000 fe14 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <HAL_ETH_MspInit+0x184>)
 8000b3e:	f000 fe03 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <HAL_ETH_MspInit+0x188>)
 8000b60:	f000 fdf2 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3738      	adds	r7, #56	; 0x38
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40028000 	.word	0x40028000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_UART_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12c      	bne.n	8000c00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_UART_MspInit+0x8c>)
 8000bfc:	f000 fda4 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004800 	.word	0x40004800
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020c00 	.word	0x40020c00

08000c14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c34:	d13f      	bne.n	8000cb6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c52:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c64:	230a      	movs	r3, #10
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <HAL_PCD_MspInit+0xb0>)
 8000c70:	f000 fd6a 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <HAL_PCD_MspInit+0xb0>)
 8000c8a:	f000 fd5d 	bl	8001748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	6353      	str	r3, [r2, #52]	; 0x34
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_PCD_MspInit+0xac>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_InitTick+0xd4>)
 8000cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce0:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <HAL_InitTick+0xd4>)
 8000ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_InitTick+0xd4>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf4:	f107 020c 	add.w	r2, r7, #12
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fcb6 	bl	8002670 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d04:	f001 fca0 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <HAL_InitTick+0xd8>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <HAL_InitTick+0xe0>)
 8000d20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d28:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d44:	f001 fcc6 	bl	80026d4 <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d11b      	bne.n	8000d8e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <HAL_InitTick+0xdc>)
 8000d58:	f001 fd16 	bl	8002788 <HAL_TIM_Base_Start_IT>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d111      	bne.n	8000d8e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d6a:	201a      	movs	r0, #26
 8000d6c:	f000 f9b6 	bl	80010dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	d808      	bhi.n	8000d88 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000d76:	2200      	movs	r2, #0
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	201a      	movs	r0, #26
 8000d7c:	f000 f992 	bl	80010a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_InitTick+0xe4>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e002      	b.n	8000d8e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	431bde83 	.word	0x431bde83
 8000da4:	20000820 	.word	0x20000820
 8000da8:	40014800 	.word	0x40014800
 8000dac:	20000004 	.word	0x20000004

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000de2:	f001 fd41 	bl	8002868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000820 	.word	0x20000820

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1a:	490e      	ldr	r1, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e1c:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e30:	4c0b      	ldr	r4, [pc, #44]	; (8000e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3e:	f7ff ffd7 	bl	8000df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f005 fa7b 	bl	800633c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fb55 	bl	80004f4 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e58:	080066a4 	.word	0x080066a4
  ldr r2, =_sbss
 8000e5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e60:	20005284 	.word	0x20005284

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f8fc 	bl	800108e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f7ff ff16 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fd80 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000868 	.word	0x20000868

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000868 	.word	0x20000868

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff4c 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b6:	f7ff ff61 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	6978      	ldr	r0, [r7, #20]
 80010c2:	f7ff ffb1 	bl	8001028 <NVIC_EncodePriority>
 80010c6:	4602      	mov	r2, r0
 80010c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff80 	bl	8000fd4 <__NVIC_SetPriority>
}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff54 	bl	8000f98 <__NVIC_EnableIRQ>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e06c      	b.n	80011e4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001110:	2b00      	cmp	r3, #0
 8001112:	d106      	bne.n	8001122 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2223      	movs	r2, #35	; 0x23
 8001118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fc6b 	bl	80009f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_ETH_Init+0xf4>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <HAL_ETH_Init+0xf4>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_ETH_Init+0xf4>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_ETH_Init+0xf8>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <HAL_ETH_Init+0xf8>)
 8001144:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001148:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <HAL_ETH_Init+0xf8>)
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4927      	ldr	r1, [pc, #156]	; (80011f0 <HAL_ETH_Init+0xf8>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_ETH_Init+0xf8>)
 800115a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001174:	f7ff feae 	bl	8000ed4 <HAL_GetTick>
 8001178:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800117a:	e011      	b.n	80011a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800117c:	f7ff feaa 	bl	8000ed4 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800118a:	d909      	bls.n	80011a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2204      	movs	r2, #4
 8001190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	22e0      	movs	r2, #224	; 0xe0
 8001198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e021      	b.n	80011e4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e4      	bne.n	800117c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f958 	bl	8001468 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f9ff 	bl	80015bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fa55 	bl	800166e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f9bd 	bl	800154c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2210      	movs	r2, #16
 80011de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800

080011f4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4b51      	ldr	r3, [pc, #324]	; (8001350 <ETH_SetMACConfig+0x15c>)
 800120a:	4013      	ands	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	7c1b      	ldrb	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <ETH_SetMACConfig+0x28>
 8001216:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800121a:	e000      	b.n	800121e <ETH_SetMACConfig+0x2a>
 800121c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	7c5b      	ldrb	r3, [r3, #17]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <ETH_SetMACConfig+0x38>
 8001226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122a:	e000      	b.n	800122e <ETH_SetMACConfig+0x3a>
 800122c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800122e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001234:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	7fdb      	ldrb	r3, [r3, #31]
 800123a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800123c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001242:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	7f92      	ldrb	r2, [r2, #30]
 8001248:	2a00      	cmp	r2, #0
 800124a:	d102      	bne.n	8001252 <ETH_SetMACConfig+0x5e>
 800124c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001250:	e000      	b.n	8001254 <ETH_SetMACConfig+0x60>
 8001252:	2200      	movs	r2, #0
                        macconf->Speed |
 8001254:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	7f1b      	ldrb	r3, [r3, #28]
 800125a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800125c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001262:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800126a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001272:	2a00      	cmp	r2, #0
 8001274:	d102      	bne.n	800127c <ETH_SetMACConfig+0x88>
 8001276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127a:	e000      	b.n	800127e <ETH_SetMACConfig+0x8a>
 800127c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800127e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	7bdb      	ldrb	r3, [r3, #15]
 8001284:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001286:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800128c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001294:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001296:	4313      	orrs	r3, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff fe1c 	bl	8000eec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d101      	bne.n	80012e2 <ETH_SetMACConfig+0xee>
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	e000      	b.n	80012e4 <ETH_SetMACConfig+0xf0>
 80012e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80012f2:	2a01      	cmp	r2, #1
 80012f4:	d101      	bne.n	80012fa <ETH_SetMACConfig+0x106>
 80012f6:	2208      	movs	r2, #8
 80012f8:	e000      	b.n	80012fc <ETH_SetMACConfig+0x108>
 80012fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80012fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001304:	2a01      	cmp	r2, #1
 8001306:	d101      	bne.n	800130c <ETH_SetMACConfig+0x118>
 8001308:	2204      	movs	r2, #4
 800130a:	e000      	b.n	800130e <ETH_SetMACConfig+0x11a>
 800130c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800130e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001316:	2a01      	cmp	r2, #1
 8001318:	d101      	bne.n	800131e <ETH_SetMACConfig+0x12a>
 800131a:	2202      	movs	r2, #2
 800131c:	e000      	b.n	8001320 <ETH_SetMACConfig+0x12c>
 800131e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001320:	4313      	orrs	r3, r2
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fdd7 	bl	8000eec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	ff20810f 	.word	0xff20810f

08001354 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <ETH_SetDMAConfig+0x110>)
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	7b1b      	ldrb	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <ETH_SetDMAConfig+0x2c>
 800137a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800137e:	e000      	b.n	8001382 <ETH_SetDMAConfig+0x2e>
 8001380:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	7b5b      	ldrb	r3, [r3, #13]
 8001386:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001388:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	7f52      	ldrb	r2, [r2, #29]
 800138e:	2a00      	cmp	r2, #0
 8001390:	d102      	bne.n	8001398 <ETH_SetDMAConfig+0x44>
 8001392:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001396:	e000      	b.n	800139a <ETH_SetDMAConfig+0x46>
 8001398:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800139a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	7b9b      	ldrb	r3, [r3, #14]
 80013a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	7f1b      	ldrb	r3, [r3, #28]
 80013ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80013b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	7f9b      	ldrb	r3, [r3, #30]
 80013b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013c8:	4313      	orrs	r3, r2
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fd7e 	bl	8000eec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f8:	461a      	mov	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001408:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800140e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001414:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800141c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800141e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001426:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800142c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800143a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fd4f 	bl	8000eec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	f8de3f23 	.word	0xf8de3f23

08001468 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0a6      	sub	sp, #152	; 0x98
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001476:	2301      	movs	r3, #1
 8001478:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800147c:	2300      	movs	r3, #0
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001486:	2301      	movs	r3, #1
 8001488:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014a4:	2300      	movs	r3, #0
 80014a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80014d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80014dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fe86 	bl	80011f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001514:	2301      	movs	r3, #1
 8001516:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800151e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001522:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001528:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff08 	bl	8001354 <ETH_SetDMAConfig>
}
 8001544:	bf00      	nop
 8001546:	3798      	adds	r7, #152	; 0x98
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3305      	adds	r3, #5
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	3204      	adds	r2, #4
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <ETH_MACAddressConfig+0x68>)
 800156e:	4413      	add	r3, r2
 8001570:	461a      	mov	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3303      	adds	r3, #3
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	061a      	lsls	r2, r3, #24
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3302      	adds	r3, #2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3301      	adds	r3, #1
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4313      	orrs	r3, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <ETH_MACAddressConfig+0x6c>)
 800159e:	4413      	add	r3, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40028040 	.word	0x40028040
 80015b8:	40028044 	.word	0x40028044

080015bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e03e      	b.n	8001648 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68d9      	ldr	r1, [r3, #12]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	3206      	adds	r2, #6
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d80c      	bhi.n	800162c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68d9      	ldr	r1, [r3, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	461a      	mov	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	e004      	b.n	8001636 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	461a      	mov	r2, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3301      	adds	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d9bd      	bls.n	80015ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001660:	611a      	str	r2, [r3, #16]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e046      	b.n	800170a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6919      	ldr	r1, [r3, #16]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016c0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	3212      	adds	r2, #18
 80016d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d80c      	bhi.n	80016fa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6919      	ldr	r1, [r3, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	e004      	b.n	8001704 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	461a      	mov	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3301      	adds	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d9b5      	bls.n	800167c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173a:	60da      	str	r2, [r3, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e177      	b.n	8001a54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8166 	bne.w	8001a4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d005      	beq.n	800179a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	2b02      	cmp	r3, #2
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b03      	cmp	r3, #3
 8001806:	d017      	beq.n	8001838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80c0 	beq.w	8001a4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b63      	ldr	r3, [pc, #396]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ea:	4a61      	ldr	r2, [pc, #388]	; (8001a70 <HAL_GPIO_Init+0x328>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <HAL_GPIO_Init+0x32c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d037      	beq.n	8001986 <HAL_GPIO_Init+0x23e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a57      	ldr	r2, [pc, #348]	; (8001a78 <HAL_GPIO_Init+0x330>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d031      	beq.n	8001982 <HAL_GPIO_Init+0x23a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a56      	ldr	r2, [pc, #344]	; (8001a7c <HAL_GPIO_Init+0x334>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d02b      	beq.n	800197e <HAL_GPIO_Init+0x236>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a55      	ldr	r2, [pc, #340]	; (8001a80 <HAL_GPIO_Init+0x338>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d025      	beq.n	800197a <HAL_GPIO_Init+0x232>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a54      	ldr	r2, [pc, #336]	; (8001a84 <HAL_GPIO_Init+0x33c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <HAL_GPIO_Init+0x22e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a53      	ldr	r2, [pc, #332]	; (8001a88 <HAL_GPIO_Init+0x340>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x22a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_GPIO_Init+0x344>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x226>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x348>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x222>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <HAL_GPIO_Init+0x34c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x21e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_GPIO_Init+0x350>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x21a>
 800195e:	2309      	movs	r3, #9
 8001960:	e012      	b.n	8001988 <HAL_GPIO_Init+0x240>
 8001962:	230a      	movs	r3, #10
 8001964:	e010      	b.n	8001988 <HAL_GPIO_Init+0x240>
 8001966:	2308      	movs	r3, #8
 8001968:	e00e      	b.n	8001988 <HAL_GPIO_Init+0x240>
 800196a:	2307      	movs	r3, #7
 800196c:	e00c      	b.n	8001988 <HAL_GPIO_Init+0x240>
 800196e:	2306      	movs	r3, #6
 8001970:	e00a      	b.n	8001988 <HAL_GPIO_Init+0x240>
 8001972:	2305      	movs	r3, #5
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x240>
 8001976:	2304      	movs	r3, #4
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x240>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x240>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x240>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x240>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x328>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_GPIO_Init+0x354>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <HAL_GPIO_Init+0x354>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <HAL_GPIO_Init+0x354>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <HAL_GPIO_Init+0x354>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_GPIO_Init+0x354>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <HAL_GPIO_Init+0x354>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_GPIO_Init+0x354>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_GPIO_Init+0x354>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f ae84 	bls.w	8001764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021800 	.word	0x40021800
 8001a90:	40021c00 	.word	0x40021c00
 8001a94:	40022000 	.word	0x40022000
 8001a98:	40022400 	.word	0x40022400
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	400b      	ands	r3, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b08:	b08f      	sub	sp, #60	; 0x3c
 8001b0a:	af0a      	add	r7, sp, #40	; 0x28
 8001b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e10f      	b.n	8001d38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff f86e 	bl	8000c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fb8d 	bl	8003276 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	687e      	ldr	r6, [r7, #4]
 8001b64:	466d      	mov	r5, sp
 8001b66:	f106 0410 	add.w	r4, r6, #16
 8001b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b7a:	1d33      	adds	r3, r6, #4
 8001b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7e:	6838      	ldr	r0, [r7, #0]
 8001b80:	f001 fb18 	bl	80031b4 <USB_CoreInit>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0d0      	b.n	8001d38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 fb7b 	bl	8003298 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e04a      	b.n	8001c3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	333d      	adds	r3, #61	; 0x3d
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	333c      	adds	r3, #60	; 0x3c
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	b298      	uxth	r0, r3
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	3344      	adds	r3, #68	; 0x44
 8001be4:	4602      	mov	r2, r0
 8001be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3340      	adds	r3, #64	; 0x40
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3348      	adds	r3, #72	; 0x48
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	334c      	adds	r3, #76	; 0x4c
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3354      	adds	r3, #84	; 0x54
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3af      	bcc.n	8001ba8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e044      	b.n	8001cd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3b5      	bcc.n	8001c4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	687e      	ldr	r6, [r7, #4]
 8001cea:	466d      	mov	r5, sp
 8001cec:	f106 0410 	add.w	r4, r6, #16
 8001cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d00:	1d33      	adds	r3, r6, #4
 8001d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d04:	6838      	ldr	r0, [r7, #0]
 8001d06:	f001 fb13 	bl	8003330 <USB_DevInit>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e00d      	b.n	8001d38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fcde 	bl	80036f2 <USB_DevDisconnect>

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e267      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d075      	beq.n	8001e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5e:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d00c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4b85      	ldr	r3, [pc, #532]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b82      	ldr	r3, [pc, #520]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b7e      	ldr	r3, [pc, #504]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05b      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d157      	bne.n	8001e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e242      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x74>
 8001da6:	4b76      	ldr	r3, [pc, #472]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a75      	ldr	r2, [pc, #468]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x98>
 8001dbe:	4b70      	ldr	r3, [pc, #448]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6f      	ldr	r2, [pc, #444]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6c      	ldr	r2, [pc, #432]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001dd8:	4b69      	ldr	r3, [pc, #420]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a68      	ldr	r2, [pc, #416]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a65      	ldr	r2, [pc, #404]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff f86c 	bl	8000ed4 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff f868 	bl	8000ed4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e207      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xc0>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff f858 	bl	8000ed4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff f854 	bl	8000ed4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1f3      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0xe8>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e62:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x152>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e1c7      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4937      	ldr	r1, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_OscConfig+0x244>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f80d 	bl	8000ed4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f809 	bl	8000ed4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e1a8      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4925      	ldr	r1, [pc, #148]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x244>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ffec 	bl	8000ed4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f00:	f7fe ffe8 	bl	8000ed4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e187      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d036      	beq.n	8001f98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_RCC_OscConfig+0x248>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7fe ffcc 	bl	8000ed4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f40:	f7fe ffc8 	bl	8000ed4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e167      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x240>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x200>
 8001f5e:	e01b      	b.n	8001f98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_OscConfig+0x248>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7fe ffb5 	bl	8000ed4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	e00e      	b.n	8001f8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7fe ffb1 	bl	8000ed4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d907      	bls.n	8001f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e150      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
 8001f80:	40023800 	.word	0x40023800
 8001f84:	42470000 	.word	0x42470000
 8001f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8c:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ea      	bne.n	8001f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8097 	beq.w	80020d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b81      	ldr	r3, [pc, #516]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	4b7d      	ldr	r3, [pc, #500]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a7c      	ldr	r2, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b77      	ldr	r3, [pc, #476]	; (80021b4 <HAL_RCC_OscConfig+0x474>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b74      	ldr	r3, [pc, #464]	; (80021b4 <HAL_RCC_OscConfig+0x474>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a73      	ldr	r2, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x474>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7fe ff71 	bl	8000ed4 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7fe ff6d 	bl	8000ed4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e10c      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x474>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x2ea>
 800201c:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a63      	ldr	r2, [pc, #396]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	e01c      	b.n	8002064 <HAL_RCC_OscConfig+0x324>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b05      	cmp	r3, #5
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x30c>
 8002032:	4b5f      	ldr	r3, [pc, #380]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a5e      	ldr	r2, [pc, #376]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	4b5c      	ldr	r3, [pc, #368]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a5b      	ldr	r2, [pc, #364]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0x324>
 800204c:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	4b55      	ldr	r3, [pc, #340]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a54      	ldr	r2, [pc, #336]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d015      	beq.n	8002098 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe ff32 	bl	8000ed4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe ff2e 	bl	8000ed4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0cb      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ee      	beq.n	8002074 <HAL_RCC_OscConfig+0x334>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7fe ff1c 	bl	8000ed4 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe ff18 	bl	8000ed4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0b5      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ee      	bne.n	80020a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c8:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	4a38      	ldr	r2, [pc, #224]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 80020ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a1 	beq.w	8002220 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d05c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d141      	bne.n	8002176 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_OscConfig+0x478>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7fe feec 	bl	8000ed4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fee8 	bl	8000ed4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e087      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	3b01      	subs	r3, #1
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	491b      	ldr	r1, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x478>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe fec1 	bl	8000ed4 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe febd 	bl	8000ed4 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e05c      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x416>
 8002174:	e054      	b.n	8002220 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_RCC_OscConfig+0x478>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe feaa 	bl	8000ed4 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe fea6 	bl	8000ed4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e045      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_OscConfig+0x470>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x444>
 80021a2:	e03d      	b.n	8002220 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e038      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40007000 	.word	0x40007000
 80021b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <HAL_RCC_OscConfig+0x4ec>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d028      	beq.n	800221c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d121      	bne.n	800221c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d11a      	bne.n	800221c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d111      	bne.n	800221c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	3b01      	subs	r3, #1
 8002206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0cc      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d90c      	bls.n	800226c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d044      	beq.n	8002350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d119      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e067      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4934      	ldr	r1, [pc, #208]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7fe fdd8 	bl	8000ed4 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7fe fdd4 	bl	8000ed4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e04f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d20c      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	490a      	ldr	r1, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fc76 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00
 80023ec:	40023800 	.word	0x40023800
 80023f0:	0800661c 	.word	0x0800661c
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002400:	b094      	sub	sp, #80	; 0x50
 8002402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	647b      	str	r3, [r7, #68]	; 0x44
 8002408:	2300      	movs	r3, #0
 800240a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800240c:	2300      	movs	r3, #0
 800240e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002414:	4b79      	ldr	r3, [pc, #484]	; (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d00d      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x40>
 8002420:	2b08      	cmp	r3, #8
 8002422:	f200 80e1 	bhi.w	80025e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x34>
 800242a:	2b04      	cmp	r3, #4
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x3a>
 800242e:	e0db      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b73      	ldr	r3, [pc, #460]	; (8002600 <HAL_RCC_GetSysClockFreq+0x204>)
 8002432:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002434:	e0db      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002436:	4b73      	ldr	r3, [pc, #460]	; (8002604 <HAL_RCC_GetSysClockFreq+0x208>)
 8002438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800243a:	e0d8      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800243c:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002444:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d063      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002452:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	2200      	movs	r2, #0
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
 800245c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
 800246a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800246e:	4622      	mov	r2, r4
 8002470:	462b      	mov	r3, r5
 8002472:	f04f 0000 	mov.w	r0, #0
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	0159      	lsls	r1, r3, #5
 800247c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002480:	0150      	lsls	r0, r2, #5
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4621      	mov	r1, r4
 8002488:	1a51      	subs	r1, r2, r1
 800248a:	6139      	str	r1, [r7, #16]
 800248c:	4629      	mov	r1, r5
 800248e:	eb63 0301 	sbc.w	r3, r3, r1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a0:	4659      	mov	r1, fp
 80024a2:	018b      	lsls	r3, r1, #6
 80024a4:	4651      	mov	r1, sl
 80024a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024aa:	4651      	mov	r1, sl
 80024ac:	018a      	lsls	r2, r1, #6
 80024ae:	4651      	mov	r1, sl
 80024b0:	ebb2 0801 	subs.w	r8, r2, r1
 80024b4:	4659      	mov	r1, fp
 80024b6:	eb63 0901 	sbc.w	r9, r3, r1
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ce:	4690      	mov	r8, r2
 80024d0:	4699      	mov	r9, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	eb18 0303 	adds.w	r3, r8, r3
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	462b      	mov	r3, r5
 80024dc:	eb49 0303 	adc.w	r3, r9, r3
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ee:	4629      	mov	r1, r5
 80024f0:	024b      	lsls	r3, r1, #9
 80024f2:	4621      	mov	r1, r4
 80024f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024f8:	4621      	mov	r1, r4
 80024fa:	024a      	lsls	r2, r1, #9
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002502:	2200      	movs	r2, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
 8002506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800250c:	f7fd fe70 	bl	80001f0 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002518:	e058      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	2200      	movs	r2, #0
 8002522:	4618      	mov	r0, r3
 8002524:	4611      	mov	r1, r2
 8002526:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002534:	4642      	mov	r2, r8
 8002536:	464b      	mov	r3, r9
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	0159      	lsls	r1, r3, #5
 8002542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002546:	0150      	lsls	r0, r2, #5
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4641      	mov	r1, r8
 800254e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002552:	4649      	mov	r1, r9
 8002554:	eb63 0b01 	sbc.w	fp, r3, r1
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800256c:	ebb2 040a 	subs.w	r4, r2, sl
 8002570:	eb63 050b 	sbc.w	r5, r3, fp
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	00eb      	lsls	r3, r5, #3
 800257e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002582:	00e2      	lsls	r2, r4, #3
 8002584:	4614      	mov	r4, r2
 8002586:	461d      	mov	r5, r3
 8002588:	4643      	mov	r3, r8
 800258a:	18e3      	adds	r3, r4, r3
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	464b      	mov	r3, r9
 8002590:	eb45 0303 	adc.w	r3, r5, r3
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a2:	4629      	mov	r1, r5
 80025a4:	028b      	lsls	r3, r1, #10
 80025a6:	4621      	mov	r1, r4
 80025a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ac:	4621      	mov	r1, r4
 80025ae:	028a      	lsls	r2, r1, #10
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b6:	2200      	movs	r2, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	61fa      	str	r2, [r7, #28]
 80025bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c0:	f7fd fe16 	bl	80001f0 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4613      	mov	r3, r2
 80025ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3750      	adds	r7, #80	; 0x50
 80025f4:	46bd      	mov	sp, r7
 80025f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	00f42400 	.word	0x00f42400
 8002604:	007a1200 	.word	0x007a1200

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_RCC_GetHCLKFreq+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002624:	f7ff fff0 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	0800662c 	.word	0x0800662c

08002648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800264c:	f7ff ffdc 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0b5b      	lsrs	r3, r3, #13
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCC_GetPCLK2Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	0800662c 	.word	0x0800662c

08002670 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	220f      	movs	r2, #15
 800267e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCC_GetClockConfig+0x60>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40023c00 	.word	0x40023c00

080026d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e041      	b.n	800276a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f839 	bl	8002772 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f000 f9d8 	bl	8002ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d001      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e04e      	b.n	800283e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_TIM_Base_Start_IT+0xc4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d022      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x80>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d01d      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x80>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_TIM_Base_Start_IT+0xc8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d018      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x80>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_TIM_Base_Start_IT+0xcc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d013      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x80>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_TIM_Base_Start_IT+0xd0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00e      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x80>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_TIM_Base_Start_IT+0xd4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x80>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_TIM_Base_Start_IT+0xd8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x80>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_TIM_Base_Start_IT+0xdc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d111      	bne.n	800282c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d010      	beq.n	800283c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282a:	e007      	b.n	800283c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40010000 	.word	0x40010000
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800
 8002858:	40000c00 	.word	0x40000c00
 800285c:	40010400 	.word	0x40010400
 8002860:	40014000 	.word	0x40014000
 8002864:	40001800 	.word	0x40001800

08002868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d122      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b02      	cmp	r3, #2
 800288a:	d11b      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0202 	mvn.w	r2, #2
 8002894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8ee 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8e0 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8f1 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0204 	mvn.w	r2, #4
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8c4 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8b6 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f8c7 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b08      	cmp	r3, #8
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0208 	mvn.w	r2, #8
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2204      	movs	r2, #4
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f89a 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f88c 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f89d 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b10      	cmp	r3, #16
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b10      	cmp	r3, #16
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0210 	mvn.w	r2, #16
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2208      	movs	r2, #8
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f870 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f862 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f873 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0201 	mvn.w	r2, #1
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fd ffc2 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b80      	cmp	r3, #128	; 0x80
 80029f8:	d10e      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d107      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f902 	bl	8002c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f838 	bl	8002ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0220 	mvn.w	r2, #32
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8cc 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae6:	d00f      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3d      	ldr	r2, [pc, #244]	; (8002be0 <TIM_Base_SetConfig+0x118>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00b      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <TIM_Base_SetConfig+0x11c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <TIM_Base_SetConfig+0x120>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d108      	bne.n	8002b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b28:	d027      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	; (8002be0 <TIM_Base_SetConfig+0x118>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d023      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <TIM_Base_SetConfig+0x11c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <TIM_Base_SetConfig+0x120>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a29      	ldr	r2, [pc, #164]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d017      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <TIM_Base_SetConfig+0x128>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <TIM_Base_SetConfig+0x12c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <TIM_Base_SetConfig+0x130>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <TIM_Base_SetConfig+0x134>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <TIM_Base_SetConfig+0x138>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <TIM_Base_SetConfig+0x13c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0xf8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800
 8002bfc:	40001800 	.word	0x40001800
 8002c00:	40001c00 	.word	0x40001c00
 8002c04:	40002000 	.word	0x40002000

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e03f      	b.n	8002cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd ff94 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f829 	bl	8002ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b0c0      	sub	sp, #256	; 0x100
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	ea40 0301 	orr.w	r3, r0, r1
 8002cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d24:	f021 010c 	bic.w	r1, r1, #12
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d32:	430b      	orrs	r3, r1
 8002d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	6999      	ldr	r1, [r3, #24]
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	ea40 0301 	orr.w	r3, r0, r1
 8002d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <UART_SetConfig+0x2cc>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d005      	beq.n	8002d6c <UART_SetConfig+0xa0>
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <UART_SetConfig+0x2d0>)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d104      	bne.n	8002d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d6c:	f7ff fc6c 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d74:	e003      	b.n	8002d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d76:	f7ff fc53 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	f040 810c 	bne.w	8002fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d9e:	4622      	mov	r2, r4
 8002da0:	462b      	mov	r3, r5
 8002da2:	1891      	adds	r1, r2, r2
 8002da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002da6:	415b      	adcs	r3, r3
 8002da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dae:	4621      	mov	r1, r4
 8002db0:	eb12 0801 	adds.w	r8, r2, r1
 8002db4:	4629      	mov	r1, r5
 8002db6:	eb43 0901 	adc.w	r9, r3, r1
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dce:	4690      	mov	r8, r2
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	eb18 0303 	adds.w	r3, r8, r3
 8002dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ddc:	462b      	mov	r3, r5
 8002dde:	eb49 0303 	adc.w	r3, r9, r3
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	18db      	adds	r3, r3, r3
 8002dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002e00:	4613      	mov	r3, r2
 8002e02:	eb42 0303 	adc.w	r3, r2, r3
 8002e06:	657b      	str	r3, [r7, #84]	; 0x54
 8002e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e10:	f7fd f9ee 	bl	80001f0 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	011c      	lsls	r4, r3, #4
 8002e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e44:	4641      	mov	r1, r8
 8002e46:	eb12 0a01 	adds.w	sl, r2, r1
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e64:	4692      	mov	sl, r2
 8002e66:	469b      	mov	fp, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e72:	464b      	mov	r3, r9
 8002e74:	eb4b 0303 	adc.w	r3, fp, r3
 8002e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e90:	460b      	mov	r3, r1
 8002e92:	18db      	adds	r3, r3, r3
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
 8002e96:	4613      	mov	r3, r2
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ea6:	f7fd f9a3 	bl	80001f0 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	1acb      	subs	r3, r1, r3
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ed4:	441c      	add	r4, r3
 8002ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	1891      	adds	r1, r2, r2
 8002eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ef8:	4641      	mov	r1, r8
 8002efa:	1851      	adds	r1, r2, r1
 8002efc:	6339      	str	r1, [r7, #48]	; 0x30
 8002efe:	4649      	mov	r1, r9
 8002f00:	414b      	adcs	r3, r1
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f10:	4659      	mov	r1, fp
 8002f12:	00cb      	lsls	r3, r1, #3
 8002f14:	4651      	mov	r1, sl
 8002f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	00ca      	lsls	r2, r1, #3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	4642      	mov	r2, r8
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	460a      	mov	r2, r1
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	18db      	adds	r3, r3, r3
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f52:	4613      	mov	r3, r2
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f62:	f7fd f945 	bl	80001f0 <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	2164      	movs	r1, #100	; 0x64
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	3332      	adds	r3, #50	; 0x32
 8002f7e:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	f003 0207 	and.w	r2, r3, #7
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4422      	add	r2, r4
 8002f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f94:	e105      	b.n	80031a2 <UART_SetConfig+0x4d6>
 8002f96:	bf00      	nop
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	464b      	mov	r3, r9
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	6239      	str	r1, [r7, #32]
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1854      	adds	r4, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb43 0501 	adc.w	r5, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	00eb      	lsls	r3, r5, #3
 8002fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fde:	00e2      	lsls	r2, r4, #3
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	18e3      	adds	r3, r4, r3
 8002fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fec:	464b      	mov	r3, r9
 8002fee:	eb45 0303 	adc.w	r3, r5, r3
 8002ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003012:	4629      	mov	r1, r5
 8003014:	008b      	lsls	r3, r1, #2
 8003016:	4621      	mov	r1, r4
 8003018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301c:	4621      	mov	r1, r4
 800301e:	008a      	lsls	r2, r1, #2
 8003020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003024:	f7fd f8e4 	bl	80001f0 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4b60      	ldr	r3, [pc, #384]	; (80031b0 <UART_SetConfig+0x4e4>)
 800302e:	fba3 2302 	umull	r2, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	011c      	lsls	r4, r3, #4
 8003036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	1891      	adds	r1, r2, r2
 800304e:	61b9      	str	r1, [r7, #24]
 8003050:	415b      	adcs	r3, r3
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003058:	4641      	mov	r1, r8
 800305a:	1851      	adds	r1, r2, r1
 800305c:	6139      	str	r1, [r7, #16]
 800305e:	4649      	mov	r1, r9
 8003060:	414b      	adcs	r3, r1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003070:	4659      	mov	r1, fp
 8003072:	00cb      	lsls	r3, r1, #3
 8003074:	4651      	mov	r1, sl
 8003076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307a:	4651      	mov	r1, sl
 800307c:	00ca      	lsls	r2, r1, #3
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	4603      	mov	r3, r0
 8003084:	4642      	mov	r2, r8
 8003086:	189b      	adds	r3, r3, r2
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800308c:	464b      	mov	r3, r9
 800308e:	460a      	mov	r2, r1
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030b0:	4649      	mov	r1, r9
 80030b2:	008b      	lsls	r3, r1, #2
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ba:	4641      	mov	r1, r8
 80030bc:	008a      	lsls	r2, r1, #2
 80030be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030c2:	f7fd f895 	bl	80001f0 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <UART_SetConfig+0x4e4>)
 80030cc:	fba3 1302 	umull	r1, r3, r3, r2
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	2164      	movs	r1, #100	; 0x64
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	3332      	adds	r3, #50	; 0x32
 80030de:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <UART_SetConfig+0x4e4>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ea:	441c      	add	r4, r3
 80030ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f0:	2200      	movs	r2, #0
 80030f2:	673b      	str	r3, [r7, #112]	; 0x70
 80030f4:	677a      	str	r2, [r7, #116]	; 0x74
 80030f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030fa:	4642      	mov	r2, r8
 80030fc:	464b      	mov	r3, r9
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	415b      	adcs	r3, r3
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800310a:	4641      	mov	r1, r8
 800310c:	1851      	adds	r1, r2, r1
 800310e:	6039      	str	r1, [r7, #0]
 8003110:	4649      	mov	r1, r9
 8003112:	414b      	adcs	r3, r1
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003122:	4659      	mov	r1, fp
 8003124:	00cb      	lsls	r3, r1, #3
 8003126:	4651      	mov	r1, sl
 8003128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312c:	4651      	mov	r1, sl
 800312e:	00ca      	lsls	r2, r1, #3
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	4603      	mov	r3, r0
 8003136:	4642      	mov	r2, r8
 8003138:	189b      	adds	r3, r3, r2
 800313a:	66bb      	str	r3, [r7, #104]	; 0x68
 800313c:	464b      	mov	r3, r9
 800313e:	460a      	mov	r2, r1
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	663b      	str	r3, [r7, #96]	; 0x60
 8003150:	667a      	str	r2, [r7, #100]	; 0x64
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800315e:	4649      	mov	r1, r9
 8003160:	008b      	lsls	r3, r1, #2
 8003162:	4641      	mov	r1, r8
 8003164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003168:	4641      	mov	r1, r8
 800316a:	008a      	lsls	r2, r1, #2
 800316c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003170:	f7fd f83e 	bl	80001f0 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <UART_SetConfig+0x4e4>)
 800317a:	fba3 1302 	umull	r1, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2164      	movs	r1, #100	; 0x64
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <UART_SetConfig+0x4e4>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4422      	add	r2, r4
 80031a0:	609a      	str	r2, [r3, #8]
}
 80031a2:	bf00      	nop
 80031a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031b4:	b084      	sub	sp, #16
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	f107 001c 	add.w	r0, r7, #28
 80031c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d122      	bne.n	8003212 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80031e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 faa2 	bl	8003750 <USB_CoreReset>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e01a      	b.n	8003248 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa96 	bl	8003750 <USB_CoreReset>
 8003224:	4603      	mov	r3, r0
 8003226:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
 800323a:	e005      	b.n	8003248 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10b      	bne.n	8003266 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f043 0206 	orr.w	r2, r3, #6
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003272:	b004      	add	sp, #16
 8003274:	4770      	bx	lr

08003276 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f023 0201 	bic.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d115      	bne.n	80032e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f7fd fe10 	bl	8000eec <HAL_Delay>
      ms++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa2e 	bl	8003734 <USB_GetMode>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d01e      	beq.n	800331c <USB_SetCurrentMode+0x84>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b31      	cmp	r3, #49	; 0x31
 80032e2:	d9f0      	bls.n	80032c6 <USB_SetCurrentMode+0x2e>
 80032e4:	e01a      	b.n	800331c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032f8:	2001      	movs	r0, #1
 80032fa:	f7fd fdf7 	bl	8000eec <HAL_Delay>
      ms++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3301      	adds	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fa15 	bl	8003734 <USB_GetMode>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <USB_SetCurrentMode+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b31      	cmp	r3, #49	; 0x31
 8003314:	d9f0      	bls.n	80032f8 <USB_SetCurrentMode+0x60>
 8003316:	e001      	b.n	800331c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e005      	b.n	8003328 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b32      	cmp	r3, #50	; 0x32
 8003320:	d101      	bne.n	8003326 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003330:	b084      	sub	sp, #16
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800333e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e009      	b.n	8003364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3340      	adds	r3, #64	; 0x40
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	3301      	adds	r3, #1
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b0e      	cmp	r3, #14
 8003368:	d9f2      	bls.n	8003350 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800336a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d11c      	bne.n	80033aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
 80033a8:	e00b      	b.n	80033c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033c8:	461a      	mov	r2, r3
 80033ca:	2300      	movs	r3, #0
 80033cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d4:	4619      	mov	r1, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033dc:	461a      	mov	r2, r3
 80033de:	680b      	ldr	r3, [r1, #0]
 80033e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10c      	bne.n	8003402 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80033ee:	2100      	movs	r1, #0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f965 	bl	80036c0 <USB_SetDevSpeed>
 80033f6:	e008      	b.n	800340a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033f8:	2101      	movs	r1, #1
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f960 	bl	80036c0 <USB_SetDevSpeed>
 8003400:	e003      	b.n	800340a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003402:	2103      	movs	r1, #3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f95b 	bl	80036c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800340a:	2110      	movs	r1, #16
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8f3 	bl	80035f8 <USB_FlushTxFifo>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f91f 	bl	8003660 <USB_FlushRxFifo>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	461a      	mov	r2, r3
 8003434:	2300      	movs	r3, #0
 8003436:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	461a      	mov	r2, r3
 8003440:	2300      	movs	r3, #0
 8003442:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344a:	461a      	mov	r2, r3
 800344c:	2300      	movs	r3, #0
 800344e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e043      	b.n	80034de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346c:	d118      	bne.n	80034a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003480:	461a      	mov	r2, r3
 8003482:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	e013      	b.n	80034b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003496:	461a      	mov	r2, r3
 8003498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e008      	b.n	80034b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	461a      	mov	r2, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034be:	461a      	mov	r2, r3
 80034c0:	2300      	movs	r3, #0
 80034c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d0:	461a      	mov	r2, r3
 80034d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	3301      	adds	r3, #1
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3b7      	bcc.n	8003456 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	e043      	b.n	8003574 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003502:	d118      	bne.n	8003536 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003516:	461a      	mov	r2, r3
 8003518:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e013      	b.n	8003548 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e008      	b.n	8003548 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003542:	461a      	mov	r2, r3
 8003544:	2300      	movs	r3, #0
 8003546:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	2300      	movs	r3, #0
 8003558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003566:	461a      	mov	r2, r3
 8003568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800356c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3301      	adds	r3, #1
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d3b7      	bcc.n	80034ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800358a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800359c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f043 0210 	orr.w	r2, r3, #16
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <USB_DevInit+0x2c4>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f043 0208 	orr.w	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80035ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035f0:	b004      	add	sp, #16
 80035f2:	4770      	bx	lr
 80035f4:	803c3800 	.word	0x803c3800

080035f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <USB_FlushTxFifo+0x64>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e01b      	b.n	8003650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	daf2      	bge.n	8003606 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	019b      	lsls	r3, r3, #6
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a08      	ldr	r2, [pc, #32]	; (800365c <USB_FlushTxFifo+0x64>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e006      	b.n	8003650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d0f0      	beq.n	8003630 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	00030d40 	.word	0x00030d40

08003660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3301      	adds	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a11      	ldr	r2, [pc, #68]	; (80036bc <USB_FlushRxFifo+0x5c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e018      	b.n	80036b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	daf2      	bge.n	800366c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2210      	movs	r2, #16
 800368e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a08      	ldr	r2, [pc, #32]	; (80036bc <USB_FlushRxFifo+0x5c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e006      	b.n	80036b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d0f0      	beq.n	8003690 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	00030d40 	.word	0x00030d40

080036c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	68f9      	ldr	r1, [r7, #12]
 80036dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800370c:	f023 0303 	bic.w	r3, r3, #3
 8003710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0301 	and.w	r3, r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <USB_CoreReset+0x64>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e01b      	b.n	80037a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	daf2      	bge.n	800375c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3301      	adds	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <USB_CoreReset+0x64>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d901      	bls.n	8003798 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e006      	b.n	80037a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d0f0      	beq.n	8003786 <USB_CoreReset+0x36>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	00030d40 	.word	0x00030d40

080037b8 <__NVIC_SetPriority>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Handler+0x1c>)
 8003812:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003814:	f001 fd28 	bl	8005268 <xTaskGetSchedulerState>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d001      	beq.n	8003822 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800381e:	f002 fb13 	bl	8005e48 <xPortSysTickHandler>
  }
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003830:	2100      	movs	r1, #0
 8003832:	f06f 0004 	mvn.w	r0, #4
 8003836:	f7ff ffbf 	bl	80037b8 <__NVIC_SetPriority>
#endif
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003846:	f3ef 8305 	mrs	r3, IPSR
 800384a:	603b      	str	r3, [r7, #0]
  return(result);
 800384c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003852:	f06f 0305 	mvn.w	r3, #5
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	e00c      	b.n	8003874 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <osKernelInitialize+0x44>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <osKernelInitialize+0x44>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003868:	2300      	movs	r3, #0
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	e002      	b.n	8003874 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
 8003872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003874:	687b      	ldr	r3, [r7, #4]
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000086c 	.word	0x2000086c

08003888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800388e:	f3ef 8305 	mrs	r3, IPSR
 8003892:	603b      	str	r3, [r7, #0]
  return(result);
 8003894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800389a:	f06f 0305 	mvn.w	r3, #5
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	e010      	b.n	80038c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <osKernelStart+0x48>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d109      	bne.n	80038be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038aa:	f7ff ffbf 	bl	800382c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <osKernelStart+0x48>)
 80038b0:	2202      	movs	r2, #2
 80038b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038b4:	f001 f87c 	bl	80049b0 <vTaskStartScheduler>
      stat = osOK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	e002      	b.n	80038c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038c4:	687b      	ldr	r3, [r7, #4]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000086c 	.word	0x2000086c

080038d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08e      	sub	sp, #56	; 0x38
 80038d8:	af04      	add	r7, sp, #16
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e4:	f3ef 8305 	mrs	r3, IPSR
 80038e8:	617b      	str	r3, [r7, #20]
  return(result);
 80038ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d17e      	bne.n	80039ee <osThreadNew+0x11a>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d07b      	beq.n	80039ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038fa:	2318      	movs	r3, #24
 80038fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003902:	f04f 33ff 	mov.w	r3, #4294967295
 8003906:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d045      	beq.n	800399a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <osThreadNew+0x48>
        name = attr->name;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <osThreadNew+0x6e>
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b38      	cmp	r3, #56	; 0x38
 8003934:	d805      	bhi.n	8003942 <osThreadNew+0x6e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <osThreadNew+0x72>
        return (NULL);
 8003942:	2300      	movs	r3, #0
 8003944:	e054      	b.n	80039f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <osThreadNew+0xa8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2bbb      	cmp	r3, #187	; 0xbb
 8003964:	d90a      	bls.n	800397c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d006      	beq.n	800397c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <osThreadNew+0xa8>
        mem = 1;
 8003976:	2301      	movs	r3, #1
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	e010      	b.n	800399e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10c      	bne.n	800399e <osThreadNew+0xca>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <osThreadNew+0xca>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <osThreadNew+0xca>
          mem = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
 8003998:	e001      	b.n	800399e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d110      	bne.n	80039c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039ac:	9202      	str	r2, [sp, #8]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fe0c 	bl	80045d8 <xTaskCreateStatic>
 80039c0:	4603      	mov	r3, r0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	e013      	b.n	80039ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d110      	bne.n	80039ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	f107 0310 	add.w	r3, r7, #16
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fe57 	bl	8004692 <xTaskCreate>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d001      	beq.n	80039ee <osThreadNew+0x11a>
            hTask = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039ee:	693b      	ldr	r3, [r7, #16]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3728      	adds	r7, #40	; 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a00:	f3ef 8305 	mrs	r3, IPSR
 8003a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <osDelay+0x1c>
    stat = osErrorISR;
 8003a0c:	f06f 0305 	mvn.w	r3, #5
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e007      	b.n	8003a24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 ff92 	bl	8004948 <vTaskDelay>
    }
  }

  return (stat);
 8003a24:	68fb      	ldr	r3, [r7, #12]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a07      	ldr	r2, [pc, #28]	; (8003a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4a06      	ldr	r2, [pc, #24]	; (8003a60 <vApplicationGetIdleTaskMemory+0x30>)
 8003a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	601a      	str	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000870 	.word	0x20000870
 8003a60:	2000092c 	.word	0x2000092c

08003a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <vApplicationGetTimerTaskMemory+0x30>)
 8003a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000b2c 	.word	0x20000b2c
 8003a94:	20000be8 	.word	0x20000be8

08003a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f103 0208 	add.w	r2, r3, #8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f103 0208 	add.w	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f103 0208 	add.w	r2, r3, #8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e00c      	b.n	8003b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e002      	b.n	8003b68 <vListInsert+0x2e>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d2f6      	bcs.n	8003b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	601a      	str	r2, [r3, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6852      	ldr	r2, [r2, #4]
 8003bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d103      	bne.n	8003be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	1e5a      	subs	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c2a:	f002 f87b 	bl	8005d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	68f9      	ldr	r1, [r7, #12]
 8003c38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	441a      	add	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	441a      	add	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	22ff      	movs	r2, #255	; 0xff
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d114      	bne.n	8003caa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01a      	beq.n	8003cbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3310      	adds	r3, #16
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 f929 	bl	8004ee4 <xTaskRemoveFromEventList>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <xQueueGenericReset+0xcc>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	e009      	b.n	8003cbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3310      	adds	r3, #16
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fef2 	bl	8003a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff feed 	bl	8003a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cbe:	f002 f861 	bl	8005d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	; 0x38
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <xQueueGenericCreateStatic+0x52>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <xQueueGenericCreateStatic+0x56>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <xQueueGenericCreateStatic+0x58>
 8003d26:	2300      	movs	r3, #0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	623b      	str	r3, [r7, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <xQueueGenericCreateStatic+0x7e>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <xQueueGenericCreateStatic+0x82>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <xQueueGenericCreateStatic+0x84>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	61fb      	str	r3, [r7, #28]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d6e:	2350      	movs	r3, #80	; 0x50
 8003d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b50      	cmp	r3, #80	; 0x50
 8003d76:	d00a      	beq.n	8003d8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	61bb      	str	r3, [r7, #24]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003da2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f805 	bl	8003dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3730      	adds	r7, #48	; 0x30
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e002      	b.n	8003de2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dee:	2101      	movs	r1, #1
 8003df0:	69b8      	ldr	r0, [r7, #24]
 8003df2:	f7ff ff05 	bl	8003c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08e      	sub	sp, #56	; 0x38
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e16:	2300      	movs	r3, #0
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueGenericSend+0x32>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <xQueueGenericSend+0x40>
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <xQueueGenericSend+0x44>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <xQueueGenericSend+0x46>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <xQueueGenericSend+0x60>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d103      	bne.n	8003e76 <xQueueGenericSend+0x6e>
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <xQueueGenericSend+0x72>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <xQueueGenericSend+0x74>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	623b      	str	r3, [r7, #32]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e96:	f001 f9e7 	bl	8005268 <xTaskGetSchedulerState>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <xQueueGenericSend+0x9e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <xQueueGenericSend+0xa2>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <xQueueGenericSend+0xa4>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	61fb      	str	r3, [r7, #28]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ec6:	f001 ff2d 	bl	8005d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <xQueueGenericSend+0xd4>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d129      	bne.n	8003f30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee2:	f000 fa0b 	bl	80042fc <prvCopyDataToQueue>
 8003ee6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d010      	beq.n	8003f12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	3324      	adds	r3, #36	; 0x24
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fff5 	bl	8004ee4 <xTaskRemoveFromEventList>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d013      	beq.n	8003f28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f00:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <xQueueGenericSend+0x1f8>)
 8003f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	e00a      	b.n	8003f28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <xQueueGenericSend+0x1f8>)
 8003f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f28:	f001 ff2c 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e063      	b.n	8003ff8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f36:	f001 ff25 	bl	8005d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e05c      	b.n	8003ff8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 f82f 	bl	8004fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f52:	f001 ff17 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f56:	f000 fd9b 	bl	8004a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f5a:	f001 fee3 	bl	8005d24 <vPortEnterCritical>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d103      	bne.n	8003f74 <xQueueGenericSend+0x16c>
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d103      	bne.n	8003f8a <xQueueGenericSend+0x182>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8a:	f001 fefb 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f8e:	1d3a      	adds	r2, r7, #4
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 f81e 	bl	8004fd8 <xTaskCheckForTimeOut>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d124      	bne.n	8003fec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa4:	f000 faa2 	bl	80044ec <prvIsQueueFull>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d018      	beq.n	8003fe0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ff44 	bl	8004e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fbe:	f000 fa2d 	bl	800441c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fc2:	f000 fd73 	bl	8004aac <xTaskResumeAll>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f af7c 	bne.w	8003ec6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <xQueueGenericSend+0x1f8>)
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	e772      	b.n	8003ec6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe2:	f000 fa1b 	bl	800441c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe6:	f000 fd61 	bl	8004aac <xTaskResumeAll>
 8003fea:	e76c      	b.n	8003ec6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fee:	f000 fa15 	bl	800441c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff2:	f000 fd5b 	bl	8004aac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ff6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3738      	adds	r7, #56	; 0x38
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b090      	sub	sp, #64	; 0x40
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <xQueueGenericSendFromISR+0x3c>
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <xQueueGenericSendFromISR+0x40>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <xQueueGenericSendFromISR+0x42>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d103      	bne.n	800406e <xQueueGenericSendFromISR+0x6a>
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <xQueueGenericSendFromISR+0x6e>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <xQueueGenericSendFromISR+0x70>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	623b      	str	r3, [r7, #32]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800408e:	f001 ff2b 	bl	8005ee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004092:	f3ef 8211 	mrs	r2, BASEPRI
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	61fa      	str	r2, [r7, #28]
 80040a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d302      	bcc.n	80040c0 <xQueueGenericSendFromISR+0xbc>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d12f      	bne.n	8004120 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040d6:	f000 f911 	bl	80042fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d112      	bne.n	800410a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	3324      	adds	r3, #36	; 0x24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fef7 	bl	8004ee4 <xTaskRemoveFromEventList>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e007      	b.n	800411a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800410a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800410e:	3301      	adds	r3, #1
 8004110:	b2db      	uxtb	r3, r3
 8004112:	b25a      	sxtb	r2, r3
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800411a:	2301      	movs	r3, #1
 800411c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800411e:	e001      	b.n	8004124 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004120:	2300      	movs	r3, #0
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800412e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004132:	4618      	mov	r0, r3
 8004134:	3740      	adds	r7, #64	; 0x40
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08c      	sub	sp, #48	; 0x30
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004148:	2300      	movs	r3, #0
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <xQueueReceive+0x30>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	623b      	str	r3, [r7, #32]
}
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <xQueueReceive+0x3e>
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <xQueueReceive+0x42>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueReceive+0x44>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xQueueReceive+0x5e>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	61fb      	str	r3, [r7, #28]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800419a:	f001 f865 	bl	8005268 <xTaskGetSchedulerState>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <xQueueReceive+0x6e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <xQueueReceive+0x72>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <xQueueReceive+0x74>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <xQueueReceive+0x8e>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	61bb      	str	r3, [r7, #24]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ca:	f001 fdab 	bl	8005d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01f      	beq.n	800421a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041de:	f000 f8f7 	bl	80043d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00f      	beq.n	8004212 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	3310      	adds	r3, #16
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fe74 	bl	8004ee4 <xTaskRemoveFromEventList>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <xQueueReceive+0x1bc>)
 8004204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004212:	f001 fdb7 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 8004216:	2301      	movs	r3, #1
 8004218:	e069      	b.n	80042ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d103      	bne.n	8004228 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004220:	f001 fdb0 	bl	8005d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004224:	2300      	movs	r3, #0
 8004226:	e062      	b.n	80042ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800422e:	f107 0310 	add.w	r3, r7, #16
 8004232:	4618      	mov	r0, r3
 8004234:	f000 feba 	bl	8004fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800423c:	f001 fda2 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004240:	f000 fc26 	bl	8004a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004244:	f001 fd6e 	bl	8005d24 <vPortEnterCritical>
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800424e:	b25b      	sxtb	r3, r3
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d103      	bne.n	800425e <xQueueReceive+0x122>
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004264:	b25b      	sxtb	r3, r3
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d103      	bne.n	8004274 <xQueueReceive+0x138>
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004274:	f001 fd86 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004278:	1d3a      	adds	r2, r7, #4
 800427a:	f107 0310 	add.w	r3, r7, #16
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fea9 	bl	8004fd8 <xTaskCheckForTimeOut>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d123      	bne.n	80042d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800428c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800428e:	f000 f917 	bl	80044c0 <prvIsQueueEmpty>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d017      	beq.n	80042c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	3324      	adds	r3, #36	; 0x24
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fdcf 	bl	8004e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a8:	f000 f8b8 	bl	800441c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042ac:	f000 fbfe 	bl	8004aac <xTaskResumeAll>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d189      	bne.n	80041ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <xQueueReceive+0x1bc>)
 80042b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	e780      	b.n	80041ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ca:	f000 f8a7 	bl	800441c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ce:	f000 fbed 	bl	8004aac <xTaskResumeAll>
 80042d2:	e77a      	b.n	80041ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d6:	f000 f8a1 	bl	800441c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042da:	f000 fbe7 	bl	8004aac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e0:	f000 f8ee 	bl	80044c0 <prvIsQueueEmpty>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f43f af6f 	beq.w	80041ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3730      	adds	r7, #48	; 0x30
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d14d      	bne.n	80043be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ffbc 	bl	80052a4 <xTaskPriorityDisinherit>
 800432c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	e043      	b.n	80043be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d119      	bne.n	8004370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6858      	ldr	r0, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	461a      	mov	r2, r3
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	f002 f81e 	bl	8006388 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	441a      	add	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d32b      	bcc.n	80043be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	e026      	b.n	80043be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68d8      	ldr	r0, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	461a      	mov	r2, r3
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	f002 f804 	bl	8006388 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	425b      	negs	r3, r3
 800438a:	441a      	add	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d207      	bcs.n	80043ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	425b      	negs	r3, r3
 80043a6:	441a      	add	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d105      	bne.n	80043be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043c6:	697b      	ldr	r3, [r7, #20]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d018      	beq.n	8004414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	441a      	add	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d303      	bcc.n	8004404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68d9      	ldr	r1, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	461a      	mov	r2, r3
 800440e:	6838      	ldr	r0, [r7, #0]
 8004410:	f001 ffba 	bl	8006388 <memcpy>
	}
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004424:	f001 fc7e 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800442e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004430:	e011      	b.n	8004456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d012      	beq.n	8004460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3324      	adds	r3, #36	; 0x24
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fd50 	bl	8004ee4 <xTaskRemoveFromEventList>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800444a:	f000 fe27 	bl	800509c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	3b01      	subs	r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	dce9      	bgt.n	8004432 <prvUnlockQueue+0x16>
 800445e:	e000      	b.n	8004462 <prvUnlockQueue+0x46>
					break;
 8004460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	22ff      	movs	r2, #255	; 0xff
 8004466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800446a:	f001 fc8b 	bl	8005d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800446e:	f001 fc59 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800447a:	e011      	b.n	80044a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d012      	beq.n	80044aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3310      	adds	r3, #16
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd2b 	bl	8004ee4 <xTaskRemoveFromEventList>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004494:	f000 fe02 	bl	800509c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004498:	7bbb      	ldrb	r3, [r7, #14]
 800449a:	3b01      	subs	r3, #1
 800449c:	b2db      	uxtb	r3, r3
 800449e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dce9      	bgt.n	800447c <prvUnlockQueue+0x60>
 80044a8:	e000      	b.n	80044ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	22ff      	movs	r2, #255	; 0xff
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044b4:	f001 fc66 	bl	8005d84 <vPortExitCritical>
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044c8:	f001 fc2c 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e001      	b.n	80044de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044de:	f001 fc51 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044f4:	f001 fc16 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	429a      	cmp	r2, r3
 8004502:	d102      	bne.n	800450a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e001      	b.n	800450e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800450e:	f001 fc39 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 8004512:	68fb      	ldr	r3, [r7, #12]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e014      	b.n	8004556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800452c:	4a0f      	ldr	r2, [pc, #60]	; (800456c <vQueueAddToRegistry+0x50>)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10b      	bne.n	8004550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004538:	490c      	ldr	r1, [pc, #48]	; (800456c <vQueueAddToRegistry+0x50>)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004542:	4a0a      	ldr	r2, [pc, #40]	; (800456c <vQueueAddToRegistry+0x50>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800454e:	e006      	b.n	800455e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3301      	adds	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b07      	cmp	r3, #7
 800455a:	d9e7      	bls.n	800452c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000fe8 	.word	0x20000fe8

08004570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004580:	f001 fbd0 	bl	8005d24 <vPortEnterCritical>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800458a:	b25b      	sxtb	r3, r3
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d103      	bne.n	800459a <vQueueWaitForMessageRestricted+0x2a>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d103      	bne.n	80045b0 <vQueueWaitForMessageRestricted+0x40>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b0:	f001 fbe8 	bl	8005d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3324      	adds	r3, #36	; 0x24
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fc61 	bl	8004e8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045ca:	6978      	ldr	r0, [r7, #20]
 80045cc:	f7ff ff26 	bl	800441c <prvUnlockQueue>
	}
 80045d0:	bf00      	nop
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af04      	add	r7, sp, #16
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <xTaskCreateStatic+0x2a>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	623b      	str	r3, [r7, #32]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xTaskCreateStatic+0x46>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	61fb      	str	r3, [r7, #28]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800461e:	23bc      	movs	r3, #188	; 0xbc
 8004620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2bbc      	cmp	r3, #188	; 0xbc
 8004626:	d00a      	beq.n	800463e <xTaskCreateStatic+0x66>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	61bb      	str	r3, [r7, #24]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800463e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01e      	beq.n	8004684 <xTaskCreateStatic+0xac>
 8004646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004654:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2202      	movs	r2, #2
 800465a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800465e:	2300      	movs	r3, #0
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	9302      	str	r3, [sp, #8]
 8004666:	f107 0314 	add.w	r3, r7, #20
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f850 	bl	800471c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800467c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800467e:	f000 f8f3 	bl	8004868 <prvAddNewTaskToReadyList>
 8004682:	e001      	b.n	8004688 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004688:	697b      	ldr	r3, [r7, #20]
	}
 800468a:	4618      	mov	r0, r3
 800468c:	3728      	adds	r7, #40	; 0x28
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004692:	b580      	push	{r7, lr}
 8004694:	b08c      	sub	sp, #48	; 0x30
 8004696:	af04      	add	r7, sp, #16
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fc5e 	bl	8005f68 <pvPortMalloc>
 80046ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046b4:	20bc      	movs	r0, #188	; 0xbc
 80046b6:	f001 fc57 	bl	8005f68 <pvPortMalloc>
 80046ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
 80046c8:	e005      	b.n	80046d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f001 fd18 	bl	8006100 <vPortFree>
 80046d0:	e001      	b.n	80046d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d017      	beq.n	800470c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9303      	str	r3, [sp, #12]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f80e 	bl	800471c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004700:	69f8      	ldr	r0, [r7, #28]
 8004702:	f000 f8b1 	bl	8004868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004706:	2301      	movs	r3, #1
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e002      	b.n	8004712 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295
 8004710:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004712:	69bb      	ldr	r3, [r7, #24]
	}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	461a      	mov	r2, r3
 8004734:	21a5      	movs	r1, #165	; 0xa5
 8004736:	f001 fe35 	bl	80063a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004744:	3b01      	subs	r3, #1
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <prvInitialiseNewTask+0x58>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	617b      	str	r3, [r7, #20]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01f      	beq.n	80047ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e012      	b.n	80047a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	7819      	ldrb	r1, [r3, #0]
 8004788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	3334      	adds	r3, #52	; 0x34
 8004790:	460a      	mov	r2, r1
 8004792:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b0f      	cmp	r3, #15
 80047aa:	d9e9      	bls.n	8004780 <prvInitialiseNewTask+0x64>
 80047ac:	e000      	b.n	80047b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80047ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b8:	e003      	b.n	80047c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	2b37      	cmp	r3, #55	; 0x37
 80047c6:	d901      	bls.n	80047cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047c8:	2337      	movs	r3, #55	; 0x37
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	2200      	movs	r2, #0
 80047dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	3304      	adds	r3, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f978 	bl	8003ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	3318      	adds	r3, #24
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff f973 	bl	8003ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	2200      	movs	r2, #0
 8004814:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	3354      	adds	r3, #84	; 0x54
 800481c:	2260      	movs	r2, #96	; 0x60
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f001 fdbf 	bl	80063a4 <memset>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	4a0c      	ldr	r2, [pc, #48]	; (800485c <prvInitialiseNewTask+0x140>)
 800482a:	659a      	str	r2, [r3, #88]	; 0x58
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <prvInitialiseNewTask+0x144>)
 8004830:	65da      	str	r2, [r3, #92]	; 0x5c
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <prvInitialiseNewTask+0x148>)
 8004836:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	69b8      	ldr	r0, [r7, #24]
 800483e:	f001 f941 	bl	8005ac4 <pxPortInitialiseStack>
 8004842:	4602      	mov	r2, r0
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004852:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004854:	bf00      	nop
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	08006654 	.word	0x08006654
 8004860:	08006674 	.word	0x08006674
 8004864:	08006634 	.word	0x08006634

08004868 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004870:	f001 fa58 	bl	8005d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004874:	4b2d      	ldr	r3, [pc, #180]	; (800492c <prvAddNewTaskToReadyList+0xc4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	4a2c      	ldr	r2, [pc, #176]	; (800492c <prvAddNewTaskToReadyList+0xc4>)
 800487c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <prvAddNewTaskToReadyList+0xc8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004886:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <prvAddNewTaskToReadyList+0xc8>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800488c:	4b27      	ldr	r3, [pc, #156]	; (800492c <prvAddNewTaskToReadyList+0xc4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d110      	bne.n	80048b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004894:	f000 fc26 	bl	80050e4 <prvInitialiseTaskLists>
 8004898:	e00d      	b.n	80048b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800489a:	4b26      	ldr	r3, [pc, #152]	; (8004934 <prvAddNewTaskToReadyList+0xcc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <prvAddNewTaskToReadyList+0xc8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d802      	bhi.n	80048b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <prvAddNewTaskToReadyList+0xc8>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <prvAddNewTaskToReadyList+0xd0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <prvAddNewTaskToReadyList+0xd0>)
 80048be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048c0:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <prvAddNewTaskToReadyList+0xd0>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <prvAddNewTaskToReadyList+0xd4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d903      	bls.n	80048dc <prvAddNewTaskToReadyList+0x74>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <prvAddNewTaskToReadyList+0xd4>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4a15      	ldr	r2, [pc, #84]	; (8004940 <prvAddNewTaskToReadyList+0xd8>)
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7ff f8fd 	bl	8003af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048f8:	f001 fa44 	bl	8005d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048fc:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <prvAddNewTaskToReadyList+0xcc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00e      	beq.n	8004922 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <prvAddNewTaskToReadyList+0xc8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	429a      	cmp	r2, r3
 8004910:	d207      	bcs.n	8004922 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <prvAddNewTaskToReadyList+0xdc>)
 8004914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	200014fc 	.word	0x200014fc
 8004930:	20001028 	.word	0x20001028
 8004934:	20001508 	.word	0x20001508
 8004938:	20001518 	.word	0x20001518
 800493c:	20001504 	.word	0x20001504
 8004940:	2000102c 	.word	0x2000102c
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d017      	beq.n	800498a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <vTaskDelay+0x60>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <vTaskDelay+0x30>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	60bb      	str	r3, [r7, #8]
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004978:	f000 f88a 	bl	8004a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800497c:	2100      	movs	r1, #0
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fcfe 	bl	8005380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004984:	f000 f892 	bl	8004aac <xTaskResumeAll>
 8004988:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <vTaskDelay+0x64>)
 8004992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20001524 	.word	0x20001524
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049be:	463a      	mov	r2, r7
 80049c0:	1d39      	adds	r1, r7, #4
 80049c2:	f107 0308 	add.w	r3, r7, #8
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff f832 	bl	8003a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	9202      	str	r2, [sp, #8]
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	2300      	movs	r3, #0
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2300      	movs	r3, #0
 80049dc:	460a      	mov	r2, r1
 80049de:	4924      	ldr	r1, [pc, #144]	; (8004a70 <vTaskStartScheduler+0xc0>)
 80049e0:	4824      	ldr	r0, [pc, #144]	; (8004a74 <vTaskStartScheduler+0xc4>)
 80049e2:	f7ff fdf9 	bl	80045d8 <xTaskCreateStatic>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <vTaskStartScheduler+0xc8>)
 80049ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049ec:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <vTaskStartScheduler+0xc8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e001      	b.n	80049fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d102      	bne.n	8004a0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a04:	f000 fd10 	bl	8005428 <xTimerCreateTimerTask>
 8004a08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d11b      	bne.n	8004a48 <vTaskStartScheduler+0x98>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	613b      	str	r3, [r7, #16]
}
 8004a22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <vTaskStartScheduler+0xcc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3354      	adds	r3, #84	; 0x54
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <vTaskStartScheduler+0xd0>)
 8004a2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a2e:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <vTaskStartScheduler+0xd4>)
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295
 8004a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <vTaskStartScheduler+0xd8>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a3c:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <vTaskStartScheduler+0xdc>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a42:	f001 f8cd 	bl	8005be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a46:	e00e      	b.n	8004a66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d10a      	bne.n	8004a66 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	60fb      	str	r3, [r7, #12]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <vTaskStartScheduler+0xb4>
}
 8004a66:	bf00      	nop
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	08006574 	.word	0x08006574
 8004a74:	080050b5 	.word	0x080050b5
 8004a78:	20001520 	.word	0x20001520
 8004a7c:	20001028 	.word	0x20001028
 8004a80:	20000010 	.word	0x20000010
 8004a84:	2000151c 	.word	0x2000151c
 8004a88:	20001508 	.word	0x20001508
 8004a8c:	20001500 	.word	0x20001500

08004a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a94:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <vTaskSuspendAll+0x18>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	4a03      	ldr	r2, [pc, #12]	; (8004aa8 <vTaskSuspendAll+0x18>)
 8004a9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20001524 	.word	0x20001524

08004aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aba:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	603b      	str	r3, [r7, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ad8:	f001 f924 	bl	8005d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004adc:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004ae4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae6:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <xTaskResumeAll+0x118>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d162      	bne.n	8004bb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <xTaskResumeAll+0x11c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d05e      	beq.n	8004bb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af6:	e02f      	b.n	8004b58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af8:	4b34      	ldr	r3, [pc, #208]	; (8004bcc <xTaskResumeAll+0x120>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3318      	adds	r3, #24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff f851 	bl	8003bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff f84c 	bl	8003bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <xTaskResumeAll+0x124>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d903      	bls.n	8004b28 <xTaskResumeAll+0x7c>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a2a      	ldr	r2, [pc, #168]	; (8004bd0 <xTaskResumeAll+0x124>)
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <xTaskResumeAll+0x128>)
 8004b36:	441a      	add	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7fe ffd7 	bl	8003af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b23      	ldr	r3, [pc, #140]	; (8004bd8 <xTaskResumeAll+0x12c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b52:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <xTaskResumeAll+0x130>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <xTaskResumeAll+0x120>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1cb      	bne.n	8004af8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b66:	f000 fb5f 	bl	8005228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <xTaskResumeAll+0x134>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b76:	f000 f847 	bl	8004c08 <xTaskIncrementTick>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b80:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <xTaskResumeAll+0x130>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f1      	bne.n	8004b76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <xTaskResumeAll+0x134>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b98:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <xTaskResumeAll+0x130>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <xTaskResumeAll+0x138>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bb4:	f001 f8e6 	bl	8005d84 <vPortExitCritical>

	return xAlreadyYielded;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20001524 	.word	0x20001524
 8004bc8:	200014fc 	.word	0x200014fc
 8004bcc:	200014bc 	.word	0x200014bc
 8004bd0:	20001504 	.word	0x20001504
 8004bd4:	2000102c 	.word	0x2000102c
 8004bd8:	20001028 	.word	0x20001028
 8004bdc:	20001510 	.word	0x20001510
 8004be0:	2000150c 	.word	0x2000150c
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <xTaskGetTickCount+0x1c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004bf4:	687b      	ldr	r3, [r7, #4]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20001500 	.word	0x20001500

08004c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c12:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <xTaskIncrementTick+0x148>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 808f 	bne.w	8004d3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <xTaskIncrementTick+0x14c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c24:	4a4b      	ldr	r2, [pc, #300]	; (8004d54 <xTaskIncrementTick+0x14c>)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d120      	bne.n	8004c72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c30:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <xTaskIncrementTick+0x150>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	603b      	str	r3, [r7, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <xTaskIncrementTick+0x46>
 8004c50:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <xTaskIncrementTick+0x150>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <xTaskIncrementTick+0x154>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <xTaskIncrementTick+0x150>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4a3f      	ldr	r2, [pc, #252]	; (8004d5c <xTaskIncrementTick+0x154>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b3e      	ldr	r3, [pc, #248]	; (8004d60 <xTaskIncrementTick+0x158>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	4a3d      	ldr	r2, [pc, #244]	; (8004d60 <xTaskIncrementTick+0x158>)
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	f000 fadb 	bl	8005228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c72:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <xTaskIncrementTick+0x15c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d349      	bcc.n	8004d10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c7c:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <xTaskIncrementTick+0x150>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <xTaskIncrementTick+0x15c>)
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8c:	601a      	str	r2, [r3, #0]
					break;
 8004c8e:	e03f      	b.n	8004d10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c90:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <xTaskIncrementTick+0x150>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d203      	bcs.n	8004cb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ca8:	4a2e      	ldr	r2, [pc, #184]	; (8004d64 <xTaskIncrementTick+0x15c>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cae:	e02f      	b.n	8004d10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe ff79 	bl	8003bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	3318      	adds	r3, #24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe ff70 	bl	8003bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <xTaskIncrementTick+0x160>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d903      	bls.n	8004ce0 <xTaskIncrementTick+0xd8>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <xTaskIncrementTick+0x160>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <xTaskIncrementTick+0x164>)
 8004cee:	441a      	add	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fe fefb 	bl	8003af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <xTaskIncrementTick+0x168>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d3b8      	bcc.n	8004c7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d0e:	e7b5      	b.n	8004c7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d10:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <xTaskIncrementTick+0x168>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	4915      	ldr	r1, [pc, #84]	; (8004d6c <xTaskIncrementTick+0x164>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d901      	bls.n	8004d2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <xTaskIncrementTick+0x16c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e004      	b.n	8004d44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <xTaskIncrementTick+0x170>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	4a0d      	ldr	r2, [pc, #52]	; (8004d78 <xTaskIncrementTick+0x170>)
 8004d42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d44:	697b      	ldr	r3, [r7, #20]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20001524 	.word	0x20001524
 8004d54:	20001500 	.word	0x20001500
 8004d58:	200014b4 	.word	0x200014b4
 8004d5c:	200014b8 	.word	0x200014b8
 8004d60:	20001514 	.word	0x20001514
 8004d64:	2000151c 	.word	0x2000151c
 8004d68:	20001504 	.word	0x20001504
 8004d6c:	2000102c 	.word	0x2000102c
 8004d70:	20001028 	.word	0x20001028
 8004d74:	20001510 	.word	0x20001510
 8004d78:	2000150c 	.word	0x2000150c

08004d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d82:	4b2a      	ldr	r3, [pc, #168]	; (8004e2c <vTaskSwitchContext+0xb0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d8a:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <vTaskSwitchContext+0xb4>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d90:	e046      	b.n	8004e20 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <vTaskSwitchContext+0xb4>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d98:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <vTaskSwitchContext+0xb8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e010      	b.n	8004dc2 <vTaskSwitchContext+0x46>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <vTaskSwitchContext+0x40>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	607b      	str	r3, [r7, #4]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <vTaskSwitchContext+0x3e>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	491d      	ldr	r1, [pc, #116]	; (8004e38 <vTaskSwitchContext+0xbc>)
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0e4      	beq.n	8004da0 <vTaskSwitchContext+0x24>
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <vTaskSwitchContext+0xbc>)
 8004de2:	4413      	add	r3, r2
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	605a      	str	r2, [r3, #4]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3308      	adds	r3, #8
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d104      	bne.n	8004e06 <vTaskSwitchContext+0x8a>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <vTaskSwitchContext+0xc0>)
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <vTaskSwitchContext+0xb8>)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <vTaskSwitchContext+0xc0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3354      	adds	r3, #84	; 0x54
 8004e1c:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <vTaskSwitchContext+0xc4>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20001524 	.word	0x20001524
 8004e30:	20001510 	.word	0x20001510
 8004e34:	20001504 	.word	0x20001504
 8004e38:	2000102c 	.word	0x2000102c
 8004e3c:	20001028 	.word	0x20001028
 8004e40:	20000010 	.word	0x20000010

08004e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <vTaskPlaceOnEventList+0x44>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fe fe61 	bl	8003b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e78:	2101      	movs	r1, #1
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f000 fa80 	bl	8005380 <prvAddCurrentTaskToDelayedList>
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20001028 	.word	0x20001028

08004e8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	617b      	str	r3, [r7, #20]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3318      	adds	r3, #24
 8004eba:	4619      	mov	r1, r3
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7fe fe18 	bl	8003af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ecc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	68b8      	ldr	r0, [r7, #8]
 8004ed2:	f000 fa55 	bl	8005380 <prvAddCurrentTaskToDelayedList>
	}
 8004ed6:	bf00      	nop
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20001028 	.word	0x20001028

08004ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60fb      	str	r3, [r7, #12]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	3318      	adds	r3, #24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fe49 	bl	8003bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1a:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <xTaskRemoveFromEventList+0xb0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11d      	bne.n	8004f5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fe40 	bl	8003bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <xTaskRemoveFromEventList+0xb4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d903      	bls.n	8004f40 <xTaskRemoveFromEventList+0x5c>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <xTaskRemoveFromEventList+0xb4>)
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <xTaskRemoveFromEventList+0xb8>)
 8004f4e:	441a      	add	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7fe fdcb 	bl	8003af2 <vListInsertEnd>
 8004f5c:	e005      	b.n	8004f6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3318      	adds	r3, #24
 8004f62:	4619      	mov	r1, r3
 8004f64:	480e      	ldr	r0, [pc, #56]	; (8004fa0 <xTaskRemoveFromEventList+0xbc>)
 8004f66:	f7fe fdc4 	bl	8003af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <xTaskRemoveFromEventList+0xc0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d905      	bls.n	8004f84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <xTaskRemoveFromEventList+0xc4>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e001      	b.n	8004f88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f88:	697b      	ldr	r3, [r7, #20]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20001524 	.word	0x20001524
 8004f98:	20001504 	.word	0x20001504
 8004f9c:	2000102c 	.word	0x2000102c
 8004fa0:	200014bc 	.word	0x200014bc
 8004fa4:	20001028 	.word	0x20001028
 8004fa8:	20001510 	.word	0x20001510

08004fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <vTaskInternalSetTimeOutState+0x24>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <vTaskInternalSetTimeOutState+0x28>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20001514 	.word	0x20001514
 8004fd4:	20001500 	.word	0x20001500

08004fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	613b      	str	r3, [r7, #16]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	60fb      	str	r3, [r7, #12]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800501a:	f000 fe83 	bl	8005d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <xTaskCheckForTimeOut+0xbc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d102      	bne.n	800503e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	e023      	b.n	8005086 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b15      	ldr	r3, [pc, #84]	; (8005098 <xTaskCheckForTimeOut+0xc0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d007      	beq.n	800505a <xTaskCheckForTimeOut+0x82>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e015      	b.n	8005086 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	429a      	cmp	r2, r3
 8005062:	d20b      	bcs.n	800507c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff9b 	bl	8004fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	e004      	b.n	8005086 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005082:	2301      	movs	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005086:	f000 fe7d 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 800508a:	69fb      	ldr	r3, [r7, #28]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20001500 	.word	0x20001500
 8005098:	20001514 	.word	0x20001514

0800509c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <vTaskMissedYield+0x14>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
}
 80050a6:	bf00      	nop
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	20001510 	.word	0x20001510

080050b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050bc:	f000 f852 	bl	8005164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <prvIdleTask+0x28>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d9f9      	bls.n	80050bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <prvIdleTask+0x2c>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050d8:	e7f0      	b.n	80050bc <prvIdleTask+0x8>
 80050da:	bf00      	nop
 80050dc:	2000102c 	.word	0x2000102c
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	e00c      	b.n	800510a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <prvInitialiseTaskLists+0x60>)
 80050fc:	4413      	add	r3, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fcca 	bl	8003a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3301      	adds	r3, #1
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b37      	cmp	r3, #55	; 0x37
 800510e:	d9ef      	bls.n	80050f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005110:	480d      	ldr	r0, [pc, #52]	; (8005148 <prvInitialiseTaskLists+0x64>)
 8005112:	f7fe fcc1 	bl	8003a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005116:	480d      	ldr	r0, [pc, #52]	; (800514c <prvInitialiseTaskLists+0x68>)
 8005118:	f7fe fcbe 	bl	8003a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800511c:	480c      	ldr	r0, [pc, #48]	; (8005150 <prvInitialiseTaskLists+0x6c>)
 800511e:	f7fe fcbb 	bl	8003a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005122:	480c      	ldr	r0, [pc, #48]	; (8005154 <prvInitialiseTaskLists+0x70>)
 8005124:	f7fe fcb8 	bl	8003a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005128:	480b      	ldr	r0, [pc, #44]	; (8005158 <prvInitialiseTaskLists+0x74>)
 800512a:	f7fe fcb5 	bl	8003a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <prvInitialiseTaskLists+0x78>)
 8005130:	4a05      	ldr	r2, [pc, #20]	; (8005148 <prvInitialiseTaskLists+0x64>)
 8005132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <prvInitialiseTaskLists+0x7c>)
 8005136:	4a05      	ldr	r2, [pc, #20]	; (800514c <prvInitialiseTaskLists+0x68>)
 8005138:	601a      	str	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000102c 	.word	0x2000102c
 8005148:	2000148c 	.word	0x2000148c
 800514c:	200014a0 	.word	0x200014a0
 8005150:	200014bc 	.word	0x200014bc
 8005154:	200014d0 	.word	0x200014d0
 8005158:	200014e8 	.word	0x200014e8
 800515c:	200014b4 	.word	0x200014b4
 8005160:	200014b8 	.word	0x200014b8

08005164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800516a:	e019      	b.n	80051a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800516c:	f000 fdda 	bl	8005d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <prvCheckTasksWaitingTermination+0x50>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe fd15 	bl	8003bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <prvCheckTasksWaitingTermination+0x54>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3b01      	subs	r3, #1
 8005188:	4a0b      	ldr	r2, [pc, #44]	; (80051b8 <prvCheckTasksWaitingTermination+0x54>)
 800518a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <prvCheckTasksWaitingTermination+0x58>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3b01      	subs	r3, #1
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <prvCheckTasksWaitingTermination+0x58>)
 8005194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005196:	f000 fdf5 	bl	8005d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f810 	bl	80051c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <prvCheckTasksWaitingTermination+0x58>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e1      	bne.n	800516c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200014d0 	.word	0x200014d0
 80051b8:	200014fc 	.word	0x200014fc
 80051bc:	200014e4 	.word	0x200014e4

080051c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3354      	adds	r3, #84	; 0x54
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 f8ff 	bl	80063d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 ff8d 	bl	8006100 <vPortFree>
				vPortFree( pxTCB );
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 ff8a 	bl	8006100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051ec:	e018      	b.n	8005220 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d103      	bne.n	8005200 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 ff81 	bl	8006100 <vPortFree>
	}
 80051fe:	e00f      	b.n	8005220 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005206:	2b02      	cmp	r3, #2
 8005208:	d00a      	beq.n	8005220 <prvDeleteTCB+0x60>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	60fb      	str	r3, [r7, #12]
}
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <prvDeleteTCB+0x5e>
	}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <prvResetNextTaskUnblockTime+0x38>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvResetNextTaskUnblockTime+0x3c>)
 800523a:	f04f 32ff 	mov.w	r2, #4294967295
 800523e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005240:	e008      	b.n	8005254 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <prvResetNextTaskUnblockTime+0x38>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a04      	ldr	r2, [pc, #16]	; (8005264 <prvResetNextTaskUnblockTime+0x3c>)
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	200014b4 	.word	0x200014b4
 8005264:	2000151c 	.word	0x2000151c

08005268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <xTaskGetSchedulerState+0x34>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005276:	2301      	movs	r3, #1
 8005278:	607b      	str	r3, [r7, #4]
 800527a:	e008      	b.n	800528e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <xTaskGetSchedulerState+0x38>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005284:	2302      	movs	r3, #2
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	e001      	b.n	800528e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800528a:	2300      	movs	r3, #0
 800528c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800528e:	687b      	ldr	r3, [r7, #4]
	}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	20001508 	.word	0x20001508
 80052a0:	20001524 	.word	0x20001524

080052a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d056      	beq.n	8005368 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <xTaskPriorityDisinherit+0xd0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d00a      	beq.n	80052da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60fb      	str	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60bb      	str	r3, [r7, #8]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	429a      	cmp	r2, r3
 800530c:	d02c      	beq.n	8005368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d128      	bne.n	8005368 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	3304      	adds	r3, #4
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fc46 	bl	8003bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <xTaskPriorityDisinherit+0xd4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <xTaskPriorityDisinherit+0xa4>
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a0c      	ldr	r2, [pc, #48]	; (8005378 <xTaskPriorityDisinherit+0xd4>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a09      	ldr	r2, [pc, #36]	; (800537c <xTaskPriorityDisinherit+0xd8>)
 8005356:	441a      	add	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe fbc7 	bl	8003af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005364:	2301      	movs	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005368:	697b      	ldr	r3, [r7, #20]
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20001028 	.word	0x20001028
 8005378:	20001504 	.word	0x20001504
 800537c:	2000102c 	.word	0x2000102c

08005380 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800538a:	4b21      	ldr	r3, [pc, #132]	; (8005410 <prvAddCurrentTaskToDelayedList+0x90>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005390:	4b20      	ldr	r3, [pc, #128]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3304      	adds	r3, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fc08 	bl	8003bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d10a      	bne.n	80053ba <prvAddCurrentTaskToDelayedList+0x3a>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053aa:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4819      	ldr	r0, [pc, #100]	; (8005418 <prvAddCurrentTaskToDelayedList+0x98>)
 80053b4:	f7fe fb9d 	bl	8003af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053b8:	e026      	b.n	8005408 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d209      	bcs.n	80053e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <prvAddCurrentTaskToDelayedList+0x9c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7fe fbab 	bl	8003b3a <vListInsert>
}
 80053e4:	e010      	b.n	8005408 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053e6:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <prvAddCurrentTaskToDelayedList+0xa0>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7fe fba1 	bl	8003b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d202      	bcs.n	8005408 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005402:	4a08      	ldr	r2, [pc, #32]	; (8005424 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6013      	str	r3, [r2, #0]
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20001500 	.word	0x20001500
 8005414:	20001028 	.word	0x20001028
 8005418:	200014e8 	.word	0x200014e8
 800541c:	200014b8 	.word	0x200014b8
 8005420:	200014b4 	.word	0x200014b4
 8005424:	2000151c 	.word	0x2000151c

08005428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005432:	f000 fb07 	bl	8005a44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005436:	4b1c      	ldr	r3, [pc, #112]	; (80054a8 <xTimerCreateTimerTask+0x80>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d021      	beq.n	8005482 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005446:	1d3a      	adds	r2, r7, #4
 8005448:	f107 0108 	add.w	r1, r7, #8
 800544c:	f107 030c 	add.w	r3, r7, #12
 8005450:	4618      	mov	r0, r3
 8005452:	f7fe fb07 	bl	8003a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	9202      	str	r2, [sp, #8]
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	2302      	movs	r3, #2
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	460a      	mov	r2, r1
 8005468:	4910      	ldr	r1, [pc, #64]	; (80054ac <xTimerCreateTimerTask+0x84>)
 800546a:	4811      	ldr	r0, [pc, #68]	; (80054b0 <xTimerCreateTimerTask+0x88>)
 800546c:	f7ff f8b4 	bl	80045d8 <xTaskCreateStatic>
 8005470:	4603      	mov	r3, r0
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <xTimerCreateTimerTask+0x8c>)
 8005474:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005476:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <xTimerCreateTimerTask+0x8c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	613b      	str	r3, [r7, #16]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800549e:	697b      	ldr	r3, [r7, #20]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20001558 	.word	0x20001558
 80054ac:	0800657c 	.word	0x0800657c
 80054b0:	080055ed 	.word	0x080055ed
 80054b4:	2000155c 	.word	0x2000155c

080054b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	623b      	str	r3, [r7, #32]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <xTimerGenericCommand+0x98>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02a      	beq.n	8005544 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	dc18      	bgt.n	8005532 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005500:	f7ff feb2 	bl	8005268 <xTaskGetSchedulerState>
 8005504:	4603      	mov	r3, r0
 8005506:	2b02      	cmp	r3, #2
 8005508:	d109      	bne.n	800551e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <xTimerGenericCommand+0x98>)
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	f107 0110 	add.w	r1, r7, #16
 8005512:	2300      	movs	r3, #0
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	f7fe fc77 	bl	8003e08 <xQueueGenericSend>
 800551a:	6278      	str	r0, [r7, #36]	; 0x24
 800551c:	e012      	b.n	8005544 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <xTimerGenericCommand+0x98>)
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	f107 0110 	add.w	r1, r7, #16
 8005526:	2300      	movs	r3, #0
 8005528:	2200      	movs	r2, #0
 800552a:	f7fe fc6d 	bl	8003e08 <xQueueGenericSend>
 800552e:	6278      	str	r0, [r7, #36]	; 0x24
 8005530:	e008      	b.n	8005544 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <xTimerGenericCommand+0x98>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f107 0110 	add.w	r1, r7, #16
 800553a:	2300      	movs	r3, #0
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	f7fe fd61 	bl	8004004 <xQueueGenericSendFromISR>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005546:	4618      	mov	r0, r3
 8005548:	3728      	adds	r7, #40	; 0x28
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20001558 	.word	0x20001558

08005554 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af02      	add	r7, sp, #8
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <prvProcessExpiredTimer+0x94>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fb1d 	bl	8003bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d022      	beq.n	80055c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	18d1      	adds	r1, r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	6978      	ldr	r0, [r7, #20]
 800558e:	f000 f8d1 	bl	8005734 <prvInsertTimerInActiveList>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01f      	beq.n	80055d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005598:	2300      	movs	r3, #0
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	2100      	movs	r1, #0
 80055a2:	6978      	ldr	r0, [r7, #20]
 80055a4:	f7ff ff88 	bl	80054b8 <xTimerGenericCommand>
 80055a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60fb      	str	r3, [r7, #12]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	6978      	ldr	r0, [r7, #20]
 80055de:	4798      	blx	r3
}
 80055e0:	bf00      	nop
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20001550 	.word	0x20001550

080055ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055f4:	f107 0308 	add.w	r3, r7, #8
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f857 	bl	80056ac <prvGetNextExpireTime>
 80055fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4619      	mov	r1, r3
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f803 	bl	8005610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800560a:	f000 f8d5 	bl	80057b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800560e:	e7f1      	b.n	80055f4 <prvTimerTask+0x8>

08005610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800561a:	f7ff fa39 	bl	8004a90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f866 	bl	80056f4 <prvSampleTimeNow>
 8005628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d130      	bne.n	8005692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <prvProcessTimerOrBlockTask+0x3c>
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	429a      	cmp	r2, r3
 800563c:	d806      	bhi.n	800564c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800563e:	f7ff fa35 	bl	8004aac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff85 	bl	8005554 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800564a:	e024      	b.n	8005696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <prvProcessTimerOrBlockTask+0x90>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <prvProcessTimerOrBlockTask+0x50>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <prvProcessTimerOrBlockTask+0x52>
 8005660:	2300      	movs	r3, #0
 8005662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <prvProcessTimerOrBlockTask+0x94>)
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	f7fe ff7d 	bl	8004570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005676:	f7ff fa19 	bl	8004aac <xTaskResumeAll>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <prvProcessTimerOrBlockTask+0x98>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
}
 8005690:	e001      	b.n	8005696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005692:	f7ff fa0b 	bl	8004aac <xTaskResumeAll>
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20001554 	.word	0x20001554
 80056a4:	20001558 	.word	0x20001558
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <prvGetNextExpireTime+0x44>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <prvGetNextExpireTime+0x16>
 80056be:	2201      	movs	r2, #1
 80056c0:	e000      	b.n	80056c4 <prvGetNextExpireTime+0x18>
 80056c2:	2200      	movs	r2, #0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d105      	bne.n	80056dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <prvGetNextExpireTime+0x44>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e001      	b.n	80056e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20001550 	.word	0x20001550

080056f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056fc:	f7ff fa74 	bl	8004be8 <xTaskGetTickCount>
 8005700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <prvSampleTimeNow+0x3c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	429a      	cmp	r2, r3
 800570a:	d205      	bcs.n	8005718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800570c:	f000 f936 	bl	800597c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e002      	b.n	800571e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800571e:	4a04      	ldr	r2, [pc, #16]	; (8005730 <prvSampleTimeNow+0x3c>)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005724:	68fb      	ldr	r3, [r7, #12]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20001560 	.word	0x20001560

08005734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d812      	bhi.n	8005780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	429a      	cmp	r2, r3
 8005766:	d302      	bcc.n	800576e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e01b      	b.n	80057a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <prvInsertTimerInActiveList+0x7c>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7fe f9de 	bl	8003b3a <vListInsert>
 800577e:	e012      	b.n	80057a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d206      	bcs.n	8005796 <prvInsertTimerInActiveList+0x62>
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d302      	bcc.n	8005796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e007      	b.n	80057a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <prvInsertTimerInActiveList+0x80>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3304      	adds	r3, #4
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f7fe f9ca 	bl	8003b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057a6:	697b      	ldr	r3, [r7, #20]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20001554 	.word	0x20001554
 80057b4:	20001550 	.word	0x20001550

080057b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	; 0x38
 80057bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057be:	e0ca      	b.n	8005956 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	da18      	bge.n	80057f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	3304      	adds	r3, #4
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	61fb      	str	r3, [r7, #28]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ee:	6850      	ldr	r0, [r2, #4]
 80057f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f2:	6892      	ldr	r2, [r2, #8]
 80057f4:	4611      	mov	r1, r2
 80057f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f2c0 80aa 	blt.w	8005954 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	3304      	adds	r3, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe f9cb 	bl	8003bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005816:	463b      	mov	r3, r7
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff6b 	bl	80056f4 <prvSampleTimeNow>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b09      	cmp	r3, #9
 8005824:	f200 8097 	bhi.w	8005956 <prvProcessReceivedCommands+0x19e>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <prvProcessReceivedCommands+0x78>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005859 	.word	0x08005859
 8005834:	08005859 	.word	0x08005859
 8005838:	08005859 	.word	0x08005859
 800583c:	080058cd 	.word	0x080058cd
 8005840:	080058e1 	.word	0x080058e1
 8005844:	0800592b 	.word	0x0800592b
 8005848:	08005859 	.word	0x08005859
 800584c:	08005859 	.word	0x08005859
 8005850:	080058cd 	.word	0x080058cd
 8005854:	080058e1 	.word	0x080058e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	18d1      	adds	r1, r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005878:	f7ff ff5c 	bl	8005734 <prvInsertTimerInActiveList>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d069      	beq.n	8005956 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05e      	beq.n	8005956 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	441a      	add	r2, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	2100      	movs	r1, #0
 80058a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058aa:	f7ff fe05 	bl	80054b8 <xTimerGenericCommand>
 80058ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d14f      	bne.n	8005956 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	61bb      	str	r3, [r7, #24]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80058de:	e03a      	b.n	8005956 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	617b      	str	r3, [r7, #20]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	18d1      	adds	r1, r2, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005924:	f7ff ff06 	bl	8005734 <prvInsertTimerInActiveList>
					break;
 8005928:	e015      	b.n	8005956 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d103      	bne.n	8005940 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593a:	f000 fbe1 	bl	8006100 <vPortFree>
 800593e:	e00a      	b.n	8005956 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	b2da      	uxtb	r2, r3
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005952:	e000      	b.n	8005956 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <prvProcessReceivedCommands+0x1c0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	1d39      	adds	r1, r7, #4
 800595c:	2200      	movs	r2, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fbec 	bl	800413c <xQueueReceive>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	f47f af2a 	bne.w	80057c0 <prvProcessReceivedCommands+0x8>
	}
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	3730      	adds	r7, #48	; 0x30
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20001558 	.word	0x20001558

0800597c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005982:	e048      	b.n	8005a16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005984:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <prvSwitchTimerLists+0xc0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598e:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <prvSwitchTimerLists+0xc0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3304      	adds	r3, #4
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe f905 	bl	8003bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d02e      	beq.n	8005a16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d90e      	bls.n	80059e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059d6:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <prvSwitchTimerLists+0xc0>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f7fe f8aa 	bl	8003b3a <vListInsert>
 80059e6:	e016      	b.n	8005a16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059e8:	2300      	movs	r3, #0
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	2300      	movs	r3, #0
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	2100      	movs	r1, #0
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff fd60 	bl	80054b8 <xTimerGenericCommand>
 80059f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	603b      	str	r3, [r7, #0]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a16:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <prvSwitchTimerLists+0xc0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1b1      	bne.n	8005984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <prvSwitchTimerLists+0xc0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <prvSwitchTimerLists+0xc4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <prvSwitchTimerLists+0xc0>)
 8005a2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a2e:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <prvSwitchTimerLists+0xc4>)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6013      	str	r3, [r2, #0]
}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20001550 	.word	0x20001550
 8005a40:	20001554 	.word	0x20001554

08005a44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a4a:	f000 f96b 	bl	8005d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a4e:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <prvCheckForValidListAndQueue+0x60>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d120      	bne.n	8005a98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a56:	4814      	ldr	r0, [pc, #80]	; (8005aa8 <prvCheckForValidListAndQueue+0x64>)
 8005a58:	f7fe f81e 	bl	8003a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a5c:	4813      	ldr	r0, [pc, #76]	; (8005aac <prvCheckForValidListAndQueue+0x68>)
 8005a5e:	f7fe f81b 	bl	8003a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <prvCheckForValidListAndQueue+0x6c>)
 8005a64:	4a10      	ldr	r2, [pc, #64]	; (8005aa8 <prvCheckForValidListAndQueue+0x64>)
 8005a66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a68:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <prvCheckForValidListAndQueue+0x70>)
 8005a6a:	4a10      	ldr	r2, [pc, #64]	; (8005aac <prvCheckForValidListAndQueue+0x68>)
 8005a6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a6e:	2300      	movs	r3, #0
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <prvCheckForValidListAndQueue+0x74>)
 8005a74:	4a11      	ldr	r2, [pc, #68]	; (8005abc <prvCheckForValidListAndQueue+0x78>)
 8005a76:	2110      	movs	r1, #16
 8005a78:	200a      	movs	r0, #10
 8005a7a:	f7fe f929 	bl	8003cd0 <xQueueGenericCreateStatic>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <prvCheckForValidListAndQueue+0x60>)
 8005a82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <prvCheckForValidListAndQueue+0x60>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <prvCheckForValidListAndQueue+0x60>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	490b      	ldr	r1, [pc, #44]	; (8005ac0 <prvCheckForValidListAndQueue+0x7c>)
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fd42 	bl	800451c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a98:	f000 f974 	bl	8005d84 <vPortExitCritical>
}
 8005a9c:	bf00      	nop
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20001558 	.word	0x20001558
 8005aa8:	20001528 	.word	0x20001528
 8005aac:	2000153c 	.word	0x2000153c
 8005ab0:	20001550 	.word	0x20001550
 8005ab4:	20001554 	.word	0x20001554
 8005ab8:	20001604 	.word	0x20001604
 8005abc:	20001564 	.word	0x20001564
 8005ac0:	08006584 	.word	0x08006584

08005ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b04      	subs	r3, #4
 8005ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3b04      	subs	r3, #4
 8005ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3b04      	subs	r3, #4
 8005af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005af4:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <pxPortInitialiseStack+0x64>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b14      	subs	r3, #20
 8005afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3b04      	subs	r3, #4
 8005b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f06f 0202 	mvn.w	r2, #2
 8005b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3b20      	subs	r3, #32
 8005b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	08005b2d 	.word	0x08005b2d

08005b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <prvTaskExitError+0x54>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d00a      	beq.n	8005b56 <prvTaskExitError+0x2a>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <prvTaskExitError+0x28>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60bb      	str	r3, [r7, #8]
}
 8005b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b6a:	bf00      	nop
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0fc      	beq.n	8005b6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	2000000c 	.word	0x2000000c
	...

08005b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <pxCurrentTCBConst2>)
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	6808      	ldr	r0, [r1, #0]
 8005b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	f380 8809 	msr	PSP, r0
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8811 	msr	BASEPRI, r0
 8005baa:	4770      	bx	lr
 8005bac:	f3af 8000 	nop.w

08005bb0 <pxCurrentTCBConst2>:
 8005bb0:	20001028 	.word	0x20001028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop

08005bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bb8:	4808      	ldr	r0, [pc, #32]	; (8005bdc <prvPortStartFirstTask+0x24>)
 8005bba:	6800      	ldr	r0, [r0, #0]
 8005bbc:	6800      	ldr	r0, [r0, #0]
 8005bbe:	f380 8808 	msr	MSP, r0
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8814 	msr	CONTROL, r0
 8005bca:	b662      	cpsie	i
 8005bcc:	b661      	cpsie	f
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	df00      	svc	0
 8005bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bda:	bf00      	nop
 8005bdc:	e000ed08 	.word	0xe000ed08

08005be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <xPortStartScheduler+0x120>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a46      	ldr	r2, [pc, #280]	; (8005d04 <xPortStartScheduler+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10a      	bne.n	8005c06 <xPortStartScheduler+0x26>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613b      	str	r3, [r7, #16]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <xPortStartScheduler+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <xPortStartScheduler+0x128>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10a      	bne.n	8005c26 <xPortStartScheduler+0x46>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c26:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <xPortStartScheduler+0x12c>)
 8005c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <xPortStartScheduler+0x130>)
 8005c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c50:	2207      	movs	r2, #7
 8005c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c54:	e009      	b.n	8005c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c56:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d0ef      	beq.n	8005c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1c3 0307 	rsb	r3, r3, #7
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d00a      	beq.n	8005c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60bb      	str	r3, [r7, #8]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <xPortStartScheduler+0x134>)
 8005cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cce:	f000 f8dd 	bl	8005e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <xPortStartScheduler+0x13c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cd8:	f000 f8fc 	bl	8005ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <xPortStartScheduler+0x140>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <xPortStartScheduler+0x140>)
 8005ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ce8:	f7ff ff66 	bl	8005bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cec:	f7ff f846 	bl	8004d7c <vTaskSwitchContext>
	prvTaskExitError();
 8005cf0:	f7ff ff1c 	bl	8005b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	e000ed00 	.word	0xe000ed00
 8005d04:	410fc271 	.word	0x410fc271
 8005d08:	410fc270 	.word	0x410fc270
 8005d0c:	e000e400 	.word	0xe000e400
 8005d10:	20001654 	.word	0x20001654
 8005d14:	20001658 	.word	0x20001658
 8005d18:	e000ed20 	.word	0xe000ed20
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	e000ef34 	.word	0xe000ef34

08005d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	607b      	str	r3, [r7, #4]
}
 8005d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10f      	bne.n	8005d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <vPortEnterCritical+0x5c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <vPortEnterCritical+0x4a>
	}
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	2000000c 	.word	0x2000000c
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <vPortExitCritical+0x50>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <vPortExitCritical+0x24>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	607b      	str	r3, [r7, #4]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <vPortExitCritical+0x50>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <vPortExitCritical+0x42>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f383 8811 	msr	BASEPRI, r3
}
 8005dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000000c 	.word	0x2000000c
	...

08005de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005de0:	f3ef 8009 	mrs	r0, PSP
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <pxCurrentTCBConst>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f01e 0f10 	tst.w	lr, #16
 8005df0:	bf08      	it	eq
 8005df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	6010      	str	r0, [r2, #0]
 8005dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e04:	f380 8811 	msr	BASEPRI, r0
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f7fe ffb4 	bl	8004d7c <vTaskSwitchContext>
 8005e14:	f04f 0000 	mov.w	r0, #0
 8005e18:	f380 8811 	msr	BASEPRI, r0
 8005e1c:	bc09      	pop	{r0, r3}
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e26:	f01e 0f10 	tst.w	lr, #16
 8005e2a:	bf08      	it	eq
 8005e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e30:	f380 8809 	msr	PSP, r0
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst>:
 8005e40:	20001028 	.word	0x20001028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e62:	f7fe fed1 	bl	8004c08 <xTaskIncrementTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <xPortSysTickHandler+0x40>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f383 8811 	msr	BASEPRI, r3
}
 8005e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <vPortSetupTimerInterrupt+0x38>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <vPortSetupTimerInterrupt+0x3c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <vPortSetupTimerInterrupt+0x40>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	099b      	lsrs	r3, r3, #6
 8005ea8:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <vPortSetupTimerInterrupt+0x44>)
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eae:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000e010 	.word	0xe000e010
 8005ec4:	e000e018 	.word	0xe000e018
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	10624dd3 	.word	0x10624dd3
 8005ed0:	e000e014 	.word	0xe000e014

08005ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ee4 <vPortEnableVFP+0x10>
 8005ed8:	6801      	ldr	r1, [r0, #0]
 8005eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ede:	6001      	str	r1, [r0, #0]
 8005ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ee2:	bf00      	nop
 8005ee4:	e000ed88 	.word	0xe000ed88

08005ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eee:	f3ef 8305 	mrs	r3, IPSR
 8005ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d914      	bls.n	8005f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <vPortValidateInterruptPriority+0x70>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <vPortValidateInterruptPriority+0x74>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	7afa      	ldrb	r2, [r7, #11]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d20a      	bcs.n	8005f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <vPortValidateInterruptPriority+0x78>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <vPortValidateInterruptPriority+0x7c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d90a      	bls.n	8005f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	603b      	str	r3, [r7, #0]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <vPortValidateInterruptPriority+0x60>
	}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	e000e3f0 	.word	0xe000e3f0
 8005f5c:	20001654 	.word	0x20001654
 8005f60:	e000ed0c 	.word	0xe000ed0c
 8005f64:	20001658 	.word	0x20001658

08005f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f74:	f7fe fd8c 	bl	8004a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f78:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <pvPortMalloc+0x180>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f80:	f000 f920 	bl	80061c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f84:	4b59      	ldr	r3, [pc, #356]	; (80060ec <pvPortMalloc+0x184>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 8093 	bne.w	80060b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01d      	beq.n	8005fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f98:	2208      	movs	r2, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d014      	beq.n	8005fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	617b      	str	r3, [r7, #20]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d06e      	beq.n	80060b8 <pvPortMalloc+0x150>
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <pvPortMalloc+0x188>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d869      	bhi.n	80060b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fe4:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <pvPortMalloc+0x18c>)
 8005fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fe8:	4b42      	ldr	r3, [pc, #264]	; (80060f4 <pvPortMalloc+0x18c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fee:	e004      	b.n	8005ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d903      	bls.n	800600c <pvPortMalloc+0xa4>
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f1      	bne.n	8005ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800600c:	4b36      	ldr	r3, [pc, #216]	; (80060e8 <pvPortMalloc+0x180>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006012:	429a      	cmp	r2, r3
 8006014:	d050      	beq.n	80060b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2208      	movs	r2, #8
 800601c:	4413      	add	r3, r2
 800601e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1ad2      	subs	r2, r2, r3
 8006030:	2308      	movs	r3, #8
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	429a      	cmp	r2, r3
 8006036:	d91f      	bls.n	8006078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <pvPortMalloc+0xf8>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	613b      	str	r3, [r7, #16]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006072:	69b8      	ldr	r0, [r7, #24]
 8006074:	f000 f908 	bl	8006288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <pvPortMalloc+0x188>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <pvPortMalloc+0x188>)
 8006084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006086:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <pvPortMalloc+0x188>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <pvPortMalloc+0x190>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d203      	bcs.n	800609a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006092:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <pvPortMalloc+0x188>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <pvPortMalloc+0x190>)
 8006098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <pvPortMalloc+0x184>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <pvPortMalloc+0x194>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <pvPortMalloc+0x194>)
 80060b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060b8:	f7fe fcf8 	bl	8004aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <pvPortMalloc+0x174>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60fb      	str	r3, [r7, #12]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <pvPortMalloc+0x172>
	return pvReturn;
 80060dc:	69fb      	ldr	r3, [r7, #28]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3728      	adds	r7, #40	; 0x28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20005264 	.word	0x20005264
 80060ec:	20005278 	.word	0x20005278
 80060f0:	20005268 	.word	0x20005268
 80060f4:	2000525c 	.word	0x2000525c
 80060f8:	2000526c 	.word	0x2000526c
 80060fc:	20005270 	.word	0x20005270

08006100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04d      	beq.n	80061ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006112:	2308      	movs	r3, #8
 8006114:	425b      	negs	r3, r3
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <vPortFree+0xb8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <vPortFree+0x44>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60fb      	str	r3, [r7, #12]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <vPortFree+0x62>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60bb      	str	r3, [r7, #8]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <vPortFree+0xb8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01e      	beq.n	80061ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11a      	bne.n	80061ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <vPortFree+0xb8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	43db      	mvns	r3, r3
 8006182:	401a      	ands	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006188:	f7fe fc82 	bl	8004a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <vPortFree+0xbc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4413      	add	r3, r2
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <vPortFree+0xbc>)
 8006198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800619a:	6938      	ldr	r0, [r7, #16]
 800619c:	f000 f874 	bl	8006288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <vPortFree+0xc0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	4a06      	ldr	r2, [pc, #24]	; (80061c0 <vPortFree+0xc0>)
 80061a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061aa:	f7fe fc7f 	bl	8004aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061ae:	bf00      	nop
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20005278 	.word	0x20005278
 80061bc:	20005268 	.word	0x20005268
 80061c0:	20005274 	.word	0x20005274

080061c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <prvHeapInit+0xac>)
 80061d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3307      	adds	r3, #7
 80061e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <prvHeapInit+0xac>)
 80061f4:	4413      	add	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <prvHeapInit+0xb0>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006202:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <prvHeapInit+0xb0>)
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4413      	add	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006210:	2208      	movs	r2, #8
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <prvHeapInit+0xb4>)
 8006224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <prvHeapInit+0xb4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <prvHeapInit+0xb4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	1ad2      	subs	r2, r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <prvHeapInit+0xb4>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4a0a      	ldr	r2, [pc, #40]	; (800627c <prvHeapInit+0xb8>)
 8006252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <prvHeapInit+0xbc>)
 800625a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <prvHeapInit+0xc0>)
 800625e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	2000165c 	.word	0x2000165c
 8006274:	2000525c 	.word	0x2000525c
 8006278:	20005264 	.word	0x20005264
 800627c:	2000526c 	.word	0x2000526c
 8006280:	20005268 	.word	0x20005268
 8006284:	20005278 	.word	0x20005278

08006288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <prvInsertBlockIntoFreeList+0xac>)
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	e002      	b.n	800629c <prvInsertBlockIntoFreeList+0x14>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d8f7      	bhi.n	8006296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4413      	add	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d108      	bne.n	80062ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	441a      	add	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d118      	bne.n	8006310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <prvInsertBlockIntoFreeList+0xb0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d00d      	beq.n	8006306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	441a      	add	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e008      	b.n	8006318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <prvInsertBlockIntoFreeList+0xb0>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e003      	b.n	8006318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d002      	beq.n	8006326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	2000525c 	.word	0x2000525c
 8006338:	20005264 	.word	0x20005264

0800633c <__libc_init_array>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4d0d      	ldr	r5, [pc, #52]	; (8006374 <__libc_init_array+0x38>)
 8006340:	4c0d      	ldr	r4, [pc, #52]	; (8006378 <__libc_init_array+0x3c>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	2600      	movs	r6, #0
 8006348:	42a6      	cmp	r6, r4
 800634a:	d109      	bne.n	8006360 <__libc_init_array+0x24>
 800634c:	4d0b      	ldr	r5, [pc, #44]	; (800637c <__libc_init_array+0x40>)
 800634e:	4c0c      	ldr	r4, [pc, #48]	; (8006380 <__libc_init_array+0x44>)
 8006350:	f000 f8f2 	bl	8006538 <_init>
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	2600      	movs	r6, #0
 800635a:	42a6      	cmp	r6, r4
 800635c:	d105      	bne.n	800636a <__libc_init_array+0x2e>
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	f855 3b04 	ldr.w	r3, [r5], #4
 8006364:	4798      	blx	r3
 8006366:	3601      	adds	r6, #1
 8006368:	e7ee      	b.n	8006348 <__libc_init_array+0xc>
 800636a:	f855 3b04 	ldr.w	r3, [r5], #4
 800636e:	4798      	blx	r3
 8006370:	3601      	adds	r6, #1
 8006372:	e7f2      	b.n	800635a <__libc_init_array+0x1e>
 8006374:	0800669c 	.word	0x0800669c
 8006378:	0800669c 	.word	0x0800669c
 800637c:	0800669c 	.word	0x0800669c
 8006380:	080066a0 	.word	0x080066a0

08006384 <__retarget_lock_acquire_recursive>:
 8006384:	4770      	bx	lr

08006386 <__retarget_lock_release_recursive>:
 8006386:	4770      	bx	lr

08006388 <memcpy>:
 8006388:	440a      	add	r2, r1
 800638a:	4291      	cmp	r1, r2
 800638c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006390:	d100      	bne.n	8006394 <memcpy+0xc>
 8006392:	4770      	bx	lr
 8006394:	b510      	push	{r4, lr}
 8006396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639e:	4291      	cmp	r1, r2
 80063a0:	d1f9      	bne.n	8006396 <memcpy+0xe>
 80063a2:	bd10      	pop	{r4, pc}

080063a4 <memset>:
 80063a4:	4402      	add	r2, r0
 80063a6:	4603      	mov	r3, r0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d100      	bne.n	80063ae <memset+0xa>
 80063ac:	4770      	bx	lr
 80063ae:	f803 1b01 	strb.w	r1, [r3], #1
 80063b2:	e7f9      	b.n	80063a8 <memset+0x4>

080063b4 <cleanup_glue>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	460c      	mov	r4, r1
 80063b8:	6809      	ldr	r1, [r1, #0]
 80063ba:	4605      	mov	r5, r0
 80063bc:	b109      	cbz	r1, 80063c2 <cleanup_glue+0xe>
 80063be:	f7ff fff9 	bl	80063b4 <cleanup_glue>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ca:	f000 b869 	b.w	80064a0 <_free_r>
	...

080063d0 <_reclaim_reent>:
 80063d0:	4b2c      	ldr	r3, [pc, #176]	; (8006484 <_reclaim_reent+0xb4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4283      	cmp	r3, r0
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	d051      	beq.n	8006480 <_reclaim_reent+0xb0>
 80063dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063de:	b143      	cbz	r3, 80063f2 <_reclaim_reent+0x22>
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d14a      	bne.n	800647c <_reclaim_reent+0xac>
 80063e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	b111      	cbz	r1, 80063f2 <_reclaim_reent+0x22>
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 f857 	bl	80064a0 <_free_r>
 80063f2:	6961      	ldr	r1, [r4, #20]
 80063f4:	b111      	cbz	r1, 80063fc <_reclaim_reent+0x2c>
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 f852 	bl	80064a0 <_free_r>
 80063fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80063fe:	b111      	cbz	r1, 8006406 <_reclaim_reent+0x36>
 8006400:	4620      	mov	r0, r4
 8006402:	f000 f84d 	bl	80064a0 <_free_r>
 8006406:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006408:	b111      	cbz	r1, 8006410 <_reclaim_reent+0x40>
 800640a:	4620      	mov	r0, r4
 800640c:	f000 f848 	bl	80064a0 <_free_r>
 8006410:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006412:	b111      	cbz	r1, 800641a <_reclaim_reent+0x4a>
 8006414:	4620      	mov	r0, r4
 8006416:	f000 f843 	bl	80064a0 <_free_r>
 800641a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800641c:	b111      	cbz	r1, 8006424 <_reclaim_reent+0x54>
 800641e:	4620      	mov	r0, r4
 8006420:	f000 f83e 	bl	80064a0 <_free_r>
 8006424:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006426:	b111      	cbz	r1, 800642e <_reclaim_reent+0x5e>
 8006428:	4620      	mov	r0, r4
 800642a:	f000 f839 	bl	80064a0 <_free_r>
 800642e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006430:	b111      	cbz	r1, 8006438 <_reclaim_reent+0x68>
 8006432:	4620      	mov	r0, r4
 8006434:	f000 f834 	bl	80064a0 <_free_r>
 8006438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643a:	b111      	cbz	r1, 8006442 <_reclaim_reent+0x72>
 800643c:	4620      	mov	r0, r4
 800643e:	f000 f82f 	bl	80064a0 <_free_r>
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	b1e3      	cbz	r3, 8006480 <_reclaim_reent+0xb0>
 8006446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006448:	4620      	mov	r0, r4
 800644a:	4798      	blx	r3
 800644c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800644e:	b1b9      	cbz	r1, 8006480 <_reclaim_reent+0xb0>
 8006450:	4620      	mov	r0, r4
 8006452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006456:	f7ff bfad 	b.w	80063b4 <cleanup_glue>
 800645a:	5949      	ldr	r1, [r1, r5]
 800645c:	b941      	cbnz	r1, 8006470 <_reclaim_reent+0xa0>
 800645e:	3504      	adds	r5, #4
 8006460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006462:	2d80      	cmp	r5, #128	; 0x80
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	d1f8      	bne.n	800645a <_reclaim_reent+0x8a>
 8006468:	4620      	mov	r0, r4
 800646a:	f000 f819 	bl	80064a0 <_free_r>
 800646e:	e7ba      	b.n	80063e6 <_reclaim_reent+0x16>
 8006470:	680e      	ldr	r6, [r1, #0]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f814 	bl	80064a0 <_free_r>
 8006478:	4631      	mov	r1, r6
 800647a:	e7ef      	b.n	800645c <_reclaim_reent+0x8c>
 800647c:	2500      	movs	r5, #0
 800647e:	e7ef      	b.n	8006460 <_reclaim_reent+0x90>
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	bf00      	nop
 8006484:	20000010 	.word	0x20000010

08006488 <__malloc_lock>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__malloc_lock+0x8>)
 800648a:	f7ff bf7b 	b.w	8006384 <__retarget_lock_acquire_recursive>
 800648e:	bf00      	nop
 8006490:	2000527c 	.word	0x2000527c

08006494 <__malloc_unlock>:
 8006494:	4801      	ldr	r0, [pc, #4]	; (800649c <__malloc_unlock+0x8>)
 8006496:	f7ff bf76 	b.w	8006386 <__retarget_lock_release_recursive>
 800649a:	bf00      	nop
 800649c:	2000527c 	.word	0x2000527c

080064a0 <_free_r>:
 80064a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064a2:	2900      	cmp	r1, #0
 80064a4:	d044      	beq.n	8006530 <_free_r+0x90>
 80064a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064aa:	9001      	str	r0, [sp, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f1a1 0404 	sub.w	r4, r1, #4
 80064b2:	bfb8      	it	lt
 80064b4:	18e4      	addlt	r4, r4, r3
 80064b6:	f7ff ffe7 	bl	8006488 <__malloc_lock>
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <_free_r+0x94>)
 80064bc:	9801      	ldr	r0, [sp, #4]
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	b933      	cbnz	r3, 80064d0 <_free_r+0x30>
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	6014      	str	r4, [r2, #0]
 80064c6:	b003      	add	sp, #12
 80064c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064cc:	f7ff bfe2 	b.w	8006494 <__malloc_unlock>
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d908      	bls.n	80064e6 <_free_r+0x46>
 80064d4:	6825      	ldr	r5, [r4, #0]
 80064d6:	1961      	adds	r1, r4, r5
 80064d8:	428b      	cmp	r3, r1
 80064da:	bf01      	itttt	eq
 80064dc:	6819      	ldreq	r1, [r3, #0]
 80064de:	685b      	ldreq	r3, [r3, #4]
 80064e0:	1949      	addeq	r1, r1, r5
 80064e2:	6021      	streq	r1, [r4, #0]
 80064e4:	e7ed      	b.n	80064c2 <_free_r+0x22>
 80064e6:	461a      	mov	r2, r3
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	b10b      	cbz	r3, 80064f0 <_free_r+0x50>
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	d9fa      	bls.n	80064e6 <_free_r+0x46>
 80064f0:	6811      	ldr	r1, [r2, #0]
 80064f2:	1855      	adds	r5, r2, r1
 80064f4:	42a5      	cmp	r5, r4
 80064f6:	d10b      	bne.n	8006510 <_free_r+0x70>
 80064f8:	6824      	ldr	r4, [r4, #0]
 80064fa:	4421      	add	r1, r4
 80064fc:	1854      	adds	r4, r2, r1
 80064fe:	42a3      	cmp	r3, r4
 8006500:	6011      	str	r1, [r2, #0]
 8006502:	d1e0      	bne.n	80064c6 <_free_r+0x26>
 8006504:	681c      	ldr	r4, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	6053      	str	r3, [r2, #4]
 800650a:	4421      	add	r1, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	e7da      	b.n	80064c6 <_free_r+0x26>
 8006510:	d902      	bls.n	8006518 <_free_r+0x78>
 8006512:	230c      	movs	r3, #12
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	e7d6      	b.n	80064c6 <_free_r+0x26>
 8006518:	6825      	ldr	r5, [r4, #0]
 800651a:	1961      	adds	r1, r4, r5
 800651c:	428b      	cmp	r3, r1
 800651e:	bf04      	itt	eq
 8006520:	6819      	ldreq	r1, [r3, #0]
 8006522:	685b      	ldreq	r3, [r3, #4]
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	bf04      	itt	eq
 8006528:	1949      	addeq	r1, r1, r5
 800652a:	6021      	streq	r1, [r4, #0]
 800652c:	6054      	str	r4, [r2, #4]
 800652e:	e7ca      	b.n	80064c6 <_free_r+0x26>
 8006530:	b003      	add	sp, #12
 8006532:	bd30      	pop	{r4, r5, pc}
 8006534:	20005280 	.word	0x20005280

08006538 <_init>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr

08006544 <_fini>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr
