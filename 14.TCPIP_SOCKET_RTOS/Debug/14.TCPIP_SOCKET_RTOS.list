
14.TCPIP_SOCKET_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019fdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003034  0801a18c  0801a18c  0002a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d1c0  0801d1c0  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  0801d1c0  0801d1c0  0002d1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d1c8  0801d1c8  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d1c8  0801d1c8  0002d1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d1cc  0801d1cc  0002d1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0801d1d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030100  2**0
                  CONTENTS
 10 .bss          0000d9f8  20000100  20000100  00030100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000daf8  2000daf8  00030100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f634  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009446  00000000  00000000  0006f764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ef8  00000000  00000000  00078bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002cd0  00000000  00000000  0007baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039288  00000000  00000000  0007e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00046b6e  00000000  00000000  000b7a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118ced  00000000  00000000  000fe56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0021725b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cf14  00000000  00000000  002172ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a174 	.word	0x0801a174

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0801a174 	.word	0x0801a174

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <write_column_data>:
	}
}

// col 컨트롤 함수
void write_column_data(int col)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	// for문 8번 돌려서 해당 col 찾아서
	for (int i=0; i<8; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	e01f      	b.n	80005e2 <write_column_data+0x4e>
	{
		if (i == col)
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10c      	bne.n	80005c4 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);	// on		// pin state = 0으로 해서 불켜지지 않게?
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <write_column_data+0x60>)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b2:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <write_column_data+0x64>)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ba:	2200      	movs	r2, #0
 80005bc:	4619      	mov	r1, r3
 80005be:	f004 fde3 	bl	8005188 <HAL_GPIO_WritePin>
 80005c2:	e00b      	b.n	80005dc <write_column_data+0x48>
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);	// off
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <write_column_data+0x60>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <write_column_data+0x64>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f004 fdd6 	bl	8005188 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	dddc      	ble.n	80005a2 <write_column_data+0xe>
	}
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000004 	.word	0x20000004
 80005f8:	20000054 	.word	0x20000054

080005fc <write_row_data>:

// 0b00111100 이라는 데이터 찍는다고 할 때 로직 어떻게?
void write_row_data(unsigned char data)	// origianl data = data
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	unsigned char d; 	// 이미지를 copy 하기 위한 임시 버퍼 (한 bit씩 write 하기 위해)

	d = data;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	72fb      	strb	r3, [r7, #11]
	for (int i=0; i<8; i++)
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e023      	b.n	8000658 <write_row_data+0x5c>
	{
		//6번째 0을 write 한다면
		if ( d & (1 << i))		// 1인 경우
 8000610:	7afa      	ldrb	r2, [r7, #11]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	fa42 f303 	asr.w	r3, r2, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00c      	beq.n	800063a <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 8000620:	4a11      	ldr	r2, [pc, #68]	; (8000668 <write_row_data+0x6c>)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <write_row_data+0x70>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	f004 fda8 	bl	8005188 <HAL_GPIO_WritePin>
 8000638:	e00b      	b.n	8000652 <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <write_row_data+0x6c>)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <write_row_data+0x70>)
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	f004 fd9b 	bl	8005188 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b07      	cmp	r3, #7
 800065c:	ddd8      	ble.n	8000610 <write_row_data+0x14>
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000024 	.word	0x20000024
 800066c:	20000044 	.word	0x20000044

08000670 <dotmatrix_main_test>:
#if 1

// scroll 문자 출력 program
extern osMutexId_t myMutex01Handle;		// from main.c
int dotmatrix_main_test(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
	char lcd_buff[40];
//	init_dotmatrix();		--> main.c로 이동

//	while(1)
//	{
		uint32_t now = HAL_GetTick();	// 1ms 타임값마다 값을 읽어옴
 8000676:	f002 fb5b 	bl	8002d30 <HAL_GetTick>
 800067a:	62f8      	str	r0, [r7, #44]	; 0x2c
		// 처음 시작시 past_time = 0;	now:500 --> past_time=500
		if (now - past_time >= 200)	// 500ms마다 scroll
 800067c:	4b45      	ldr	r3, [pc, #276]	; (8000794 <dotmatrix_main_test+0x124>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	2bc7      	cmp	r3, #199	; 0xc7
 8000686:	d96a      	bls.n	800075e <dotmatrix_main_test+0xee>
		{
			sprintf(lcd_buff, "now : %d", now);	//now를 lcd에 출력하기 위해
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800068c:	4942      	ldr	r1, [pc, #264]	; (8000798 <dotmatrix_main_test+0x128>)
 800068e:	4618      	mov	r0, r3
 8000690:	f018 fca6 	bl	8018fe0 <siprintf>
			// 기존에 lock이 걸려 있으면 풀릴 때까지 기다린다
			// control이 다른 task로 넘어가지 않도록 lock을 건다
			if (osMutexWait(myMutex01Handle, 1000) == osOK)
 8000694:	4b41      	ldr	r3, [pc, #260]	; (800079c <dotmatrix_main_test+0x12c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069c:	4618      	mov	r0, r3
 800069e:	f00a fc95 	bl	800afcc <osMutexAcquire>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10c      	bne.n	80006c2 <dotmatrix_main_test+0x52>
			{
				move_cursor(0,0);
 80006a8:	2100      	movs	r1, #0
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 f8ff 	bl	80008ae <move_cursor>
				lcd_string(lcd_buff);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f8e6 	bl	8000884 <lcd_string>
				osMutexRelease(myMutex01Handle);
 80006b8:	4b38      	ldr	r3, [pc, #224]	; (800079c <dotmatrix_main_test+0x12c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f00a fcd0 	bl	800b062 <osMutexRelease>
				// unlock control이 다른 task로 넘어가도록 한다
			}

			past_time = now;
 80006c2:	4a34      	ldr	r2, [pc, #208]	; (8000794 <dotmatrix_main_test+0x124>)
 80006c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c6:	6013      	str	r3, [r2, #0]
			for (int i=0; i<8; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
 80006cc:	e029      	b.n	8000722 <dotmatrix_main_test+0xb2>
			{
				display_data[i] = (scroll_buffer[index][i] >> count)|(scroll_buffer[index+1][i] << (8 - count)); 	// shift
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <dotmatrix_main_test+0x130>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a34      	ldr	r2, [pc, #208]	; (80007a4 <dotmatrix_main_test+0x134>)
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	441a      	add	r2, r3
 80006d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <dotmatrix_main_test+0x138>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	fa42 f303 	asr.w	r3, r2, r3
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <dotmatrix_main_test+0x130>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	492c      	ldr	r1, [pc, #176]	; (80007a4 <dotmatrix_main_test+0x134>)
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	4419      	add	r1, r3
 80006f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f8:	440b      	add	r3, r1
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <dotmatrix_main_test+0x138>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f1c3 0308 	rsb	r3, r3, #8
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	b25b      	sxtb	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	b2d9      	uxtb	r1, r3
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <dotmatrix_main_test+0x13c>)
 8000714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000716:	4413      	add	r3, r2
 8000718:	460a      	mov	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<8; i++)
 800071c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071e:	3301      	adds	r3, #1
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
 8000722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000724:	2b07      	cmp	r3, #7
 8000726:	ddd2      	ble.n	80006ce <dotmatrix_main_test+0x5e>
			}
			if (++count == 8)	// 8 column을 다 처리했으면 다음 scroll_buffer로 이동
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <dotmatrix_main_test+0x138>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <dotmatrix_main_test+0x138>)
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <dotmatrix_main_test+0x138>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d111      	bne.n	800075e <dotmatrix_main_test+0xee>
			{
				count = 0;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <dotmatrix_main_test+0x138>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
				index++;	// 다음 scroll_buffer로 이동
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <dotmatrix_main_test+0x130>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <dotmatrix_main_test+0x130>)
 8000748:	6013      	str	r3, [r2, #0]
				if (index == number_of_character+1) index = 0;	// 11개의 문자를 다 처리했으면 0번 scroll_buffer를 처리하기 위해 이동
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <dotmatrix_main_test+0x140>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <dotmatrix_main_test+0x130>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d102      	bne.n	800075e <dotmatrix_main_test+0xee>
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <dotmatrix_main_test+0x130>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
			}
		}
		for (int i=0; i<8; i++)		// 8줄
 800075e:	2300      	movs	r3, #0
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
 8000762:	e00f      	b.n	8000784 <dotmatrix_main_test+0x114>
		{
			// 공통 양글 방식 common anode
			// column에는 0을 row에는 1을 출력해야 해당 LED가 on
			write_column_data(i);
 8000764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000766:	f7ff ff15 	bl	8000594 <write_column_data>
			write_row_data(display_data[i]);	// i를 넘겨준다
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <dotmatrix_main_test+0x13c>)
 800076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff42 	bl	80005fc <write_row_data>

			HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f002 fae5 	bl	8002d48 <HAL_Delay>
		for (int i=0; i<8; i++)		// 8줄
 800077e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000780:	3301      	adds	r3, #1
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
 8000784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000786:	2b07      	cmp	r3, #7
 8000788:	ddec      	ble.n	8000764 <dotmatrix_main_test+0xf4>
		}
//	}
//	return 0;

}
 800078a:	bf00      	nop
 800078c:	4618      	mov	r0, r3
 800078e:	3738      	adds	r7, #56	; 0x38
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200002b4 	.word	0x200002b4
 8000798:	0801a18c 	.word	0x0801a18c
 800079c:	20000af4 	.word	0x20000af4
 80007a0:	200002b8 	.word	0x200002b8
 80007a4:	20000124 	.word	0x20000124
 80007a8:	200002bc 	.word	0x200002bc
 80007ac:	2000011c 	.word	0x2000011c
 80007b0:	20000064 	.word	0x20000064

080007b4 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f023 030f 	bic.w	r3, r3, #15
 80007c4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	f043 030c 	orr.w	r3, r3, #12
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	f043 030c 	orr.w	r3, r3, #12
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80007f4:	bf00      	nop
 80007f6:	f107 0208 	add.w	r2, r7, #8
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2304      	movs	r3, #4
 8000800:	214e      	movs	r1, #78	; 0x4e
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <lcd_command+0x64>)
 8000804:	f004 fe50 	bl	80054a8 <HAL_I2C_Master_Transmit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f3      	bne.n	80007f6 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800080e:	bf00      	nop
}
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000032c 	.word	0x2000032c

0800081c <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f023 030f 	bic.w	r3, r3, #15
 800082c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f043 030d 	orr.w	r3, r3, #13
 800083a:	b2db      	uxtb	r3, r3
 800083c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f043 0309 	orr.w	r3, r3, #9
 8000844:	b2db      	uxtb	r3, r3
 8000846:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	f043 030d 	orr.w	r3, r3, #13
 800084e:	b2db      	uxtb	r3, r3
 8000850:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	f043 0309 	orr.w	r3, r3, #9
 8000858:	b2db      	uxtb	r3, r3
 800085a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800085c:	bf00      	nop
 800085e:	f107 0208 	add.w	r2, r7, #8
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2304      	movs	r3, #4
 8000868:	214e      	movs	r1, #78	; 0x4e
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <lcd_data+0x64>)
 800086c:	f004 fe1c 	bl	80054a8 <HAL_I2C_Master_Transmit>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f3      	bne.n	800085e <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000876:	bf00      	nop
}
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000032c 	.word	0x2000032c

08000884 <lcd_string>:
	HAL_Delay(2);
}

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	while(*str)
 800088c:	e006      	b.n	800089c <lcd_string+0x18>
	{
		lcd_data(*str++);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ffc0 	bl	800081c <lcd_data>
	while(*str)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f4      	bne.n	800088e <lcd_string+0xa>
	}
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	460a      	mov	r2, r1
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	4613      	mov	r3, r2
 80008bc:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff6f 	bl	80007b4 <lcd_command>
	return;
 80008d6:	bf00      	nop
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <dec2bin>:

	return high + low;
}
// decimal --> BCD  ex) 23: 001 0111
unsigned char dec2bin(unsigned char byte)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	high = (byte / 10) << 4;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <dec2bin+0x44>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	08db      	lsrs	r3, r3, #3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <dec2bin+0x44>)
 80008fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000902:	08d9      	lsrs	r1, r3, #3
 8000904:	460b      	mov	r3, r1
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	4413      	add	r3, r2
 8000916:	b2db      	uxtb	r3, r3

}
 8000918:	4618      	mov	r0, r3
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	cccccccd 	.word	0xcccccccd

08000928 <set_rtc>:
	 oldTime.Seconds=sTime.Seconds;
}
// setrtc231016103800
//       678901234567
void set_rtc(char *date_time)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4];  // date
	char hh[4], min[4], ss[4];  // time

	strncpy(yy, date_time+6, 2); // yy[0] = '2' yy[1]='3' yy[2]=0;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	1d99      	adds	r1, r3, #6
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	2202      	movs	r2, #2
 800093a:	4618      	mov	r0, r3
 800093c:	f018 fbc7 	bl	80190ce <strncpy>
	strncpy(mm, date_time+8, 2);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f103 0108 	add.w	r1, r3, #8
 8000946:	f107 0318 	add.w	r3, r7, #24
 800094a:	2202      	movs	r2, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f018 fbbe 	bl	80190ce <strncpy>
	strncpy(dd, date_time+10, 2);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f103 010a 	add.w	r1, r3, #10
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2202      	movs	r2, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f018 fbb5 	bl	80190ce <strncpy>

	strncpy(hh, date_time+12, 2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 010c 	add.w	r1, r3, #12
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2202      	movs	r2, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f018 fbac 	bl	80190ce <strncpy>
	strncpy(min, date_time+14, 2);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f103 010e 	add.w	r1, r3, #14
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2202      	movs	r2, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f018 fba3 	bl	80190ce <strncpy>
	strncpy(ss, date_time+16, 2);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0110 	add.w	r1, r3, #16
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2202      	movs	r2, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f018 fb9a 	bl	80190ce <strncpy>

	// ascii --> int --> bcd
	sDate.Year=dec2bin(atoi(yy));
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4618      	mov	r0, r3
 80009a0:	f017 ffe2 	bl	8018968 <atoi>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff99 	bl	80008e0 <dec2bin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <set_rtc+0x138>)
 80009b4:	70da      	strb	r2, [r3, #3]
	sDate.Month=dec2bin(atoi(mm));
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f017 ffd4 	bl	8018968 <atoi>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff8b 	bl	80008e0 <dec2bin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <set_rtc+0x138>)
 80009d0:	705a      	strb	r2, [r3, #1]
	sDate.Date=dec2bin(atoi(dd));
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4618      	mov	r0, r3
 80009d8:	f017 ffc6 	bl	8018968 <atoi>
 80009dc:	4603      	mov	r3, r0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff7d 	bl	80008e0 <dec2bin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <set_rtc+0x138>)
 80009ec:	709a      	strb	r2, [r3, #2]

	sTime.Hours=dec2bin(atoi(hh));
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4618      	mov	r0, r3
 80009f4:	f017 ffb8 	bl	8018968 <atoi>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff6f 	bl	80008e0 <dec2bin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <set_rtc+0x13c>)
 8000a08:	701a      	strb	r2, [r3, #0]
	sTime.Minutes=dec2bin(atoi(min));
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f017 ffaa 	bl	8018968 <atoi>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff61 	bl	80008e0 <dec2bin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <set_rtc+0x13c>)
 8000a24:	705a      	strb	r2, [r3, #1]
	sTime.Seconds=dec2bin(atoi(ss));
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f017 ff9c 	bl	8018968 <atoi>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff53 	bl	80008e0 <dec2bin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <set_rtc+0x13c>)
 8000a40:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000a42:	2201      	movs	r2, #1
 8000a44:	4906      	ldr	r1, [pc, #24]	; (8000a60 <set_rtc+0x138>)
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <set_rtc+0x140>)
 8000a48:	f006 f968 	bl	8006d1c <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4905      	ldr	r1, [pc, #20]	; (8000a64 <set_rtc+0x13c>)
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <set_rtc+0x140>)
 8000a52:	f006 f8c9 	bl	8006be8 <HAL_RTC_SetTime>
}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200002d4 	.word	0x200002d4
 8000a64:	200002c0 	.word	0x200002c0
 8000a68:	20000380 	.word	0x20000380

08000a6c <flower_on>:
#endif
	}
}

void flower_on()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	21ff      	movs	r1, #255	; 0xff
 8000a76:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <flower_on+0x5c>)
 8000a78:	f004 fb86 	bl	8005188 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	e01a      	b.n	8000ab8 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 8000a82:	2210      	movs	r2, #16
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <flower_on+0x5c>)
 8000a92:	f004 fb79 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 8000a96:	2208      	movs	r2, #8
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	fa42 f303 	asr.w	r3, r2, r3
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <flower_on+0x5c>)
 8000aa6:	f004 fb6f 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000aaa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aae:	f002 f94b 	bl	8002d48 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	dde1      	ble.n	8000a82 <flower_on+0x16>
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <flower_off>:


void flower_off()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	21ff      	movs	r1, #255	; 0xff
 8000ad6:	4814      	ldr	r0, [pc, #80]	; (8000b28 <flower_off+0x5c>)
 8000ad8:	f004 fb56 	bl	8005188 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	e01a      	b.n	8000b18 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fa42 f303 	asr.w	r3, r2, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <flower_off+0x5c>)
 8000af2:	f004 fb49 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <flower_off+0x5c>)
 8000b06:	f004 fb3f 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000b0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b0e:	f002 f91b 	bl	8002d48 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3301      	adds	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	dde1      	ble.n	8000ae2 <flower_off+0x16>
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <led_keepon_up>:

void led_keepon_up()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	e00f      	b.n	8000b58 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2201      	movs	r2, #1
 8000b44:	4619      	mov	r1, r3
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <led_keepon_up+0x3c>)
 8000b48:	f004 fb1e 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b4c:	20c8      	movs	r0, #200	; 0xc8
 8000b4e:	f002 f8fb 	bl	8002d48 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3301      	adds	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	ddec      	ble.n	8000b38 <led_keepon_up+0xc>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40020c00 	.word	0x40020c00

08000b6c <led_keepon_down>:

void led_keepon_down()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	e00f      	b.n	8000b98 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	fa42 f303 	asr.w	r3, r2, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	2201      	movs	r2, #1
 8000b84:	4619      	mov	r1, r3
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <led_keepon_down+0x3c>)
 8000b88:	f004 fafe 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b8c:	20c8      	movs	r0, #200	; 0xc8
 8000b8e:	f002 f8db 	bl	8002d48 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3301      	adds	r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	ddec      	ble.n	8000b78 <led_keepon_down+0xc>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <led_on_up+0x50>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2bc7      	cmp	r3, #199	; 0xc7
 8000bb6:	dd1e      	ble.n	8000bf6 <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <led_on_up+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000bbe:	f000 f861 	bl	8000c84 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <led_on_up+0x54>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480c      	ldr	r0, [pc, #48]	; (8000c04 <led_on_up+0x58>)
 8000bd4:	f004 fad8 	bl	8005188 <HAL_GPIO_WritePin>
		i++;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <led_on_up+0x54>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <led_on_up+0x54>)
 8000be0:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <led_on_up+0x54>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	dd05      	ble.n	8000bf6 <led_on_up+0x4a>
		{
			i=0;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <led_on_up+0x54>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <led_on_up+0x5c>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000b00 	.word	0x20000b00
 8000c00:	200002dc 	.word	0x200002dc
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	200002d8 	.word	0x200002d8

08000c0c <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <led_on_down+0x50>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2bc7      	cmp	r3, #199	; 0xc7
 8000c16:	dd1e      	ble.n	8000c56 <led_on_down+0x4a>
	{
		t1ms_counter=0;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <led_on_down+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000c1e:	f000 f831 	bl	8000c84 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <led_on_down+0x54>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	fa42 f303 	asr.w	r3, r2, r3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <led_on_down+0x58>)
 8000c34:	f004 faa8 	bl	8005188 <HAL_GPIO_WritePin>
		i++;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <led_on_down+0x54>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <led_on_down+0x54>)
 8000c40:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <led_on_down+0x54>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	dd05      	ble.n	8000c56 <led_on_down+0x4a>
		{
			i=0;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <led_on_down+0x54>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <led_on_down+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000b00 	.word	0x20000b00
 8000c60:	200002e0 	.word	0x200002e0
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	200002d8 	.word	0x200002d8

08000c6c <led_all_on>:

void led_all_on(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	21ff      	movs	r1, #255	; 0xff
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <led_all_on+0x14>)
 8000c76:	f004 fa87 	bl	8005188 <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <led_all_off>:

void led_all_off(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	21ff      	movs	r1, #255	; 0xff
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <led_all_off+0x14>)
 8000c8e:	f004 fa7b 	bl	8005188 <HAL_GPIO_WritePin>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000ca4:	1d39      	adds	r1, r7, #4
 8000ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000caa:	2201      	movs	r2, #1
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <__io_putchar+0x20>)
 8000cae:	f007 fe66 	bl	800897e <HAL_UART_Transmit>

  return ch;
 8000cb2:	687b      	ldr	r3, [r7, #4]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000550 	.word	0x20000550

08000cc0 <delay_us>:
//----------  printf end ----------



void delay_us(unsigned long us)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <delay_us+0x2c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8000cd0:	bf00      	nop
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <delay_us+0x2c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d8f9      	bhi.n	8000cd2 <delay_us+0x12>
		;
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20000508 	.word	0x20000508

08000cf0 <HAL_GPIO_EXTI_Callback>:

// 1. move from Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c
// 2. enter here every external interrupt
volatile int ext_int_no = -1;	// for comparing with GPIO_Pin0
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d016      	beq.n	8000d2e <HAL_GPIO_EXTI_Callback+0x3e>
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	dc1d      	bgt.n	8000d40 <HAL_GPIO_EXTI_Callback+0x50>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <HAL_GPIO_EXTI_Callback+0x1e>
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d008      	beq.n	8000d1e <HAL_GPIO_EXTI_Callback+0x2e>
	case PHOTO2_Pin:
		ext_int_no = GPIO_Pin;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);   // LED3
		break;
	}
}
 8000d0c:	e018      	b.n	8000d40 <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no = GPIO_Pin;
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d12:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LED1
 8000d14:	2101      	movs	r1, #1
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d18:	f004 fa4f 	bl	80051ba <HAL_GPIO_TogglePin>
		break;
 8000d1c:	e010      	b.n	8000d40 <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no = GPIO_Pin;
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d22:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);   // LED2
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d28:	f004 fa47 	bl	80051ba <HAL_GPIO_TogglePin>
		break;
 8000d2c:	e008      	b.n	8000d40 <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no = GPIO_Pin;
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d32:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);   // LED3
 8000d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d3a:	f004 fa3e 	bl	80051ba <HAL_GPIO_TogglePin>
		break;
 8000d3e:	bf00      	nop
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000068 	.word	0x20000068
 8000d4c:	40020400 	.word	0x40020400

08000d50 <HAL_ADC_ConvCpltCallback>:


uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_ADC_ConvCpltCallback+0x30>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d109      	bne.n	8000d76 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <HAL_ADC_ConvCpltCallback+0x34>)
 8000d64:	f002 fa46 	bl	80031f4 <HAL_ADC_GetValue>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_ADC_ConvCpltCallback+0x38>)
 8000d6e:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <HAL_ADC_ConvCpltCallback+0x34>)
 8000d72:	f002 f851 	bl	8002e18 <HAL_ADC_Start_IT>
	}
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40012000 	.word	0x40012000
 8000d84:	200002e4 	.word	0x200002e4
 8000d88:	20000b04 	.word	0x20000b04

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f001 ff98 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f8be 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 fc50 	bl	800163c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d9c:	f000 fbcc 	bl	8001538 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000da0:	f000 fc1e 	bl	80015e0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000da4:	f000 fbf2 	bl	800158c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000da8:	f000 fb7e 	bl	80014a8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000dac:	f000 fba0 	bl	80014f0 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000db0:	f000 fa62 	bl	8001278 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000db4:	f000 fab4 	bl	8001320 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000db8:	f000 fa04 	bl	80011c4 <MX_TIM2_Init>
  MX_RTC_Init();
 8000dbc:	f000 f9a8 	bl	8001110 <MX_RTC_Init>
  MX_TIM5_Init();
 8000dc0:	f000 fafc 	bl	80013bc <MX_TIM5_Init>
  MX_I2C1_Init();
 8000dc4:	f000 f964 	bl	8001090 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000dc8:	f000 f910 	bl	8000fec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4934      	ldr	r1, [pc, #208]	; (8000ea0 <main+0x114>)
 8000dd0:	4834      	ldr	r0, [pc, #208]	; (8000ea4 <main+0x118>)
 8000dd2:	f007 fe66 	bl	8008aa2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4933      	ldr	r1, [pc, #204]	; (8000ea8 <main+0x11c>)
 8000dda:	4834      	ldr	r0, [pc, #208]	; (8000eac <main+0x120>)
 8000ddc:	f007 fe61 	bl	8008aa2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000de0:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <main+0x124>)
 8000de2:	f006 f90f 	bl	8007004 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000de6:	4833      	ldr	r0, [pc, #204]	; (8000eb4 <main+0x128>)
 8000de8:	f006 f90c 	bl	8007004 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000dec:	2100      	movs	r1, #0
 8000dee:	4832      	ldr	r0, [pc, #200]	; (8000eb8 <main+0x12c>)
 8000df0:	f006 fbf6 	bl	80075e0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000df4:	2100      	movs	r1, #0
 8000df6:	4831      	ldr	r0, [pc, #196]	; (8000ebc <main+0x130>)
 8000df8:	f006 fa8c 	bl	8007314 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4830      	ldr	r0, [pc, #192]	; (8000ec0 <main+0x134>)
 8000e00:	f006 f9c0 	bl	8007184 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000e04:	210c      	movs	r1, #12
 8000e06:	482f      	ldr	r0, [pc, #188]	; (8000ec4 <main+0x138>)
 8000e08:	f006 f9bc 	bl	8007184 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);	// Start
 8000e0c:	482e      	ldr	r0, [pc, #184]	; (8000ec8 <main+0x13c>)
 8000e0e:	f002 f803 	bl	8002e18 <HAL_ADC_Start_IT>


//  DHT11_Init();
//  i2c_lcd_init();			// remove//

  TIM10_10ms_counter=0;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <main+0x140>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
//    buzzer_main();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e18:	f009 ff46 	bl	800aca8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000e1c:	482c      	ldr	r0, [pc, #176]	; (8000ed0 <main+0x144>)
 8000e1e:	f00a f84f 	bl	800aec0 <osMutexNew>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <main+0x148>)
 8000e26:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e28:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <main+0x14c>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	482b      	ldr	r0, [pc, #172]	; (8000edc <main+0x150>)
 8000e2e:	f009 ff9a 	bl	800ad66 <osThreadNew>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <main+0x154>)
 8000e36:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 8000e38:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <main+0x158>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	482a      	ldr	r0, [pc, #168]	; (8000ee8 <main+0x15c>)
 8000e3e:	f009 ff92 	bl	800ad66 <osThreadNew>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <main+0x160>)
 8000e46:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 8000e48:	4a29      	ldr	r2, [pc, #164]	; (8000ef0 <main+0x164>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <main+0x168>)
 8000e4e:	f009 ff8a 	bl	800ad66 <osThreadNew>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <main+0x16c>)
 8000e56:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_func, NULL, &Task3_attributes);
 8000e58:	4a28      	ldr	r2, [pc, #160]	; (8000efc <main+0x170>)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4828      	ldr	r0, [pc, #160]	; (8000f00 <main+0x174>)
 8000e5e:	f009 ff82 	bl	800ad66 <osThreadNew>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <main+0x178>)
 8000e66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e68:	f009 ff42 	bl	800acf0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("cds sensor : %d\n", adcValue[0]);
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <main+0x17c>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4826      	ldr	r0, [pc, #152]	; (8000f0c <main+0x180>)
 8000e74:	f017 ff6e 	bl	8018d54 <iprintf>
	  if (adcValue[0] < 2500 )
 8000e78:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <main+0x17c>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d804      	bhi.n	8000e8e <main+0x102>
	  {
		  //nucleo_stm32429zi_led_on();
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);   // LED1
 8000e84:	2102      	movs	r1, #2
 8000e86:	4822      	ldr	r0, [pc, #136]	; (8000f10 <main+0x184>)
 8000e88:	f004 f997 	bl	80051ba <HAL_GPIO_TogglePin>
 8000e8c:	e003      	b.n	8000e96 <main+0x10a>
	  }
	  else
	  {
		  //nucleo_stm32429zi_led_off();
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LED1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	481f      	ldr	r0, [pc, #124]	; (8000f10 <main+0x184>)
 8000e92:	f004 f992 	bl	80051ba <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(10); 	//10ms
 8000e96:	200a      	movs	r0, #10
 8000e98:	f001 ff56 	bl	8002d48 <HAL_Delay>
	  printf("cds sensor : %d\n", adcValue[0]);
 8000e9c:	e7e6      	b.n	8000e6c <main+0xe0>
 8000e9e:	bf00      	nop
 8000ea0:	20000af8 	.word	0x20000af8
 8000ea4:	20000550 	.word	0x20000550
 8000ea8:	20000af9 	.word	0x20000af9
 8000eac:	20000594 	.word	0x20000594
 8000eb0:	200004c0 	.word	0x200004c0
 8000eb4:	20000508 	.word	0x20000508
 8000eb8:	200003e8 	.word	0x200003e8
 8000ebc:	20000430 	.word	0x20000430
 8000ec0:	200003a0 	.word	0x200003a0
 8000ec4:	20000478 	.word	0x20000478
 8000ec8:	200002e4 	.word	0x200002e4
 8000ecc:	20000afc 	.word	0x20000afc
 8000ed0:	0801ce20 	.word	0x0801ce20
 8000ed4:	20000af4 	.word	0x20000af4
 8000ed8:	0801cd90 	.word	0x0801cd90
 8000edc:	080018cd 	.word	0x080018cd
 8000ee0:	20000ae4 	.word	0x20000ae4
 8000ee4:	0801cdb4 	.word	0x0801cdb4
 8000ee8:	080018f1 	.word	0x080018f1
 8000eec:	20000ae8 	.word	0x20000ae8
 8000ef0:	0801cdd8 	.word	0x0801cdd8
 8000ef4:	08001905 	.word	0x08001905
 8000ef8:	20000aec 	.word	0x20000aec
 8000efc:	0801cdfc 	.word	0x0801cdfc
 8000f00:	08001919 	.word	0x08001919
 8000f04:	20000af0 	.word	0x20000af0
 8000f08:	20000b04 	.word	0x20000b04
 8000f0c:	0801a1c8 	.word	0x0801a1c8
 8000f10:	40020400 	.word	0x40020400

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	; 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f017 fe79 	bl	8018c1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f70:	2309      	movs	r3, #9
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f8c:	23a8      	movs	r3, #168	; 0xa8
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f94:	2307      	movs	r3, #7
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 ff23 	bl	8005de8 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa8:	f000 fcd4 	bl	8001954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fac:	230f      	movs	r3, #15
 8000fae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2105      	movs	r1, #5
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 f984 	bl	80062d8 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fd6:	f000 fcbd 	bl	8001954 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_ADC1_Init+0x98>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_ADC1_Init+0x9c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_ADC1_Init+0x98>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_ADC1_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_ADC1_Init+0x98>)
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_ADC1_Init+0xa0>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_ADC1_Init+0x98>)
 800103a:	2201      	movs	r2, #1
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_ADC1_Init+0x98>)
 8001048:	2201      	movs	r2, #1
 800104a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_ADC1_Init+0x98>)
 800104e:	f001 fe9f 	bl	8002d90 <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 fc7c 	bl	8001954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800105c:	2304      	movs	r3, #4
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001064:	2307      	movs	r3, #7
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_ADC1_Init+0x98>)
 800106e:	f002 f8e3 	bl	8003238 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 fc6c 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200002e4 	.word	0x200002e4
 8001088:	40012000 	.word	0x40012000
 800108c:	0f000001 	.word	0x0f000001

08001090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_I2C1_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_I2C1_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_I2C1_Init+0x74>)
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_I2C1_Init+0x7c>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_I2C1_Init+0x74>)
 80010ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_I2C1_Init+0x74>)
 80010ce:	f004 f8a7 	bl	8005220 <HAL_I2C_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d8:	f000 fc3c 	bl	8001954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <MX_I2C1_Init+0x74>)
 80010e0:	f004 fce9 	bl	8005ab6 <HAL_I2CEx_ConfigAnalogFilter>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010ea:	f000 fc33 	bl	8001954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_I2C1_Init+0x74>)
 80010f2:	f004 fd1c 	bl	8005b2e <HAL_I2CEx_ConfigDigitalFilter>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010fc:	f000 fc2a 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000032c 	.word	0x2000032c
 8001108:	40005400 	.word	0x40005400
 800110c:	000186a0 	.word	0x000186a0

08001110 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_RTC_Init+0xac>)
 800112a:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <MX_RTC_Init+0xb0>)
 800112c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MX_RTC_Init+0xac>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_RTC_Init+0xac>)
 8001136:	227f      	movs	r2, #127	; 0x7f
 8001138:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MX_RTC_Init+0xac>)
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_RTC_Init+0xac>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_RTC_Init+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_RTC_Init+0xac>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001152:	481a      	ldr	r0, [pc, #104]	; (80011bc <MX_RTC_Init+0xac>)
 8001154:	f005 fcd2 	bl	8006afc <HAL_RTC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 fbf9 	bl	8001954 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001162:	2309      	movs	r3, #9
 8001164:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8001166:	2338      	movs	r3, #56	; 0x38
 8001168:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800116a:	2300      	movs	r3, #0
 800116c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2201      	movs	r2, #1
 800117a:	4619      	mov	r1, r3
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <MX_RTC_Init+0xac>)
 800117e:	f005 fd33 	bl	8006be8 <HAL_RTC_SetTime>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001188:	f000 fbe4 	bl	8001954 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800118c:	2301      	movs	r3, #1
 800118e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001190:	2310      	movs	r3, #16
 8001192:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001194:	2316      	movs	r3, #22
 8001196:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001198:	2323      	movs	r3, #35	; 0x23
 800119a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	2201      	movs	r2, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_RTC_Init+0xac>)
 80011a4:	f005 fdba 	bl	8006d1c <HAL_RTC_SetDate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011ae:	f000 fbd1 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000380 	.word	0x20000380
 80011c0:	40002800 	.word	0x40002800

080011c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011f0:	f240 628f 	movw	r2, #1679	; 0x68f
 80011f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_TIM2_Init+0xb0>)
 80011fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_TIM2_Init+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001210:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001212:	f005 ff67 	bl	80070e4 <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800121c:	f000 fb9a 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001230:	f007 fac8 	bl	80087c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800123a:	f000 fb8b 	bl	8001954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123e:	2360      	movs	r3, #96	; 0x60
 8001240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001242:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001258:	f006 fc8e 	bl	8007b78 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001262:	f000 fb77 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <MX_TIM2_Init+0xb0>)
 8001268:	f000 fe90 	bl	8001f8c <HAL_TIM_MspPostInit>

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200003a0 	.word	0x200003a0

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_TIM3_Init+0xa0>)
 8001296:	4a21      	ldr	r2, [pc, #132]	; (800131c <MX_TIM3_Init+0xa4>)
 8001298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_TIM3_Init+0xa0>)
 800129c:	2253      	movs	r2, #83	; 0x53
 800129e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_TIM3_Init+0xa0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_TIM3_Init+0xa0>)
 80012a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_TIM3_Init+0xa0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_TIM3_Init+0xa0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <MX_TIM3_Init+0xa0>)
 80012bc:	f006 f940 	bl	8007540 <HAL_TIM_IC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012c6:	f000 fb45 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <MX_TIM3_Init+0xa0>)
 80012da:	f007 fa73 	bl	80087c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012e4:	f000 fb36 	bl	8001954 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012e8:	230a      	movs	r3, #10
 80012ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012ec:	2301      	movs	r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_TIM3_Init+0xa0>)
 8001300:	f006 fb9e 	bl	8007a40 <HAL_TIM_IC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800130a:	f000 fb23 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200003e8 	.word	0x200003e8
 800131c:	40000400 	.word	0x40000400

08001320 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_TIM4_Init+0x94>)
 800133e:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <MX_TIM4_Init+0x98>)
 8001340:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_TIM4_Init+0x94>)
 8001344:	f240 3247 	movw	r2, #839	; 0x347
 8001348:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_TIM4_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_TIM4_Init+0x94>)
 8001352:	2263      	movs	r2, #99	; 0x63
 8001354:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_TIM4_Init+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_TIM4_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <MX_TIM4_Init+0x94>)
 8001364:	f005 fdff 	bl	8006f66 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800136e:	f000 faf1 	bl	8001954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_TIM4_Init+0x94>)
 8001380:	f006 fcbc 	bl	8007cfc <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800138a:	f000 fae3 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_TIM4_Init+0x94>)
 800139c:	f007 fa12 	bl	80087c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013a6:	f000 fad5 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000430 	.word	0x20000430
 80013b8:	40000800 	.word	0x40000800

080013bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_TIM5_Init+0xe4>)
 80013ee:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <MX_TIM5_Init+0xe8>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_TIM5_Init+0xe4>)
 80013f4:	2233      	movs	r2, #51	; 0x33
 80013f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_TIM5_Init+0xe4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <MX_TIM5_Init+0xe4>)
 8001400:	f240 128f 	movw	r2, #399	; 0x18f
 8001404:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <MX_TIM5_Init+0xe4>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <MX_TIM5_Init+0xe4>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001412:	4823      	ldr	r0, [pc, #140]	; (80014a0 <MX_TIM5_Init+0xe4>)
 8001414:	f005 fda7 	bl	8006f66 <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800141e:	f000 fa99 	bl	8001954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142c:	4619      	mov	r1, r3
 800142e:	481c      	ldr	r0, [pc, #112]	; (80014a0 <MX_TIM5_Init+0xe4>)
 8001430:	f006 fc64 	bl	8007cfc <HAL_TIM_ConfigClockSource>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800143a:	f000 fa8b 	bl	8001954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <MX_TIM5_Init+0xe4>)
 8001440:	f005 fe50 	bl	80070e4 <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800144a:	f000 fa83 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	4619      	mov	r1, r3
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <MX_TIM5_Init+0xe4>)
 800145e:	f007 f9b1 	bl	80087c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001468:	f000 fa74 	bl	8001954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001470:	23c7      	movs	r3, #199	; 0xc7
 8001472:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	220c      	movs	r2, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM5_Init+0xe4>)
 8001484:	f006 fb78 	bl	8007b78 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800148e:	f000 fa61 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM5_Init+0xe4>)
 8001494:	f000 fd7a 	bl	8001f8c <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3738      	adds	r7, #56	; 0x38
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000478 	.word	0x20000478
 80014a4:	40000c00 	.word	0x40000c00

080014a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_TIM10_Init+0x40>)
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <MX_TIM10_Init+0x44>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_TIM10_Init+0x40>)
 80014b4:	22a7      	movs	r2, #167	; 0xa7
 80014b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_TIM10_Init+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_TIM10_Init+0x40>)
 80014c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80014c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_TIM10_Init+0x40>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_TIM10_Init+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM10_Init+0x40>)
 80014d4:	f005 fd47 	bl	8006f66 <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80014de:	f000 fa39 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200004c0 	.word	0x200004c0
 80014ec:	40014400 	.word	0x40014400

080014f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_TIM11_Init+0x40>)
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <MX_TIM11_Init+0x44>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_TIM11_Init+0x40>)
 80014fc:	22a7      	movs	r2, #167	; 0xa7
 80014fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_TIM11_Init+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_TIM11_Init+0x40>)
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_TIM11_Init+0x40>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_TIM11_Init+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM11_Init+0x40>)
 800151c:	f005 fd23 	bl	8006f66 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001526:	f000 fa15 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000508 	.word	0x20000508
 8001534:	40014800 	.word	0x40014800

08001538 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_USART3_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001548:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001570:	f007 f9b8 	bl	80088e4 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f9eb 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000550 	.word	0x20000550
 8001588:	40004800 	.word	0x40004800

0800158c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART6_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 8001598:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800159c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015c4:	f007 f98e 	bl	80088e4 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f9c1 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000594 	.word	0x20000594
 80015dc:	40011400 	.word	0x40011400

080015e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ee:	2204      	movs	r2, #4
 80015f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001600:	2202      	movs	r2, #2
 8001602:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001606:	2201      	movs	r2, #1
 8001608:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001618:	2201      	movs	r2, #1
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001624:	f004 fac2 	bl	8005bac <HAL_PCD_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 f991 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200005d8 	.word	0x200005d8

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	4b95      	ldr	r3, [pc, #596]	; (80018ac <MX_GPIO_Init+0x270>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a94      	ldr	r2, [pc, #592]	; (80018ac <MX_GPIO_Init+0x270>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b92      	ldr	r3, [pc, #584]	; (80018ac <MX_GPIO_Init+0x270>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <MX_GPIO_Init+0x270>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a8d      	ldr	r2, [pc, #564]	; (80018ac <MX_GPIO_Init+0x270>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <MX_GPIO_Init+0x270>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	4b87      	ldr	r3, [pc, #540]	; (80018ac <MX_GPIO_Init+0x270>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a86      	ldr	r2, [pc, #536]	; (80018ac <MX_GPIO_Init+0x270>)
 8001694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b84      	ldr	r3, [pc, #528]	; (80018ac <MX_GPIO_Init+0x270>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	4b80      	ldr	r3, [pc, #512]	; (80018ac <MX_GPIO_Init+0x270>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a7f      	ldr	r2, [pc, #508]	; (80018ac <MX_GPIO_Init+0x270>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b7d      	ldr	r3, [pc, #500]	; (80018ac <MX_GPIO_Init+0x270>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b79      	ldr	r3, [pc, #484]	; (80018ac <MX_GPIO_Init+0x270>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a78      	ldr	r2, [pc, #480]	; (80018ac <MX_GPIO_Init+0x270>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b76      	ldr	r3, [pc, #472]	; (80018ac <MX_GPIO_Init+0x270>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b72      	ldr	r3, [pc, #456]	; (80018ac <MX_GPIO_Init+0x270>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a71      	ldr	r2, [pc, #452]	; (80018ac <MX_GPIO_Init+0x270>)
 80016e8:	f043 0320 	orr.w	r3, r3, #32
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <MX_GPIO_Init+0x270>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <MX_GPIO_Init+0x270>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <MX_GPIO_Init+0x270>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <MX_GPIO_Init+0x270>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b64      	ldr	r3, [pc, #400]	; (80018ac <MX_GPIO_Init+0x270>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a63      	ldr	r2, [pc, #396]	; (80018ac <MX_GPIO_Init+0x270>)
 8001720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b61      	ldr	r3, [pc, #388]	; (80018ac <MX_GPIO_Init+0x270>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001738:	485d      	ldr	r0, [pc, #372]	; (80018b0 <MX_GPIO_Init+0x274>)
 800173a:	f003 fd25 	bl	8005188 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	485c      	ldr	r0, [pc, #368]	; (80018b4 <MX_GPIO_Init+0x278>)
 8001744:	f003 fd20 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f244 0181 	movw	r1, #16513	; 0x4081
 800174e:	485a      	ldr	r0, [pc, #360]	; (80018b8 <MX_GPIO_Init+0x27c>)
 8001750:	f003 fd1a 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175a:	4858      	ldr	r0, [pc, #352]	; (80018bc <MX_GPIO_Init+0x280>)
 800175c:	f003 fd14 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001760:	2200      	movs	r2, #0
 8001762:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001766:	4856      	ldr	r0, [pc, #344]	; (80018c0 <MX_GPIO_Init+0x284>)
 8001768:	f003 fd0e 	bl	8005188 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	4854      	ldr	r0, [pc, #336]	; (80018c4 <MX_GPIO_Init+0x288>)
 8001772:	f003 fd09 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001776:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4848      	ldr	r0, [pc, #288]	; (80018b0 <MX_GPIO_Init+0x274>)
 8001790:	f003 fb4e 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 8001794:	f242 030d 	movw	r3, #8205	; 0x200d
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4847      	ldr	r0, [pc, #284]	; (80018c8 <MX_GPIO_Init+0x28c>)
 80017ac:	f003 fb40 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80017b0:	2301      	movs	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	483b      	ldr	r0, [pc, #236]	; (80018b4 <MX_GPIO_Init+0x278>)
 80017c8:	f003 fb32 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4834      	ldr	r0, [pc, #208]	; (80018b8 <MX_GPIO_Init+0x27c>)
 80017e6:	f003 fb23 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	482e      	ldr	r0, [pc, #184]	; (80018bc <MX_GPIO_Init+0x280>)
 8001804:	f003 fb14 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001808:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4824      	ldr	r0, [pc, #144]	; (80018b0 <MX_GPIO_Init+0x274>)
 800181e:	f003 fb07 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001822:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4821      	ldr	r0, [pc, #132]	; (80018c0 <MX_GPIO_Init+0x284>)
 800183c:	f003 faf8 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001840:	2340      	movs	r3, #64	; 0x40
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	481b      	ldr	r0, [pc, #108]	; (80018c4 <MX_GPIO_Init+0x288>)
 8001858:	f003 faea 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	4815      	ldr	r0, [pc, #84]	; (80018c4 <MX_GPIO_Init+0x288>)
 8001870:	f003 fade 	bl	8004e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2105      	movs	r1, #5
 8001878:	2006      	movs	r0, #6
 800187a:	f001 ffcd 	bl	8003818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800187e:	2006      	movs	r0, #6
 8001880:	f001 ffe6 	bl	8003850 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2105      	movs	r1, #5
 8001888:	2008      	movs	r0, #8
 800188a:	f001 ffc5 	bl	8003818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800188e:	2008      	movs	r0, #8
 8001890:	f001 ffde 	bl	8003850 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2105      	movs	r1, #5
 8001898:	2009      	movs	r0, #9
 800189a:	f001 ffbd 	bl	8003818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800189e:	2009      	movs	r0, #9
 80018a0:	f001 ffd6 	bl	8003850 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3738      	adds	r7, #56	; 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020400 	.word	0x40020400
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40020800 	.word	0x40020800

080018cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80018d4:	f008 fb80 	bl	8009fd8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  // udp_echoserver_init();			// ADD_JUHEE COPY FROM udp_echoserver
  /* Infinite loop */
  for(;;)
  {
	ethernetif_input(&gnetif);		// ADD_JUHEE
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <StartDefaultTask+0x20>)
 80018da:	f008 fef3 	bl	800a6c4 <ethernetif_input>
	sys_check_timeouts();		// ADD_JUHEE
 80018de:	f014 fa5f 	bl	8015da0 <sys_check_timeouts>
    osDelay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f009 fad1 	bl	800ae8a <osDelay>
	ethernetif_input(&gnetif);		// ADD_JUHEE
 80018e8:	e7f6      	b.n	80018d8 <StartDefaultTask+0xc>
 80018ea:	bf00      	nop
 80018ec:	20000bc8 	.word	0x20000bc8

080018f0 <Task1_func>:
* @retval None
*/
extern void init_dotmatrix(void);
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
//	init_dotmatrix();
  /* Infinite loop */
  for(;;)
  {
	dotmatrix_main_test();	//
 80018f8:	f7fe feba 	bl	8000670 <dotmatrix_main_test>
    osDelay(1);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f009 fac4 	bl	800ae8a <osDelay>
	dotmatrix_main_test();	//
 8001902:	e7f9      	b.n	80018f8 <Task1_func+0x8>

08001904 <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */
  /* Infinite loop */
  for(;;)
  {
	stepmotor_main_test();
 800190c:	f000 f837 	bl	800197e <stepmotor_main_test>
    osDelay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f009 faba 	bl	800ae8a <osDelay>
	stepmotor_main_test();
 8001916:	e7f9      	b.n	800190c <Task2_func+0x8>

08001918 <Task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_func */
void Task3_func(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_func */
  /* Infinite loop */
  for(;;)
  {
	pc_command_processing();
 8001920:	f000 fef8 	bl	8002714 <pc_command_processing>
	bt_command_processing();
 8001924:	f000 ff94 	bl	8002850 <bt_command_processing>
    osDelay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f009 faae 	bl	800ae8a <osDelay>
	pc_command_processing();
 800192e:	e7f7      	b.n	8001920 <Task3_func+0x8>

08001930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d101      	bne.n	8001946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001942:	f001 f9e1 	bl	8002d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40001000 	.word	0x40001000

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195c:	e7fe      	b.n	800195c <Error_Handler+0x8>

0800195e <set_rpm>:
//------ set_rpm(13) 함수 분당 13번으로 지정시의 동작 상황 ------//
// 60,000,000us = 1분 / 4096스텝 돌아감 / rpm
// 1126us(1스텝 idle타임) X 4096 = 4,612,096us = 4612ms = 4.6초(1바퀴 도는 시간)
// 1분에 몇 바퀴? 60초 / 4.6초(1회전 소요시간) = 13회전
void set_rpm(int rpm)	// rpm 1~13
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	delay_us(60000000/4096/rpm);
 8001966:	f643 1238 	movw	r2, #14648	; 0x3938
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f9a5 	bl	8000cc0 <delay_us>
	// 최대 speed 기준(13) : delay_us(1126);
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <stepmotor_main_test>:

// 시계방향으로 1회전 <--> 반시계방향으로 1회전
void stepmotor_main_test(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
#else
	// original code // 시계방향으로 1회전 <--> 반시계방향으로 1회전
//	while(1)
//	{
		// 시계방향
		for(int i=0; i<512; i++)	// 시계방향으로 1회전
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e011      	b.n	80019ae <stepmotor_main_test+0x30>
		{
			for (int j=0; j<8; j++)	// 1sequence가 8번 돈다
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	e008      	b.n	80019a2 <stepmotor_main_test+0x24>
			{
				stepmotor_drive(j);
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f000 f82f 	bl	80019f4 <stepmotor_drive>
				set_rpm(13);
 8001996:	200d      	movs	r0, #13
 8001998:	f7ff ffe1 	bl	800195e <set_rpm>
			for (int j=0; j<8; j++)	// 1sequence가 8번 돈다
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3301      	adds	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b07      	cmp	r3, #7
 80019a6:	ddf3      	ble.n	8001990 <stepmotor_main_test+0x12>
		for(int i=0; i<512; i++)	// 시계방향으로 1회전
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b4:	dbe9      	blt.n	800198a <stepmotor_main_test+0xc>
			}
		}

		// 반시계방향(8step 반대로)
		for(int i=0; i<512; i++)	// 반시계방향으로 1회전
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	e011      	b.n	80019e0 <stepmotor_main_test+0x62>
		{
			for (int j=7; j>=0; j--) // 1sequence가 8번 돈다
 80019bc:	2307      	movs	r3, #7
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	e008      	b.n	80019d4 <stepmotor_main_test+0x56>
			{
				stepmotor_drive(j);
 80019c2:	6838      	ldr	r0, [r7, #0]
 80019c4:	f000 f816 	bl	80019f4 <stepmotor_drive>
				set_rpm(13);	// rpm 값만큼 wait
 80019c8:	200d      	movs	r0, #13
 80019ca:	f7ff ffc8 	bl	800195e <set_rpm>
			for (int j=7; j>=0; j--) // 1sequence가 8번 돈다
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	daf3      	bge.n	80019c2 <stepmotor_main_test+0x44>
		for(int i=0; i<512; i++)	// 반시계방향으로 1회전
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e6:	dbe9      	blt.n	80019bc <stepmotor_main_test+0x3e>
			}
		}
//	}
#endif
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <stepmotor_drive>:
}


#else	// original code
void stepmotor_drive(int step)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	switch(step){
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b07      	cmp	r3, #7
 8001a00:	f200 80dc 	bhi.w	8001bbc <stepmotor_drive+0x1c8>
 8001a04:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <stepmotor_drive+0x18>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a2d 	.word	0x08001a2d
 8001a10:	08001a5f 	.word	0x08001a5f
 8001a14:	08001a91 	.word	0x08001a91
 8001a18:	08001ac3 	.word	0x08001ac3
 8001a1c:	08001af5 	.word	0x08001af5
 8001a20:	08001b27 	.word	0x08001b27
 8001a24:	08001b59 	.word	0x08001b59
 8001a28:	08001b8b 	.word	0x08001b8b
	case 0:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);	// 스텝모터 PPT 표 참고해서 작성
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a32:	4864      	ldr	r0, [pc, #400]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a34:	f003 fba8 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3e:	4861      	ldr	r0, [pc, #388]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a40:	f003 fba2 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4a:	485e      	ldr	r0, [pc, #376]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a4c:	f003 fb9c 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a56:	485b      	ldr	r0, [pc, #364]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a58:	f003 fb96 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001a5c:	e0ae      	b.n	8001bbc <stepmotor_drive+0x1c8>
	case 1:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a64:	4857      	ldr	r0, [pc, #348]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a66:	f003 fb8f 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a70:	4854      	ldr	r0, [pc, #336]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a72:	f003 fb89 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7c:	4851      	ldr	r0, [pc, #324]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a7e:	f003 fb83 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a88:	484e      	ldr	r0, [pc, #312]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a8a:	f003 fb7d 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001a8e:	e095      	b.n	8001bbc <stepmotor_drive+0x1c8>
	case 2:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a96:	484b      	ldr	r0, [pc, #300]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001a98:	f003 fb76 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa2:	4848      	ldr	r0, [pc, #288]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001aa4:	f003 fb70 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aae:	4845      	ldr	r0, [pc, #276]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001ab0:	f003 fb6a 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	4842      	ldr	r0, [pc, #264]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001abc:	f003 fb64 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001ac0:	e07c      	b.n	8001bbc <stepmotor_drive+0x1c8>
	case 3:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac8:	483e      	ldr	r0, [pc, #248]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001aca:	f003 fb5d 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad4:	483b      	ldr	r0, [pc, #236]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001ad6:	f003 fb57 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae0:	4838      	ldr	r0, [pc, #224]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001ae2:	f003 fb51 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aec:	4835      	ldr	r0, [pc, #212]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001aee:	f003 fb4b 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001af2:	e063      	b.n	8001bbc <stepmotor_drive+0x1c8>
	case 4:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	4832      	ldr	r0, [pc, #200]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001afc:	f003 fb44 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b06:	482f      	ldr	r0, [pc, #188]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b08:	f003 fb3e 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b12:	482c      	ldr	r0, [pc, #176]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b14:	f003 fb38 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b1e:	4829      	ldr	r0, [pc, #164]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b20:	f003 fb32 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001b24:	e04a      	b.n	8001bbc <stepmotor_drive+0x1c8>
	case 5:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b2c:	4825      	ldr	r0, [pc, #148]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b2e:	f003 fb2b 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b38:	4822      	ldr	r0, [pc, #136]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b3a:	f003 fb25 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b44:	481f      	ldr	r0, [pc, #124]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b46:	f003 fb1f 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b50:	481c      	ldr	r0, [pc, #112]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b52:	f003 fb19 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001b56:	e031      	b.n	8001bbc <stepmotor_drive+0x1c8>
	case 6:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b5e:	4819      	ldr	r0, [pc, #100]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b60:	f003 fb12 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6a:	4816      	ldr	r0, [pc, #88]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b6c:	f003 fb0c 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b76:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b78:	f003 fb06 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b82:	4810      	ldr	r0, [pc, #64]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b84:	f003 fb00 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001b88:	e018      	b.n	8001bbc <stepmotor_drive+0x1c8>
	case 7:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b92:	f003 faf9 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001b9e:	f003 faf3 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001baa:	f003 faed 	bl	8005188 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <stepmotor_drive+0x1d0>)
 8001bb6:	f003 fae7 	bl	8005188 <HAL_GPIO_WritePin>
		break;
 8001bba:	bf00      	nop
	}
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020c00 	.word	0x40020c00

08001bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_MspInit+0x54>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_MspInit+0x54>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_MspInit+0x54>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_MspInit+0x54>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_MspInit+0x54>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_MspInit+0x54>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	210f      	movs	r1, #15
 8001c0a:	f06f 0001 	mvn.w	r0, #1
 8001c0e:	f001 fe03 	bl	8003818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_ADC_MspInit+0x8c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12f      	bne.n	8001ca2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_ADC_MspInit+0x90>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_ADC_MspInit+0x90>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_ADC_MspInit+0x90>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_ADC_MspInit+0x90>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_ADC_MspInit+0x90>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_ADC_MspInit+0x90>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <HAL_ADC_MspInit+0x94>)
 8001c8e:	f003 f8cf 	bl	8004e30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2105      	movs	r1, #5
 8001c96:	2012      	movs	r0, #18
 8001c98:	f001 fdbe 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c9c:	2012      	movs	r0, #18
 8001c9e:	f001 fdd7 	bl	8003850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_I2C_MspInit+0x84>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12c      	bne.n	8001d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <HAL_I2C_MspInit+0x8c>)
 8001d14:	f003 f88c 	bl	8004e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400

08001d48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2230      	movs	r2, #48	; 0x30
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f016 ff5e 	bl	8018c1a <memset>
  if(hrtc->Instance==RTC)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_RTC_MspInit+0x4c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d111      	bne.n	8001d8c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 fd00 	bl	800677c <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001d82:	f7ff fde7 	bl	8001954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_RTC_MspInit+0x50>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3738      	adds	r7, #56	; 0x38
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40002800 	.word	0x40002800
 8001d98:	42470e3c 	.word	0x42470e3c

08001d9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d115      	bne.n	8001dda <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_TIM_PWM_MspInit+0x48>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_TIM_PWM_MspInit+0x48>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_TIM_PWM_MspInit+0x48>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2105      	movs	r1, #5
 8001dce:	201c      	movs	r0, #28
 8001dd0:	f001 fd22 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd4:	201c      	movs	r0, #28
 8001dd6:	f001 fd3b 	bl	8003850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_TIM_IC_MspInit+0x94>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d133      	bne.n	8001e72 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_TIM_IC_MspInit+0x98>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_TIM_IC_MspInit+0x98>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_TIM_IC_MspInit+0x98>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_TIM_IC_MspInit+0x98>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <HAL_TIM_IC_MspInit+0x98>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_TIM_IC_MspInit+0x98>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001e42:	2340      	movs	r3, #64	; 0x40
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e52:	2302      	movs	r3, #2
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4809      	ldr	r0, [pc, #36]	; (8001e84 <HAL_TIM_IC_MspInit+0x9c>)
 8001e5e:	f002 ffe7 	bl	8004e30 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2105      	movs	r1, #5
 8001e66:	201d      	movs	r0, #29
 8001e68:	f001 fcd6 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e6c:	201d      	movs	r0, #29
 8001e6e:	f001 fcef 	bl	8003850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a38      	ldr	r2, [pc, #224]	; (8001f78 <HAL_TIM_Base_MspInit+0xf0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d116      	bne.n	8001ec8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a36      	ldr	r2, [pc, #216]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2105      	movs	r1, #5
 8001eba:	201e      	movs	r0, #30
 8001ebc:	f001 fcac 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ec0:	201e      	movs	r0, #30
 8001ec2:	f001 fcc5 	bl	8003850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001ec6:	e052      	b.n	8001f6e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2c      	ldr	r2, [pc, #176]	; (8001f80 <HAL_TIM_Base_MspInit+0xf8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d116      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2105      	movs	r1, #5
 8001ef2:	2032      	movs	r0, #50	; 0x32
 8001ef4:	f001 fc90 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ef8:	2032      	movs	r0, #50	; 0x32
 8001efa:	f001 fca9 	bl	8003850 <HAL_NVIC_EnableIRQ>
}
 8001efe:	e036      	b.n	8001f6e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <HAL_TIM_Base_MspInit+0xfc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d116      	bne.n	8001f38 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2105      	movs	r1, #5
 8001f2a:	2019      	movs	r0, #25
 8001f2c:	f001 fc74 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f30:	2019      	movs	r0, #25
 8001f32:	f001 fc8d 	bl	8003850 <HAL_NVIC_EnableIRQ>
}
 8001f36:	e01a      	b.n	8001f6e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_TIM_Base_MspInit+0x100>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d115      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_TIM_Base_MspInit+0xf4>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	201a      	movs	r0, #26
 8001f64:	f001 fc58 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f68:	201a      	movs	r0, #26
 8001f6a:	f001 fc71 	bl	8003850 <HAL_NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40014400 	.word	0x40014400
 8001f88:	40014800 	.word	0x40014800

08001f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fac:	d11e      	bne.n	8001fec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_TIM_MspPostInit+0xb0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_TIM_MspPostInit+0xb0>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_TIM_MspPostInit+0xb0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4816      	ldr	r0, [pc, #88]	; (8002040 <HAL_TIM_MspPostInit+0xb4>)
 8001fe6:	f002 ff23 	bl	8004e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fea:	e022      	b.n	8002032 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <HAL_TIM_MspPostInit+0xb8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d11d      	bne.n	8002032 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_TIM_MspPostInit+0xb0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_TIM_MspPostInit+0xb0>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_TIM_MspPostInit+0xb0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002012:	2308      	movs	r3, #8
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002022:	2302      	movs	r3, #2
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <HAL_TIM_MspPostInit+0xb4>)
 800202e:	f002 feff 	bl	8004e30 <HAL_GPIO_Init>
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000
 8002044:	40000c00 	.word	0x40000c00

08002048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <HAL_UART_MspInit+0x108>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d135      	bne.n	80020d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_UART_MspInit+0x10c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a38      	ldr	r2, [pc, #224]	; (8002154 <HAL_UART_MspInit+0x10c>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_UART_MspInit+0x10c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_UART_MspInit+0x10c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_UART_MspInit+0x10c>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_UART_MspInit+0x10c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b4:	2307      	movs	r3, #7
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4826      	ldr	r0, [pc, #152]	; (8002158 <HAL_UART_MspInit+0x110>)
 80020c0:	f002 feb6 	bl	8004e30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2105      	movs	r1, #5
 80020c8:	2027      	movs	r0, #39	; 0x27
 80020ca:	f001 fba5 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ce:	2027      	movs	r0, #39	; 0x27
 80020d0:	f001 fbbe 	bl	8003850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020d4:	e038      	b.n	8002148 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <HAL_UART_MspInit+0x114>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d133      	bne.n	8002148 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_UART_MspInit+0x10c>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_UART_MspInit+0x10c>)
 80020ea:	f043 0320 	orr.w	r3, r3, #32
 80020ee:	6453      	str	r3, [r2, #68]	; 0x44
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_UART_MspInit+0x10c>)
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_UART_MspInit+0x10c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <HAL_UART_MspInit+0x10c>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_UART_MspInit+0x10c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002118:	23c0      	movs	r3, #192	; 0xc0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002128:	2308      	movs	r3, #8
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	480b      	ldr	r0, [pc, #44]	; (8002160 <HAL_UART_MspInit+0x118>)
 8002134:	f002 fe7c 	bl	8004e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2105      	movs	r1, #5
 800213c:	2047      	movs	r0, #71	; 0x47
 800213e:	f001 fb6b 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002142:	2047      	movs	r0, #71	; 0x47
 8002144:	f001 fb84 	bl	8003850 <HAL_NVIC_EnableIRQ>
}
 8002148:	bf00      	nop
 800214a:	3730      	adds	r7, #48	; 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40004800 	.word	0x40004800
 8002154:	40023800 	.word	0x40023800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40011400 	.word	0x40011400
 8002160:	40020800 	.word	0x40020800

08002164 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002184:	d13f      	bne.n	8002206 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_PCD_MspInit+0xac>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_PCD_MspInit+0xac>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_PCD_MspInit+0xac>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021b4:	230a      	movs	r3, #10
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4815      	ldr	r0, [pc, #84]	; (8002214 <HAL_PCD_MspInit+0xb0>)
 80021c0:	f002 fe36 	bl	8004e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	480e      	ldr	r0, [pc, #56]	; (8002214 <HAL_PCD_MspInit+0xb0>)
 80021da:	f002 fe29 	bl	8004e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_PCD_MspInit+0xac>)
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_PCD_MspInit+0xac>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	6353      	str	r3, [r2, #52]	; 0x34
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_PCD_MspInit+0xac>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_PCD_MspInit+0xac>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_PCD_MspInit+0xac>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40020000 	.word	0x40020000

08002218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08e      	sub	sp, #56	; 0x38
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_InitTick+0xe4>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a32      	ldr	r2, [pc, #200]	; (80022fc <HAL_InitTick+0xe4>)
 8002232:	f043 0310 	orr.w	r3, r3, #16
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_InitTick+0xe4>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002244:	f107 0210 	add.w	r2, r7, #16
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fa62 	bl	8006718 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800225e:	f004 fa33 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8002262:	6378      	str	r0, [r7, #52]	; 0x34
 8002264:	e004      	b.n	8002270 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002266:	f004 fa2f 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 800226a:	4603      	mov	r3, r0
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <HAL_InitTick+0xe8>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	3b01      	subs	r3, #1
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_InitTick+0xec>)
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_InitTick+0xf0>)
 8002282:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_InitTick+0xec>)
 8002286:	f240 32e7 	movw	r2, #999	; 0x3e7
 800228a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_InitTick+0xec>)
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_InitTick+0xec>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_InitTick+0xec>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_InitTick+0xec>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022a4:	4817      	ldr	r0, [pc, #92]	; (8002304 <HAL_InitTick+0xec>)
 80022a6:	f004 fe5e 	bl	8006f66 <HAL_TIM_Base_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11b      	bne.n	80022f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022b8:	4812      	ldr	r0, [pc, #72]	; (8002304 <HAL_InitTick+0xec>)
 80022ba:	f004 fea3 	bl	8007004 <HAL_TIM_Base_Start_IT>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022cc:	2036      	movs	r0, #54	; 0x36
 80022ce:	f001 fabf 	bl	8003850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d808      	bhi.n	80022ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	2036      	movs	r0, #54	; 0x36
 80022de:	f001 fa9b 	bl	8003818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_InitTick+0xf4>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e002      	b.n	80022f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3738      	adds	r7, #56	; 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	431bde83 	.word	0x431bde83
 8002304:	20000b0c 	.word	0x20000b0c
 8002308:	40001000 	.word	0x40001000
 800230c:	20000070 	.word	0x20000070

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 8002340:	2001      	movs	r0, #1
 8002342:	f002 ff55 	bl	80051f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}

0800234a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 800234e:	2004      	movs	r0, #4
 8002350:	f002 ff4e 	bl	80051f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 800235c:	2008      	movs	r0, #8
 800235e:	f002 ff47 	bl	80051f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <ADC_IRQHandler+0x10>)
 800236e:	f000 fe31 	bl	8002fd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002e4 	.word	0x200002e4

0800237c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002382:	f005 fa55 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200004c0 	.word	0x200004c0

08002390 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002396:	f005 fa4b 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000508 	.word	0x20000508

080023a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <TIM2_IRQHandler+0x10>)
 80023aa:	f005 fa41 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200003a0 	.word	0x200003a0

080023b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM3_IRQHandler+0x10>)
 80023be:	f005 fa37 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200003e8 	.word	0x200003e8

080023cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <TIM4_IRQHandler+0x10>)
 80023d2:	f005 fa2d 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000430 	.word	0x20000430

080023e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <USART3_IRQHandler+0x10>)
 80023e6:	f006 fb8d 	bl	8008b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000550 	.word	0x20000550

080023f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <TIM5_IRQHandler+0x10>)
 80023fa:	f005 fa19 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000478 	.word	0x20000478

08002408 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM6_DAC_IRQHandler+0x10>)
 800240e:	f005 fa0f 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000b0c 	.word	0x20000b0c

0800241c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <ETH_IRQHandler+0x10>)
 8002422:	f001 fe2f 	bl	8004084 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000570c 	.word	0x2000570c

08002430 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <ETH_WKUP_IRQHandler+0x10>)
 8002436:	f001 fe25 	bl	8004084 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000570c 	.word	0x2000570c

08002444 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <USART6_IRQHandler+0x10>)
 800244a:	f006 fb5b 	bl	8008b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000594 	.word	0x20000594

08002458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_kill>:

int _kill(int pid, int sig)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <_kill+0x20>)
 8002474:	2216      	movs	r2, #22
 8002476:	601a      	str	r2, [r3, #0]
  return -1;
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	2000daf4 	.word	0x2000daf4

0800248c <_exit>:

void _exit (int status)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ffe5 	bl	8002468 <_kill>
  while (1) {}    /* Make sure we hang here */
 800249e:	e7fe      	b.n	800249e <_exit+0x12>

080024a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e00a      	b.n	80024c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024b2:	f3af 8000 	nop.w
 80024b6:	4601      	mov	r1, r0
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	60ba      	str	r2, [r7, #8]
 80024be:	b2ca      	uxtb	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbf0      	blt.n	80024b2 <_read+0x12>
  }

  return len;
 80024d0:	687b      	ldr	r3, [r7, #4]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e009      	b.n	8002500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fbd1 	bl	8000c9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	dbf1      	blt.n	80024ec <_write+0x12>
  }
  return len;
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_close>:

int _close(int file)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253a:	605a      	str	r2, [r3, #4]
  return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_isatty>:

int _isatty(int file)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d205      	bcs.n	80025b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <_sbrk+0x6c>)
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20030000 	.word	0x20030000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	20000b54 	.word	0x20000b54
 80025e4:	2000daf8 	.word	0x2000daf8
 80025e8:	2000daf4 	.word	0x2000daf4

080025ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <SystemInit+0x20>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <SystemInit+0x20>)
 80025f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a32      	ldr	r2, [pc, #200]	; (80026e4 <HAL_UART_RxCpltCallback+0xd4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d12c      	bne.n	800267a <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b27      	cmp	r3, #39	; 0x27
 8002626:	dc1d      	bgt.n	8002664 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_UART_RxCpltCallback+0xdc>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b0a      	cmp	r3, #10
 800262e:	d003      	beq.n	8002638 <HAL_UART_RxCpltCallback+0x28>
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_UART_RxCpltCallback+0xdc>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b0d      	cmp	r3, #13
 8002636:	d10b      	bne.n	8002650 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_UART_RxCpltCallback+0xd8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <HAL_UART_RxCpltCallback+0xe0>)
 800263e:	2100      	movs	r1, #0
 8002640:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <HAL_UART_RxCpltCallback+0xe4>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_UART_RxCpltCallback+0xd8>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e00f      	b.n	8002670 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	4924      	ldr	r1, [pc, #144]	; (80026e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002658:	600a      	str	r2, [r1, #0]
 800265a:	4a24      	ldr	r2, [pc, #144]	; (80026ec <HAL_UART_RxCpltCallback+0xdc>)
 800265c:	7811      	ldrb	r1, [r2, #0]
 800265e:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <HAL_UART_RxCpltCallback+0xe0>)
 8002660:	54d1      	strb	r1, [r2, r3]
 8002662:	e005      	b.n	8002670 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 800266a:	4823      	ldr	r0, [pc, #140]	; (80026f8 <HAL_UART_RxCpltCallback+0xe8>)
 800266c:	f016 fbf8 	bl	8018e60 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002670:	2201      	movs	r2, #1
 8002672:	491e      	ldr	r1, [pc, #120]	; (80026ec <HAL_UART_RxCpltCallback+0xdc>)
 8002674:	481b      	ldr	r0, [pc, #108]	; (80026e4 <HAL_UART_RxCpltCallback+0xd4>)
 8002676:	f006 fa14 	bl	8008aa2 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <HAL_UART_RxCpltCallback+0xec>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12c      	bne.n	80026dc <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <HAL_UART_RxCpltCallback+0xf0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b27      	cmp	r3, #39	; 0x27
 8002688:	dc1d      	bgt.n	80026c6 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_UART_RxCpltCallback+0xf4>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b0a      	cmp	r3, #10
 8002690:	d003      	beq.n	800269a <HAL_UART_RxCpltCallback+0x8a>
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_UART_RxCpltCallback+0xf4>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b0d      	cmp	r3, #13
 8002698:	d10b      	bne.n	80026b2 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_UART_RxCpltCallback+0xd8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_UART_RxCpltCallback+0xf8>)
 80026a0:	2100      	movs	r1, #0
 80026a2:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_UART_RxCpltCallback+0xfc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_UART_RxCpltCallback+0xf0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e00f      	b.n	80026d2 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_UART_RxCpltCallback+0xf0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	4911      	ldr	r1, [pc, #68]	; (8002700 <HAL_UART_RxCpltCallback+0xf0>)
 80026ba:	600a      	str	r2, [r1, #0]
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_UART_RxCpltCallback+0xf4>)
 80026be:	7811      	ldrb	r1, [r2, #0]
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_UART_RxCpltCallback+0xf8>)
 80026c2:	54d1      	strb	r1, [r2, r3]
 80026c4:	e005      	b.n	80026d2 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_UART_RxCpltCallback+0xf0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 80026cc:	4810      	ldr	r0, [pc, #64]	; (8002710 <HAL_UART_RxCpltCallback+0x100>)
 80026ce:	f016 fbc7 	bl	8018e60 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80026d2:	2201      	movs	r2, #1
 80026d4:	490b      	ldr	r1, [pc, #44]	; (8002704 <HAL_UART_RxCpltCallback+0xf4>)
 80026d6:	4809      	ldr	r0, [pc, #36]	; (80026fc <HAL_UART_RxCpltCallback+0xec>)
 80026d8:	f006 f9e3 	bl	8008aa2 <HAL_UART_Receive_IT>
	}
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000550 	.word	0x20000550
 80026e8:	20000b80 	.word	0x20000b80
 80026ec:	20000af8 	.word	0x20000af8
 80026f0:	20000b58 	.word	0x20000b58
 80026f4:	20000b84 	.word	0x20000b84
 80026f8:	0801a1dc 	.word	0x0801a1dc
 80026fc:	20000594 	.word	0x20000594
 8002700:	20000bb0 	.word	0x20000bb0
 8002704:	20000af9 	.word	0x20000af9
 8002708:	20000b88 	.word	0x20000b88
 800270c:	20000bb4 	.word	0x20000bb4
 8002710:	0801a1f4 	.word	0x0801a1f4

08002714 <pc_command_processing>:

void pc_command_processing(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002718:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <pc_command_processing+0x104>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d079      	beq.n	8002814 <pc_command_processing+0x100>
	{
		newline_detect_flag=0;
 8002720:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <pc_command_processing+0x104>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 8002726:	483d      	ldr	r0, [pc, #244]	; (800281c <pc_command_processing+0x108>)
 8002728:	f016 fb9a 	bl	8018e60 <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800272c:	220a      	movs	r2, #10
 800272e:	493c      	ldr	r1, [pc, #240]	; (8002820 <pc_command_processing+0x10c>)
 8002730:	483a      	ldr	r0, [pc, #232]	; (800281c <pc_command_processing+0x108>)
 8002732:	f016 fcb8 	bl	80190a6 <strncmp>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <pc_command_processing+0x2e>
		{
			led_all_on();
 800273c:	f7fe fa96 	bl	8000c6c <led_all_on>
			return;
 8002740:	e068      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002742:	220b      	movs	r2, #11
 8002744:	4937      	ldr	r1, [pc, #220]	; (8002824 <pc_command_processing+0x110>)
 8002746:	4835      	ldr	r0, [pc, #212]	; (800281c <pc_command_processing+0x108>)
 8002748:	f016 fcad 	bl	80190a6 <strncmp>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <pc_command_processing+0x44>
		{
			led_all_off();
 8002752:	f7fe fa97 	bl	8000c84 <led_all_off>
			return;
 8002756:	e05d      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002758:	220b      	movs	r2, #11
 800275a:	4933      	ldr	r1, [pc, #204]	; (8002828 <pc_command_processing+0x114>)
 800275c:	482f      	ldr	r0, [pc, #188]	; (800281c <pc_command_processing+0x108>)
 800275e:	f016 fca2 	bl	80190a6 <strncmp>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <pc_command_processing+0x5a>
		{
			led_on_down();
 8002768:	f7fe fa50 	bl	8000c0c <led_on_down>
			return;
 800276c:	e052      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800276e:	2209      	movs	r2, #9
 8002770:	492e      	ldr	r1, [pc, #184]	; (800282c <pc_command_processing+0x118>)
 8002772:	482a      	ldr	r0, [pc, #168]	; (800281c <pc_command_processing+0x108>)
 8002774:	f016 fc97 	bl	80190a6 <strncmp>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <pc_command_processing+0x70>
		{
			led_on_up();
 800277e:	f7fe fa15 	bl	8000bac <led_on_up>
			return;
 8002782:	e047      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002784:	2209      	movs	r2, #9
 8002786:	492a      	ldr	r1, [pc, #168]	; (8002830 <pc_command_processing+0x11c>)
 8002788:	4824      	ldr	r0, [pc, #144]	; (800281c <pc_command_processing+0x108>)
 800278a:	f016 fc8c 	bl	80190a6 <strncmp>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <pc_command_processing+0x86>
		{
			flower_on();
 8002794:	f7fe f96a 	bl	8000a6c <flower_on>
			return;
 8002798:	e03c      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800279a:	220a      	movs	r2, #10
 800279c:	4925      	ldr	r1, [pc, #148]	; (8002834 <pc_command_processing+0x120>)
 800279e:	481f      	ldr	r0, [pc, #124]	; (800281c <pc_command_processing+0x108>)
 80027a0:	f016 fc81 	bl	80190a6 <strncmp>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <pc_command_processing+0x9c>
		{
			flower_off();
 80027aa:	f7fe f98f 	bl	8000acc <flower_off>
			return;
 80027ae:	e031      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80027b0:	220d      	movs	r2, #13
 80027b2:	4921      	ldr	r1, [pc, #132]	; (8002838 <pc_command_processing+0x124>)
 80027b4:	4819      	ldr	r0, [pc, #100]	; (800281c <pc_command_processing+0x108>)
 80027b6:	f016 fc76 	bl	80190a6 <strncmp>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <pc_command_processing+0xb2>
		{
			led_keepon_up();
 80027c0:	f7fe f9b4 	bl	8000b2c <led_keepon_up>
			return;
 80027c4:	e026      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80027c6:	220f      	movs	r2, #15
 80027c8:	491c      	ldr	r1, [pc, #112]	; (800283c <pc_command_processing+0x128>)
 80027ca:	4814      	ldr	r0, [pc, #80]	; (800281c <pc_command_processing+0x108>)
 80027cc:	f016 fc6b 	bl	80190a6 <strncmp>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <pc_command_processing+0xc8>
		{
			led_keepon_down();
 80027d6:	f7fe f9c9 	bl	8000b6c <led_keepon_down>
			return;
 80027da:	e01b      	b.n	8002814 <pc_command_processing+0x100>
		}
		//dht11time150
		if (!strncmp(rx_buff, "dht11time", strlen("dht11time")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80027dc:	2209      	movs	r2, #9
 80027de:	4918      	ldr	r1, [pc, #96]	; (8002840 <pc_command_processing+0x12c>)
 80027e0:	480e      	ldr	r0, [pc, #56]	; (800281c <pc_command_processing+0x108>)
 80027e2:	f016 fc60 	bl	80190a6 <strncmp>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <pc_command_processing+0xe8>
		{
			dht11time = atoi(rx_buff+9);
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <pc_command_processing+0x130>)
 80027ee:	4618      	mov	r0, r3
 80027f0:	f016 f8ba 	bl	8018968 <atoi>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <pc_command_processing+0x134>)
 80027f8:	6013      	str	r3, [r2, #0]
			return;
 80027fa:	e00b      	b.n	8002814 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "setrtc", strlen("setrtc")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80027fc:	2206      	movs	r2, #6
 80027fe:	4913      	ldr	r1, [pc, #76]	; (800284c <pc_command_processing+0x138>)
 8002800:	4806      	ldr	r0, [pc, #24]	; (800281c <pc_command_processing+0x108>)
 8002802:	f016 fc50 	bl	80190a6 <strncmp>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <pc_command_processing+0x100>
		{
			set_rtc(rx_buff);
 800280c:	4803      	ldr	r0, [pc, #12]	; (800281c <pc_command_processing+0x108>)
 800280e:	f7fe f88b 	bl	8000928 <set_rtc>
			return;
 8002812:	bf00      	nop
		}

	}
}
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000b84 	.word	0x20000b84
 800281c:	20000b58 	.word	0x20000b58
 8002820:	0801a210 	.word	0x0801a210
 8002824:	0801a21c 	.word	0x0801a21c
 8002828:	0801a228 	.word	0x0801a228
 800282c:	0801a234 	.word	0x0801a234
 8002830:	0801a240 	.word	0x0801a240
 8002834:	0801a24c 	.word	0x0801a24c
 8002838:	0801a258 	.word	0x0801a258
 800283c:	0801a268 	.word	0x0801a268
 8002840:	0801a278 	.word	0x0801a278
 8002844:	20000b61 	.word	0x20000b61
 8002848:	20000000 	.word	0x20000000
 800284c:	0801a284 	.word	0x0801a284

08002850 <bt_command_processing>:

void bt_command_processing(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002854:	4b31      	ldr	r3, [pc, #196]	; (800291c <bt_command_processing+0xcc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05d      	beq.n	8002918 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 800285c:	4b2f      	ldr	r3, [pc, #188]	; (800291c <bt_command_processing+0xcc>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8002862:	482f      	ldr	r0, [pc, #188]	; (8002920 <bt_command_processing+0xd0>)
 8002864:	f016 fafc 	bl	8018e60 <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002868:	220a      	movs	r2, #10
 800286a:	492e      	ldr	r1, [pc, #184]	; (8002924 <bt_command_processing+0xd4>)
 800286c:	482c      	ldr	r0, [pc, #176]	; (8002920 <bt_command_processing+0xd0>)
 800286e:	f016 fc1a 	bl	80190a6 <strncmp>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <bt_command_processing+0x2e>
		{
			led_all_on();
 8002878:	f7fe f9f8 	bl	8000c6c <led_all_on>
			return;
 800287c:	e04c      	b.n	8002918 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800287e:	220b      	movs	r2, #11
 8002880:	4929      	ldr	r1, [pc, #164]	; (8002928 <bt_command_processing+0xd8>)
 8002882:	4827      	ldr	r0, [pc, #156]	; (8002920 <bt_command_processing+0xd0>)
 8002884:	f016 fc0f 	bl	80190a6 <strncmp>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <bt_command_processing+0x44>
		{
			led_all_off();
 800288e:	f7fe f9f9 	bl	8000c84 <led_all_off>
			return;
 8002892:	e041      	b.n	8002918 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002894:	220b      	movs	r2, #11
 8002896:	4925      	ldr	r1, [pc, #148]	; (800292c <bt_command_processing+0xdc>)
 8002898:	4821      	ldr	r0, [pc, #132]	; (8002920 <bt_command_processing+0xd0>)
 800289a:	f016 fc04 	bl	80190a6 <strncmp>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <bt_command_processing+0x5a>
		{
			led_on_down();
 80028a4:	f7fe f9b2 	bl	8000c0c <led_on_down>
			return;
 80028a8:	e036      	b.n	8002918 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80028aa:	2209      	movs	r2, #9
 80028ac:	4920      	ldr	r1, [pc, #128]	; (8002930 <bt_command_processing+0xe0>)
 80028ae:	481c      	ldr	r0, [pc, #112]	; (8002920 <bt_command_processing+0xd0>)
 80028b0:	f016 fbf9 	bl	80190a6 <strncmp>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <bt_command_processing+0x70>
		{
			led_on_up();
 80028ba:	f7fe f977 	bl	8000bac <led_on_up>
			return;
 80028be:	e02b      	b.n	8002918 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80028c0:	2209      	movs	r2, #9
 80028c2:	491c      	ldr	r1, [pc, #112]	; (8002934 <bt_command_processing+0xe4>)
 80028c4:	4816      	ldr	r0, [pc, #88]	; (8002920 <bt_command_processing+0xd0>)
 80028c6:	f016 fbee 	bl	80190a6 <strncmp>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <bt_command_processing+0x86>
		{
			flower_on();
 80028d0:	f7fe f8cc 	bl	8000a6c <flower_on>
			return;
 80028d4:	e020      	b.n	8002918 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80028d6:	220a      	movs	r2, #10
 80028d8:	4917      	ldr	r1, [pc, #92]	; (8002938 <bt_command_processing+0xe8>)
 80028da:	4811      	ldr	r0, [pc, #68]	; (8002920 <bt_command_processing+0xd0>)
 80028dc:	f016 fbe3 	bl	80190a6 <strncmp>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <bt_command_processing+0x9c>
		{
			flower_off();
 80028e6:	f7fe f8f1 	bl	8000acc <flower_off>
			return;
 80028ea:	e015      	b.n	8002918 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80028ec:	220d      	movs	r2, #13
 80028ee:	4913      	ldr	r1, [pc, #76]	; (800293c <bt_command_processing+0xec>)
 80028f0:	480b      	ldr	r0, [pc, #44]	; (8002920 <bt_command_processing+0xd0>)
 80028f2:	f016 fbd8 	bl	80190a6 <strncmp>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <bt_command_processing+0xb2>
		{
			led_keepon_up();
 80028fc:	f7fe f916 	bl	8000b2c <led_keepon_up>
			return;
 8002900:	e00a      	b.n	8002918 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002902:	220f      	movs	r2, #15
 8002904:	490e      	ldr	r1, [pc, #56]	; (8002940 <bt_command_processing+0xf0>)
 8002906:	4806      	ldr	r0, [pc, #24]	; (8002920 <bt_command_processing+0xd0>)
 8002908:	f016 fbcd 	bl	80190a6 <strncmp>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <bt_command_processing+0xc8>
		{
			led_keepon_down();
 8002912:	f7fe f92b 	bl	8000b6c <led_keepon_down>
			return;
 8002916:	bf00      	nop
		}
	}
}
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000bb4 	.word	0x20000bb4
 8002920:	20000b88 	.word	0x20000b88
 8002924:	0801a210 	.word	0x0801a210
 8002928:	0801a21c 	.word	0x0801a21c
 800292c:	0801a228 	.word	0x0801a228
 8002930:	0801a234 	.word	0x0801a234
 8002934:	0801a240 	.word	0x0801a240
 8002938:	0801a24c 	.word	0x0801a24c
 800293c:	0801a258 	.word	0x0801a258
 8002940:	0801a268 	.word	0x0801a268

08002944 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11f      	bne.n	8002996 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x60>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 800296e:	e012      	b.n	8002996 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d10d      	bne.n	8002996 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x60>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002980:	2100      	movs	r1, #0
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f005 fa82 	bl	8007e8c <HAL_TIM_ReadCapturedValue>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x64>)
 800298e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x68>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40000400 	.word	0x40000400
 80029a4:	20000bc0 	.word	0x20000bc0
 80029a8:	20000bb8 	.word	0x20000bb8
 80029ac:	20000bbc 	.word	0x20000bbc

080029b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029b4:	480d      	ldr	r0, [pc, #52]	; (80029ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029b6:	490e      	ldr	r1, [pc, #56]	; (80029f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029cc:	4c0b      	ldr	r4, [pc, #44]	; (80029fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029da:	f7ff fe07 	bl	80025ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029de:	f016 f8bd 	bl	8018b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e2:	f7fe f9d3 	bl	8000d8c <main>
  bx  lr    
 80029e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80029ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80029f4:	0801d1d0 	.word	0x0801d1d0
  ldr r2, =_sbss
 80029f8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80029fc:	2000daf8 	.word	0x2000daf8

08002a00 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <CAN1_RX0_IRQHandler>

08002a02 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <LAN8742_RegisterBusIO+0x28>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <LAN8742_RegisterBusIO+0x28>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <LAN8742_RegisterBusIO+0x28>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	e014      	b.n	8002a5a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d17c      	bne.n	8002b80 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e01c      	b.n	8002ada <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f107 0208 	add.w	r2, r7, #8
 8002aa8:	2112      	movs	r1, #18
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	4798      	blx	r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da03      	bge.n	8002abc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002ab4:	f06f 0304 	mvn.w	r3, #4
 8002ab8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002aba:	e00b      	b.n	8002ad4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d105      	bne.n	8002ad4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
         break;
 8002ad2:	e005      	b.n	8002ae0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b1f      	cmp	r3, #31
 8002ade:	d9df      	bls.n	8002aa0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b1f      	cmp	r3, #31
 8002ae6:	d902      	bls.n	8002aee <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002ae8:	f06f 0302 	mvn.w	r3, #2
 8002aec:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d145      	bne.n	8002b80 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6810      	ldr	r0, [r2, #0]
 8002afc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b00:	2100      	movs	r1, #0
 8002b02:	4798      	blx	r3
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db37      	blt.n	8002b7a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6810      	ldr	r0, [r2, #0]
 8002b12:	f107 0208 	add.w	r2, r7, #8
 8002b16:	2100      	movs	r1, #0
 8002b18:	4798      	blx	r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db28      	blt.n	8002b72 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4798      	blx	r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002b2a:	e01c      	b.n	8002b66 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4798      	blx	r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b3e:	d80e      	bhi.n	8002b5e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6810      	ldr	r0, [r2, #0]
 8002b48:	f107 0208 	add.w	r2, r7, #8
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4798      	blx	r3
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da07      	bge.n	8002b66 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002b56:	f06f 0304 	mvn.w	r3, #4
 8002b5a:	613b      	str	r3, [r7, #16]
                 break;
 8002b5c:	e010      	b.n	8002b80 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002b5e:	f06f 0301 	mvn.w	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
               break;
 8002b64:	e00c      	b.n	8002b80 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1dd      	bne.n	8002b2c <LAN8742_Init+0xc6>
 8002b70:	e006      	b.n	8002b80 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002b72:	f06f 0304 	mvn.w	r3, #4
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e002      	b.n	8002b80 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002b7a:	f06f 0303 	mvn.w	r3, #3
 8002b7e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d112      	bne.n	8002bac <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4798      	blx	r3
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002b90:	bf00      	nop
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	4798      	blx	r3
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ba4:	d9f5      	bls.n	8002b92 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002bac:	693b      	ldr	r3, [r7, #16]
 }
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6810      	ldr	r0, [r2, #0]
 8002bca:	f107 020c 	add.w	r2, r7, #12
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4798      	blx	r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da02      	bge.n	8002bde <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002bd8:	f06f 0304 	mvn.w	r3, #4
 8002bdc:	e06e      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6810      	ldr	r0, [r2, #0]
 8002be6:	f107 020c 	add.w	r2, r7, #12
 8002bea:	2101      	movs	r1, #1
 8002bec:	4798      	blx	r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da02      	bge.n	8002bfa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002bf4:	f06f 0304 	mvn.w	r3, #4
 8002bf8:	e060      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002c04:	2301      	movs	r3, #1
 8002c06:	e059      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6810      	ldr	r0, [r2, #0]
 8002c10:	f107 020c 	add.w	r2, r7, #12
 8002c14:	2100      	movs	r1, #0
 8002c16:	4798      	blx	r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da02      	bge.n	8002c24 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002c1e:	f06f 0304 	mvn.w	r3, #4
 8002c22:	e04b      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11b      	bne.n	8002c66 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <LAN8742_GetLinkState+0x90>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002c42:	2302      	movs	r3, #2
 8002c44:	e03a      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e033      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e02c      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002c62:	2305      	movs	r3, #5
 8002c64:	e02a      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6810      	ldr	r0, [r2, #0]
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	211f      	movs	r1, #31
 8002c74:	4798      	blx	r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da02      	bge.n	8002c82 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002c7c:	f06f 0304 	mvn.w	r3, #4
 8002c80:	e01c      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	e015      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 031c 	and.w	r3, r3, #28
 8002c96:	2b18      	cmp	r3, #24
 8002c98:	d101      	bne.n	8002c9e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e00e      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 031c 	and.w	r3, r3, #28
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d101      	bne.n	8002cac <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e007      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 031c 	and.w	r3, r3, #28
 8002cb2:	2b14      	cmp	r3, #20
 8002cb4:	d101      	bne.n	8002cba <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e000      	b.n	8002cbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002cba:	2305      	movs	r3, #5
    }				
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_Init+0x40>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_Init+0x40>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_Init+0x40>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f000 fd88 	bl	8003802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf2:	200f      	movs	r0, #15
 8002cf4:	f7ff fa90 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf8:	f7fe ff66 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x20>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_IncTick+0x24>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_IncTick+0x24>)
 8002d1a:	6013      	str	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000074 	.word	0x20000074
 8002d2c:	20000bc4 	.word	0x20000bc4

08002d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_GetTick+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000bc4 	.word	0x20000bc4

08002d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff ffee 	bl	8002d30 <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d005      	beq.n	8002d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_Delay+0x44>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d6e:	bf00      	nop
 8002d70:	f7ff ffde 	bl	8002d30 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d8f7      	bhi.n	8002d70 <HAL_Delay+0x28>
  {
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000074 	.word	0x20000074

08002d90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e033      	b.n	8002e0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe ff36 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dd6:	f023 0302 	bic.w	r3, r3, #2
 8002dda:	f043 0202 	orr.w	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fb5a 	bl	800349c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dfe:	e001      	b.n	8002e04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Start_IT+0x1a>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e0bd      	b.n	8002fae <HAL_ADC_Start_IT+0x196>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d018      	beq.n	8002e7a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_ADC_Start_IT+0x1a4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_ADC_Start_IT+0x1a8>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0c9a      	lsrs	r2, r3, #18
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f9      	bne.n	8002e6e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f040 8085 	bne.w	8002f94 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec8:	d106      	bne.n	8002ed8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f023 0206 	bic.w	r2, r3, #6
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ed6:	e002      	b.n	8002ede <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_ADC_Start_IT+0x1ac>)
 8002ee8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ef2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d12a      	bne.n	8002f6a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <HAL_ADC_Start_IT+0x1b0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d015      	beq.n	8002f4a <HAL_ADC_Start_IT+0x132>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_ADC_Start_IT+0x1b4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_Start_IT+0x11c>
 8002f28:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_ADC_Start_IT+0x1ac>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <HAL_ADC_Start_IT+0x1b8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d136      	bne.n	8002fac <HAL_ADC_Start_IT+0x194>
 8002f3e:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_ADC_Start_IT+0x1ac>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d130      	bne.n	8002fac <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d129      	bne.n	8002fac <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e020      	b.n	8002fac <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_ADC_Start_IT+0x1b0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d11b      	bne.n	8002fac <HAL_ADC_Start_IT+0x194>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d114      	bne.n	8002fac <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	e00b      	b.n	8002fac <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0210 	orr.w	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000006c 	.word	0x2000006c
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	40012000 	.word	0x40012000
 8002fcc:	40012100 	.word	0x40012100
 8002fd0:	40012200 	.word	0x40012200

08002fd4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d049      	beq.n	800309e <HAL_ADC_IRQHandler+0xca>
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d046      	beq.n	800309e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d12b      	bne.n	800308e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800303a:	2b00      	cmp	r3, #0
 800303c:	d127      	bne.n	800308e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0220 	bic.w	r2, r2, #32
 8003068:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fe5e 	bl	8000d50 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0212 	mvn.w	r2, #18
 800309c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d057      	beq.n	8003164 <HAL_ADC_IRQHandler+0x190>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d054      	beq.n	8003164 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d105      	bne.n	80030d2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d139      	bne.n	8003154 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d12b      	bne.n	8003154 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003106:	2b00      	cmp	r3, #0
 8003108:	d124      	bne.n	8003154 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d119      	bne.n	8003154 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800312e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fa9d 	bl	8003694 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 020c 	mvn.w	r2, #12
 8003162:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d017      	beq.n	80031aa <HAL_ADC_IRQHandler+0x1d6>
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d014      	beq.n	80031aa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d10d      	bne.n	80031aa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f837 	bl	800320e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0201 	mvn.w	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031b8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <HAL_ADC_IRQHandler+0x218>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0220 	mvn.w	r2, #32
 80031da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f820 	bl	8003222 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f06f 0220 	mvn.w	r2, #32
 80031ea:	601a      	str	r2, [r3, #0]
  }
}
 80031ec:	bf00      	nop
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e113      	b.n	800347c <HAL_ADC_ConfigChannel+0x244>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b09      	cmp	r3, #9
 8003262:	d925      	bls.n	80032b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68d9      	ldr	r1, [r3, #12]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	3b1e      	subs	r3, #30
 800327a:	2207      	movs	r2, #7
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43da      	mvns	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	400a      	ands	r2, r1
 8003288:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68d9      	ldr	r1, [r3, #12]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	4618      	mov	r0, r3
 800329c:	4603      	mov	r3, r0
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4403      	add	r3, r0
 80032a2:	3b1e      	subs	r3, #30
 80032a4:	409a      	lsls	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	e022      	b.n	80032f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6919      	ldr	r1, [r3, #16]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	2207      	movs	r2, #7
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	400a      	ands	r2, r1
 80032d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6919      	ldr	r1, [r3, #16]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4618      	mov	r0, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4403      	add	r3, r0
 80032ec:	409a      	lsls	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d824      	bhi.n	8003348 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b05      	subs	r3, #5
 8003310:	221f      	movs	r2, #31
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b05      	subs	r3, #5
 800333a:	fa00 f203 	lsl.w	r2, r0, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	635a      	str	r2, [r3, #52]	; 0x34
 8003346:	e04c      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d824      	bhi.n	800339a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	3b23      	subs	r3, #35	; 0x23
 8003362:	221f      	movs	r2, #31
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43da      	mvns	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	400a      	ands	r2, r1
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	4618      	mov	r0, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	3b23      	subs	r3, #35	; 0x23
 800338c:	fa00 f203 	lsl.w	r2, r0, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
 8003398:	e023      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	3b41      	subs	r3, #65	; 0x41
 80033ac:	221f      	movs	r2, #31
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	400a      	ands	r2, r1
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b41      	subs	r3, #65	; 0x41
 80033d6:	fa00 f203 	lsl.w	r2, r0, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_ADC_ConfigChannel+0x250>)
 80033e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_ADC_ConfigChannel+0x254>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10f      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x1d8>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b12      	cmp	r3, #18
 80033f6:	d10b      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_ADC_ConfigChannel+0x254>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d12b      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x23a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <HAL_ADC_ConfigChannel+0x258>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <HAL_ADC_ConfigChannel+0x1f4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b11      	cmp	r3, #17
 800342a:	d122      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <HAL_ADC_ConfigChannel+0x258>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d111      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_ADC_ConfigChannel+0x25c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a11      	ldr	r2, [pc, #68]	; (8003498 <HAL_ADC_ConfigChannel+0x260>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	0c9a      	lsrs	r2, r3, #18
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003464:	e002      	b.n	800346c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012300 	.word	0x40012300
 800348c:	40012000 	.word	0x40012000
 8003490:	10000012 	.word	0x10000012
 8003494:	2000006c 	.word	0x2000006c
 8003498:	431bde83 	.word	0x431bde83

0800349c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034a4:	4b79      	ldr	r3, [pc, #484]	; (800368c <ADC_Init+0x1f0>)
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	021a      	lsls	r2, r3, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	4a58      	ldr	r2, [pc, #352]	; (8003690 <ADC_Init+0x1f4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d022      	beq.n	800357a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003542:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6899      	ldr	r1, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	e00f      	b.n	800359a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003588:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003598:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0202 	bic.w	r2, r2, #2
 80035a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7e1b      	ldrb	r3, [r3, #24]
 80035b4:	005a      	lsls	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01b      	beq.n	8003600 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	3b01      	subs	r3, #1
 80035f4:	035a      	lsls	r2, r3, #13
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	e007      	b.n	8003610 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	3b01      	subs	r3, #1
 800362c:	051a      	lsls	r2, r3, #20
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003652:	025a      	lsls	r2, r3, #9
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	029a      	lsls	r2, r3, #10
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40012300 	.word	0x40012300
 8003690:	0f000001 	.word	0x0f000001

08003694 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db0b      	blt.n	8003736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4907      	ldr	r1, [pc, #28]	; (8003744 <__NVIC_EnableIRQ+0x38>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2001      	movs	r0, #1
 800372e:	fa00 f202 	lsl.w	r2, r0, r2
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000e100 	.word	0xe000e100

08003748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	6039      	str	r1, [r7, #0]
 8003752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	2b00      	cmp	r3, #0
 800375a:	db0a      	blt.n	8003772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	490c      	ldr	r1, [pc, #48]	; (8003794 <__NVIC_SetPriority+0x4c>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	440b      	add	r3, r1
 800376c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003770:	e00a      	b.n	8003788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4908      	ldr	r1, [pc, #32]	; (8003798 <__NVIC_SetPriority+0x50>)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3b04      	subs	r3, #4
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	440b      	add	r3, r1
 8003786:	761a      	strb	r2, [r3, #24]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f1c3 0307 	rsb	r3, r3, #7
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	bf28      	it	cs
 80037ba:	2304      	movcs	r3, #4
 80037bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d902      	bls.n	80037cc <NVIC_EncodePriority+0x30>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3b03      	subs	r3, #3
 80037ca:	e000      	b.n	80037ce <NVIC_EncodePriority+0x32>
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	f04f 32ff 	mov.w	r2, #4294967295
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	401a      	ands	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e4:	f04f 31ff 	mov.w	r1, #4294967295
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43d9      	mvns	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	4313      	orrs	r3, r2
         );
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ff4c 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800382a:	f7ff ff61 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 800382e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f7ff ffb1 	bl	800379c <NVIC_EncodePriority>
 800383a:	4602      	mov	r2, r0
 800383c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff80 	bl	8003748 <__NVIC_SetPriority>
}
 8003848:	bf00      	nop
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff54 	bl	800370c <__NVIC_EnableIRQ>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800387a:	f7ff fa59 	bl	8002d30 <HAL_GetTick>
 800387e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d008      	beq.n	800389e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e052      	b.n	8003944 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0216 	bic.w	r2, r2, #22
 80038ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_DMA_Abort+0x62>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0208 	bic.w	r2, r2, #8
 80038dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ee:	e013      	b.n	8003918 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038f0:	f7ff fa1e 	bl	8002d30 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d90c      	bls.n	8003918 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2203      	movs	r2, #3
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e015      	b.n	8003944 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e4      	bne.n	80038f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	223f      	movs	r2, #63	; 0x3f
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d004      	beq.n	800396a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e00c      	b.n	8003984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2205      	movs	r2, #5
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06c      	b.n	8003a7c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2223      	movs	r2, #35	; 0x23
 80039b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f006 ff05 	bl	800a7c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <HAL_ETH_Init+0xf4>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <HAL_ETH_Init+0xf4>)
 80039c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <HAL_ETH_Init+0xf4>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80039d6:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <HAL_ETH_Init+0xf8>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <HAL_ETH_Init+0xf8>)
 80039dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_ETH_Init+0xf8>)
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4927      	ldr	r1, [pc, #156]	; (8003a88 <HAL_ETH_Init+0xf8>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_ETH_Init+0xf8>)
 80039f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a0c:	f7ff f990 	bl	8002d30 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a12:	e011      	b.n	8003a38 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a14:	f7ff f98c 	bl	8002d30 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a22:	d909      	bls.n	8003a38 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2204      	movs	r2, #4
 8003a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	22e0      	movs	r2, #224	; 0xe0
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e021      	b.n	8003a7c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e4      	bne.n	8003a14 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 ff4a 	bl	80048e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fff1 	bl	8004a38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f001 f847 	bl	8004aea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	461a      	mov	r2, r3
 8003a62:	2100      	movs	r1, #0
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 ffaf 	bl	80049c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2210      	movs	r2, #16
 8003a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40013800 	.word	0x40013800

08003a8c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d17f      	bne.n	8003b9e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2223      	movs	r2, #35	; 0x23
 8003aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003acc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ad0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003ae4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2204      	movs	r2, #4
 8003aec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9f8 	bl	8003ee4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0208 	orr.w	r2, r2, #8
 8003b02:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f7ff f91b 	bl	8002d48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0204 	orr.w	r2, r2, #4
 8003b28:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b32:	2001      	movs	r0, #1
 8003b34:	f7ff f908 	bl	8002d48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fd70 	bl	8004626 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b5c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b74:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8003b88:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8003b8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b90:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2223      	movs	r2, #35	; 0x23
 8003b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	2b23      	cmp	r3, #35	; 0x23
 8003bb8:	d170      	bne.n	8003c9c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2223      	movs	r2, #35	; 0x23
 8003bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8003bd4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8003bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bdc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bf4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	f023 0302 	bic.w	r3, r3, #2
 8003c08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c0c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0204 	bic.w	r2, r2, #4
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c26:	2001      	movs	r0, #1
 8003c28:	f7ff f88e 	bl	8002d48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fcf6 	bl	8004626 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0208 	bic.w	r2, r2, #8
 8003c48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f7ff f878 	bl	8002d48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e00e      	b.n	8003c84 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	3212      	adds	r2, #18
 8003c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c70:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d9ed      	bls.n	8003c66 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2210      	movs	r2, #16
 8003c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e045      	b.n	8003d56 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd0:	2b23      	cmp	r3, #35	; 0x23
 8003cd2:	d13f      	bne.n	8003d54 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 ff6f 	bl	8004bc4 <ETH_Prepare_Tx_Descriptors>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f043 0202 	orr.w	r2, r3, #2
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e02a      	b.n	8003d56 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d00:	f3bf 8f4f 	dsb	sy
}
 8003d04:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d904      	bls.n	8003d22 <HAL_ETH_Transmit_IT+0x7c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	1f1a      	subs	r2, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2304      	movs	r3, #4
 8003d40:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b088      	sub	sp, #32
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0a8      	b.n	8003edc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d90:	2b23      	cmp	r3, #35	; 0x23
 8003d92:	d001      	beq.n	8003d98 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0a1      	b.n	8003edc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	3212      	adds	r2, #18
 8003da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	f1c3 0304 	rsb	r3, r3, #4
 8003db2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003db4:	e06a      	b.n	8003e8c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <HAL_ETH_ReadData+0x88>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d040      	beq.n	8003e68 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00c      	beq.n	8003e2a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003e42:	461a      	mov	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f006 fe9e 	bl	800ab88 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2200      	movs	r2, #0
 8003e66:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d902      	bls.n	8003e7a <HAL_ETH_ReadData+0x11c>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3b04      	subs	r3, #4
 8003e78:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	3212      	adds	r2, #18
 8003e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e84:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	db06      	blt.n	8003ea2 <HAL_ETH_ReadData+0x144>
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d202      	bcs.n	8003ea2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d089      	beq.n	8003db6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f814 	bl	8003ee4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d108      	bne.n	8003eda <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	3212      	adds	r2, #18
 8003f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f04:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003f0c:	e040      	b.n	8003f90 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d112      	bne.n	8003f3c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f006 fe04 	bl	800ab28 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	74fb      	strb	r3, [r7, #19]
 8003f2a:	e007      	b.n	8003f3c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d026      	beq.n	8003f90 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <ETH_UpdateDescriptor+0xe4>)
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	e003      	b.n	8003f5a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003f58:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003f5a:	f3bf 8f5f 	dmb	sy
}
 8003f5e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d902      	bls.n	8003f7e <ETH_UpdateDescriptor+0x9a>
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	3212      	adds	r2, #18
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	617b      	str	r3, [r7, #20]
      desccount--;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <ETH_UpdateDescriptor+0xb8>
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1b8      	bne.n	8003f0e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d00c      	beq.n	8003fc0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	80004600 	.word	0x80004600

08003fcc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3318      	adds	r3, #24
 8003fd8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003fea:	e03f      	b.n	800406c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004014:	7bbb      	ldrb	r3, [r7, #14]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d028      	beq.n	800406c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68d9      	ldr	r1, [r3, #12]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db1b      	blt.n	8004068 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3304      	adds	r3, #4
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4618      	mov	r0, r3
 800403e:	f006 fde3 	bl	800ac08 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3304      	adds	r3, #4
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	2200      	movs	r2, #0
 800404e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	3301      	adds	r3, #1
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c
 8004066:	e001      	b.n	800406c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_ETH_ReleaseTxPacket+0xac>
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1b9      	bne.n	8003fec <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d112      	bne.n	80040c4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d109      	bne.n	80040c4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_ETH_IRQHandler+0x178>)
 80040bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f006 f8e2 	bl	800a288 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d113      	bne.n	80040fe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10a      	bne.n	80040fe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f0:	461a      	mov	r2, r3
 80040f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80040f6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f006 f8d5 	bl	800a2a8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004110:	d14c      	bne.n	80041ac <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004124:	d142      	bne.n	80041ac <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f043 0208 	orr.w	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004148:	d11a      	bne.n	8004180 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <HAL_ETH_IRQHandler+0x17c>)
 8004156:	4013      	ands	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004170:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004174:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	22e0      	movs	r2, #224	; 0xe0
 800417a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800417e:	e012      	b.n	80041a6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	f248 6380 	movw	r3, #34432	; 0x8680
 800418e:	4013      	ands	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	461a      	mov	r2, r3
 80041a0:	f248 6380 	movw	r3, #34432	; 0x8680
 80041a4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f006 f88e 	bl	800a2c8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d10e      	bne.n	80041d8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f81c 	bl	8004208 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_ETH_IRQHandler+0x180>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_ETH_IRQHandler+0x180>)
 80041e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041ea:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f815 	bl	800421c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	00010040 	.word	0x00010040
 8004200:	007e2000 	.word	0x007e2000
 8004204:	40013c00 	.word	0x40013c00

08004208 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 031c 	and.w	r3, r3, #28
 800424c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	02db      	lsls	r3, r3, #11
 8004252:	b29b      	uxth	r3, r3
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0302 	bic.w	r3, r3, #2
 800426e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004280:	f7fe fd56 	bl	8002d30 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004286:	e00d      	b.n	80042a4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004288:	f7fe fd52 	bl	8002d30 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d301      	bcc.n	800429c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e010      	b.n	80042be <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ec      	bne.n	8004288 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 031c 	and.w	r3, r3, #28
 80042e2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	02db      	lsls	r3, r3, #11
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	019b      	lsls	r3, r3, #6
 80042f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004320:	f7fe fd06 	bl	8002d30 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004326:	e00d      	b.n	8004344 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004328:	f7fe fd02 	bl	8002d30 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004336:	d301      	bcc.n	800433c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e009      	b.n	8004350 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ec      	bne.n	8004328 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0d9      	b.n	8004520 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e00b      	b.n	8004558 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004546:	2b10      	cmp	r3, #16
 8004548:	d105      	bne.n	8004556 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f88f 	bl	8004670 <ETH_SetMACConfig>

    return HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e000      	b.n	8004558 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
  }
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 031c 	bic.w	r3, r3, #28
 8004576:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004578:	f002 f89a 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 800457c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d908      	bls.n	8004598 <HAL_ETH_SetMDIOClockRange+0x38>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d804      	bhi.n	8004598 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e027      	b.n	80045e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4a18      	ldr	r2, [pc, #96]	; (80045fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d908      	bls.n	80045b2 <HAL_ETH_SetMDIOClockRange+0x52>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d204      	bcs.n	80045b2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f043 030c 	orr.w	r3, r3, #12
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e01a      	b.n	80045e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d303      	bcc.n	80045c2 <HAL_ETH_SetMDIOClockRange+0x62>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a11      	ldr	r2, [pc, #68]	; (8004604 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d911      	bls.n	80045e6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d908      	bls.n	80045dc <HAL_ETH_SetMDIOClockRange+0x7c>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d804      	bhi.n	80045dc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e005      	b.n	80045e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f043 0310 	orr.w	r3, r3, #16
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e000      	b.n	80045e8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80045e6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	611a      	str	r2, [r3, #16]
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	01312cff 	.word	0x01312cff
 80045fc:	02160ebf 	.word	0x02160ebf
 8004600:	03938700 	.word	0x03938700
 8004604:	05f5e0ff 	.word	0x05f5e0ff
 8004608:	08f0d17f 	.word	0x08f0d17f

0800460c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004644:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004648:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004656:	2001      	movs	r0, #1
 8004658:	f7fe fb76 	bl	8002d48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004666:	6193      	str	r3, [r2, #24]
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4b51      	ldr	r3, [pc, #324]	; (80047cc <ETH_SetMACConfig+0x15c>)
 8004686:	4013      	ands	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	7c1b      	ldrb	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <ETH_SetMACConfig+0x28>
 8004692:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004696:	e000      	b.n	800469a <ETH_SetMACConfig+0x2a>
 8004698:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	7c5b      	ldrb	r3, [r3, #17]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <ETH_SetMACConfig+0x38>
 80046a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046a6:	e000      	b.n	80046aa <ETH_SetMACConfig+0x3a>
 80046a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80046aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80046b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	7fdb      	ldrb	r3, [r3, #31]
 80046b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80046b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80046be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	7f92      	ldrb	r2, [r2, #30]
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	d102      	bne.n	80046ce <ETH_SetMACConfig+0x5e>
 80046c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046cc:	e000      	b.n	80046d0 <ETH_SetMACConfig+0x60>
 80046ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80046d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	7f1b      	ldrb	r3, [r3, #28]
 80046d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80046d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80046de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	791b      	ldrb	r3, [r3, #4]
 80046e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80046e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046ee:	2a00      	cmp	r2, #0
 80046f0:	d102      	bne.n	80046f8 <ETH_SetMACConfig+0x88>
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	e000      	b.n	80046fa <ETH_SetMACConfig+0x8a>
 80046f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80046fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	7bdb      	ldrb	r3, [r3, #15]
 8004700:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004702:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004708:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004710:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004712:	4313      	orrs	r3, r2
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800472a:	2001      	movs	r0, #1
 800472c:	f7fe fb0c 	bl	8002d48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004746:	4013      	ands	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004756:	2a00      	cmp	r2, #0
 8004758:	d101      	bne.n	800475e <ETH_SetMACConfig+0xee>
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	e000      	b.n	8004760 <ETH_SetMACConfig+0xf0>
 800475e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004760:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004766:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800476e:	2a01      	cmp	r2, #1
 8004770:	d101      	bne.n	8004776 <ETH_SetMACConfig+0x106>
 8004772:	2208      	movs	r2, #8
 8004774:	e000      	b.n	8004778 <ETH_SetMACConfig+0x108>
 8004776:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004778:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004780:	2a01      	cmp	r2, #1
 8004782:	d101      	bne.n	8004788 <ETH_SetMACConfig+0x118>
 8004784:	2204      	movs	r2, #4
 8004786:	e000      	b.n	800478a <ETH_SetMACConfig+0x11a>
 8004788:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800478a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004792:	2a01      	cmp	r2, #1
 8004794:	d101      	bne.n	800479a <ETH_SetMACConfig+0x12a>
 8004796:	2202      	movs	r2, #2
 8004798:	e000      	b.n	800479c <ETH_SetMACConfig+0x12c>
 800479a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800479c:	4313      	orrs	r3, r2
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fe fac7 	bl	8002d48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	619a      	str	r2, [r3, #24]
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	ff20810f 	.word	0xff20810f

080047d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <ETH_SetDMAConfig+0x110>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	7b1b      	ldrb	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <ETH_SetDMAConfig+0x2c>
 80047f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80047fa:	e000      	b.n	80047fe <ETH_SetDMAConfig+0x2e>
 80047fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	7b5b      	ldrb	r3, [r3, #13]
 8004802:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004804:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	7f52      	ldrb	r2, [r2, #29]
 800480a:	2a00      	cmp	r2, #0
 800480c:	d102      	bne.n	8004814 <ETH_SetDMAConfig+0x44>
 800480e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004812:	e000      	b.n	8004816 <ETH_SetDMAConfig+0x46>
 8004814:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004816:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	7b9b      	ldrb	r3, [r3, #14]
 800481c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800481e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004824:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	7f1b      	ldrb	r3, [r3, #28]
 800482a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800482c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	7f9b      	ldrb	r3, [r3, #30]
 8004832:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004834:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800483a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004842:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004844:	4313      	orrs	r3, r2
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004854:	461a      	mov	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004866:	2001      	movs	r0, #1
 8004868:	f7fe fa6e 	bl	8002d48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004874:	461a      	mov	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	791b      	ldrb	r3, [r3, #4]
 800487e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004884:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800488a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004890:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004898:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800489a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80048a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80048a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048c4:	2001      	movs	r0, #1
 80048c6:	f7fe fa3f 	bl	8002d48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	f8de3f23 	.word	0xf8de3f23

080048e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b0a6      	sub	sp, #152	; 0x98
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80048f8:	2300      	movs	r3, #0
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800491a:	2300      	movs	r3, #0
 800491c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004920:	2300      	movs	r3, #0
 8004922:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800492a:	2300      	movs	r3, #0
 800492c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004940:	2300      	movs	r3, #0
 8004942:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004946:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800494a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800494c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004950:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004958:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fe86 	bl	8004670 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004964:	2301      	movs	r3, #1
 8004966:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004968:	2301      	movs	r3, #1
 800496a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004972:	2301      	movs	r3, #1
 8004974:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004986:	2300      	movs	r3, #0
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004990:	2301      	movs	r3, #1
 8004992:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004998:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800499a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800499e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80049a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff ff08 	bl	80047d0 <ETH_SetDMAConfig>
}
 80049c0:	bf00      	nop
 80049c2:	3798      	adds	r7, #152	; 0x98
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3305      	adds	r3, #5
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	3204      	adds	r2, #4
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <ETH_MACAddressConfig+0x68>)
 80049ea:	4413      	add	r3, r2
 80049ec:	461a      	mov	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3303      	adds	r3, #3
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	061a      	lsls	r2, r3, #24
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3302      	adds	r3, #2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3301      	adds	r3, #1
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <ETH_MACAddressConfig+0x6c>)
 8004a1a:	4413      	add	r3, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6013      	str	r3, [r2, #0]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40028040 	.word	0x40028040
 8004a34:	40028044 	.word	0x40028044

08004a38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e03e      	b.n	8004ac4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68d9      	ldr	r1, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	3206      	adds	r2, #6
 8004a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d80c      	bhi.n	8004aa8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68d9      	ldr	r1, [r3, #12]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	e004      	b.n	8004ab2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d9bd      	bls.n	8004a46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004adc:	611a      	str	r2, [r3, #16]
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e046      	b.n	8004b86 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6919      	ldr	r1, [r3, #16]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	440b      	add	r3, r1
 8004b08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2200      	movs	r2, #0
 8004b26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004b3c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	3212      	adds	r2, #18
 8004b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d80c      	bhi.n	8004b76 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6919      	ldr	r1, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	60da      	str	r2, [r3, #12]
 8004b74:	e004      	b.n	8004b80 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d9b5      	bls.n	8004af8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb6:	60da      	str	r2, [r3, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b08d      	sub	sp, #52	; 0x34
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3318      	adds	r3, #24
 8004bd4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c06:	d007      	beq.n	8004c18 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e103      	b.n	8004e24 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	3301      	adds	r3, #1
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004c34:	f023 031f 	bic.w	r3, r3, #31
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	6852      	ldr	r2, [r2, #4]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004ca2:	f3bf 8f5f 	dmb	sy
}
 8004ca6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004cb4:	e084      	b.n	8004dc0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e005      	b.n	8004ce2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d902      	bls.n	8004cf4 <ETH_Prepare_Tx_Descriptors+0x130>
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d16:	d007      	beq.n	8004d28 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d029      	beq.n	8004d7c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d34:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3a:	e019      	b.n	8004d70 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8004d3c:	f3bf 8f5f 	dmb	sy
}
 8004d40:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	3301      	adds	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d902      	bls.n	8004d60 <ETH_Prepare_Tx_Descriptors+0x19c>
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	3b04      	subs	r3, #4
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d68:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d3e1      	bcc.n	8004d3c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e053      	b.n	8004e24 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	3301      	adds	r3, #1
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004d9a:	f023 031f 	bic.w	r3, r3, #31
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	6852      	ldr	r2, [r2, #4]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004dae:	f3bf 8f5f 	dmb	sy
}
 8004db2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f af76 	bne.w	8004cb6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d006      	beq.n	8004dde <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e005      	b.n	8004dea <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfa:	6979      	ldr	r1, [r7, #20]
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	3304      	adds	r3, #4
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e0a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e0c:	b672      	cpsid	i
}
 8004e0e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	4413      	add	r3, r2
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004e1e:	b662      	cpsie	i
}
 8004e20:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3734      	adds	r7, #52	; 0x34
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e177      	b.n	800513c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	f040 8166 	bne.w	8005136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d005      	beq.n	8004e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d130      	bne.n	8004ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eb8:	2201      	movs	r2, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 0201 	and.w	r2, r3, #1
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d017      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	2203      	movs	r2, #3
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d123      	bne.n	8004f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	08da      	lsrs	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3208      	adds	r2, #8
 8004f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	220f      	movs	r2, #15
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	08da      	lsrs	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3208      	adds	r2, #8
 8004f6e:	69b9      	ldr	r1, [r7, #24]
 8004f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0203 	and.w	r2, r3, #3
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80c0 	beq.w	8005136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b66      	ldr	r3, [pc, #408]	; (8005154 <HAL_GPIO_Init+0x324>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4a65      	ldr	r2, [pc, #404]	; (8005154 <HAL_GPIO_Init+0x324>)
 8004fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc6:	4b63      	ldr	r3, [pc, #396]	; (8005154 <HAL_GPIO_Init+0x324>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd2:	4a61      	ldr	r2, [pc, #388]	; (8005158 <HAL_GPIO_Init+0x328>)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	3302      	adds	r3, #2
 8004fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <HAL_GPIO_Init+0x32c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d037      	beq.n	800506e <HAL_GPIO_Init+0x23e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a57      	ldr	r2, [pc, #348]	; (8005160 <HAL_GPIO_Init+0x330>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d031      	beq.n	800506a <HAL_GPIO_Init+0x23a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a56      	ldr	r2, [pc, #344]	; (8005164 <HAL_GPIO_Init+0x334>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02b      	beq.n	8005066 <HAL_GPIO_Init+0x236>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a55      	ldr	r2, [pc, #340]	; (8005168 <HAL_GPIO_Init+0x338>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d025      	beq.n	8005062 <HAL_GPIO_Init+0x232>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a54      	ldr	r2, [pc, #336]	; (800516c <HAL_GPIO_Init+0x33c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01f      	beq.n	800505e <HAL_GPIO_Init+0x22e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a53      	ldr	r2, [pc, #332]	; (8005170 <HAL_GPIO_Init+0x340>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d019      	beq.n	800505a <HAL_GPIO_Init+0x22a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_GPIO_Init+0x344>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_GPIO_Init+0x226>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a51      	ldr	r2, [pc, #324]	; (8005178 <HAL_GPIO_Init+0x348>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00d      	beq.n	8005052 <HAL_GPIO_Init+0x222>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a50      	ldr	r2, [pc, #320]	; (800517c <HAL_GPIO_Init+0x34c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <HAL_GPIO_Init+0x21e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a4f      	ldr	r2, [pc, #316]	; (8005180 <HAL_GPIO_Init+0x350>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <HAL_GPIO_Init+0x21a>
 8005046:	2309      	movs	r3, #9
 8005048:	e012      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800504a:	230a      	movs	r3, #10
 800504c:	e010      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800504e:	2308      	movs	r3, #8
 8005050:	e00e      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005052:	2307      	movs	r3, #7
 8005054:	e00c      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005056:	2306      	movs	r3, #6
 8005058:	e00a      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800505a:	2305      	movs	r3, #5
 800505c:	e008      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800505e:	2304      	movs	r3, #4
 8005060:	e006      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005062:	2303      	movs	r3, #3
 8005064:	e004      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005066:	2302      	movs	r3, #2
 8005068:	e002      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800506e:	2300      	movs	r3, #0
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	f002 0203 	and.w	r2, r2, #3
 8005076:	0092      	lsls	r2, r2, #2
 8005078:	4093      	lsls	r3, r2
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005080:	4935      	ldr	r1, [pc, #212]	; (8005158 <HAL_GPIO_Init+0x328>)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	3302      	adds	r3, #2
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800508e:	4b3d      	ldr	r3, [pc, #244]	; (8005184 <HAL_GPIO_Init+0x354>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050b2:	4a34      	ldr	r2, [pc, #208]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050b8:	4b32      	ldr	r3, [pc, #200]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4013      	ands	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050e2:	4b28      	ldr	r3, [pc, #160]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005106:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_GPIO_Init+0x354>)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_GPIO_Init+0x354>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <HAL_GPIO_Init+0x354>)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b0f      	cmp	r3, #15
 8005140:	f67f ae84 	bls.w	8004e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3724      	adds	r7, #36	; 0x24
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	40013800 	.word	0x40013800
 800515c:	40020000 	.word	0x40020000
 8005160:	40020400 	.word	0x40020400
 8005164:	40020800 	.word	0x40020800
 8005168:	40020c00 	.word	0x40020c00
 800516c:	40021000 	.word	0x40021000
 8005170:	40021400 	.word	0x40021400
 8005174:	40021800 	.word	0x40021800
 8005178:	40021c00 	.word	0x40021c00
 800517c:	40022000 	.word	0x40022000
 8005180:	40022400 	.word	0x40022400
 8005184:	40013c00 	.word	0x40013c00

08005188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	807b      	strh	r3, [r7, #2]
 8005194:	4613      	mov	r3, r2
 8005196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005198:	787b      	ldrb	r3, [r7, #1]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051a4:	e003      	b.n	80051ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	041a      	lsls	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	619a      	str	r2, [r3, #24]
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051cc:	887a      	ldrh	r2, [r7, #2]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4013      	ands	r3, r2
 80051d2:	041a      	lsls	r2, r3, #16
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	400b      	ands	r3, r1
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	619a      	str	r2, [r3, #24]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d006      	beq.n	8005214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005206:	4a05      	ldr	r2, [pc, #20]	; (800521c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fb fd6e 	bl	8000cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40013c00 	.word	0x40013c00

08005220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e12b      	b.n	800548a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fd36 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2224      	movs	r2, #36	; 0x24
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005272:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005282:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005284:	f001 fa20 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8005288:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4a81      	ldr	r2, [pc, #516]	; (8005494 <HAL_I2C_Init+0x274>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d807      	bhi.n	80052a4 <HAL_I2C_Init+0x84>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a80      	ldr	r2, [pc, #512]	; (8005498 <HAL_I2C_Init+0x278>)
 8005298:	4293      	cmp	r3, r2
 800529a:	bf94      	ite	ls
 800529c:	2301      	movls	r3, #1
 800529e:	2300      	movhi	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e006      	b.n	80052b2 <HAL_I2C_Init+0x92>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a7d      	ldr	r2, [pc, #500]	; (800549c <HAL_I2C_Init+0x27c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bf94      	ite	ls
 80052ac:	2301      	movls	r3, #1
 80052ae:	2300      	movhi	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e0e7      	b.n	800548a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a78      	ldr	r2, [pc, #480]	; (80054a0 <HAL_I2C_Init+0x280>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0c9b      	lsrs	r3, r3, #18
 80052c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a6a      	ldr	r2, [pc, #424]	; (8005494 <HAL_I2C_Init+0x274>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d802      	bhi.n	80052f4 <HAL_I2C_Init+0xd4>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	3301      	adds	r3, #1
 80052f2:	e009      	b.n	8005308 <HAL_I2C_Init+0xe8>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	4a69      	ldr	r2, [pc, #420]	; (80054a4 <HAL_I2C_Init+0x284>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	099b      	lsrs	r3, r3, #6
 8005306:	3301      	adds	r3, #1
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	430b      	orrs	r3, r1
 800530e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800531a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	495c      	ldr	r1, [pc, #368]	; (8005494 <HAL_I2C_Init+0x274>)
 8005324:	428b      	cmp	r3, r1
 8005326:	d819      	bhi.n	800535c <HAL_I2C_Init+0x13c>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1e59      	subs	r1, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	fbb1 f3f3 	udiv	r3, r1, r3
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	f640 73fc 	movw	r3, #4092	; 0xffc
 800533c:	400b      	ands	r3, r1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_I2C_Init+0x138>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1e59      	subs	r1, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005350:	3301      	adds	r3, #1
 8005352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005356:	e051      	b.n	80053fc <HAL_I2C_Init+0x1dc>
 8005358:	2304      	movs	r3, #4
 800535a:	e04f      	b.n	80053fc <HAL_I2C_Init+0x1dc>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d111      	bne.n	8005388 <HAL_I2C_Init+0x168>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1e58      	subs	r0, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6859      	ldr	r1, [r3, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	440b      	add	r3, r1
 8005372:	fbb0 f3f3 	udiv	r3, r0, r3
 8005376:	3301      	adds	r3, #1
 8005378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e012      	b.n	80053ae <HAL_I2C_Init+0x18e>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1e58      	subs	r0, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	0099      	lsls	r1, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	fbb0 f3f3 	udiv	r3, r0, r3
 800539e:	3301      	adds	r3, #1
 80053a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_I2C_Init+0x196>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e022      	b.n	80053fc <HAL_I2C_Init+0x1dc>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10e      	bne.n	80053dc <HAL_I2C_Init+0x1bc>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1e58      	subs	r0, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6859      	ldr	r1, [r3, #4]
 80053c6:	460b      	mov	r3, r1
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	440b      	add	r3, r1
 80053cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80053d0:	3301      	adds	r3, #1
 80053d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053da:	e00f      	b.n	80053fc <HAL_I2C_Init+0x1dc>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1e58      	subs	r0, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6859      	ldr	r1, [r3, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	0099      	lsls	r1, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80053f2:	3301      	adds	r3, #1
 80053f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	6809      	ldr	r1, [r1, #0]
 8005400:	4313      	orrs	r3, r2
 8005402:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800542a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6911      	ldr	r1, [r2, #16]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68d2      	ldr	r2, [r2, #12]
 8005436:	4311      	orrs	r1, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	430b      	orrs	r3, r1
 800543e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	000186a0 	.word	0x000186a0
 8005498:	001e847f 	.word	0x001e847f
 800549c:	003d08ff 	.word	0x003d08ff
 80054a0:	431bde83 	.word	0x431bde83
 80054a4:	10624dd3 	.word	0x10624dd3

080054a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	461a      	mov	r2, r3
 80054b4:	460b      	mov	r3, r1
 80054b6:	817b      	strh	r3, [r7, #10]
 80054b8:	4613      	mov	r3, r2
 80054ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054bc:	f7fd fc38 	bl	8002d30 <HAL_GetTick>
 80054c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	f040 80e0 	bne.w	8005690 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2319      	movs	r3, #25
 80054d6:	2201      	movs	r2, #1
 80054d8:	4970      	ldr	r1, [pc, #448]	; (800569c <HAL_I2C_Master_Transmit+0x1f4>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f964 	bl	80057a8 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0d3      	b.n	8005692 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_I2C_Master_Transmit+0x50>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e0cc      	b.n	8005692 <HAL_I2C_Master_Transmit+0x1ea>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b01      	cmp	r3, #1
 800550c:	d007      	beq.n	800551e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2221      	movs	r2, #33	; 0x21
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2210      	movs	r2, #16
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	893a      	ldrh	r2, [r7, #8]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a50      	ldr	r2, [pc, #320]	; (80056a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005560:	8979      	ldrh	r1, [r7, #10]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f89c 	bl	80056a4 <I2C_MasterRequestWrite>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e08d      	b.n	8005692 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800558c:	e066      	b.n	800565c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f9de 	bl	8005954 <I2C_WaitOnTXEFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d107      	bne.n	80055b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e06b      	b.n	8005692 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d11b      	bne.n	8005630 <HAL_I2C_Master_Transmit+0x188>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d017      	beq.n	8005630 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	6a39      	ldr	r1, [r7, #32]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f9ce 	bl	80059d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00d      	beq.n	800565c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2b04      	cmp	r3, #4
 8005646:	d107      	bne.n	8005658 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005656:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e01a      	b.n	8005692 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	d194      	bne.n	800558e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	00100002 	.word	0x00100002
 80056a0:	ffff0000 	.word	0xffff0000

080056a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	460b      	mov	r3, r1
 80056b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d006      	beq.n	80056ce <I2C_MasterRequestWrite+0x2a>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d003      	beq.n	80056ce <I2C_MasterRequestWrite+0x2a>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056cc:	d108      	bne.n	80056e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e00b      	b.n	80056f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	2b12      	cmp	r3, #18
 80056e6:	d107      	bne.n	80056f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f84f 	bl	80057a8 <I2C_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571e:	d103      	bne.n	8005728 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e035      	b.n	8005798 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005734:	d108      	bne.n	8005748 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005736:	897b      	ldrh	r3, [r7, #10]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	e01b      	b.n	8005780 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005748:	897b      	ldrh	r3, [r7, #10]
 800574a:	11db      	asrs	r3, r3, #7
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0306 	and.w	r3, r3, #6
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f063 030f 	orn	r3, r3, #15
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	490e      	ldr	r1, [pc, #56]	; (80057a0 <I2C_MasterRequestWrite+0xfc>)
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f875 	bl	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e010      	b.n	8005798 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005776:	897b      	ldrh	r3, [r7, #10]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4907      	ldr	r1, [pc, #28]	; (80057a4 <I2C_MasterRequestWrite+0x100>)
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f865 	bl	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	00010008 	.word	0x00010008
 80057a4:	00010002 	.word	0x00010002

080057a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b8:	e025      	b.n	8005806 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d021      	beq.n	8005806 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fd fab5 	bl	8002d30 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d116      	bne.n	8005806 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e023      	b.n	800584e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d10d      	bne.n	800582c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	43da      	mvns	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	e00c      	b.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	43da      	mvns	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	429a      	cmp	r2, r3
 800584a:	d0b6      	beq.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005864:	e051      	b.n	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	d123      	bne.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005884:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800588e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e046      	b.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d021      	beq.n	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c6:	f7fd fa33 	bl	8002d30 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d116      	bne.n	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e020      	b.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	0c1b      	lsrs	r3, r3, #16
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d10c      	bne.n	800592e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	43da      	mvns	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf14      	ite	ne
 8005926:	2301      	movne	r3, #1
 8005928:	2300      	moveq	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	e00b      	b.n	8005946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	43da      	mvns	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4013      	ands	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf14      	ite	ne
 8005940:	2301      	movne	r3, #1
 8005942:	2300      	moveq	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d18d      	bne.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005960:	e02d      	b.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f878 	bl	8005a58 <I2C_IsAcknowledgeFailed>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e02d      	b.n	80059ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d021      	beq.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fd f9d9 	bl	8002d30 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d116      	bne.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e007      	b.n	80059ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d1ca      	bne.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059e2:	e02d      	b.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f837 	bl	8005a58 <I2C_IsAcknowledgeFailed>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e02d      	b.n	8005a50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d021      	beq.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fc:	f7fd f998 	bl	8002d30 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d302      	bcc.n	8005a12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d116      	bne.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e007      	b.n	8005a50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d1ca      	bne.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6e:	d11b      	bne.n	8005aa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f043 0204 	orr.w	r2, r3, #4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d129      	bne.n	8005b20 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0210 	bic.w	r2, r2, #16
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d12a      	bne.n	8005b9e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	; 0x24
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005b68:	89fb      	ldrh	r3, [r7, #14]
 8005b6a:	f023 030f 	bic.w	r3, r3, #15
 8005b6e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	89fb      	ldrh	r3, [r7, #14]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	89fa      	ldrh	r2, [r7, #14]
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bae:	b08f      	sub	sp, #60	; 0x3c
 8005bb0:	af0a      	add	r7, sp, #40	; 0x28
 8005bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e10f      	b.n	8005dde <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fc fac3 	bl	8002164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2203      	movs	r2, #3
 8005be2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f003 ff4a 	bl	8009a96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	687e      	ldr	r6, [r7, #4]
 8005c0a:	466d      	mov	r5, sp
 8005c0c:	f106 0410 	add.w	r4, r6, #16
 8005c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c20:	1d33      	adds	r3, r6, #4
 8005c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c24:	6838      	ldr	r0, [r7, #0]
 8005c26:	f003 fed5 	bl	80099d4 <USB_CoreInit>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0d0      	b.n	8005dde <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f003 ff38 	bl	8009ab8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	73fb      	strb	r3, [r7, #15]
 8005c4c:	e04a      	b.n	8005ce4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	333d      	adds	r3, #61	; 0x3d
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c62:	7bfa      	ldrb	r2, [r7, #15]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	333c      	adds	r3, #60	; 0x3c
 8005c72:	7bfa      	ldrb	r2, [r7, #15]
 8005c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	b298      	uxth	r0, r3
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	3344      	adds	r3, #68	; 0x44
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3340      	adds	r3, #64	; 0x40
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ca2:	7bfa      	ldrb	r2, [r7, #15]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	3348      	adds	r3, #72	; 0x48
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	334c      	adds	r3, #76	; 0x4c
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3354      	adds	r3, #84	; 0x54
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
 8005ce4:	7bfa      	ldrb	r2, [r7, #15]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d3af      	bcc.n	8005c4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	e044      	b.n	8005d7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005cf4:	7bfa      	ldrb	r2, [r7, #15]
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d20:	7bfa      	ldrb	r2, [r7, #15]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d36:	7bfa      	ldrb	r2, [r7, #15]
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d4c:	7bfa      	ldrb	r2, [r7, #15]
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d62:	7bfa      	ldrb	r2, [r7, #15]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
 8005d7e:	7bfa      	ldrb	r2, [r7, #15]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d3b5      	bcc.n	8005cf4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	687e      	ldr	r6, [r7, #4]
 8005d90:	466d      	mov	r5, sp
 8005d92:	f106 0410 	add.w	r4, r6, #16
 8005d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005da6:	1d33      	adds	r3, r6, #4
 8005da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005daa:	6838      	ldr	r0, [r7, #0]
 8005dac:	f003 fed0 	bl	8009b50 <USB_DevInit>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e00d      	b.n	8005dde <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f004 f89b 	bl	8009f12 <USB_DevDisconnect>

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e267      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d075      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e06:	4b88      	ldr	r3, [pc, #544]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e12:	4b85      	ldr	r3, [pc, #532]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d112      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1e:	4b82      	ldr	r3, [pc, #520]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2a:	d10b      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	4b7e      	ldr	r3, [pc, #504]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05b      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x108>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d157      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e242      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d106      	bne.n	8005e5c <HAL_RCC_OscConfig+0x74>
 8005e4e:	4b76      	ldr	r3, [pc, #472]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a75      	ldr	r2, [pc, #468]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x98>
 8005e66:	4b70      	ldr	r3, [pc, #448]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6f      	ldr	r2, [pc, #444]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b6d      	ldr	r3, [pc, #436]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6c      	ldr	r2, [pc, #432]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e80:	4b69      	ldr	r3, [pc, #420]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a68      	ldr	r2, [pc, #416]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b66      	ldr	r3, [pc, #408]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a65      	ldr	r2, [pc, #404]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fc ff46 	bl	8002d30 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fc ff42 	bl	8002d30 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e207      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xc0>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fc ff32 	bl	8002d30 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fc ff2e 	bl	8002d30 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1f3      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee2:	4b51      	ldr	r3, [pc, #324]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0xe8>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005efe:	4b4a      	ldr	r3, [pc, #296]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0a:	4b47      	ldr	r3, [pc, #284]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d11c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f16:	4b44      	ldr	r3, [pc, #272]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f22:	4b41      	ldr	r3, [pc, #260]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e1c7      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3a:	4b3b      	ldr	r3, [pc, #236]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4937      	ldr	r1, [pc, #220]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4e:	e03a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f58:	4b34      	ldr	r3, [pc, #208]	; (800602c <HAL_RCC_OscConfig+0x244>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fc fee7 	bl	8002d30 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f66:	f7fc fee3 	bl	8002d30 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e1a8      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f84:	4b28      	ldr	r3, [pc, #160]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4925      	ldr	r1, [pc, #148]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_RCC_OscConfig+0x244>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fc fec6 	bl	8002d30 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7fc fec2 	bl	8002d30 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e187      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d036      	beq.n	8006040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fda:	4b15      	ldr	r3, [pc, #84]	; (8006030 <HAL_RCC_OscConfig+0x248>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe0:	f7fc fea6 	bl	8002d30 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fc fea2 	bl	8002d30 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e167      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x200>
 8006006:	e01b      	b.n	8006040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCC_OscConfig+0x248>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600e:	f7fc fe8f 	bl	8002d30 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006014:	e00e      	b.n	8006034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006016:	f7fc fe8b 	bl	8002d30 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d907      	bls.n	8006034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e150      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006028:	40023800 	.word	0x40023800
 800602c:	42470000 	.word	0x42470000
 8006030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006034:	4b88      	ldr	r3, [pc, #544]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1ea      	bne.n	8006016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8097 	beq.w	800617c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006052:	4b81      	ldr	r3, [pc, #516]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	4b7d      	ldr	r3, [pc, #500]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	4a7c      	ldr	r2, [pc, #496]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606c:	6413      	str	r3, [r2, #64]	; 0x40
 800606e:	4b7a      	ldr	r3, [pc, #488]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607e:	4b77      	ldr	r3, [pc, #476]	; (800625c <HAL_RCC_OscConfig+0x474>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d118      	bne.n	80060bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800608a:	4b74      	ldr	r3, [pc, #464]	; (800625c <HAL_RCC_OscConfig+0x474>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a73      	ldr	r2, [pc, #460]	; (800625c <HAL_RCC_OscConfig+0x474>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006096:	f7fc fe4b 	bl	8002d30 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609e:	f7fc fe47 	bl	8002d30 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e10c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b0:	4b6a      	ldr	r3, [pc, #424]	; (800625c <HAL_RCC_OscConfig+0x474>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d106      	bne.n	80060d2 <HAL_RCC_OscConfig+0x2ea>
 80060c4:	4b64      	ldr	r3, [pc, #400]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	4a63      	ldr	r2, [pc, #396]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	6713      	str	r3, [r2, #112]	; 0x70
 80060d0:	e01c      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCC_OscConfig+0x30c>
 80060da:	4b5f      	ldr	r3, [pc, #380]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4a5e      	ldr	r2, [pc, #376]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e0:	f043 0304 	orr.w	r3, r3, #4
 80060e4:	6713      	str	r3, [r2, #112]	; 0x70
 80060e6:	4b5c      	ldr	r3, [pc, #368]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	4a5b      	ldr	r2, [pc, #364]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
 80060f2:	e00b      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060f4:	4b58      	ldr	r3, [pc, #352]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	4a57      	ldr	r2, [pc, #348]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006100:	4b55      	ldr	r3, [pc, #340]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	4a54      	ldr	r2, [pc, #336]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 0304 	bic.w	r3, r3, #4
 800610a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fc fe0c 	bl	8002d30 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	e00a      	b.n	8006132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fc fe08 	bl	8002d30 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	; 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e0cb      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006132:	4b49      	ldr	r3, [pc, #292]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ee      	beq.n	800611c <HAL_RCC_OscConfig+0x334>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006140:	f7fc fdf6 	bl	8002d30 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006146:	e00a      	b.n	800615e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006148:	f7fc fdf2 	bl	8002d30 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	; 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0b5      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615e:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ee      	bne.n	8006148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d105      	bne.n	800617c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006170:	4b39      	ldr	r3, [pc, #228]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	4a38      	ldr	r2, [pc, #224]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80a1 	beq.w	80062c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006186:	4b34      	ldr	r3, [pc, #208]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b08      	cmp	r3, #8
 8006190:	d05c      	beq.n	800624c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d141      	bne.n	800621e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619a:	4b31      	ldr	r3, [pc, #196]	; (8006260 <HAL_RCC_OscConfig+0x478>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a0:	f7fc fdc6 	bl	8002d30 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fc fdc2 	bl	8002d30 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e087      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ba:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	3b01      	subs	r3, #1
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	491b      	ldr	r1, [pc, #108]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <HAL_RCC_OscConfig+0x478>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fc fd9b 	bl	8002d30 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061fe:	f7fc fd97 	bl	8002d30 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e05c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x416>
 800621c:	e054      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <HAL_RCC_OscConfig+0x478>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006224:	f7fc fd84 	bl	8002d30 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622c:	f7fc fd80 	bl	8002d30 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e045      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <HAL_RCC_OscConfig+0x470>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x444>
 800624a:	e03d      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d107      	bne.n	8006264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e038      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006258:	40023800 	.word	0x40023800
 800625c:	40007000 	.word	0x40007000
 8006260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCC_OscConfig+0x4ec>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d028      	beq.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d121      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d11a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800629a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629c:	4293      	cmp	r3, r2
 800629e:	d111      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	3b01      	subs	r3, #1
 80062ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800

080062d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0cc      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062ec:	4b68      	ldr	r3, [pc, #416]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d90c      	bls.n	8006314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fa:	4b65      	ldr	r3, [pc, #404]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006302:	4b63      	ldr	r3, [pc, #396]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0b8      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800632c:	4b59      	ldr	r3, [pc, #356]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a58      	ldr	r2, [pc, #352]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006344:	4b53      	ldr	r3, [pc, #332]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a52      	ldr	r2, [pc, #328]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800634e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b50      	ldr	r3, [pc, #320]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	494d      	ldr	r1, [pc, #308]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d044      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	4b47      	ldr	r3, [pc, #284]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d119      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e07f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d003      	beq.n	8006396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006392:	2b03      	cmp	r3, #3
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006396:	4b3f      	ldr	r3, [pc, #252]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e06f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a6:	4b3b      	ldr	r3, [pc, #236]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e067      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063b6:	4b37      	ldr	r3, [pc, #220]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 0203 	bic.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4934      	ldr	r1, [pc, #208]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c8:	f7fc fcb2 	bl	8002d30 <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d0:	f7fc fcae 	bl	8002d30 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	; 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e04f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 020c 	and.w	r2, r3, #12
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1eb      	bne.n	80063d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063f8:	4b25      	ldr	r3, [pc, #148]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d20c      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b22      	ldr	r3, [pc, #136]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b20      	ldr	r3, [pc, #128]	; (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e032      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800642c:	4b19      	ldr	r3, [pc, #100]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4916      	ldr	r1, [pc, #88]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	490e      	ldr	r1, [pc, #56]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800645e:	f000 f821 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8006462:	4602      	mov	r2, r0
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	490a      	ldr	r1, [pc, #40]	; (8006498 <HAL_RCC_ClockConfig+0x1c0>)
 8006470:	5ccb      	ldrb	r3, [r1, r3]
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800647a:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_RCC_ClockConfig+0x1c8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7fb feca 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40023c00 	.word	0x40023c00
 8006494:	40023800 	.word	0x40023800
 8006498:	0801ce30 	.word	0x0801ce30
 800649c:	2000006c 	.word	0x2000006c
 80064a0:	20000070 	.word	0x20000070

080064a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a8:	b094      	sub	sp, #80	; 0x50
 80064aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	647b      	str	r3, [r7, #68]	; 0x44
 80064b0:	2300      	movs	r3, #0
 80064b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b4:	2300      	movs	r3, #0
 80064b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064bc:	4b79      	ldr	r3, [pc, #484]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d00d      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x40>
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	f200 80e1 	bhi.w	8006690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x34>
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x3a>
 80064d6:	e0db      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d8:	4b73      	ldr	r3, [pc, #460]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80064da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80064dc:	e0db      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064de:	4b73      	ldr	r3, [pc, #460]	; (80066ac <HAL_RCC_GetSysClockFreq+0x208>)
 80064e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064e2:	e0d8      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064e4:	4b6f      	ldr	r3, [pc, #444]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ee:	4b6d      	ldr	r3, [pc, #436]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d063      	beq.n	80065c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064fa:	4b6a      	ldr	r3, [pc, #424]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2200      	movs	r2, #0
 8006502:	63bb      	str	r3, [r7, #56]	; 0x38
 8006504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
 800650e:	2300      	movs	r3, #0
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
 8006512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	f04f 0000 	mov.w	r0, #0
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	0159      	lsls	r1, r3, #5
 8006524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006528:	0150      	lsls	r0, r2, #5
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4621      	mov	r1, r4
 8006530:	1a51      	subs	r1, r2, r1
 8006532:	6139      	str	r1, [r7, #16]
 8006534:	4629      	mov	r1, r5
 8006536:	eb63 0301 	sbc.w	r3, r3, r1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006548:	4659      	mov	r1, fp
 800654a:	018b      	lsls	r3, r1, #6
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006552:	4651      	mov	r1, sl
 8006554:	018a      	lsls	r2, r1, #6
 8006556:	4651      	mov	r1, sl
 8006558:	ebb2 0801 	subs.w	r8, r2, r1
 800655c:	4659      	mov	r1, fp
 800655e:	eb63 0901 	sbc.w	r9, r3, r1
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800656e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006576:	4690      	mov	r8, r2
 8006578:	4699      	mov	r9, r3
 800657a:	4623      	mov	r3, r4
 800657c:	eb18 0303 	adds.w	r3, r8, r3
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	462b      	mov	r3, r5
 8006584:	eb49 0303 	adc.w	r3, r9, r3
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006596:	4629      	mov	r1, r5
 8006598:	024b      	lsls	r3, r1, #9
 800659a:	4621      	mov	r1, r4
 800659c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065a0:	4621      	mov	r1, r4
 80065a2:	024a      	lsls	r2, r1, #9
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065aa:	2200      	movs	r2, #0
 80065ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065b4:	f7f9 fe6c 	bl	8000290 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4613      	mov	r3, r2
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c0:	e058      	b.n	8006674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	2200      	movs	r2, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	4611      	mov	r1, r2
 80065ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	2300      	movs	r3, #0
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
 80065d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	f04f 0000 	mov.w	r0, #0
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	0159      	lsls	r1, r3, #5
 80065ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065ee:	0150      	lsls	r0, r2, #5
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4641      	mov	r1, r8
 80065f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80065fa:	4649      	mov	r1, r9
 80065fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800660c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006614:	ebb2 040a 	subs.w	r4, r2, sl
 8006618:	eb63 050b 	sbc.w	r5, r3, fp
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	00eb      	lsls	r3, r5, #3
 8006626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800662a:	00e2      	lsls	r2, r4, #3
 800662c:	4614      	mov	r4, r2
 800662e:	461d      	mov	r5, r3
 8006630:	4643      	mov	r3, r8
 8006632:	18e3      	adds	r3, r4, r3
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	464b      	mov	r3, r9
 8006638:	eb45 0303 	adc.w	r3, r5, r3
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800664a:	4629      	mov	r1, r5
 800664c:	028b      	lsls	r3, r1, #10
 800664e:	4621      	mov	r1, r4
 8006650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006654:	4621      	mov	r1, r4
 8006656:	028a      	lsls	r2, r1, #10
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665e:	2200      	movs	r2, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	61fa      	str	r2, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	f7f9 fe12 	bl	8000290 <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4613      	mov	r3, r2
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	3301      	adds	r3, #1
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800668e:	e002      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006692:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006698:	4618      	mov	r0, r3
 800669a:	3750      	adds	r7, #80	; 0x50
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a2:	bf00      	nop
 80066a4:	40023800 	.word	0x40023800
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	007a1200 	.word	0x007a1200

080066b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b4:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	2000006c 	.word	0x2000006c

080066c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066cc:	f7ff fff0 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	0a9b      	lsrs	r3, r3, #10
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	; (80066ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	0801ce40 	.word	0x0801ce40

080066f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066f4:	f7ff ffdc 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	0b5b      	lsrs	r3, r3, #13
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	4903      	ldr	r1, [pc, #12]	; (8006714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006706:	5ccb      	ldrb	r3, [r1, r3]
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40023800 	.word	0x40023800
 8006714:	0801ce40 	.word	0x0801ce40

08006718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	220f      	movs	r2, #15
 8006726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0203 	and.w	r2, r3, #3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006740:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800674c:	4b09      	ldr	r3, [pc, #36]	; (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	08db      	lsrs	r3, r3, #3
 8006752:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800675a:	4b07      	ldr	r3, [pc, #28]	; (8006778 <HAL_RCC_GetClockConfig+0x60>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	40023c00 	.word	0x40023c00

0800677c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d075      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067b0:	4b91      	ldr	r3, [pc, #580]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067b6:	f7fc fabb 	bl	8002d30 <HAL_GetTick>
 80067ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067bc:	e008      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067be:	f7fc fab7 	bl	8002d30 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e189      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067d0:	4b8a      	ldr	r3, [pc, #552]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f0      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	019a      	lsls	r2, r3, #6
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	071b      	lsls	r3, r3, #28
 80067f4:	4981      	ldr	r1, [pc, #516]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01f      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006808:	4b7c      	ldr	r3, [pc, #496]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800680a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	019a      	lsls	r2, r3, #6
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	061b      	lsls	r3, r3, #24
 8006822:	431a      	orrs	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	071b      	lsls	r3, r3, #28
 8006828:	4974      	ldr	r1, [pc, #464]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006830:	4b72      	ldr	r3, [pc, #456]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006836:	f023 021f 	bic.w	r2, r3, #31
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	3b01      	subs	r3, #1
 8006840:	496e      	ldr	r1, [pc, #440]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	019a      	lsls	r2, r3, #6
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	071b      	lsls	r3, r3, #28
 8006868:	4964      	ldr	r1, [pc, #400]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006870:	4b61      	ldr	r3, [pc, #388]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006876:	f7fc fa5b 	bl	8002d30 <HAL_GetTick>
 800687a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800687c:	e008      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800687e:	f7fc fa57 	bl	8002d30 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e129      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006890:	4b5a      	ldr	r3, [pc, #360]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0f0      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d105      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d079      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068b4:	4b52      	ldr	r3, [pc, #328]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ba:	f7fc fa39 	bl	8002d30 <HAL_GetTick>
 80068be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068c0:	e008      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068c2:	f7fc fa35 	bl	8002d30 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e107      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068d4:	4b49      	ldr	r3, [pc, #292]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e0:	d0ef      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068ee:	4b43      	ldr	r3, [pc, #268]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f4:	0f1b      	lsrs	r3, r3, #28
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	019a      	lsls	r2, r3, #6
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	061b      	lsls	r3, r3, #24
 8006908:	431a      	orrs	r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	071b      	lsls	r3, r3, #28
 800690e:	493b      	ldr	r1, [pc, #236]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006916:	4b39      	ldr	r3, [pc, #228]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800691c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	3b01      	subs	r3, #1
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	4934      	ldr	r1, [pc, #208]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01e      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800693c:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	0e1b      	lsrs	r3, r3, #24
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	019a      	lsls	r2, r3, #6
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	061b      	lsls	r3, r3, #24
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	071b      	lsls	r3, r3, #28
 800695c:	4927      	ldr	r1, [pc, #156]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006964:	4b25      	ldr	r3, [pc, #148]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800696a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	4922      	ldr	r1, [pc, #136]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800697a:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800697c:	2201      	movs	r2, #1
 800697e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006980:	f7fc f9d6 	bl	8002d30 <HAL_GetTick>
 8006984:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006986:	e008      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006988:	f7fc f9d2 	bl	8002d30 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e0a4      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800699a:	4b18      	ldr	r3, [pc, #96]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a6:	d1ef      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 808b 	beq.w	8006acc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	4a0f      	ldr	r2, [pc, #60]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6413      	str	r3, [r2, #64]	; 0x40
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069d2:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a0b      	ldr	r2, [pc, #44]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069de:	f7fc f9a7 	bl	8002d30 <HAL_GetTick>
 80069e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069e4:	e010      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fc f9a3 	bl	8002d30 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d909      	bls.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e075      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80069f8:	42470068 	.word	0x42470068
 80069fc:	40023800 	.word	0x40023800
 8006a00:	42470070 	.word	0x42470070
 8006a04:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a08:	4b38      	ldr	r3, [pc, #224]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0e8      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a14:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d02f      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d028      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a32:	4b2f      	ldr	r3, [pc, #188]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a3c:	4b2d      	ldr	r3, [pc, #180]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a42:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a48:	4a29      	ldr	r2, [pc, #164]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a4e:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d114      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a5a:	f7fc f969 	bl	8002d30 <HAL_GetTick>
 8006a5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a60:	e00a      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a62:	f7fc f965 	bl	8002d30 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e035      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a78:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0ee      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a90:	d10d      	bne.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa6:	4912      	ldr	r1, [pc, #72]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	608b      	str	r3, [r1, #8]
 8006aac:	e005      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006aae:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4a0f      	ldr	r2, [pc, #60]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ab4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ab8:	6093      	str	r3, [r2, #8]
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac6:	490a      	ldr	r1, [pc, #40]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006ae0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40007000 	.word	0x40007000
 8006af0:	40023800 	.word	0x40023800
 8006af4:	42470e40 	.word	0x42470e40
 8006af8:	424711e0 	.word	0x424711e0

08006afc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e066      	b.n	8006be0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7f5b      	ldrb	r3, [r3, #29]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb f910 	bl	8001d48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	22ca      	movs	r2, #202	; 0xca
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2253      	movs	r2, #83	; 0x53
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f998 	bl	8006e74 <RTC_EnterInitMode>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d12c      	bne.n	8006ba8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b60:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68d2      	ldr	r2, [r2, #12]
 8006b88:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6919      	ldr	r1, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	041a      	lsls	r2, r3, #16
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f99f 	bl	8006ee2 <RTC_ExitInitMode>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d113      	bne.n	8006bd6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bbc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699a      	ldr	r2, [r3, #24]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	22ff      	movs	r2, #255	; 0xff
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	7f1b      	ldrb	r3, [r3, #28]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_RTC_SetTime+0x1c>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e087      	b.n	8006d14 <HAL_RTC_SetTime+0x12c>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d126      	bne.n	8006c64 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f97c 	bl	8006f2c <RTC_ByteToBcd2>
 8006c34:	4603      	mov	r3, r0
 8006c36:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f975 	bl	8006f2c <RTC_ByteToBcd2>
 8006c42:	4603      	mov	r3, r0
 8006c44:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c46:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	789b      	ldrb	r3, [r3, #2]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 f96d 	bl	8006f2c <RTC_ByteToBcd2>
 8006c52:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c54:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e018      	b.n	8006c96 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d102      	bne.n	8006c78 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c84:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c8a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	78db      	ldrb	r3, [r3, #3]
 8006c90:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	22ca      	movs	r2, #202	; 0xca
 8006c9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2253      	movs	r2, #83	; 0x53
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f8e4 	bl	8006e74 <RTC_EnterInitMode>
 8006cac:	4603      	mov	r3, r0
 8006cae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006cb0:	7cfb      	ldrb	r3, [r7, #19]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d120      	bne.n	8006cf8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cc0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cc4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6899      	ldr	r1, [r3, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f8f7 	bl	8006ee2 <RTC_ExitInitMode>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006cf8:	7cfb      	ldrb	r3, [r7, #19]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	22ff      	movs	r2, #255	; 0xff
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	771a      	strb	r2, [r3, #28]

  return status;
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd90      	pop	{r4, r7, pc}

08006d1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	7f1b      	ldrb	r3, [r3, #28]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_RTC_SetDate+0x1c>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e071      	b.n	8006e1c <HAL_RTC_SetDate+0x100>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2202      	movs	r2, #2
 8006d42:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10e      	bne.n	8006d68 <HAL_RTC_SetDate+0x4c>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	330a      	adds	r3, #10
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d11c      	bne.n	8006da8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	78db      	ldrb	r3, [r3, #3]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f8da 	bl	8006f2c <RTC_ByteToBcd2>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 f8d3 	bl	8006f2c <RTC_ByteToBcd2>
 8006d86:	4603      	mov	r3, r0
 8006d88:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d8a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	789b      	ldrb	r3, [r3, #2]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 f8cb 	bl	8006f2c <RTC_ByteToBcd2>
 8006d96:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d98:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	e00e      	b.n	8006dc6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	78db      	ldrb	r3, [r3, #3]
 8006dac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006db4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006dba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	22ca      	movs	r2, #202	; 0xca
 8006dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2253      	movs	r2, #83	; 0x53
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f84c 	bl	8006e74 <RTC_EnterInitMode>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006de0:	7cfb      	ldrb	r3, [r7, #19]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006df0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006df4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f873 	bl	8006ee2 <RTC_ExitInitMode>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006e00:	7cfb      	ldrb	r3, [r7, #19]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	22ff      	movs	r2, #255	; 0xff
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	771a      	strb	r2, [r3, #28]

  return status;
 8006e1a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd90      	pop	{r4, r7, pc}

08006e24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e40:	f7fb ff76 	bl	8002d30 <HAL_GetTick>
 8006e44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e46:	e009      	b.n	8006e5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e48:	f7fb ff72 	bl	8002d30 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e56:	d901      	bls.n	8006e5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e007      	b.n	8006e6c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0ee      	beq.n	8006e48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d122      	bne.n	8006ed8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ea0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ea2:	f7fb ff45 	bl	8002d30 <HAL_GetTick>
 8006ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ea8:	e00c      	b.n	8006ec4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006eaa:	f7fb ff41 	bl	8002d30 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eb8:	d904      	bls.n	8006ec4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <RTC_EnterInitMode+0x64>
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d1e8      	bne.n	8006eaa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ff89 	bl	8006e24 <HAL_RTC_WaitForSynchro>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d004      	beq.n	8006f22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006f3a:	e005      	b.n	8006f48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	3b0a      	subs	r3, #10
 8006f46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d8f6      	bhi.n	8006f3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	b2db      	uxtb	r3, r3
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e041      	b.n	8006ffc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d106      	bne.n	8006f92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fa ff7b 	bl	8001e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f000 ffd3 	bl	8007f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d001      	beq.n	800701c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e04e      	b.n	80070ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a23      	ldr	r2, [pc, #140]	; (80070c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d022      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d01d      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1f      	ldr	r2, [pc, #124]	; (80070cc <HAL_TIM_Base_Start_IT+0xc8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d018      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1e      	ldr	r2, [pc, #120]	; (80070d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1c      	ldr	r2, [pc, #112]	; (80070d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00e      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1b      	ldr	r2, [pc, #108]	; (80070d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d009      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a19      	ldr	r2, [pc, #100]	; (80070dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d111      	bne.n	80070a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b06      	cmp	r3, #6
 8007094:	d010      	beq.n	80070b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0201 	orr.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a6:	e007      	b.n	80070b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40010000 	.word	0x40010000
 80070cc:	40000400 	.word	0x40000400
 80070d0:	40000800 	.word	0x40000800
 80070d4:	40000c00 	.word	0x40000c00
 80070d8:	40010400 	.word	0x40010400
 80070dc:	40014000 	.word	0x40014000
 80070e0:	40001800 	.word	0x40001800

080070e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e041      	b.n	800717a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d106      	bne.n	8007110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fa fe46 	bl	8001d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f000 ff14 	bl	8007f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x24>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e022      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d109      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x3e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	e015      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d109      	bne.n	80071dc <HAL_TIM_PWM_Start+0x58>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e008      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e07c      	b.n	80072f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Start+0x82>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007204:	e013      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Start+0x92>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007214:	e00b      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Start+0xa2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007224:	e003      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fa9e 	bl	8008778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2d      	ldr	r2, [pc, #180]	; (80072f8 <HAL_TIM_PWM_Start+0x174>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIM_PWM_Start+0xcc>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2c      	ldr	r2, [pc, #176]	; (80072fc <HAL_TIM_PWM_Start+0x178>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d101      	bne.n	8007254 <HAL_TIM_PWM_Start+0xd0>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <HAL_TIM_PWM_Start+0xd2>
 8007254:	2300      	movs	r3, #0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <HAL_TIM_PWM_Start+0x174>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d022      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727c:	d01d      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <HAL_TIM_PWM_Start+0x17c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d018      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_TIM_PWM_Start+0x180>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <HAL_TIM_PWM_Start+0x184>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a16      	ldr	r2, [pc, #88]	; (80072fc <HAL_TIM_PWM_Start+0x178>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_TIM_PWM_Start+0x188>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a16      	ldr	r2, [pc, #88]	; (8007310 <HAL_TIM_PWM_Start+0x18c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d111      	bne.n	80072de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b06      	cmp	r3, #6
 80072ca:	d010      	beq.n	80072ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	e007      	b.n	80072ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40010400 	.word	0x40010400
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40014000 	.word	0x40014000
 8007310:	40001800 	.word	0x40001800

08007314 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <HAL_TIM_PWM_Start_IT+0x28>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b01      	cmp	r3, #1
 8007332:	bf14      	ite	ne
 8007334:	2301      	movne	r3, #1
 8007336:	2300      	moveq	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	e022      	b.n	8007382 <HAL_TIM_PWM_Start_IT+0x6e>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b04      	cmp	r3, #4
 8007340:	d109      	bne.n	8007356 <HAL_TIM_PWM_Start_IT+0x42>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	bf14      	ite	ne
 800734e:	2301      	movne	r3, #1
 8007350:	2300      	moveq	r3, #0
 8007352:	b2db      	uxtb	r3, r3
 8007354:	e015      	b.n	8007382 <HAL_TIM_PWM_Start_IT+0x6e>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b08      	cmp	r3, #8
 800735a:	d109      	bne.n	8007370 <HAL_TIM_PWM_Start_IT+0x5c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	bf14      	ite	ne
 8007368:	2301      	movne	r3, #1
 800736a:	2300      	moveq	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	e008      	b.n	8007382 <HAL_TIM_PWM_Start_IT+0x6e>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e0c7      	b.n	800751a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <HAL_TIM_PWM_Start_IT+0x86>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007398:	e013      	b.n	80073c2 <HAL_TIM_PWM_Start_IT+0xae>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b04      	cmp	r3, #4
 800739e:	d104      	bne.n	80073aa <HAL_TIM_PWM_Start_IT+0x96>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a8:	e00b      	b.n	80073c2 <HAL_TIM_PWM_Start_IT+0xae>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d104      	bne.n	80073ba <HAL_TIM_PWM_Start_IT+0xa6>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073b8:	e003      	b.n	80073c2 <HAL_TIM_PWM_Start_IT+0xae>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b0c      	cmp	r3, #12
 80073c6:	d841      	bhi.n	800744c <HAL_TIM_PWM_Start_IT+0x138>
 80073c8:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	08007405 	.word	0x08007405
 80073d4:	0800744d 	.word	0x0800744d
 80073d8:	0800744d 	.word	0x0800744d
 80073dc:	0800744d 	.word	0x0800744d
 80073e0:	08007417 	.word	0x08007417
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	08007429 	.word	0x08007429
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	0800744d 	.word	0x0800744d
 8007400:	0800743b 	.word	0x0800743b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0202 	orr.w	r2, r2, #2
 8007412:	60da      	str	r2, [r3, #12]
      break;
 8007414:	e01d      	b.n	8007452 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0204 	orr.w	r2, r2, #4
 8007424:	60da      	str	r2, [r3, #12]
      break;
 8007426:	e014      	b.n	8007452 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0208 	orr.w	r2, r2, #8
 8007436:	60da      	str	r2, [r3, #12]
      break;
 8007438:	e00b      	b.n	8007452 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0210 	orr.w	r2, r2, #16
 8007448:	60da      	str	r2, [r3, #12]
      break;
 800744a:	e002      	b.n	8007452 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
      break;
 8007450:	bf00      	nop
  }

  if (status == HAL_OK)
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d15f      	bne.n	8007518 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f001 f989 	bl	8008778 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2e      	ldr	r2, [pc, #184]	; (8007524 <HAL_TIM_PWM_Start_IT+0x210>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d004      	beq.n	800747a <HAL_TIM_PWM_Start_IT+0x166>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a2c      	ldr	r2, [pc, #176]	; (8007528 <HAL_TIM_PWM_Start_IT+0x214>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d101      	bne.n	800747e <HAL_TIM_PWM_Start_IT+0x16a>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <HAL_TIM_PWM_Start_IT+0x16c>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007492:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a22      	ldr	r2, [pc, #136]	; (8007524 <HAL_TIM_PWM_Start_IT+0x210>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d022      	beq.n	80074e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d01d      	beq.n	80074e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1f      	ldr	r2, [pc, #124]	; (800752c <HAL_TIM_PWM_Start_IT+0x218>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d018      	beq.n	80074e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <HAL_TIM_PWM_Start_IT+0x21c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_TIM_PWM_Start_IT+0x220>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00e      	beq.n	80074e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a17      	ldr	r2, [pc, #92]	; (8007528 <HAL_TIM_PWM_Start_IT+0x214>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d009      	beq.n	80074e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a18      	ldr	r2, [pc, #96]	; (8007538 <HAL_TIM_PWM_Start_IT+0x224>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d004      	beq.n	80074e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a17      	ldr	r2, [pc, #92]	; (800753c <HAL_TIM_PWM_Start_IT+0x228>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d111      	bne.n	8007508 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b06      	cmp	r3, #6
 80074f4:	d010      	beq.n	8007518 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	e007      	b.n	8007518 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40010000 	.word	0x40010000
 8007528:	40010400 	.word	0x40010400
 800752c:	40000400 	.word	0x40000400
 8007530:	40000800 	.word	0x40000800
 8007534:	40000c00 	.word	0x40000c00
 8007538:	40014000 	.word	0x40014000
 800753c:	40001800 	.word	0x40001800

08007540 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e041      	b.n	80075d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fa fc3e 	bl	8001de8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f000 fce6 	bl	8007f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_IC_Start_IT+0x1e>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	e013      	b.n	8007626 <HAL_TIM_IC_Start_IT+0x46>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b04      	cmp	r3, #4
 8007602:	d104      	bne.n	800760e <HAL_TIM_IC_Start_IT+0x2e>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800760a:	b2db      	uxtb	r3, r3
 800760c:	e00b      	b.n	8007626 <HAL_TIM_IC_Start_IT+0x46>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b08      	cmp	r3, #8
 8007612:	d104      	bne.n	800761e <HAL_TIM_IC_Start_IT+0x3e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800761a:	b2db      	uxtb	r3, r3
 800761c:	e003      	b.n	8007626 <HAL_TIM_IC_Start_IT+0x46>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007624:	b2db      	uxtb	r3, r3
 8007626:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <HAL_TIM_IC_Start_IT+0x58>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007634:	b2db      	uxtb	r3, r3
 8007636:	e013      	b.n	8007660 <HAL_TIM_IC_Start_IT+0x80>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b04      	cmp	r3, #4
 800763c:	d104      	bne.n	8007648 <HAL_TIM_IC_Start_IT+0x68>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007644:	b2db      	uxtb	r3, r3
 8007646:	e00b      	b.n	8007660 <HAL_TIM_IC_Start_IT+0x80>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b08      	cmp	r3, #8
 800764c:	d104      	bne.n	8007658 <HAL_TIM_IC_Start_IT+0x78>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e003      	b.n	8007660 <HAL_TIM_IC_Start_IT+0x80>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800765e:	b2db      	uxtb	r3, r3
 8007660:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d102      	bne.n	800766e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007668:	7b7b      	ldrb	r3, [r7, #13]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d001      	beq.n	8007672 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e0cc      	b.n	800780c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <HAL_TIM_IC_Start_IT+0xa2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007680:	e013      	b.n	80076aa <HAL_TIM_IC_Start_IT+0xca>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d104      	bne.n	8007692 <HAL_TIM_IC_Start_IT+0xb2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007690:	e00b      	b.n	80076aa <HAL_TIM_IC_Start_IT+0xca>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d104      	bne.n	80076a2 <HAL_TIM_IC_Start_IT+0xc2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a0:	e003      	b.n	80076aa <HAL_TIM_IC_Start_IT+0xca>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2202      	movs	r2, #2
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d104      	bne.n	80076ba <HAL_TIM_IC_Start_IT+0xda>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076b8:	e013      	b.n	80076e2 <HAL_TIM_IC_Start_IT+0x102>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d104      	bne.n	80076ca <HAL_TIM_IC_Start_IT+0xea>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076c8:	e00b      	b.n	80076e2 <HAL_TIM_IC_Start_IT+0x102>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d104      	bne.n	80076da <HAL_TIM_IC_Start_IT+0xfa>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076d8:	e003      	b.n	80076e2 <HAL_TIM_IC_Start_IT+0x102>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b0c      	cmp	r3, #12
 80076e6:	d841      	bhi.n	800776c <HAL_TIM_IC_Start_IT+0x18c>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <HAL_TIM_IC_Start_IT+0x110>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007725 	.word	0x08007725
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	0800776d 	.word	0x0800776d
 80076fc:	0800776d 	.word	0x0800776d
 8007700:	08007737 	.word	0x08007737
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800776d 	.word	0x0800776d
 800770c:	0800776d 	.word	0x0800776d
 8007710:	08007749 	.word	0x08007749
 8007714:	0800776d 	.word	0x0800776d
 8007718:	0800776d 	.word	0x0800776d
 800771c:	0800776d 	.word	0x0800776d
 8007720:	0800775b 	.word	0x0800775b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0202 	orr.w	r2, r2, #2
 8007732:	60da      	str	r2, [r3, #12]
      break;
 8007734:	e01d      	b.n	8007772 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0204 	orr.w	r2, r2, #4
 8007744:	60da      	str	r2, [r3, #12]
      break;
 8007746:	e014      	b.n	8007772 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	60da      	str	r2, [r3, #12]
      break;
 8007758:	e00b      	b.n	8007772 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0210 	orr.w	r2, r2, #16
 8007768:	60da      	str	r2, [r3, #12]
      break;
 800776a:	e002      	b.n	8007772 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	bf00      	nop
  }

  if (status == HAL_OK)
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d148      	bne.n	800780a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2201      	movs	r2, #1
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fff9 	bl	8008778 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a22      	ldr	r2, [pc, #136]	; (8007814 <HAL_TIM_IC_Start_IT+0x234>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d022      	beq.n	80077d6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007798:	d01d      	beq.n	80077d6 <HAL_TIM_IC_Start_IT+0x1f6>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1e      	ldr	r2, [pc, #120]	; (8007818 <HAL_TIM_IC_Start_IT+0x238>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d018      	beq.n	80077d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a1c      	ldr	r2, [pc, #112]	; (800781c <HAL_TIM_IC_Start_IT+0x23c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <HAL_TIM_IC_Start_IT+0x240>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00e      	beq.n	80077d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a19      	ldr	r2, [pc, #100]	; (8007824 <HAL_TIM_IC_Start_IT+0x244>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d009      	beq.n	80077d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a18      	ldr	r2, [pc, #96]	; (8007828 <HAL_TIM_IC_Start_IT+0x248>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d004      	beq.n	80077d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a16      	ldr	r2, [pc, #88]	; (800782c <HAL_TIM_IC_Start_IT+0x24c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d111      	bne.n	80077fa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b06      	cmp	r3, #6
 80077e6:	d010      	beq.n	800780a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f8:	e007      	b.n	800780a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0201 	orr.w	r2, r2, #1
 8007808:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40010000 	.word	0x40010000
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	40000c00 	.word	0x40000c00
 8007824:	40010400 	.word	0x40010400
 8007828:	40014000 	.word	0x40014000
 800782c:	40001800 	.word	0x40001800

08007830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b02      	cmp	r3, #2
 8007844:	d122      	bne.n	800788c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b02      	cmp	r3, #2
 8007852:	d11b      	bne.n	800788c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0202 	mvn.w	r2, #2
 800785c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fb f866 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 8007878:	e005      	b.n	8007886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb4a 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fb51 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b04      	cmp	r3, #4
 8007898:	d122      	bne.n	80078e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d11b      	bne.n	80078e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0204 	mvn.w	r2, #4
 80078b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fb f83c 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 80078cc:	e005      	b.n	80078da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fb20 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fb27 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d122      	bne.n	8007934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d11b      	bne.n	8007934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0208 	mvn.w	r2, #8
 8007904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2204      	movs	r2, #4
 800790a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fb f812 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 8007920:	e005      	b.n	800792e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 faf6 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fafd 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0310 	and.w	r3, r3, #16
 800793e:	2b10      	cmp	r3, #16
 8007940:	d122      	bne.n	8007988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b10      	cmp	r3, #16
 800794e:	d11b      	bne.n	8007988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0210 	mvn.w	r2, #16
 8007958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2208      	movs	r2, #8
 800795e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fa ffe8 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 8007974:	e005      	b.n	8007982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 facc 	bl	8007f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fad3 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b01      	cmp	r3, #1
 8007994:	d10e      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d107      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0201 	mvn.w	r2, #1
 80079ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7f9 ffbe 	bl	8001930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d10e      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d107      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 ff78 	bl	80088d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	d10e      	bne.n	8007a0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	d107      	bne.n	8007a0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa98 	bl	8007f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d10e      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d107      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0220 	mvn.w	r2, #32
 8007a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 ff42 	bl	80088bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e088      	b.n	8007b70 <HAL_TIM_IC_ConfigChannel+0x130>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d11b      	bne.n	8007aa4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f000 fcb8 	bl	80083f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 020c 	bic.w	r2, r2, #12
 8007a8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	619a      	str	r2, [r3, #24]
 8007aa2:	e060      	b.n	8007b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d11c      	bne.n	8007ae4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	6819      	ldr	r1, [r3, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f000 fd3c 	bl	8008536 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	699a      	ldr	r2, [r3, #24]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007acc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6999      	ldr	r1, [r3, #24]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	021a      	lsls	r2, r3, #8
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	619a      	str	r2, [r3, #24]
 8007ae2:	e040      	b.n	8007b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d11b      	bne.n	8007b22 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f000 fd89 	bl	8008610 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 020c 	bic.w	r2, r2, #12
 8007b0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69d9      	ldr	r1, [r3, #28]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	61da      	str	r2, [r3, #28]
 8007b20:	e021      	b.n	8007b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b0c      	cmp	r3, #12
 8007b26:	d11c      	bne.n	8007b62 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	6819      	ldr	r1, [r3, #0]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f000 fda6 	bl	8008688 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69da      	ldr	r2, [r3, #28]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b4a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69d9      	ldr	r1, [r3, #28]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	021a      	lsls	r2, r3, #8
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	61da      	str	r2, [r3, #28]
 8007b60:	e001      	b.n	8007b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d101      	bne.n	8007b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e0ae      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b0c      	cmp	r3, #12
 8007ba2:	f200 809f 	bhi.w	8007ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007be1 	.word	0x08007be1
 8007bb0:	08007ce5 	.word	0x08007ce5
 8007bb4:	08007ce5 	.word	0x08007ce5
 8007bb8:	08007ce5 	.word	0x08007ce5
 8007bbc:	08007c21 	.word	0x08007c21
 8007bc0:	08007ce5 	.word	0x08007ce5
 8007bc4:	08007ce5 	.word	0x08007ce5
 8007bc8:	08007ce5 	.word	0x08007ce5
 8007bcc:	08007c63 	.word	0x08007c63
 8007bd0:	08007ce5 	.word	0x08007ce5
 8007bd4:	08007ce5 	.word	0x08007ce5
 8007bd8:	08007ce5 	.word	0x08007ce5
 8007bdc:	08007ca3 	.word	0x08007ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fa52 	bl	8008090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0208 	orr.w	r2, r2, #8
 8007bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0204 	bic.w	r2, r2, #4
 8007c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6999      	ldr	r1, [r3, #24]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691a      	ldr	r2, [r3, #16]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	619a      	str	r2, [r3, #24]
      break;
 8007c1e:	e064      	b.n	8007cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 faa2 	bl	8008170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6999      	ldr	r1, [r3, #24]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	021a      	lsls	r2, r3, #8
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	619a      	str	r2, [r3, #24]
      break;
 8007c60:	e043      	b.n	8007cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 faf7 	bl	800825c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0208 	orr.w	r2, r2, #8
 8007c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0204 	bic.w	r2, r2, #4
 8007c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69d9      	ldr	r1, [r3, #28]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	61da      	str	r2, [r3, #28]
      break;
 8007ca0:	e023      	b.n	8007cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fb4b 	bl	8008344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69d9      	ldr	r1, [r3, #28]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	021a      	lsls	r2, r3, #8
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	61da      	str	r2, [r3, #28]
      break;
 8007ce2:	e002      	b.n	8007cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_TIM_ConfigClockSource+0x1c>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e0b4      	b.n	8007e82 <HAL_TIM_ConfigClockSource+0x186>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d50:	d03e      	beq.n	8007dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8007d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d56:	f200 8087 	bhi.w	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5e:	f000 8086 	beq.w	8007e6e <HAL_TIM_ConfigClockSource+0x172>
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d66:	d87f      	bhi.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d68:	2b70      	cmp	r3, #112	; 0x70
 8007d6a:	d01a      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0xa6>
 8007d6c:	2b70      	cmp	r3, #112	; 0x70
 8007d6e:	d87b      	bhi.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d70:	2b60      	cmp	r3, #96	; 0x60
 8007d72:	d050      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0x11a>
 8007d74:	2b60      	cmp	r3, #96	; 0x60
 8007d76:	d877      	bhi.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d78:	2b50      	cmp	r3, #80	; 0x50
 8007d7a:	d03c      	beq.n	8007df6 <HAL_TIM_ConfigClockSource+0xfa>
 8007d7c:	2b50      	cmp	r3, #80	; 0x50
 8007d7e:	d873      	bhi.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d80:	2b40      	cmp	r3, #64	; 0x40
 8007d82:	d058      	beq.n	8007e36 <HAL_TIM_ConfigClockSource+0x13a>
 8007d84:	2b40      	cmp	r3, #64	; 0x40
 8007d86:	d86f      	bhi.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d88:	2b30      	cmp	r3, #48	; 0x30
 8007d8a:	d064      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x15a>
 8007d8c:	2b30      	cmp	r3, #48	; 0x30
 8007d8e:	d86b      	bhi.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d060      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x15a>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d867      	bhi.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d05c      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x15a>
 8007d9c:	2b10      	cmp	r3, #16
 8007d9e:	d05a      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x15a>
 8007da0:	e062      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	6899      	ldr	r1, [r3, #8]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f000 fcc1 	bl	8008738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	609a      	str	r2, [r3, #8]
      break;
 8007dce:	e04f      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	6899      	ldr	r1, [r3, #8]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f000 fcaa 	bl	8008738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007df2:	609a      	str	r2, [r3, #8]
      break;
 8007df4:	e03c      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	6859      	ldr	r1, [r3, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f000 fb68 	bl	80084d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2150      	movs	r1, #80	; 0x50
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 fc77 	bl	8008702 <TIM_ITRx_SetConfig>
      break;
 8007e14:	e02c      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6859      	ldr	r1, [r3, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f000 fbc4 	bl	80085b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2160      	movs	r1, #96	; 0x60
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fc67 	bl	8008702 <TIM_ITRx_SetConfig>
      break;
 8007e34:	e01c      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6859      	ldr	r1, [r3, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f000 fb48 	bl	80084d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2140      	movs	r1, #64	; 0x40
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fc57 	bl	8008702 <TIM_ITRx_SetConfig>
      break;
 8007e54:	e00c      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4610      	mov	r0, r2
 8007e62:	f000 fc4e 	bl	8008702 <TIM_ITRx_SetConfig>
      break;
 8007e66:	e003      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6c:	e000      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b0c      	cmp	r3, #12
 8007e9e:	d831      	bhi.n	8007f04 <HAL_TIM_ReadCapturedValue+0x78>
 8007ea0:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007edd 	.word	0x08007edd
 8007eac:	08007f05 	.word	0x08007f05
 8007eb0:	08007f05 	.word	0x08007f05
 8007eb4:	08007f05 	.word	0x08007f05
 8007eb8:	08007ee7 	.word	0x08007ee7
 8007ebc:	08007f05 	.word	0x08007f05
 8007ec0:	08007f05 	.word	0x08007f05
 8007ec4:	08007f05 	.word	0x08007f05
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007f05 	.word	0x08007f05
 8007ed0:	08007f05 	.word	0x08007f05
 8007ed4:	08007f05 	.word	0x08007f05
 8007ed8:	08007efb 	.word	0x08007efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee2:	60fb      	str	r3, [r7, #12]

      break;
 8007ee4:	e00f      	b.n	8007f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	60fb      	str	r3, [r7, #12]

      break;
 8007eee:	e00a      	b.n	8007f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	60fb      	str	r3, [r7, #12]

      break;
 8007ef8:	e005      	b.n	8007f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	60fb      	str	r3, [r7, #12]

      break;
 8007f02:	e000      	b.n	8007f06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007f04:	bf00      	nop
  }

  return tmpreg;
 8007f06:	68fb      	ldr	r3, [r7, #12]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a40      	ldr	r2, [pc, #256]	; (8008064 <TIM_Base_SetConfig+0x114>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6e:	d00f      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a3d      	ldr	r2, [pc, #244]	; (8008068 <TIM_Base_SetConfig+0x118>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00b      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a3c      	ldr	r2, [pc, #240]	; (800806c <TIM_Base_SetConfig+0x11c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d007      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a3b      	ldr	r2, [pc, #236]	; (8008070 <TIM_Base_SetConfig+0x120>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a3a      	ldr	r2, [pc, #232]	; (8008074 <TIM_Base_SetConfig+0x124>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d108      	bne.n	8007fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a2f      	ldr	r2, [pc, #188]	; (8008064 <TIM_Base_SetConfig+0x114>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d02b      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d027      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a2c      	ldr	r2, [pc, #176]	; (8008068 <TIM_Base_SetConfig+0x118>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d023      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a2b      	ldr	r2, [pc, #172]	; (800806c <TIM_Base_SetConfig+0x11c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01f      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a2a      	ldr	r2, [pc, #168]	; (8008070 <TIM_Base_SetConfig+0x120>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01b      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a29      	ldr	r2, [pc, #164]	; (8008074 <TIM_Base_SetConfig+0x124>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d017      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a28      	ldr	r2, [pc, #160]	; (8008078 <TIM_Base_SetConfig+0x128>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d013      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a27      	ldr	r2, [pc, #156]	; (800807c <TIM_Base_SetConfig+0x12c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00f      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a26      	ldr	r2, [pc, #152]	; (8008080 <TIM_Base_SetConfig+0x130>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00b      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a25      	ldr	r2, [pc, #148]	; (8008084 <TIM_Base_SetConfig+0x134>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d007      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a24      	ldr	r2, [pc, #144]	; (8008088 <TIM_Base_SetConfig+0x138>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a23      	ldr	r2, [pc, #140]	; (800808c <TIM_Base_SetConfig+0x13c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d108      	bne.n	8008014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <TIM_Base_SetConfig+0x114>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_Base_SetConfig+0xf8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a0c      	ldr	r2, [pc, #48]	; (8008074 <TIM_Base_SetConfig+0x124>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d103      	bne.n	8008050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	615a      	str	r2, [r3, #20]
}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40010000 	.word	0x40010000
 8008068:	40000400 	.word	0x40000400
 800806c:	40000800 	.word	0x40000800
 8008070:	40000c00 	.word	0x40000c00
 8008074:	40010400 	.word	0x40010400
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800
 8008084:	40001800 	.word	0x40001800
 8008088:	40001c00 	.word	0x40001c00
 800808c:	40002000 	.word	0x40002000

08008090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	f023 0201 	bic.w	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f023 0302 	bic.w	r3, r3, #2
 80080d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a20      	ldr	r2, [pc, #128]	; (8008168 <TIM_OC1_SetConfig+0xd8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d003      	beq.n	80080f4 <TIM_OC1_SetConfig+0x64>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a1f      	ldr	r2, [pc, #124]	; (800816c <TIM_OC1_SetConfig+0xdc>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d10c      	bne.n	800810e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f023 0308 	bic.w	r3, r3, #8
 80080fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f023 0304 	bic.w	r3, r3, #4
 800810c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a15      	ldr	r2, [pc, #84]	; (8008168 <TIM_OC1_SetConfig+0xd8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d003      	beq.n	800811e <TIM_OC1_SetConfig+0x8e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a14      	ldr	r2, [pc, #80]	; (800816c <TIM_OC1_SetConfig+0xdc>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d111      	bne.n	8008142 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800812c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	621a      	str	r2, [r3, #32]
}
 800815c:	bf00      	nop
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	40010000 	.word	0x40010000
 800816c:	40010400 	.word	0x40010400

08008170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	f023 0210 	bic.w	r2, r3, #16
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0320 	bic.w	r3, r3, #32
 80081ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a22      	ldr	r2, [pc, #136]	; (8008254 <TIM_OC2_SetConfig+0xe4>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d003      	beq.n	80081d8 <TIM_OC2_SetConfig+0x68>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a21      	ldr	r2, [pc, #132]	; (8008258 <TIM_OC2_SetConfig+0xe8>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d10d      	bne.n	80081f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	011b      	lsls	r3, r3, #4
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a17      	ldr	r2, [pc, #92]	; (8008254 <TIM_OC2_SetConfig+0xe4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d003      	beq.n	8008204 <TIM_OC2_SetConfig+0x94>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a16      	ldr	r2, [pc, #88]	; (8008258 <TIM_OC2_SetConfig+0xe8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d113      	bne.n	800822c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800820a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40010000 	.word	0x40010000
 8008258:	40010400 	.word	0x40010400

0800825c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a21      	ldr	r2, [pc, #132]	; (800833c <TIM_OC3_SetConfig+0xe0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d003      	beq.n	80082c2 <TIM_OC3_SetConfig+0x66>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a20      	ldr	r2, [pc, #128]	; (8008340 <TIM_OC3_SetConfig+0xe4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d10d      	bne.n	80082de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a16      	ldr	r2, [pc, #88]	; (800833c <TIM_OC3_SetConfig+0xe0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d003      	beq.n	80082ee <TIM_OC3_SetConfig+0x92>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a15      	ldr	r2, [pc, #84]	; (8008340 <TIM_OC3_SetConfig+0xe4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d113      	bne.n	8008316 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	621a      	str	r2, [r3, #32]
}
 8008330:	bf00      	nop
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40010000 	.word	0x40010000
 8008340:	40010400 	.word	0x40010400

08008344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800837a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800838e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	031b      	lsls	r3, r3, #12
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a12      	ldr	r2, [pc, #72]	; (80083e8 <TIM_OC4_SetConfig+0xa4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_OC4_SetConfig+0x68>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a11      	ldr	r2, [pc, #68]	; (80083ec <TIM_OC4_SetConfig+0xa8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d109      	bne.n	80083c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	019b      	lsls	r3, r3, #6
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	621a      	str	r2, [r3, #32]
}
 80083da:	bf00      	nop
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40010400 	.word	0x40010400

080083f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	f023 0201 	bic.w	r2, r3, #1
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4a28      	ldr	r2, [pc, #160]	; (80084bc <TIM_TI1_SetConfig+0xcc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01b      	beq.n	8008456 <TIM_TI1_SetConfig+0x66>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008424:	d017      	beq.n	8008456 <TIM_TI1_SetConfig+0x66>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4a25      	ldr	r2, [pc, #148]	; (80084c0 <TIM_TI1_SetConfig+0xd0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <TIM_TI1_SetConfig+0x66>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a24      	ldr	r2, [pc, #144]	; (80084c4 <TIM_TI1_SetConfig+0xd4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00f      	beq.n	8008456 <TIM_TI1_SetConfig+0x66>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4a23      	ldr	r2, [pc, #140]	; (80084c8 <TIM_TI1_SetConfig+0xd8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <TIM_TI1_SetConfig+0x66>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4a22      	ldr	r2, [pc, #136]	; (80084cc <TIM_TI1_SetConfig+0xdc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_TI1_SetConfig+0x66>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a21      	ldr	r2, [pc, #132]	; (80084d0 <TIM_TI1_SetConfig+0xe0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_TI1_SetConfig+0x66>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a20      	ldr	r2, [pc, #128]	; (80084d4 <TIM_TI1_SetConfig+0xe4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d101      	bne.n	800845a <TIM_TI1_SetConfig+0x6a>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <TIM_TI1_SetConfig+0x6c>
 800845a:	2300      	movs	r3, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d008      	beq.n	8008472 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	e003      	b.n	800847a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f043 0301 	orr.w	r3, r3, #1
 8008478:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	b2db      	uxtb	r3, r3
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f023 030a 	bic.w	r3, r3, #10
 8008494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f003 030a 	and.w	r3, r3, #10
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	621a      	str	r2, [r3, #32]
}
 80084ae:	bf00      	nop
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40010000 	.word	0x40010000
 80084c0:	40000400 	.word	0x40000400
 80084c4:	40000800 	.word	0x40000800
 80084c8:	40000c00 	.word	0x40000c00
 80084cc:	40010400 	.word	0x40010400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40001800 	.word	0x40001800

080084d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 030a 	bic.w	r3, r3, #10
 8008514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008536:	b480      	push	{r7}
 8008538:	b087      	sub	sp, #28
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	f023 0210 	bic.w	r2, r3, #16
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008562:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	031b      	lsls	r3, r3, #12
 800857a:	b29b      	uxth	r3, r3
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008588:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	621a      	str	r2, [r3, #32]
}
 80085a4:	bf00      	nop
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	f023 0210 	bic.w	r2, r3, #16
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	031b      	lsls	r3, r3, #12
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	621a      	str	r2, [r3, #32]
}
 8008604:	bf00      	nop
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 0303 	bic.w	r3, r3, #3
 800863c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800864c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	b2db      	uxtb	r3, r3
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008660:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	621a      	str	r2, [r3, #32]
}
 800867c:	bf00      	nop
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	021b      	lsls	r3, r3, #8
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	4313      	orrs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	031b      	lsls	r3, r3, #12
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80086da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	031b      	lsls	r3, r3, #12
 80086e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	621a      	str	r2, [r3, #32]
}
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	f043 0307 	orr.w	r3, r3, #7
 8008724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	609a      	str	r2, [r3, #8]
}
 800872c:	bf00      	nop
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	021a      	lsls	r2, r3, #8
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	431a      	orrs	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4313      	orrs	r3, r2
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	609a      	str	r2, [r3, #8]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	2201      	movs	r2, #1
 800878c:	fa02 f303 	lsl.w	r3, r2, r3
 8008790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1a      	ldr	r2, [r3, #32]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	43db      	mvns	r3, r3
 800879a:	401a      	ands	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1a      	ldr	r2, [r3, #32]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f003 031f 	and.w	r3, r3, #31
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	fa01 f303 	lsl.w	r3, r1, r3
 80087b0:	431a      	orrs	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d8:	2302      	movs	r3, #2
 80087da:	e05a      	b.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a21      	ldr	r2, [pc, #132]	; (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d022      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008828:	d01d      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d018      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a1b      	ldr	r2, [pc, #108]	; (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d013      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a1a      	ldr	r2, [pc, #104]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00e      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d009      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a17      	ldr	r2, [pc, #92]	; (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d004      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a15      	ldr	r2, [pc, #84]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d10c      	bne.n	8008880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800886c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	4313      	orrs	r3, r2
 8008876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40000c00 	.word	0x40000c00
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40001800 	.word	0x40001800

080088bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e03f      	b.n	8008976 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7f9 fb9c 	bl	8002048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2224      	movs	r2, #36	; 0x24
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fddf 	bl	80094ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800893c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	695a      	ldr	r2, [r3, #20]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800894c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800895c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b08a      	sub	sp, #40	; 0x28
 8008982:	af02      	add	r7, sp, #8
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	4613      	mov	r3, r2
 800898c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b20      	cmp	r3, #32
 800899c:	d17c      	bne.n	8008a98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <HAL_UART_Transmit+0x2c>
 80089a4:	88fb      	ldrh	r3, [r7, #6]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e075      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Transmit+0x3e>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e06e      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2221      	movs	r2, #33	; 0x21
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089d2:	f7fa f9ad 	bl	8002d30 <HAL_GetTick>
 80089d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	88fa      	ldrh	r2, [r7, #6]
 80089dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ec:	d108      	bne.n	8008a00 <HAL_UART_Transmit+0x82>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d104      	bne.n	8008a00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	61bb      	str	r3, [r7, #24]
 80089fe:	e003      	b.n	8008a08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a10:	e02a      	b.n	8008a68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2180      	movs	r1, #128	; 0x80
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fb1f 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e036      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	3302      	adds	r3, #2
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	e007      	b.n	8008a5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	3301      	adds	r3, #1
 8008a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1cf      	bne.n	8008a12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2140      	movs	r1, #64	; 0x40
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 faef 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e006      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e000      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a98:	2302      	movs	r3, #2
  }
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	4613      	mov	r3, r2
 8008aae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d11d      	bne.n	8008af8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_UART_Receive_IT+0x26>
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e016      	b.n	8008afa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Receive_IT+0x38>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e00f      	b.n	8008afa <HAL_UART_Receive_IT+0x58>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ae8:	88fb      	ldrh	r3, [r7, #6]
 8008aea:	461a      	mov	r2, r3
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fb24 	bl	800913c <UART_Start_Receive_IT>
 8008af4:	4603      	mov	r3, r0
 8008af6:	e000      	b.n	8008afa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
  }
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b0ba      	sub	sp, #232	; 0xe8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10f      	bne.n	8008b6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <HAL_UART_IRQHandler+0x66>
 8008b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc07 	bl	8009376 <UART_Receive_IT>
      return;
 8008b68:	e256      	b.n	8009018 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 80de 	beq.w	8008d30 <HAL_UART_IRQHandler+0x22c>
 8008b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 80d1 	beq.w	8008d30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00b      	beq.n	8008bb2 <HAL_UART_IRQHandler+0xae>
 8008b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	f043 0201 	orr.w	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <HAL_UART_IRQHandler+0xd2>
 8008bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	f043 0202 	orr.w	r2, r3, #2
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <HAL_UART_IRQHandler+0xf6>
 8008be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d005      	beq.n	8008bfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf2:	f043 0204 	orr.w	r2, r3, #4
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d011      	beq.n	8008c2a <HAL_UART_IRQHandler+0x126>
 8008c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c0a:	f003 0320 	and.w	r3, r3, #32
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d105      	bne.n	8008c1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f043 0208 	orr.w	r2, r3, #8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 81ed 	beq.w	800900e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <HAL_UART_IRQHandler+0x14e>
 8008c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fb92 	bl	8009376 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5c:	2b40      	cmp	r3, #64	; 0x40
 8008c5e:	bf0c      	ite	eq
 8008c60:	2301      	moveq	r3, #1
 8008c62:	2300      	movne	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <HAL_UART_IRQHandler+0x17a>
 8008c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d04f      	beq.n	8008d1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa9a 	bl	80091b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d141      	bne.n	8008d16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3314      	adds	r3, #20
 8008c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3314      	adds	r3, #20
 8008cba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008cbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1d9      	bne.n	8008c92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d013      	beq.n	8008d0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	4a7d      	ldr	r2, [pc, #500]	; (8008ee0 <HAL_UART_IRQHandler+0x3dc>)
 8008cec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fa fe2a 	bl	800394c <HAL_DMA_Abort_IT>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d016      	beq.n	8008d2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d0c:	e00e      	b.n	8008d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f990 	bl	8009034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d14:	e00a      	b.n	8008d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f98c 	bl	8009034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d1c:	e006      	b.n	8008d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f988 	bl	8009034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008d2a:	e170      	b.n	800900e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d2c:	bf00      	nop
    return;
 8008d2e:	e16e      	b.n	800900e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	f040 814a 	bne.w	8008fce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3e:	f003 0310 	and.w	r3, r3, #16
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8143 	beq.w	8008fce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d4c:	f003 0310 	and.w	r3, r3, #16
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 813c 	beq.w	8008fce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d56:	2300      	movs	r3, #0
 8008d58:	60bb      	str	r3, [r7, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60bb      	str	r3, [r7, #8]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	60bb      	str	r3, [r7, #8]
 8008d6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b40      	cmp	r3, #64	; 0x40
 8008d78:	f040 80b4 	bne.w	8008ee4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 8140 	beq.w	8009012 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	f080 8139 	bcs.w	8009012 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008da6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db2:	f000 8088 	beq.w	8008ec6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	330c      	adds	r3, #12
 8008dde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008dee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008df2:	e841 2300 	strex	r3, r2, [r1]
 8008df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1d9      	bne.n	8008db6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3314      	adds	r3, #20
 8008e08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e1      	bne.n	8008e02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3314      	adds	r3, #20
 8008e44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1e3      	bne.n	8008e3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e96:	f023 0310 	bic.w	r3, r3, #16
 8008e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	330c      	adds	r3, #12
 8008ea4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ea8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008eaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e3      	bne.n	8008e84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fa fcd3 	bl	800386c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f8b6 	bl	8009048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008edc:	e099      	b.n	8009012 <HAL_UART_IRQHandler+0x50e>
 8008ede:	bf00      	nop
 8008ee0:	0800927f 	.word	0x0800927f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 808b 	beq.w	8009016 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8086 	beq.w	8009016 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	330c      	adds	r3, #12
 8008f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f2e:	647a      	str	r2, [r7, #68]	; 0x44
 8008f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e3      	bne.n	8008f0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3314      	adds	r3, #20
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	623b      	str	r3, [r7, #32]
   return(result);
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	f023 0301 	bic.w	r3, r3, #1
 8008f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3314      	adds	r3, #20
 8008f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f66:	633a      	str	r2, [r7, #48]	; 0x30
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e3      	bne.n	8008f42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 0310 	bic.w	r3, r3, #16
 8008f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008fac:	61fa      	str	r2, [r7, #28]
 8008fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	69b9      	ldr	r1, [r7, #24]
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e3      	bne.n	8008f88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f83e 	bl	8009048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fcc:	e023      	b.n	8009016 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <HAL_UART_IRQHandler+0x4ea>
 8008fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f95d 	bl	80092a6 <UART_Transmit_IT>
    return;
 8008fec:	e014      	b.n	8009018 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00e      	beq.n	8009018 <HAL_UART_IRQHandler+0x514>
 8008ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f99d 	bl	8009346 <UART_EndTransmit_IT>
    return;
 800900c:	e004      	b.n	8009018 <HAL_UART_IRQHandler+0x514>
    return;
 800900e:	bf00      	nop
 8009010:	e002      	b.n	8009018 <HAL_UART_IRQHandler+0x514>
      return;
 8009012:	bf00      	nop
 8009014:	e000      	b.n	8009018 <HAL_UART_IRQHandler+0x514>
      return;
 8009016:	bf00      	nop
  }
}
 8009018:	37e8      	adds	r7, #232	; 0xe8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop

08009020 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b090      	sub	sp, #64	; 0x40
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009070:	e050      	b.n	8009114 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d04c      	beq.n	8009114 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800907a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907c:	2b00      	cmp	r3, #0
 800907e:	d007      	beq.n	8009090 <UART_WaitOnFlagUntilTimeout+0x30>
 8009080:	f7f9 fe56 	bl	8002d30 <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800908c:	429a      	cmp	r2, r3
 800908e:	d241      	bcs.n	8009114 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	330c      	adds	r3, #12
 80090ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090b0:	637a      	str	r2, [r7, #52]	; 0x34
 80090b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e5      	bne.n	8009090 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3314      	adds	r3, #20
 80090ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	613b      	str	r3, [r7, #16]
   return(result);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f023 0301 	bic.w	r3, r3, #1
 80090da:	63bb      	str	r3, [r7, #56]	; 0x38
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3314      	adds	r3, #20
 80090e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090e4:	623a      	str	r2, [r7, #32]
 80090e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	69f9      	ldr	r1, [r7, #28]
 80090ea:	6a3a      	ldr	r2, [r7, #32]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e5      	bne.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e00f      	b.n	8009134 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	4013      	ands	r3, r2
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	429a      	cmp	r2, r3
 8009122:	bf0c      	ite	eq
 8009124:	2301      	moveq	r3, #1
 8009126:	2300      	movne	r3, #0
 8009128:	b2db      	uxtb	r3, r3
 800912a:	461a      	mov	r2, r3
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	429a      	cmp	r2, r3
 8009130:	d09f      	beq.n	8009072 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3740      	adds	r7, #64	; 0x40
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	88fa      	ldrh	r2, [r7, #6]
 8009154:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	88fa      	ldrh	r2, [r7, #6]
 800915a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2222      	movs	r2, #34	; 0x22
 8009166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009188:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0201 	orr.w	r2, r2, #1
 8009198:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f042 0220 	orr.w	r2, r2, #32
 80091a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b095      	sub	sp, #84	; 0x54
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	330c      	adds	r3, #12
 80091de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091e0:	643a      	str	r2, [r7, #64]	; 0x40
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e5      	bne.n	80091c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3314      	adds	r3, #20
 80091fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	61fb      	str	r3, [r7, #28]
   return(result);
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f023 0301 	bic.w	r3, r3, #1
 800920a:	64bb      	str	r3, [r7, #72]	; 0x48
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3314      	adds	r3, #20
 8009212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009214:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800921a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e5      	bne.n	80091f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	2b01      	cmp	r3, #1
 800922e:	d119      	bne.n	8009264 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	330c      	adds	r3, #12
 8009236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f023 0310 	bic.w	r3, r3, #16
 8009246:	647b      	str	r3, [r7, #68]	; 0x44
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009250:	61ba      	str	r2, [r7, #24]
 8009252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6979      	ldr	r1, [r7, #20]
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	613b      	str	r3, [r7, #16]
   return(result);
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e5      	bne.n	8009230 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009272:	bf00      	nop
 8009274:	3754      	adds	r7, #84	; 0x54
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff fecb 	bl	8009034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b085      	sub	sp, #20
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b21      	cmp	r3, #33	; 0x21
 80092b8:	d13e      	bne.n	8009338 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c2:	d114      	bne.n	80092ee <UART_Transmit_IT+0x48>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d110      	bne.n	80092ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	1c9a      	adds	r2, r3, #2
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	621a      	str	r2, [r3, #32]
 80092ec:	e008      	b.n	8009300 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	1c59      	adds	r1, r3, #1
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6211      	str	r1, [r2, #32]
 80092f8:	781a      	ldrb	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b29b      	uxth	r3, r3
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	4619      	mov	r1, r3
 800930e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10f      	bne.n	8009334 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009322:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009332:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	e000      	b.n	800933a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009338:	2302      	movs	r3, #2
  }
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800935c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fe5a 	bl	8009020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b08c      	sub	sp, #48	; 0x30
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b22      	cmp	r3, #34	; 0x22
 8009388:	f040 80ab 	bne.w	80094e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009394:	d117      	bne.n	80093c6 <UART_Receive_IT+0x50>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d113      	bne.n	80093c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	1c9a      	adds	r2, r3, #2
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	629a      	str	r2, [r3, #40]	; 0x28
 80093c4:	e026      	b.n	8009414 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d8:	d007      	beq.n	80093ea <UART_Receive_IT+0x74>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <UART_Receive_IT+0x82>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	e008      	b.n	800940a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009404:	b2da      	uxtb	r2, r3
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009408:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009418:	b29b      	uxth	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	b29b      	uxth	r3, r3
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4619      	mov	r1, r3
 8009422:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009424:	2b00      	cmp	r3, #0
 8009426:	d15a      	bne.n	80094de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0220 	bic.w	r2, r2, #32
 8009436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695a      	ldr	r2, [r3, #20]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0201 	bic.w	r2, r2, #1
 8009456:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	2b01      	cmp	r3, #1
 8009466:	d135      	bne.n	80094d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	330c      	adds	r3, #12
 8009474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	613b      	str	r3, [r7, #16]
   return(result);
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f023 0310 	bic.w	r3, r3, #16
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	330c      	adds	r3, #12
 800948c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948e:	623a      	str	r2, [r7, #32]
 8009490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	69f9      	ldr	r1, [r7, #28]
 8009494:	6a3a      	ldr	r2, [r7, #32]
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	61bb      	str	r3, [r7, #24]
   return(result);
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e5      	bne.n	800946e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	2b10      	cmp	r3, #16
 80094ae:	d10a      	bne.n	80094c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fdbb 	bl	8009048 <HAL_UARTEx_RxEventCallback>
 80094d2:	e002      	b.n	80094da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7f9 f89b 	bl	8002610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	e002      	b.n	80094e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	e000      	b.n	80094e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094e2:	2302      	movs	r3, #2
  }
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3730      	adds	r7, #48	; 0x30
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094f0:	b0c0      	sub	sp, #256	; 0x100
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009508:	68d9      	ldr	r1, [r3, #12]
 800950a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	ea40 0301 	orr.w	r3, r0, r1
 8009514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	431a      	orrs	r2, r3
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	431a      	orrs	r2, r3
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	4313      	orrs	r3, r2
 8009534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009544:	f021 010c 	bic.w	r1, r1, #12
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009552:	430b      	orrs	r3, r1
 8009554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009566:	6999      	ldr	r1, [r3, #24]
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	ea40 0301 	orr.w	r3, r0, r1
 8009572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b8f      	ldr	r3, [pc, #572]	; (80097b8 <UART_SetConfig+0x2cc>)
 800957c:	429a      	cmp	r2, r3
 800957e:	d005      	beq.n	800958c <UART_SetConfig+0xa0>
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b8d      	ldr	r3, [pc, #564]	; (80097bc <UART_SetConfig+0x2d0>)
 8009588:	429a      	cmp	r2, r3
 800958a:	d104      	bne.n	8009596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800958c:	f7fd f8b0 	bl	80066f0 <HAL_RCC_GetPCLK2Freq>
 8009590:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009594:	e003      	b.n	800959e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009596:	f7fd f897 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 800959a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800959e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a8:	f040 810c 	bne.w	80097c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095be:	4622      	mov	r2, r4
 80095c0:	462b      	mov	r3, r5
 80095c2:	1891      	adds	r1, r2, r2
 80095c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80095c6:	415b      	adcs	r3, r3
 80095c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095ce:	4621      	mov	r1, r4
 80095d0:	eb12 0801 	adds.w	r8, r2, r1
 80095d4:	4629      	mov	r1, r5
 80095d6:	eb43 0901 	adc.w	r9, r3, r1
 80095da:	f04f 0200 	mov.w	r2, #0
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095ee:	4690      	mov	r8, r2
 80095f0:	4699      	mov	r9, r3
 80095f2:	4623      	mov	r3, r4
 80095f4:	eb18 0303 	adds.w	r3, r8, r3
 80095f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095fc:	462b      	mov	r3, r5
 80095fe:	eb49 0303 	adc.w	r3, r9, r3
 8009602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009612:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800961a:	460b      	mov	r3, r1
 800961c:	18db      	adds	r3, r3, r3
 800961e:	653b      	str	r3, [r7, #80]	; 0x50
 8009620:	4613      	mov	r3, r2
 8009622:	eb42 0303 	adc.w	r3, r2, r3
 8009626:	657b      	str	r3, [r7, #84]	; 0x54
 8009628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800962c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009630:	f7f6 fe2e 	bl	8000290 <__aeabi_uldivmod>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4b61      	ldr	r3, [pc, #388]	; (80097c0 <UART_SetConfig+0x2d4>)
 800963a:	fba3 2302 	umull	r2, r3, r3, r2
 800963e:	095b      	lsrs	r3, r3, #5
 8009640:	011c      	lsls	r4, r3, #4
 8009642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009646:	2200      	movs	r2, #0
 8009648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800964c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009654:	4642      	mov	r2, r8
 8009656:	464b      	mov	r3, r9
 8009658:	1891      	adds	r1, r2, r2
 800965a:	64b9      	str	r1, [r7, #72]	; 0x48
 800965c:	415b      	adcs	r3, r3
 800965e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009664:	4641      	mov	r1, r8
 8009666:	eb12 0a01 	adds.w	sl, r2, r1
 800966a:	4649      	mov	r1, r9
 800966c:	eb43 0b01 	adc.w	fp, r3, r1
 8009670:	f04f 0200 	mov.w	r2, #0
 8009674:	f04f 0300 	mov.w	r3, #0
 8009678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800967c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009684:	4692      	mov	sl, r2
 8009686:	469b      	mov	fp, r3
 8009688:	4643      	mov	r3, r8
 800968a:	eb1a 0303 	adds.w	r3, sl, r3
 800968e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009692:	464b      	mov	r3, r9
 8009694:	eb4b 0303 	adc.w	r3, fp, r3
 8009698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800969c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096b0:	460b      	mov	r3, r1
 80096b2:	18db      	adds	r3, r3, r3
 80096b4:	643b      	str	r3, [r7, #64]	; 0x40
 80096b6:	4613      	mov	r3, r2
 80096b8:	eb42 0303 	adc.w	r3, r2, r3
 80096bc:	647b      	str	r3, [r7, #68]	; 0x44
 80096be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096c6:	f7f6 fde3 	bl	8000290 <__aeabi_uldivmod>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	4611      	mov	r1, r2
 80096d0:	4b3b      	ldr	r3, [pc, #236]	; (80097c0 <UART_SetConfig+0x2d4>)
 80096d2:	fba3 2301 	umull	r2, r3, r3, r1
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	2264      	movs	r2, #100	; 0x64
 80096da:	fb02 f303 	mul.w	r3, r2, r3
 80096de:	1acb      	subs	r3, r1, r3
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096e6:	4b36      	ldr	r3, [pc, #216]	; (80097c0 <UART_SetConfig+0x2d4>)
 80096e8:	fba3 2302 	umull	r2, r3, r3, r2
 80096ec:	095b      	lsrs	r3, r3, #5
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096f4:	441c      	add	r4, r3
 80096f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009700:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009708:	4642      	mov	r2, r8
 800970a:	464b      	mov	r3, r9
 800970c:	1891      	adds	r1, r2, r2
 800970e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009710:	415b      	adcs	r3, r3
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009718:	4641      	mov	r1, r8
 800971a:	1851      	adds	r1, r2, r1
 800971c:	6339      	str	r1, [r7, #48]	; 0x30
 800971e:	4649      	mov	r1, r9
 8009720:	414b      	adcs	r3, r1
 8009722:	637b      	str	r3, [r7, #52]	; 0x34
 8009724:	f04f 0200 	mov.w	r2, #0
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009730:	4659      	mov	r1, fp
 8009732:	00cb      	lsls	r3, r1, #3
 8009734:	4651      	mov	r1, sl
 8009736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800973a:	4651      	mov	r1, sl
 800973c:	00ca      	lsls	r2, r1, #3
 800973e:	4610      	mov	r0, r2
 8009740:	4619      	mov	r1, r3
 8009742:	4603      	mov	r3, r0
 8009744:	4642      	mov	r2, r8
 8009746:	189b      	adds	r3, r3, r2
 8009748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800974c:	464b      	mov	r3, r9
 800974e:	460a      	mov	r2, r1
 8009750:	eb42 0303 	adc.w	r3, r2, r3
 8009754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009764:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800976c:	460b      	mov	r3, r1
 800976e:	18db      	adds	r3, r3, r3
 8009770:	62bb      	str	r3, [r7, #40]	; 0x28
 8009772:	4613      	mov	r3, r2
 8009774:	eb42 0303 	adc.w	r3, r2, r3
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800977a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800977e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009782:	f7f6 fd85 	bl	8000290 <__aeabi_uldivmod>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <UART_SetConfig+0x2d4>)
 800978c:	fba3 1302 	umull	r1, r3, r3, r2
 8009790:	095b      	lsrs	r3, r3, #5
 8009792:	2164      	movs	r1, #100	; 0x64
 8009794:	fb01 f303 	mul.w	r3, r1, r3
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	3332      	adds	r3, #50	; 0x32
 800979e:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <UART_SetConfig+0x2d4>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	f003 0207 	and.w	r2, r3, #7
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4422      	add	r2, r4
 80097b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097b4:	e105      	b.n	80099c2 <UART_SetConfig+0x4d6>
 80097b6:	bf00      	nop
 80097b8:	40011000 	.word	0x40011000
 80097bc:	40011400 	.word	0x40011400
 80097c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097c8:	2200      	movs	r2, #0
 80097ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097d6:	4642      	mov	r2, r8
 80097d8:	464b      	mov	r3, r9
 80097da:	1891      	adds	r1, r2, r2
 80097dc:	6239      	str	r1, [r7, #32]
 80097de:	415b      	adcs	r3, r3
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
 80097e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097e6:	4641      	mov	r1, r8
 80097e8:	1854      	adds	r4, r2, r1
 80097ea:	4649      	mov	r1, r9
 80097ec:	eb43 0501 	adc.w	r5, r3, r1
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	00eb      	lsls	r3, r5, #3
 80097fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097fe:	00e2      	lsls	r2, r4, #3
 8009800:	4614      	mov	r4, r2
 8009802:	461d      	mov	r5, r3
 8009804:	4643      	mov	r3, r8
 8009806:	18e3      	adds	r3, r4, r3
 8009808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800980c:	464b      	mov	r3, r9
 800980e:	eb45 0303 	adc.w	r3, r5, r3
 8009812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009822:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	f04f 0300 	mov.w	r3, #0
 800982e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009832:	4629      	mov	r1, r5
 8009834:	008b      	lsls	r3, r1, #2
 8009836:	4621      	mov	r1, r4
 8009838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800983c:	4621      	mov	r1, r4
 800983e:	008a      	lsls	r2, r1, #2
 8009840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009844:	f7f6 fd24 	bl	8000290 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4b60      	ldr	r3, [pc, #384]	; (80099d0 <UART_SetConfig+0x4e4>)
 800984e:	fba3 2302 	umull	r2, r3, r3, r2
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	011c      	lsls	r4, r3, #4
 8009856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800985a:	2200      	movs	r2, #0
 800985c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009868:	4642      	mov	r2, r8
 800986a:	464b      	mov	r3, r9
 800986c:	1891      	adds	r1, r2, r2
 800986e:	61b9      	str	r1, [r7, #24]
 8009870:	415b      	adcs	r3, r3
 8009872:	61fb      	str	r3, [r7, #28]
 8009874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009878:	4641      	mov	r1, r8
 800987a:	1851      	adds	r1, r2, r1
 800987c:	6139      	str	r1, [r7, #16]
 800987e:	4649      	mov	r1, r9
 8009880:	414b      	adcs	r3, r1
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	f04f 0300 	mov.w	r3, #0
 800988c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009890:	4659      	mov	r1, fp
 8009892:	00cb      	lsls	r3, r1, #3
 8009894:	4651      	mov	r1, sl
 8009896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800989a:	4651      	mov	r1, sl
 800989c:	00ca      	lsls	r2, r1, #3
 800989e:	4610      	mov	r0, r2
 80098a0:	4619      	mov	r1, r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	4642      	mov	r2, r8
 80098a6:	189b      	adds	r3, r3, r2
 80098a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098ac:	464b      	mov	r3, r9
 80098ae:	460a      	mov	r2, r1
 80098b0:	eb42 0303 	adc.w	r3, r2, r3
 80098b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80098c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098d0:	4649      	mov	r1, r9
 80098d2:	008b      	lsls	r3, r1, #2
 80098d4:	4641      	mov	r1, r8
 80098d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098da:	4641      	mov	r1, r8
 80098dc:	008a      	lsls	r2, r1, #2
 80098de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098e2:	f7f6 fcd5 	bl	8000290 <__aeabi_uldivmod>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4b39      	ldr	r3, [pc, #228]	; (80099d0 <UART_SetConfig+0x4e4>)
 80098ec:	fba3 1302 	umull	r1, r3, r3, r2
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	2164      	movs	r1, #100	; 0x64
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	3332      	adds	r3, #50	; 0x32
 80098fe:	4a34      	ldr	r2, [pc, #208]	; (80099d0 <UART_SetConfig+0x4e4>)
 8009900:	fba2 2303 	umull	r2, r3, r2, r3
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800990a:	441c      	add	r4, r3
 800990c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009910:	2200      	movs	r2, #0
 8009912:	673b      	str	r3, [r7, #112]	; 0x70
 8009914:	677a      	str	r2, [r7, #116]	; 0x74
 8009916:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800991a:	4642      	mov	r2, r8
 800991c:	464b      	mov	r3, r9
 800991e:	1891      	adds	r1, r2, r2
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	415b      	adcs	r3, r3
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800992a:	4641      	mov	r1, r8
 800992c:	1851      	adds	r1, r2, r1
 800992e:	6039      	str	r1, [r7, #0]
 8009930:	4649      	mov	r1, r9
 8009932:	414b      	adcs	r3, r1
 8009934:	607b      	str	r3, [r7, #4]
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009942:	4659      	mov	r1, fp
 8009944:	00cb      	lsls	r3, r1, #3
 8009946:	4651      	mov	r1, sl
 8009948:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800994c:	4651      	mov	r1, sl
 800994e:	00ca      	lsls	r2, r1, #3
 8009950:	4610      	mov	r0, r2
 8009952:	4619      	mov	r1, r3
 8009954:	4603      	mov	r3, r0
 8009956:	4642      	mov	r2, r8
 8009958:	189b      	adds	r3, r3, r2
 800995a:	66bb      	str	r3, [r7, #104]	; 0x68
 800995c:	464b      	mov	r3, r9
 800995e:	460a      	mov	r2, r1
 8009960:	eb42 0303 	adc.w	r3, r2, r3
 8009964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	663b      	str	r3, [r7, #96]	; 0x60
 8009970:	667a      	str	r2, [r7, #100]	; 0x64
 8009972:	f04f 0200 	mov.w	r2, #0
 8009976:	f04f 0300 	mov.w	r3, #0
 800997a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800997e:	4649      	mov	r1, r9
 8009980:	008b      	lsls	r3, r1, #2
 8009982:	4641      	mov	r1, r8
 8009984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009988:	4641      	mov	r1, r8
 800998a:	008a      	lsls	r2, r1, #2
 800998c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009990:	f7f6 fc7e 	bl	8000290 <__aeabi_uldivmod>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <UART_SetConfig+0x4e4>)
 800999a:	fba3 1302 	umull	r1, r3, r3, r2
 800999e:	095b      	lsrs	r3, r3, #5
 80099a0:	2164      	movs	r1, #100	; 0x64
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	3332      	adds	r3, #50	; 0x32
 80099ac:	4a08      	ldr	r2, [pc, #32]	; (80099d0 <UART_SetConfig+0x4e4>)
 80099ae:	fba2 2303 	umull	r2, r3, r2, r3
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	f003 020f 	and.w	r2, r3, #15
 80099b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4422      	add	r2, r4
 80099c0:	609a      	str	r2, [r3, #8]
}
 80099c2:	bf00      	nop
 80099c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099c8:	46bd      	mov	sp, r7
 80099ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ce:	bf00      	nop
 80099d0:	51eb851f 	.word	0x51eb851f

080099d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099d4:	b084      	sub	sp, #16
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	f107 001c 	add.w	r0, r7, #28
 80099e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d122      	bne.n	8009a32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d105      	bne.n	8009a26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 faa2 	bl	8009f70 <USB_CoreReset>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]
 8009a30:	e01a      	b.n	8009a68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa96 	bl	8009f70 <USB_CoreReset>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	639a      	str	r2, [r3, #56]	; 0x38
 8009a5a:	e005      	b.n	8009a68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d10b      	bne.n	8009a86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f043 0206 	orr.w	r2, r3, #6
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f043 0220 	orr.w	r2, r3, #32
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a92:	b004      	add	sp, #16
 8009a94:	4770      	bx	lr

08009a96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f023 0201 	bic.w	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d115      	bne.n	8009b06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	f7f9 f92e 	bl	8002d48 <HAL_Delay>
      ms++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa2e 	bl	8009f54 <USB_GetMode>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d01e      	beq.n	8009b3c <USB_SetCurrentMode+0x84>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b31      	cmp	r3, #49	; 0x31
 8009b02:	d9f0      	bls.n	8009ae6 <USB_SetCurrentMode+0x2e>
 8009b04:	e01a      	b.n	8009b3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d115      	bne.n	8009b38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f7f9 f915 	bl	8002d48 <HAL_Delay>
      ms++;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3301      	adds	r3, #1
 8009b22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fa15 	bl	8009f54 <USB_GetMode>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <USB_SetCurrentMode+0x84>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b31      	cmp	r3, #49	; 0x31
 8009b34:	d9f0      	bls.n	8009b18 <USB_SetCurrentMode+0x60>
 8009b36:	e001      	b.n	8009b3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e005      	b.n	8009b48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b32      	cmp	r3, #50	; 0x32
 8009b40:	d101      	bne.n	8009b46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e000      	b.n	8009b48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b50:	b084      	sub	sp, #16
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	613b      	str	r3, [r7, #16]
 8009b6e:	e009      	b.n	8009b84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	3340      	adds	r3, #64	; 0x40
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	3301      	adds	r3, #1
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	2b0e      	cmp	r3, #14
 8009b88:	d9f2      	bls.n	8009b70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d11c      	bne.n	8009bca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b9e:	f043 0302 	orr.w	r3, r3, #2
 8009ba2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8009bc8:	e00b      	b.n	8009be2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009be8:	461a      	mov	r2, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	680b      	ldr	r3, [r1, #0]
 8009c00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d10c      	bne.n	8009c22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d104      	bne.n	8009c18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c0e:	2100      	movs	r1, #0
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f965 	bl	8009ee0 <USB_SetDevSpeed>
 8009c16:	e008      	b.n	8009c2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009c18:	2101      	movs	r1, #1
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f960 	bl	8009ee0 <USB_SetDevSpeed>
 8009c20:	e003      	b.n	8009c2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c22:	2103      	movs	r1, #3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f95b 	bl	8009ee0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c2a:	2110      	movs	r1, #16
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f8f3 	bl	8009e18 <USB_FlushTxFifo>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f91f 	bl	8009e80 <USB_FlushRxFifo>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c52:	461a      	mov	r2, r3
 8009c54:	2300      	movs	r3, #0
 8009c56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5e:	461a      	mov	r2, r3
 8009c60:	2300      	movs	r3, #0
 8009c62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c70:	2300      	movs	r3, #0
 8009c72:	613b      	str	r3, [r7, #16]
 8009c74:	e043      	b.n	8009cfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c8c:	d118      	bne.n	8009cc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	e013      	b.n	8009cd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	e008      	b.n	8009cd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ccc:	461a      	mov	r2, r3
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cde:	461a      	mov	r2, r3
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	613b      	str	r3, [r7, #16]
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d3b7      	bcc.n	8009c76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d06:	2300      	movs	r3, #0
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	e043      	b.n	8009d94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d22:	d118      	bne.n	8009d56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d36:	461a      	mov	r2, r3
 8009d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	e013      	b.n	8009d68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	e008      	b.n	8009d68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d62:	461a      	mov	r2, r3
 8009d64:	2300      	movs	r3, #0
 8009d66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d74:	461a      	mov	r2, r3
 8009d76:	2300      	movs	r3, #0
 8009d78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	015a      	lsls	r2, r3, #5
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d86:	461a      	mov	r2, r3
 8009d88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	3301      	adds	r3, #1
 8009d92:	613b      	str	r3, [r7, #16]
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d3b7      	bcc.n	8009d0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009dbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	f043 0210 	orr.w	r2, r3, #16
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699a      	ldr	r2, [r3, #24]
 8009dd4:	4b0f      	ldr	r3, [pc, #60]	; (8009e14 <USB_DevInit+0x2c4>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	f043 0208 	orr.w	r2, r3, #8
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d107      	bne.n	8009e04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dfc:	f043 0304 	orr.w	r3, r3, #4
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e10:	b004      	add	sp, #16
 8009e12:	4770      	bx	lr
 8009e14:	803c3800 	.word	0x803c3800

08009e18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4a13      	ldr	r2, [pc, #76]	; (8009e7c <USB_FlushTxFifo+0x64>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d901      	bls.n	8009e38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e01b      	b.n	8009e70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	daf2      	bge.n	8009e26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	019b      	lsls	r3, r3, #6
 8009e48:	f043 0220 	orr.w	r2, r3, #32
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3301      	adds	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4a08      	ldr	r2, [pc, #32]	; (8009e7c <USB_FlushTxFifo+0x64>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d901      	bls.n	8009e62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e006      	b.n	8009e70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	d0f0      	beq.n	8009e50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	00030d40 	.word	0x00030d40

08009e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4a11      	ldr	r2, [pc, #68]	; (8009edc <USB_FlushRxFifo+0x5c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d901      	bls.n	8009e9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e018      	b.n	8009ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	daf2      	bge.n	8009e8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2210      	movs	r2, #16
 8009eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	4a08      	ldr	r2, [pc, #32]	; (8009edc <USB_FlushRxFifo+0x5c>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d901      	bls.n	8009ec2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e006      	b.n	8009ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	f003 0310 	and.w	r3, r3, #16
 8009eca:	2b10      	cmp	r3, #16
 8009ecc:	d0f0      	beq.n	8009eb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	00030d40 	.word	0x00030d40

08009ee0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	68f9      	ldr	r1, [r7, #12]
 8009efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f00:	4313      	orrs	r3, r2
 8009f02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b085      	sub	sp, #20
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f2c:	f023 0303 	bic.w	r3, r3, #3
 8009f30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f40:	f043 0302 	orr.w	r3, r3, #2
 8009f44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	f003 0301 	and.w	r3, r3, #1
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4a13      	ldr	r2, [pc, #76]	; (8009fd4 <USB_CoreReset+0x64>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d901      	bls.n	8009f8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e01b      	b.n	8009fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	daf2      	bge.n	8009f7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f043 0201 	orr.w	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4a09      	ldr	r2, [pc, #36]	; (8009fd4 <USB_CoreReset+0x64>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d901      	bls.n	8009fb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e006      	b.n	8009fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d0f0      	beq.n	8009fa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	00030d40 	.word	0x00030d40

08009fd8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8009fde:	4b98      	ldr	r3, [pc, #608]	; (800a240 <MX_LWIP_Init+0x268>)
 8009fe0:	220a      	movs	r2, #10
 8009fe2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 8009fe4:	4b96      	ldr	r3, [pc, #600]	; (800a240 <MX_LWIP_Init+0x268>)
 8009fe6:	220a      	movs	r2, #10
 8009fe8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 15;
 8009fea:	4b95      	ldr	r3, [pc, #596]	; (800a240 <MX_LWIP_Init+0x268>)
 8009fec:	220f      	movs	r2, #15
 8009fee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8009ff0:	4b93      	ldr	r3, [pc, #588]	; (800a240 <MX_LWIP_Init+0x268>)
 8009ff2:	2214      	movs	r2, #20
 8009ff4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009ff6:	4b93      	ldr	r3, [pc, #588]	; (800a244 <MX_LWIP_Init+0x26c>)
 8009ff8:	22ff      	movs	r2, #255	; 0xff
 8009ffa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009ffc:	4b91      	ldr	r3, [pc, #580]	; (800a244 <MX_LWIP_Init+0x26c>)
 8009ffe:	22ff      	movs	r2, #255	; 0xff
 800a000:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a002:	4b90      	ldr	r3, [pc, #576]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a004:	22ff      	movs	r2, #255	; 0xff
 800a006:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a008:	4b8e      	ldr	r3, [pc, #568]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a00e:	4b8e      	ldr	r3, [pc, #568]	; (800a248 <MX_LWIP_Init+0x270>)
 800a010:	220a      	movs	r2, #10
 800a012:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 800a014:	4b8c      	ldr	r3, [pc, #560]	; (800a248 <MX_LWIP_Init+0x270>)
 800a016:	220a      	movs	r2, #10
 800a018:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 15;
 800a01a:	4b8b      	ldr	r3, [pc, #556]	; (800a248 <MX_LWIP_Init+0x270>)
 800a01c:	220f      	movs	r2, #15
 800a01e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 800a020:	4b89      	ldr	r3, [pc, #548]	; (800a248 <MX_LWIP_Init+0x270>)
 800a022:	22fe      	movs	r2, #254	; 0xfe
 800a024:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a026:	2100      	movs	r1, #0
 800a028:	2000      	movs	r0, #0
 800a02a:	f004 fd7f 	bl	800eb2c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a02e:	4b84      	ldr	r3, [pc, #528]	; (800a240 <MX_LWIP_Init+0x268>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	061a      	lsls	r2, r3, #24
 800a034:	4b82      	ldr	r3, [pc, #520]	; (800a240 <MX_LWIP_Init+0x268>)
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	041b      	lsls	r3, r3, #16
 800a03a:	431a      	orrs	r2, r3
 800a03c:	4b80      	ldr	r3, [pc, #512]	; (800a240 <MX_LWIP_Init+0x268>)
 800a03e:	789b      	ldrb	r3, [r3, #2]
 800a040:	021b      	lsls	r3, r3, #8
 800a042:	4313      	orrs	r3, r2
 800a044:	4a7e      	ldr	r2, [pc, #504]	; (800a240 <MX_LWIP_Init+0x268>)
 800a046:	78d2      	ldrb	r2, [r2, #3]
 800a048:	4313      	orrs	r3, r2
 800a04a:	061a      	lsls	r2, r3, #24
 800a04c:	4b7c      	ldr	r3, [pc, #496]	; (800a240 <MX_LWIP_Init+0x268>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	0619      	lsls	r1, r3, #24
 800a052:	4b7b      	ldr	r3, [pc, #492]	; (800a240 <MX_LWIP_Init+0x268>)
 800a054:	785b      	ldrb	r3, [r3, #1]
 800a056:	041b      	lsls	r3, r3, #16
 800a058:	4319      	orrs	r1, r3
 800a05a:	4b79      	ldr	r3, [pc, #484]	; (800a240 <MX_LWIP_Init+0x268>)
 800a05c:	789b      	ldrb	r3, [r3, #2]
 800a05e:	021b      	lsls	r3, r3, #8
 800a060:	430b      	orrs	r3, r1
 800a062:	4977      	ldr	r1, [pc, #476]	; (800a240 <MX_LWIP_Init+0x268>)
 800a064:	78c9      	ldrb	r1, [r1, #3]
 800a066:	430b      	orrs	r3, r1
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a06e:	431a      	orrs	r2, r3
 800a070:	4b73      	ldr	r3, [pc, #460]	; (800a240 <MX_LWIP_Init+0x268>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	0619      	lsls	r1, r3, #24
 800a076:	4b72      	ldr	r3, [pc, #456]	; (800a240 <MX_LWIP_Init+0x268>)
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	041b      	lsls	r3, r3, #16
 800a07c:	4319      	orrs	r1, r3
 800a07e:	4b70      	ldr	r3, [pc, #448]	; (800a240 <MX_LWIP_Init+0x268>)
 800a080:	789b      	ldrb	r3, [r3, #2]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	430b      	orrs	r3, r1
 800a086:	496e      	ldr	r1, [pc, #440]	; (800a240 <MX_LWIP_Init+0x268>)
 800a088:	78c9      	ldrb	r1, [r1, #3]
 800a08a:	430b      	orrs	r3, r1
 800a08c:	0a1b      	lsrs	r3, r3, #8
 800a08e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a092:	431a      	orrs	r2, r3
 800a094:	4b6a      	ldr	r3, [pc, #424]	; (800a240 <MX_LWIP_Init+0x268>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	0619      	lsls	r1, r3, #24
 800a09a:	4b69      	ldr	r3, [pc, #420]	; (800a240 <MX_LWIP_Init+0x268>)
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	041b      	lsls	r3, r3, #16
 800a0a0:	4319      	orrs	r1, r3
 800a0a2:	4b67      	ldr	r3, [pc, #412]	; (800a240 <MX_LWIP_Init+0x268>)
 800a0a4:	789b      	ldrb	r3, [r3, #2]
 800a0a6:	021b      	lsls	r3, r3, #8
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	4965      	ldr	r1, [pc, #404]	; (800a240 <MX_LWIP_Init+0x268>)
 800a0ac:	78c9      	ldrb	r1, [r1, #3]
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	0e1b      	lsrs	r3, r3, #24
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	4a65      	ldr	r2, [pc, #404]	; (800a24c <MX_LWIP_Init+0x274>)
 800a0b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a0b8:	4b62      	ldr	r3, [pc, #392]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	061a      	lsls	r2, r3, #24
 800a0be:	4b61      	ldr	r3, [pc, #388]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	041b      	lsls	r3, r3, #16
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	4b5f      	ldr	r3, [pc, #380]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0c8:	789b      	ldrb	r3, [r3, #2]
 800a0ca:	021b      	lsls	r3, r3, #8
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	4a5d      	ldr	r2, [pc, #372]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0d0:	78d2      	ldrb	r2, [r2, #3]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	061a      	lsls	r2, r3, #24
 800a0d6:	4b5b      	ldr	r3, [pc, #364]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	0619      	lsls	r1, r3, #24
 800a0dc:	4b59      	ldr	r3, [pc, #356]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	041b      	lsls	r3, r3, #16
 800a0e2:	4319      	orrs	r1, r3
 800a0e4:	4b57      	ldr	r3, [pc, #348]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0e6:	789b      	ldrb	r3, [r3, #2]
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	4955      	ldr	r1, [pc, #340]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0ee:	78c9      	ldrb	r1, [r1, #3]
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	4b52      	ldr	r3, [pc, #328]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	0619      	lsls	r1, r3, #24
 800a100:	4b50      	ldr	r3, [pc, #320]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	041b      	lsls	r3, r3, #16
 800a106:	4319      	orrs	r1, r3
 800a108:	4b4e      	ldr	r3, [pc, #312]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a10a:	789b      	ldrb	r3, [r3, #2]
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	430b      	orrs	r3, r1
 800a110:	494c      	ldr	r1, [pc, #304]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a112:	78c9      	ldrb	r1, [r1, #3]
 800a114:	430b      	orrs	r3, r1
 800a116:	0a1b      	lsrs	r3, r3, #8
 800a118:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a11c:	431a      	orrs	r2, r3
 800a11e:	4b49      	ldr	r3, [pc, #292]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	0619      	lsls	r1, r3, #24
 800a124:	4b47      	ldr	r3, [pc, #284]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a126:	785b      	ldrb	r3, [r3, #1]
 800a128:	041b      	lsls	r3, r3, #16
 800a12a:	4319      	orrs	r1, r3
 800a12c:	4b45      	ldr	r3, [pc, #276]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a12e:	789b      	ldrb	r3, [r3, #2]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	430b      	orrs	r3, r1
 800a134:	4943      	ldr	r1, [pc, #268]	; (800a244 <MX_LWIP_Init+0x26c>)
 800a136:	78c9      	ldrb	r1, [r1, #3]
 800a138:	430b      	orrs	r3, r1
 800a13a:	0e1b      	lsrs	r3, r3, #24
 800a13c:	4313      	orrs	r3, r2
 800a13e:	4a44      	ldr	r2, [pc, #272]	; (800a250 <MX_LWIP_Init+0x278>)
 800a140:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a142:	4b41      	ldr	r3, [pc, #260]	; (800a248 <MX_LWIP_Init+0x270>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	061a      	lsls	r2, r3, #24
 800a148:	4b3f      	ldr	r3, [pc, #252]	; (800a248 <MX_LWIP_Init+0x270>)
 800a14a:	785b      	ldrb	r3, [r3, #1]
 800a14c:	041b      	lsls	r3, r3, #16
 800a14e:	431a      	orrs	r2, r3
 800a150:	4b3d      	ldr	r3, [pc, #244]	; (800a248 <MX_LWIP_Init+0x270>)
 800a152:	789b      	ldrb	r3, [r3, #2]
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	4313      	orrs	r3, r2
 800a158:	4a3b      	ldr	r2, [pc, #236]	; (800a248 <MX_LWIP_Init+0x270>)
 800a15a:	78d2      	ldrb	r2, [r2, #3]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	061a      	lsls	r2, r3, #24
 800a160:	4b39      	ldr	r3, [pc, #228]	; (800a248 <MX_LWIP_Init+0x270>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	0619      	lsls	r1, r3, #24
 800a166:	4b38      	ldr	r3, [pc, #224]	; (800a248 <MX_LWIP_Init+0x270>)
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	041b      	lsls	r3, r3, #16
 800a16c:	4319      	orrs	r1, r3
 800a16e:	4b36      	ldr	r3, [pc, #216]	; (800a248 <MX_LWIP_Init+0x270>)
 800a170:	789b      	ldrb	r3, [r3, #2]
 800a172:	021b      	lsls	r3, r3, #8
 800a174:	430b      	orrs	r3, r1
 800a176:	4934      	ldr	r1, [pc, #208]	; (800a248 <MX_LWIP_Init+0x270>)
 800a178:	78c9      	ldrb	r1, [r1, #3]
 800a17a:	430b      	orrs	r3, r1
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a182:	431a      	orrs	r2, r3
 800a184:	4b30      	ldr	r3, [pc, #192]	; (800a248 <MX_LWIP_Init+0x270>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	0619      	lsls	r1, r3, #24
 800a18a:	4b2f      	ldr	r3, [pc, #188]	; (800a248 <MX_LWIP_Init+0x270>)
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	041b      	lsls	r3, r3, #16
 800a190:	4319      	orrs	r1, r3
 800a192:	4b2d      	ldr	r3, [pc, #180]	; (800a248 <MX_LWIP_Init+0x270>)
 800a194:	789b      	ldrb	r3, [r3, #2]
 800a196:	021b      	lsls	r3, r3, #8
 800a198:	430b      	orrs	r3, r1
 800a19a:	492b      	ldr	r1, [pc, #172]	; (800a248 <MX_LWIP_Init+0x270>)
 800a19c:	78c9      	ldrb	r1, [r1, #3]
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	0a1b      	lsrs	r3, r3, #8
 800a1a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	4b27      	ldr	r3, [pc, #156]	; (800a248 <MX_LWIP_Init+0x270>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	0619      	lsls	r1, r3, #24
 800a1ae:	4b26      	ldr	r3, [pc, #152]	; (800a248 <MX_LWIP_Init+0x270>)
 800a1b0:	785b      	ldrb	r3, [r3, #1]
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	4319      	orrs	r1, r3
 800a1b6:	4b24      	ldr	r3, [pc, #144]	; (800a248 <MX_LWIP_Init+0x270>)
 800a1b8:	789b      	ldrb	r3, [r3, #2]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	430b      	orrs	r3, r1
 800a1be:	4922      	ldr	r1, [pc, #136]	; (800a248 <MX_LWIP_Init+0x270>)
 800a1c0:	78c9      	ldrb	r1, [r1, #3]
 800a1c2:	430b      	orrs	r3, r1
 800a1c4:	0e1b      	lsrs	r3, r3, #24
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	4a22      	ldr	r2, [pc, #136]	; (800a254 <MX_LWIP_Init+0x27c>)
 800a1ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a1cc:	4b22      	ldr	r3, [pc, #136]	; (800a258 <MX_LWIP_Init+0x280>)
 800a1ce:	9302      	str	r3, [sp, #8]
 800a1d0:	4b22      	ldr	r3, [pc, #136]	; (800a25c <MX_LWIP_Init+0x284>)
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <MX_LWIP_Init+0x27c>)
 800a1da:	4a1d      	ldr	r2, [pc, #116]	; (800a250 <MX_LWIP_Init+0x278>)
 800a1dc:	491b      	ldr	r1, [pc, #108]	; (800a24c <MX_LWIP_Init+0x274>)
 800a1de:	4820      	ldr	r0, [pc, #128]	; (800a260 <MX_LWIP_Init+0x288>)
 800a1e0:	f005 fa6e 	bl	800f6c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a1e4:	481e      	ldr	r0, [pc, #120]	; (800a260 <MX_LWIP_Init+0x288>)
 800a1e6:	f005 fc1d 	bl	800fa24 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a1ea:	4b1d      	ldr	r3, [pc, #116]	; (800a260 <MX_LWIP_Init+0x288>)
 800a1ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1f0:	089b      	lsrs	r3, r3, #2
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a1fc:	4818      	ldr	r0, [pc, #96]	; (800a260 <MX_LWIP_Init+0x288>)
 800a1fe:	f005 fc21 	bl	800fa44 <netif_set_up>
 800a202:	e002      	b.n	800a20a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a204:	4816      	ldr	r0, [pc, #88]	; (800a260 <MX_LWIP_Init+0x288>)
 800a206:	f005 fc89 	bl	800fb1c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a20a:	4916      	ldr	r1, [pc, #88]	; (800a264 <MX_LWIP_Init+0x28c>)
 800a20c:	4814      	ldr	r0, [pc, #80]	; (800a260 <MX_LWIP_Init+0x288>)
 800a20e:	f005 fd1b 	bl	800fc48 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a212:	2224      	movs	r2, #36	; 0x24
 800a214:	2100      	movs	r1, #0
 800a216:	4814      	ldr	r0, [pc, #80]	; (800a268 <MX_LWIP_Init+0x290>)
 800a218:	f00e fcff 	bl	8018c1a <memset>
  attributes.name = "EthLink";
 800a21c:	4b12      	ldr	r3, [pc, #72]	; (800a268 <MX_LWIP_Init+0x290>)
 800a21e:	4a13      	ldr	r2, [pc, #76]	; (800a26c <MX_LWIP_Init+0x294>)
 800a220:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a222:	4b11      	ldr	r3, [pc, #68]	; (800a268 <MX_LWIP_Init+0x290>)
 800a224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a228:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800a22a:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <MX_LWIP_Init+0x290>)
 800a22c:	2210      	movs	r2, #16
 800a22e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800a230:	4a0d      	ldr	r2, [pc, #52]	; (800a268 <MX_LWIP_Init+0x290>)
 800a232:	490b      	ldr	r1, [pc, #44]	; (800a260 <MX_LWIP_Init+0x288>)
 800a234:	480e      	ldr	r0, [pc, #56]	; (800a270 <MX_LWIP_Init+0x298>)
 800a236:	f000 fd96 	bl	800ad66 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a23a:	bf00      	nop
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20000c08 	.word	0x20000c08
 800a244:	20000c0c 	.word	0x20000c0c
 800a248:	20000c10 	.word	0x20000c10
 800a24c:	20000bfc 	.word	0x20000bfc
 800a250:	20000c00 	.word	0x20000c00
 800a254:	20000c04 	.word	0x20000c04
 800a258:	0800ea69 	.word	0x0800ea69
 800a25c:	0800a719 	.word	0x0800a719
 800a260:	20000bc8 	.word	0x20000bc8
 800a264:	0800a275 	.word	0x0800a275
 800a268:	20000c14 	.word	0x20000c14
 800a26c:	0801a28c 	.word	0x0801a28c
 800a270:	0800aa0d 	.word	0x0800aa0d

0800a274 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a290:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <HAL_ETH_RxCpltCallback+0x1c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fffd 	bl	800b294 <osSemaphoreRelease>
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20005704 	.word	0x20005704

0800a2a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <HAL_ETH_TxCpltCallback+0x1c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 ffed 	bl	800b294 <osSemaphoreRelease>
}
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20005708 	.word	0x20005708

0800a2c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7fa f99b 	bl	800460c <HAL_ETH_GetDMAError>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2dc:	2b80      	cmp	r3, #128	; 0x80
 800a2de:	d104      	bne.n	800a2ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a2e0:	4b04      	ldr	r3, [pc, #16]	; (800a2f4 <HAL_ETH_ErrorCallback+0x2c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 ffd5 	bl	800b294 <osSemaphoreRelease>
  }
}
 800a2ea:	bf00      	nop
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20005704 	.word	0x20005704

0800a2f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b0aa      	sub	sp, #168	; 0xa8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800a312:	f107 0310 	add.w	r3, r7, #16
 800a316:	2264      	movs	r2, #100	; 0x64
 800a318:	2100      	movs	r1, #0
 800a31a:	4618      	mov	r0, r3
 800a31c:	f00e fc7d 	bl	8018c1a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a320:	4b85      	ldr	r3, [pc, #532]	; (800a538 <low_level_init+0x240>)
 800a322:	4a86      	ldr	r2, [pc, #536]	; (800a53c <low_level_init+0x244>)
 800a324:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a326:	2300      	movs	r3, #0
 800a328:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a32a:	2380      	movs	r3, #128	; 0x80
 800a32c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a32e:	23e1      	movs	r3, #225	; 0xe1
 800a330:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x76;
 800a332:	2376      	movs	r3, #118	; 0x76
 800a334:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x76;
 800a336:	2376      	movs	r3, #118	; 0x76
 800a338:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x76;
 800a33a:	2376      	movs	r3, #118	; 0x76
 800a33c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a33e:	4a7e      	ldr	r2, [pc, #504]	; (800a538 <low_level_init+0x240>)
 800a340:	f107 0308 	add.w	r3, r7, #8
 800a344:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a346:	4b7c      	ldr	r3, [pc, #496]	; (800a538 <low_level_init+0x240>)
 800a348:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a34c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a34e:	4b7a      	ldr	r3, [pc, #488]	; (800a538 <low_level_init+0x240>)
 800a350:	4a7b      	ldr	r2, [pc, #492]	; (800a540 <low_level_init+0x248>)
 800a352:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a354:	4b78      	ldr	r3, [pc, #480]	; (800a538 <low_level_init+0x240>)
 800a356:	4a7b      	ldr	r2, [pc, #492]	; (800a544 <low_level_init+0x24c>)
 800a358:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a35a:	4b77      	ldr	r3, [pc, #476]	; (800a538 <low_level_init+0x240>)
 800a35c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a360:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a362:	4875      	ldr	r0, [pc, #468]	; (800a538 <low_level_init+0x240>)
 800a364:	f7f9 fb14 	bl	8003990 <HAL_ETH_Init>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a36e:	2238      	movs	r2, #56	; 0x38
 800a370:	2100      	movs	r1, #0
 800a372:	4875      	ldr	r0, [pc, #468]	; (800a548 <low_level_init+0x250>)
 800a374:	f00e fc51 	bl	8018c1a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a378:	4b73      	ldr	r3, [pc, #460]	; (800a548 <low_level_init+0x250>)
 800a37a:	2221      	movs	r2, #33	; 0x21
 800a37c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a37e:	4b72      	ldr	r3, [pc, #456]	; (800a548 <low_level_init+0x250>)
 800a380:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800a384:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a386:	4b70      	ldr	r3, [pc, #448]	; (800a548 <low_level_init+0x250>)
 800a388:	2200      	movs	r2, #0
 800a38a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a38c:	486f      	ldr	r0, [pc, #444]	; (800a54c <low_level_init+0x254>)
 800a38e:	f005 f851 	bl	800f434 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2206      	movs	r2, #6
 800a396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a39a:	4b67      	ldr	r3, [pc, #412]	; (800a538 <low_level_init+0x240>)
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	781a      	ldrb	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a3a6:	4b64      	ldr	r3, [pc, #400]	; (800a538 <low_level_init+0x240>)
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	785a      	ldrb	r2, [r3, #1]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a3b2:	4b61      	ldr	r3, [pc, #388]	; (800a538 <low_level_init+0x240>)
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	789a      	ldrb	r2, [r3, #2]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a3be:	4b5e      	ldr	r3, [pc, #376]	; (800a538 <low_level_init+0x240>)
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	78da      	ldrb	r2, [r3, #3]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a3ca:	4b5b      	ldr	r3, [pc, #364]	; (800a538 <low_level_init+0x240>)
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	791a      	ldrb	r2, [r3, #4]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a3d6:	4b58      	ldr	r3, [pc, #352]	; (800a538 <low_level_init+0x240>)
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	795a      	ldrb	r2, [r3, #5]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a3e8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3f0:	f043 030a 	orr.w	r3, r3, #10
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2101      	movs	r1, #1
 800a400:	2001      	movs	r0, #1
 800a402:	f000 fe6b 	bl	800b0dc <osSemaphoreNew>
 800a406:	4603      	mov	r3, r0
 800a408:	4a51      	ldr	r2, [pc, #324]	; (800a550 <low_level_init+0x258>)
 800a40a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a40c:	2200      	movs	r2, #0
 800a40e:	2101      	movs	r1, #1
 800a410:	2001      	movs	r0, #1
 800a412:	f000 fe63 	bl	800b0dc <osSemaphoreNew>
 800a416:	4603      	mov	r3, r0
 800a418:	4a4e      	ldr	r2, [pc, #312]	; (800a554 <low_level_init+0x25c>)
 800a41a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a41c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a420:	2224      	movs	r2, #36	; 0x24
 800a422:	2100      	movs	r1, #0
 800a424:	4618      	mov	r0, r3
 800a426:	f00e fbf8 	bl	8018c1a <memset>
  attributes.name = "EthIf";
 800a42a:	4b4b      	ldr	r3, [pc, #300]	; (800a558 <low_level_init+0x260>)
 800a42c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a42e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800a432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800a436:	2330      	movs	r3, #48	; 0x30
 800a438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800a43c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a440:	461a      	mov	r2, r3
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	4845      	ldr	r0, [pc, #276]	; (800a55c <low_level_init+0x264>)
 800a446:	f000 fc8e 	bl	800ad66 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a44a:	4945      	ldr	r1, [pc, #276]	; (800a560 <low_level_init+0x268>)
 800a44c:	4845      	ldr	r0, [pc, #276]	; (800a564 <low_level_init+0x26c>)
 800a44e:	f7f8 fad8 	bl	8002a02 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a452:	4844      	ldr	r0, [pc, #272]	; (800a564 <low_level_init+0x26c>)
 800a454:	f7f8 fb07 	bl	8002a66 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a458:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d164      	bne.n	800a52a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a460:	4840      	ldr	r0, [pc, #256]	; (800a564 <low_level_init+0x26c>)
 800a462:	f7f8 fba8 	bl	8002bb6 <LAN8742_GetLinkState>
 800a466:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a46a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a46e:	2b01      	cmp	r3, #1
 800a470:	dc06      	bgt.n	800a480 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f005 fbb8 	bl	800fbe8 <netif_set_link_down>
      netif_set_down(netif);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f005 fb4f 	bl	800fb1c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a47e:	e056      	b.n	800a52e <low_level_init+0x236>
      switch (PHYLinkState)
 800a480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a484:	3b02      	subs	r3, #2
 800a486:	2b03      	cmp	r3, #3
 800a488:	d82a      	bhi.n	800a4e0 <low_level_init+0x1e8>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <low_level_init+0x198>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4a1 	.word	0x0800a4a1
 800a494:	0800a4b3 	.word	0x0800a4b3
 800a498:	0800a4c3 	.word	0x0800a4c3
 800a49c:	0800a4d3 	.word	0x0800a4d3
        duplex = ETH_FULLDUPLEX_MODE;
 800a4a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a4a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a4b0:	e01f      	b.n	800a4f2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a4b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a4c0:	e017      	b.n	800a4f2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a4d0:	e00f      	b.n	800a4f2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a4de:	e008      	b.n	800a4f2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a4e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a4e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a4f0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a4f2:	f107 0310 	add.w	r3, r7, #16
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	480f      	ldr	r0, [pc, #60]	; (800a538 <low_level_init+0x240>)
 800a4fa:	f7f9 ff2d 	bl	8004358 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a4fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a502:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800a504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a50a:	f107 0310 	add.w	r3, r7, #16
 800a50e:	4619      	mov	r1, r3
 800a510:	4809      	ldr	r0, [pc, #36]	; (800a538 <low_level_init+0x240>)
 800a512:	f7fa f80b 	bl	800452c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a516:	4808      	ldr	r0, [pc, #32]	; (800a538 <low_level_init+0x240>)
 800a518:	f7f9 fab8 	bl	8003a8c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f005 fa91 	bl	800fa44 <netif_set_up>
    netif_set_link_up(netif);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f005 fb2c 	bl	800fb80 <netif_set_link_up>
}
 800a528:	e001      	b.n	800a52e <low_level_init+0x236>
    Error_Handler();
 800a52a:	f7f7 fa13 	bl	8001954 <Error_Handler>
}
 800a52e:	bf00      	nop
 800a530:	37a8      	adds	r7, #168	; 0xa8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	2000570c 	.word	0x2000570c
 800a53c:	40028000 	.word	0x40028000
 800a540:	20005664 	.word	0x20005664
 800a544:	200055c4 	.word	0x200055c4
 800a548:	200057bc 	.word	0x200057bc
 800a54c:	0801ce48 	.word	0x0801ce48
 800a550:	20005704 	.word	0x20005704
 800a554:	20005708 	.word	0x20005708
 800a558:	0801a294 	.word	0x0801a294
 800a55c:	0800a6c5 	.word	0x0800a6c5
 800a560:	20000078 	.word	0x20000078
 800a564:	200057f4 	.word	0x200057f4

0800a568 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b092      	sub	sp, #72	; 0x48
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a580:	f107 030c 	add.w	r3, r7, #12
 800a584:	2230      	movs	r2, #48	; 0x30
 800a586:	2100      	movs	r1, #0
 800a588:	4618      	mov	r0, r3
 800a58a:	f00e fb46 	bl	8018c1a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a58e:	f107 030c 	add.w	r3, r7, #12
 800a592:	2230      	movs	r2, #48	; 0x30
 800a594:	2100      	movs	r1, #0
 800a596:	4618      	mov	r0, r3
 800a598:	f00e fb3f 	bl	8018c1a <memset>

  for(q = p; q != NULL; q = q->next)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	643b      	str	r3, [r7, #64]	; 0x40
 800a5a0:	e045      	b.n	800a62e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d902      	bls.n	800a5ae <low_level_output+0x46>
      return ERR_IF;
 800a5a8:	f06f 030b 	mvn.w	r3, #11
 800a5ac:	e065      	b.n	800a67a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800a5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b0:	6859      	ldr	r1, [r3, #4]
 800a5b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	3348      	adds	r3, #72	; 0x48
 800a5be:	443b      	add	r3, r7
 800a5c0:	3b3c      	subs	r3, #60	; 0x3c
 800a5c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c6:	895b      	ldrh	r3, [r3, #10]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	3348      	adds	r3, #72	; 0x48
 800a5d6:	443b      	add	r3, r7
 800a5d8:	3b38      	subs	r3, #56	; 0x38
 800a5da:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d011      	beq.n	800a606 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5e4:	1e5a      	subs	r2, r3, #1
 800a5e6:	f107 000c 	add.w	r0, r7, #12
 800a5ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	005b      	lsls	r3, r3, #1
 800a5f0:	440b      	add	r3, r1
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	18c1      	adds	r1, r0, r3
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4413      	add	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	3348      	adds	r3, #72	; 0x48
 800a600:	443b      	add	r3, r7
 800a602:	3b34      	subs	r3, #52	; 0x34
 800a604:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a60e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a610:	4613      	mov	r3, r2
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	4413      	add	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	3348      	adds	r3, #72	; 0x48
 800a61a:	443b      	add	r3, r7
 800a61c:	3b34      	subs	r3, #52	; 0x34
 800a61e:	2200      	movs	r2, #0
 800a620:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a624:	3301      	adds	r3, #1
 800a626:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	643b      	str	r3, [r7, #64]	; 0x40
 800a62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1b6      	bne.n	800a5a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	891b      	ldrh	r3, [r3, #8]
 800a638:	461a      	mov	r2, r3
 800a63a:	4b12      	ldr	r3, [pc, #72]	; (800a684 <low_level_output+0x11c>)
 800a63c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a63e:	4a11      	ldr	r2, [pc, #68]	; (800a684 <low_level_output+0x11c>)
 800a640:	f107 030c 	add.w	r3, r7, #12
 800a644:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a646:	4a0f      	ldr	r2, [pc, #60]	; (800a684 <low_level_output+0x11c>)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800a64c:	6838      	ldr	r0, [r7, #0]
 800a64e:	f005 ff4f 	bl	80104f0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800a652:	490c      	ldr	r1, [pc, #48]	; (800a684 <low_level_output+0x11c>)
 800a654:	480c      	ldr	r0, [pc, #48]	; (800a688 <low_level_output+0x120>)
 800a656:	f7f9 fb26 	bl	8003ca6 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800a65a:	bf00      	nop
 800a65c:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <low_level_output+0x124>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f04f 31ff 	mov.w	r1, #4294967295
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fdc3 	bl	800b1f0 <osSemaphoreAcquire>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1f5      	bne.n	800a65c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <low_level_output+0x120>)
 800a672:	f7f9 fcab 	bl	8003fcc <HAL_ETH_ReleaseTxPacket>

  return errval;
 800a676:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3748      	adds	r7, #72	; 0x48
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200057bc 	.word	0x200057bc
 800a688:	2000570c 	.word	0x2000570c
 800a68c:	20005708 	.word	0x20005708

0800a690 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a69c:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <low_level_input+0x2c>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4805      	ldr	r0, [pc, #20]	; (800a6c0 <low_level_input+0x30>)
 800a6ac:	f7f9 fb57 	bl	8003d5e <HAL_ETH_ReadData>
  }

  return p;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	200055c0 	.word	0x200055c0
 800a6c0:	2000570c 	.word	0x2000570c

0800a6c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a6d4:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <ethernetif_input+0x50>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 fd87 	bl	800b1f0 <osSemaphoreAcquire>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1f5      	bne.n	800a6d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a6e8:	68b8      	ldr	r0, [r7, #8]
 800a6ea:	f7ff ffd1 	bl	800a690 <low_level_input>
 800a6ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	4798      	blx	r3
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f005 fe4c 	bl	80103a4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1ea      	bne.n	800a6e8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a712:	e7df      	b.n	800a6d4 <ethernetif_input+0x10>
 800a714:	20005704 	.word	0x20005704

0800a718 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d106      	bne.n	800a734 <ethernetif_init+0x1c>
 800a726:	4b0e      	ldr	r3, [pc, #56]	; (800a760 <ethernetif_init+0x48>)
 800a728:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a72c:	490d      	ldr	r1, [pc, #52]	; (800a764 <ethernetif_init+0x4c>)
 800a72e:	480e      	ldr	r0, [pc, #56]	; (800a768 <ethernetif_init+0x50>)
 800a730:	f00e fb10 	bl	8018d54 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2273      	movs	r2, #115	; 0x73
 800a738:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2274      	movs	r2, #116	; 0x74
 800a740:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a09      	ldr	r2, [pc, #36]	; (800a76c <ethernetif_init+0x54>)
 800a748:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a08      	ldr	r2, [pc, #32]	; (800a770 <ethernetif_init+0x58>)
 800a74e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff fdd1 	bl	800a2f8 <low_level_init>

  return ERR_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	0801a29c 	.word	0x0801a29c
 800a764:	0801a2b8 	.word	0x0801a2b8
 800a768:	0801a2c8 	.word	0x0801a2c8
 800a76c:	08016a91 	.word	0x08016a91
 800a770:	0800a569 	.word	0x0800a569

0800a774 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	4809      	ldr	r0, [pc, #36]	; (800a7a8 <pbuf_free_custom+0x34>)
 800a784:	f004 ff46 	bl	800f614 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a788:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <pbuf_free_custom+0x38>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d107      	bne.n	800a7a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <pbuf_free_custom+0x38>)
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a796:	4b06      	ldr	r3, [pc, #24]	; (800a7b0 <pbuf_free_custom+0x3c>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fd7a 	bl	800b294 <osSemaphoreRelease>
  }
}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	0801ce48 	.word	0x0801ce48
 800a7ac:	200055c0 	.word	0x200055c0
 800a7b0:	20005704 	.word	0x20005704

0800a7b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a7b8:	f7f8 faba 	bl	8002d30 <HAL_GetTick>
 800a7bc:	4603      	mov	r3, r0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08e      	sub	sp, #56	; 0x38
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	605a      	str	r2, [r3, #4]
 800a7d6:	609a      	str	r2, [r3, #8]
 800a7d8:	60da      	str	r2, [r3, #12]
 800a7da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a5d      	ldr	r2, [pc, #372]	; (800a958 <HAL_ETH_MspInit+0x194>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	f040 80b4 	bne.w	800a950 <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	623b      	str	r3, [r7, #32]
 800a7ec:	4b5b      	ldr	r3, [pc, #364]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	4a5a      	ldr	r2, [pc, #360]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a7f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a7f6:	6313      	str	r3, [r2, #48]	; 0x30
 800a7f8:	4b58      	ldr	r3, [pc, #352]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a800:	623b      	str	r3, [r7, #32]
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	2300      	movs	r3, #0
 800a806:	61fb      	str	r3, [r7, #28]
 800a808:	4b54      	ldr	r3, [pc, #336]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80c:	4a53      	ldr	r2, [pc, #332]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a80e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a812:	6313      	str	r3, [r2, #48]	; 0x30
 800a814:	4b51      	ldr	r3, [pc, #324]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	2300      	movs	r3, #0
 800a822:	61bb      	str	r3, [r7, #24]
 800a824:	4b4d      	ldr	r3, [pc, #308]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a828:	4a4c      	ldr	r2, [pc, #304]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a82a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a82e:	6313      	str	r3, [r2, #48]	; 0x30
 800a830:	4b4a      	ldr	r3, [pc, #296]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a838:	61bb      	str	r3, [r7, #24]
 800a83a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a83c:	2300      	movs	r3, #0
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	4b46      	ldr	r3, [pc, #280]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a844:	4a45      	ldr	r2, [pc, #276]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a846:	f043 0304 	orr.w	r3, r3, #4
 800a84a:	6313      	str	r3, [r2, #48]	; 0x30
 800a84c:	4b43      	ldr	r3, [pc, #268]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a858:	2300      	movs	r3, #0
 800a85a:	613b      	str	r3, [r7, #16]
 800a85c:	4b3f      	ldr	r3, [pc, #252]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a860:	4a3e      	ldr	r2, [pc, #248]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	6313      	str	r3, [r2, #48]	; 0x30
 800a868:	4b3c      	ldr	r3, [pc, #240]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	613b      	str	r3, [r7, #16]
 800a872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a874:	2300      	movs	r3, #0
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	4b38      	ldr	r3, [pc, #224]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87c:	4a37      	ldr	r2, [pc, #220]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a87e:	f043 0302 	orr.w	r3, r3, #2
 800a882:	6313      	str	r3, [r2, #48]	; 0x30
 800a884:	4b35      	ldr	r3, [pc, #212]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a890:	2300      	movs	r3, #0
 800a892:	60bb      	str	r3, [r7, #8]
 800a894:	4b31      	ldr	r3, [pc, #196]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	4a30      	ldr	r2, [pc, #192]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89e:	6313      	str	r3, [r2, #48]	; 0x30
 800a8a0:	4b2e      	ldr	r3, [pc, #184]	; (800a95c <HAL_ETH_MspInit+0x198>)
 800a8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a8ac:	2332      	movs	r3, #50	; 0x32
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8bc:	230b      	movs	r3, #11
 800a8be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4826      	ldr	r0, [pc, #152]	; (800a960 <HAL_ETH_MspInit+0x19c>)
 800a8c8:	f7fa fab2 	bl	8004e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a8cc:	2386      	movs	r3, #134	; 0x86
 800a8ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8dc:	230b      	movs	r3, #11
 800a8de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	481f      	ldr	r0, [pc, #124]	; (800a964 <HAL_ETH_MspInit+0x1a0>)
 800a8e8:	f7fa faa2 	bl	8004e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a8ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8fe:	230b      	movs	r3, #11
 800a900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a906:	4619      	mov	r1, r3
 800a908:	4817      	ldr	r0, [pc, #92]	; (800a968 <HAL_ETH_MspInit+0x1a4>)
 800a90a:	f7fa fa91 	bl	8004e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a90e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a914:	2302      	movs	r3, #2
 800a916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a918:	2300      	movs	r3, #0
 800a91a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a91c:	2303      	movs	r3, #3
 800a91e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a920:	230b      	movs	r3, #11
 800a922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a928:	4619      	mov	r1, r3
 800a92a:	4810      	ldr	r0, [pc, #64]	; (800a96c <HAL_ETH_MspInit+0x1a8>)
 800a92c:	f7fa fa80 	bl	8004e30 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a930:	2200      	movs	r2, #0
 800a932:	2105      	movs	r1, #5
 800a934:	203d      	movs	r0, #61	; 0x3d
 800a936:	f7f8 ff6f 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a93a:	203d      	movs	r0, #61	; 0x3d
 800a93c:	f7f8 ff88 	bl	8003850 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800a940:	2200      	movs	r2, #0
 800a942:	2105      	movs	r1, #5
 800a944:	203e      	movs	r0, #62	; 0x3e
 800a946:	f7f8 ff67 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a94a:	203e      	movs	r0, #62	; 0x3e
 800a94c:	f7f8 ff80 	bl	8003850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a950:	bf00      	nop
 800a952:	3738      	adds	r7, #56	; 0x38
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	40028000 	.word	0x40028000
 800a95c:	40023800 	.word	0x40023800
 800a960:	40020800 	.word	0x40020800
 800a964:	40020000 	.word	0x40020000
 800a968:	40020400 	.word	0x40020400
 800a96c:	40021800 	.word	0x40021800

0800a970 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a974:	4802      	ldr	r0, [pc, #8]	; (800a980 <ETH_PHY_IO_Init+0x10>)
 800a976:	f7f9 fdf3 	bl	8004560 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	2000570c 	.word	0x2000570c

0800a984 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
  return 0;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	68f9      	ldr	r1, [r7, #12]
 800a9a6:	4807      	ldr	r0, [pc, #28]	; (800a9c4 <ETH_PHY_IO_ReadReg+0x30>)
 800a9a8:	f7f9 fc42 	bl	8004230 <HAL_ETH_ReadPHYRegister>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d002      	beq.n	800a9b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b6:	e000      	b.n	800a9ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	2000570c 	.word	0x2000570c

0800a9c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	68f9      	ldr	r1, [r7, #12]
 800a9da:	4807      	ldr	r0, [pc, #28]	; (800a9f8 <ETH_PHY_IO_WriteReg+0x30>)
 800a9dc:	f7f9 fc73 	bl	80042c6 <HAL_ETH_WritePHYRegister>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ea:	e000      	b.n	800a9ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	2000570c 	.word	0x2000570c

0800a9fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aa00:	f7f8 f996 	bl	8002d30 <HAL_GetTick>
 800aa04:	4603      	mov	r3, r0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b0a0      	sub	sp, #128	; 0x80
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800aa14:	f107 0308 	add.w	r3, r7, #8
 800aa18:	2264      	movs	r2, #100	; 0x64
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f00e f8fc 	bl	8018c1a <memset>
  int32_t PHYLinkState = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa2e:	2300      	movs	r3, #0
 800aa30:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aa36:	483a      	ldr	r0, [pc, #232]	; (800ab20 <ethernet_link_thread+0x114>)
 800aa38:	f7f8 f8bd 	bl	8002bb6 <LAN8742_GetLinkState>
 800aa3c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800aa3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa44:	089b      	lsrs	r3, r3, #2
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00c      	beq.n	800aa6a <ethernet_link_thread+0x5e>
 800aa50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	dc09      	bgt.n	800aa6a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800aa56:	4833      	ldr	r0, [pc, #204]	; (800ab24 <ethernet_link_thread+0x118>)
 800aa58:	f7f9 f8a6 	bl	8003ba8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800aa5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa5e:	f005 f85d 	bl	800fb1c <netif_set_down>
    netif_set_link_down(netif);
 800aa62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa64:	f005 f8c0 	bl	800fbe8 <netif_set_link_down>
 800aa68:	e055      	b.n	800ab16 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800aa6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d14e      	bne.n	800ab16 <ethernet_link_thread+0x10a>
 800aa78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	dd4b      	ble.n	800ab16 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800aa7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa80:	3b02      	subs	r3, #2
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d82a      	bhi.n	800aadc <ethernet_link_thread+0xd0>
 800aa86:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <ethernet_link_thread+0x80>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aa9d 	.word	0x0800aa9d
 800aa90:	0800aaaf 	.word	0x0800aaaf
 800aa94:	0800aabf 	.word	0x0800aabf
 800aa98:	0800aacf 	.word	0x0800aacf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aa9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aaa0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aaa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aaa6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aaac:	e017      	b.n	800aade <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aab2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aab6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aab8:	2301      	movs	r3, #1
 800aaba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aabc:	e00f      	b.n	800aade <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aabe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aac2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aac4:	2300      	movs	r3, #0
 800aac6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aac8:	2301      	movs	r3, #1
 800aaca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aacc:	e007      	b.n	800aade <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aace:	2300      	movs	r3, #0
 800aad0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aad2:	2300      	movs	r3, #0
 800aad4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aad6:	2301      	movs	r3, #1
 800aad8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aada:	e000      	b.n	800aade <ethernet_link_thread+0xd2>
    default:
      break;
 800aadc:	bf00      	nop
    }

    if(linkchanged)
 800aade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d018      	beq.n	800ab16 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aae4:	f107 0308 	add.w	r3, r7, #8
 800aae8:	4619      	mov	r1, r3
 800aaea:	480e      	ldr	r0, [pc, #56]	; (800ab24 <ethernet_link_thread+0x118>)
 800aaec:	f7f9 fc34 	bl	8004358 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aaf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800aaf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaf6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aaf8:	f107 0308 	add.w	r3, r7, #8
 800aafc:	4619      	mov	r1, r3
 800aafe:	4809      	ldr	r0, [pc, #36]	; (800ab24 <ethernet_link_thread+0x118>)
 800ab00:	f7f9 fd14 	bl	800452c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800ab04:	4807      	ldr	r0, [pc, #28]	; (800ab24 <ethernet_link_thread+0x118>)
 800ab06:	f7f8 ffc1 	bl	8003a8c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ab0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab0c:	f004 ff9a 	bl	800fa44 <netif_set_up>
      netif_set_link_up(netif);
 800ab10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab12:	f005 f835 	bl	800fb80 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ab16:	2064      	movs	r0, #100	; 0x64
 800ab18:	f000 f9b7 	bl	800ae8a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ab1c:	e78b      	b.n	800aa36 <ethernet_link_thread+0x2a>
 800ab1e:	bf00      	nop
 800ab20:	200057f4 	.word	0x200057f4
 800ab24:	2000570c 	.word	0x2000570c

0800ab28 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ab30:	4812      	ldr	r0, [pc, #72]	; (800ab7c <HAL_ETH_RxAllocateCallback+0x54>)
 800ab32:	f004 fcfb 	bl	800f52c <memp_malloc_pool>
 800ab36:	60f8      	str	r0, [r7, #12]
  if (p)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d014      	beq.n	800ab68 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f103 0220 	add.w	r2, r3, #32
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4a0d      	ldr	r2, [pc, #52]	; (800ab80 <HAL_ETH_RxAllocateCallback+0x58>)
 800ab4c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ab56:	9201      	str	r2, [sp, #4]
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2241      	movs	r2, #65	; 0x41
 800ab5e:	2100      	movs	r1, #0
 800ab60:	2000      	movs	r0, #0
 800ab62:	f005 fa65 	bl	8010030 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ab66:	e005      	b.n	800ab74 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ab68:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <HAL_ETH_RxAllocateCallback+0x5c>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	601a      	str	r2, [r3, #0]
}
 800ab74:	bf00      	nop
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	0801ce48 	.word	0x0801ce48
 800ab80:	0800a775 	.word	0x0800a775
 800ab84:	200055c0 	.word	0x200055c0

0800ab88 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b089      	sub	sp, #36	; 0x24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	3b20      	subs	r3, #32
 800aba6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	2200      	movs	r2, #0
 800abb2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	887a      	ldrh	r2, [r7, #2]
 800abb8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d103      	bne.n	800abca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	e003      	b.n	800abd2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	69fa      	ldr	r2, [r7, #28]
 800abd0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	69fa      	ldr	r2, [r7, #28]
 800abd6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	61fb      	str	r3, [r7, #28]
 800abde:	e009      	b.n	800abf4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	891a      	ldrh	r2, [r3, #8]
 800abe4:	887b      	ldrh	r3, [r7, #2]
 800abe6:	4413      	add	r3, r2
 800abe8:	b29a      	uxth	r2, r3
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1f2      	bne.n	800abe0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800abfa:	bf00      	nop
 800abfc:	bf00      	nop
 800abfe:	3724      	adds	r7, #36	; 0x24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f005 fbc7 	bl	80103a4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800ac16:	bf00      	nop
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <__NVIC_SetPriority>:
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	6039      	str	r1, [r7, #0]
 800ac2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	db0a      	blt.n	800ac4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	490c      	ldr	r1, [pc, #48]	; (800ac6c <__NVIC_SetPriority+0x4c>)
 800ac3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac3e:	0112      	lsls	r2, r2, #4
 800ac40:	b2d2      	uxtb	r2, r2
 800ac42:	440b      	add	r3, r1
 800ac44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac48:	e00a      	b.n	800ac60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	4908      	ldr	r1, [pc, #32]	; (800ac70 <__NVIC_SetPriority+0x50>)
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	f003 030f 	and.w	r3, r3, #15
 800ac56:	3b04      	subs	r3, #4
 800ac58:	0112      	lsls	r2, r2, #4
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	761a      	strb	r2, [r3, #24]
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	e000e100 	.word	0xe000e100
 800ac70:	e000ed00 	.word	0xe000ed00

0800ac74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac78:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <SysTick_Handler+0x1c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac7c:	f002 fc96 	bl	800d5ac <xTaskGetSchedulerState>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d001      	beq.n	800ac8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac86:	f003 fb7f 	bl	800e388 <xPortSysTickHandler>
  }
}
 800ac8a:	bf00      	nop
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	e000e010 	.word	0xe000e010

0800ac94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac94:	b580      	push	{r7, lr}
 800ac96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac98:	2100      	movs	r1, #0
 800ac9a:	f06f 0004 	mvn.w	r0, #4
 800ac9e:	f7ff ffbf 	bl	800ac20 <__NVIC_SetPriority>
#endif
}
 800aca2:	bf00      	nop
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acae:	f3ef 8305 	mrs	r3, IPSR
 800acb2:	603b      	str	r3, [r7, #0]
  return(result);
 800acb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800acba:	f06f 0305 	mvn.w	r3, #5
 800acbe:	607b      	str	r3, [r7, #4]
 800acc0:	e00c      	b.n	800acdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acc2:	4b0a      	ldr	r3, [pc, #40]	; (800acec <osKernelInitialize+0x44>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d105      	bne.n	800acd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acca:	4b08      	ldr	r3, [pc, #32]	; (800acec <osKernelInitialize+0x44>)
 800accc:	2201      	movs	r2, #1
 800acce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	607b      	str	r3, [r7, #4]
 800acd4:	e002      	b.n	800acdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800acd6:	f04f 33ff 	mov.w	r3, #4294967295
 800acda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800acdc:	687b      	ldr	r3, [r7, #4]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	20005814 	.word	0x20005814

0800acf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acf6:	f3ef 8305 	mrs	r3, IPSR
 800acfa:	603b      	str	r3, [r7, #0]
  return(result);
 800acfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad02:	f06f 0305 	mvn.w	r3, #5
 800ad06:	607b      	str	r3, [r7, #4]
 800ad08:	e010      	b.n	800ad2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad0a:	4b0b      	ldr	r3, [pc, #44]	; (800ad38 <osKernelStart+0x48>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d109      	bne.n	800ad26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad12:	f7ff ffbf 	bl	800ac94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad16:	4b08      	ldr	r3, [pc, #32]	; (800ad38 <osKernelStart+0x48>)
 800ad18:	2202      	movs	r2, #2
 800ad1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad1c:	f001 ffc8 	bl	800ccb0 <vTaskStartScheduler>
      stat = osOK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	607b      	str	r3, [r7, #4]
 800ad24:	e002      	b.n	800ad2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad2c:	687b      	ldr	r3, [r7, #4]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20005814 	.word	0x20005814

0800ad3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad42:	f3ef 8305 	mrs	r3, IPSR
 800ad46:	603b      	str	r3, [r7, #0]
  return(result);
 800ad48:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ad4e:	f002 f8db 	bl	800cf08 <xTaskGetTickCountFromISR>
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	e002      	b.n	800ad5c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ad56:	f002 f8c7 	bl	800cee8 <xTaskGetTickCount>
 800ad5a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ad5c:	687b      	ldr	r3, [r7, #4]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b08e      	sub	sp, #56	; 0x38
 800ad6a:	af04      	add	r7, sp, #16
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad76:	f3ef 8305 	mrs	r3, IPSR
 800ad7a:	617b      	str	r3, [r7, #20]
  return(result);
 800ad7c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d17e      	bne.n	800ae80 <osThreadNew+0x11a>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d07b      	beq.n	800ae80 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad88:	2380      	movs	r3, #128	; 0x80
 800ad8a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad8c:	2318      	movs	r3, #24
 800ad8e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad94:	f04f 33ff 	mov.w	r3, #4294967295
 800ad98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d045      	beq.n	800ae2c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <osThreadNew+0x48>
        name = attr->name;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d008      	beq.n	800add4 <osThreadNew+0x6e>
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	2b38      	cmp	r3, #56	; 0x38
 800adc6:	d805      	bhi.n	800add4 <osThreadNew+0x6e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <osThreadNew+0x72>
        return (NULL);
 800add4:	2300      	movs	r3, #0
 800add6:	e054      	b.n	800ae82 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d003      	beq.n	800ade8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	089b      	lsrs	r3, r3, #2
 800ade6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00e      	beq.n	800ae0e <osThreadNew+0xa8>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	2bbb      	cmp	r3, #187	; 0xbb
 800adf6:	d90a      	bls.n	800ae0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <osThreadNew+0xa8>
        mem = 1;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	e010      	b.n	800ae30 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10c      	bne.n	800ae30 <osThreadNew+0xca>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d108      	bne.n	800ae30 <osThreadNew+0xca>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d104      	bne.n	800ae30 <osThreadNew+0xca>
          mem = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	61bb      	str	r3, [r7, #24]
 800ae2a:	e001      	b.n	800ae30 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d110      	bne.n	800ae58 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae3e:	9202      	str	r2, [sp, #8]
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	6a3a      	ldr	r2, [r7, #32]
 800ae4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f001 fd43 	bl	800c8d8 <xTaskCreateStatic>
 800ae52:	4603      	mov	r3, r0
 800ae54:	613b      	str	r3, [r7, #16]
 800ae56:	e013      	b.n	800ae80 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d110      	bne.n	800ae80 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	f107 0310 	add.w	r3, r7, #16
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f001 fd8e 	bl	800c992 <xTaskCreate>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d001      	beq.n	800ae80 <osThreadNew+0x11a>
            hTask = NULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae80:	693b      	ldr	r3, [r7, #16]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3728      	adds	r7, #40	; 0x28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae92:	f3ef 8305 	mrs	r3, IPSR
 800ae96:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <osDelay+0x1c>
    stat = osErrorISR;
 800ae9e:	f06f 0305 	mvn.w	r3, #5
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e007      	b.n	800aeb6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f001 fec9 	bl	800cc48 <vTaskDelay>
    }
  }

  return (stat);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800aec8:	2300      	movs	r3, #0
 800aeca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aecc:	f3ef 8305 	mrs	r3, IPSR
 800aed0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aed2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d174      	bne.n	800afc2 <osMutexNew+0x102>
    if (attr != NULL) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	61bb      	str	r3, [r7, #24]
 800aee4:	e001      	b.n	800aeea <osMutexNew+0x2a>
    } else {
      type = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <osMutexNew+0x3a>
      rmtx = 1U;
 800aef4:	2301      	movs	r3, #1
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	e001      	b.n	800aefe <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	f003 0308 	and.w	r3, r3, #8
 800af04:	2b00      	cmp	r3, #0
 800af06:	d15c      	bne.n	800afc2 <osMutexNew+0x102>
      mem = -1;
 800af08:	f04f 33ff 	mov.w	r3, #4294967295
 800af0c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d015      	beq.n	800af40 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d006      	beq.n	800af2a <osMutexNew+0x6a>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	2b4f      	cmp	r3, #79	; 0x4f
 800af22:	d902      	bls.n	800af2a <osMutexNew+0x6a>
          mem = 1;
 800af24:	2301      	movs	r3, #1
 800af26:	613b      	str	r3, [r7, #16]
 800af28:	e00c      	b.n	800af44 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d108      	bne.n	800af44 <osMutexNew+0x84>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d104      	bne.n	800af44 <osMutexNew+0x84>
            mem = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	613b      	str	r3, [r7, #16]
 800af3e:	e001      	b.n	800af44 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d112      	bne.n	800af70 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	4619      	mov	r1, r3
 800af56:	2004      	movs	r0, #4
 800af58:	f000 fd69 	bl	800ba2e <xQueueCreateMutexStatic>
 800af5c:	61f8      	str	r0, [r7, #28]
 800af5e:	e016      	b.n	800af8e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	4619      	mov	r1, r3
 800af66:	2001      	movs	r0, #1
 800af68:	f000 fd61 	bl	800ba2e <xQueueCreateMutexStatic>
 800af6c:	61f8      	str	r0, [r7, #28]
 800af6e:	e00e      	b.n	800af8e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10b      	bne.n	800af8e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d004      	beq.n	800af86 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800af7c:	2004      	movs	r0, #4
 800af7e:	f000 fd3e 	bl	800b9fe <xQueueCreateMutex>
 800af82:	61f8      	str	r0, [r7, #28]
 800af84:	e003      	b.n	800af8e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800af86:	2001      	movs	r0, #1
 800af88:	f000 fd39 	bl	800b9fe <xQueueCreateMutex>
 800af8c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00c      	beq.n	800afae <osMutexNew+0xee>
        if (attr != NULL) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <osMutexNew+0xe2>
          name = attr->name;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	e001      	b.n	800afa6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800afa6:	68f9      	ldr	r1, [r7, #12]
 800afa8:	69f8      	ldr	r0, [r7, #28]
 800afaa:	f001 fc0d 	bl	800c7c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d006      	beq.n	800afc2 <osMutexNew+0x102>
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	f043 0301 	orr.w	r3, r3, #1
 800afc0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800afc2:	69fb      	ldr	r3, [r7, #28]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f023 0301 	bic.w	r3, r3, #1
 800afdc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afea:	f3ef 8305 	mrs	r3, IPSR
 800afee:	60bb      	str	r3, [r7, #8]
  return(result);
 800aff0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <osMutexAcquire+0x32>
    stat = osErrorISR;
 800aff6:	f06f 0305 	mvn.w	r3, #5
 800affa:	617b      	str	r3, [r7, #20]
 800affc:	e02c      	b.n	800b058 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d103      	bne.n	800b00c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b004:	f06f 0303 	mvn.w	r3, #3
 800b008:	617b      	str	r3, [r7, #20]
 800b00a:	e025      	b.n	800b058 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d011      	beq.n	800b036 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6938      	ldr	r0, [r7, #16]
 800b016:	f000 fd59 	bl	800bacc <xQueueTakeMutexRecursive>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d01b      	beq.n	800b058 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b026:	f06f 0301 	mvn.w	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e014      	b.n	800b058 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b02e:	f06f 0302 	mvn.w	r3, #2
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e010      	b.n	800b058 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6938      	ldr	r0, [r7, #16]
 800b03a:	f001 f8ed 	bl	800c218 <xQueueSemaphoreTake>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b01      	cmp	r3, #1
 800b042:	d009      	beq.n	800b058 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b04a:	f06f 0301 	mvn.w	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e002      	b.n	800b058 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b052:	f06f 0302 	mvn.w	r3, #2
 800b056:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b058:	697b      	ldr	r3, [r7, #20]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b062:	b580      	push	{r7, lr}
 800b064:	b086      	sub	sp, #24
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f023 0301 	bic.w	r3, r3, #1
 800b070:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b07e:	f3ef 8305 	mrs	r3, IPSR
 800b082:	60bb      	str	r3, [r7, #8]
  return(result);
 800b084:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b086:	2b00      	cmp	r3, #0
 800b088:	d003      	beq.n	800b092 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b08a:	f06f 0305 	mvn.w	r3, #5
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	e01f      	b.n	800b0d2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d103      	bne.n	800b0a0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b098:	f06f 0303 	mvn.w	r3, #3
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	e018      	b.n	800b0d2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b0a6:	6938      	ldr	r0, [r7, #16]
 800b0a8:	f000 fcdc 	bl	800ba64 <xQueueGiveMutexRecursive>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d00f      	beq.n	800b0d2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b0b2:	f06f 0302 	mvn.w	r3, #2
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	e00b      	b.n	800b0d2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6938      	ldr	r0, [r7, #16]
 800b0c2:	f000 fda3 	bl	800bc0c <xQueueGenericSend>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d002      	beq.n	800b0d2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b0cc:	f06f 0302 	mvn.w	r3, #2
 800b0d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b0d2:	697b      	ldr	r3, [r7, #20]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3718      	adds	r7, #24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08a      	sub	sp, #40	; 0x28
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0ec:	f3ef 8305 	mrs	r3, IPSR
 800b0f0:	613b      	str	r3, [r7, #16]
  return(result);
 800b0f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d175      	bne.n	800b1e4 <osSemaphoreNew+0x108>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d072      	beq.n	800b1e4 <osSemaphoreNew+0x108>
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	429a      	cmp	r2, r3
 800b104:	d86e      	bhi.n	800b1e4 <osSemaphoreNew+0x108>
    mem = -1;
 800b106:	f04f 33ff 	mov.w	r3, #4294967295
 800b10a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d015      	beq.n	800b13e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d006      	beq.n	800b128 <osSemaphoreNew+0x4c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	2b4f      	cmp	r3, #79	; 0x4f
 800b120:	d902      	bls.n	800b128 <osSemaphoreNew+0x4c>
        mem = 1;
 800b122:	2301      	movs	r3, #1
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	e00c      	b.n	800b142 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d108      	bne.n	800b142 <osSemaphoreNew+0x66>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d104      	bne.n	800b142 <osSemaphoreNew+0x66>
          mem = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	61bb      	str	r3, [r7, #24]
 800b13c:	e001      	b.n	800b142 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b148:	d04c      	beq.n	800b1e4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d128      	bne.n	800b1a2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d10a      	bne.n	800b16c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	2203      	movs	r2, #3
 800b15c:	9200      	str	r2, [sp, #0]
 800b15e:	2200      	movs	r2, #0
 800b160:	2100      	movs	r1, #0
 800b162:	2001      	movs	r0, #1
 800b164:	f000 fb5c 	bl	800b820 <xQueueGenericCreateStatic>
 800b168:	61f8      	str	r0, [r7, #28]
 800b16a:	e005      	b.n	800b178 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b16c:	2203      	movs	r2, #3
 800b16e:	2100      	movs	r1, #0
 800b170:	2001      	movs	r0, #1
 800b172:	f000 fbcd 	bl	800b910 <xQueueGenericCreate>
 800b176:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d022      	beq.n	800b1c4 <osSemaphoreNew+0xe8>
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d01f      	beq.n	800b1c4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b184:	2300      	movs	r3, #0
 800b186:	2200      	movs	r2, #0
 800b188:	2100      	movs	r1, #0
 800b18a:	69f8      	ldr	r0, [r7, #28]
 800b18c:	f000 fd3e 	bl	800bc0c <xQueueGenericSend>
 800b190:	4603      	mov	r3, r0
 800b192:	2b01      	cmp	r3, #1
 800b194:	d016      	beq.n	800b1c4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b196:	69f8      	ldr	r0, [r7, #28]
 800b198:	f001 f9ca 	bl	800c530 <vQueueDelete>
            hSemaphore = NULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	61fb      	str	r3, [r7, #28]
 800b1a0:	e010      	b.n	800b1c4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d108      	bne.n	800b1ba <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 fcc1 	bl	800bb38 <xQueueCreateCountingSemaphoreStatic>
 800b1b6:	61f8      	str	r0, [r7, #28]
 800b1b8:	e004      	b.n	800b1c4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b1ba:	68b9      	ldr	r1, [r7, #8]
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 fcf2 	bl	800bba6 <xQueueCreateCountingSemaphore>
 800b1c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00c      	beq.n	800b1e4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	e001      	b.n	800b1dc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b1dc:	6979      	ldr	r1, [r7, #20]
 800b1de:	69f8      	ldr	r0, [r7, #28]
 800b1e0:	f001 faf2 	bl	800c7c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b1e4:	69fb      	ldr	r3, [r7, #28]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3720      	adds	r7, #32
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d103      	bne.n	800b210 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b208:	f06f 0303 	mvn.w	r3, #3
 800b20c:	617b      	str	r3, [r7, #20]
 800b20e:	e039      	b.n	800b284 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b210:	f3ef 8305 	mrs	r3, IPSR
 800b214:	60fb      	str	r3, [r7, #12]
  return(result);
 800b216:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d022      	beq.n	800b262 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b222:	f06f 0303 	mvn.w	r3, #3
 800b226:	617b      	str	r3, [r7, #20]
 800b228:	e02c      	b.n	800b284 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b22e:	f107 0308 	add.w	r3, r7, #8
 800b232:	461a      	mov	r2, r3
 800b234:	2100      	movs	r1, #0
 800b236:	6938      	ldr	r0, [r7, #16]
 800b238:	f001 f8fa 	bl	800c430 <xQueueReceiveFromISR>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d003      	beq.n	800b24a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b242:	f06f 0302 	mvn.w	r3, #2
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	e01c      	b.n	800b284 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d019      	beq.n	800b284 <osSemaphoreAcquire+0x94>
 800b250:	4b0f      	ldr	r3, [pc, #60]	; (800b290 <osSemaphoreAcquire+0xa0>)
 800b252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	e010      	b.n	800b284 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6938      	ldr	r0, [r7, #16]
 800b266:	f000 ffd7 	bl	800c218 <xQueueSemaphoreTake>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d009      	beq.n	800b284 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b276:	f06f 0301 	mvn.w	r3, #1
 800b27a:	617b      	str	r3, [r7, #20]
 800b27c:	e002      	b.n	800b284 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b27e:	f06f 0302 	mvn.w	r3, #2
 800b282:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b284:	697b      	ldr	r3, [r7, #20]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	e000ed04 	.word	0xe000ed04

0800b294 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d103      	bne.n	800b2b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b2aa:	f06f 0303 	mvn.w	r3, #3
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e02c      	b.n	800b30c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2b2:	f3ef 8305 	mrs	r3, IPSR
 800b2b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d01a      	beq.n	800b2f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6938      	ldr	r0, [r7, #16]
 800b2ca:	f000 fe38 	bl	800bf3e <xQueueGiveFromISR>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d003      	beq.n	800b2dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b2d4:	f06f 0302 	mvn.w	r3, #2
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e017      	b.n	800b30c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d014      	beq.n	800b30c <osSemaphoreRelease+0x78>
 800b2e2:	4b0d      	ldr	r3, [pc, #52]	; (800b318 <osSemaphoreRelease+0x84>)
 800b2e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	e00b      	b.n	800b30c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	6938      	ldr	r0, [r7, #16]
 800b2fc:	f000 fc86 	bl	800bc0c <xQueueGenericSend>
 800b300:	4603      	mov	r3, r0
 800b302:	2b01      	cmp	r3, #1
 800b304:	d002      	beq.n	800b30c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b306:	f06f 0302 	mvn.w	r3, #2
 800b30a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b30c:	697b      	ldr	r3, [r7, #20]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	e000ed04 	.word	0xe000ed04

0800b31c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08a      	sub	sp, #40	; 0x28
 800b320:	af02      	add	r7, sp, #8
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b328:	2300      	movs	r3, #0
 800b32a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b32c:	f3ef 8305 	mrs	r3, IPSR
 800b330:	613b      	str	r3, [r7, #16]
  return(result);
 800b332:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b334:	2b00      	cmp	r3, #0
 800b336:	d15f      	bne.n	800b3f8 <osMessageQueueNew+0xdc>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d05c      	beq.n	800b3f8 <osMessageQueueNew+0xdc>
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d059      	beq.n	800b3f8 <osMessageQueueNew+0xdc>
    mem = -1;
 800b344:	f04f 33ff 	mov.w	r3, #4294967295
 800b348:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d029      	beq.n	800b3a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d012      	beq.n	800b37e <osMessageQueueNew+0x62>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	2b4f      	cmp	r3, #79	; 0x4f
 800b35e:	d90e      	bls.n	800b37e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00a      	beq.n	800b37e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	695a      	ldr	r2, [r3, #20]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	fb01 f303 	mul.w	r3, r1, r3
 800b374:	429a      	cmp	r2, r3
 800b376:	d302      	bcc.n	800b37e <osMessageQueueNew+0x62>
        mem = 1;
 800b378:	2301      	movs	r3, #1
 800b37a:	61bb      	str	r3, [r7, #24]
 800b37c:	e014      	b.n	800b3a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d110      	bne.n	800b3a8 <osMessageQueueNew+0x8c>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10c      	bne.n	800b3a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b392:	2b00      	cmp	r3, #0
 800b394:	d108      	bne.n	800b3a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d104      	bne.n	800b3a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	61bb      	str	r3, [r7, #24]
 800b3a2:	e001      	b.n	800b3a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d10b      	bne.n	800b3c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	691a      	ldr	r2, [r3, #16]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	9100      	str	r1, [sp, #0]
 800b3ba:	68b9      	ldr	r1, [r7, #8]
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f000 fa2f 	bl	800b820 <xQueueGenericCreateStatic>
 800b3c2:	61f8      	str	r0, [r7, #28]
 800b3c4:	e008      	b.n	800b3d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d105      	bne.n	800b3d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 fa9d 	bl	800b910 <xQueueGenericCreate>
 800b3d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00c      	beq.n	800b3f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d003      	beq.n	800b3ec <osMessageQueueNew+0xd0>
        name = attr->name;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	617b      	str	r3, [r7, #20]
 800b3ea:	e001      	b.n	800b3f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b3f0:	6979      	ldr	r1, [r7, #20]
 800b3f2:	69f8      	ldr	r0, [r7, #28]
 800b3f4:	f001 f9e8 	bl	800c7c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b3f8:	69fb      	ldr	r3, [r7, #28]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	4613      	mov	r3, r2
 800b412:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b418:	2300      	movs	r3, #0
 800b41a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b41c:	f3ef 8305 	mrs	r3, IPSR
 800b420:	617b      	str	r3, [r7, #20]
  return(result);
 800b422:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b424:	2b00      	cmp	r3, #0
 800b426:	d028      	beq.n	800b47a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d005      	beq.n	800b43a <osMessageQueuePut+0x36>
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <osMessageQueuePut+0x36>
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b43a:	f06f 0303 	mvn.w	r3, #3
 800b43e:	61fb      	str	r3, [r7, #28]
 800b440:	e038      	b.n	800b4b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b442:	2300      	movs	r3, #0
 800b444:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b446:	f107 0210 	add.w	r2, r7, #16
 800b44a:	2300      	movs	r3, #0
 800b44c:	68b9      	ldr	r1, [r7, #8]
 800b44e:	69b8      	ldr	r0, [r7, #24]
 800b450:	f000 fcda 	bl	800be08 <xQueueGenericSendFromISR>
 800b454:	4603      	mov	r3, r0
 800b456:	2b01      	cmp	r3, #1
 800b458:	d003      	beq.n	800b462 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b45a:	f06f 0302 	mvn.w	r3, #2
 800b45e:	61fb      	str	r3, [r7, #28]
 800b460:	e028      	b.n	800b4b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d025      	beq.n	800b4b4 <osMessageQueuePut+0xb0>
 800b468:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <osMessageQueuePut+0xbc>)
 800b46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	e01c      	b.n	800b4b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <osMessageQueuePut+0x82>
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d103      	bne.n	800b48e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b486:	f06f 0303 	mvn.w	r3, #3
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e012      	b.n	800b4b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b48e:	2300      	movs	r3, #0
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	68b9      	ldr	r1, [r7, #8]
 800b494:	69b8      	ldr	r0, [r7, #24]
 800b496:	f000 fbb9 	bl	800bc0c <xQueueGenericSend>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d009      	beq.n	800b4b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b4a6:	f06f 0301 	mvn.w	r3, #1
 800b4aa:	61fb      	str	r3, [r7, #28]
 800b4ac:	e002      	b.n	800b4b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b4ae:	f06f 0302 	mvn.w	r3, #2
 800b4b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b4b4:	69fb      	ldr	r3, [r7, #28]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3720      	adds	r7, #32
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	e000ed04 	.word	0xe000ed04

0800b4c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4da:	f3ef 8305 	mrs	r3, IPSR
 800b4de:	617b      	str	r3, [r7, #20]
  return(result);
 800b4e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d028      	beq.n	800b538 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d005      	beq.n	800b4f8 <osMessageQueueGet+0x34>
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d002      	beq.n	800b4f8 <osMessageQueueGet+0x34>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b4f8:	f06f 0303 	mvn.w	r3, #3
 800b4fc:	61fb      	str	r3, [r7, #28]
 800b4fe:	e037      	b.n	800b570 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b500:	2300      	movs	r3, #0
 800b502:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b504:	f107 0310 	add.w	r3, r7, #16
 800b508:	461a      	mov	r2, r3
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	69b8      	ldr	r0, [r7, #24]
 800b50e:	f000 ff8f 	bl	800c430 <xQueueReceiveFromISR>
 800b512:	4603      	mov	r3, r0
 800b514:	2b01      	cmp	r3, #1
 800b516:	d003      	beq.n	800b520 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b518:	f06f 0302 	mvn.w	r3, #2
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e027      	b.n	800b570 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d024      	beq.n	800b570 <osMessageQueueGet+0xac>
 800b526:	4b15      	ldr	r3, [pc, #84]	; (800b57c <osMessageQueueGet+0xb8>)
 800b528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	e01b      	b.n	800b570 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <osMessageQueueGet+0x80>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b544:	f06f 0303 	mvn.w	r3, #3
 800b548:	61fb      	str	r3, [r7, #28]
 800b54a:	e011      	b.n	800b570 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	68b9      	ldr	r1, [r7, #8]
 800b550:	69b8      	ldr	r0, [r7, #24]
 800b552:	f000 fd81 	bl	800c058 <xQueueReceive>
 800b556:	4603      	mov	r3, r0
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d009      	beq.n	800b570 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b562:	f06f 0301 	mvn.w	r3, #1
 800b566:	61fb      	str	r3, [r7, #28]
 800b568:	e002      	b.n	800b570 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b56a:	f06f 0302 	mvn.w	r3, #2
 800b56e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b570:	69fb      	ldr	r3, [r7, #28]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3720      	adds	r7, #32
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	e000ed04 	.word	0xe000ed04

0800b580 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4a07      	ldr	r2, [pc, #28]	; (800b5ac <vApplicationGetIdleTaskMemory+0x2c>)
 800b590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	4a06      	ldr	r2, [pc, #24]	; (800b5b0 <vApplicationGetIdleTaskMemory+0x30>)
 800b596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2280      	movs	r2, #128	; 0x80
 800b59c:	601a      	str	r2, [r3, #0]
}
 800b59e:	bf00      	nop
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	20005818 	.word	0x20005818
 800b5b0:	200058d4 	.word	0x200058d4

0800b5b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	4a07      	ldr	r2, [pc, #28]	; (800b5e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b5c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	4a06      	ldr	r2, [pc, #24]	; (800b5e4 <vApplicationGetTimerTaskMemory+0x30>)
 800b5ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5d2:	601a      	str	r2, [r3, #0]
}
 800b5d4:	bf00      	nop
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	20005ad4 	.word	0x20005ad4
 800b5e4:	20005b90 	.word	0x20005b90

0800b5e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f103 0208 	add.w	r2, r3, #8
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f103 0208 	add.w	r2, r3, #8
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f103 0208 	add.w	r2, r3, #8
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b636:	bf00      	nop
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b642:	b480      	push	{r7}
 800b644:	b085      	sub	sp, #20
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	689a      	ldr	r2, [r3, #8]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	601a      	str	r2, [r3, #0]
}
 800b67e:	bf00      	nop
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b68a:	b480      	push	{r7}
 800b68c:	b085      	sub	sp, #20
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a0:	d103      	bne.n	800b6aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	e00c      	b.n	800b6c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	e002      	b.n	800b6b8 <vListInsert+0x2e>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d2f6      	bcs.n	800b6b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	601a      	str	r2, [r3, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6892      	ldr	r2, [r2, #8]
 800b712:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	6852      	ldr	r2, [r2, #4]
 800b71c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	429a      	cmp	r2, r3
 800b726:	d103      	bne.n	800b730 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	689a      	ldr	r2, [r3, #8]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	1e5a      	subs	r2, r3, #1
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b77a:	f002 fd73 	bl	800e264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b786:	68f9      	ldr	r1, [r7, #12]
 800b788:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b78a:	fb01 f303 	mul.w	r3, r1, r3
 800b78e:	441a      	add	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	68f9      	ldr	r1, [r7, #12]
 800b7ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7b0:	fb01 f303 	mul.w	r3, r1, r3
 800b7b4:	441a      	add	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	22ff      	movs	r2, #255	; 0xff
 800b7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	22ff      	movs	r2, #255	; 0xff
 800b7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d114      	bne.n	800b7fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01a      	beq.n	800b80e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3310      	adds	r3, #16
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f001 fd13 	bl	800d208 <xTaskRemoveFromEventList>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d012      	beq.n	800b80e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7e8:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <xQueueGenericReset+0xcc>)
 800b7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	e009      	b.n	800b80e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3310      	adds	r3, #16
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fef2 	bl	800b5e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3324      	adds	r3, #36	; 0x24
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff feed 	bl	800b5e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b80e:	f002 fd59 	bl	800e2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b812:	2301      	movs	r3, #1
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	e000ed04 	.word	0xe000ed04

0800b820 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08e      	sub	sp, #56	; 0x38
 800b824:	af02      	add	r7, sp, #8
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <xQueueGenericCreateStatic+0x52>
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <xQueueGenericCreateStatic+0x56>
 800b872:	2301      	movs	r3, #1
 800b874:	e000      	b.n	800b878 <xQueueGenericCreateStatic+0x58>
 800b876:	2300      	movs	r3, #0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	623b      	str	r3, [r7, #32]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d102      	bne.n	800b89e <xQueueGenericCreateStatic+0x7e>
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <xQueueGenericCreateStatic+0x82>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e000      	b.n	800b8a4 <xQueueGenericCreateStatic+0x84>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10a      	bne.n	800b8be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	61fb      	str	r3, [r7, #28]
}
 800b8ba:	bf00      	nop
 800b8bc:	e7fe      	b.n	800b8bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8be:	2350      	movs	r3, #80	; 0x50
 800b8c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b50      	cmp	r3, #80	; 0x50
 800b8c6:	d00a      	beq.n	800b8de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	61bb      	str	r3, [r7, #24]
}
 800b8da:	bf00      	nop
 800b8dc:	e7fe      	b.n	800b8dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00d      	beq.n	800b906 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	68b9      	ldr	r1, [r7, #8]
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f83f 	bl	800b984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b908:	4618      	mov	r0, r3
 800b90a:	3730      	adds	r7, #48	; 0x30
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08a      	sub	sp, #40	; 0x28
 800b914:	af02      	add	r7, sp, #8
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	4613      	mov	r3, r2
 800b91c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10a      	bne.n	800b93a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b928:	f383 8811 	msr	BASEPRI, r3
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	613b      	str	r3, [r7, #16]
}
 800b936:	bf00      	nop
 800b938:	e7fe      	b.n	800b938 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	fb02 f303 	mul.w	r3, r2, r3
 800b942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	3350      	adds	r3, #80	; 0x50
 800b948:	4618      	mov	r0, r3
 800b94a:	f002 fdad 	bl	800e4a8 <pvPortMalloc>
 800b94e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d011      	beq.n	800b97a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	3350      	adds	r3, #80	; 0x50
 800b95e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b968:	79fa      	ldrb	r2, [r7, #7]
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	4613      	mov	r3, r2
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f805 	bl	800b984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b97a:	69bb      	ldr	r3, [r7, #24]
	}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3720      	adds	r7, #32
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	69ba      	ldr	r2, [r7, #24]
 800b99c:	601a      	str	r2, [r3, #0]
 800b99e:	e002      	b.n	800b9a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	69b8      	ldr	r0, [r7, #24]
 800b9b6:	f7ff fecb 	bl	800b750 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	78fa      	ldrb	r2, [r7, #3]
 800b9be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00e      	beq.n	800b9f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f90b 	bl	800bc0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b9f6:	bf00      	nop
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b086      	sub	sp, #24
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	4603      	mov	r3, r0
 800ba06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	617b      	str	r3, [r7, #20]
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba10:	79fb      	ldrb	r3, [r7, #7]
 800ba12:	461a      	mov	r2, r3
 800ba14:	6939      	ldr	r1, [r7, #16]
 800ba16:	6978      	ldr	r0, [r7, #20]
 800ba18:	f7ff ff7a 	bl	800b910 <xQueueGenericCreate>
 800ba1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff ffd3 	bl	800b9ca <prvInitialiseMutex>

		return xNewQueue;
 800ba24:	68fb      	ldr	r3, [r7, #12]
	}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3718      	adds	r7, #24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b088      	sub	sp, #32
 800ba32:	af02      	add	r7, sp, #8
 800ba34:	4603      	mov	r3, r0
 800ba36:	6039      	str	r1, [r7, #0]
 800ba38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba42:	79fb      	ldrb	r3, [r7, #7]
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	6939      	ldr	r1, [r7, #16]
 800ba4c:	6978      	ldr	r0, [r7, #20]
 800ba4e:	f7ff fee7 	bl	800b820 <xQueueGenericCreateStatic>
 800ba52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f7ff ffb8 	bl	800b9ca <prvInitialiseMutex>

		return xNewQueue;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
	}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ba64:	b590      	push	{r4, r7, lr}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10a      	bne.n	800ba8c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	60fb      	str	r3, [r7, #12]
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	689c      	ldr	r4, [r3, #8]
 800ba90:	f001 fd7c 	bl	800d58c <xTaskGetCurrentTaskHandle>
 800ba94:	4603      	mov	r3, r0
 800ba96:	429c      	cmp	r4, r3
 800ba98:	d111      	bne.n	800babe <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	1e5a      	subs	r2, r3, #1
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d105      	bne.n	800bab8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800baac:	2300      	movs	r3, #0
 800baae:	2200      	movs	r2, #0
 800bab0:	2100      	movs	r1, #0
 800bab2:	6938      	ldr	r0, [r7, #16]
 800bab4:	f000 f8aa 	bl	800bc0c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bab8:	2301      	movs	r3, #1
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	e001      	b.n	800bac2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800babe:	2300      	movs	r3, #0
 800bac0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bac2:	697b      	ldr	r3, [r7, #20]
	}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd90      	pop	{r4, r7, pc}

0800bacc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bacc:	b590      	push	{r4, r7, lr}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	689c      	ldr	r4, [r3, #8]
 800bafa:	f001 fd47 	bl	800d58c <xTaskGetCurrentTaskHandle>
 800bafe:	4603      	mov	r3, r0
 800bb00:	429c      	cmp	r4, r3
 800bb02:	d107      	bne.n	800bb14 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	617b      	str	r3, [r7, #20]
 800bb12:	e00c      	b.n	800bb2e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6938      	ldr	r0, [r7, #16]
 800bb18:	f000 fb7e 	bl	800c218 <xQueueSemaphoreTake>
 800bb1c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d004      	beq.n	800bb2e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bb2e:	697b      	ldr	r3, [r7, #20]
	}
 800bb30:	4618      	mov	r0, r3
 800bb32:	371c      	adds	r7, #28
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd90      	pop	{r4, r7, pc}

0800bb38 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08a      	sub	sp, #40	; 0x28
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10a      	bne.n	800bb60 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	61bb      	str	r3, [r7, #24]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d90a      	bls.n	800bb7e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	617b      	str	r3, [r7, #20]
}
 800bb7a:	bf00      	nop
 800bb7c:	e7fe      	b.n	800bb7c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb7e:	2302      	movs	r3, #2
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	2100      	movs	r1, #0
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff fe49 	bl	800b820 <xQueueGenericCreateStatic>
 800bb8e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
	}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b086      	sub	sp, #24
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10a      	bne.n	800bbcc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	613b      	str	r3, [r7, #16]
}
 800bbc8:	bf00      	nop
 800bbca:	e7fe      	b.n	800bbca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d90a      	bls.n	800bbea <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	60fb      	str	r3, [r7, #12]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bbea:	2202      	movs	r2, #2
 800bbec:	2100      	movs	r1, #0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff fe8e 	bl	800b910 <xQueueGenericCreate>
 800bbf4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bc02:	697b      	ldr	r3, [r7, #20]
	}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08e      	sub	sp, #56	; 0x38
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <xQueueGenericSend+0x32>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d103      	bne.n	800bc4c <xQueueGenericSend+0x40>
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <xQueueGenericSend+0x44>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e000      	b.n	800bc52 <xQueueGenericSend+0x46>
 800bc50:	2300      	movs	r3, #0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10a      	bne.n	800bc6c <xQueueGenericSend+0x60>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc68:	bf00      	nop
 800bc6a:	e7fe      	b.n	800bc6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d103      	bne.n	800bc7a <xQueueGenericSend+0x6e>
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d101      	bne.n	800bc7e <xQueueGenericSend+0x72>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e000      	b.n	800bc80 <xQueueGenericSend+0x74>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <xQueueGenericSend+0x8e>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	623b      	str	r3, [r7, #32]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc9a:	f001 fc87 	bl	800d5ac <xTaskGetSchedulerState>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d102      	bne.n	800bcaa <xQueueGenericSend+0x9e>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <xQueueGenericSend+0xa2>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <xQueueGenericSend+0xa4>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <xQueueGenericSend+0xbe>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	61fb      	str	r3, [r7, #28]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcca:	f002 facb 	bl	800e264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d302      	bcc.n	800bce0 <xQueueGenericSend+0xd4>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d129      	bne.n	800bd34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bce6:	f000 fc5e 	bl	800c5a6 <prvCopyDataToQueue>
 800bcea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d010      	beq.n	800bd16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf6:	3324      	adds	r3, #36	; 0x24
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f001 fa85 	bl	800d208 <xTaskRemoveFromEventList>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d013      	beq.n	800bd2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd04:	4b3f      	ldr	r3, [pc, #252]	; (800be04 <xQueueGenericSend+0x1f8>)
 800bd06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	e00a      	b.n	800bd2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d007      	beq.n	800bd2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd1c:	4b39      	ldr	r3, [pc, #228]	; (800be04 <xQueueGenericSend+0x1f8>)
 800bd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd2c:	f002 faca 	bl	800e2c4 <vPortExitCritical>
				return pdPASS;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e063      	b.n	800bdfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d103      	bne.n	800bd42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd3a:	f002 fac3 	bl	800e2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e05c      	b.n	800bdfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd48:	f107 0314 	add.w	r3, r7, #20
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f001 fabf 	bl	800d2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd52:	2301      	movs	r3, #1
 800bd54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd56:	f002 fab5 	bl	800e2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd5a:	f001 f819 	bl	800cd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd5e:	f002 fa81 	bl	800e264 <vPortEnterCritical>
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6e:	d103      	bne.n	800bd78 <xQueueGenericSend+0x16c>
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd7e:	b25b      	sxtb	r3, r3
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd84:	d103      	bne.n	800bd8e <xQueueGenericSend+0x182>
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd8e:	f002 fa99 	bl	800e2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd92:	1d3a      	adds	r2, r7, #4
 800bd94:	f107 0314 	add.w	r3, r7, #20
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f001 faae 	bl	800d2fc <xTaskCheckForTimeOut>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d124      	bne.n	800bdf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bda6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda8:	f000 fcf5 	bl	800c796 <prvIsQueueFull>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d018      	beq.n	800bde4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	3310      	adds	r3, #16
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	4611      	mov	r1, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f001 f9d4 	bl	800d168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdc2:	f000 fc80 	bl	800c6c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdc6:	f000 fff1 	bl	800cdac <xTaskResumeAll>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f47f af7c 	bne.w	800bcca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bdd2:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <xQueueGenericSend+0x1f8>)
 800bdd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	e772      	b.n	800bcca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bde6:	f000 fc6e 	bl	800c6c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdea:	f000 ffdf 	bl	800cdac <xTaskResumeAll>
 800bdee:	e76c      	b.n	800bcca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bdf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdf2:	f000 fc68 	bl	800c6c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdf6:	f000 ffd9 	bl	800cdac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bdfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3738      	adds	r7, #56	; 0x38
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	e000ed04 	.word	0xe000ed04

0800be08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b090      	sub	sp, #64	; 0x40
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10a      	bne.n	800be36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d103      	bne.n	800be44 <xQueueGenericSendFromISR+0x3c>
 800be3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <xQueueGenericSendFromISR+0x40>
 800be44:	2301      	movs	r3, #1
 800be46:	e000      	b.n	800be4a <xQueueGenericSendFromISR+0x42>
 800be48:	2300      	movs	r3, #0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b02      	cmp	r3, #2
 800be68:	d103      	bne.n	800be72 <xQueueGenericSendFromISR+0x6a>
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d101      	bne.n	800be76 <xQueueGenericSendFromISR+0x6e>
 800be72:	2301      	movs	r3, #1
 800be74:	e000      	b.n	800be78 <xQueueGenericSendFromISR+0x70>
 800be76:	2300      	movs	r3, #0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	623b      	str	r3, [r7, #32]
}
 800be8e:	bf00      	nop
 800be90:	e7fe      	b.n	800be90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be92:	f002 fac9 	bl	800e428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be96:	f3ef 8211 	mrs	r2, BASEPRI
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	61fa      	str	r2, [r7, #28]
 800beac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800beae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800beb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beba:	429a      	cmp	r2, r3
 800bebc:	d302      	bcc.n	800bec4 <xQueueGenericSendFromISR+0xbc>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d12f      	bne.n	800bf24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800beda:	f000 fb64 	bl	800c5a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bede:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d112      	bne.n	800bf0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	2b00      	cmp	r3, #0
 800beee:	d016      	beq.n	800bf1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef2:	3324      	adds	r3, #36	; 0x24
 800bef4:	4618      	mov	r0, r3
 800bef6:	f001 f987 	bl	800d208 <xTaskRemoveFromEventList>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00e      	beq.n	800bf1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00b      	beq.n	800bf1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	e007      	b.n	800bf1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf12:	3301      	adds	r3, #1
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	b25a      	sxtb	r2, r3
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bf22:	e001      	b.n	800bf28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3740      	adds	r7, #64	; 0x40
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b08e      	sub	sp, #56	; 0x38
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10a      	bne.n	800bf68 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	623b      	str	r3, [r7, #32]
}
 800bf64:	bf00      	nop
 800bf66:	e7fe      	b.n	800bf66 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	61fb      	str	r3, [r7, #28]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d103      	bne.n	800bf96 <xQueueGiveFromISR+0x58>
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <xQueueGiveFromISR+0x5c>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <xQueueGiveFromISR+0x5e>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10a      	bne.n	800bfb6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	61bb      	str	r3, [r7, #24]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfb6:	f002 fa37 	bl	800e428 <vPortValidateInterruptPriority>
	__asm volatile
 800bfba:	f3ef 8211 	mrs	r2, BASEPRI
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	617a      	str	r2, [r7, #20]
 800bfd0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bfd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d22b      	bcs.n	800c03e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	1c5a      	adds	r2, r3, #1
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c000:	d112      	bne.n	800c028 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c006:	2b00      	cmp	r3, #0
 800c008:	d016      	beq.n	800c038 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	3324      	adds	r3, #36	; 0x24
 800c00e:	4618      	mov	r0, r3
 800c010:	f001 f8fa 	bl	800d208 <xTaskRemoveFromEventList>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00e      	beq.n	800c038 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2201      	movs	r2, #1
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	e007      	b.n	800c038 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c02c:	3301      	adds	r3, #1
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	b25a      	sxtb	r2, r3
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c038:	2301      	movs	r3, #1
 800c03a:	637b      	str	r3, [r7, #52]	; 0x34
 800c03c:	e001      	b.n	800c042 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	637b      	str	r3, [r7, #52]	; 0x34
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f383 8811 	msr	BASEPRI, r3
}
 800c04c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c050:	4618      	mov	r0, r3
 800c052:	3738      	adds	r7, #56	; 0x38
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08c      	sub	sp, #48	; 0x30
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c064:	2300      	movs	r3, #0
 800c066:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10a      	bne.n	800c088 <xQueueReceive+0x30>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	623b      	str	r3, [r7, #32]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d103      	bne.n	800c096 <xQueueReceive+0x3e>
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <xQueueReceive+0x42>
 800c096:	2301      	movs	r3, #1
 800c098:	e000      	b.n	800c09c <xQueueReceive+0x44>
 800c09a:	2300      	movs	r3, #0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10a      	bne.n	800c0b6 <xQueueReceive+0x5e>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	61fb      	str	r3, [r7, #28]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0b6:	f001 fa79 	bl	800d5ac <xTaskGetSchedulerState>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d102      	bne.n	800c0c6 <xQueueReceive+0x6e>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d101      	bne.n	800c0ca <xQueueReceive+0x72>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e000      	b.n	800c0cc <xQueueReceive+0x74>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <xQueueReceive+0x8e>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	61bb      	str	r3, [r7, #24]
}
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0e6:	f002 f8bd 	bl	800e264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d01f      	beq.n	800c136 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0f6:	68b9      	ldr	r1, [r7, #8]
 800c0f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0fa:	f000 fabe 	bl	800c67a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	1e5a      	subs	r2, r3, #1
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00f      	beq.n	800c12e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c110:	3310      	adds	r3, #16
 800c112:	4618      	mov	r0, r3
 800c114:	f001 f878 	bl	800d208 <xTaskRemoveFromEventList>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d007      	beq.n	800c12e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c11e:	4b3d      	ldr	r3, [pc, #244]	; (800c214 <xQueueReceive+0x1bc>)
 800c120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c12e:	f002 f8c9 	bl	800e2c4 <vPortExitCritical>
				return pdPASS;
 800c132:	2301      	movs	r3, #1
 800c134:	e069      	b.n	800c20a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d103      	bne.n	800c144 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c13c:	f002 f8c2 	bl	800e2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c140:	2300      	movs	r3, #0
 800c142:	e062      	b.n	800c20a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	2b00      	cmp	r3, #0
 800c148:	d106      	bne.n	800c158 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c14a:	f107 0310 	add.w	r3, r7, #16
 800c14e:	4618      	mov	r0, r3
 800c150:	f001 f8be 	bl	800d2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c154:	2301      	movs	r3, #1
 800c156:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c158:	f002 f8b4 	bl	800e2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c15c:	f000 fe18 	bl	800cd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c160:	f002 f880 	bl	800e264 <vPortEnterCritical>
 800c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c16a:	b25b      	sxtb	r3, r3
 800c16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c170:	d103      	bne.n	800c17a <xQueueReceive+0x122>
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c180:	b25b      	sxtb	r3, r3
 800c182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c186:	d103      	bne.n	800c190 <xQueueReceive+0x138>
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c190:	f002 f898 	bl	800e2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c194:	1d3a      	adds	r2, r7, #4
 800c196:	f107 0310 	add.w	r3, r7, #16
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f001 f8ad 	bl	800d2fc <xTaskCheckForTimeOut>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d123      	bne.n	800c1f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1aa:	f000 fade 	bl	800c76a <prvIsQueueEmpty>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d017      	beq.n	800c1e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	3324      	adds	r3, #36	; 0x24
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 ffd3 	bl	800d168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c4:	f000 fa7f 	bl	800c6c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1c8:	f000 fdf0 	bl	800cdac <xTaskResumeAll>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d189      	bne.n	800c0e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c1d2:	4b10      	ldr	r3, [pc, #64]	; (800c214 <xQueueReceive+0x1bc>)
 800c1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	e780      	b.n	800c0e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1e6:	f000 fa6e 	bl	800c6c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1ea:	f000 fddf 	bl	800cdac <xTaskResumeAll>
 800c1ee:	e77a      	b.n	800c0e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1f2:	f000 fa68 	bl	800c6c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1f6:	f000 fdd9 	bl	800cdac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1fc:	f000 fab5 	bl	800c76a <prvIsQueueEmpty>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	f43f af6f 	beq.w	800c0e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c208:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3730      	adds	r7, #48	; 0x30
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	e000ed04 	.word	0xe000ed04

0800c218 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08e      	sub	sp, #56	; 0x38
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c222:	2300      	movs	r3, #0
 800c224:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10a      	bne.n	800c24a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	623b      	str	r3, [r7, #32]
}
 800c246:	bf00      	nop
 800c248:	e7fe      	b.n	800c248 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	61fb      	str	r3, [r7, #28]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c268:	f001 f9a0 	bl	800d5ac <xTaskGetSchedulerState>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d102      	bne.n	800c278 <xQueueSemaphoreTake+0x60>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <xQueueSemaphoreTake+0x64>
 800c278:	2301      	movs	r3, #1
 800c27a:	e000      	b.n	800c27e <xQueueSemaphoreTake+0x66>
 800c27c:	2300      	movs	r3, #0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	61bb      	str	r3, [r7, #24]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c298:	f001 ffe4 	bl	800e264 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d024      	beq.n	800c2f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	1e5a      	subs	r2, r3, #1
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d104      	bne.n	800c2c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c2b8:	f001 faee 	bl	800d898 <pvTaskIncrementMutexHeldCount>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00f      	beq.n	800c2ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	3310      	adds	r3, #16
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 ff9a 	bl	800d208 <xTaskRemoveFromEventList>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d007      	beq.n	800c2ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c2da:	4b54      	ldr	r3, [pc, #336]	; (800c42c <xQueueSemaphoreTake+0x214>)
 800c2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2ea:	f001 ffeb 	bl	800e2c4 <vPortExitCritical>
				return pdPASS;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e097      	b.n	800c422 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d111      	bne.n	800c31c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00a      	beq.n	800c314 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	617b      	str	r3, [r7, #20]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c314:	f001 ffd6 	bl	800e2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c318:	2300      	movs	r3, #0
 800c31a:	e082      	b.n	800c422 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c322:	f107 030c 	add.w	r3, r7, #12
 800c326:	4618      	mov	r0, r3
 800c328:	f000 ffd2 	bl	800d2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c330:	f001 ffc8 	bl	800e2c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c334:	f000 fd2c 	bl	800cd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c338:	f001 ff94 	bl	800e264 <vPortEnterCritical>
 800c33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c342:	b25b      	sxtb	r3, r3
 800c344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c348:	d103      	bne.n	800c352 <xQueueSemaphoreTake+0x13a>
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c358:	b25b      	sxtb	r3, r3
 800c35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35e:	d103      	bne.n	800c368 <xQueueSemaphoreTake+0x150>
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	2200      	movs	r2, #0
 800c364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c368:	f001 ffac 	bl	800e2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c36c:	463a      	mov	r2, r7
 800c36e:	f107 030c 	add.w	r3, r7, #12
 800c372:	4611      	mov	r1, r2
 800c374:	4618      	mov	r0, r3
 800c376:	f000 ffc1 	bl	800d2fc <xTaskCheckForTimeOut>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d132      	bne.n	800c3e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c382:	f000 f9f2 	bl	800c76a <prvIsQueueEmpty>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d026      	beq.n	800c3da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d109      	bne.n	800c3a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c394:	f001 ff66 	bl	800e264 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f001 f923 	bl	800d5e8 <xTaskPriorityInherit>
 800c3a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c3a4:	f001 ff8e 	bl	800e2c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3aa:	3324      	adds	r3, #36	; 0x24
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 fed9 	bl	800d168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3b8:	f000 f985 	bl	800c6c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3bc:	f000 fcf6 	bl	800cdac <xTaskResumeAll>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f47f af68 	bne.w	800c298 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c3c8:	4b18      	ldr	r3, [pc, #96]	; (800c42c <xQueueSemaphoreTake+0x214>)
 800c3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	e75e      	b.n	800c298 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3dc:	f000 f973 	bl	800c6c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3e0:	f000 fce4 	bl	800cdac <xTaskResumeAll>
 800c3e4:	e758      	b.n	800c298 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c3e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3e8:	f000 f96d 	bl	800c6c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3ec:	f000 fcde 	bl	800cdac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3f2:	f000 f9ba 	bl	800c76a <prvIsQueueEmpty>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f43f af4d 	beq.w	800c298 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00d      	beq.n	800c420 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c404:	f001 ff2e 	bl	800e264 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c40a:	f000 f8b4 	bl	800c576 <prvGetDisinheritPriorityAfterTimeout>
 800c40e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c416:	4618      	mov	r0, r3
 800c418:	f001 f9bc 	bl	800d794 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c41c:	f001 ff52 	bl	800e2c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c420:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c422:	4618      	mov	r0, r3
 800c424:	3738      	adds	r7, #56	; 0x38
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	e000ed04 	.word	0xe000ed04

0800c430 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08e      	sub	sp, #56	; 0x38
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10a      	bne.n	800c45c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	623b      	str	r3, [r7, #32]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d103      	bne.n	800c46a <xQueueReceiveFromISR+0x3a>
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <xQueueReceiveFromISR+0x3e>
 800c46a:	2301      	movs	r3, #1
 800c46c:	e000      	b.n	800c470 <xQueueReceiveFromISR+0x40>
 800c46e:	2300      	movs	r3, #0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	61fb      	str	r3, [r7, #28]
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c48a:	f001 ffcd 	bl	800e428 <vPortValidateInterruptPriority>
	__asm volatile
 800c48e:	f3ef 8211 	mrs	r2, BASEPRI
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	61ba      	str	r2, [r7, #24]
 800c4a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c4a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d02f      	beq.n	800c516 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4c0:	68b9      	ldr	r1, [r7, #8]
 800c4c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4c4:	f000 f8d9 	bl	800c67a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	1e5a      	subs	r2, r3, #1
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c4d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d8:	d112      	bne.n	800c500 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d016      	beq.n	800c510 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	3310      	adds	r3, #16
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 fe8e 	bl	800d208 <xTaskRemoveFromEventList>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00e      	beq.n	800c510 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	601a      	str	r2, [r3, #0]
 800c4fe:	e007      	b.n	800c510 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c504:	3301      	adds	r3, #1
 800c506:	b2db      	uxtb	r3, r3
 800c508:	b25a      	sxtb	r2, r3
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c510:	2301      	movs	r3, #1
 800c512:	637b      	str	r3, [r7, #52]	; 0x34
 800c514:	e001      	b.n	800c51a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c516:	2300      	movs	r3, #0
 800c518:	637b      	str	r3, [r7, #52]	; 0x34
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	f383 8811 	msr	BASEPRI, r3
}
 800c524:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3738      	adds	r7, #56	; 0x38
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10a      	bne.n	800c558 <vQueueDelete+0x28>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	60bb      	str	r3, [r7, #8]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f000 f95f 	bl	800c81c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f002 f869 	bl	800e640 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c56e:	bf00      	nop
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c576:	b480      	push	{r7}
 800c578:	b085      	sub	sp, #20
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d006      	beq.n	800c594 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c590:	60fb      	str	r3, [r7, #12]
 800c592:	e001      	b.n	800c598 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c594:	2300      	movs	r3, #0
 800c596:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c598:	68fb      	ldr	r3, [r7, #12]
	}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b086      	sub	sp, #24
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10d      	bne.n	800c5e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d14d      	bne.n	800c668 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f001 f871 	bl	800d6b8 <xTaskPriorityDisinherit>
 800c5d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	609a      	str	r2, [r3, #8]
 800c5de:	e043      	b.n	800c668 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d119      	bne.n	800c61a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6858      	ldr	r0, [r3, #4]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	68b9      	ldr	r1, [r7, #8]
 800c5f2:	f00c faea 	bl	8018bca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fe:	441a      	add	r2, r3
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d32b      	bcc.n	800c668 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	605a      	str	r2, [r3, #4]
 800c618:	e026      	b.n	800c668 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68d8      	ldr	r0, [r3, #12]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	461a      	mov	r2, r3
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	f00c fad0 	bl	8018bca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	68da      	ldr	r2, [r3, #12]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c632:	425b      	negs	r3, r3
 800c634:	441a      	add	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d207      	bcs.n	800c656 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	689a      	ldr	r2, [r3, #8]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64e:	425b      	negs	r3, r3
 800c650:	441a      	add	r2, r3
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d105      	bne.n	800c668 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d002      	beq.n	800c668 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	3b01      	subs	r3, #1
 800c666:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c670:	697b      	ldr	r3, [r7, #20]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b082      	sub	sp, #8
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d018      	beq.n	800c6be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c694:	441a      	add	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68da      	ldr	r2, [r3, #12]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d303      	bcc.n	800c6ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68d9      	ldr	r1, [r3, #12]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	6838      	ldr	r0, [r7, #0]
 800c6ba:	f00c fa86 	bl	8018bca <memcpy>
	}
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6ce:	f001 fdc9 	bl	800e264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6da:	e011      	b.n	800c700 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d012      	beq.n	800c70a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	3324      	adds	r3, #36	; 0x24
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 fd8d 	bl	800d208 <xTaskRemoveFromEventList>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6f4:	f000 fe64 	bl	800d3c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c704:	2b00      	cmp	r3, #0
 800c706:	dce9      	bgt.n	800c6dc <prvUnlockQueue+0x16>
 800c708:	e000      	b.n	800c70c <prvUnlockQueue+0x46>
					break;
 800c70a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	22ff      	movs	r2, #255	; 0xff
 800c710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c714:	f001 fdd6 	bl	800e2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c718:	f001 fda4 	bl	800e264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c722:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c724:	e011      	b.n	800c74a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d012      	beq.n	800c754 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3310      	adds	r3, #16
 800c732:	4618      	mov	r0, r3
 800c734:	f000 fd68 	bl	800d208 <xTaskRemoveFromEventList>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d001      	beq.n	800c742 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c73e:	f000 fe3f 	bl	800d3c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c742:	7bbb      	ldrb	r3, [r7, #14]
 800c744:	3b01      	subs	r3, #1
 800c746:	b2db      	uxtb	r3, r3
 800c748:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c74a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dce9      	bgt.n	800c726 <prvUnlockQueue+0x60>
 800c752:	e000      	b.n	800c756 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c754:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	22ff      	movs	r2, #255	; 0xff
 800c75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c75e:	f001 fdb1 	bl	800e2c4 <vPortExitCritical>
}
 800c762:	bf00      	nop
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c772:	f001 fd77 	bl	800e264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d102      	bne.n	800c784 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c77e:	2301      	movs	r3, #1
 800c780:	60fb      	str	r3, [r7, #12]
 800c782:	e001      	b.n	800c788 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c784:	2300      	movs	r3, #0
 800c786:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c788:	f001 fd9c 	bl	800e2c4 <vPortExitCritical>

	return xReturn;
 800c78c:	68fb      	ldr	r3, [r7, #12]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c79e:	f001 fd61 	bl	800e264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d102      	bne.n	800c7b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	60fb      	str	r3, [r7, #12]
 800c7b2:	e001      	b.n	800c7b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7b8:	f001 fd84 	bl	800e2c4 <vPortExitCritical>

	return xReturn;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
	...

0800c7c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	60fb      	str	r3, [r7, #12]
 800c7d6:	e014      	b.n	800c802 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c7d8:	4a0f      	ldr	r2, [pc, #60]	; (800c818 <vQueueAddToRegistry+0x50>)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7e4:	490c      	ldr	r1, [pc, #48]	; (800c818 <vQueueAddToRegistry+0x50>)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	683a      	ldr	r2, [r7, #0]
 800c7ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7ee:	4a0a      	ldr	r2, [pc, #40]	; (800c818 <vQueueAddToRegistry+0x50>)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	4413      	add	r3, r2
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7fa:	e006      	b.n	800c80a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3301      	adds	r3, #1
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b07      	cmp	r3, #7
 800c806:	d9e7      	bls.n	800c7d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c808:	bf00      	nop
 800c80a:	bf00      	nop
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	20005f90 	.word	0x20005f90

0800c81c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c824:	2300      	movs	r3, #0
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	e016      	b.n	800c858 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c82a:	4a10      	ldr	r2, [pc, #64]	; (800c86c <vQueueUnregisterQueue+0x50>)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	4413      	add	r3, r2
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	429a      	cmp	r2, r3
 800c838:	d10b      	bne.n	800c852 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c83a:	4a0c      	ldr	r2, [pc, #48]	; (800c86c <vQueueUnregisterQueue+0x50>)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2100      	movs	r1, #0
 800c840:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c844:	4a09      	ldr	r2, [pc, #36]	; (800c86c <vQueueUnregisterQueue+0x50>)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	4413      	add	r3, r2
 800c84c:	2200      	movs	r2, #0
 800c84e:	605a      	str	r2, [r3, #4]
				break;
 800c850:	e006      	b.n	800c860 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3301      	adds	r3, #1
 800c856:	60fb      	str	r3, [r7, #12]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b07      	cmp	r3, #7
 800c85c:	d9e5      	bls.n	800c82a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c85e:	bf00      	nop
 800c860:	bf00      	nop
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	20005f90 	.word	0x20005f90

0800c870 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c880:	f001 fcf0 	bl	800e264 <vPortEnterCritical>
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c88a:	b25b      	sxtb	r3, r3
 800c88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c890:	d103      	bne.n	800c89a <vQueueWaitForMessageRestricted+0x2a>
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a0:	b25b      	sxtb	r3, r3
 800c8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a6:	d103      	bne.n	800c8b0 <vQueueWaitForMessageRestricted+0x40>
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8b0:	f001 fd08 	bl	800e2c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	3324      	adds	r3, #36	; 0x24
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	68b9      	ldr	r1, [r7, #8]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 fc73 	bl	800d1b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c8ca:	6978      	ldr	r0, [r7, #20]
 800c8cc:	f7ff fefb 	bl	800c6c6 <prvUnlockQueue>
	}
 800c8d0:	bf00      	nop
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b08e      	sub	sp, #56	; 0x38
 800c8dc:	af04      	add	r7, sp, #16
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
 800c8e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10a      	bne.n	800c902 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	623b      	str	r3, [r7, #32]
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <xTaskCreateStatic+0x46>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	61fb      	str	r3, [r7, #28]
}
 800c91a:	bf00      	nop
 800c91c:	e7fe      	b.n	800c91c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c91e:	23bc      	movs	r3, #188	; 0xbc
 800c920:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2bbc      	cmp	r3, #188	; 0xbc
 800c926:	d00a      	beq.n	800c93e <xTaskCreateStatic+0x66>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	61bb      	str	r3, [r7, #24]
}
 800c93a:	bf00      	nop
 800c93c:	e7fe      	b.n	800c93c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c93e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c942:	2b00      	cmp	r3, #0
 800c944:	d01e      	beq.n	800c984 <xTaskCreateStatic+0xac>
 800c946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01b      	beq.n	800c984 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c954:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	2202      	movs	r2, #2
 800c95a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c95e:	2300      	movs	r3, #0
 800c960:	9303      	str	r3, [sp, #12]
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	9302      	str	r3, [sp, #8]
 800c966:	f107 0314 	add.w	r3, r7, #20
 800c96a:	9301      	str	r3, [sp, #4]
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	68b9      	ldr	r1, [r7, #8]
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f000 f850 	bl	800ca1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c97c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c97e:	f000 f8f3 	bl	800cb68 <prvAddNewTaskToReadyList>
 800c982:	e001      	b.n	800c988 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c988:	697b      	ldr	r3, [r7, #20]
	}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3728      	adds	r7, #40	; 0x28
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c992:	b580      	push	{r7, lr}
 800c994:	b08c      	sub	sp, #48	; 0x30
 800c996:	af04      	add	r7, sp, #16
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	603b      	str	r3, [r7, #0]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c9a2:	88fb      	ldrh	r3, [r7, #6]
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f001 fd7e 	bl	800e4a8 <pvPortMalloc>
 800c9ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00e      	beq.n	800c9d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c9b4:	20bc      	movs	r0, #188	; 0xbc
 800c9b6:	f001 fd77 	bl	800e4a8 <pvPortMalloc>
 800c9ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d003      	beq.n	800c9ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	631a      	str	r2, [r3, #48]	; 0x30
 800c9c8:	e005      	b.n	800c9d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c9ca:	6978      	ldr	r0, [r7, #20]
 800c9cc:	f001 fe38 	bl	800e640 <vPortFree>
 800c9d0:	e001      	b.n	800c9d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d017      	beq.n	800ca0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c9e4:	88fa      	ldrh	r2, [r7, #6]
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	9303      	str	r3, [sp, #12]
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	9302      	str	r3, [sp, #8]
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	68b9      	ldr	r1, [r7, #8]
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 f80e 	bl	800ca1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca00:	69f8      	ldr	r0, [r7, #28]
 800ca02:	f000 f8b1 	bl	800cb68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca06:	2301      	movs	r3, #1
 800ca08:	61bb      	str	r3, [r7, #24]
 800ca0a:	e002      	b.n	800ca12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca12:	69bb      	ldr	r3, [r7, #24]
	}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3720      	adds	r7, #32
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	461a      	mov	r2, r3
 800ca34:	21a5      	movs	r1, #165	; 0xa5
 800ca36:	f00c f8f0 	bl	8018c1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ca44:	3b01      	subs	r3, #1
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	f023 0307 	bic.w	r3, r3, #7
 800ca52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00a      	beq.n	800ca74 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	617b      	str	r3, [r7, #20]
}
 800ca70:	bf00      	nop
 800ca72:	e7fe      	b.n	800ca72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d01f      	beq.n	800caba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	61fb      	str	r3, [r7, #28]
 800ca7e:	e012      	b.n	800caa6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	4413      	add	r3, r2
 800ca86:	7819      	ldrb	r1, [r3, #0]
 800ca88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	3334      	adds	r3, #52	; 0x34
 800ca90:	460a      	mov	r2, r1
 800ca92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	4413      	add	r3, r2
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d006      	beq.n	800caae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	3301      	adds	r3, #1
 800caa4:	61fb      	str	r3, [r7, #28]
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2b0f      	cmp	r3, #15
 800caaa:	d9e9      	bls.n	800ca80 <prvInitialiseNewTask+0x64>
 800caac:	e000      	b.n	800cab0 <prvInitialiseNewTask+0x94>
			{
				break;
 800caae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cab8:	e003      	b.n	800cac2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	2200      	movs	r2, #0
 800cabe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	2b37      	cmp	r3, #55	; 0x37
 800cac6:	d901      	bls.n	800cacc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cac8:	2337      	movs	r3, #55	; 0x37
 800caca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cad0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cad6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cada:	2200      	movs	r2, #0
 800cadc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	3304      	adds	r3, #4
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fda0 	bl	800b628 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caea:	3318      	adds	r3, #24
 800caec:	4618      	mov	r0, r3
 800caee:	f7fe fd9b 	bl	800b628 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	3354      	adds	r3, #84	; 0x54
 800cb1c:	2260      	movs	r2, #96	; 0x60
 800cb1e:	2100      	movs	r1, #0
 800cb20:	4618      	mov	r0, r3
 800cb22:	f00c f87a 	bl	8018c1a <memset>
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	4a0c      	ldr	r2, [pc, #48]	; (800cb5c <prvInitialiseNewTask+0x140>)
 800cb2a:	659a      	str	r2, [r3, #88]	; 0x58
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2e:	4a0c      	ldr	r2, [pc, #48]	; (800cb60 <prvInitialiseNewTask+0x144>)
 800cb30:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	4a0b      	ldr	r2, [pc, #44]	; (800cb64 <prvInitialiseNewTask+0x148>)
 800cb36:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	68f9      	ldr	r1, [r7, #12]
 800cb3c:	69b8      	ldr	r0, [r7, #24]
 800cb3e:	f001 fa61 	bl	800e004 <pxPortInitialiseStack>
 800cb42:	4602      	mov	r2, r0
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d002      	beq.n	800cb54 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb54:	bf00      	nop
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	0801d098 	.word	0x0801d098
 800cb60:	0801d0b8 	.word	0x0801d0b8
 800cb64:	0801d078 	.word	0x0801d078

0800cb68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb70:	f001 fb78 	bl	800e264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb74:	4b2d      	ldr	r3, [pc, #180]	; (800cc2c <prvAddNewTaskToReadyList+0xc4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	4a2c      	ldr	r2, [pc, #176]	; (800cc2c <prvAddNewTaskToReadyList+0xc4>)
 800cb7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb7e:	4b2c      	ldr	r3, [pc, #176]	; (800cc30 <prvAddNewTaskToReadyList+0xc8>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb86:	4a2a      	ldr	r2, [pc, #168]	; (800cc30 <prvAddNewTaskToReadyList+0xc8>)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb8c:	4b27      	ldr	r3, [pc, #156]	; (800cc2c <prvAddNewTaskToReadyList+0xc4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d110      	bne.n	800cbb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb94:	f000 fc38 	bl	800d408 <prvInitialiseTaskLists>
 800cb98:	e00d      	b.n	800cbb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb9a:	4b26      	ldr	r3, [pc, #152]	; (800cc34 <prvAddNewTaskToReadyList+0xcc>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d109      	bne.n	800cbb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cba2:	4b23      	ldr	r3, [pc, #140]	; (800cc30 <prvAddNewTaskToReadyList+0xc8>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d802      	bhi.n	800cbb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbb0:	4a1f      	ldr	r2, [pc, #124]	; (800cc30 <prvAddNewTaskToReadyList+0xc8>)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbb6:	4b20      	ldr	r3, [pc, #128]	; (800cc38 <prvAddNewTaskToReadyList+0xd0>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	4a1e      	ldr	r2, [pc, #120]	; (800cc38 <prvAddNewTaskToReadyList+0xd0>)
 800cbbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cbc0:	4b1d      	ldr	r3, [pc, #116]	; (800cc38 <prvAddNewTaskToReadyList+0xd0>)
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbcc:	4b1b      	ldr	r3, [pc, #108]	; (800cc3c <prvAddNewTaskToReadyList+0xd4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d903      	bls.n	800cbdc <prvAddNewTaskToReadyList+0x74>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd8:	4a18      	ldr	r2, [pc, #96]	; (800cc3c <prvAddNewTaskToReadyList+0xd4>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4a15      	ldr	r2, [pc, #84]	; (800cc40 <prvAddNewTaskToReadyList+0xd8>)
 800cbea:	441a      	add	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7fe fd25 	bl	800b642 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cbf8:	f001 fb64 	bl	800e2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cbfc:	4b0d      	ldr	r3, [pc, #52]	; (800cc34 <prvAddNewTaskToReadyList+0xcc>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00e      	beq.n	800cc22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc04:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <prvAddNewTaskToReadyList+0xc8>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d207      	bcs.n	800cc22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc12:	4b0c      	ldr	r3, [pc, #48]	; (800cc44 <prvAddNewTaskToReadyList+0xdc>)
 800cc14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc22:	bf00      	nop
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	200064a4 	.word	0x200064a4
 800cc30:	20005fd0 	.word	0x20005fd0
 800cc34:	200064b0 	.word	0x200064b0
 800cc38:	200064c0 	.word	0x200064c0
 800cc3c:	200064ac 	.word	0x200064ac
 800cc40:	20005fd4 	.word	0x20005fd4
 800cc44:	e000ed04 	.word	0xe000ed04

0800cc48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d017      	beq.n	800cc8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc5a:	4b13      	ldr	r3, [pc, #76]	; (800cca8 <vTaskDelay+0x60>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <vTaskDelay+0x30>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	60bb      	str	r3, [r7, #8]
}
 800cc74:	bf00      	nop
 800cc76:	e7fe      	b.n	800cc76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc78:	f000 f88a 	bl	800cd90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fe1e 	bl	800d8c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc84:	f000 f892 	bl	800cdac <xTaskResumeAll>
 800cc88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d107      	bne.n	800cca0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc90:	4b06      	ldr	r3, [pc, #24]	; (800ccac <vTaskDelay+0x64>)
 800cc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cca0:	bf00      	nop
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	200064cc 	.word	0x200064cc
 800ccac:	e000ed04 	.word	0xe000ed04

0800ccb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08a      	sub	sp, #40	; 0x28
 800ccb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ccbe:	463a      	mov	r2, r7
 800ccc0:	1d39      	adds	r1, r7, #4
 800ccc2:	f107 0308 	add.w	r3, r7, #8
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fe fc5a 	bl	800b580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	9202      	str	r2, [sp, #8]
 800ccd4:	9301      	str	r3, [sp, #4]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	2300      	movs	r3, #0
 800ccdc:	460a      	mov	r2, r1
 800ccde:	4924      	ldr	r1, [pc, #144]	; (800cd70 <vTaskStartScheduler+0xc0>)
 800cce0:	4824      	ldr	r0, [pc, #144]	; (800cd74 <vTaskStartScheduler+0xc4>)
 800cce2:	f7ff fdf9 	bl	800c8d8 <xTaskCreateStatic>
 800cce6:	4603      	mov	r3, r0
 800cce8:	4a23      	ldr	r2, [pc, #140]	; (800cd78 <vTaskStartScheduler+0xc8>)
 800ccea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccec:	4b22      	ldr	r3, [pc, #136]	; (800cd78 <vTaskStartScheduler+0xc8>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d002      	beq.n	800ccfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	617b      	str	r3, [r7, #20]
 800ccf8:	e001      	b.n	800ccfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d102      	bne.n	800cd0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd04:	f000 fe30 	bl	800d968 <xTimerCreateTimerTask>
 800cd08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d11b      	bne.n	800cd48 <vTaskStartScheduler+0x98>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	613b      	str	r3, [r7, #16]
}
 800cd22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd24:	4b15      	ldr	r3, [pc, #84]	; (800cd7c <vTaskStartScheduler+0xcc>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3354      	adds	r3, #84	; 0x54
 800cd2a:	4a15      	ldr	r2, [pc, #84]	; (800cd80 <vTaskStartScheduler+0xd0>)
 800cd2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd2e:	4b15      	ldr	r3, [pc, #84]	; (800cd84 <vTaskStartScheduler+0xd4>)
 800cd30:	f04f 32ff 	mov.w	r2, #4294967295
 800cd34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd36:	4b14      	ldr	r3, [pc, #80]	; (800cd88 <vTaskStartScheduler+0xd8>)
 800cd38:	2201      	movs	r2, #1
 800cd3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd3c:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <vTaskStartScheduler+0xdc>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd42:	f001 f9ed 	bl	800e120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd46:	e00e      	b.n	800cd66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4e:	d10a      	bne.n	800cd66 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	60fb      	str	r3, [r7, #12]
}
 800cd62:	bf00      	nop
 800cd64:	e7fe      	b.n	800cd64 <vTaskStartScheduler+0xb4>
}
 800cd66:	bf00      	nop
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	0801a2f0 	.word	0x0801a2f0
 800cd74:	0800d3d9 	.word	0x0800d3d9
 800cd78:	200064c8 	.word	0x200064c8
 800cd7c:	20005fd0 	.word	0x20005fd0
 800cd80:	2000009c 	.word	0x2000009c
 800cd84:	200064c4 	.word	0x200064c4
 800cd88:	200064b0 	.word	0x200064b0
 800cd8c:	200064a8 	.word	0x200064a8

0800cd90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd94:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <vTaskSuspendAll+0x18>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	4a03      	ldr	r2, [pc, #12]	; (800cda8 <vTaskSuspendAll+0x18>)
 800cd9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd9e:	bf00      	nop
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	200064cc 	.word	0x200064cc

0800cdac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cdba:	4b42      	ldr	r3, [pc, #264]	; (800cec4 <xTaskResumeAll+0x118>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <xTaskResumeAll+0x2c>
	__asm volatile
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	603b      	str	r3, [r7, #0]
}
 800cdd4:	bf00      	nop
 800cdd6:	e7fe      	b.n	800cdd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cdd8:	f001 fa44 	bl	800e264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cddc:	4b39      	ldr	r3, [pc, #228]	; (800cec4 <xTaskResumeAll+0x118>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	4a38      	ldr	r2, [pc, #224]	; (800cec4 <xTaskResumeAll+0x118>)
 800cde4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cde6:	4b37      	ldr	r3, [pc, #220]	; (800cec4 <xTaskResumeAll+0x118>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d162      	bne.n	800ceb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdee:	4b36      	ldr	r3, [pc, #216]	; (800cec8 <xTaskResumeAll+0x11c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d05e      	beq.n	800ceb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdf6:	e02f      	b.n	800ce58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdf8:	4b34      	ldr	r3, [pc, #208]	; (800cecc <xTaskResumeAll+0x120>)
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3318      	adds	r3, #24
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fc79 	bl	800b6fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fe fc74 	bl	800b6fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce18:	4b2d      	ldr	r3, [pc, #180]	; (800ced0 <xTaskResumeAll+0x124>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d903      	bls.n	800ce28 <xTaskResumeAll+0x7c>
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce24:	4a2a      	ldr	r2, [pc, #168]	; (800ced0 <xTaskResumeAll+0x124>)
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4413      	add	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	4a27      	ldr	r2, [pc, #156]	; (800ced4 <xTaskResumeAll+0x128>)
 800ce36:	441a      	add	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	f7fe fbff 	bl	800b642 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce48:	4b23      	ldr	r3, [pc, #140]	; (800ced8 <xTaskResumeAll+0x12c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d302      	bcc.n	800ce58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce52:	4b22      	ldr	r3, [pc, #136]	; (800cedc <xTaskResumeAll+0x130>)
 800ce54:	2201      	movs	r2, #1
 800ce56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce58:	4b1c      	ldr	r3, [pc, #112]	; (800cecc <xTaskResumeAll+0x120>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1cb      	bne.n	800cdf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce66:	f000 fb71 	bl	800d54c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce6a:	4b1d      	ldr	r3, [pc, #116]	; (800cee0 <xTaskResumeAll+0x134>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d010      	beq.n	800ce98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce76:	f000 f859 	bl	800cf2c <xTaskIncrementTick>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce80:	4b16      	ldr	r3, [pc, #88]	; (800cedc <xTaskResumeAll+0x130>)
 800ce82:	2201      	movs	r2, #1
 800ce84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1f1      	bne.n	800ce76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce92:	4b13      	ldr	r3, [pc, #76]	; (800cee0 <xTaskResumeAll+0x134>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce98:	4b10      	ldr	r3, [pc, #64]	; (800cedc <xTaskResumeAll+0x130>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d009      	beq.n	800ceb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cea0:	2301      	movs	r3, #1
 800cea2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cea4:	4b0f      	ldr	r3, [pc, #60]	; (800cee4 <xTaskResumeAll+0x138>)
 800cea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceaa:	601a      	str	r2, [r3, #0]
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ceb4:	f001 fa06 	bl	800e2c4 <vPortExitCritical>

	return xAlreadyYielded;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	200064cc 	.word	0x200064cc
 800cec8:	200064a4 	.word	0x200064a4
 800cecc:	20006464 	.word	0x20006464
 800ced0:	200064ac 	.word	0x200064ac
 800ced4:	20005fd4 	.word	0x20005fd4
 800ced8:	20005fd0 	.word	0x20005fd0
 800cedc:	200064b8 	.word	0x200064b8
 800cee0:	200064b4 	.word	0x200064b4
 800cee4:	e000ed04 	.word	0xe000ed04

0800cee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ceee:	4b05      	ldr	r3, [pc, #20]	; (800cf04 <xTaskGetTickCount+0x1c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cef4:	687b      	ldr	r3, [r7, #4]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	200064a8 	.word	0x200064a8

0800cf08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf0e:	f001 fa8b 	bl	800e428 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cf12:	2300      	movs	r3, #0
 800cf14:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cf16:	4b04      	ldr	r3, [pc, #16]	; (800cf28 <xTaskGetTickCountFromISR+0x20>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf1c:	683b      	ldr	r3, [r7, #0]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	200064a8 	.word	0x200064a8

0800cf2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf32:	2300      	movs	r3, #0
 800cf34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf36:	4b4f      	ldr	r3, [pc, #316]	; (800d074 <xTaskIncrementTick+0x148>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f040 808f 	bne.w	800d05e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf40:	4b4d      	ldr	r3, [pc, #308]	; (800d078 <xTaskIncrementTick+0x14c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3301      	adds	r3, #1
 800cf46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf48:	4a4b      	ldr	r2, [pc, #300]	; (800d078 <xTaskIncrementTick+0x14c>)
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d120      	bne.n	800cf96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf54:	4b49      	ldr	r3, [pc, #292]	; (800d07c <xTaskIncrementTick+0x150>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00a      	beq.n	800cf74 <xTaskIncrementTick+0x48>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	603b      	str	r3, [r7, #0]
}
 800cf70:	bf00      	nop
 800cf72:	e7fe      	b.n	800cf72 <xTaskIncrementTick+0x46>
 800cf74:	4b41      	ldr	r3, [pc, #260]	; (800d07c <xTaskIncrementTick+0x150>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	4b41      	ldr	r3, [pc, #260]	; (800d080 <xTaskIncrementTick+0x154>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a3f      	ldr	r2, [pc, #252]	; (800d07c <xTaskIncrementTick+0x150>)
 800cf80:	6013      	str	r3, [r2, #0]
 800cf82:	4a3f      	ldr	r2, [pc, #252]	; (800d080 <xTaskIncrementTick+0x154>)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	4b3e      	ldr	r3, [pc, #248]	; (800d084 <xTaskIncrementTick+0x158>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	4a3d      	ldr	r2, [pc, #244]	; (800d084 <xTaskIncrementTick+0x158>)
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	f000 fadb 	bl	800d54c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf96:	4b3c      	ldr	r3, [pc, #240]	; (800d088 <xTaskIncrementTick+0x15c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d349      	bcc.n	800d034 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfa0:	4b36      	ldr	r3, [pc, #216]	; (800d07c <xTaskIncrementTick+0x150>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d104      	bne.n	800cfb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfaa:	4b37      	ldr	r3, [pc, #220]	; (800d088 <xTaskIncrementTick+0x15c>)
 800cfac:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb0:	601a      	str	r2, [r3, #0]
					break;
 800cfb2:	e03f      	b.n	800d034 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb4:	4b31      	ldr	r3, [pc, #196]	; (800d07c <xTaskIncrementTick+0x150>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d203      	bcs.n	800cfd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cfcc:	4a2e      	ldr	r2, [pc, #184]	; (800d088 <xTaskIncrementTick+0x15c>)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cfd2:	e02f      	b.n	800d034 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fe fb8f 	bl	800b6fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d004      	beq.n	800cff0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	3318      	adds	r3, #24
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe fb86 	bl	800b6fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff4:	4b25      	ldr	r3, [pc, #148]	; (800d08c <xTaskIncrementTick+0x160>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d903      	bls.n	800d004 <xTaskIncrementTick+0xd8>
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d000:	4a22      	ldr	r2, [pc, #136]	; (800d08c <xTaskIncrementTick+0x160>)
 800d002:	6013      	str	r3, [r2, #0]
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d008:	4613      	mov	r3, r2
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	4a1f      	ldr	r2, [pc, #124]	; (800d090 <xTaskIncrementTick+0x164>)
 800d012:	441a      	add	r2, r3
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	3304      	adds	r3, #4
 800d018:	4619      	mov	r1, r3
 800d01a:	4610      	mov	r0, r2
 800d01c:	f7fe fb11 	bl	800b642 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d024:	4b1b      	ldr	r3, [pc, #108]	; (800d094 <xTaskIncrementTick+0x168>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d3b8      	bcc.n	800cfa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d02e:	2301      	movs	r3, #1
 800d030:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d032:	e7b5      	b.n	800cfa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d034:	4b17      	ldr	r3, [pc, #92]	; (800d094 <xTaskIncrementTick+0x168>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03a:	4915      	ldr	r1, [pc, #84]	; (800d090 <xTaskIncrementTick+0x164>)
 800d03c:	4613      	mov	r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4413      	add	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	440b      	add	r3, r1
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d901      	bls.n	800d050 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d050:	4b11      	ldr	r3, [pc, #68]	; (800d098 <xTaskIncrementTick+0x16c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d007      	beq.n	800d068 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d058:	2301      	movs	r3, #1
 800d05a:	617b      	str	r3, [r7, #20]
 800d05c:	e004      	b.n	800d068 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <xTaskIncrementTick+0x170>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	3301      	adds	r3, #1
 800d064:	4a0d      	ldr	r2, [pc, #52]	; (800d09c <xTaskIncrementTick+0x170>)
 800d066:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d068:	697b      	ldr	r3, [r7, #20]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3718      	adds	r7, #24
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	200064cc 	.word	0x200064cc
 800d078:	200064a8 	.word	0x200064a8
 800d07c:	2000645c 	.word	0x2000645c
 800d080:	20006460 	.word	0x20006460
 800d084:	200064bc 	.word	0x200064bc
 800d088:	200064c4 	.word	0x200064c4
 800d08c:	200064ac 	.word	0x200064ac
 800d090:	20005fd4 	.word	0x20005fd4
 800d094:	20005fd0 	.word	0x20005fd0
 800d098:	200064b8 	.word	0x200064b8
 800d09c:	200064b4 	.word	0x200064b4

0800d0a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0a6:	4b2a      	ldr	r3, [pc, #168]	; (800d150 <vTaskSwitchContext+0xb0>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d0ae:	4b29      	ldr	r3, [pc, #164]	; (800d154 <vTaskSwitchContext+0xb4>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d0b4:	e046      	b.n	800d144 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d0b6:	4b27      	ldr	r3, [pc, #156]	; (800d154 <vTaskSwitchContext+0xb4>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0bc:	4b26      	ldr	r3, [pc, #152]	; (800d158 <vTaskSwitchContext+0xb8>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	e010      	b.n	800d0e6 <vTaskSwitchContext+0x46>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10a      	bne.n	800d0e0 <vTaskSwitchContext+0x40>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	607b      	str	r3, [r7, #4]
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <vTaskSwitchContext+0x3e>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	60fb      	str	r3, [r7, #12]
 800d0e6:	491d      	ldr	r1, [pc, #116]	; (800d15c <vTaskSwitchContext+0xbc>)
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	440b      	add	r3, r1
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0e4      	beq.n	800d0c4 <vTaskSwitchContext+0x24>
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4a15      	ldr	r2, [pc, #84]	; (800d15c <vTaskSwitchContext+0xbc>)
 800d106:	4413      	add	r3, r2
 800d108:	60bb      	str	r3, [r7, #8]
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	605a      	str	r2, [r3, #4]
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	3308      	adds	r3, #8
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d104      	bne.n	800d12a <vTaskSwitchContext+0x8a>
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	605a      	str	r2, [r3, #4]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	4a0b      	ldr	r2, [pc, #44]	; (800d160 <vTaskSwitchContext+0xc0>)
 800d132:	6013      	str	r3, [r2, #0]
 800d134:	4a08      	ldr	r2, [pc, #32]	; (800d158 <vTaskSwitchContext+0xb8>)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d13a:	4b09      	ldr	r3, [pc, #36]	; (800d160 <vTaskSwitchContext+0xc0>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3354      	adds	r3, #84	; 0x54
 800d140:	4a08      	ldr	r2, [pc, #32]	; (800d164 <vTaskSwitchContext+0xc4>)
 800d142:	6013      	str	r3, [r2, #0]
}
 800d144:	bf00      	nop
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	200064cc 	.word	0x200064cc
 800d154:	200064b8 	.word	0x200064b8
 800d158:	200064ac 	.word	0x200064ac
 800d15c:	20005fd4 	.word	0x20005fd4
 800d160:	20005fd0 	.word	0x20005fd0
 800d164:	2000009c 	.word	0x2000009c

0800d168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10a      	bne.n	800d18e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	60fb      	str	r3, [r7, #12]
}
 800d18a:	bf00      	nop
 800d18c:	e7fe      	b.n	800d18c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d18e:	4b07      	ldr	r3, [pc, #28]	; (800d1ac <vTaskPlaceOnEventList+0x44>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3318      	adds	r3, #24
 800d194:	4619      	mov	r1, r3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7fe fa77 	bl	800b68a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d19c:	2101      	movs	r1, #1
 800d19e:	6838      	ldr	r0, [r7, #0]
 800d1a0:	f000 fb8e 	bl	800d8c0 <prvAddCurrentTaskToDelayedList>
}
 800d1a4:	bf00      	nop
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	20005fd0 	.word	0x20005fd0

0800d1b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10a      	bne.n	800d1d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	617b      	str	r3, [r7, #20]
}
 800d1d4:	bf00      	nop
 800d1d6:	e7fe      	b.n	800d1d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <vTaskPlaceOnEventListRestricted+0x54>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3318      	adds	r3, #24
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7fe fa2e 	bl	800b642 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1f2:	6879      	ldr	r1, [r7, #4]
 800d1f4:	68b8      	ldr	r0, [r7, #8]
 800d1f6:	f000 fb63 	bl	800d8c0 <prvAddCurrentTaskToDelayedList>
	}
 800d1fa:	bf00      	nop
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20005fd0 	.word	0x20005fd0

0800d208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10a      	bne.n	800d234 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	60fb      	str	r3, [r7, #12]
}
 800d230:	bf00      	nop
 800d232:	e7fe      	b.n	800d232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	3318      	adds	r3, #24
 800d238:	4618      	mov	r0, r3
 800d23a:	f7fe fa5f 	bl	800b6fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d23e:	4b1e      	ldr	r3, [pc, #120]	; (800d2b8 <xTaskRemoveFromEventList+0xb0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d11d      	bne.n	800d282 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	3304      	adds	r3, #4
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fa56 	bl	800b6fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d254:	4b19      	ldr	r3, [pc, #100]	; (800d2bc <xTaskRemoveFromEventList+0xb4>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d903      	bls.n	800d264 <xTaskRemoveFromEventList+0x5c>
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d260:	4a16      	ldr	r2, [pc, #88]	; (800d2bc <xTaskRemoveFromEventList+0xb4>)
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d268:	4613      	mov	r3, r2
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	4413      	add	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4a13      	ldr	r2, [pc, #76]	; (800d2c0 <xTaskRemoveFromEventList+0xb8>)
 800d272:	441a      	add	r2, r3
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	3304      	adds	r3, #4
 800d278:	4619      	mov	r1, r3
 800d27a:	4610      	mov	r0, r2
 800d27c:	f7fe f9e1 	bl	800b642 <vListInsertEnd>
 800d280:	e005      	b.n	800d28e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	3318      	adds	r3, #24
 800d286:	4619      	mov	r1, r3
 800d288:	480e      	ldr	r0, [pc, #56]	; (800d2c4 <xTaskRemoveFromEventList+0xbc>)
 800d28a:	f7fe f9da 	bl	800b642 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d292:	4b0d      	ldr	r3, [pc, #52]	; (800d2c8 <xTaskRemoveFromEventList+0xc0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d298:	429a      	cmp	r2, r3
 800d29a:	d905      	bls.n	800d2a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d29c:	2301      	movs	r3, #1
 800d29e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <xTaskRemoveFromEventList+0xc4>)
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	e001      	b.n	800d2ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2ac:	697b      	ldr	r3, [r7, #20]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3718      	adds	r7, #24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	200064cc 	.word	0x200064cc
 800d2bc:	200064ac 	.word	0x200064ac
 800d2c0:	20005fd4 	.word	0x20005fd4
 800d2c4:	20006464 	.word	0x20006464
 800d2c8:	20005fd0 	.word	0x20005fd0
 800d2cc:	200064b8 	.word	0x200064b8

0800d2d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2d8:	4b06      	ldr	r3, [pc, #24]	; (800d2f4 <vTaskInternalSetTimeOutState+0x24>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2e0:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <vTaskInternalSetTimeOutState+0x28>)
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	605a      	str	r2, [r3, #4]
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	200064bc 	.word	0x200064bc
 800d2f8:	200064a8 	.word	0x200064a8

0800d2fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10a      	bne.n	800d322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	613b      	str	r3, [r7, #16]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10a      	bne.n	800d33e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	60fb      	str	r3, [r7, #12]
}
 800d33a:	bf00      	nop
 800d33c:	e7fe      	b.n	800d33c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d33e:	f000 ff91 	bl	800e264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d342:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <xTaskCheckForTimeOut+0xbc>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	69ba      	ldr	r2, [r7, #24]
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35a:	d102      	bne.n	800d362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d35c:	2300      	movs	r3, #0
 800d35e:	61fb      	str	r3, [r7, #28]
 800d360:	e023      	b.n	800d3aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	4b15      	ldr	r3, [pc, #84]	; (800d3bc <xTaskCheckForTimeOut+0xc0>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d007      	beq.n	800d37e <xTaskCheckForTimeOut+0x82>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	69ba      	ldr	r2, [r7, #24]
 800d374:	429a      	cmp	r2, r3
 800d376:	d302      	bcc.n	800d37e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d378:	2301      	movs	r3, #1
 800d37a:	61fb      	str	r3, [r7, #28]
 800d37c:	e015      	b.n	800d3aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	429a      	cmp	r2, r3
 800d386:	d20b      	bcs.n	800d3a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	1ad2      	subs	r2, r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff ff9b 	bl	800d2d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d39a:	2300      	movs	r3, #0
 800d39c:	61fb      	str	r3, [r7, #28]
 800d39e:	e004      	b.n	800d3aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3aa:	f000 ff8b 	bl	800e2c4 <vPortExitCritical>

	return xReturn;
 800d3ae:	69fb      	ldr	r3, [r7, #28]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	200064a8 	.word	0x200064a8
 800d3bc:	200064bc 	.word	0x200064bc

0800d3c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3c4:	4b03      	ldr	r3, [pc, #12]	; (800d3d4 <vTaskMissedYield+0x14>)
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	601a      	str	r2, [r3, #0]
}
 800d3ca:	bf00      	nop
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	200064b8 	.word	0x200064b8

0800d3d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3e0:	f000 f852 	bl	800d488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3e4:	4b06      	ldr	r3, [pc, #24]	; (800d400 <prvIdleTask+0x28>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d9f9      	bls.n	800d3e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3ec:	4b05      	ldr	r3, [pc, #20]	; (800d404 <prvIdleTask+0x2c>)
 800d3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3fc:	e7f0      	b.n	800d3e0 <prvIdleTask+0x8>
 800d3fe:	bf00      	nop
 800d400:	20005fd4 	.word	0x20005fd4
 800d404:	e000ed04 	.word	0xe000ed04

0800d408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d40e:	2300      	movs	r3, #0
 800d410:	607b      	str	r3, [r7, #4]
 800d412:	e00c      	b.n	800d42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4a12      	ldr	r2, [pc, #72]	; (800d468 <prvInitialiseTaskLists+0x60>)
 800d420:	4413      	add	r3, r2
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe f8e0 	bl	800b5e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3301      	adds	r3, #1
 800d42c:	607b      	str	r3, [r7, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b37      	cmp	r3, #55	; 0x37
 800d432:	d9ef      	bls.n	800d414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d434:	480d      	ldr	r0, [pc, #52]	; (800d46c <prvInitialiseTaskLists+0x64>)
 800d436:	f7fe f8d7 	bl	800b5e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d43a:	480d      	ldr	r0, [pc, #52]	; (800d470 <prvInitialiseTaskLists+0x68>)
 800d43c:	f7fe f8d4 	bl	800b5e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d440:	480c      	ldr	r0, [pc, #48]	; (800d474 <prvInitialiseTaskLists+0x6c>)
 800d442:	f7fe f8d1 	bl	800b5e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d446:	480c      	ldr	r0, [pc, #48]	; (800d478 <prvInitialiseTaskLists+0x70>)
 800d448:	f7fe f8ce 	bl	800b5e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d44c:	480b      	ldr	r0, [pc, #44]	; (800d47c <prvInitialiseTaskLists+0x74>)
 800d44e:	f7fe f8cb 	bl	800b5e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d452:	4b0b      	ldr	r3, [pc, #44]	; (800d480 <prvInitialiseTaskLists+0x78>)
 800d454:	4a05      	ldr	r2, [pc, #20]	; (800d46c <prvInitialiseTaskLists+0x64>)
 800d456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d458:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <prvInitialiseTaskLists+0x7c>)
 800d45a:	4a05      	ldr	r2, [pc, #20]	; (800d470 <prvInitialiseTaskLists+0x68>)
 800d45c:	601a      	str	r2, [r3, #0]
}
 800d45e:	bf00      	nop
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20005fd4 	.word	0x20005fd4
 800d46c:	20006434 	.word	0x20006434
 800d470:	20006448 	.word	0x20006448
 800d474:	20006464 	.word	0x20006464
 800d478:	20006478 	.word	0x20006478
 800d47c:	20006490 	.word	0x20006490
 800d480:	2000645c 	.word	0x2000645c
 800d484:	20006460 	.word	0x20006460

0800d488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d48e:	e019      	b.n	800d4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d490:	f000 fee8 	bl	800e264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d494:	4b10      	ldr	r3, [pc, #64]	; (800d4d8 <prvCheckTasksWaitingTermination+0x50>)
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe f92b 	bl	800b6fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4a6:	4b0d      	ldr	r3, [pc, #52]	; (800d4dc <prvCheckTasksWaitingTermination+0x54>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	4a0b      	ldr	r2, [pc, #44]	; (800d4dc <prvCheckTasksWaitingTermination+0x54>)
 800d4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <prvCheckTasksWaitingTermination+0x58>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	4a0a      	ldr	r2, [pc, #40]	; (800d4e0 <prvCheckTasksWaitingTermination+0x58>)
 800d4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4ba:	f000 ff03 	bl	800e2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f810 	bl	800d4e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4c4:	4b06      	ldr	r3, [pc, #24]	; (800d4e0 <prvCheckTasksWaitingTermination+0x58>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e1      	bne.n	800d490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4cc:	bf00      	nop
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20006478 	.word	0x20006478
 800d4dc:	200064a4 	.word	0x200064a4
 800d4e0:	2000648c 	.word	0x2000648c

0800d4e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3354      	adds	r3, #84	; 0x54
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f00b fd09 	bl	8018f08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d108      	bne.n	800d512 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d504:	4618      	mov	r0, r3
 800d506:	f001 f89b 	bl	800e640 <vPortFree>
				vPortFree( pxTCB );
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f001 f898 	bl	800e640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d510:	e018      	b.n	800d544 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d103      	bne.n	800d524 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f001 f88f 	bl	800e640 <vPortFree>
	}
 800d522:	e00f      	b.n	800d544 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d00a      	beq.n	800d544 <prvDeleteTCB+0x60>
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	60fb      	str	r3, [r7, #12]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <prvDeleteTCB+0x5e>
	}
 800d544:	bf00      	nop
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d552:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <prvResetNextTaskUnblockTime+0x38>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d104      	bne.n	800d566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <prvResetNextTaskUnblockTime+0x3c>)
 800d55e:	f04f 32ff 	mov.w	r2, #4294967295
 800d562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d564:	e008      	b.n	800d578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d566:	4b07      	ldr	r3, [pc, #28]	; (800d584 <prvResetNextTaskUnblockTime+0x38>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	4a04      	ldr	r2, [pc, #16]	; (800d588 <prvResetNextTaskUnblockTime+0x3c>)
 800d576:	6013      	str	r3, [r2, #0]
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	2000645c 	.word	0x2000645c
 800d588:	200064c4 	.word	0x200064c4

0800d58c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d592:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <xTaskGetCurrentTaskHandle+0x1c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d598:	687b      	ldr	r3, [r7, #4]
	}
 800d59a:	4618      	mov	r0, r3
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20005fd0 	.word	0x20005fd0

0800d5ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5b2:	4b0b      	ldr	r3, [pc, #44]	; (800d5e0 <xTaskGetSchedulerState+0x34>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d102      	bne.n	800d5c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	607b      	str	r3, [r7, #4]
 800d5be:	e008      	b.n	800d5d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5c0:	4b08      	ldr	r3, [pc, #32]	; (800d5e4 <xTaskGetSchedulerState+0x38>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d102      	bne.n	800d5ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	607b      	str	r3, [r7, #4]
 800d5cc:	e001      	b.n	800d5d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5d2:	687b      	ldr	r3, [r7, #4]
	}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	200064b0 	.word	0x200064b0
 800d5e4:	200064cc 	.word	0x200064cc

0800d5e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d051      	beq.n	800d6a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d602:	4b2a      	ldr	r3, [pc, #168]	; (800d6ac <xTaskPriorityInherit+0xc4>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d608:	429a      	cmp	r2, r3
 800d60a:	d241      	bcs.n	800d690 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	2b00      	cmp	r3, #0
 800d612:	db06      	blt.n	800d622 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d614:	4b25      	ldr	r3, [pc, #148]	; (800d6ac <xTaskPriorityInherit+0xc4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	6959      	ldr	r1, [r3, #20]
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d62a:	4613      	mov	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4a1f      	ldr	r2, [pc, #124]	; (800d6b0 <xTaskPriorityInherit+0xc8>)
 800d634:	4413      	add	r3, r2
 800d636:	4299      	cmp	r1, r3
 800d638:	d122      	bne.n	800d680 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	3304      	adds	r3, #4
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fe f85c 	bl	800b6fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d644:	4b19      	ldr	r3, [pc, #100]	; (800d6ac <xTaskPriorityInherit+0xc4>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d652:	4b18      	ldr	r3, [pc, #96]	; (800d6b4 <xTaskPriorityInherit+0xcc>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d903      	bls.n	800d662 <xTaskPriorityInherit+0x7a>
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65e:	4a15      	ldr	r2, [pc, #84]	; (800d6b4 <xTaskPriorityInherit+0xcc>)
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	4613      	mov	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4a10      	ldr	r2, [pc, #64]	; (800d6b0 <xTaskPriorityInherit+0xc8>)
 800d670:	441a      	add	r2, r3
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	3304      	adds	r3, #4
 800d676:	4619      	mov	r1, r3
 800d678:	4610      	mov	r0, r2
 800d67a:	f7fd ffe2 	bl	800b642 <vListInsertEnd>
 800d67e:	e004      	b.n	800d68a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <xTaskPriorityInherit+0xc4>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d68a:	2301      	movs	r3, #1
 800d68c:	60fb      	str	r3, [r7, #12]
 800d68e:	e008      	b.n	800d6a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d694:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <xTaskPriorityInherit+0xc4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d201      	bcs.n	800d6a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
	}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	20005fd0 	.word	0x20005fd0
 800d6b0:	20005fd4 	.word	0x20005fd4
 800d6b4:	200064ac 	.word	0x200064ac

0800d6b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d056      	beq.n	800d77c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6ce:	4b2e      	ldr	r3, [pc, #184]	; (800d788 <xTaskPriorityDisinherit+0xd0>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d00a      	beq.n	800d6ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6dc:	f383 8811 	msr	BASEPRI, r3
 800d6e0:	f3bf 8f6f 	isb	sy
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	60fb      	str	r3, [r7, #12]
}
 800d6ea:	bf00      	nop
 800d6ec:	e7fe      	b.n	800d6ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10a      	bne.n	800d70c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	60bb      	str	r3, [r7, #8]
}
 800d708:	bf00      	nop
 800d70a:	e7fe      	b.n	800d70a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d710:	1e5a      	subs	r2, r3, #1
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d71e:	429a      	cmp	r2, r3
 800d720:	d02c      	beq.n	800d77c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d726:	2b00      	cmp	r3, #0
 800d728:	d128      	bne.n	800d77c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	3304      	adds	r3, #4
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fd ffe4 	bl	800b6fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d74c:	4b0f      	ldr	r3, [pc, #60]	; (800d78c <xTaskPriorityDisinherit+0xd4>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	429a      	cmp	r2, r3
 800d752:	d903      	bls.n	800d75c <xTaskPriorityDisinherit+0xa4>
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d758:	4a0c      	ldr	r2, [pc, #48]	; (800d78c <xTaskPriorityDisinherit+0xd4>)
 800d75a:	6013      	str	r3, [r2, #0]
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d760:	4613      	mov	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4a09      	ldr	r2, [pc, #36]	; (800d790 <xTaskPriorityDisinherit+0xd8>)
 800d76a:	441a      	add	r2, r3
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	3304      	adds	r3, #4
 800d770:	4619      	mov	r1, r3
 800d772:	4610      	mov	r0, r2
 800d774:	f7fd ff65 	bl	800b642 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d778:	2301      	movs	r3, #1
 800d77a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d77c:	697b      	ldr	r3, [r7, #20]
	}
 800d77e:	4618      	mov	r0, r3
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20005fd0 	.word	0x20005fd0
 800d78c:	200064ac 	.word	0x200064ac
 800d790:	20005fd4 	.word	0x20005fd4

0800d794 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d794:	b580      	push	{r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d06a      	beq.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10a      	bne.n	800d7ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	60fb      	str	r3, [r7, #12]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d902      	bls.n	800d7da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	61fb      	str	r3, [r7, #28]
 800d7d8:	e002      	b.n	800d7e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e4:	69fa      	ldr	r2, [r7, #28]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d04b      	beq.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d146      	bne.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d7f4:	4b25      	ldr	r3, [pc, #148]	; (800d88c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	69ba      	ldr	r2, [r7, #24]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d10a      	bne.n	800d814 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	60bb      	str	r3, [r7, #8]
}
 800d810:	bf00      	nop
 800d812:	e7fe      	b.n	800d812 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	69fa      	ldr	r2, [r7, #28]
 800d81e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	2b00      	cmp	r3, #0
 800d826:	db04      	blt.n	800d832 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	6959      	ldr	r1, [r3, #20]
 800d836:	693a      	ldr	r2, [r7, #16]
 800d838:	4613      	mov	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4413      	add	r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4a13      	ldr	r2, [pc, #76]	; (800d890 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d842:	4413      	add	r3, r2
 800d844:	4299      	cmp	r1, r3
 800d846:	d11c      	bne.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	3304      	adds	r3, #4
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fd ff55 	bl	800b6fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d856:	4b0f      	ldr	r3, [pc, #60]	; (800d894 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d903      	bls.n	800d866 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d862:	4a0c      	ldr	r2, [pc, #48]	; (800d894 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d864:	6013      	str	r3, [r2, #0]
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86a:	4613      	mov	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4413      	add	r3, r2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4a07      	ldr	r2, [pc, #28]	; (800d890 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d874:	441a      	add	r2, r3
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	3304      	adds	r3, #4
 800d87a:	4619      	mov	r1, r3
 800d87c:	4610      	mov	r0, r2
 800d87e:	f7fd fee0 	bl	800b642 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d882:	bf00      	nop
 800d884:	3720      	adds	r7, #32
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20005fd0 	.word	0x20005fd0
 800d890:	20005fd4 	.word	0x20005fd4
 800d894:	200064ac 	.word	0x200064ac

0800d898 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d898:	b480      	push	{r7}
 800d89a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d89c:	4b07      	ldr	r3, [pc, #28]	; (800d8bc <pvTaskIncrementMutexHeldCount+0x24>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d004      	beq.n	800d8ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <pvTaskIncrementMutexHeldCount+0x24>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8aa:	3201      	adds	r2, #1
 800d8ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d8ae:	4b03      	ldr	r3, [pc, #12]	; (800d8bc <pvTaskIncrementMutexHeldCount+0x24>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
	}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	20005fd0 	.word	0x20005fd0

0800d8c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8ca:	4b21      	ldr	r3, [pc, #132]	; (800d950 <prvAddCurrentTaskToDelayedList+0x90>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8d0:	4b20      	ldr	r3, [pc, #128]	; (800d954 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fd ff10 	bl	800b6fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d10a      	bne.n	800d8fa <prvAddCurrentTaskToDelayedList+0x3a>
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d007      	beq.n	800d8fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8ea:	4b1a      	ldr	r3, [pc, #104]	; (800d954 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	4819      	ldr	r0, [pc, #100]	; (800d958 <prvAddCurrentTaskToDelayedList+0x98>)
 800d8f4:	f7fd fea5 	bl	800b642 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8f8:	e026      	b.n	800d948 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4413      	add	r3, r2
 800d900:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d902:	4b14      	ldr	r3, [pc, #80]	; (800d954 <prvAddCurrentTaskToDelayedList+0x94>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d209      	bcs.n	800d926 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d912:	4b12      	ldr	r3, [pc, #72]	; (800d95c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4b0f      	ldr	r3, [pc, #60]	; (800d954 <prvAddCurrentTaskToDelayedList+0x94>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3304      	adds	r3, #4
 800d91c:	4619      	mov	r1, r3
 800d91e:	4610      	mov	r0, r2
 800d920:	f7fd feb3 	bl	800b68a <vListInsert>
}
 800d924:	e010      	b.n	800d948 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d926:	4b0e      	ldr	r3, [pc, #56]	; (800d960 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	4b0a      	ldr	r3, [pc, #40]	; (800d954 <prvAddCurrentTaskToDelayedList+0x94>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3304      	adds	r3, #4
 800d930:	4619      	mov	r1, r3
 800d932:	4610      	mov	r0, r2
 800d934:	f7fd fea9 	bl	800b68a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d938:	4b0a      	ldr	r3, [pc, #40]	; (800d964 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d202      	bcs.n	800d948 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d942:	4a08      	ldr	r2, [pc, #32]	; (800d964 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	6013      	str	r3, [r2, #0]
}
 800d948:	bf00      	nop
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	200064a8 	.word	0x200064a8
 800d954:	20005fd0 	.word	0x20005fd0
 800d958:	20006490 	.word	0x20006490
 800d95c:	20006460 	.word	0x20006460
 800d960:	2000645c 	.word	0x2000645c
 800d964:	200064c4 	.word	0x200064c4

0800d968 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08a      	sub	sp, #40	; 0x28
 800d96c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d96e:	2300      	movs	r3, #0
 800d970:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d972:	f000 fb07 	bl	800df84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d976:	4b1c      	ldr	r3, [pc, #112]	; (800d9e8 <xTimerCreateTimerTask+0x80>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d021      	beq.n	800d9c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d982:	2300      	movs	r3, #0
 800d984:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d986:	1d3a      	adds	r2, r7, #4
 800d988:	f107 0108 	add.w	r1, r7, #8
 800d98c:	f107 030c 	add.w	r3, r7, #12
 800d990:	4618      	mov	r0, r3
 800d992:	f7fd fe0f 	bl	800b5b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d996:	6879      	ldr	r1, [r7, #4]
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	9202      	str	r2, [sp, #8]
 800d99e:	9301      	str	r3, [sp, #4]
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	460a      	mov	r2, r1
 800d9a8:	4910      	ldr	r1, [pc, #64]	; (800d9ec <xTimerCreateTimerTask+0x84>)
 800d9aa:	4811      	ldr	r0, [pc, #68]	; (800d9f0 <xTimerCreateTimerTask+0x88>)
 800d9ac:	f7fe ff94 	bl	800c8d8 <xTaskCreateStatic>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	4a10      	ldr	r2, [pc, #64]	; (800d9f4 <xTimerCreateTimerTask+0x8c>)
 800d9b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9b6:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <xTimerCreateTimerTask+0x8c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	613b      	str	r3, [r7, #16]
}
 800d9da:	bf00      	nop
 800d9dc:	e7fe      	b.n	800d9dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9de:	697b      	ldr	r3, [r7, #20]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	20006500 	.word	0x20006500
 800d9ec:	0801a2f8 	.word	0x0801a2f8
 800d9f0:	0800db2d 	.word	0x0800db2d
 800d9f4:	20006504 	.word	0x20006504

0800d9f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08a      	sub	sp, #40	; 0x28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da06:	2300      	movs	r3, #0
 800da08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10a      	bne.n	800da26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800da10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	623b      	str	r3, [r7, #32]
}
 800da22:	bf00      	nop
 800da24:	e7fe      	b.n	800da24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da26:	4b1a      	ldr	r3, [pc, #104]	; (800da90 <xTimerGenericCommand+0x98>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d02a      	beq.n	800da84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2b05      	cmp	r3, #5
 800da3e:	dc18      	bgt.n	800da72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da40:	f7ff fdb4 	bl	800d5ac <xTaskGetSchedulerState>
 800da44:	4603      	mov	r3, r0
 800da46:	2b02      	cmp	r3, #2
 800da48:	d109      	bne.n	800da5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da4a:	4b11      	ldr	r3, [pc, #68]	; (800da90 <xTimerGenericCommand+0x98>)
 800da4c:	6818      	ldr	r0, [r3, #0]
 800da4e:	f107 0110 	add.w	r1, r7, #16
 800da52:	2300      	movs	r3, #0
 800da54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da56:	f7fe f8d9 	bl	800bc0c <xQueueGenericSend>
 800da5a:	6278      	str	r0, [r7, #36]	; 0x24
 800da5c:	e012      	b.n	800da84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da5e:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <xTimerGenericCommand+0x98>)
 800da60:	6818      	ldr	r0, [r3, #0]
 800da62:	f107 0110 	add.w	r1, r7, #16
 800da66:	2300      	movs	r3, #0
 800da68:	2200      	movs	r2, #0
 800da6a:	f7fe f8cf 	bl	800bc0c <xQueueGenericSend>
 800da6e:	6278      	str	r0, [r7, #36]	; 0x24
 800da70:	e008      	b.n	800da84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da72:	4b07      	ldr	r3, [pc, #28]	; (800da90 <xTimerGenericCommand+0x98>)
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f107 0110 	add.w	r1, r7, #16
 800da7a:	2300      	movs	r3, #0
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	f7fe f9c3 	bl	800be08 <xQueueGenericSendFromISR>
 800da82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da86:	4618      	mov	r0, r3
 800da88:	3728      	adds	r7, #40	; 0x28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	20006500 	.word	0x20006500

0800da94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b088      	sub	sp, #32
 800da98:	af02      	add	r7, sp, #8
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da9e:	4b22      	ldr	r3, [pc, #136]	; (800db28 <prvProcessExpiredTimer+0x94>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	3304      	adds	r3, #4
 800daac:	4618      	mov	r0, r3
 800daae:	f7fd fe25 	bl	800b6fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dab8:	f003 0304 	and.w	r3, r3, #4
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d022      	beq.n	800db06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	699a      	ldr	r2, [r3, #24]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	18d1      	adds	r1, r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	683a      	ldr	r2, [r7, #0]
 800dacc:	6978      	ldr	r0, [r7, #20]
 800dace:	f000 f8d1 	bl	800dc74 <prvInsertTimerInActiveList>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d01f      	beq.n	800db18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dad8:	2300      	movs	r3, #0
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	2300      	movs	r3, #0
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	2100      	movs	r1, #0
 800dae2:	6978      	ldr	r0, [r7, #20]
 800dae4:	f7ff ff88 	bl	800d9f8 <xTimerGenericCommand>
 800dae8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d113      	bne.n	800db18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800daf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf4:	f383 8811 	msr	BASEPRI, r3
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	f3bf 8f4f 	dsb	sy
 800db00:	60fb      	str	r3, [r7, #12]
}
 800db02:	bf00      	nop
 800db04:	e7fe      	b.n	800db04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db0c:	f023 0301 	bic.w	r3, r3, #1
 800db10:	b2da      	uxtb	r2, r3
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	6978      	ldr	r0, [r7, #20]
 800db1e:	4798      	blx	r3
}
 800db20:	bf00      	nop
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	200064f8 	.word	0x200064f8

0800db2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db34:	f107 0308 	add.w	r3, r7, #8
 800db38:	4618      	mov	r0, r3
 800db3a:	f000 f857 	bl	800dbec <prvGetNextExpireTime>
 800db3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	4619      	mov	r1, r3
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f000 f803 	bl	800db50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db4a:	f000 f8d5 	bl	800dcf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db4e:	e7f1      	b.n	800db34 <prvTimerTask+0x8>

0800db50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db5a:	f7ff f919 	bl	800cd90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db5e:	f107 0308 	add.w	r3, r7, #8
 800db62:	4618      	mov	r0, r3
 800db64:	f000 f866 	bl	800dc34 <prvSampleTimeNow>
 800db68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d130      	bne.n	800dbd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10a      	bne.n	800db8c <prvProcessTimerOrBlockTask+0x3c>
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d806      	bhi.n	800db8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db7e:	f7ff f915 	bl	800cdac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db82:	68f9      	ldr	r1, [r7, #12]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff ff85 	bl	800da94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db8a:	e024      	b.n	800dbd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d008      	beq.n	800dba4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db92:	4b13      	ldr	r3, [pc, #76]	; (800dbe0 <prvProcessTimerOrBlockTask+0x90>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d101      	bne.n	800dba0 <prvProcessTimerOrBlockTask+0x50>
 800db9c:	2301      	movs	r3, #1
 800db9e:	e000      	b.n	800dba2 <prvProcessTimerOrBlockTask+0x52>
 800dba0:	2300      	movs	r3, #0
 800dba2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dba4:	4b0f      	ldr	r3, [pc, #60]	; (800dbe4 <prvProcessTimerOrBlockTask+0x94>)
 800dba6:	6818      	ldr	r0, [r3, #0]
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	f7fe fe5d 	bl	800c870 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dbb6:	f7ff f8f9 	bl	800cdac <xTaskResumeAll>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10a      	bne.n	800dbd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dbc0:	4b09      	ldr	r3, [pc, #36]	; (800dbe8 <prvProcessTimerOrBlockTask+0x98>)
 800dbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	f3bf 8f6f 	isb	sy
}
 800dbd0:	e001      	b.n	800dbd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dbd2:	f7ff f8eb 	bl	800cdac <xTaskResumeAll>
}
 800dbd6:	bf00      	nop
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	200064fc 	.word	0x200064fc
 800dbe4:	20006500 	.word	0x20006500
 800dbe8:	e000ed04 	.word	0xe000ed04

0800dbec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dbf4:	4b0e      	ldr	r3, [pc, #56]	; (800dc30 <prvGetNextExpireTime+0x44>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <prvGetNextExpireTime+0x16>
 800dbfe:	2201      	movs	r2, #1
 800dc00:	e000      	b.n	800dc04 <prvGetNextExpireTime+0x18>
 800dc02:	2200      	movs	r2, #0
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d105      	bne.n	800dc1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc10:	4b07      	ldr	r3, [pc, #28]	; (800dc30 <prvGetNextExpireTime+0x44>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	e001      	b.n	800dc20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc20:	68fb      	ldr	r3, [r7, #12]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	200064f8 	.word	0x200064f8

0800dc34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc3c:	f7ff f954 	bl	800cee8 <xTaskGetTickCount>
 800dc40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc42:	4b0b      	ldr	r3, [pc, #44]	; (800dc70 <prvSampleTimeNow+0x3c>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d205      	bcs.n	800dc58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc4c:	f000 f936 	bl	800debc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2201      	movs	r2, #1
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	e002      	b.n	800dc5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc5e:	4a04      	ldr	r2, [pc, #16]	; (800dc70 <prvSampleTimeNow+0x3c>)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc64:	68fb      	ldr	r3, [r7, #12]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20006508 	.word	0x20006508

0800dc74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc82:	2300      	movs	r3, #0
 800dc84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d812      	bhi.n	800dcc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	1ad2      	subs	r2, r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d302      	bcc.n	800dcae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	617b      	str	r3, [r7, #20]
 800dcac:	e01b      	b.n	800dce6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dcae:	4b10      	ldr	r3, [pc, #64]	; (800dcf0 <prvInsertTimerInActiveList+0x7c>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4610      	mov	r0, r2
 800dcba:	f7fd fce6 	bl	800b68a <vListInsert>
 800dcbe:	e012      	b.n	800dce6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d206      	bcs.n	800dcd6 <prvInsertTimerInActiveList+0x62>
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d302      	bcc.n	800dcd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	e007      	b.n	800dce6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcd6:	4b07      	ldr	r3, [pc, #28]	; (800dcf4 <prvInsertTimerInActiveList+0x80>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	3304      	adds	r3, #4
 800dcde:	4619      	mov	r1, r3
 800dce0:	4610      	mov	r0, r2
 800dce2:	f7fd fcd2 	bl	800b68a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dce6:	697b      	ldr	r3, [r7, #20]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	200064fc 	.word	0x200064fc
 800dcf4:	200064f8 	.word	0x200064f8

0800dcf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08e      	sub	sp, #56	; 0x38
 800dcfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcfe:	e0ca      	b.n	800de96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	da18      	bge.n	800dd38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd06:	1d3b      	adds	r3, r7, #4
 800dd08:	3304      	adds	r3, #4
 800dd0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10a      	bne.n	800dd28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	61fb      	str	r3, [r7, #28]
}
 800dd24:	bf00      	nop
 800dd26:	e7fe      	b.n	800dd26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd2e:	6850      	ldr	r0, [r2, #4]
 800dd30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd32:	6892      	ldr	r2, [r2, #8]
 800dd34:	4611      	mov	r1, r2
 800dd36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f2c0 80aa 	blt.w	800de94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d004      	beq.n	800dd56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	3304      	adds	r3, #4
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fd fcd3 	bl	800b6fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd56:	463b      	mov	r3, r7
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff ff6b 	bl	800dc34 <prvSampleTimeNow>
 800dd5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b09      	cmp	r3, #9
 800dd64:	f200 8097 	bhi.w	800de96 <prvProcessReceivedCommands+0x19e>
 800dd68:	a201      	add	r2, pc, #4	; (adr r2, 800dd70 <prvProcessReceivedCommands+0x78>)
 800dd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd6e:	bf00      	nop
 800dd70:	0800dd99 	.word	0x0800dd99
 800dd74:	0800dd99 	.word	0x0800dd99
 800dd78:	0800dd99 	.word	0x0800dd99
 800dd7c:	0800de0d 	.word	0x0800de0d
 800dd80:	0800de21 	.word	0x0800de21
 800dd84:	0800de6b 	.word	0x0800de6b
 800dd88:	0800dd99 	.word	0x0800dd99
 800dd8c:	0800dd99 	.word	0x0800dd99
 800dd90:	0800de0d 	.word	0x0800de0d
 800dd94:	0800de21 	.word	0x0800de21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd9e:	f043 0301 	orr.w	r3, r3, #1
 800dda2:	b2da      	uxtb	r2, r3
 800dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	18d1      	adds	r1, r2, r3
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb8:	f7ff ff5c 	bl	800dc74 <prvInsertTimerInActiveList>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d069      	beq.n	800de96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc4:	6a1b      	ldr	r3, [r3, #32]
 800ddc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddd0:	f003 0304 	and.w	r3, r3, #4
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d05e      	beq.n	800de96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	441a      	add	r2, r3
 800dde0:	2300      	movs	r3, #0
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	2300      	movs	r3, #0
 800dde6:	2100      	movs	r1, #0
 800dde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddea:	f7ff fe05 	bl	800d9f8 <xTimerGenericCommand>
 800ddee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d14f      	bne.n	800de96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ddf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	61bb      	str	r3, [r7, #24]
}
 800de08:	bf00      	nop
 800de0a:	e7fe      	b.n	800de0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de12:	f023 0301 	bic.w	r3, r3, #1
 800de16:	b2da      	uxtb	r2, r3
 800de18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de1e:	e03a      	b.n	800de96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de26:	f043 0301 	orr.w	r3, r3, #1
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d10a      	bne.n	800de56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de44:	f383 8811 	msr	BASEPRI, r3
 800de48:	f3bf 8f6f 	isb	sy
 800de4c:	f3bf 8f4f 	dsb	sy
 800de50:	617b      	str	r3, [r7, #20]
}
 800de52:	bf00      	nop
 800de54:	e7fe      	b.n	800de54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	699a      	ldr	r2, [r3, #24]
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	18d1      	adds	r1, r2, r3
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de64:	f7ff ff06 	bl	800dc74 <prvInsertTimerInActiveList>
					break;
 800de68:	e015      	b.n	800de96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de70:	f003 0302 	and.w	r3, r3, #2
 800de74:	2b00      	cmp	r3, #0
 800de76:	d103      	bne.n	800de80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800de78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de7a:	f000 fbe1 	bl	800e640 <vPortFree>
 800de7e:	e00a      	b.n	800de96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de86:	f023 0301 	bic.w	r3, r3, #1
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de92:	e000      	b.n	800de96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800de94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de96:	4b08      	ldr	r3, [pc, #32]	; (800deb8 <prvProcessReceivedCommands+0x1c0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	1d39      	adds	r1, r7, #4
 800de9c:	2200      	movs	r2, #0
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fe f8da 	bl	800c058 <xQueueReceive>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f47f af2a 	bne.w	800dd00 <prvProcessReceivedCommands+0x8>
	}
}
 800deac:	bf00      	nop
 800deae:	bf00      	nop
 800deb0:	3730      	adds	r7, #48	; 0x30
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20006500 	.word	0x20006500

0800debc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dec2:	e048      	b.n	800df56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dec4:	4b2d      	ldr	r3, [pc, #180]	; (800df7c <prvSwitchTimerLists+0xc0>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dece:	4b2b      	ldr	r3, [pc, #172]	; (800df7c <prvSwitchTimerLists+0xc0>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3304      	adds	r3, #4
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fd fc0d 	bl	800b6fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800def0:	f003 0304 	and.w	r3, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	d02e      	beq.n	800df56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	699b      	ldr	r3, [r3, #24]
 800defc:	693a      	ldr	r2, [r7, #16]
 800defe:	4413      	add	r3, r2
 800df00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	429a      	cmp	r2, r3
 800df08:	d90e      	bls.n	800df28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df16:	4b19      	ldr	r3, [pc, #100]	; (800df7c <prvSwitchTimerLists+0xc0>)
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	3304      	adds	r3, #4
 800df1e:	4619      	mov	r1, r3
 800df20:	4610      	mov	r0, r2
 800df22:	f7fd fbb2 	bl	800b68a <vListInsert>
 800df26:	e016      	b.n	800df56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df28:	2300      	movs	r3, #0
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	2300      	movs	r3, #0
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	2100      	movs	r1, #0
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7ff fd60 	bl	800d9f8 <xTimerGenericCommand>
 800df38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10a      	bne.n	800df56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	603b      	str	r3, [r7, #0]
}
 800df52:	bf00      	nop
 800df54:	e7fe      	b.n	800df54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df56:	4b09      	ldr	r3, [pc, #36]	; (800df7c <prvSwitchTimerLists+0xc0>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1b1      	bne.n	800dec4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df60:	4b06      	ldr	r3, [pc, #24]	; (800df7c <prvSwitchTimerLists+0xc0>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df66:	4b06      	ldr	r3, [pc, #24]	; (800df80 <prvSwitchTimerLists+0xc4>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a04      	ldr	r2, [pc, #16]	; (800df7c <prvSwitchTimerLists+0xc0>)
 800df6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df6e:	4a04      	ldr	r2, [pc, #16]	; (800df80 <prvSwitchTimerLists+0xc4>)
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	6013      	str	r3, [r2, #0]
}
 800df74:	bf00      	nop
 800df76:	3718      	adds	r7, #24
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	200064f8 	.word	0x200064f8
 800df80:	200064fc 	.word	0x200064fc

0800df84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df8a:	f000 f96b 	bl	800e264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800df8e:	4b15      	ldr	r3, [pc, #84]	; (800dfe4 <prvCheckForValidListAndQueue+0x60>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d120      	bne.n	800dfd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df96:	4814      	ldr	r0, [pc, #80]	; (800dfe8 <prvCheckForValidListAndQueue+0x64>)
 800df98:	f7fd fb26 	bl	800b5e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df9c:	4813      	ldr	r0, [pc, #76]	; (800dfec <prvCheckForValidListAndQueue+0x68>)
 800df9e:	f7fd fb23 	bl	800b5e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dfa2:	4b13      	ldr	r3, [pc, #76]	; (800dff0 <prvCheckForValidListAndQueue+0x6c>)
 800dfa4:	4a10      	ldr	r2, [pc, #64]	; (800dfe8 <prvCheckForValidListAndQueue+0x64>)
 800dfa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dfa8:	4b12      	ldr	r3, [pc, #72]	; (800dff4 <prvCheckForValidListAndQueue+0x70>)
 800dfaa:	4a10      	ldr	r2, [pc, #64]	; (800dfec <prvCheckForValidListAndQueue+0x68>)
 800dfac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dfae:	2300      	movs	r3, #0
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	4b11      	ldr	r3, [pc, #68]	; (800dff8 <prvCheckForValidListAndQueue+0x74>)
 800dfb4:	4a11      	ldr	r2, [pc, #68]	; (800dffc <prvCheckForValidListAndQueue+0x78>)
 800dfb6:	2110      	movs	r1, #16
 800dfb8:	200a      	movs	r0, #10
 800dfba:	f7fd fc31 	bl	800b820 <xQueueGenericCreateStatic>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	4a08      	ldr	r2, [pc, #32]	; (800dfe4 <prvCheckForValidListAndQueue+0x60>)
 800dfc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dfc4:	4b07      	ldr	r3, [pc, #28]	; (800dfe4 <prvCheckForValidListAndQueue+0x60>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dfcc:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <prvCheckForValidListAndQueue+0x60>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	490b      	ldr	r1, [pc, #44]	; (800e000 <prvCheckForValidListAndQueue+0x7c>)
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe fbf8 	bl	800c7c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfd8:	f000 f974 	bl	800e2c4 <vPortExitCritical>
}
 800dfdc:	bf00      	nop
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20006500 	.word	0x20006500
 800dfe8:	200064d0 	.word	0x200064d0
 800dfec:	200064e4 	.word	0x200064e4
 800dff0:	200064f8 	.word	0x200064f8
 800dff4:	200064fc 	.word	0x200064fc
 800dff8:	200065ac 	.word	0x200065ac
 800dffc:	2000650c 	.word	0x2000650c
 800e000:	0801a300 	.word	0x0801a300

0800e004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	3b04      	subs	r3, #4
 800e014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	3b04      	subs	r3, #4
 800e022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	f023 0201 	bic.w	r2, r3, #1
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3b04      	subs	r3, #4
 800e032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e034:	4a0c      	ldr	r2, [pc, #48]	; (800e068 <pxPortInitialiseStack+0x64>)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	3b14      	subs	r3, #20
 800e03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3b04      	subs	r3, #4
 800e04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f06f 0202 	mvn.w	r2, #2
 800e052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3b20      	subs	r3, #32
 800e058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e05a:	68fb      	ldr	r3, [r7, #12]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	0800e06d 	.word	0x0800e06d

0800e06c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e072:	2300      	movs	r3, #0
 800e074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e076:	4b12      	ldr	r3, [pc, #72]	; (800e0c0 <prvTaskExitError+0x54>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07e:	d00a      	beq.n	800e096 <prvTaskExitError+0x2a>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	60fb      	str	r3, [r7, #12]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <prvTaskExitError+0x28>
	__asm volatile
 800e096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	60bb      	str	r3, [r7, #8]
}
 800e0a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0aa:	bf00      	nop
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0fc      	beq.n	800e0ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0b2:	bf00      	nop
 800e0b4:	bf00      	nop
 800e0b6:	3714      	adds	r7, #20
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr
 800e0c0:	2000008c 	.word	0x2000008c
	...

0800e0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0d0:	4b07      	ldr	r3, [pc, #28]	; (800e0f0 <pxCurrentTCBConst2>)
 800e0d2:	6819      	ldr	r1, [r3, #0]
 800e0d4:	6808      	ldr	r0, [r1, #0]
 800e0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0da:	f380 8809 	msr	PSP, r0
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	f04f 0000 	mov.w	r0, #0
 800e0e6:	f380 8811 	msr	BASEPRI, r0
 800e0ea:	4770      	bx	lr
 800e0ec:	f3af 8000 	nop.w

0800e0f0 <pxCurrentTCBConst2>:
 800e0f0:	20005fd0 	.word	0x20005fd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0f4:	bf00      	nop
 800e0f6:	bf00      	nop

0800e0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0f8:	4808      	ldr	r0, [pc, #32]	; (800e11c <prvPortStartFirstTask+0x24>)
 800e0fa:	6800      	ldr	r0, [r0, #0]
 800e0fc:	6800      	ldr	r0, [r0, #0]
 800e0fe:	f380 8808 	msr	MSP, r0
 800e102:	f04f 0000 	mov.w	r0, #0
 800e106:	f380 8814 	msr	CONTROL, r0
 800e10a:	b662      	cpsie	i
 800e10c:	b661      	cpsie	f
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	df00      	svc	0
 800e118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e11a:	bf00      	nop
 800e11c:	e000ed08 	.word	0xe000ed08

0800e120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e126:	4b46      	ldr	r3, [pc, #280]	; (800e240 <xPortStartScheduler+0x120>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a46      	ldr	r2, [pc, #280]	; (800e244 <xPortStartScheduler+0x124>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d10a      	bne.n	800e146 <xPortStartScheduler+0x26>
	__asm volatile
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	613b      	str	r3, [r7, #16]
}
 800e142:	bf00      	nop
 800e144:	e7fe      	b.n	800e144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e146:	4b3e      	ldr	r3, [pc, #248]	; (800e240 <xPortStartScheduler+0x120>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a3f      	ldr	r2, [pc, #252]	; (800e248 <xPortStartScheduler+0x128>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d10a      	bne.n	800e166 <xPortStartScheduler+0x46>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e166:	4b39      	ldr	r3, [pc, #228]	; (800e24c <xPortStartScheduler+0x12c>)
 800e168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	22ff      	movs	r2, #255	; 0xff
 800e176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e180:	78fb      	ldrb	r3, [r7, #3]
 800e182:	b2db      	uxtb	r3, r3
 800e184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	4b31      	ldr	r3, [pc, #196]	; (800e250 <xPortStartScheduler+0x130>)
 800e18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e18e:	4b31      	ldr	r3, [pc, #196]	; (800e254 <xPortStartScheduler+0x134>)
 800e190:	2207      	movs	r2, #7
 800e192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e194:	e009      	b.n	800e1aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e196:	4b2f      	ldr	r3, [pc, #188]	; (800e254 <xPortStartScheduler+0x134>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3b01      	subs	r3, #1
 800e19c:	4a2d      	ldr	r2, [pc, #180]	; (800e254 <xPortStartScheduler+0x134>)
 800e19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1a0:	78fb      	ldrb	r3, [r7, #3]
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1aa:	78fb      	ldrb	r3, [r7, #3]
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1b2:	2b80      	cmp	r3, #128	; 0x80
 800e1b4:	d0ef      	beq.n	800e196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1b6:	4b27      	ldr	r3, [pc, #156]	; (800e254 <xPortStartScheduler+0x134>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f1c3 0307 	rsb	r3, r3, #7
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	d00a      	beq.n	800e1d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c6:	f383 8811 	msr	BASEPRI, r3
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	60bb      	str	r3, [r7, #8]
}
 800e1d4:	bf00      	nop
 800e1d6:	e7fe      	b.n	800e1d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e1d8:	4b1e      	ldr	r3, [pc, #120]	; (800e254 <xPortStartScheduler+0x134>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	021b      	lsls	r3, r3, #8
 800e1de:	4a1d      	ldr	r2, [pc, #116]	; (800e254 <xPortStartScheduler+0x134>)
 800e1e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e1e2:	4b1c      	ldr	r3, [pc, #112]	; (800e254 <xPortStartScheduler+0x134>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1ea:	4a1a      	ldr	r2, [pc, #104]	; (800e254 <xPortStartScheduler+0x134>)
 800e1ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1f6:	4b18      	ldr	r3, [pc, #96]	; (800e258 <xPortStartScheduler+0x138>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a17      	ldr	r2, [pc, #92]	; (800e258 <xPortStartScheduler+0x138>)
 800e1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <xPortStartScheduler+0x138>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a14      	ldr	r2, [pc, #80]	; (800e258 <xPortStartScheduler+0x138>)
 800e208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e20c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e20e:	f000 f8dd 	bl	800e3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e212:	4b12      	ldr	r3, [pc, #72]	; (800e25c <xPortStartScheduler+0x13c>)
 800e214:	2200      	movs	r2, #0
 800e216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e218:	f000 f8fc 	bl	800e414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e21c:	4b10      	ldr	r3, [pc, #64]	; (800e260 <xPortStartScheduler+0x140>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a0f      	ldr	r2, [pc, #60]	; (800e260 <xPortStartScheduler+0x140>)
 800e222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e228:	f7ff ff66 	bl	800e0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e22c:	f7fe ff38 	bl	800d0a0 <vTaskSwitchContext>
	prvTaskExitError();
 800e230:	f7ff ff1c 	bl	800e06c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	e000ed00 	.word	0xe000ed00
 800e244:	410fc271 	.word	0x410fc271
 800e248:	410fc270 	.word	0x410fc270
 800e24c:	e000e400 	.word	0xe000e400
 800e250:	200065fc 	.word	0x200065fc
 800e254:	20006600 	.word	0x20006600
 800e258:	e000ed20 	.word	0xe000ed20
 800e25c:	2000008c 	.word	0x2000008c
 800e260:	e000ef34 	.word	0xe000ef34

0800e264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	607b      	str	r3, [r7, #4]
}
 800e27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e27e:	4b0f      	ldr	r3, [pc, #60]	; (800e2bc <vPortEnterCritical+0x58>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3301      	adds	r3, #1
 800e284:	4a0d      	ldr	r2, [pc, #52]	; (800e2bc <vPortEnterCritical+0x58>)
 800e286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e288:	4b0c      	ldr	r3, [pc, #48]	; (800e2bc <vPortEnterCritical+0x58>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d10f      	bne.n	800e2b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e290:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <vPortEnterCritical+0x5c>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	b2db      	uxtb	r3, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00a      	beq.n	800e2b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	603b      	str	r3, [r7, #0]
}
 800e2ac:	bf00      	nop
 800e2ae:	e7fe      	b.n	800e2ae <vPortEnterCritical+0x4a>
	}
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	2000008c 	.word	0x2000008c
 800e2c0:	e000ed04 	.word	0xe000ed04

0800e2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2ca:	4b12      	ldr	r3, [pc, #72]	; (800e314 <vPortExitCritical+0x50>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10a      	bne.n	800e2e8 <vPortExitCritical+0x24>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	607b      	str	r3, [r7, #4]
}
 800e2e4:	bf00      	nop
 800e2e6:	e7fe      	b.n	800e2e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e2e8:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <vPortExitCritical+0x50>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	4a09      	ldr	r2, [pc, #36]	; (800e314 <vPortExitCritical+0x50>)
 800e2f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2f2:	4b08      	ldr	r3, [pc, #32]	; (800e314 <vPortExitCritical+0x50>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d105      	bne.n	800e306 <vPortExitCritical+0x42>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	f383 8811 	msr	BASEPRI, r3
}
 800e304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e306:	bf00      	nop
 800e308:	370c      	adds	r7, #12
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	2000008c 	.word	0x2000008c
	...

0800e320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e320:	f3ef 8009 	mrs	r0, PSP
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	4b15      	ldr	r3, [pc, #84]	; (800e380 <pxCurrentTCBConst>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	f01e 0f10 	tst.w	lr, #16
 800e330:	bf08      	it	eq
 800e332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33a:	6010      	str	r0, [r2, #0]
 800e33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e344:	f380 8811 	msr	BASEPRI, r0
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	f7fe fea6 	bl	800d0a0 <vTaskSwitchContext>
 800e354:	f04f 0000 	mov.w	r0, #0
 800e358:	f380 8811 	msr	BASEPRI, r0
 800e35c:	bc09      	pop	{r0, r3}
 800e35e:	6819      	ldr	r1, [r3, #0]
 800e360:	6808      	ldr	r0, [r1, #0]
 800e362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e366:	f01e 0f10 	tst.w	lr, #16
 800e36a:	bf08      	it	eq
 800e36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e370:	f380 8809 	msr	PSP, r0
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w

0800e380 <pxCurrentTCBConst>:
 800e380:	20005fd0 	.word	0x20005fd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e384:	bf00      	nop
 800e386:	bf00      	nop

0800e388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	607b      	str	r3, [r7, #4]
}
 800e3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3a2:	f7fe fdc3 	bl	800cf2c <xTaskIncrementTick>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <xPortSysTickHandler+0x40>)
 800e3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b2:	601a      	str	r2, [r3, #0]
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	f383 8811 	msr	BASEPRI, r3
}
 800e3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	e000ed04 	.word	0xe000ed04

0800e3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3d0:	4b0b      	ldr	r3, [pc, #44]	; (800e400 <vPortSetupTimerInterrupt+0x34>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3d6:	4b0b      	ldr	r3, [pc, #44]	; (800e404 <vPortSetupTimerInterrupt+0x38>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3dc:	4b0a      	ldr	r3, [pc, #40]	; (800e408 <vPortSetupTimerInterrupt+0x3c>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a0a      	ldr	r2, [pc, #40]	; (800e40c <vPortSetupTimerInterrupt+0x40>)
 800e3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e6:	099b      	lsrs	r3, r3, #6
 800e3e8:	4a09      	ldr	r2, [pc, #36]	; (800e410 <vPortSetupTimerInterrupt+0x44>)
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3ee:	4b04      	ldr	r3, [pc, #16]	; (800e400 <vPortSetupTimerInterrupt+0x34>)
 800e3f0:	2207      	movs	r2, #7
 800e3f2:	601a      	str	r2, [r3, #0]
}
 800e3f4:	bf00      	nop
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop
 800e400:	e000e010 	.word	0xe000e010
 800e404:	e000e018 	.word	0xe000e018
 800e408:	2000006c 	.word	0x2000006c
 800e40c:	10624dd3 	.word	0x10624dd3
 800e410:	e000e014 	.word	0xe000e014

0800e414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e424 <vPortEnableVFP+0x10>
 800e418:	6801      	ldr	r1, [r0, #0]
 800e41a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e41e:	6001      	str	r1, [r0, #0]
 800e420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e422:	bf00      	nop
 800e424:	e000ed88 	.word	0xe000ed88

0800e428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e42e:	f3ef 8305 	mrs	r3, IPSR
 800e432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2b0f      	cmp	r3, #15
 800e438:	d914      	bls.n	800e464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e43a:	4a17      	ldr	r2, [pc, #92]	; (800e498 <vPortValidateInterruptPriority+0x70>)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	4413      	add	r3, r2
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e444:	4b15      	ldr	r3, [pc, #84]	; (800e49c <vPortValidateInterruptPriority+0x74>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	7afa      	ldrb	r2, [r7, #11]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d20a      	bcs.n	800e464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	607b      	str	r3, [r7, #4]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e464:	4b0e      	ldr	r3, [pc, #56]	; (800e4a0 <vPortValidateInterruptPriority+0x78>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e46c:	4b0d      	ldr	r3, [pc, #52]	; (800e4a4 <vPortValidateInterruptPriority+0x7c>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	429a      	cmp	r2, r3
 800e472:	d90a      	bls.n	800e48a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	603b      	str	r3, [r7, #0]
}
 800e486:	bf00      	nop
 800e488:	e7fe      	b.n	800e488 <vPortValidateInterruptPriority+0x60>
	}
 800e48a:	bf00      	nop
 800e48c:	3714      	adds	r7, #20
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	e000e3f0 	.word	0xe000e3f0
 800e49c:	200065fc 	.word	0x200065fc
 800e4a0:	e000ed0c 	.word	0xe000ed0c
 800e4a4:	20006600 	.word	0x20006600

0800e4a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b08a      	sub	sp, #40	; 0x28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4b4:	f7fe fc6c 	bl	800cd90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4b8:	4b5b      	ldr	r3, [pc, #364]	; (800e628 <pvPortMalloc+0x180>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d101      	bne.n	800e4c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4c0:	f000 f920 	bl	800e704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4c4:	4b59      	ldr	r3, [pc, #356]	; (800e62c <pvPortMalloc+0x184>)
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f040 8093 	bne.w	800e5f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d01d      	beq.n	800e514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e4d8:	2208      	movs	r2, #8
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4413      	add	r3, r2
 800e4de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f003 0307 	and.w	r3, r3, #7
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d014      	beq.n	800e514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f023 0307 	bic.w	r3, r3, #7
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f003 0307 	and.w	r3, r3, #7
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00a      	beq.n	800e514 <pvPortMalloc+0x6c>
	__asm volatile
 800e4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	617b      	str	r3, [r7, #20]
}
 800e510:	bf00      	nop
 800e512:	e7fe      	b.n	800e512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d06e      	beq.n	800e5f8 <pvPortMalloc+0x150>
 800e51a:	4b45      	ldr	r3, [pc, #276]	; (800e630 <pvPortMalloc+0x188>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	429a      	cmp	r2, r3
 800e522:	d869      	bhi.n	800e5f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e524:	4b43      	ldr	r3, [pc, #268]	; (800e634 <pvPortMalloc+0x18c>)
 800e526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e528:	4b42      	ldr	r3, [pc, #264]	; (800e634 <pvPortMalloc+0x18c>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e52e:	e004      	b.n	800e53a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	429a      	cmp	r2, r3
 800e542:	d903      	bls.n	800e54c <pvPortMalloc+0xa4>
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d1f1      	bne.n	800e530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e54c:	4b36      	ldr	r3, [pc, #216]	; (800e628 <pvPortMalloc+0x180>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e552:	429a      	cmp	r2, r3
 800e554:	d050      	beq.n	800e5f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2208      	movs	r2, #8
 800e55c:	4413      	add	r3, r2
 800e55e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	6a3b      	ldr	r3, [r7, #32]
 800e566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	1ad2      	subs	r2, r2, r3
 800e570:	2308      	movs	r3, #8
 800e572:	005b      	lsls	r3, r3, #1
 800e574:	429a      	cmp	r2, r3
 800e576:	d91f      	bls.n	800e5b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4413      	add	r3, r2
 800e57e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	f003 0307 	and.w	r3, r3, #7
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00a      	beq.n	800e5a0 <pvPortMalloc+0xf8>
	__asm volatile
 800e58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	613b      	str	r3, [r7, #16]
}
 800e59c:	bf00      	nop
 800e59e:	e7fe      	b.n	800e59e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	685a      	ldr	r2, [r3, #4]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	1ad2      	subs	r2, r2, r3
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5b2:	69b8      	ldr	r0, [r7, #24]
 800e5b4:	f000 f908 	bl	800e7c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5b8:	4b1d      	ldr	r3, [pc, #116]	; (800e630 <pvPortMalloc+0x188>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	4a1b      	ldr	r2, [pc, #108]	; (800e630 <pvPortMalloc+0x188>)
 800e5c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5c6:	4b1a      	ldr	r3, [pc, #104]	; (800e630 <pvPortMalloc+0x188>)
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	4b1b      	ldr	r3, [pc, #108]	; (800e638 <pvPortMalloc+0x190>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d203      	bcs.n	800e5da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5d2:	4b17      	ldr	r3, [pc, #92]	; (800e630 <pvPortMalloc+0x188>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a18      	ldr	r2, [pc, #96]	; (800e638 <pvPortMalloc+0x190>)
 800e5d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	685a      	ldr	r2, [r3, #4]
 800e5de:	4b13      	ldr	r3, [pc, #76]	; (800e62c <pvPortMalloc+0x184>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e5ee:	4b13      	ldr	r3, [pc, #76]	; (800e63c <pvPortMalloc+0x194>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	4a11      	ldr	r2, [pc, #68]	; (800e63c <pvPortMalloc+0x194>)
 800e5f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5f8:	f7fe fbd8 	bl	800cdac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	f003 0307 	and.w	r3, r3, #7
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00a      	beq.n	800e61c <pvPortMalloc+0x174>
	__asm volatile
 800e606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60a:	f383 8811 	msr	BASEPRI, r3
 800e60e:	f3bf 8f6f 	isb	sy
 800e612:	f3bf 8f4f 	dsb	sy
 800e616:	60fb      	str	r3, [r7, #12]
}
 800e618:	bf00      	nop
 800e61a:	e7fe      	b.n	800e61a <pvPortMalloc+0x172>
	return pvReturn;
 800e61c:	69fb      	ldr	r3, [r7, #28]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3728      	adds	r7, #40	; 0x28
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	2000a20c 	.word	0x2000a20c
 800e62c:	2000a220 	.word	0x2000a220
 800e630:	2000a210 	.word	0x2000a210
 800e634:	2000a204 	.word	0x2000a204
 800e638:	2000a214 	.word	0x2000a214
 800e63c:	2000a218 	.word	0x2000a218

0800e640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d04d      	beq.n	800e6ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e652:	2308      	movs	r3, #8
 800e654:	425b      	negs	r3, r3
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	4413      	add	r3, r2
 800e65a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	685a      	ldr	r2, [r3, #4]
 800e664:	4b24      	ldr	r3, [pc, #144]	; (800e6f8 <vPortFree+0xb8>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4013      	ands	r3, r2
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10a      	bne.n	800e684 <vPortFree+0x44>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	60fb      	str	r3, [r7, #12]
}
 800e680:	bf00      	nop
 800e682:	e7fe      	b.n	800e682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00a      	beq.n	800e6a2 <vPortFree+0x62>
	__asm volatile
 800e68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e690:	f383 8811 	msr	BASEPRI, r3
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	f3bf 8f4f 	dsb	sy
 800e69c:	60bb      	str	r3, [r7, #8]
}
 800e69e:	bf00      	nop
 800e6a0:	e7fe      	b.n	800e6a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	685a      	ldr	r2, [r3, #4]
 800e6a6:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <vPortFree+0xb8>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d01e      	beq.n	800e6ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d11a      	bne.n	800e6ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	685a      	ldr	r2, [r3, #4]
 800e6bc:	4b0e      	ldr	r3, [pc, #56]	; (800e6f8 <vPortFree+0xb8>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	43db      	mvns	r3, r3
 800e6c2:	401a      	ands	r2, r3
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6c8:	f7fe fb62 	bl	800cd90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	685a      	ldr	r2, [r3, #4]
 800e6d0:	4b0a      	ldr	r3, [pc, #40]	; (800e6fc <vPortFree+0xbc>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	4a09      	ldr	r2, [pc, #36]	; (800e6fc <vPortFree+0xbc>)
 800e6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6da:	6938      	ldr	r0, [r7, #16]
 800e6dc:	f000 f874 	bl	800e7c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e6e0:	4b07      	ldr	r3, [pc, #28]	; (800e700 <vPortFree+0xc0>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	4a06      	ldr	r2, [pc, #24]	; (800e700 <vPortFree+0xc0>)
 800e6e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e6ea:	f7fe fb5f 	bl	800cdac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6ee:	bf00      	nop
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	2000a220 	.word	0x2000a220
 800e6fc:	2000a210 	.word	0x2000a210
 800e700:	2000a21c 	.word	0x2000a21c

0800e704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e70a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e70e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e710:	4b27      	ldr	r3, [pc, #156]	; (800e7b0 <prvHeapInit+0xac>)
 800e712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f003 0307 	and.w	r3, r3, #7
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00c      	beq.n	800e738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	3307      	adds	r3, #7
 800e722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f023 0307 	bic.w	r3, r3, #7
 800e72a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	4a1f      	ldr	r2, [pc, #124]	; (800e7b0 <prvHeapInit+0xac>)
 800e734:	4413      	add	r3, r2
 800e736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e73c:	4a1d      	ldr	r2, [pc, #116]	; (800e7b4 <prvHeapInit+0xb0>)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e742:	4b1c      	ldr	r3, [pc, #112]	; (800e7b4 <prvHeapInit+0xb0>)
 800e744:	2200      	movs	r2, #0
 800e746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	4413      	add	r3, r2
 800e74e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e750:	2208      	movs	r2, #8
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	1a9b      	subs	r3, r3, r2
 800e756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f023 0307 	bic.w	r3, r3, #7
 800e75e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	4a15      	ldr	r2, [pc, #84]	; (800e7b8 <prvHeapInit+0xb4>)
 800e764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e766:	4b14      	ldr	r3, [pc, #80]	; (800e7b8 <prvHeapInit+0xb4>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2200      	movs	r2, #0
 800e76c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e76e:	4b12      	ldr	r3, [pc, #72]	; (800e7b8 <prvHeapInit+0xb4>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2200      	movs	r2, #0
 800e774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	1ad2      	subs	r2, r2, r3
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e784:	4b0c      	ldr	r3, [pc, #48]	; (800e7b8 <prvHeapInit+0xb4>)
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	4a0a      	ldr	r2, [pc, #40]	; (800e7bc <prvHeapInit+0xb8>)
 800e792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	4a09      	ldr	r2, [pc, #36]	; (800e7c0 <prvHeapInit+0xbc>)
 800e79a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e79c:	4b09      	ldr	r3, [pc, #36]	; (800e7c4 <prvHeapInit+0xc0>)
 800e79e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7a2:	601a      	str	r2, [r3, #0]
}
 800e7a4:	bf00      	nop
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	20006604 	.word	0x20006604
 800e7b4:	2000a204 	.word	0x2000a204
 800e7b8:	2000a20c 	.word	0x2000a20c
 800e7bc:	2000a214 	.word	0x2000a214
 800e7c0:	2000a210 	.word	0x2000a210
 800e7c4:	2000a220 	.word	0x2000a220

0800e7c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7d0:	4b28      	ldr	r3, [pc, #160]	; (800e874 <prvInsertBlockIntoFreeList+0xac>)
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	e002      	b.n	800e7dc <prvInsertBlockIntoFreeList+0x14>
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d8f7      	bhi.n	800e7d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d108      	bne.n	800e80a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	685a      	ldr	r2, [r3, #4]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	441a      	add	r2, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	441a      	add	r2, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d118      	bne.n	800e850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	4b15      	ldr	r3, [pc, #84]	; (800e878 <prvInsertBlockIntoFreeList+0xb0>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	429a      	cmp	r2, r3
 800e828:	d00d      	beq.n	800e846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	685a      	ldr	r2, [r3, #4]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	441a      	add	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	601a      	str	r2, [r3, #0]
 800e844:	e008      	b.n	800e858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e846:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <prvInsertBlockIntoFreeList+0xb0>)
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	e003      	b.n	800e858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d002      	beq.n	800e866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e866:	bf00      	nop
 800e868:	3714      	adds	r7, #20
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	2000a204 	.word	0x2000a204
 800e878:	2000a20c 	.word	0x2000a20c

0800e87c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e886:	f007 fac5 	bl	8015e14 <sys_timeouts_sleeptime>
 800e88a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e892:	d10b      	bne.n	800e8ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e894:	4813      	ldr	r0, [pc, #76]	; (800e8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e896:	f00a f81c 	bl	80188d2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e89a:	2200      	movs	r2, #0
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f009 ffa4 	bl	80187ec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e8a4:	480f      	ldr	r0, [pc, #60]	; (800e8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e8a6:	f00a f805 	bl	80188b4 <sys_mutex_lock>
    return;
 800e8aa:	e018      	b.n	800e8de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d102      	bne.n	800e8b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e8b2:	f007 fa75 	bl	8015da0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e8b6:	e7e6      	b.n	800e886 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e8b8:	480a      	ldr	r0, [pc, #40]	; (800e8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e8ba:	f00a f80a 	bl	80188d2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e8be:	68fa      	ldr	r2, [r7, #12]
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f009 ff92 	bl	80187ec <sys_arch_mbox_fetch>
 800e8c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e8ca:	4806      	ldr	r0, [pc, #24]	; (800e8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e8cc:	f009 fff2 	bl	80188b4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d6:	d102      	bne.n	800e8de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e8d8:	f007 fa62 	bl	8015da0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e8dc:	e7d3      	b.n	800e886 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	2000a230 	.word	0x2000a230

0800e8e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e8f0:	4810      	ldr	r0, [pc, #64]	; (800e934 <tcpip_thread+0x4c>)
 800e8f2:	f009 ffdf 	bl	80188b4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e8f6:	4b10      	ldr	r3, [pc, #64]	; (800e938 <tcpip_thread+0x50>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d005      	beq.n	800e90a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e8fe:	4b0e      	ldr	r3, [pc, #56]	; (800e938 <tcpip_thread+0x50>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4a0e      	ldr	r2, [pc, #56]	; (800e93c <tcpip_thread+0x54>)
 800e904:	6812      	ldr	r2, [r2, #0]
 800e906:	4610      	mov	r0, r2
 800e908:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e90a:	f107 030c 	add.w	r3, r7, #12
 800e90e:	4619      	mov	r1, r3
 800e910:	480b      	ldr	r0, [pc, #44]	; (800e940 <tcpip_thread+0x58>)
 800e912:	f7ff ffb3 	bl	800e87c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e91c:	4b09      	ldr	r3, [pc, #36]	; (800e944 <tcpip_thread+0x5c>)
 800e91e:	2291      	movs	r2, #145	; 0x91
 800e920:	4909      	ldr	r1, [pc, #36]	; (800e948 <tcpip_thread+0x60>)
 800e922:	480a      	ldr	r0, [pc, #40]	; (800e94c <tcpip_thread+0x64>)
 800e924:	f00a fa16 	bl	8018d54 <iprintf>
      continue;
 800e928:	e003      	b.n	800e932 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f000 f80f 	bl	800e950 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e932:	e7ea      	b.n	800e90a <tcpip_thread+0x22>
 800e934:	2000a230 	.word	0x2000a230
 800e938:	2000a224 	.word	0x2000a224
 800e93c:	2000a228 	.word	0x2000a228
 800e940:	2000a22c 	.word	0x2000a22c
 800e944:	0801a308 	.word	0x0801a308
 800e948:	0801a338 	.word	0x0801a338
 800e94c:	0801a358 	.word	0x0801a358

0800e950 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	d026      	beq.n	800e9ae <tcpip_thread_handle_msg+0x5e>
 800e960:	2b02      	cmp	r3, #2
 800e962:	dc2b      	bgt.n	800e9bc <tcpip_thread_handle_msg+0x6c>
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <tcpip_thread_handle_msg+0x1e>
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d015      	beq.n	800e998 <tcpip_thread_handle_msg+0x48>
 800e96c:	e026      	b.n	800e9bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	6850      	ldr	r0, [r2, #4]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	6892      	ldr	r2, [r2, #8]
 800e97a:	4611      	mov	r1, r2
 800e97c:	4798      	blx	r3
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d004      	beq.n	800e98e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	4618      	mov	r0, r3
 800e98a:	f001 fd0b 	bl	80103a4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e98e:	6879      	ldr	r1, [r7, #4]
 800e990:	2009      	movs	r0, #9
 800e992:	f000 fe63 	bl	800f65c <memp_free>
      break;
 800e996:	e018      	b.n	800e9ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	6892      	ldr	r2, [r2, #8]
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e9a4:	6879      	ldr	r1, [r7, #4]
 800e9a6:	2008      	movs	r0, #8
 800e9a8:	f000 fe58 	bl	800f65c <memp_free>
      break;
 800e9ac:	e00d      	b.n	800e9ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	6892      	ldr	r2, [r2, #8]
 800e9b6:	4610      	mov	r0, r2
 800e9b8:	4798      	blx	r3
      break;
 800e9ba:	e006      	b.n	800e9ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <tcpip_thread_handle_msg+0x84>)
 800e9be:	22cf      	movs	r2, #207	; 0xcf
 800e9c0:	4905      	ldr	r1, [pc, #20]	; (800e9d8 <tcpip_thread_handle_msg+0x88>)
 800e9c2:	4806      	ldr	r0, [pc, #24]	; (800e9dc <tcpip_thread_handle_msg+0x8c>)
 800e9c4:	f00a f9c6 	bl	8018d54 <iprintf>
      break;
 800e9c8:	bf00      	nop
  }
}
 800e9ca:	bf00      	nop
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	0801a308 	.word	0x0801a308
 800e9d8:	0801a338 	.word	0x0801a338
 800e9dc:	0801a358 	.word	0x0801a358

0800e9e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b086      	sub	sp, #24
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e9ec:	481a      	ldr	r0, [pc, #104]	; (800ea58 <tcpip_inpkt+0x78>)
 800e9ee:	f009 ff2e 	bl	801884e <sys_mbox_valid>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d105      	bne.n	800ea04 <tcpip_inpkt+0x24>
 800e9f8:	4b18      	ldr	r3, [pc, #96]	; (800ea5c <tcpip_inpkt+0x7c>)
 800e9fa:	22fc      	movs	r2, #252	; 0xfc
 800e9fc:	4918      	ldr	r1, [pc, #96]	; (800ea60 <tcpip_inpkt+0x80>)
 800e9fe:	4819      	ldr	r0, [pc, #100]	; (800ea64 <tcpip_inpkt+0x84>)
 800ea00:	f00a f9a8 	bl	8018d54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ea04:	2009      	movs	r0, #9
 800ea06:	f000 fdb3 	bl	800f570 <memp_malloc>
 800ea0a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ea12:	f04f 33ff 	mov.w	r3, #4294967295
 800ea16:	e01a      	b.n	800ea4e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ea30:	6979      	ldr	r1, [r7, #20]
 800ea32:	4809      	ldr	r0, [pc, #36]	; (800ea58 <tcpip_inpkt+0x78>)
 800ea34:	f009 fec0 	bl	80187b8 <sys_mbox_trypost>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d006      	beq.n	800ea4c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ea3e:	6979      	ldr	r1, [r7, #20]
 800ea40:	2009      	movs	r0, #9
 800ea42:	f000 fe0b 	bl	800f65c <memp_free>
    return ERR_MEM;
 800ea46:	f04f 33ff 	mov.w	r3, #4294967295
 800ea4a:	e000      	b.n	800ea4e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ea4c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	2000a22c 	.word	0x2000a22c
 800ea5c:	0801a308 	.word	0x0801a308
 800ea60:	0801a380 	.word	0x0801a380
 800ea64:	0801a358 	.word	0x0801a358

0800ea68 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea78:	f003 0318 	and.w	r3, r3, #24
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d006      	beq.n	800ea8e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ea80:	4a08      	ldr	r2, [pc, #32]	; (800eaa4 <tcpip_input+0x3c>)
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7ff ffab 	bl	800e9e0 <tcpip_inpkt>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	e005      	b.n	800ea9a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ea8e:	4a06      	ldr	r2, [pc, #24]	; (800eaa8 <tcpip_input+0x40>)
 800ea90:	6839      	ldr	r1, [r7, #0]
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7ff ffa4 	bl	800e9e0 <tcpip_inpkt>
 800ea98:	4603      	mov	r3, r0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	080185d9 	.word	0x080185d9
 800eaa8:	080174e1 	.word	0x080174e1

0800eaac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800eab6:	4819      	ldr	r0, [pc, #100]	; (800eb1c <tcpip_try_callback+0x70>)
 800eab8:	f009 fec9 	bl	801884e <sys_mbox_valid>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <tcpip_try_callback+0x24>
 800eac2:	4b17      	ldr	r3, [pc, #92]	; (800eb20 <tcpip_try_callback+0x74>)
 800eac4:	f240 125d 	movw	r2, #349	; 0x15d
 800eac8:	4916      	ldr	r1, [pc, #88]	; (800eb24 <tcpip_try_callback+0x78>)
 800eaca:	4817      	ldr	r0, [pc, #92]	; (800eb28 <tcpip_try_callback+0x7c>)
 800eacc:	f00a f942 	bl	8018d54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ead0:	2008      	movs	r0, #8
 800ead2:	f000 fd4d 	bl	800f570 <memp_malloc>
 800ead6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d102      	bne.n	800eae4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800eade:	f04f 33ff 	mov.w	r3, #4294967295
 800eae2:	e017      	b.n	800eb14 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2201      	movs	r2, #1
 800eae8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800eaf6:	68f9      	ldr	r1, [r7, #12]
 800eaf8:	4808      	ldr	r0, [pc, #32]	; (800eb1c <tcpip_try_callback+0x70>)
 800eafa:	f009 fe5d 	bl	80187b8 <sys_mbox_trypost>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d006      	beq.n	800eb12 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800eb04:	68f9      	ldr	r1, [r7, #12]
 800eb06:	2008      	movs	r0, #8
 800eb08:	f000 fda8 	bl	800f65c <memp_free>
    return ERR_MEM;
 800eb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb10:	e000      	b.n	800eb14 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	2000a22c 	.word	0x2000a22c
 800eb20:	0801a308 	.word	0x0801a308
 800eb24:	0801a380 	.word	0x0801a380
 800eb28:	0801a358 	.word	0x0801a358

0800eb2c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af02      	add	r7, sp, #8
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  lwip_init();
 800eb36:	f000 f871 	bl	800ec1c <lwip_init>

  tcpip_init_done = initfunc;
 800eb3a:	4a17      	ldr	r2, [pc, #92]	; (800eb98 <tcpip_init+0x6c>)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800eb40:	4a16      	ldr	r2, [pc, #88]	; (800eb9c <tcpip_init+0x70>)
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800eb46:	2106      	movs	r1, #6
 800eb48:	4815      	ldr	r0, [pc, #84]	; (800eba0 <tcpip_init+0x74>)
 800eb4a:	f009 fe1b 	bl	8018784 <sys_mbox_new>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d006      	beq.n	800eb62 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800eb54:	4b13      	ldr	r3, [pc, #76]	; (800eba4 <tcpip_init+0x78>)
 800eb56:	f240 2261 	movw	r2, #609	; 0x261
 800eb5a:	4913      	ldr	r1, [pc, #76]	; (800eba8 <tcpip_init+0x7c>)
 800eb5c:	4813      	ldr	r0, [pc, #76]	; (800ebac <tcpip_init+0x80>)
 800eb5e:	f00a f8f9 	bl	8018d54 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eb62:	4813      	ldr	r0, [pc, #76]	; (800ebb0 <tcpip_init+0x84>)
 800eb64:	f009 fe90 	bl	8018888 <sys_mutex_new>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d006      	beq.n	800eb7c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800eb6e:	4b0d      	ldr	r3, [pc, #52]	; (800eba4 <tcpip_init+0x78>)
 800eb70:	f240 2265 	movw	r2, #613	; 0x265
 800eb74:	490f      	ldr	r1, [pc, #60]	; (800ebb4 <tcpip_init+0x88>)
 800eb76:	480d      	ldr	r0, [pc, #52]	; (800ebac <tcpip_init+0x80>)
 800eb78:	f00a f8ec 	bl	8018d54 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eb7c:	2318      	movs	r3, #24
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb84:	2200      	movs	r2, #0
 800eb86:	490c      	ldr	r1, [pc, #48]	; (800ebb8 <tcpip_init+0x8c>)
 800eb88:	480c      	ldr	r0, [pc, #48]	; (800ebbc <tcpip_init+0x90>)
 800eb8a:	f009 feaf 	bl	80188ec <sys_thread_new>
}
 800eb8e:	bf00      	nop
 800eb90:	3708      	adds	r7, #8
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	2000a224 	.word	0x2000a224
 800eb9c:	2000a228 	.word	0x2000a228
 800eba0:	2000a22c 	.word	0x2000a22c
 800eba4:	0801a308 	.word	0x0801a308
 800eba8:	0801a390 	.word	0x0801a390
 800ebac:	0801a358 	.word	0x0801a358
 800ebb0:	2000a230 	.word	0x2000a230
 800ebb4:	0801a3b4 	.word	0x0801a3b4
 800ebb8:	0800e8e9 	.word	0x0800e8e9
 800ebbc:	0801a3d8 	.word	0x0801a3d8

0800ebc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ebca:	88fb      	ldrh	r3, [r7, #6]
 800ebcc:	021b      	lsls	r3, r3, #8
 800ebce:	b21a      	sxth	r2, r3
 800ebd0:	88fb      	ldrh	r3, [r7, #6]
 800ebd2:	0a1b      	lsrs	r3, r3, #8
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	b21b      	sxth	r3, r3
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	b21b      	sxth	r3, r3
 800ebdc:	b29b      	uxth	r3, r3
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	370c      	adds	r7, #12
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr

0800ebea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ebea:	b480      	push	{r7}
 800ebec:	b083      	sub	sp, #12
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	061a      	lsls	r2, r3, #24
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	021b      	lsls	r3, r3, #8
 800ebfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ebfe:	431a      	orrs	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	0a1b      	lsrs	r3, r3, #8
 800ec04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec08:	431a      	orrs	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	0e1b      	lsrs	r3, r3, #24
 800ec0e:	4313      	orrs	r3, r2
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ec22:	2300      	movs	r3, #0
 800ec24:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ec26:	f009 fe23 	bl	8018870 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ec2a:	f000 f8d5 	bl	800edd8 <mem_init>
  memp_init();
 800ec2e:	f000 fc31 	bl	800f494 <memp_init>
  pbuf_init();
  netif_init();
 800ec32:	f000 fd3d 	bl	800f6b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ec36:	f007 f925 	bl	8015e84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ec3a:	f001 fe4d 	bl	80108d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ec3e:	f007 f867 	bl	8015d10 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ec42:	bf00      	nop
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	4603      	mov	r3, r0
 800ec54:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ec56:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <ptr_to_mem+0x20>)
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	88fb      	ldrh	r3, [r7, #6]
 800ec5c:	4413      	add	r3, r2
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	370c      	adds	r7, #12
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	2000a8a0 	.word	0x2000a8a0

0800ec70 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ec78:	4b05      	ldr	r3, [pc, #20]	; (800ec90 <mem_to_ptr+0x20>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	b29b      	uxth	r3, r3
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	370c      	adds	r7, #12
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	2000a8a0 	.word	0x2000a8a0

0800ec94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ec94:	b590      	push	{r4, r7, lr}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ec9c:	4b45      	ldr	r3, [pc, #276]	; (800edb4 <plug_holes+0x120>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d206      	bcs.n	800ecb4 <plug_holes+0x20>
 800eca6:	4b44      	ldr	r3, [pc, #272]	; (800edb8 <plug_holes+0x124>)
 800eca8:	f240 12df 	movw	r2, #479	; 0x1df
 800ecac:	4943      	ldr	r1, [pc, #268]	; (800edbc <plug_holes+0x128>)
 800ecae:	4844      	ldr	r0, [pc, #272]	; (800edc0 <plug_holes+0x12c>)
 800ecb0:	f00a f850 	bl	8018d54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ecb4:	4b43      	ldr	r3, [pc, #268]	; (800edc4 <plug_holes+0x130>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d306      	bcc.n	800eccc <plug_holes+0x38>
 800ecbe:	4b3e      	ldr	r3, [pc, #248]	; (800edb8 <plug_holes+0x124>)
 800ecc0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ecc4:	4940      	ldr	r1, [pc, #256]	; (800edc8 <plug_holes+0x134>)
 800ecc6:	483e      	ldr	r0, [pc, #248]	; (800edc0 <plug_holes+0x12c>)
 800ecc8:	f00a f844 	bl	8018d54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	791b      	ldrb	r3, [r3, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d006      	beq.n	800ece2 <plug_holes+0x4e>
 800ecd4:	4b38      	ldr	r3, [pc, #224]	; (800edb8 <plug_holes+0x124>)
 800ecd6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ecda:	493c      	ldr	r1, [pc, #240]	; (800edcc <plug_holes+0x138>)
 800ecdc:	4838      	ldr	r0, [pc, #224]	; (800edc0 <plug_holes+0x12c>)
 800ecde:	f00a f839 	bl	8018d54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	881b      	ldrh	r3, [r3, #0]
 800ece6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ecea:	d906      	bls.n	800ecfa <plug_holes+0x66>
 800ecec:	4b32      	ldr	r3, [pc, #200]	; (800edb8 <plug_holes+0x124>)
 800ecee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ecf2:	4937      	ldr	r1, [pc, #220]	; (800edd0 <plug_holes+0x13c>)
 800ecf4:	4832      	ldr	r0, [pc, #200]	; (800edc0 <plug_holes+0x12c>)
 800ecf6:	f00a f82d 	bl	8018d54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff ffa4 	bl	800ec4c <ptr_to_mem>
 800ed04:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d024      	beq.n	800ed58 <plug_holes+0xc4>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	791b      	ldrb	r3, [r3, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d120      	bne.n	800ed58 <plug_holes+0xc4>
 800ed16:	4b2b      	ldr	r3, [pc, #172]	; (800edc4 <plug_holes+0x130>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d01b      	beq.n	800ed58 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ed20:	4b2c      	ldr	r3, [pc, #176]	; (800edd4 <plug_holes+0x140>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d102      	bne.n	800ed30 <plug_holes+0x9c>
      lfree = mem;
 800ed2a:	4a2a      	ldr	r2, [pc, #168]	; (800edd4 <plug_holes+0x140>)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	881a      	ldrh	r2, [r3, #0]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	881b      	ldrh	r3, [r3, #0]
 800ed3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed40:	d00a      	beq.n	800ed58 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7ff ff80 	bl	800ec4c <ptr_to_mem>
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff ff8e 	bl	800ec70 <mem_to_ptr>
 800ed54:	4603      	mov	r3, r0
 800ed56:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	885b      	ldrh	r3, [r3, #2]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7ff ff75 	bl	800ec4c <ptr_to_mem>
 800ed62:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ed64:	68ba      	ldr	r2, [r7, #8]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d01f      	beq.n	800edac <plug_holes+0x118>
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	791b      	ldrb	r3, [r3, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d11b      	bne.n	800edac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ed74:	4b17      	ldr	r3, [pc, #92]	; (800edd4 <plug_holes+0x140>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d102      	bne.n	800ed84 <plug_holes+0xf0>
      lfree = pmem;
 800ed7e:	4a15      	ldr	r2, [pc, #84]	; (800edd4 <plug_holes+0x140>)
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	881a      	ldrh	r2, [r3, #0]
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed94:	d00a      	beq.n	800edac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	881b      	ldrh	r3, [r3, #0]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7ff ff56 	bl	800ec4c <ptr_to_mem>
 800eda0:	4604      	mov	r4, r0
 800eda2:	68b8      	ldr	r0, [r7, #8]
 800eda4:	f7ff ff64 	bl	800ec70 <mem_to_ptr>
 800eda8:	4603      	mov	r3, r0
 800edaa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800edac:	bf00      	nop
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd90      	pop	{r4, r7, pc}
 800edb4:	2000a8a0 	.word	0x2000a8a0
 800edb8:	0801a3e8 	.word	0x0801a3e8
 800edbc:	0801a418 	.word	0x0801a418
 800edc0:	0801a430 	.word	0x0801a430
 800edc4:	2000a8a4 	.word	0x2000a8a4
 800edc8:	0801a458 	.word	0x0801a458
 800edcc:	0801a474 	.word	0x0801a474
 800edd0:	0801a490 	.word	0x0801a490
 800edd4:	2000a8ac 	.word	0x2000a8ac

0800edd8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800edde:	4b1f      	ldr	r3, [pc, #124]	; (800ee5c <mem_init+0x84>)
 800ede0:	3303      	adds	r3, #3
 800ede2:	f023 0303 	bic.w	r3, r3, #3
 800ede6:	461a      	mov	r2, r3
 800ede8:	4b1d      	ldr	r3, [pc, #116]	; (800ee60 <mem_init+0x88>)
 800edea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800edec:	4b1c      	ldr	r3, [pc, #112]	; (800ee60 <mem_init+0x88>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800edf8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ee06:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ee0a:	f7ff ff1f 	bl	800ec4c <ptr_to_mem>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	4a14      	ldr	r2, [pc, #80]	; (800ee64 <mem_init+0x8c>)
 800ee12:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ee14:	4b13      	ldr	r3, [pc, #76]	; (800ee64 <mem_init+0x8c>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ee1c:	4b11      	ldr	r3, [pc, #68]	; (800ee64 <mem_init+0x8c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee24:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ee26:	4b0f      	ldr	r3, [pc, #60]	; (800ee64 <mem_init+0x8c>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee2e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ee30:	4b0b      	ldr	r3, [pc, #44]	; (800ee60 <mem_init+0x88>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a0c      	ldr	r2, [pc, #48]	; (800ee68 <mem_init+0x90>)
 800ee36:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ee38:	480c      	ldr	r0, [pc, #48]	; (800ee6c <mem_init+0x94>)
 800ee3a:	f009 fd25 	bl	8018888 <sys_mutex_new>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d006      	beq.n	800ee52 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ee44:	4b0a      	ldr	r3, [pc, #40]	; (800ee70 <mem_init+0x98>)
 800ee46:	f240 221f 	movw	r2, #543	; 0x21f
 800ee4a:	490a      	ldr	r1, [pc, #40]	; (800ee74 <mem_init+0x9c>)
 800ee4c:	480a      	ldr	r0, [pc, #40]	; (800ee78 <mem_init+0xa0>)
 800ee4e:	f009 ff81 	bl	8018d54 <iprintf>
  }
}
 800ee52:	bf00      	nop
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	2000a24c 	.word	0x2000a24c
 800ee60:	2000a8a0 	.word	0x2000a8a0
 800ee64:	2000a8a4 	.word	0x2000a8a4
 800ee68:	2000a8ac 	.word	0x2000a8ac
 800ee6c:	2000a8a8 	.word	0x2000a8a8
 800ee70:	0801a3e8 	.word	0x0801a3e8
 800ee74:	0801a4bc 	.word	0x0801a4bc
 800ee78:	0801a430 	.word	0x0801a430

0800ee7c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff fef3 	bl	800ec70 <mem_to_ptr>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	881b      	ldrh	r3, [r3, #0]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff feda 	bl	800ec4c <ptr_to_mem>
 800ee98:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	885b      	ldrh	r3, [r3, #2]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7ff fed4 	bl	800ec4c <ptr_to_mem>
 800eea4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eeae:	d818      	bhi.n	800eee2 <mem_link_valid+0x66>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	885b      	ldrh	r3, [r3, #2]
 800eeb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eeb8:	d813      	bhi.n	800eee2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800eebe:	8afa      	ldrh	r2, [r7, #22]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d004      	beq.n	800eece <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	881b      	ldrh	r3, [r3, #0]
 800eec8:	8afa      	ldrh	r2, [r7, #22]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d109      	bne.n	800eee2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800eece:	4b08      	ldr	r3, [pc, #32]	; (800eef0 <mem_link_valid+0x74>)
 800eed0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eed2:	693a      	ldr	r2, [r7, #16]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d006      	beq.n	800eee6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	885b      	ldrh	r3, [r3, #2]
 800eedc:	8afa      	ldrh	r2, [r7, #22]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d001      	beq.n	800eee6 <mem_link_valid+0x6a>
    return 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	e000      	b.n	800eee8 <mem_link_valid+0x6c>
  }
  return 1;
 800eee6:	2301      	movs	r3, #1
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3718      	adds	r7, #24
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	2000a8a4 	.word	0x2000a8a4

0800eef4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d070      	beq.n	800efe4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f003 0303 	and.w	r3, r3, #3
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00d      	beq.n	800ef28 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ef0c:	4b37      	ldr	r3, [pc, #220]	; (800efec <mem_free+0xf8>)
 800ef0e:	f240 2273 	movw	r2, #627	; 0x273
 800ef12:	4937      	ldr	r1, [pc, #220]	; (800eff0 <mem_free+0xfc>)
 800ef14:	4837      	ldr	r0, [pc, #220]	; (800eff4 <mem_free+0x100>)
 800ef16:	f009 ff1d 	bl	8018d54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef1a:	f009 fd07 	bl	801892c <sys_arch_protect>
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f009 fd11 	bl	8018948 <sys_arch_unprotect>
    return;
 800ef26:	e05e      	b.n	800efe6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3b08      	subs	r3, #8
 800ef2c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ef2e:	4b32      	ldr	r3, [pc, #200]	; (800eff8 <mem_free+0x104>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d306      	bcc.n	800ef46 <mem_free+0x52>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f103 020c 	add.w	r2, r3, #12
 800ef3e:	4b2f      	ldr	r3, [pc, #188]	; (800effc <mem_free+0x108>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d90d      	bls.n	800ef62 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ef46:	4b29      	ldr	r3, [pc, #164]	; (800efec <mem_free+0xf8>)
 800ef48:	f240 227f 	movw	r2, #639	; 0x27f
 800ef4c:	492c      	ldr	r1, [pc, #176]	; (800f000 <mem_free+0x10c>)
 800ef4e:	4829      	ldr	r0, [pc, #164]	; (800eff4 <mem_free+0x100>)
 800ef50:	f009 ff00 	bl	8018d54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef54:	f009 fcea 	bl	801892c <sys_arch_protect>
 800ef58:	6138      	str	r0, [r7, #16]
 800ef5a:	6938      	ldr	r0, [r7, #16]
 800ef5c:	f009 fcf4 	bl	8018948 <sys_arch_unprotect>
    return;
 800ef60:	e041      	b.n	800efe6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ef62:	4828      	ldr	r0, [pc, #160]	; (800f004 <mem_free+0x110>)
 800ef64:	f009 fca6 	bl	80188b4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	791b      	ldrb	r3, [r3, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d110      	bne.n	800ef92 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ef70:	4b1e      	ldr	r3, [pc, #120]	; (800efec <mem_free+0xf8>)
 800ef72:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ef76:	4924      	ldr	r1, [pc, #144]	; (800f008 <mem_free+0x114>)
 800ef78:	481e      	ldr	r0, [pc, #120]	; (800eff4 <mem_free+0x100>)
 800ef7a:	f009 feeb 	bl	8018d54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ef7e:	4821      	ldr	r0, [pc, #132]	; (800f004 <mem_free+0x110>)
 800ef80:	f009 fca7 	bl	80188d2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef84:	f009 fcd2 	bl	801892c <sys_arch_protect>
 800ef88:	6178      	str	r0, [r7, #20]
 800ef8a:	6978      	ldr	r0, [r7, #20]
 800ef8c:	f009 fcdc 	bl	8018948 <sys_arch_unprotect>
    return;
 800ef90:	e029      	b.n	800efe6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ef92:	69f8      	ldr	r0, [r7, #28]
 800ef94:	f7ff ff72 	bl	800ee7c <mem_link_valid>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d110      	bne.n	800efc0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ef9e:	4b13      	ldr	r3, [pc, #76]	; (800efec <mem_free+0xf8>)
 800efa0:	f240 2295 	movw	r2, #661	; 0x295
 800efa4:	4919      	ldr	r1, [pc, #100]	; (800f00c <mem_free+0x118>)
 800efa6:	4813      	ldr	r0, [pc, #76]	; (800eff4 <mem_free+0x100>)
 800efa8:	f009 fed4 	bl	8018d54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800efac:	4815      	ldr	r0, [pc, #84]	; (800f004 <mem_free+0x110>)
 800efae:	f009 fc90 	bl	80188d2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800efb2:	f009 fcbb 	bl	801892c <sys_arch_protect>
 800efb6:	61b8      	str	r0, [r7, #24]
 800efb8:	69b8      	ldr	r0, [r7, #24]
 800efba:	f009 fcc5 	bl	8018948 <sys_arch_unprotect>
    return;
 800efbe:	e012      	b.n	800efe6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	2200      	movs	r2, #0
 800efc4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800efc6:	4b12      	ldr	r3, [pc, #72]	; (800f010 <mem_free+0x11c>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	69fa      	ldr	r2, [r7, #28]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d202      	bcs.n	800efd6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800efd0:	4a0f      	ldr	r2, [pc, #60]	; (800f010 <mem_free+0x11c>)
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800efd6:	69f8      	ldr	r0, [r7, #28]
 800efd8:	f7ff fe5c 	bl	800ec94 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800efdc:	4809      	ldr	r0, [pc, #36]	; (800f004 <mem_free+0x110>)
 800efde:	f009 fc78 	bl	80188d2 <sys_mutex_unlock>
 800efe2:	e000      	b.n	800efe6 <mem_free+0xf2>
    return;
 800efe4:	bf00      	nop
}
 800efe6:	3720      	adds	r7, #32
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	0801a3e8 	.word	0x0801a3e8
 800eff0:	0801a4d8 	.word	0x0801a4d8
 800eff4:	0801a430 	.word	0x0801a430
 800eff8:	2000a8a0 	.word	0x2000a8a0
 800effc:	2000a8a4 	.word	0x2000a8a4
 800f000:	0801a4fc 	.word	0x0801a4fc
 800f004:	2000a8a8 	.word	0x2000a8a8
 800f008:	0801a518 	.word	0x0801a518
 800f00c:	0801a540 	.word	0x0801a540
 800f010:	2000a8ac 	.word	0x2000a8ac

0800f014 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b088      	sub	sp, #32
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	460b      	mov	r3, r1
 800f01e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f020:	887b      	ldrh	r3, [r7, #2]
 800f022:	3303      	adds	r3, #3
 800f024:	b29b      	uxth	r3, r3
 800f026:	f023 0303 	bic.w	r3, r3, #3
 800f02a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f02c:	8bfb      	ldrh	r3, [r7, #30]
 800f02e:	2b0b      	cmp	r3, #11
 800f030:	d801      	bhi.n	800f036 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f032:	230c      	movs	r3, #12
 800f034:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f036:	8bfb      	ldrh	r3, [r7, #30]
 800f038:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f03c:	d803      	bhi.n	800f046 <mem_trim+0x32>
 800f03e:	8bfa      	ldrh	r2, [r7, #30]
 800f040:	887b      	ldrh	r3, [r7, #2]
 800f042:	429a      	cmp	r2, r3
 800f044:	d201      	bcs.n	800f04a <mem_trim+0x36>
    return NULL;
 800f046:	2300      	movs	r3, #0
 800f048:	e0d8      	b.n	800f1fc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f04a:	4b6e      	ldr	r3, [pc, #440]	; (800f204 <mem_trim+0x1f0>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	429a      	cmp	r2, r3
 800f052:	d304      	bcc.n	800f05e <mem_trim+0x4a>
 800f054:	4b6c      	ldr	r3, [pc, #432]	; (800f208 <mem_trim+0x1f4>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d306      	bcc.n	800f06c <mem_trim+0x58>
 800f05e:	4b6b      	ldr	r3, [pc, #428]	; (800f20c <mem_trim+0x1f8>)
 800f060:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f064:	496a      	ldr	r1, [pc, #424]	; (800f210 <mem_trim+0x1fc>)
 800f066:	486b      	ldr	r0, [pc, #428]	; (800f214 <mem_trim+0x200>)
 800f068:	f009 fe74 	bl	8018d54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f06c:	4b65      	ldr	r3, [pc, #404]	; (800f204 <mem_trim+0x1f0>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	429a      	cmp	r2, r3
 800f074:	d304      	bcc.n	800f080 <mem_trim+0x6c>
 800f076:	4b64      	ldr	r3, [pc, #400]	; (800f208 <mem_trim+0x1f4>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d307      	bcc.n	800f090 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f080:	f009 fc54 	bl	801892c <sys_arch_protect>
 800f084:	60b8      	str	r0, [r7, #8]
 800f086:	68b8      	ldr	r0, [r7, #8]
 800f088:	f009 fc5e 	bl	8018948 <sys_arch_unprotect>
    return rmem;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	e0b5      	b.n	800f1fc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3b08      	subs	r3, #8
 800f094:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f096:	69b8      	ldr	r0, [r7, #24]
 800f098:	f7ff fdea 	bl	800ec70 <mem_to_ptr>
 800f09c:	4603      	mov	r3, r0
 800f09e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	881a      	ldrh	r2, [r3, #0]
 800f0a4:	8afb      	ldrh	r3, [r7, #22]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	3b08      	subs	r3, #8
 800f0ac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f0ae:	8bfa      	ldrh	r2, [r7, #30]
 800f0b0:	8abb      	ldrh	r3, [r7, #20]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d906      	bls.n	800f0c4 <mem_trim+0xb0>
 800f0b6:	4b55      	ldr	r3, [pc, #340]	; (800f20c <mem_trim+0x1f8>)
 800f0b8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f0bc:	4956      	ldr	r1, [pc, #344]	; (800f218 <mem_trim+0x204>)
 800f0be:	4855      	ldr	r0, [pc, #340]	; (800f214 <mem_trim+0x200>)
 800f0c0:	f009 fe48 	bl	8018d54 <iprintf>
  if (newsize > size) {
 800f0c4:	8bfa      	ldrh	r2, [r7, #30]
 800f0c6:	8abb      	ldrh	r3, [r7, #20]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d901      	bls.n	800f0d0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e095      	b.n	800f1fc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f0d0:	8bfa      	ldrh	r2, [r7, #30]
 800f0d2:	8abb      	ldrh	r3, [r7, #20]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d101      	bne.n	800f0dc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	e08f      	b.n	800f1fc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f0dc:	484f      	ldr	r0, [pc, #316]	; (800f21c <mem_trim+0x208>)
 800f0de:	f009 fbe9 	bl	80188b4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7ff fdb0 	bl	800ec4c <ptr_to_mem>
 800f0ec:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	791b      	ldrb	r3, [r3, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d13f      	bne.n	800f176 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	881b      	ldrh	r3, [r3, #0]
 800f0fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0fe:	d106      	bne.n	800f10e <mem_trim+0xfa>
 800f100:	4b42      	ldr	r3, [pc, #264]	; (800f20c <mem_trim+0x1f8>)
 800f102:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f106:	4946      	ldr	r1, [pc, #280]	; (800f220 <mem_trim+0x20c>)
 800f108:	4842      	ldr	r0, [pc, #264]	; (800f214 <mem_trim+0x200>)
 800f10a:	f009 fe23 	bl	8018d54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	881b      	ldrh	r3, [r3, #0]
 800f112:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f114:	8afa      	ldrh	r2, [r7, #22]
 800f116:	8bfb      	ldrh	r3, [r7, #30]
 800f118:	4413      	add	r3, r2
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	3308      	adds	r3, #8
 800f11e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f120:	4b40      	ldr	r3, [pc, #256]	; (800f224 <mem_trim+0x210>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	429a      	cmp	r2, r3
 800f128:	d106      	bne.n	800f138 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f12a:	89fb      	ldrh	r3, [r7, #14]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7ff fd8d 	bl	800ec4c <ptr_to_mem>
 800f132:	4603      	mov	r3, r0
 800f134:	4a3b      	ldr	r2, [pc, #236]	; (800f224 <mem_trim+0x210>)
 800f136:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7ff fd86 	bl	800ec4c <ptr_to_mem>
 800f140:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	2200      	movs	r2, #0
 800f146:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	89ba      	ldrh	r2, [r7, #12]
 800f14c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	8afa      	ldrh	r2, [r7, #22]
 800f152:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	89fa      	ldrh	r2, [r7, #14]
 800f158:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f162:	d047      	beq.n	800f1f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	881b      	ldrh	r3, [r3, #0]
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff fd6f 	bl	800ec4c <ptr_to_mem>
 800f16e:	4602      	mov	r2, r0
 800f170:	89fb      	ldrh	r3, [r7, #14]
 800f172:	8053      	strh	r3, [r2, #2]
 800f174:	e03e      	b.n	800f1f4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f176:	8bfb      	ldrh	r3, [r7, #30]
 800f178:	f103 0214 	add.w	r2, r3, #20
 800f17c:	8abb      	ldrh	r3, [r7, #20]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d838      	bhi.n	800f1f4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f182:	8afa      	ldrh	r2, [r7, #22]
 800f184:	8bfb      	ldrh	r3, [r7, #30]
 800f186:	4413      	add	r3, r2
 800f188:	b29b      	uxth	r3, r3
 800f18a:	3308      	adds	r3, #8
 800f18c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	881b      	ldrh	r3, [r3, #0]
 800f192:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f196:	d106      	bne.n	800f1a6 <mem_trim+0x192>
 800f198:	4b1c      	ldr	r3, [pc, #112]	; (800f20c <mem_trim+0x1f8>)
 800f19a:	f240 3216 	movw	r2, #790	; 0x316
 800f19e:	4920      	ldr	r1, [pc, #128]	; (800f220 <mem_trim+0x20c>)
 800f1a0:	481c      	ldr	r0, [pc, #112]	; (800f214 <mem_trim+0x200>)
 800f1a2:	f009 fdd7 	bl	8018d54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f1a6:	89fb      	ldrh	r3, [r7, #14]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff fd4f 	bl	800ec4c <ptr_to_mem>
 800f1ae:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f1b0:	4b1c      	ldr	r3, [pc, #112]	; (800f224 <mem_trim+0x210>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	693a      	ldr	r2, [r7, #16]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d202      	bcs.n	800f1c0 <mem_trim+0x1ac>
      lfree = mem2;
 800f1ba:	4a1a      	ldr	r2, [pc, #104]	; (800f224 <mem_trim+0x210>)
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	881a      	ldrh	r2, [r3, #0]
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	8afa      	ldrh	r2, [r7, #22]
 800f1d2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	89fa      	ldrh	r2, [r7, #14]
 800f1d8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1e2:	d007      	beq.n	800f1f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	881b      	ldrh	r3, [r3, #0]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7ff fd2f 	bl	800ec4c <ptr_to_mem>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	89fb      	ldrh	r3, [r7, #14]
 800f1f2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f1f4:	4809      	ldr	r0, [pc, #36]	; (800f21c <mem_trim+0x208>)
 800f1f6:	f009 fb6c 	bl	80188d2 <sys_mutex_unlock>
  return rmem;
 800f1fa:	687b      	ldr	r3, [r7, #4]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3720      	adds	r7, #32
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	2000a8a0 	.word	0x2000a8a0
 800f208:	2000a8a4 	.word	0x2000a8a4
 800f20c:	0801a3e8 	.word	0x0801a3e8
 800f210:	0801a574 	.word	0x0801a574
 800f214:	0801a430 	.word	0x0801a430
 800f218:	0801a58c 	.word	0x0801a58c
 800f21c:	2000a8a8 	.word	0x2000a8a8
 800f220:	0801a5ac 	.word	0x0801a5ac
 800f224:	2000a8ac 	.word	0x2000a8ac

0800f228 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b088      	sub	sp, #32
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	4603      	mov	r3, r0
 800f230:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f232:	88fb      	ldrh	r3, [r7, #6]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d101      	bne.n	800f23c <mem_malloc+0x14>
    return NULL;
 800f238:	2300      	movs	r3, #0
 800f23a:	e0e2      	b.n	800f402 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f23c:	88fb      	ldrh	r3, [r7, #6]
 800f23e:	3303      	adds	r3, #3
 800f240:	b29b      	uxth	r3, r3
 800f242:	f023 0303 	bic.w	r3, r3, #3
 800f246:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f248:	8bbb      	ldrh	r3, [r7, #28]
 800f24a:	2b0b      	cmp	r3, #11
 800f24c:	d801      	bhi.n	800f252 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f24e:	230c      	movs	r3, #12
 800f250:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f252:	8bbb      	ldrh	r3, [r7, #28]
 800f254:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f258:	d803      	bhi.n	800f262 <mem_malloc+0x3a>
 800f25a:	8bba      	ldrh	r2, [r7, #28]
 800f25c:	88fb      	ldrh	r3, [r7, #6]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d201      	bcs.n	800f266 <mem_malloc+0x3e>
    return NULL;
 800f262:	2300      	movs	r3, #0
 800f264:	e0cd      	b.n	800f402 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f266:	4869      	ldr	r0, [pc, #420]	; (800f40c <mem_malloc+0x1e4>)
 800f268:	f009 fb24 	bl	80188b4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f26c:	4b68      	ldr	r3, [pc, #416]	; (800f410 <mem_malloc+0x1e8>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff fcfd 	bl	800ec70 <mem_to_ptr>
 800f276:	4603      	mov	r3, r0
 800f278:	83fb      	strh	r3, [r7, #30]
 800f27a:	e0b7      	b.n	800f3ec <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f27c:	8bfb      	ldrh	r3, [r7, #30]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff fce4 	bl	800ec4c <ptr_to_mem>
 800f284:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	791b      	ldrb	r3, [r3, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f040 80a7 	bne.w	800f3de <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	461a      	mov	r2, r3
 800f296:	8bfb      	ldrh	r3, [r7, #30]
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	f1a3 0208 	sub.w	r2, r3, #8
 800f29e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	f0c0 809c 	bcc.w	800f3de <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	881b      	ldrh	r3, [r3, #0]
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	8bfb      	ldrh	r3, [r7, #30]
 800f2ae:	1ad3      	subs	r3, r2, r3
 800f2b0:	f1a3 0208 	sub.w	r2, r3, #8
 800f2b4:	8bbb      	ldrh	r3, [r7, #28]
 800f2b6:	3314      	adds	r3, #20
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d333      	bcc.n	800f324 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f2bc:	8bfa      	ldrh	r2, [r7, #30]
 800f2be:	8bbb      	ldrh	r3, [r7, #28]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	3308      	adds	r3, #8
 800f2c6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f2c8:	8a7b      	ldrh	r3, [r7, #18]
 800f2ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2ce:	d106      	bne.n	800f2de <mem_malloc+0xb6>
 800f2d0:	4b50      	ldr	r3, [pc, #320]	; (800f414 <mem_malloc+0x1ec>)
 800f2d2:	f240 3287 	movw	r2, #903	; 0x387
 800f2d6:	4950      	ldr	r1, [pc, #320]	; (800f418 <mem_malloc+0x1f0>)
 800f2d8:	4850      	ldr	r0, [pc, #320]	; (800f41c <mem_malloc+0x1f4>)
 800f2da:	f009 fd3b 	bl	8018d54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f2de:	8a7b      	ldrh	r3, [r7, #18]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7ff fcb3 	bl	800ec4c <ptr_to_mem>
 800f2e6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	881a      	ldrh	r2, [r3, #0]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	8bfa      	ldrh	r2, [r7, #30]
 800f2fa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	8a7a      	ldrh	r2, [r7, #18]
 800f300:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	2201      	movs	r2, #1
 800f306:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f310:	d00b      	beq.n	800f32a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	881b      	ldrh	r3, [r3, #0]
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fc98 	bl	800ec4c <ptr_to_mem>
 800f31c:	4602      	mov	r2, r0
 800f31e:	8a7b      	ldrh	r3, [r7, #18]
 800f320:	8053      	strh	r3, [r2, #2]
 800f322:	e002      	b.n	800f32a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2201      	movs	r2, #1
 800f328:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f32a:	4b39      	ldr	r3, [pc, #228]	; (800f410 <mem_malloc+0x1e8>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	697a      	ldr	r2, [r7, #20]
 800f330:	429a      	cmp	r2, r3
 800f332:	d127      	bne.n	800f384 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f334:	4b36      	ldr	r3, [pc, #216]	; (800f410 <mem_malloc+0x1e8>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f33a:	e005      	b.n	800f348 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	881b      	ldrh	r3, [r3, #0]
 800f340:	4618      	mov	r0, r3
 800f342:	f7ff fc83 	bl	800ec4c <ptr_to_mem>
 800f346:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	791b      	ldrb	r3, [r3, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d004      	beq.n	800f35a <mem_malloc+0x132>
 800f350:	4b33      	ldr	r3, [pc, #204]	; (800f420 <mem_malloc+0x1f8>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	69ba      	ldr	r2, [r7, #24]
 800f356:	429a      	cmp	r2, r3
 800f358:	d1f0      	bne.n	800f33c <mem_malloc+0x114>
          }
          lfree = cur;
 800f35a:	4a2d      	ldr	r2, [pc, #180]	; (800f410 <mem_malloc+0x1e8>)
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f360:	4b2b      	ldr	r3, [pc, #172]	; (800f410 <mem_malloc+0x1e8>)
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	4b2e      	ldr	r3, [pc, #184]	; (800f420 <mem_malloc+0x1f8>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d00b      	beq.n	800f384 <mem_malloc+0x15c>
 800f36c:	4b28      	ldr	r3, [pc, #160]	; (800f410 <mem_malloc+0x1e8>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	791b      	ldrb	r3, [r3, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d006      	beq.n	800f384 <mem_malloc+0x15c>
 800f376:	4b27      	ldr	r3, [pc, #156]	; (800f414 <mem_malloc+0x1ec>)
 800f378:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f37c:	4929      	ldr	r1, [pc, #164]	; (800f424 <mem_malloc+0x1fc>)
 800f37e:	4827      	ldr	r0, [pc, #156]	; (800f41c <mem_malloc+0x1f4>)
 800f380:	f009 fce8 	bl	8018d54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f384:	4821      	ldr	r0, [pc, #132]	; (800f40c <mem_malloc+0x1e4>)
 800f386:	f009 faa4 	bl	80188d2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f38a:	8bba      	ldrh	r2, [r7, #28]
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	4413      	add	r3, r2
 800f390:	3308      	adds	r3, #8
 800f392:	4a23      	ldr	r2, [pc, #140]	; (800f420 <mem_malloc+0x1f8>)
 800f394:	6812      	ldr	r2, [r2, #0]
 800f396:	4293      	cmp	r3, r2
 800f398:	d906      	bls.n	800f3a8 <mem_malloc+0x180>
 800f39a:	4b1e      	ldr	r3, [pc, #120]	; (800f414 <mem_malloc+0x1ec>)
 800f39c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f3a0:	4921      	ldr	r1, [pc, #132]	; (800f428 <mem_malloc+0x200>)
 800f3a2:	481e      	ldr	r0, [pc, #120]	; (800f41c <mem_malloc+0x1f4>)
 800f3a4:	f009 fcd6 	bl	8018d54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	f003 0303 	and.w	r3, r3, #3
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d006      	beq.n	800f3c0 <mem_malloc+0x198>
 800f3b2:	4b18      	ldr	r3, [pc, #96]	; (800f414 <mem_malloc+0x1ec>)
 800f3b4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f3b8:	491c      	ldr	r1, [pc, #112]	; (800f42c <mem_malloc+0x204>)
 800f3ba:	4818      	ldr	r0, [pc, #96]	; (800f41c <mem_malloc+0x1f4>)
 800f3bc:	f009 fcca 	bl	8018d54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f003 0303 	and.w	r3, r3, #3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d006      	beq.n	800f3d8 <mem_malloc+0x1b0>
 800f3ca:	4b12      	ldr	r3, [pc, #72]	; (800f414 <mem_malloc+0x1ec>)
 800f3cc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f3d0:	4917      	ldr	r1, [pc, #92]	; (800f430 <mem_malloc+0x208>)
 800f3d2:	4812      	ldr	r0, [pc, #72]	; (800f41c <mem_malloc+0x1f4>)
 800f3d4:	f009 fcbe 	bl	8018d54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	3308      	adds	r3, #8
 800f3dc:	e011      	b.n	800f402 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f3de:	8bfb      	ldrh	r3, [r7, #30]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff fc33 	bl	800ec4c <ptr_to_mem>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f3ec:	8bfa      	ldrh	r2, [r7, #30]
 800f3ee:	8bbb      	ldrh	r3, [r7, #28]
 800f3f0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	f4ff af41 	bcc.w	800f27c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f3fa:	4804      	ldr	r0, [pc, #16]	; (800f40c <mem_malloc+0x1e4>)
 800f3fc:	f009 fa69 	bl	80188d2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3720      	adds	r7, #32
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	2000a8a8 	.word	0x2000a8a8
 800f410:	2000a8ac 	.word	0x2000a8ac
 800f414:	0801a3e8 	.word	0x0801a3e8
 800f418:	0801a5ac 	.word	0x0801a5ac
 800f41c:	0801a430 	.word	0x0801a430
 800f420:	2000a8a4 	.word	0x2000a8a4
 800f424:	0801a5c0 	.word	0x0801a5c0
 800f428:	0801a5dc 	.word	0x0801a5dc
 800f42c:	0801a60c 	.word	0x0801a60c
 800f430:	0801a63c 	.word	0x0801a63c

0800f434 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f434:	b480      	push	{r7}
 800f436:	b085      	sub	sp, #20
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	2200      	movs	r2, #0
 800f442:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	3303      	adds	r3, #3
 800f44a:	f023 0303 	bic.w	r3, r3, #3
 800f44e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f450:	2300      	movs	r3, #0
 800f452:	60fb      	str	r3, [r7, #12]
 800f454:	e011      	b.n	800f47a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	68ba      	ldr	r2, [r7, #8]
 800f466:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	461a      	mov	r2, r3
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	4413      	add	r3, r2
 800f472:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	885b      	ldrh	r3, [r3, #2]
 800f47e:	461a      	mov	r2, r3
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	4293      	cmp	r3, r2
 800f484:	dbe7      	blt.n	800f456 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f486:	bf00      	nop
 800f488:	bf00      	nop
 800f48a:	3714      	adds	r7, #20
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f49a:	2300      	movs	r3, #0
 800f49c:	80fb      	strh	r3, [r7, #6]
 800f49e:	e009      	b.n	800f4b4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f4a0:	88fb      	ldrh	r3, [r7, #6]
 800f4a2:	4a08      	ldr	r2, [pc, #32]	; (800f4c4 <memp_init+0x30>)
 800f4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7ff ffc3 	bl	800f434 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f4ae:	88fb      	ldrh	r3, [r7, #6]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	80fb      	strh	r3, [r7, #6]
 800f4b4:	88fb      	ldrh	r3, [r7, #6]
 800f4b6:	2b0c      	cmp	r3, #12
 800f4b8:	d9f2      	bls.n	800f4a0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f4ba:	bf00      	nop
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	0801cef0 	.word	0x0801cef0

0800f4c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f4d0:	f009 fa2c 	bl	801892c <sys_arch_protect>
 800f4d4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	689b      	ldr	r3, [r3, #8]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d015      	beq.n	800f510 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	6812      	ldr	r2, [r2, #0]
 800f4ec:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	f003 0303 	and.w	r3, r3, #3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d006      	beq.n	800f506 <do_memp_malloc_pool+0x3e>
 800f4f8:	4b09      	ldr	r3, [pc, #36]	; (800f520 <do_memp_malloc_pool+0x58>)
 800f4fa:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f4fe:	4909      	ldr	r1, [pc, #36]	; (800f524 <do_memp_malloc_pool+0x5c>)
 800f500:	4809      	ldr	r0, [pc, #36]	; (800f528 <do_memp_malloc_pool+0x60>)
 800f502:	f009 fc27 	bl	8018d54 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f009 fa1e 	bl	8018948 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	e003      	b.n	800f518 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f009 fa19 	bl	8018948 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	0801a660 	.word	0x0801a660
 800f524:	0801a690 	.word	0x0801a690
 800f528:	0801a6b4 	.word	0x0801a6b4

0800f52c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d106      	bne.n	800f548 <memp_malloc_pool+0x1c>
 800f53a:	4b0a      	ldr	r3, [pc, #40]	; (800f564 <memp_malloc_pool+0x38>)
 800f53c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f540:	4909      	ldr	r1, [pc, #36]	; (800f568 <memp_malloc_pool+0x3c>)
 800f542:	480a      	ldr	r0, [pc, #40]	; (800f56c <memp_malloc_pool+0x40>)
 800f544:	f009 fc06 	bl	8018d54 <iprintf>
  if (desc == NULL) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <memp_malloc_pool+0x26>
    return NULL;
 800f54e:	2300      	movs	r3, #0
 800f550:	e003      	b.n	800f55a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7ff ffb8 	bl	800f4c8 <do_memp_malloc_pool>
 800f558:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	0801a660 	.word	0x0801a660
 800f568:	0801a6dc 	.word	0x0801a6dc
 800f56c:	0801a6b4 	.word	0x0801a6b4

0800f570 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	4603      	mov	r3, r0
 800f578:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f57a:	79fb      	ldrb	r3, [r7, #7]
 800f57c:	2b0c      	cmp	r3, #12
 800f57e:	d908      	bls.n	800f592 <memp_malloc+0x22>
 800f580:	4b0a      	ldr	r3, [pc, #40]	; (800f5ac <memp_malloc+0x3c>)
 800f582:	f240 1257 	movw	r2, #343	; 0x157
 800f586:	490a      	ldr	r1, [pc, #40]	; (800f5b0 <memp_malloc+0x40>)
 800f588:	480a      	ldr	r0, [pc, #40]	; (800f5b4 <memp_malloc+0x44>)
 800f58a:	f009 fbe3 	bl	8018d54 <iprintf>
 800f58e:	2300      	movs	r3, #0
 800f590:	e008      	b.n	800f5a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f592:	79fb      	ldrb	r3, [r7, #7]
 800f594:	4a08      	ldr	r2, [pc, #32]	; (800f5b8 <memp_malloc+0x48>)
 800f596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff ff94 	bl	800f4c8 <do_memp_malloc_pool>
 800f5a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	0801a660 	.word	0x0801a660
 800f5b0:	0801a6f0 	.word	0x0801a6f0
 800f5b4:	0801a6b4 	.word	0x0801a6b4
 800f5b8:	0801cef0 	.word	0x0801cef0

0800f5bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	f003 0303 	and.w	r3, r3, #3
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d006      	beq.n	800f5de <do_memp_free_pool+0x22>
 800f5d0:	4b0d      	ldr	r3, [pc, #52]	; (800f608 <do_memp_free_pool+0x4c>)
 800f5d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f5d6:	490d      	ldr	r1, [pc, #52]	; (800f60c <do_memp_free_pool+0x50>)
 800f5d8:	480d      	ldr	r0, [pc, #52]	; (800f610 <do_memp_free_pool+0x54>)
 800f5da:	f009 fbbb 	bl	8018d54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f5e2:	f009 f9a3 	bl	801892c <sys_arch_protect>
 800f5e6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f5fa:	68b8      	ldr	r0, [r7, #8]
 800f5fc:	f009 f9a4 	bl	8018948 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f600:	bf00      	nop
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	0801a660 	.word	0x0801a660
 800f60c:	0801a710 	.word	0x0801a710
 800f610:	0801a6b4 	.word	0x0801a6b4

0800f614 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d106      	bne.n	800f632 <memp_free_pool+0x1e>
 800f624:	4b0a      	ldr	r3, [pc, #40]	; (800f650 <memp_free_pool+0x3c>)
 800f626:	f240 1295 	movw	r2, #405	; 0x195
 800f62a:	490a      	ldr	r1, [pc, #40]	; (800f654 <memp_free_pool+0x40>)
 800f62c:	480a      	ldr	r0, [pc, #40]	; (800f658 <memp_free_pool+0x44>)
 800f62e:	f009 fb91 	bl	8018d54 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d007      	beq.n	800f648 <memp_free_pool+0x34>
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d004      	beq.n	800f648 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f63e:	6839      	ldr	r1, [r7, #0]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7ff ffbb 	bl	800f5bc <do_memp_free_pool>
 800f646:	e000      	b.n	800f64a <memp_free_pool+0x36>
    return;
 800f648:	bf00      	nop
}
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	0801a660 	.word	0x0801a660
 800f654:	0801a6dc 	.word	0x0801a6dc
 800f658:	0801a6b4 	.word	0x0801a6b4

0800f65c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	4603      	mov	r3, r0
 800f664:	6039      	str	r1, [r7, #0]
 800f666:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	2b0c      	cmp	r3, #12
 800f66c:	d907      	bls.n	800f67e <memp_free+0x22>
 800f66e:	4b0c      	ldr	r3, [pc, #48]	; (800f6a0 <memp_free+0x44>)
 800f670:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f674:	490b      	ldr	r1, [pc, #44]	; (800f6a4 <memp_free+0x48>)
 800f676:	480c      	ldr	r0, [pc, #48]	; (800f6a8 <memp_free+0x4c>)
 800f678:	f009 fb6c 	bl	8018d54 <iprintf>
 800f67c:	e00c      	b.n	800f698 <memp_free+0x3c>

  if (mem == NULL) {
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d008      	beq.n	800f696 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	4a09      	ldr	r2, [pc, #36]	; (800f6ac <memp_free+0x50>)
 800f688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	4618      	mov	r0, r3
 800f690:	f7ff ff94 	bl	800f5bc <do_memp_free_pool>
 800f694:	e000      	b.n	800f698 <memp_free+0x3c>
    return;
 800f696:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	0801a660 	.word	0x0801a660
 800f6a4:	0801a730 	.word	0x0801a730
 800f6a8:	0801a6b4 	.word	0x0801a6b4
 800f6ac:	0801cef0 	.word	0x0801cef0

0800f6b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f6b4:	bf00      	nop
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
	...

0800f6c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d108      	bne.n	800f6e6 <netif_add+0x26>
 800f6d4:	4b57      	ldr	r3, [pc, #348]	; (800f834 <netif_add+0x174>)
 800f6d6:	f240 1227 	movw	r2, #295	; 0x127
 800f6da:	4957      	ldr	r1, [pc, #348]	; (800f838 <netif_add+0x178>)
 800f6dc:	4857      	ldr	r0, [pc, #348]	; (800f83c <netif_add+0x17c>)
 800f6de:	f009 fb39 	bl	8018d54 <iprintf>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e0a2      	b.n	800f82c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d108      	bne.n	800f6fe <netif_add+0x3e>
 800f6ec:	4b51      	ldr	r3, [pc, #324]	; (800f834 <netif_add+0x174>)
 800f6ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f6f2:	4953      	ldr	r1, [pc, #332]	; (800f840 <netif_add+0x180>)
 800f6f4:	4851      	ldr	r0, [pc, #324]	; (800f83c <netif_add+0x17c>)
 800f6f6:	f009 fb2d 	bl	8018d54 <iprintf>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	e096      	b.n	800f82c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d101      	bne.n	800f708 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f704:	4b4f      	ldr	r3, [pc, #316]	; (800f844 <netif_add+0x184>)
 800f706:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d101      	bne.n	800f712 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f70e:	4b4d      	ldr	r3, [pc, #308]	; (800f844 <netif_add+0x184>)
 800f710:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f718:	4b4a      	ldr	r3, [pc, #296]	; (800f844 <netif_add+0x184>)
 800f71a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2200      	movs	r2, #0
 800f720:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2200      	movs	r2, #0
 800f726:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2200      	movs	r2, #0
 800f72c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	4a45      	ldr	r2, [pc, #276]	; (800f848 <netif_add+0x188>)
 800f732:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2200      	movs	r2, #0
 800f738:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2200      	movs	r2, #0
 800f746:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	6a3a      	ldr	r2, [r7, #32]
 800f74c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f74e:	4b3f      	ldr	r3, [pc, #252]	; (800f84c <netif_add+0x18c>)
 800f750:	781a      	ldrb	r2, [r3, #0]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f75c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	68b9      	ldr	r1, [r7, #8]
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 f913 	bl	800f990 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	4798      	blx	r3
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d001      	beq.n	800f77a <netif_add+0xba>
    return NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	e058      	b.n	800f82c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f780:	2bff      	cmp	r3, #255	; 0xff
 800f782:	d103      	bne.n	800f78c <netif_add+0xcc>
        netif->num = 0;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2200      	movs	r2, #0
 800f788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f790:	4b2f      	ldr	r3, [pc, #188]	; (800f850 <netif_add+0x190>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	617b      	str	r3, [r7, #20]
 800f796:	e02b      	b.n	800f7f0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f798:	697a      	ldr	r2, [r7, #20]
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d106      	bne.n	800f7ae <netif_add+0xee>
 800f7a0:	4b24      	ldr	r3, [pc, #144]	; (800f834 <netif_add+0x174>)
 800f7a2:	f240 128b 	movw	r2, #395	; 0x18b
 800f7a6:	492b      	ldr	r1, [pc, #172]	; (800f854 <netif_add+0x194>)
 800f7a8:	4824      	ldr	r0, [pc, #144]	; (800f83c <netif_add+0x17c>)
 800f7aa:	f009 fad3 	bl	8018d54 <iprintf>
        num_netifs++;
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	2bff      	cmp	r3, #255	; 0xff
 800f7b8:	dd06      	ble.n	800f7c8 <netif_add+0x108>
 800f7ba:	4b1e      	ldr	r3, [pc, #120]	; (800f834 <netif_add+0x174>)
 800f7bc:	f240 128d 	movw	r2, #397	; 0x18d
 800f7c0:	4925      	ldr	r1, [pc, #148]	; (800f858 <netif_add+0x198>)
 800f7c2:	481e      	ldr	r0, [pc, #120]	; (800f83c <netif_add+0x17c>)
 800f7c4:	f009 fac6 	bl	8018d54 <iprintf>
        if (netif2->num == netif->num) {
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d108      	bne.n	800f7ea <netif_add+0x12a>
          netif->num++;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7de:	3301      	adds	r3, #1
 800f7e0:	b2da      	uxtb	r2, r3
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f7e8:	e005      	b.n	800f7f6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	617b      	str	r3, [r7, #20]
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1d0      	bne.n	800f798 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1be      	bne.n	800f77a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f802:	2bfe      	cmp	r3, #254	; 0xfe
 800f804:	d103      	bne.n	800f80e <netif_add+0x14e>
    netif_num = 0;
 800f806:	4b11      	ldr	r3, [pc, #68]	; (800f84c <netif_add+0x18c>)
 800f808:	2200      	movs	r2, #0
 800f80a:	701a      	strb	r2, [r3, #0]
 800f80c:	e006      	b.n	800f81c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f814:	3301      	adds	r3, #1
 800f816:	b2da      	uxtb	r2, r3
 800f818:	4b0c      	ldr	r3, [pc, #48]	; (800f84c <netif_add+0x18c>)
 800f81a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f81c:	4b0c      	ldr	r3, [pc, #48]	; (800f850 <netif_add+0x190>)
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f824:	4a0a      	ldr	r2, [pc, #40]	; (800f850 <netif_add+0x190>)
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f82a:	68fb      	ldr	r3, [r7, #12]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	0801a74c 	.word	0x0801a74c
 800f838:	0801a7e0 	.word	0x0801a7e0
 800f83c:	0801a79c 	.word	0x0801a79c
 800f840:	0801a7fc 	.word	0x0801a7fc
 800f844:	0801cf64 	.word	0x0801cf64
 800f848:	0800fc6b 	.word	0x0800fc6b
 800f84c:	2000d984 	.word	0x2000d984
 800f850:	2000d97c 	.word	0x2000d97c
 800f854:	0801a820 	.word	0x0801a820
 800f858:	0801a834 	.word	0x0801a834

0800f85c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f002 fb7d 	bl	8011f68 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f006 fc91 	bl	8016198 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f876:	bf00      	nop
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
	...

0800f880 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d106      	bne.n	800f8a0 <netif_do_set_ipaddr+0x20>
 800f892:	4b1d      	ldr	r3, [pc, #116]	; (800f908 <netif_do_set_ipaddr+0x88>)
 800f894:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f898:	491c      	ldr	r1, [pc, #112]	; (800f90c <netif_do_set_ipaddr+0x8c>)
 800f89a:	481d      	ldr	r0, [pc, #116]	; (800f910 <netif_do_set_ipaddr+0x90>)
 800f89c:	f009 fa5a 	bl	8018d54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d106      	bne.n	800f8b4 <netif_do_set_ipaddr+0x34>
 800f8a6:	4b18      	ldr	r3, [pc, #96]	; (800f908 <netif_do_set_ipaddr+0x88>)
 800f8a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f8ac:	4917      	ldr	r1, [pc, #92]	; (800f90c <netif_do_set_ipaddr+0x8c>)
 800f8ae:	4818      	ldr	r0, [pc, #96]	; (800f910 <netif_do_set_ipaddr+0x90>)
 800f8b0:	f009 fa50 	bl	8018d54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3304      	adds	r3, #4
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d01c      	beq.n	800f8fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f8d2:	f107 0314 	add.w	r3, r7, #20
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7ff ffbf 	bl	800f85c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d002      	beq.n	800f8ea <netif_do_set_ipaddr+0x6a>
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	e000      	b.n	800f8ec <netif_do_set_ipaddr+0x6c>
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f8f0:	2101      	movs	r1, #1
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f000 f8d2 	bl	800fa9c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e000      	b.n	800f8fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3718      	adds	r7, #24
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	0801a74c 	.word	0x0801a74c
 800f90c:	0801a864 	.word	0x0801a864
 800f910:	0801a79c 	.word	0x0801a79c

0800f914 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	3308      	adds	r3, #8
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d00a      	beq.n	800f944 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <netif_do_set_netmask+0x26>
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	e000      	b.n	800f93c <netif_do_set_netmask+0x28>
 800f93a:	2300      	movs	r3, #0
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f940:	2301      	movs	r3, #1
 800f942:	e000      	b.n	800f946 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3714      	adds	r7, #20
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr

0800f952 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f952:	b480      	push	{r7}
 800f954:	b085      	sub	sp, #20
 800f956:	af00      	add	r7, sp, #0
 800f958:	60f8      	str	r0, [r7, #12]
 800f95a:	60b9      	str	r1, [r7, #8]
 800f95c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	330c      	adds	r3, #12
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d00a      	beq.n	800f982 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d002      	beq.n	800f978 <netif_do_set_gw+0x26>
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	e000      	b.n	800f97a <netif_do_set_gw+0x28>
 800f978:	2300      	movs	r3, #0
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f97e:	2301      	movs	r3, #1
 800f980:	e000      	b.n	800f984 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3714      	adds	r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b088      	sub	sp, #32
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	607a      	str	r2, [r7, #4]
 800f99c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d101      	bne.n	800f9b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f9ac:	4b1c      	ldr	r3, [pc, #112]	; (800fa20 <netif_set_addr+0x90>)
 800f9ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d101      	bne.n	800f9ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f9b6:	4b1a      	ldr	r3, [pc, #104]	; (800fa20 <netif_set_addr+0x90>)
 800f9b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d101      	bne.n	800f9c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f9c0:	4b17      	ldr	r3, [pc, #92]	; (800fa20 <netif_set_addr+0x90>)
 800f9c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d003      	beq.n	800f9d2 <netif_set_addr+0x42>
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d101      	bne.n	800f9d6 <netif_set_addr+0x46>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e000      	b.n	800f9d8 <netif_set_addr+0x48>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d006      	beq.n	800f9ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f9e0:	f107 0310 	add.w	r3, r7, #16
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	68b9      	ldr	r1, [r7, #8]
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f7ff ff49 	bl	800f880 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f9ee:	69fa      	ldr	r2, [r7, #28]
 800f9f0:	6879      	ldr	r1, [r7, #4]
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f7ff ff8e 	bl	800f914 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f9f8:	69ba      	ldr	r2, [r7, #24]
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f7ff ffa8 	bl	800f952 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d106      	bne.n	800fa16 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fa08:	f107 0310 	add.w	r3, r7, #16
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	68b9      	ldr	r1, [r7, #8]
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f7ff ff35 	bl	800f880 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fa16:	bf00      	nop
 800fa18:	3720      	adds	r7, #32
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	0801cf64 	.word	0x0801cf64

0800fa24 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fa2c:	4a04      	ldr	r2, [pc, #16]	; (800fa40 <netif_set_default+0x1c>)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fa32:	bf00      	nop
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	2000d980 	.word	0x2000d980

0800fa44 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d107      	bne.n	800fa62 <netif_set_up+0x1e>
 800fa52:	4b0f      	ldr	r3, [pc, #60]	; (800fa90 <netif_set_up+0x4c>)
 800fa54:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fa58:	490e      	ldr	r1, [pc, #56]	; (800fa94 <netif_set_up+0x50>)
 800fa5a:	480f      	ldr	r0, [pc, #60]	; (800fa98 <netif_set_up+0x54>)
 800fa5c:	f009 f97a 	bl	8018d54 <iprintf>
 800fa60:	e013      	b.n	800fa8a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa68:	f003 0301 	and.w	r3, r3, #1
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10c      	bne.n	800fa8a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa76:	f043 0301 	orr.w	r3, r3, #1
 800fa7a:	b2da      	uxtb	r2, r3
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fa82:	2103      	movs	r1, #3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 f809 	bl	800fa9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	0801a74c 	.word	0x0801a74c
 800fa94:	0801a8d4 	.word	0x0801a8d4
 800fa98:	0801a79c 	.word	0x0801a79c

0800fa9c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	460b      	mov	r3, r1
 800faa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d106      	bne.n	800fabc <netif_issue_reports+0x20>
 800faae:	4b18      	ldr	r3, [pc, #96]	; (800fb10 <netif_issue_reports+0x74>)
 800fab0:	f240 326d 	movw	r2, #877	; 0x36d
 800fab4:	4917      	ldr	r1, [pc, #92]	; (800fb14 <netif_issue_reports+0x78>)
 800fab6:	4818      	ldr	r0, [pc, #96]	; (800fb18 <netif_issue_reports+0x7c>)
 800fab8:	f009 f94c 	bl	8018d54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fac2:	f003 0304 	and.w	r3, r3, #4
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d01e      	beq.n	800fb08 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fad0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d017      	beq.n	800fb08 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fad8:	78fb      	ldrb	r3, [r7, #3]
 800fada:	f003 0301 	and.w	r3, r3, #1
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d013      	beq.n	800fb0a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3304      	adds	r3, #4
 800fae6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00e      	beq.n	800fb0a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800faf2:	f003 0308 	and.w	r3, r3, #8
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d007      	beq.n	800fb0a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	3304      	adds	r3, #4
 800fafe:	4619      	mov	r1, r3
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f007 fab3 	bl	801706c <etharp_request>
 800fb06:	e000      	b.n	800fb0a <netif_issue_reports+0x6e>
    return;
 800fb08:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	0801a74c 	.word	0x0801a74c
 800fb14:	0801a8f0 	.word	0x0801a8f0
 800fb18:	0801a79c 	.word	0x0801a79c

0800fb1c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d107      	bne.n	800fb3a <netif_set_down+0x1e>
 800fb2a:	4b12      	ldr	r3, [pc, #72]	; (800fb74 <netif_set_down+0x58>)
 800fb2c:	f240 329b 	movw	r2, #923	; 0x39b
 800fb30:	4911      	ldr	r1, [pc, #68]	; (800fb78 <netif_set_down+0x5c>)
 800fb32:	4812      	ldr	r0, [pc, #72]	; (800fb7c <netif_set_down+0x60>)
 800fb34:	f009 f90e 	bl	8018d54 <iprintf>
 800fb38:	e019      	b.n	800fb6e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb40:	f003 0301 	and.w	r3, r3, #1
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d012      	beq.n	800fb6e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb4e:	f023 0301 	bic.w	r3, r3, #1
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb60:	f003 0308 	and.w	r3, r3, #8
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d002      	beq.n	800fb6e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f006 fe3d 	bl	80167e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	0801a74c 	.word	0x0801a74c
 800fb78:	0801a914 	.word	0x0801a914
 800fb7c:	0801a79c 	.word	0x0801a79c

0800fb80 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d107      	bne.n	800fb9e <netif_set_link_up+0x1e>
 800fb8e:	4b13      	ldr	r3, [pc, #76]	; (800fbdc <netif_set_link_up+0x5c>)
 800fb90:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fb94:	4912      	ldr	r1, [pc, #72]	; (800fbe0 <netif_set_link_up+0x60>)
 800fb96:	4813      	ldr	r0, [pc, #76]	; (800fbe4 <netif_set_link_up+0x64>)
 800fb98:	f009 f8dc 	bl	8018d54 <iprintf>
 800fb9c:	e01b      	b.n	800fbd6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fba4:	f003 0304 	and.w	r3, r3, #4
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d114      	bne.n	800fbd6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbb2:	f043 0304 	orr.w	r3, r3, #4
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fbbe:	2103      	movs	r1, #3
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7ff ff6b 	bl	800fa9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	69db      	ldr	r3, [r3, #28]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d003      	beq.n	800fbd6 <netif_set_link_up+0x56>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	69db      	ldr	r3, [r3, #28]
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	0801a74c 	.word	0x0801a74c
 800fbe0:	0801a934 	.word	0x0801a934
 800fbe4:	0801a79c 	.word	0x0801a79c

0800fbe8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d107      	bne.n	800fc06 <netif_set_link_down+0x1e>
 800fbf6:	4b11      	ldr	r3, [pc, #68]	; (800fc3c <netif_set_link_down+0x54>)
 800fbf8:	f240 4206 	movw	r2, #1030	; 0x406
 800fbfc:	4910      	ldr	r1, [pc, #64]	; (800fc40 <netif_set_link_down+0x58>)
 800fbfe:	4811      	ldr	r0, [pc, #68]	; (800fc44 <netif_set_link_down+0x5c>)
 800fc00:	f009 f8a8 	bl	8018d54 <iprintf>
 800fc04:	e017      	b.n	800fc36 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc0c:	f003 0304 	and.w	r3, r3, #4
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d010      	beq.n	800fc36 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc1a:	f023 0304 	bic.w	r3, r3, #4
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	69db      	ldr	r3, [r3, #28]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d003      	beq.n	800fc36 <netif_set_link_down+0x4e>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	69db      	ldr	r3, [r3, #28]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	0801a74c 	.word	0x0801a74c
 800fc40:	0801a958 	.word	0x0801a958
 800fc44:	0801a79c 	.word	0x0801a79c

0800fc48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d002      	beq.n	800fc5e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	683a      	ldr	r2, [r7, #0]
 800fc5c:	61da      	str	r2, [r3, #28]
  }
}
 800fc5e:	bf00      	nop
 800fc60:	370c      	adds	r7, #12
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr

0800fc6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fc6a:	b480      	push	{r7}
 800fc6c:	b085      	sub	sp, #20
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	60f8      	str	r0, [r7, #12]
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fc76:	f06f 030b 	mvn.w	r3, #11
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3714      	adds	r7, #20
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr
	...

0800fc88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	4603      	mov	r3, r0
 800fc90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fc92:	79fb      	ldrb	r3, [r7, #7]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d013      	beq.n	800fcc0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fc98:	4b0d      	ldr	r3, [pc, #52]	; (800fcd0 <netif_get_by_index+0x48>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	60fb      	str	r3, [r7, #12]
 800fc9e:	e00c      	b.n	800fcba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fca6:	3301      	adds	r3, #1
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	79fa      	ldrb	r2, [r7, #7]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d101      	bne.n	800fcb4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	e006      	b.n	800fcc2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	60fb      	str	r3, [r7, #12]
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1ef      	bne.n	800fca0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3714      	adds	r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	2000d97c 	.word	0x2000d97c

0800fcd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fcda:	f008 fe27 	bl	801892c <sys_arch_protect>
 800fcde:	6038      	str	r0, [r7, #0]
 800fce0:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <pbuf_free_ooseq+0x44>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	701a      	strb	r2, [r3, #0]
 800fce6:	6838      	ldr	r0, [r7, #0]
 800fce8:	f008 fe2e 	bl	8018948 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fcec:	4b0b      	ldr	r3, [pc, #44]	; (800fd1c <pbuf_free_ooseq+0x48>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	607b      	str	r3, [r7, #4]
 800fcf2:	e00a      	b.n	800fd0a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d003      	beq.n	800fd04 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f002 f971 	bl	8011fe4 <tcp_free_ooseq>
      return;
 800fd02:	e005      	b.n	800fd10 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	607b      	str	r3, [r7, #4]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d1f1      	bne.n	800fcf4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	2000d985 	.word	0x2000d985
 800fd1c:	2000d994 	.word	0x2000d994

0800fd20 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fd28:	f7ff ffd4 	bl	800fcd4 <pbuf_free_ooseq>
}
 800fd2c:	bf00      	nop
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fd3a:	f008 fdf7 	bl	801892c <sys_arch_protect>
 800fd3e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fd40:	4b0f      	ldr	r3, [pc, #60]	; (800fd80 <pbuf_pool_is_empty+0x4c>)
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fd46:	4b0e      	ldr	r3, [pc, #56]	; (800fd80 <pbuf_pool_is_empty+0x4c>)
 800fd48:	2201      	movs	r2, #1
 800fd4a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f008 fdfb 	bl	8018948 <sys_arch_unprotect>

  if (!queued) {
 800fd52:	78fb      	ldrb	r3, [r7, #3]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d10f      	bne.n	800fd78 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fd58:	2100      	movs	r1, #0
 800fd5a:	480a      	ldr	r0, [pc, #40]	; (800fd84 <pbuf_pool_is_empty+0x50>)
 800fd5c:	f7fe fea6 	bl	800eaac <tcpip_try_callback>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d008      	beq.n	800fd78 <pbuf_pool_is_empty+0x44>
 800fd66:	f008 fde1 	bl	801892c <sys_arch_protect>
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	4b04      	ldr	r3, [pc, #16]	; (800fd80 <pbuf_pool_is_empty+0x4c>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	701a      	strb	r2, [r3, #0]
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f008 fde8 	bl	8018948 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fd78:	bf00      	nop
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	2000d985 	.word	0x2000d985
 800fd84:	0800fd21 	.word	0x0800fd21

0800fd88 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	4611      	mov	r1, r2
 800fd94:	461a      	mov	r2, r3
 800fd96:	460b      	mov	r3, r1
 800fd98:	80fb      	strh	r3, [r7, #6]
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2200      	movs	r2, #0
 800fda2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	68ba      	ldr	r2, [r7, #8]
 800fda8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	88fa      	ldrh	r2, [r7, #6]
 800fdae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	88ba      	ldrh	r2, [r7, #4]
 800fdb4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fdb6:	8b3b      	ldrh	r3, [r7, #24]
 800fdb8:	b2da      	uxtb	r2, r3
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	7f3a      	ldrb	r2, [r7, #28]
 800fdc2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	73da      	strb	r2, [r3, #15]
}
 800fdd0:	bf00      	nop
 800fdd2:	3714      	adds	r7, #20
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08c      	sub	sp, #48	; 0x30
 800fde0:	af02      	add	r7, sp, #8
 800fde2:	4603      	mov	r3, r0
 800fde4:	71fb      	strb	r3, [r7, #7]
 800fde6:	460b      	mov	r3, r1
 800fde8:	80bb      	strh	r3, [r7, #4]
 800fdea:	4613      	mov	r3, r2
 800fdec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fdee:	79fb      	ldrb	r3, [r7, #7]
 800fdf0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fdf2:	887b      	ldrh	r3, [r7, #2]
 800fdf4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fdf8:	d07f      	beq.n	800fefa <pbuf_alloc+0x11e>
 800fdfa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fdfe:	f300 80c8 	bgt.w	800ff92 <pbuf_alloc+0x1b6>
 800fe02:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fe06:	d010      	beq.n	800fe2a <pbuf_alloc+0x4e>
 800fe08:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fe0c:	f300 80c1 	bgt.w	800ff92 <pbuf_alloc+0x1b6>
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d002      	beq.n	800fe1a <pbuf_alloc+0x3e>
 800fe14:	2b41      	cmp	r3, #65	; 0x41
 800fe16:	f040 80bc 	bne.w	800ff92 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fe1a:	887a      	ldrh	r2, [r7, #2]
 800fe1c:	88bb      	ldrh	r3, [r7, #4]
 800fe1e:	4619      	mov	r1, r3
 800fe20:	2000      	movs	r0, #0
 800fe22:	f000 f8d1 	bl	800ffc8 <pbuf_alloc_reference>
 800fe26:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fe28:	e0bd      	b.n	800ffa6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fe32:	88bb      	ldrh	r3, [r7, #4]
 800fe34:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fe36:	200c      	movs	r0, #12
 800fe38:	f7ff fb9a 	bl	800f570 <memp_malloc>
 800fe3c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d109      	bne.n	800fe58 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fe44:	f7ff ff76 	bl	800fd34 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fe48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d002      	beq.n	800fe54 <pbuf_alloc+0x78>
            pbuf_free(p);
 800fe4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe50:	f000 faa8 	bl	80103a4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fe54:	2300      	movs	r3, #0
 800fe56:	e0a7      	b.n	800ffa8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fe58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe5a:	3303      	adds	r3, #3
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	f023 0303 	bic.w	r3, r3, #3
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	8b7a      	ldrh	r2, [r7, #26]
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	bf28      	it	cs
 800fe70:	4613      	movcs	r3, r2
 800fe72:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fe74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe76:	3310      	adds	r3, #16
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	3303      	adds	r3, #3
 800fe7e:	f023 0303 	bic.w	r3, r3, #3
 800fe82:	4618      	mov	r0, r3
 800fe84:	89f9      	ldrh	r1, [r7, #14]
 800fe86:	8b7a      	ldrh	r2, [r7, #26]
 800fe88:	2300      	movs	r3, #0
 800fe8a:	9301      	str	r3, [sp, #4]
 800fe8c:	887b      	ldrh	r3, [r7, #2]
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	460b      	mov	r3, r1
 800fe92:	4601      	mov	r1, r0
 800fe94:	6938      	ldr	r0, [r7, #16]
 800fe96:	f7ff ff77 	bl	800fd88 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	f003 0303 	and.w	r3, r3, #3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d006      	beq.n	800feb4 <pbuf_alloc+0xd8>
 800fea6:	4b42      	ldr	r3, [pc, #264]	; (800ffb0 <pbuf_alloc+0x1d4>)
 800fea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800feac:	4941      	ldr	r1, [pc, #260]	; (800ffb4 <pbuf_alloc+0x1d8>)
 800feae:	4842      	ldr	r0, [pc, #264]	; (800ffb8 <pbuf_alloc+0x1dc>)
 800feb0:	f008 ff50 	bl	8018d54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800feb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800feb6:	3303      	adds	r3, #3
 800feb8:	f023 0303 	bic.w	r3, r3, #3
 800febc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fec0:	d106      	bne.n	800fed0 <pbuf_alloc+0xf4>
 800fec2:	4b3b      	ldr	r3, [pc, #236]	; (800ffb0 <pbuf_alloc+0x1d4>)
 800fec4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fec8:	493c      	ldr	r1, [pc, #240]	; (800ffbc <pbuf_alloc+0x1e0>)
 800feca:	483b      	ldr	r0, [pc, #236]	; (800ffb8 <pbuf_alloc+0x1dc>)
 800fecc:	f008 ff42 	bl	8018d54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d102      	bne.n	800fedc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	627b      	str	r3, [r7, #36]	; 0x24
 800feda:	e002      	b.n	800fee2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	693a      	ldr	r2, [r7, #16]
 800fee0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fee6:	8b7a      	ldrh	r2, [r7, #26]
 800fee8:	89fb      	ldrh	r3, [r7, #14]
 800feea:	1ad3      	subs	r3, r2, r3
 800feec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fef2:	8b7b      	ldrh	r3, [r7, #26]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d19e      	bne.n	800fe36 <pbuf_alloc+0x5a>
      break;
 800fef8:	e055      	b.n	800ffa6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fefa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fefc:	3303      	adds	r3, #3
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	f023 0303 	bic.w	r3, r3, #3
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	88bb      	ldrh	r3, [r7, #4]
 800ff08:	3303      	adds	r3, #3
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	f023 0303 	bic.w	r3, r3, #3
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	4413      	add	r3, r2
 800ff14:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ff16:	8b3b      	ldrh	r3, [r7, #24]
 800ff18:	3310      	adds	r3, #16
 800ff1a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ff1c:	8b3a      	ldrh	r2, [r7, #24]
 800ff1e:	88bb      	ldrh	r3, [r7, #4]
 800ff20:	3303      	adds	r3, #3
 800ff22:	f023 0303 	bic.w	r3, r3, #3
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d306      	bcc.n	800ff38 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ff2a:	8afa      	ldrh	r2, [r7, #22]
 800ff2c:	88bb      	ldrh	r3, [r7, #4]
 800ff2e:	3303      	adds	r3, #3
 800ff30:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d201      	bcs.n	800ff3c <pbuf_alloc+0x160>
        return NULL;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	e035      	b.n	800ffa8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ff3c:	8afb      	ldrh	r3, [r7, #22]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7ff f972 	bl	800f228 <mem_malloc>
 800ff44:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d101      	bne.n	800ff50 <pbuf_alloc+0x174>
        return NULL;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e02b      	b.n	800ffa8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ff50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff52:	3310      	adds	r3, #16
 800ff54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff56:	4413      	add	r3, r2
 800ff58:	3303      	adds	r3, #3
 800ff5a:	f023 0303 	bic.w	r3, r3, #3
 800ff5e:	4618      	mov	r0, r3
 800ff60:	88b9      	ldrh	r1, [r7, #4]
 800ff62:	88ba      	ldrh	r2, [r7, #4]
 800ff64:	2300      	movs	r3, #0
 800ff66:	9301      	str	r3, [sp, #4]
 800ff68:	887b      	ldrh	r3, [r7, #2]
 800ff6a:	9300      	str	r3, [sp, #0]
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	4601      	mov	r1, r0
 800ff70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff72:	f7ff ff09 	bl	800fd88 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ff76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	f003 0303 	and.w	r3, r3, #3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d010      	beq.n	800ffa4 <pbuf_alloc+0x1c8>
 800ff82:	4b0b      	ldr	r3, [pc, #44]	; (800ffb0 <pbuf_alloc+0x1d4>)
 800ff84:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ff88:	490d      	ldr	r1, [pc, #52]	; (800ffc0 <pbuf_alloc+0x1e4>)
 800ff8a:	480b      	ldr	r0, [pc, #44]	; (800ffb8 <pbuf_alloc+0x1dc>)
 800ff8c:	f008 fee2 	bl	8018d54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ff90:	e008      	b.n	800ffa4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <pbuf_alloc+0x1d4>)
 800ff94:	f240 1227 	movw	r2, #295	; 0x127
 800ff98:	490a      	ldr	r1, [pc, #40]	; (800ffc4 <pbuf_alloc+0x1e8>)
 800ff9a:	4807      	ldr	r0, [pc, #28]	; (800ffb8 <pbuf_alloc+0x1dc>)
 800ff9c:	f008 feda 	bl	8018d54 <iprintf>
      return NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e001      	b.n	800ffa8 <pbuf_alloc+0x1cc>
      break;
 800ffa4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3728      	adds	r7, #40	; 0x28
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	0801a97c 	.word	0x0801a97c
 800ffb4:	0801a9ac 	.word	0x0801a9ac
 800ffb8:	0801a9dc 	.word	0x0801a9dc
 800ffbc:	0801aa04 	.word	0x0801aa04
 800ffc0:	0801aa38 	.word	0x0801aa38
 800ffc4:	0801aa64 	.word	0x0801aa64

0800ffc8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b086      	sub	sp, #24
 800ffcc:	af02      	add	r7, sp, #8
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	807b      	strh	r3, [r7, #2]
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ffd8:	883b      	ldrh	r3, [r7, #0]
 800ffda:	2b41      	cmp	r3, #65	; 0x41
 800ffdc:	d009      	beq.n	800fff2 <pbuf_alloc_reference+0x2a>
 800ffde:	883b      	ldrh	r3, [r7, #0]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d006      	beq.n	800fff2 <pbuf_alloc_reference+0x2a>
 800ffe4:	4b0f      	ldr	r3, [pc, #60]	; (8010024 <pbuf_alloc_reference+0x5c>)
 800ffe6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ffea:	490f      	ldr	r1, [pc, #60]	; (8010028 <pbuf_alloc_reference+0x60>)
 800ffec:	480f      	ldr	r0, [pc, #60]	; (801002c <pbuf_alloc_reference+0x64>)
 800ffee:	f008 feb1 	bl	8018d54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fff2:	200b      	movs	r0, #11
 800fff4:	f7ff fabc 	bl	800f570 <memp_malloc>
 800fff8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d101      	bne.n	8010004 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010000:	2300      	movs	r3, #0
 8010002:	e00b      	b.n	801001c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010004:	8879      	ldrh	r1, [r7, #2]
 8010006:	887a      	ldrh	r2, [r7, #2]
 8010008:	2300      	movs	r3, #0
 801000a:	9301      	str	r3, [sp, #4]
 801000c:	883b      	ldrh	r3, [r7, #0]
 801000e:	9300      	str	r3, [sp, #0]
 8010010:	460b      	mov	r3, r1
 8010012:	6879      	ldr	r1, [r7, #4]
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f7ff feb7 	bl	800fd88 <pbuf_init_alloced_pbuf>
  return p;
 801001a:	68fb      	ldr	r3, [r7, #12]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	0801a97c 	.word	0x0801a97c
 8010028:	0801aa80 	.word	0x0801aa80
 801002c:	0801a9dc 	.word	0x0801a9dc

08010030 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af02      	add	r7, sp, #8
 8010036:	607b      	str	r3, [r7, #4]
 8010038:	4603      	mov	r3, r0
 801003a:	73fb      	strb	r3, [r7, #15]
 801003c:	460b      	mov	r3, r1
 801003e:	81bb      	strh	r3, [r7, #12]
 8010040:	4613      	mov	r3, r2
 8010042:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010044:	7bfb      	ldrb	r3, [r7, #15]
 8010046:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010048:	8a7b      	ldrh	r3, [r7, #18]
 801004a:	3303      	adds	r3, #3
 801004c:	f023 0203 	bic.w	r2, r3, #3
 8010050:	89bb      	ldrh	r3, [r7, #12]
 8010052:	441a      	add	r2, r3
 8010054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010056:	429a      	cmp	r2, r3
 8010058:	d901      	bls.n	801005e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801005a:	2300      	movs	r3, #0
 801005c:	e018      	b.n	8010090 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801005e:	6a3b      	ldr	r3, [r7, #32]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d007      	beq.n	8010074 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010064:	8a7b      	ldrh	r3, [r7, #18]
 8010066:	3303      	adds	r3, #3
 8010068:	f023 0303 	bic.w	r3, r3, #3
 801006c:	6a3a      	ldr	r2, [r7, #32]
 801006e:	4413      	add	r3, r2
 8010070:	617b      	str	r3, [r7, #20]
 8010072:	e001      	b.n	8010078 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010074:	2300      	movs	r3, #0
 8010076:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	89b9      	ldrh	r1, [r7, #12]
 801007c:	89ba      	ldrh	r2, [r7, #12]
 801007e:	2302      	movs	r3, #2
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	897b      	ldrh	r3, [r7, #10]
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	460b      	mov	r3, r1
 8010088:	6979      	ldr	r1, [r7, #20]
 801008a:	f7ff fe7d 	bl	800fd88 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801008e:	687b      	ldr	r3, [r7, #4]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3718      	adds	r7, #24
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	460b      	mov	r3, r1
 80100a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d106      	bne.n	80100b8 <pbuf_realloc+0x20>
 80100aa:	4b3a      	ldr	r3, [pc, #232]	; (8010194 <pbuf_realloc+0xfc>)
 80100ac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80100b0:	4939      	ldr	r1, [pc, #228]	; (8010198 <pbuf_realloc+0x100>)
 80100b2:	483a      	ldr	r0, [pc, #232]	; (801019c <pbuf_realloc+0x104>)
 80100b4:	f008 fe4e 	bl	8018d54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	891b      	ldrh	r3, [r3, #8]
 80100bc:	887a      	ldrh	r2, [r7, #2]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d263      	bcs.n	801018a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	891a      	ldrh	r2, [r3, #8]
 80100c6:	887b      	ldrh	r3, [r7, #2]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80100cc:	887b      	ldrh	r3, [r7, #2]
 80100ce:	817b      	strh	r3, [r7, #10]
  q = p;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80100d4:	e018      	b.n	8010108 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	895b      	ldrh	r3, [r3, #10]
 80100da:	897a      	ldrh	r2, [r7, #10]
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	891a      	ldrh	r2, [r3, #8]
 80100e4:	893b      	ldrh	r3, [r7, #8]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <pbuf_realloc+0x70>
 80100fa:	4b26      	ldr	r3, [pc, #152]	; (8010194 <pbuf_realloc+0xfc>)
 80100fc:	f240 12af 	movw	r2, #431	; 0x1af
 8010100:	4927      	ldr	r1, [pc, #156]	; (80101a0 <pbuf_realloc+0x108>)
 8010102:	4826      	ldr	r0, [pc, #152]	; (801019c <pbuf_realloc+0x104>)
 8010104:	f008 fe26 	bl	8018d54 <iprintf>
  while (rem_len > q->len) {
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	895b      	ldrh	r3, [r3, #10]
 801010c:	897a      	ldrh	r2, [r7, #10]
 801010e:	429a      	cmp	r2, r3
 8010110:	d8e1      	bhi.n	80100d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	7b1b      	ldrb	r3, [r3, #12]
 8010116:	f003 030f 	and.w	r3, r3, #15
 801011a:	2b00      	cmp	r3, #0
 801011c:	d121      	bne.n	8010162 <pbuf_realloc+0xca>
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	895b      	ldrh	r3, [r3, #10]
 8010122:	897a      	ldrh	r2, [r7, #10]
 8010124:	429a      	cmp	r2, r3
 8010126:	d01c      	beq.n	8010162 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	7b5b      	ldrb	r3, [r3, #13]
 801012c:	f003 0302 	and.w	r3, r3, #2
 8010130:	2b00      	cmp	r3, #0
 8010132:	d116      	bne.n	8010162 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	685a      	ldr	r2, [r3, #4]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	b29a      	uxth	r2, r3
 801013e:	897b      	ldrh	r3, [r7, #10]
 8010140:	4413      	add	r3, r2
 8010142:	b29b      	uxth	r3, r3
 8010144:	4619      	mov	r1, r3
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f7fe ff64 	bl	800f014 <mem_trim>
 801014c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d106      	bne.n	8010162 <pbuf_realloc+0xca>
 8010154:	4b0f      	ldr	r3, [pc, #60]	; (8010194 <pbuf_realloc+0xfc>)
 8010156:	f240 12bd 	movw	r2, #445	; 0x1bd
 801015a:	4912      	ldr	r1, [pc, #72]	; (80101a4 <pbuf_realloc+0x10c>)
 801015c:	480f      	ldr	r0, [pc, #60]	; (801019c <pbuf_realloc+0x104>)
 801015e:	f008 fdf9 	bl	8018d54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	897a      	ldrh	r2, [r7, #10]
 8010166:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	895a      	ldrh	r2, [r3, #10]
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d004      	beq.n	8010182 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4618      	mov	r0, r3
 801017e:	f000 f911 	bl	80103a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2200      	movs	r2, #0
 8010186:	601a      	str	r2, [r3, #0]
 8010188:	e000      	b.n	801018c <pbuf_realloc+0xf4>
    return;
 801018a:	bf00      	nop

}
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	0801a97c 	.word	0x0801a97c
 8010198:	0801aa94 	.word	0x0801aa94
 801019c:	0801a9dc 	.word	0x0801a9dc
 80101a0:	0801aaac 	.word	0x0801aaac
 80101a4:	0801aac4 	.word	0x0801aac4

080101a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b086      	sub	sp, #24
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	4613      	mov	r3, r2
 80101b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d106      	bne.n	80101ca <pbuf_add_header_impl+0x22>
 80101bc:	4b2b      	ldr	r3, [pc, #172]	; (801026c <pbuf_add_header_impl+0xc4>)
 80101be:	f240 12df 	movw	r2, #479	; 0x1df
 80101c2:	492b      	ldr	r1, [pc, #172]	; (8010270 <pbuf_add_header_impl+0xc8>)
 80101c4:	482b      	ldr	r0, [pc, #172]	; (8010274 <pbuf_add_header_impl+0xcc>)
 80101c6:	f008 fdc5 	bl	8018d54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d003      	beq.n	80101d8 <pbuf_add_header_impl+0x30>
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101d6:	d301      	bcc.n	80101dc <pbuf_add_header_impl+0x34>
    return 1;
 80101d8:	2301      	movs	r3, #1
 80101da:	e043      	b.n	8010264 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d101      	bne.n	80101e6 <pbuf_add_header_impl+0x3e>
    return 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	e03e      	b.n	8010264 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	891a      	ldrh	r2, [r3, #8]
 80101ee:	8a7b      	ldrh	r3, [r7, #18]
 80101f0:	4413      	add	r3, r2
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	8a7a      	ldrh	r2, [r7, #18]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d901      	bls.n	80101fe <pbuf_add_header_impl+0x56>
    return 1;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e032      	b.n	8010264 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	7b1b      	ldrb	r3, [r3, #12]
 8010202:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010204:	8a3b      	ldrh	r3, [r7, #16]
 8010206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00c      	beq.n	8010228 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	425b      	negs	r3, r3
 8010216:	4413      	add	r3, r2
 8010218:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	3310      	adds	r3, #16
 801021e:	697a      	ldr	r2, [r7, #20]
 8010220:	429a      	cmp	r2, r3
 8010222:	d20d      	bcs.n	8010240 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010224:	2301      	movs	r3, #1
 8010226:	e01d      	b.n	8010264 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d006      	beq.n	801023c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	685a      	ldr	r2, [r3, #4]
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	425b      	negs	r3, r3
 8010236:	4413      	add	r3, r2
 8010238:	617b      	str	r3, [r7, #20]
 801023a:	e001      	b.n	8010240 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801023c:	2301      	movs	r3, #1
 801023e:	e011      	b.n	8010264 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	697a      	ldr	r2, [r7, #20]
 8010244:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	895a      	ldrh	r2, [r3, #10]
 801024a:	8a7b      	ldrh	r3, [r7, #18]
 801024c:	4413      	add	r3, r2
 801024e:	b29a      	uxth	r2, r3
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	891a      	ldrh	r2, [r3, #8]
 8010258:	8a7b      	ldrh	r3, [r7, #18]
 801025a:	4413      	add	r3, r2
 801025c:	b29a      	uxth	r2, r3
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	811a      	strh	r2, [r3, #8]


  return 0;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	0801a97c 	.word	0x0801a97c
 8010270:	0801aae0 	.word	0x0801aae0
 8010274:	0801a9dc 	.word	0x0801a9dc

08010278 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010282:	2200      	movs	r2, #0
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff ff8e 	bl	80101a8 <pbuf_add_header_impl>
 801028c:	4603      	mov	r3, r0
}
 801028e:	4618      	mov	r0, r3
 8010290:	3708      	adds	r7, #8
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
	...

08010298 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d106      	bne.n	80102b6 <pbuf_remove_header+0x1e>
 80102a8:	4b20      	ldr	r3, [pc, #128]	; (801032c <pbuf_remove_header+0x94>)
 80102aa:	f240 224b 	movw	r2, #587	; 0x24b
 80102ae:	4920      	ldr	r1, [pc, #128]	; (8010330 <pbuf_remove_header+0x98>)
 80102b0:	4820      	ldr	r0, [pc, #128]	; (8010334 <pbuf_remove_header+0x9c>)
 80102b2:	f008 fd4f 	bl	8018d54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d003      	beq.n	80102c4 <pbuf_remove_header+0x2c>
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102c2:	d301      	bcc.n	80102c8 <pbuf_remove_header+0x30>
    return 1;
 80102c4:	2301      	movs	r3, #1
 80102c6:	e02c      	b.n	8010322 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d101      	bne.n	80102d2 <pbuf_remove_header+0x3a>
    return 0;
 80102ce:	2300      	movs	r3, #0
 80102d0:	e027      	b.n	8010322 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	895b      	ldrh	r3, [r3, #10]
 80102da:	89fa      	ldrh	r2, [r7, #14]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d908      	bls.n	80102f2 <pbuf_remove_header+0x5a>
 80102e0:	4b12      	ldr	r3, [pc, #72]	; (801032c <pbuf_remove_header+0x94>)
 80102e2:	f240 2255 	movw	r2, #597	; 0x255
 80102e6:	4914      	ldr	r1, [pc, #80]	; (8010338 <pbuf_remove_header+0xa0>)
 80102e8:	4812      	ldr	r0, [pc, #72]	; (8010334 <pbuf_remove_header+0x9c>)
 80102ea:	f008 fd33 	bl	8018d54 <iprintf>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e017      	b.n	8010322 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	441a      	add	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	895a      	ldrh	r2, [r3, #10]
 8010308:	89fb      	ldrh	r3, [r7, #14]
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	b29a      	uxth	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	891a      	ldrh	r2, [r3, #8]
 8010316:	89fb      	ldrh	r3, [r7, #14]
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	b29a      	uxth	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	0801a97c 	.word	0x0801a97c
 8010330:	0801aae0 	.word	0x0801aae0
 8010334:	0801a9dc 	.word	0x0801a9dc
 8010338:	0801aaec 	.word	0x0801aaec

0801033c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	460b      	mov	r3, r1
 8010346:	807b      	strh	r3, [r7, #2]
 8010348:	4613      	mov	r3, r2
 801034a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801034c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010350:	2b00      	cmp	r3, #0
 8010352:	da08      	bge.n	8010366 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010358:	425b      	negs	r3, r3
 801035a:	4619      	mov	r1, r3
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7ff ff9b 	bl	8010298 <pbuf_remove_header>
 8010362:	4603      	mov	r3, r0
 8010364:	e007      	b.n	8010376 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010366:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801036a:	787a      	ldrb	r2, [r7, #1]
 801036c:	4619      	mov	r1, r3
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff ff1a 	bl	80101a8 <pbuf_add_header_impl>
 8010374:	4603      	mov	r3, r0
  }
}
 8010376:	4618      	mov	r0, r3
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801037e:	b580      	push	{r7, lr}
 8010380:	b082      	sub	sp, #8
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
 8010386:	460b      	mov	r3, r1
 8010388:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801038a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801038e:	2201      	movs	r2, #1
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f7ff ffd2 	bl	801033c <pbuf_header_impl>
 8010398:	4603      	mov	r3, r0
}
 801039a:	4618      	mov	r0, r3
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
	...

080103a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b088      	sub	sp, #32
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d10b      	bne.n	80103ca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d106      	bne.n	80103c6 <pbuf_free+0x22>
 80103b8:	4b3b      	ldr	r3, [pc, #236]	; (80104a8 <pbuf_free+0x104>)
 80103ba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80103be:	493b      	ldr	r1, [pc, #236]	; (80104ac <pbuf_free+0x108>)
 80103c0:	483b      	ldr	r0, [pc, #236]	; (80104b0 <pbuf_free+0x10c>)
 80103c2:	f008 fcc7 	bl	8018d54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	e069      	b.n	801049e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80103ce:	e062      	b.n	8010496 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80103d0:	f008 faac 	bl	801892c <sys_arch_protect>
 80103d4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	7b9b      	ldrb	r3, [r3, #14]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d106      	bne.n	80103ec <pbuf_free+0x48>
 80103de:	4b32      	ldr	r3, [pc, #200]	; (80104a8 <pbuf_free+0x104>)
 80103e0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80103e4:	4933      	ldr	r1, [pc, #204]	; (80104b4 <pbuf_free+0x110>)
 80103e6:	4832      	ldr	r0, [pc, #200]	; (80104b0 <pbuf_free+0x10c>)
 80103e8:	f008 fcb4 	bl	8018d54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	7b9b      	ldrb	r3, [r3, #14]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	739a      	strb	r2, [r3, #14]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	7b9b      	ldrb	r3, [r3, #14]
 80103fc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80103fe:	69b8      	ldr	r0, [r7, #24]
 8010400:	f008 faa2 	bl	8018948 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010404:	7dfb      	ldrb	r3, [r7, #23]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d143      	bne.n	8010492 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	7b1b      	ldrb	r3, [r3, #12]
 8010414:	f003 030f 	and.w	r3, r3, #15
 8010418:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	7b5b      	ldrb	r3, [r3, #13]
 801041e:	f003 0302 	and.w	r3, r3, #2
 8010422:	2b00      	cmp	r3, #0
 8010424:	d011      	beq.n	801044a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d106      	bne.n	8010440 <pbuf_free+0x9c>
 8010432:	4b1d      	ldr	r3, [pc, #116]	; (80104a8 <pbuf_free+0x104>)
 8010434:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010438:	491f      	ldr	r1, [pc, #124]	; (80104b8 <pbuf_free+0x114>)
 801043a:	481d      	ldr	r0, [pc, #116]	; (80104b0 <pbuf_free+0x10c>)
 801043c:	f008 fc8a 	bl	8018d54 <iprintf>
        pc->custom_free_function(p);
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	691b      	ldr	r3, [r3, #16]
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	4798      	blx	r3
 8010448:	e01d      	b.n	8010486 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801044a:	7bfb      	ldrb	r3, [r7, #15]
 801044c:	2b02      	cmp	r3, #2
 801044e:	d104      	bne.n	801045a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010450:	6879      	ldr	r1, [r7, #4]
 8010452:	200c      	movs	r0, #12
 8010454:	f7ff f902 	bl	800f65c <memp_free>
 8010458:	e015      	b.n	8010486 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801045a:	7bfb      	ldrb	r3, [r7, #15]
 801045c:	2b01      	cmp	r3, #1
 801045e:	d104      	bne.n	801046a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010460:	6879      	ldr	r1, [r7, #4]
 8010462:	200b      	movs	r0, #11
 8010464:	f7ff f8fa 	bl	800f65c <memp_free>
 8010468:	e00d      	b.n	8010486 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801046a:	7bfb      	ldrb	r3, [r7, #15]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d103      	bne.n	8010478 <pbuf_free+0xd4>
          mem_free(p);
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7fe fd3f 	bl	800eef4 <mem_free>
 8010476:	e006      	b.n	8010486 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010478:	4b0b      	ldr	r3, [pc, #44]	; (80104a8 <pbuf_free+0x104>)
 801047a:	f240 320f 	movw	r2, #783	; 0x30f
 801047e:	490f      	ldr	r1, [pc, #60]	; (80104bc <pbuf_free+0x118>)
 8010480:	480b      	ldr	r0, [pc, #44]	; (80104b0 <pbuf_free+0x10c>)
 8010482:	f008 fc67 	bl	8018d54 <iprintf>
        }
      }
      count++;
 8010486:	7ffb      	ldrb	r3, [r7, #31]
 8010488:	3301      	adds	r3, #1
 801048a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	607b      	str	r3, [r7, #4]
 8010490:	e001      	b.n	8010496 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010492:	2300      	movs	r3, #0
 8010494:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d199      	bne.n	80103d0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801049c:	7ffb      	ldrb	r3, [r7, #31]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3720      	adds	r7, #32
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	0801a97c 	.word	0x0801a97c
 80104ac:	0801aae0 	.word	0x0801aae0
 80104b0:	0801a9dc 	.word	0x0801a9dc
 80104b4:	0801ab0c 	.word	0x0801ab0c
 80104b8:	0801ab24 	.word	0x0801ab24
 80104bc:	0801ab48 	.word	0x0801ab48

080104c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b085      	sub	sp, #20
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80104cc:	e005      	b.n	80104da <pbuf_clen+0x1a>
    ++len;
 80104ce:	89fb      	ldrh	r3, [r7, #14]
 80104d0:	3301      	adds	r3, #1
 80104d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1f6      	bne.n	80104ce <pbuf_clen+0xe>
  }
  return len;
 80104e0:	89fb      	ldrh	r3, [r7, #14]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3714      	adds	r7, #20
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr
	...

080104f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d016      	beq.n	801052c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80104fe:	f008 fa15 	bl	801892c <sys_arch_protect>
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	7b9b      	ldrb	r3, [r3, #14]
 8010508:	3301      	adds	r3, #1
 801050a:	b2da      	uxtb	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	739a      	strb	r2, [r3, #14]
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f008 fa19 	bl	8018948 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	7b9b      	ldrb	r3, [r3, #14]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d106      	bne.n	801052c <pbuf_ref+0x3c>
 801051e:	4b05      	ldr	r3, [pc, #20]	; (8010534 <pbuf_ref+0x44>)
 8010520:	f240 3242 	movw	r2, #834	; 0x342
 8010524:	4904      	ldr	r1, [pc, #16]	; (8010538 <pbuf_ref+0x48>)
 8010526:	4805      	ldr	r0, [pc, #20]	; (801053c <pbuf_ref+0x4c>)
 8010528:	f008 fc14 	bl	8018d54 <iprintf>
  }
}
 801052c:	bf00      	nop
 801052e:	3710      	adds	r7, #16
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	0801a97c 	.word	0x0801a97c
 8010538:	0801ab5c 	.word	0x0801ab5c
 801053c:	0801a9dc 	.word	0x0801a9dc

08010540 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <pbuf_cat+0x16>
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d107      	bne.n	8010566 <pbuf_cat+0x26>
 8010556:	4b20      	ldr	r3, [pc, #128]	; (80105d8 <pbuf_cat+0x98>)
 8010558:	f240 3259 	movw	r2, #857	; 0x359
 801055c:	491f      	ldr	r1, [pc, #124]	; (80105dc <pbuf_cat+0x9c>)
 801055e:	4820      	ldr	r0, [pc, #128]	; (80105e0 <pbuf_cat+0xa0>)
 8010560:	f008 fbf8 	bl	8018d54 <iprintf>
 8010564:	e034      	b.n	80105d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	60fb      	str	r3, [r7, #12]
 801056a:	e00a      	b.n	8010582 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	891a      	ldrh	r2, [r3, #8]
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	891b      	ldrh	r3, [r3, #8]
 8010574:	4413      	add	r3, r2
 8010576:	b29a      	uxth	r2, r3
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	60fb      	str	r3, [r7, #12]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1f0      	bne.n	801056c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	891a      	ldrh	r2, [r3, #8]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	895b      	ldrh	r3, [r3, #10]
 8010592:	429a      	cmp	r2, r3
 8010594:	d006      	beq.n	80105a4 <pbuf_cat+0x64>
 8010596:	4b10      	ldr	r3, [pc, #64]	; (80105d8 <pbuf_cat+0x98>)
 8010598:	f240 3262 	movw	r2, #866	; 0x362
 801059c:	4911      	ldr	r1, [pc, #68]	; (80105e4 <pbuf_cat+0xa4>)
 801059e:	4810      	ldr	r0, [pc, #64]	; (80105e0 <pbuf_cat+0xa0>)
 80105a0:	f008 fbd8 	bl	8018d54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d006      	beq.n	80105ba <pbuf_cat+0x7a>
 80105ac:	4b0a      	ldr	r3, [pc, #40]	; (80105d8 <pbuf_cat+0x98>)
 80105ae:	f240 3263 	movw	r2, #867	; 0x363
 80105b2:	490d      	ldr	r1, [pc, #52]	; (80105e8 <pbuf_cat+0xa8>)
 80105b4:	480a      	ldr	r0, [pc, #40]	; (80105e0 <pbuf_cat+0xa0>)
 80105b6:	f008 fbcd 	bl	8018d54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	891a      	ldrh	r2, [r3, #8]
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	891b      	ldrh	r3, [r3, #8]
 80105c2:	4413      	add	r3, r2
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	683a      	ldr	r2, [r7, #0]
 80105ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	0801a97c 	.word	0x0801a97c
 80105dc:	0801ab70 	.word	0x0801ab70
 80105e0:	0801a9dc 	.word	0x0801a9dc
 80105e4:	0801aba8 	.word	0x0801aba8
 80105e8:	0801abd8 	.word	0x0801abd8

080105ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b086      	sub	sp, #24
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80105f6:	2300      	movs	r3, #0
 80105f8:	617b      	str	r3, [r7, #20]
 80105fa:	2300      	movs	r3, #0
 80105fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d008      	beq.n	8010616 <pbuf_copy+0x2a>
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d005      	beq.n	8010616 <pbuf_copy+0x2a>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	891a      	ldrh	r2, [r3, #8]
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	891b      	ldrh	r3, [r3, #8]
 8010612:	429a      	cmp	r2, r3
 8010614:	d209      	bcs.n	801062a <pbuf_copy+0x3e>
 8010616:	4b57      	ldr	r3, [pc, #348]	; (8010774 <pbuf_copy+0x188>)
 8010618:	f240 32c9 	movw	r2, #969	; 0x3c9
 801061c:	4956      	ldr	r1, [pc, #344]	; (8010778 <pbuf_copy+0x18c>)
 801061e:	4857      	ldr	r0, [pc, #348]	; (801077c <pbuf_copy+0x190>)
 8010620:	f008 fb98 	bl	8018d54 <iprintf>
 8010624:	f06f 030f 	mvn.w	r3, #15
 8010628:	e09f      	b.n	801076a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	895b      	ldrh	r3, [r3, #10]
 801062e:	461a      	mov	r2, r3
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	1ad2      	subs	r2, r2, r3
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	895b      	ldrh	r3, [r3, #10]
 8010638:	4619      	mov	r1, r3
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	1acb      	subs	r3, r1, r3
 801063e:	429a      	cmp	r2, r3
 8010640:	d306      	bcc.n	8010650 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	895b      	ldrh	r3, [r3, #10]
 8010646:	461a      	mov	r2, r3
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	60fb      	str	r3, [r7, #12]
 801064e:	e005      	b.n	801065c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	895b      	ldrh	r3, [r3, #10]
 8010654:	461a      	mov	r2, r3
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685a      	ldr	r2, [r3, #4]
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	18d0      	adds	r0, r2, r3
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	685a      	ldr	r2, [r3, #4]
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	4413      	add	r3, r2
 801066c:	68fa      	ldr	r2, [r7, #12]
 801066e:	4619      	mov	r1, r3
 8010670:	f008 faab 	bl	8018bca <memcpy>
    offset_to += len;
 8010674:	697a      	ldr	r2, [r7, #20]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	4413      	add	r3, r2
 801067a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801067c:	693a      	ldr	r2, [r7, #16]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	4413      	add	r3, r2
 8010682:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	895b      	ldrh	r3, [r3, #10]
 8010688:	461a      	mov	r2, r3
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	4293      	cmp	r3, r2
 801068e:	d906      	bls.n	801069e <pbuf_copy+0xb2>
 8010690:	4b38      	ldr	r3, [pc, #224]	; (8010774 <pbuf_copy+0x188>)
 8010692:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010696:	493a      	ldr	r1, [pc, #232]	; (8010780 <pbuf_copy+0x194>)
 8010698:	4838      	ldr	r0, [pc, #224]	; (801077c <pbuf_copy+0x190>)
 801069a:	f008 fb5b 	bl	8018d54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	895b      	ldrh	r3, [r3, #10]
 80106a2:	461a      	mov	r2, r3
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d906      	bls.n	80106b8 <pbuf_copy+0xcc>
 80106aa:	4b32      	ldr	r3, [pc, #200]	; (8010774 <pbuf_copy+0x188>)
 80106ac:	f240 32da 	movw	r2, #986	; 0x3da
 80106b0:	4934      	ldr	r1, [pc, #208]	; (8010784 <pbuf_copy+0x198>)
 80106b2:	4832      	ldr	r0, [pc, #200]	; (801077c <pbuf_copy+0x190>)
 80106b4:	f008 fb4e 	bl	8018d54 <iprintf>
    if (offset_from >= p_from->len) {
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	895b      	ldrh	r3, [r3, #10]
 80106bc:	461a      	mov	r2, r3
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d304      	bcc.n	80106ce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80106c4:	2300      	movs	r3, #0
 80106c6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	895b      	ldrh	r3, [r3, #10]
 80106d2:	461a      	mov	r2, r3
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d114      	bne.n	8010704 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10c      	bne.n	8010704 <pbuf_copy+0x118>
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d009      	beq.n	8010704 <pbuf_copy+0x118>
 80106f0:	4b20      	ldr	r3, [pc, #128]	; (8010774 <pbuf_copy+0x188>)
 80106f2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80106f6:	4924      	ldr	r1, [pc, #144]	; (8010788 <pbuf_copy+0x19c>)
 80106f8:	4820      	ldr	r0, [pc, #128]	; (801077c <pbuf_copy+0x190>)
 80106fa:	f008 fb2b 	bl	8018d54 <iprintf>
 80106fe:	f06f 030f 	mvn.w	r3, #15
 8010702:	e032      	b.n	801076a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d013      	beq.n	8010732 <pbuf_copy+0x146>
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	895a      	ldrh	r2, [r3, #10]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	891b      	ldrh	r3, [r3, #8]
 8010712:	429a      	cmp	r2, r3
 8010714:	d10d      	bne.n	8010732 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d009      	beq.n	8010732 <pbuf_copy+0x146>
 801071e:	4b15      	ldr	r3, [pc, #84]	; (8010774 <pbuf_copy+0x188>)
 8010720:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010724:	4919      	ldr	r1, [pc, #100]	; (801078c <pbuf_copy+0x1a0>)
 8010726:	4815      	ldr	r0, [pc, #84]	; (801077c <pbuf_copy+0x190>)
 8010728:	f008 fb14 	bl	8018d54 <iprintf>
 801072c:	f06f 0305 	mvn.w	r3, #5
 8010730:	e01b      	b.n	801076a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d013      	beq.n	8010760 <pbuf_copy+0x174>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	895a      	ldrh	r2, [r3, #10]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	891b      	ldrh	r3, [r3, #8]
 8010740:	429a      	cmp	r2, r3
 8010742:	d10d      	bne.n	8010760 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d009      	beq.n	8010760 <pbuf_copy+0x174>
 801074c:	4b09      	ldr	r3, [pc, #36]	; (8010774 <pbuf_copy+0x188>)
 801074e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010752:	490e      	ldr	r1, [pc, #56]	; (801078c <pbuf_copy+0x1a0>)
 8010754:	4809      	ldr	r0, [pc, #36]	; (801077c <pbuf_copy+0x190>)
 8010756:	f008 fafd 	bl	8018d54 <iprintf>
 801075a:	f06f 0305 	mvn.w	r3, #5
 801075e:	e004      	b.n	801076a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	f47f af61 	bne.w	801062a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3718      	adds	r7, #24
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	0801a97c 	.word	0x0801a97c
 8010778:	0801ac24 	.word	0x0801ac24
 801077c:	0801a9dc 	.word	0x0801a9dc
 8010780:	0801ac54 	.word	0x0801ac54
 8010784:	0801ac6c 	.word	0x0801ac6c
 8010788:	0801ac88 	.word	0x0801ac88
 801078c:	0801ac98 	.word	0x0801ac98

08010790 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b088      	sub	sp, #32
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	4611      	mov	r1, r2
 801079c:	461a      	mov	r2, r3
 801079e:	460b      	mov	r3, r1
 80107a0:	80fb      	strh	r3, [r7, #6]
 80107a2:	4613      	mov	r3, r2
 80107a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d108      	bne.n	80107c6 <pbuf_copy_partial+0x36>
 80107b4:	4b2b      	ldr	r3, [pc, #172]	; (8010864 <pbuf_copy_partial+0xd4>)
 80107b6:	f240 420a 	movw	r2, #1034	; 0x40a
 80107ba:	492b      	ldr	r1, [pc, #172]	; (8010868 <pbuf_copy_partial+0xd8>)
 80107bc:	482b      	ldr	r0, [pc, #172]	; (801086c <pbuf_copy_partial+0xdc>)
 80107be:	f008 fac9 	bl	8018d54 <iprintf>
 80107c2:	2300      	movs	r3, #0
 80107c4:	e04a      	b.n	801085c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d108      	bne.n	80107de <pbuf_copy_partial+0x4e>
 80107cc:	4b25      	ldr	r3, [pc, #148]	; (8010864 <pbuf_copy_partial+0xd4>)
 80107ce:	f240 420b 	movw	r2, #1035	; 0x40b
 80107d2:	4927      	ldr	r1, [pc, #156]	; (8010870 <pbuf_copy_partial+0xe0>)
 80107d4:	4825      	ldr	r0, [pc, #148]	; (801086c <pbuf_copy_partial+0xdc>)
 80107d6:	f008 fabd 	bl	8018d54 <iprintf>
 80107da:	2300      	movs	r3, #0
 80107dc:	e03e      	b.n	801085c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	61fb      	str	r3, [r7, #28]
 80107e2:	e034      	b.n	801084e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80107e4:	88bb      	ldrh	r3, [r7, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d00a      	beq.n	8010800 <pbuf_copy_partial+0x70>
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	895b      	ldrh	r3, [r3, #10]
 80107ee:	88ba      	ldrh	r2, [r7, #4]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d305      	bcc.n	8010800 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	895b      	ldrh	r3, [r3, #10]
 80107f8:	88ba      	ldrh	r2, [r7, #4]
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	80bb      	strh	r3, [r7, #4]
 80107fe:	e023      	b.n	8010848 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	895a      	ldrh	r2, [r3, #10]
 8010804:	88bb      	ldrh	r3, [r7, #4]
 8010806:	1ad3      	subs	r3, r2, r3
 8010808:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801080a:	8b3a      	ldrh	r2, [r7, #24]
 801080c:	88fb      	ldrh	r3, [r7, #6]
 801080e:	429a      	cmp	r2, r3
 8010810:	d901      	bls.n	8010816 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010812:	88fb      	ldrh	r3, [r7, #6]
 8010814:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010816:	8b7b      	ldrh	r3, [r7, #26]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	18d0      	adds	r0, r2, r3
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	88bb      	ldrh	r3, [r7, #4]
 8010822:	4413      	add	r3, r2
 8010824:	8b3a      	ldrh	r2, [r7, #24]
 8010826:	4619      	mov	r1, r3
 8010828:	f008 f9cf 	bl	8018bca <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801082c:	8afa      	ldrh	r2, [r7, #22]
 801082e:	8b3b      	ldrh	r3, [r7, #24]
 8010830:	4413      	add	r3, r2
 8010832:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010834:	8b7a      	ldrh	r2, [r7, #26]
 8010836:	8b3b      	ldrh	r3, [r7, #24]
 8010838:	4413      	add	r3, r2
 801083a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801083c:	88fa      	ldrh	r2, [r7, #6]
 801083e:	8b3b      	ldrh	r3, [r7, #24]
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010844:	2300      	movs	r3, #0
 8010846:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	61fb      	str	r3, [r7, #28]
 801084e:	88fb      	ldrh	r3, [r7, #6]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <pbuf_copy_partial+0xca>
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1c4      	bne.n	80107e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801085a:	8afb      	ldrh	r3, [r7, #22]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3720      	adds	r7, #32
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	0801a97c 	.word	0x0801a97c
 8010868:	0801acc4 	.word	0x0801acc4
 801086c:	0801a9dc 	.word	0x0801a9dc
 8010870:	0801ace4 	.word	0x0801ace4

08010874 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	603a      	str	r2, [r7, #0]
 801087e:	71fb      	strb	r3, [r7, #7]
 8010880:	460b      	mov	r3, r1
 8010882:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	8919      	ldrh	r1, [r3, #8]
 8010888:	88ba      	ldrh	r2, [r7, #4]
 801088a:	79fb      	ldrb	r3, [r7, #7]
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff faa5 	bl	800fddc <pbuf_alloc>
 8010892:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d101      	bne.n	801089e <pbuf_clone+0x2a>
    return NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	e011      	b.n	80108c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801089e:	6839      	ldr	r1, [r7, #0]
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f7ff fea3 	bl	80105ec <pbuf_copy>
 80108a6:	4603      	mov	r3, r0
 80108a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80108aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d006      	beq.n	80108c0 <pbuf_clone+0x4c>
 80108b2:	4b06      	ldr	r3, [pc, #24]	; (80108cc <pbuf_clone+0x58>)
 80108b4:	f240 5224 	movw	r2, #1316	; 0x524
 80108b8:	4905      	ldr	r1, [pc, #20]	; (80108d0 <pbuf_clone+0x5c>)
 80108ba:	4806      	ldr	r0, [pc, #24]	; (80108d4 <pbuf_clone+0x60>)
 80108bc:	f008 fa4a 	bl	8018d54 <iprintf>
  return q;
 80108c0:	68fb      	ldr	r3, [r7, #12]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	0801a97c 	.word	0x0801a97c
 80108d0:	0801adf0 	.word	0x0801adf0
 80108d4:	0801a9dc 	.word	0x0801a9dc

080108d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80108dc:	f008 fac8 	bl	8018e70 <rand>
 80108e0:	4603      	mov	r3, r0
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	4b01      	ldr	r3, [pc, #4]	; (80108f8 <tcp_init+0x20>)
 80108f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80108f4:	bf00      	nop
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	20000090 	.word	0x20000090

080108fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	7d1b      	ldrb	r3, [r3, #20]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d105      	bne.n	8010918 <tcp_free+0x1c>
 801090c:	4b06      	ldr	r3, [pc, #24]	; (8010928 <tcp_free+0x2c>)
 801090e:	22d4      	movs	r2, #212	; 0xd4
 8010910:	4906      	ldr	r1, [pc, #24]	; (801092c <tcp_free+0x30>)
 8010912:	4807      	ldr	r0, [pc, #28]	; (8010930 <tcp_free+0x34>)
 8010914:	f008 fa1e 	bl	8018d54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010918:	6879      	ldr	r1, [r7, #4]
 801091a:	2001      	movs	r0, #1
 801091c:	f7fe fe9e 	bl	800f65c <memp_free>
}
 8010920:	bf00      	nop
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	0801ae7c 	.word	0x0801ae7c
 801092c:	0801aeac 	.word	0x0801aeac
 8010930:	0801aec0 	.word	0x0801aec0

08010934 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	7d1b      	ldrb	r3, [r3, #20]
 8010940:	2b01      	cmp	r3, #1
 8010942:	d105      	bne.n	8010950 <tcp_free_listen+0x1c>
 8010944:	4b06      	ldr	r3, [pc, #24]	; (8010960 <tcp_free_listen+0x2c>)
 8010946:	22df      	movs	r2, #223	; 0xdf
 8010948:	4906      	ldr	r1, [pc, #24]	; (8010964 <tcp_free_listen+0x30>)
 801094a:	4807      	ldr	r0, [pc, #28]	; (8010968 <tcp_free_listen+0x34>)
 801094c:	f008 fa02 	bl	8018d54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010950:	6879      	ldr	r1, [r7, #4]
 8010952:	2002      	movs	r0, #2
 8010954:	f7fe fe82 	bl	800f65c <memp_free>
}
 8010958:	bf00      	nop
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}
 8010960:	0801ae7c 	.word	0x0801ae7c
 8010964:	0801aee8 	.word	0x0801aee8
 8010968:	0801aec0 	.word	0x0801aec0

0801096c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010970:	f000 fea2 	bl	80116b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010974:	4b07      	ldr	r3, [pc, #28]	; (8010994 <tcp_tmr+0x28>)
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	3301      	adds	r3, #1
 801097a:	b2da      	uxtb	r2, r3
 801097c:	4b05      	ldr	r3, [pc, #20]	; (8010994 <tcp_tmr+0x28>)
 801097e:	701a      	strb	r2, [r3, #0]
 8010980:	4b04      	ldr	r3, [pc, #16]	; (8010994 <tcp_tmr+0x28>)
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d001      	beq.n	8010990 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801098c:	f000 fb54 	bl	8011038 <tcp_slowtmr>
  }
}
 8010990:	bf00      	nop
 8010992:	bd80      	pop	{r7, pc}
 8010994:	2000d99d 	.word	0x2000d99d

08010998 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d105      	bne.n	80109b4 <tcp_remove_listener+0x1c>
 80109a8:	4b0d      	ldr	r3, [pc, #52]	; (80109e0 <tcp_remove_listener+0x48>)
 80109aa:	22ff      	movs	r2, #255	; 0xff
 80109ac:	490d      	ldr	r1, [pc, #52]	; (80109e4 <tcp_remove_listener+0x4c>)
 80109ae:	480e      	ldr	r0, [pc, #56]	; (80109e8 <tcp_remove_listener+0x50>)
 80109b0:	f008 f9d0 	bl	8018d54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	60fb      	str	r3, [r7, #12]
 80109b8:	e00a      	b.n	80109d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109be:	683a      	ldr	r2, [r7, #0]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d102      	bne.n	80109ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2200      	movs	r2, #0
 80109c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	60fb      	str	r3, [r7, #12]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1f1      	bne.n	80109ba <tcp_remove_listener+0x22>
    }
  }
}
 80109d6:	bf00      	nop
 80109d8:	bf00      	nop
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	0801ae7c 	.word	0x0801ae7c
 80109e4:	0801af04 	.word	0x0801af04
 80109e8:	0801aec0 	.word	0x0801aec0

080109ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d106      	bne.n	8010a08 <tcp_listen_closed+0x1c>
 80109fa:	4b14      	ldr	r3, [pc, #80]	; (8010a4c <tcp_listen_closed+0x60>)
 80109fc:	f240 1211 	movw	r2, #273	; 0x111
 8010a00:	4913      	ldr	r1, [pc, #76]	; (8010a50 <tcp_listen_closed+0x64>)
 8010a02:	4814      	ldr	r0, [pc, #80]	; (8010a54 <tcp_listen_closed+0x68>)
 8010a04:	f008 f9a6 	bl	8018d54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	7d1b      	ldrb	r3, [r3, #20]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d006      	beq.n	8010a1e <tcp_listen_closed+0x32>
 8010a10:	4b0e      	ldr	r3, [pc, #56]	; (8010a4c <tcp_listen_closed+0x60>)
 8010a12:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010a16:	4910      	ldr	r1, [pc, #64]	; (8010a58 <tcp_listen_closed+0x6c>)
 8010a18:	480e      	ldr	r0, [pc, #56]	; (8010a54 <tcp_listen_closed+0x68>)
 8010a1a:	f008 f99b 	bl	8018d54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010a1e:	2301      	movs	r3, #1
 8010a20:	60fb      	str	r3, [r7, #12]
 8010a22:	e00b      	b.n	8010a3c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010a24:	4a0d      	ldr	r2, [pc, #52]	; (8010a5c <tcp_listen_closed+0x70>)
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	6879      	ldr	r1, [r7, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7ff ffb1 	bl	8010998 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	60fb      	str	r3, [r7, #12]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b03      	cmp	r3, #3
 8010a40:	d9f0      	bls.n	8010a24 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010a42:	bf00      	nop
 8010a44:	bf00      	nop
 8010a46:	3710      	adds	r7, #16
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	0801ae7c 	.word	0x0801ae7c
 8010a50:	0801af2c 	.word	0x0801af2c
 8010a54:	0801aec0 	.word	0x0801aec0
 8010a58:	0801af38 	.word	0x0801af38
 8010a5c:	0801cf3c 	.word	0x0801cf3c

08010a60 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010a60:	b5b0      	push	{r4, r5, r7, lr}
 8010a62:	b088      	sub	sp, #32
 8010a64:	af04      	add	r7, sp, #16
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	460b      	mov	r3, r1
 8010a6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <tcp_close_shutdown+0x20>
 8010a72:	4b63      	ldr	r3, [pc, #396]	; (8010c00 <tcp_close_shutdown+0x1a0>)
 8010a74:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010a78:	4962      	ldr	r1, [pc, #392]	; (8010c04 <tcp_close_shutdown+0x1a4>)
 8010a7a:	4863      	ldr	r0, [pc, #396]	; (8010c08 <tcp_close_shutdown+0x1a8>)
 8010a7c:	f008 f96a 	bl	8018d54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010a80:	78fb      	ldrb	r3, [r7, #3]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d066      	beq.n	8010b54 <tcp_close_shutdown+0xf4>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	7d1b      	ldrb	r3, [r3, #20]
 8010a8a:	2b04      	cmp	r3, #4
 8010a8c:	d003      	beq.n	8010a96 <tcp_close_shutdown+0x36>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	7d1b      	ldrb	r3, [r3, #20]
 8010a92:	2b07      	cmp	r3, #7
 8010a94:	d15e      	bne.n	8010b54 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d104      	bne.n	8010aa8 <tcp_close_shutdown+0x48>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010aa2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010aa6:	d055      	beq.n	8010b54 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	8b5b      	ldrh	r3, [r3, #26]
 8010aac:	f003 0310 	and.w	r3, r3, #16
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d106      	bne.n	8010ac2 <tcp_close_shutdown+0x62>
 8010ab4:	4b52      	ldr	r3, [pc, #328]	; (8010c00 <tcp_close_shutdown+0x1a0>)
 8010ab6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010aba:	4954      	ldr	r1, [pc, #336]	; (8010c0c <tcp_close_shutdown+0x1ac>)
 8010abc:	4852      	ldr	r0, [pc, #328]	; (8010c08 <tcp_close_shutdown+0x1a8>)
 8010abe:	f008 f949 	bl	8018d54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010aca:	687d      	ldr	r5, [r7, #4]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	3304      	adds	r3, #4
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	8ad2      	ldrh	r2, [r2, #22]
 8010ad4:	6879      	ldr	r1, [r7, #4]
 8010ad6:	8b09      	ldrh	r1, [r1, #24]
 8010ad8:	9102      	str	r1, [sp, #8]
 8010ada:	9201      	str	r2, [sp, #4]
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	462b      	mov	r3, r5
 8010ae0:	4622      	mov	r2, r4
 8010ae2:	4601      	mov	r1, r0
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f004 fe91 	bl	801580c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f001 f8c6 	bl	8011c7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010af0:	4b47      	ldr	r3, [pc, #284]	; (8010c10 <tcp_close_shutdown+0x1b0>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d105      	bne.n	8010b06 <tcp_close_shutdown+0xa6>
 8010afa:	4b45      	ldr	r3, [pc, #276]	; (8010c10 <tcp_close_shutdown+0x1b0>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	4a43      	ldr	r2, [pc, #268]	; (8010c10 <tcp_close_shutdown+0x1b0>)
 8010b02:	6013      	str	r3, [r2, #0]
 8010b04:	e013      	b.n	8010b2e <tcp_close_shutdown+0xce>
 8010b06:	4b42      	ldr	r3, [pc, #264]	; (8010c10 <tcp_close_shutdown+0x1b0>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	60fb      	str	r3, [r7, #12]
 8010b0c:	e00c      	b.n	8010b28 <tcp_close_shutdown+0xc8>
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d104      	bne.n	8010b22 <tcp_close_shutdown+0xc2>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	68da      	ldr	r2, [r3, #12]
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	60da      	str	r2, [r3, #12]
 8010b20:	e005      	b.n	8010b2e <tcp_close_shutdown+0xce>
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	60fb      	str	r3, [r7, #12]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1ef      	bne.n	8010b0e <tcp_close_shutdown+0xae>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	60da      	str	r2, [r3, #12]
 8010b34:	4b37      	ldr	r3, [pc, #220]	; (8010c14 <tcp_close_shutdown+0x1b4>)
 8010b36:	2201      	movs	r2, #1
 8010b38:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010b3a:	4b37      	ldr	r3, [pc, #220]	; (8010c18 <tcp_close_shutdown+0x1b8>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	687a      	ldr	r2, [r7, #4]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d102      	bne.n	8010b4a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010b44:	f003 fd5e 	bl	8014604 <tcp_trigger_input_pcb_close>
 8010b48:	e002      	b.n	8010b50 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7ff fed6 	bl	80108fc <tcp_free>
      }
      return ERR_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	e050      	b.n	8010bf6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7d1b      	ldrb	r3, [r3, #20]
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	d03b      	beq.n	8010bd4 <tcp_close_shutdown+0x174>
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	dc44      	bgt.n	8010bea <tcp_close_shutdown+0x18a>
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <tcp_close_shutdown+0x10a>
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d02a      	beq.n	8010bbe <tcp_close_shutdown+0x15e>
 8010b68:	e03f      	b.n	8010bea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	8adb      	ldrh	r3, [r3, #22]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d021      	beq.n	8010bb6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010b72:	4b2a      	ldr	r3, [pc, #168]	; (8010c1c <tcp_close_shutdown+0x1bc>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d105      	bne.n	8010b88 <tcp_close_shutdown+0x128>
 8010b7c:	4b27      	ldr	r3, [pc, #156]	; (8010c1c <tcp_close_shutdown+0x1bc>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	4a26      	ldr	r2, [pc, #152]	; (8010c1c <tcp_close_shutdown+0x1bc>)
 8010b84:	6013      	str	r3, [r2, #0]
 8010b86:	e013      	b.n	8010bb0 <tcp_close_shutdown+0x150>
 8010b88:	4b24      	ldr	r3, [pc, #144]	; (8010c1c <tcp_close_shutdown+0x1bc>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	60bb      	str	r3, [r7, #8]
 8010b8e:	e00c      	b.n	8010baa <tcp_close_shutdown+0x14a>
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d104      	bne.n	8010ba4 <tcp_close_shutdown+0x144>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	68da      	ldr	r2, [r3, #12]
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	60da      	str	r2, [r3, #12]
 8010ba2:	e005      	b.n	8010bb0 <tcp_close_shutdown+0x150>
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	60bb      	str	r3, [r7, #8]
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1ef      	bne.n	8010b90 <tcp_close_shutdown+0x130>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f7ff fea0 	bl	80108fc <tcp_free>
      break;
 8010bbc:	e01a      	b.n	8010bf4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f7ff ff14 	bl	80109ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010bc4:	6879      	ldr	r1, [r7, #4]
 8010bc6:	4816      	ldr	r0, [pc, #88]	; (8010c20 <tcp_close_shutdown+0x1c0>)
 8010bc8:	f001 f8a8 	bl	8011d1c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7ff feb1 	bl	8010934 <tcp_free_listen>
      break;
 8010bd2:	e00f      	b.n	8010bf4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010bd4:	6879      	ldr	r1, [r7, #4]
 8010bd6:	480e      	ldr	r0, [pc, #56]	; (8010c10 <tcp_close_shutdown+0x1b0>)
 8010bd8:	f001 f8a0 	bl	8011d1c <tcp_pcb_remove>
 8010bdc:	4b0d      	ldr	r3, [pc, #52]	; (8010c14 <tcp_close_shutdown+0x1b4>)
 8010bde:	2201      	movs	r2, #1
 8010be0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff fe8a 	bl	80108fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010be8:	e004      	b.n	8010bf4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f81a 	bl	8010c24 <tcp_close_shutdown_fin>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	e000      	b.n	8010bf6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	0801ae7c 	.word	0x0801ae7c
 8010c04:	0801af50 	.word	0x0801af50
 8010c08:	0801aec0 	.word	0x0801aec0
 8010c0c:	0801af70 	.word	0x0801af70
 8010c10:	2000d994 	.word	0x2000d994
 8010c14:	2000d99c 	.word	0x2000d99c
 8010c18:	2000d9d4 	.word	0x2000d9d4
 8010c1c:	2000d98c 	.word	0x2000d98c
 8010c20:	2000d990 	.word	0x2000d990

08010c24 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d106      	bne.n	8010c40 <tcp_close_shutdown_fin+0x1c>
 8010c32:	4b2e      	ldr	r3, [pc, #184]	; (8010cec <tcp_close_shutdown_fin+0xc8>)
 8010c34:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010c38:	492d      	ldr	r1, [pc, #180]	; (8010cf0 <tcp_close_shutdown_fin+0xcc>)
 8010c3a:	482e      	ldr	r0, [pc, #184]	; (8010cf4 <tcp_close_shutdown_fin+0xd0>)
 8010c3c:	f008 f88a 	bl	8018d54 <iprintf>

  switch (pcb->state) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	7d1b      	ldrb	r3, [r3, #20]
 8010c44:	2b07      	cmp	r3, #7
 8010c46:	d020      	beq.n	8010c8a <tcp_close_shutdown_fin+0x66>
 8010c48:	2b07      	cmp	r3, #7
 8010c4a:	dc2b      	bgt.n	8010ca4 <tcp_close_shutdown_fin+0x80>
 8010c4c:	2b03      	cmp	r3, #3
 8010c4e:	d002      	beq.n	8010c56 <tcp_close_shutdown_fin+0x32>
 8010c50:	2b04      	cmp	r3, #4
 8010c52:	d00d      	beq.n	8010c70 <tcp_close_shutdown_fin+0x4c>
 8010c54:	e026      	b.n	8010ca4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f003 fee6 	bl	8014a28 <tcp_send_fin>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d11f      	bne.n	8010ca8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2205      	movs	r2, #5
 8010c6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010c6e:	e01b      	b.n	8010ca8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f003 fed9 	bl	8014a28 <tcp_send_fin>
 8010c76:	4603      	mov	r3, r0
 8010c78:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d114      	bne.n	8010cac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2205      	movs	r2, #5
 8010c86:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010c88:	e010      	b.n	8010cac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f003 fecc 	bl	8014a28 <tcp_send_fin>
 8010c90:	4603      	mov	r3, r0
 8010c92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d109      	bne.n	8010cb0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2209      	movs	r2, #9
 8010ca0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ca2:	e005      	b.n	8010cb0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	e01c      	b.n	8010ce2 <tcp_close_shutdown_fin+0xbe>
      break;
 8010ca8:	bf00      	nop
 8010caa:	e002      	b.n	8010cb2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010cac:	bf00      	nop
 8010cae:	e000      	b.n	8010cb2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010cb0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d103      	bne.n	8010cc2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f003 fff2 	bl	8014ca4 <tcp_output>
 8010cc0:	e00d      	b.n	8010cde <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cca:	d108      	bne.n	8010cde <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	8b5b      	ldrh	r3, [r3, #26]
 8010cd0:	f043 0308 	orr.w	r3, r3, #8
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	e001      	b.n	8010ce2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	0801ae7c 	.word	0x0801ae7c
 8010cf0:	0801af2c 	.word	0x0801af2c
 8010cf4:	0801aec0 	.word	0x0801aec0

08010cf8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d109      	bne.n	8010d1a <tcp_close+0x22>
 8010d06:	4b0f      	ldr	r3, [pc, #60]	; (8010d44 <tcp_close+0x4c>)
 8010d08:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010d0c:	490e      	ldr	r1, [pc, #56]	; (8010d48 <tcp_close+0x50>)
 8010d0e:	480f      	ldr	r0, [pc, #60]	; (8010d4c <tcp_close+0x54>)
 8010d10:	f008 f820 	bl	8018d54 <iprintf>
 8010d14:	f06f 030f 	mvn.w	r3, #15
 8010d18:	e00f      	b.n	8010d3a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	7d1b      	ldrb	r3, [r3, #20]
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d006      	beq.n	8010d30 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	8b5b      	ldrh	r3, [r3, #26]
 8010d26:	f043 0310 	orr.w	r3, r3, #16
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010d30:	2101      	movs	r1, #1
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff fe94 	bl	8010a60 <tcp_close_shutdown>
 8010d38:	4603      	mov	r3, r0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3708      	adds	r7, #8
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	0801ae7c 	.word	0x0801ae7c
 8010d48:	0801af8c 	.word	0x0801af8c
 8010d4c:	0801aec0 	.word	0x0801aec0

08010d50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b08e      	sub	sp, #56	; 0x38
 8010d54:	af04      	add	r7, sp, #16
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d107      	bne.n	8010d70 <tcp_abandon+0x20>
 8010d60:	4b52      	ldr	r3, [pc, #328]	; (8010eac <tcp_abandon+0x15c>)
 8010d62:	f240 223d 	movw	r2, #573	; 0x23d
 8010d66:	4952      	ldr	r1, [pc, #328]	; (8010eb0 <tcp_abandon+0x160>)
 8010d68:	4852      	ldr	r0, [pc, #328]	; (8010eb4 <tcp_abandon+0x164>)
 8010d6a:	f007 fff3 	bl	8018d54 <iprintf>
 8010d6e:	e099      	b.n	8010ea4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	7d1b      	ldrb	r3, [r3, #20]
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	d106      	bne.n	8010d86 <tcp_abandon+0x36>
 8010d78:	4b4c      	ldr	r3, [pc, #304]	; (8010eac <tcp_abandon+0x15c>)
 8010d7a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010d7e:	494e      	ldr	r1, [pc, #312]	; (8010eb8 <tcp_abandon+0x168>)
 8010d80:	484c      	ldr	r0, [pc, #304]	; (8010eb4 <tcp_abandon+0x164>)
 8010d82:	f007 ffe7 	bl	8018d54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	7d1b      	ldrb	r3, [r3, #20]
 8010d8a:	2b0a      	cmp	r3, #10
 8010d8c:	d107      	bne.n	8010d9e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	484a      	ldr	r0, [pc, #296]	; (8010ebc <tcp_abandon+0x16c>)
 8010d92:	f000 ffc3 	bl	8011d1c <tcp_pcb_remove>
    tcp_free(pcb);
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7ff fdb0 	bl	80108fc <tcp_free>
 8010d9c:	e082      	b.n	8010ea4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010da2:	2300      	movs	r3, #0
 8010da4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010daa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010db8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	7d1b      	ldrb	r3, [r3, #20]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d126      	bne.n	8010e16 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	8adb      	ldrh	r3, [r3, #22]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d02e      	beq.n	8010e2e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010dd0:	4b3b      	ldr	r3, [pc, #236]	; (8010ec0 <tcp_abandon+0x170>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d105      	bne.n	8010de6 <tcp_abandon+0x96>
 8010dda:	4b39      	ldr	r3, [pc, #228]	; (8010ec0 <tcp_abandon+0x170>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	4a37      	ldr	r2, [pc, #220]	; (8010ec0 <tcp_abandon+0x170>)
 8010de2:	6013      	str	r3, [r2, #0]
 8010de4:	e013      	b.n	8010e0e <tcp_abandon+0xbe>
 8010de6:	4b36      	ldr	r3, [pc, #216]	; (8010ec0 <tcp_abandon+0x170>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	61fb      	str	r3, [r7, #28]
 8010dec:	e00c      	b.n	8010e08 <tcp_abandon+0xb8>
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d104      	bne.n	8010e02 <tcp_abandon+0xb2>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	68da      	ldr	r2, [r3, #12]
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	60da      	str	r2, [r3, #12]
 8010e00:	e005      	b.n	8010e0e <tcp_abandon+0xbe>
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	61fb      	str	r3, [r7, #28]
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d1ef      	bne.n	8010dee <tcp_abandon+0x9e>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2200      	movs	r2, #0
 8010e12:	60da      	str	r2, [r3, #12]
 8010e14:	e00b      	b.n	8010e2e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	8adb      	ldrh	r3, [r3, #22]
 8010e1e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010e20:	6879      	ldr	r1, [r7, #4]
 8010e22:	4828      	ldr	r0, [pc, #160]	; (8010ec4 <tcp_abandon+0x174>)
 8010e24:	f000 ff7a 	bl	8011d1c <tcp_pcb_remove>
 8010e28:	4b27      	ldr	r3, [pc, #156]	; (8010ec8 <tcp_abandon+0x178>)
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d004      	beq.n	8010e40 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 fd1c 	bl	8011878 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d004      	beq.n	8010e52 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 fd13 	bl	8011878 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d004      	beq.n	8010e64 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f000 fd0a 	bl	8011878 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00e      	beq.n	8010e88 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010e6a:	6879      	ldr	r1, [r7, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3304      	adds	r3, #4
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	8b12      	ldrh	r2, [r2, #24]
 8010e74:	9202      	str	r2, [sp, #8]
 8010e76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e78:	9201      	str	r2, [sp, #4]
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	697a      	ldr	r2, [r7, #20]
 8010e80:	69b9      	ldr	r1, [r7, #24]
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f004 fcc2 	bl	801580c <tcp_rst>
    }
    last_state = pcb->state;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	7d1b      	ldrb	r3, [r3, #20]
 8010e8c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff fd34 	bl	80108fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d004      	beq.n	8010ea4 <tcp_abandon+0x154>
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	f06f 010c 	mvn.w	r1, #12
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	4798      	blx	r3
  }
}
 8010ea4:	3728      	adds	r7, #40	; 0x28
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	0801ae7c 	.word	0x0801ae7c
 8010eb0:	0801afc0 	.word	0x0801afc0
 8010eb4:	0801aec0 	.word	0x0801aec0
 8010eb8:	0801afdc 	.word	0x0801afdc
 8010ebc:	2000d998 	.word	0x2000d998
 8010ec0:	2000d98c 	.word	0x2000d98c
 8010ec4:	2000d994 	.word	0x2000d994
 8010ec8:	2000d99c 	.word	0x2000d99c

08010ecc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010ed4:	2101      	movs	r1, #1
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7ff ff3a 	bl	8010d50 <tcp_abandon>
}
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b084      	sub	sp, #16
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d106      	bne.n	8010f00 <tcp_update_rcv_ann_wnd+0x1c>
 8010ef2:	4b25      	ldr	r3, [pc, #148]	; (8010f88 <tcp_update_rcv_ann_wnd+0xa4>)
 8010ef4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010ef8:	4924      	ldr	r1, [pc, #144]	; (8010f8c <tcp_update_rcv_ann_wnd+0xa8>)
 8010efa:	4825      	ldr	r0, [pc, #148]	; (8010f90 <tcp_update_rcv_ann_wnd+0xac>)
 8010efc:	f007 ff2a 	bl	8018d54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010f08:	4413      	add	r3, r2
 8010f0a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010f14:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010f18:	bf28      	it	cs
 8010f1a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010f1e:	b292      	uxth	r2, r2
 8010f20:	4413      	add	r3, r2
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	db08      	blt.n	8010f3c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	1ad3      	subs	r3, r2, r3
 8010f3a:	e020      	b.n	8010f7e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	dd03      	ble.n	8010f52 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010f50:	e014      	b.n	8010f7c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f64:	d306      	bcc.n	8010f74 <tcp_update_rcv_ann_wnd+0x90>
 8010f66:	4b08      	ldr	r3, [pc, #32]	; (8010f88 <tcp_update_rcv_ann_wnd+0xa4>)
 8010f68:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010f6c:	4909      	ldr	r1, [pc, #36]	; (8010f94 <tcp_update_rcv_ann_wnd+0xb0>)
 8010f6e:	4808      	ldr	r0, [pc, #32]	; (8010f90 <tcp_update_rcv_ann_wnd+0xac>)
 8010f70:	f007 fef0 	bl	8018d54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010f7c:	2300      	movs	r3, #0
  }
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	0801ae7c 	.word	0x0801ae7c
 8010f8c:	0801b0d8 	.word	0x0801b0d8
 8010f90:	0801aec0 	.word	0x0801aec0
 8010f94:	0801b0fc 	.word	0x0801b0fc

08010f98 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d107      	bne.n	8010fba <tcp_recved+0x22>
 8010faa:	4b1f      	ldr	r3, [pc, #124]	; (8011028 <tcp_recved+0x90>)
 8010fac:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010fb0:	491e      	ldr	r1, [pc, #120]	; (801102c <tcp_recved+0x94>)
 8010fb2:	481f      	ldr	r0, [pc, #124]	; (8011030 <tcp_recved+0x98>)
 8010fb4:	f007 fece 	bl	8018d54 <iprintf>
 8010fb8:	e032      	b.n	8011020 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	7d1b      	ldrb	r3, [r3, #20]
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d106      	bne.n	8010fd0 <tcp_recved+0x38>
 8010fc2:	4b19      	ldr	r3, [pc, #100]	; (8011028 <tcp_recved+0x90>)
 8010fc4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010fc8:	491a      	ldr	r1, [pc, #104]	; (8011034 <tcp_recved+0x9c>)
 8010fca:	4819      	ldr	r0, [pc, #100]	; (8011030 <tcp_recved+0x98>)
 8010fcc:	f007 fec2 	bl	8018d54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010fd4:	887b      	ldrh	r3, [r7, #2]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010fda:	89fb      	ldrh	r3, [r7, #14]
 8010fdc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010fe0:	d804      	bhi.n	8010fec <tcp_recved+0x54>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010fe6:	89fa      	ldrh	r2, [r7, #14]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d204      	bcs.n	8010ff6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010ff2:	851a      	strh	r2, [r3, #40]	; 0x28
 8010ff4:	e002      	b.n	8010ffc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	89fa      	ldrh	r2, [r7, #14]
 8010ffa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ff71 	bl	8010ee4 <tcp_update_rcv_ann_wnd>
 8011002:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801100a:	d309      	bcc.n	8011020 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	8b5b      	ldrh	r3, [r3, #26]
 8011010:	f043 0302 	orr.w	r3, r3, #2
 8011014:	b29a      	uxth	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f003 fe42 	bl	8014ca4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	0801ae7c 	.word	0x0801ae7c
 801102c:	0801b118 	.word	0x0801b118
 8011030:	0801aec0 	.word	0x0801aec0
 8011034:	0801b130 	.word	0x0801b130

08011038 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011038:	b5b0      	push	{r4, r5, r7, lr}
 801103a:	b090      	sub	sp, #64	; 0x40
 801103c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801103e:	2300      	movs	r3, #0
 8011040:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011044:	4b94      	ldr	r3, [pc, #592]	; (8011298 <tcp_slowtmr+0x260>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	3301      	adds	r3, #1
 801104a:	4a93      	ldr	r2, [pc, #588]	; (8011298 <tcp_slowtmr+0x260>)
 801104c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801104e:	4b93      	ldr	r3, [pc, #588]	; (801129c <tcp_slowtmr+0x264>)
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	3301      	adds	r3, #1
 8011054:	b2da      	uxtb	r2, r3
 8011056:	4b91      	ldr	r3, [pc, #580]	; (801129c <tcp_slowtmr+0x264>)
 8011058:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801105a:	2300      	movs	r3, #0
 801105c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801105e:	4b90      	ldr	r3, [pc, #576]	; (80112a0 <tcp_slowtmr+0x268>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011064:	e29f      	b.n	80115a6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	7d1b      	ldrb	r3, [r3, #20]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d106      	bne.n	801107c <tcp_slowtmr+0x44>
 801106e:	4b8d      	ldr	r3, [pc, #564]	; (80112a4 <tcp_slowtmr+0x26c>)
 8011070:	f240 42be 	movw	r2, #1214	; 0x4be
 8011074:	498c      	ldr	r1, [pc, #560]	; (80112a8 <tcp_slowtmr+0x270>)
 8011076:	488d      	ldr	r0, [pc, #564]	; (80112ac <tcp_slowtmr+0x274>)
 8011078:	f007 fe6c 	bl	8018d54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	7d1b      	ldrb	r3, [r3, #20]
 8011080:	2b01      	cmp	r3, #1
 8011082:	d106      	bne.n	8011092 <tcp_slowtmr+0x5a>
 8011084:	4b87      	ldr	r3, [pc, #540]	; (80112a4 <tcp_slowtmr+0x26c>)
 8011086:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801108a:	4989      	ldr	r1, [pc, #548]	; (80112b0 <tcp_slowtmr+0x278>)
 801108c:	4887      	ldr	r0, [pc, #540]	; (80112ac <tcp_slowtmr+0x274>)
 801108e:	f007 fe61 	bl	8018d54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	7d1b      	ldrb	r3, [r3, #20]
 8011096:	2b0a      	cmp	r3, #10
 8011098:	d106      	bne.n	80110a8 <tcp_slowtmr+0x70>
 801109a:	4b82      	ldr	r3, [pc, #520]	; (80112a4 <tcp_slowtmr+0x26c>)
 801109c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80110a0:	4984      	ldr	r1, [pc, #528]	; (80112b4 <tcp_slowtmr+0x27c>)
 80110a2:	4882      	ldr	r0, [pc, #520]	; (80112ac <tcp_slowtmr+0x274>)
 80110a4:	f007 fe56 	bl	8018d54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	7f9a      	ldrb	r2, [r3, #30]
 80110ac:	4b7b      	ldr	r3, [pc, #492]	; (801129c <tcp_slowtmr+0x264>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d105      	bne.n	80110c0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80110b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80110be:	e272      	b.n	80115a6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80110c0:	4b76      	ldr	r3, [pc, #472]	; (801129c <tcp_slowtmr+0x264>)
 80110c2:	781a      	ldrb	r2, [r3, #0]
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80110ce:	2300      	movs	r3, #0
 80110d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80110d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d6:	7d1b      	ldrb	r3, [r3, #20]
 80110d8:	2b02      	cmp	r3, #2
 80110da:	d10a      	bne.n	80110f2 <tcp_slowtmr+0xba>
 80110dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110e2:	2b05      	cmp	r3, #5
 80110e4:	d905      	bls.n	80110f2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80110e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110ea:	3301      	adds	r3, #1
 80110ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80110f0:	e11e      	b.n	8011330 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80110f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110f8:	2b0b      	cmp	r3, #11
 80110fa:	d905      	bls.n	8011108 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80110fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011100:	3301      	adds	r3, #1
 8011102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011106:	e113      	b.n	8011330 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801110e:	2b00      	cmp	r3, #0
 8011110:	d075      	beq.n	80111fe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011116:	2b00      	cmp	r3, #0
 8011118:	d006      	beq.n	8011128 <tcp_slowtmr+0xf0>
 801111a:	4b62      	ldr	r3, [pc, #392]	; (80112a4 <tcp_slowtmr+0x26c>)
 801111c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011120:	4965      	ldr	r1, [pc, #404]	; (80112b8 <tcp_slowtmr+0x280>)
 8011122:	4862      	ldr	r0, [pc, #392]	; (80112ac <tcp_slowtmr+0x274>)
 8011124:	f007 fe16 	bl	8018d54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801112c:	2b00      	cmp	r3, #0
 801112e:	d106      	bne.n	801113e <tcp_slowtmr+0x106>
 8011130:	4b5c      	ldr	r3, [pc, #368]	; (80112a4 <tcp_slowtmr+0x26c>)
 8011132:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011136:	4961      	ldr	r1, [pc, #388]	; (80112bc <tcp_slowtmr+0x284>)
 8011138:	485c      	ldr	r0, [pc, #368]	; (80112ac <tcp_slowtmr+0x274>)
 801113a:	f007 fe0b 	bl	8018d54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011140:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011144:	2b0b      	cmp	r3, #11
 8011146:	d905      	bls.n	8011154 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801114c:	3301      	adds	r3, #1
 801114e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011152:	e0ed      	b.n	8011330 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011156:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801115a:	3b01      	subs	r3, #1
 801115c:	4a58      	ldr	r2, [pc, #352]	; (80112c0 <tcp_slowtmr+0x288>)
 801115e:	5cd3      	ldrb	r3, [r2, r3]
 8011160:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011168:	7c7a      	ldrb	r2, [r7, #17]
 801116a:	429a      	cmp	r2, r3
 801116c:	d907      	bls.n	801117e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011174:	3301      	adds	r3, #1
 8011176:	b2da      	uxtb	r2, r3
 8011178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011180:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011184:	7c7a      	ldrb	r2, [r7, #17]
 8011186:	429a      	cmp	r2, r3
 8011188:	f200 80d2 	bhi.w	8011330 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801118c:	2301      	movs	r3, #1
 801118e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011196:	2b00      	cmp	r3, #0
 8011198:	d108      	bne.n	80111ac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801119a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801119c:	f004 fc2a 	bl	80159f4 <tcp_zero_window_probe>
 80111a0:	4603      	mov	r3, r0
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d014      	beq.n	80111d0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80111a6:	2300      	movs	r3, #0
 80111a8:	623b      	str	r3, [r7, #32]
 80111aa:	e011      	b.n	80111d0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80111ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111b2:	4619      	mov	r1, r3
 80111b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111b6:	f003 faef 	bl	8014798 <tcp_split_unsent_seg>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d107      	bne.n	80111d0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80111c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111c2:	f003 fd6f 	bl	8014ca4 <tcp_output>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d101      	bne.n	80111d0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	f000 80ac 	beq.w	8011330 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80111d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111da:	2200      	movs	r2, #0
 80111dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80111e6:	2b06      	cmp	r3, #6
 80111e8:	f200 80a2 	bhi.w	8011330 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80111f2:	3301      	adds	r3, #1
 80111f4:	b2da      	uxtb	r2, r3
 80111f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80111fc:	e098      	b.n	8011330 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80111fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011200:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011204:	2b00      	cmp	r3, #0
 8011206:	db0f      	blt.n	8011228 <tcp_slowtmr+0x1f0>
 8011208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801120e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011212:	4293      	cmp	r3, r2
 8011214:	d008      	beq.n	8011228 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011218:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801121c:	b29b      	uxth	r3, r3
 801121e:	3301      	adds	r3, #1
 8011220:	b29b      	uxth	r3, r3
 8011222:	b21a      	sxth	r2, r3
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011230:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011234:	429a      	cmp	r2, r3
 8011236:	db7b      	blt.n	8011330 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801123a:	f004 f825 	bl	8015288 <tcp_rexmit_rto_prepare>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d007      	beq.n	8011254 <tcp_slowtmr+0x21c>
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011248:	2b00      	cmp	r3, #0
 801124a:	d171      	bne.n	8011330 <tcp_slowtmr+0x2f8>
 801124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011250:	2b00      	cmp	r3, #0
 8011252:	d06d      	beq.n	8011330 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011256:	7d1b      	ldrb	r3, [r3, #20]
 8011258:	2b02      	cmp	r3, #2
 801125a:	d03a      	beq.n	80112d2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011262:	2b0c      	cmp	r3, #12
 8011264:	bf28      	it	cs
 8011266:	230c      	movcs	r3, #12
 8011268:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011270:	10db      	asrs	r3, r3, #3
 8011272:	b21b      	sxth	r3, r3
 8011274:	461a      	mov	r2, r3
 8011276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011278:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801127c:	4413      	add	r3, r2
 801127e:	7efa      	ldrb	r2, [r7, #27]
 8011280:	4910      	ldr	r1, [pc, #64]	; (80112c4 <tcp_slowtmr+0x28c>)
 8011282:	5c8a      	ldrb	r2, [r1, r2]
 8011284:	4093      	lsls	r3, r2
 8011286:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801128e:	4293      	cmp	r3, r2
 8011290:	dc1a      	bgt.n	80112c8 <tcp_slowtmr+0x290>
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	b21a      	sxth	r2, r3
 8011296:	e019      	b.n	80112cc <tcp_slowtmr+0x294>
 8011298:	2000d988 	.word	0x2000d988
 801129c:	2000d99e 	.word	0x2000d99e
 80112a0:	2000d994 	.word	0x2000d994
 80112a4:	0801ae7c 	.word	0x0801ae7c
 80112a8:	0801b1c0 	.word	0x0801b1c0
 80112ac:	0801aec0 	.word	0x0801aec0
 80112b0:	0801b1ec 	.word	0x0801b1ec
 80112b4:	0801b218 	.word	0x0801b218
 80112b8:	0801b248 	.word	0x0801b248
 80112bc:	0801b27c 	.word	0x0801b27c
 80112c0:	0801cf34 	.word	0x0801cf34
 80112c4:	0801cf24 	.word	0x0801cf24
 80112c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80112cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d4:	2200      	movs	r2, #0
 80112d6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80112d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80112de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112e4:	4293      	cmp	r3, r2
 80112e6:	bf28      	it	cs
 80112e8:	4613      	movcs	r3, r2
 80112ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80112ec:	8a7b      	ldrh	r3, [r7, #18]
 80112ee:	085b      	lsrs	r3, r3, #1
 80112f0:	b29a      	uxth	r2, r3
 80112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80112f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80112fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	b29b      	uxth	r3, r3
 8011306:	429a      	cmp	r2, r3
 8011308:	d206      	bcs.n	8011318 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801130e:	005b      	lsls	r3, r3, #1
 8011310:	b29a      	uxth	r2, r3
 8011312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011314:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011324:	2200      	movs	r2, #0
 8011326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801132a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801132c:	f004 f81c 	bl	8015368 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	7d1b      	ldrb	r3, [r3, #20]
 8011334:	2b06      	cmp	r3, #6
 8011336:	d111      	bne.n	801135c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133a:	8b5b      	ldrh	r3, [r3, #26]
 801133c:	f003 0310 	and.w	r3, r3, #16
 8011340:	2b00      	cmp	r3, #0
 8011342:	d00b      	beq.n	801135c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011344:	4b9d      	ldr	r3, [pc, #628]	; (80115bc <tcp_slowtmr+0x584>)
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	6a1b      	ldr	r3, [r3, #32]
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	2b28      	cmp	r3, #40	; 0x28
 8011350:	d904      	bls.n	801135c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011356:	3301      	adds	r3, #1
 8011358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135e:	7a5b      	ldrb	r3, [r3, #9]
 8011360:	f003 0308 	and.w	r3, r3, #8
 8011364:	2b00      	cmp	r3, #0
 8011366:	d04c      	beq.n	8011402 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801136c:	2b04      	cmp	r3, #4
 801136e:	d003      	beq.n	8011378 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011374:	2b07      	cmp	r3, #7
 8011376:	d144      	bne.n	8011402 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011378:	4b90      	ldr	r3, [pc, #576]	; (80115bc <tcp_slowtmr+0x584>)
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	6a1b      	ldr	r3, [r3, #32]
 8011380:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011388:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801138c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011390:	498b      	ldr	r1, [pc, #556]	; (80115c0 <tcp_slowtmr+0x588>)
 8011392:	fba1 1303 	umull	r1, r3, r1, r3
 8011396:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011398:	429a      	cmp	r2, r3
 801139a:	d90a      	bls.n	80113b2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801139c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113a0:	3301      	adds	r3, #1
 80113a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80113a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113aa:	3301      	adds	r3, #1
 80113ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80113b0:	e027      	b.n	8011402 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113b2:	4b82      	ldr	r3, [pc, #520]	; (80115bc <tcp_slowtmr+0x584>)
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b8:	6a1b      	ldr	r3, [r3, #32]
 80113ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80113bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80113c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80113c8:	4618      	mov	r0, r3
 80113ca:	4b7e      	ldr	r3, [pc, #504]	; (80115c4 <tcp_slowtmr+0x58c>)
 80113cc:	fb00 f303 	mul.w	r3, r0, r3
 80113d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80113d2:	497b      	ldr	r1, [pc, #492]	; (80115c0 <tcp_slowtmr+0x588>)
 80113d4:	fba1 1303 	umull	r1, r3, r1, r3
 80113d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113da:	429a      	cmp	r2, r3
 80113dc:	d911      	bls.n	8011402 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80113de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113e0:	f004 fac8 	bl	8015974 <tcp_keepalive>
 80113e4:	4603      	mov	r3, r0
 80113e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80113ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d107      	bne.n	8011402 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80113f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80113f8:	3301      	adds	r3, #1
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011406:	2b00      	cmp	r3, #0
 8011408:	d011      	beq.n	801142e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801140a:	4b6c      	ldr	r3, [pc, #432]	; (80115bc <tcp_slowtmr+0x584>)
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011410:	6a1b      	ldr	r3, [r3, #32]
 8011412:	1ad2      	subs	r2, r2, r3
 8011414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011416:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801141a:	4619      	mov	r1, r3
 801141c:	460b      	mov	r3, r1
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	440b      	add	r3, r1
 8011422:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011424:	429a      	cmp	r2, r3
 8011426:	d302      	bcc.n	801142e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801142a:	f000 fddb 	bl	8011fe4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011430:	7d1b      	ldrb	r3, [r3, #20]
 8011432:	2b03      	cmp	r3, #3
 8011434:	d10b      	bne.n	801144e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011436:	4b61      	ldr	r3, [pc, #388]	; (80115bc <tcp_slowtmr+0x584>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143c:	6a1b      	ldr	r3, [r3, #32]
 801143e:	1ad3      	subs	r3, r2, r3
 8011440:	2b28      	cmp	r3, #40	; 0x28
 8011442:	d904      	bls.n	801144e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011448:	3301      	adds	r3, #1
 801144a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011450:	7d1b      	ldrb	r3, [r3, #20]
 8011452:	2b09      	cmp	r3, #9
 8011454:	d10b      	bne.n	801146e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011456:	4b59      	ldr	r3, [pc, #356]	; (80115bc <tcp_slowtmr+0x584>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145c:	6a1b      	ldr	r3, [r3, #32]
 801145e:	1ad3      	subs	r3, r2, r3
 8011460:	2bf0      	cmp	r3, #240	; 0xf0
 8011462:	d904      	bls.n	801146e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011468:	3301      	adds	r3, #1
 801146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801146e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011472:	2b00      	cmp	r3, #0
 8011474:	d060      	beq.n	8011538 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801147c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801147e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011480:	f000 fbfc 	bl	8011c7c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011486:	2b00      	cmp	r3, #0
 8011488:	d010      	beq.n	80114ac <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801148a:	4b4f      	ldr	r3, [pc, #316]	; (80115c8 <tcp_slowtmr+0x590>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011490:	429a      	cmp	r2, r3
 8011492:	d106      	bne.n	80114a2 <tcp_slowtmr+0x46a>
 8011494:	4b4d      	ldr	r3, [pc, #308]	; (80115cc <tcp_slowtmr+0x594>)
 8011496:	f240 526d 	movw	r2, #1389	; 0x56d
 801149a:	494d      	ldr	r1, [pc, #308]	; (80115d0 <tcp_slowtmr+0x598>)
 801149c:	484d      	ldr	r0, [pc, #308]	; (80115d4 <tcp_slowtmr+0x59c>)
 801149e:	f007 fc59 	bl	8018d54 <iprintf>
        prev->next = pcb->next;
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	68da      	ldr	r2, [r3, #12]
 80114a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a8:	60da      	str	r2, [r3, #12]
 80114aa:	e00f      	b.n	80114cc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80114ac:	4b46      	ldr	r3, [pc, #280]	; (80115c8 <tcp_slowtmr+0x590>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d006      	beq.n	80114c4 <tcp_slowtmr+0x48c>
 80114b6:	4b45      	ldr	r3, [pc, #276]	; (80115cc <tcp_slowtmr+0x594>)
 80114b8:	f240 5271 	movw	r2, #1393	; 0x571
 80114bc:	4946      	ldr	r1, [pc, #280]	; (80115d8 <tcp_slowtmr+0x5a0>)
 80114be:	4845      	ldr	r0, [pc, #276]	; (80115d4 <tcp_slowtmr+0x59c>)
 80114c0:	f007 fc48 	bl	8018d54 <iprintf>
        tcp_active_pcbs = pcb->next;
 80114c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	4a3f      	ldr	r2, [pc, #252]	; (80115c8 <tcp_slowtmr+0x590>)
 80114ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80114cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d013      	beq.n	80114fc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80114d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80114d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80114dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80114de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e0:	3304      	adds	r3, #4
 80114e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114e4:	8ad2      	ldrh	r2, [r2, #22]
 80114e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114e8:	8b09      	ldrh	r1, [r1, #24]
 80114ea:	9102      	str	r1, [sp, #8]
 80114ec:	9201      	str	r2, [sp, #4]
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	462b      	mov	r3, r5
 80114f2:	4622      	mov	r2, r4
 80114f4:	4601      	mov	r1, r0
 80114f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114f8:	f004 f988 	bl	801580c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80114fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fe:	691b      	ldr	r3, [r3, #16]
 8011500:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011504:	7d1b      	ldrb	r3, [r3, #20]
 8011506:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011512:	6838      	ldr	r0, [r7, #0]
 8011514:	f7ff f9f2 	bl	80108fc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011518:	4b30      	ldr	r3, [pc, #192]	; (80115dc <tcp_slowtmr+0x5a4>)
 801151a:	2200      	movs	r2, #0
 801151c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d004      	beq.n	801152e <tcp_slowtmr+0x4f6>
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f06f 010c 	mvn.w	r1, #12
 801152a:	68b8      	ldr	r0, [r7, #8]
 801152c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801152e:	4b2b      	ldr	r3, [pc, #172]	; (80115dc <tcp_slowtmr+0x5a4>)
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d037      	beq.n	80115a6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011536:	e590      	b.n	801105a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011544:	7f1b      	ldrb	r3, [r3, #28]
 8011546:	3301      	adds	r3, #1
 8011548:	b2da      	uxtb	r2, r3
 801154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011550:	7f1a      	ldrb	r2, [r3, #28]
 8011552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011554:	7f5b      	ldrb	r3, [r3, #29]
 8011556:	429a      	cmp	r2, r3
 8011558:	d325      	bcc.n	80115a6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155c:	2200      	movs	r2, #0
 801155e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011560:	4b1e      	ldr	r3, [pc, #120]	; (80115dc <tcp_slowtmr+0x5a4>)
 8011562:	2200      	movs	r2, #0
 8011564:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801156c:	2b00      	cmp	r3, #0
 801156e:	d00b      	beq.n	8011588 <tcp_slowtmr+0x550>
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011578:	6912      	ldr	r2, [r2, #16]
 801157a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801157c:	4610      	mov	r0, r2
 801157e:	4798      	blx	r3
 8011580:	4603      	mov	r3, r0
 8011582:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011586:	e002      	b.n	801158e <tcp_slowtmr+0x556>
 8011588:	2300      	movs	r3, #0
 801158a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801158e:	4b13      	ldr	r3, [pc, #76]	; (80115dc <tcp_slowtmr+0x5a4>)
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d000      	beq.n	8011598 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8011596:	e560      	b.n	801105a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011598:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801159c:	2b00      	cmp	r3, #0
 801159e:	d102      	bne.n	80115a6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80115a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115a2:	f003 fb7f 	bl	8014ca4 <tcp_output>
  while (pcb != NULL) {
 80115a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f47f ad5c 	bne.w	8011066 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80115ae:	2300      	movs	r3, #0
 80115b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80115b2:	4b0b      	ldr	r3, [pc, #44]	; (80115e0 <tcp_slowtmr+0x5a8>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80115b8:	e067      	b.n	801168a <tcp_slowtmr+0x652>
 80115ba:	bf00      	nop
 80115bc:	2000d988 	.word	0x2000d988
 80115c0:	10624dd3 	.word	0x10624dd3
 80115c4:	000124f8 	.word	0x000124f8
 80115c8:	2000d994 	.word	0x2000d994
 80115cc:	0801ae7c 	.word	0x0801ae7c
 80115d0:	0801b2b4 	.word	0x0801b2b4
 80115d4:	0801aec0 	.word	0x0801aec0
 80115d8:	0801b2e0 	.word	0x0801b2e0
 80115dc:	2000d99c 	.word	0x2000d99c
 80115e0:	2000d998 	.word	0x2000d998
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80115e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e6:	7d1b      	ldrb	r3, [r3, #20]
 80115e8:	2b0a      	cmp	r3, #10
 80115ea:	d006      	beq.n	80115fa <tcp_slowtmr+0x5c2>
 80115ec:	4b2b      	ldr	r3, [pc, #172]	; (801169c <tcp_slowtmr+0x664>)
 80115ee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80115f2:	492b      	ldr	r1, [pc, #172]	; (80116a0 <tcp_slowtmr+0x668>)
 80115f4:	482b      	ldr	r0, [pc, #172]	; (80116a4 <tcp_slowtmr+0x66c>)
 80115f6:	f007 fbad 	bl	8018d54 <iprintf>
    pcb_remove = 0;
 80115fa:	2300      	movs	r3, #0
 80115fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011600:	4b29      	ldr	r3, [pc, #164]	; (80116a8 <tcp_slowtmr+0x670>)
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011606:	6a1b      	ldr	r3, [r3, #32]
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	2bf0      	cmp	r3, #240	; 0xf0
 801160c:	d904      	bls.n	8011618 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801160e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011612:	3301      	adds	r3, #1
 8011614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801161c:	2b00      	cmp	r3, #0
 801161e:	d02f      	beq.n	8011680 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011622:	f000 fb2b 	bl	8011c7c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011628:	2b00      	cmp	r3, #0
 801162a:	d010      	beq.n	801164e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801162c:	4b1f      	ldr	r3, [pc, #124]	; (80116ac <tcp_slowtmr+0x674>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011632:	429a      	cmp	r2, r3
 8011634:	d106      	bne.n	8011644 <tcp_slowtmr+0x60c>
 8011636:	4b19      	ldr	r3, [pc, #100]	; (801169c <tcp_slowtmr+0x664>)
 8011638:	f240 52af 	movw	r2, #1455	; 0x5af
 801163c:	491c      	ldr	r1, [pc, #112]	; (80116b0 <tcp_slowtmr+0x678>)
 801163e:	4819      	ldr	r0, [pc, #100]	; (80116a4 <tcp_slowtmr+0x66c>)
 8011640:	f007 fb88 	bl	8018d54 <iprintf>
        prev->next = pcb->next;
 8011644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011646:	68da      	ldr	r2, [r3, #12]
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	60da      	str	r2, [r3, #12]
 801164c:	e00f      	b.n	801166e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801164e:	4b17      	ldr	r3, [pc, #92]	; (80116ac <tcp_slowtmr+0x674>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011654:	429a      	cmp	r2, r3
 8011656:	d006      	beq.n	8011666 <tcp_slowtmr+0x62e>
 8011658:	4b10      	ldr	r3, [pc, #64]	; (801169c <tcp_slowtmr+0x664>)
 801165a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801165e:	4915      	ldr	r1, [pc, #84]	; (80116b4 <tcp_slowtmr+0x67c>)
 8011660:	4810      	ldr	r0, [pc, #64]	; (80116a4 <tcp_slowtmr+0x66c>)
 8011662:	f007 fb77 	bl	8018d54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	4a10      	ldr	r2, [pc, #64]	; (80116ac <tcp_slowtmr+0x674>)
 801166c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011670:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011678:	69f8      	ldr	r0, [r7, #28]
 801167a:	f7ff f93f 	bl	80108fc <tcp_free>
 801167e:	e004      	b.n	801168a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011682:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1a9      	bne.n	80115e4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011690:	bf00      	nop
 8011692:	bf00      	nop
 8011694:	3730      	adds	r7, #48	; 0x30
 8011696:	46bd      	mov	sp, r7
 8011698:	bdb0      	pop	{r4, r5, r7, pc}
 801169a:	bf00      	nop
 801169c:	0801ae7c 	.word	0x0801ae7c
 80116a0:	0801b30c 	.word	0x0801b30c
 80116a4:	0801aec0 	.word	0x0801aec0
 80116a8:	2000d988 	.word	0x2000d988
 80116ac:	2000d998 	.word	0x2000d998
 80116b0:	0801b33c 	.word	0x0801b33c
 80116b4:	0801b364 	.word	0x0801b364

080116b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80116be:	4b2d      	ldr	r3, [pc, #180]	; (8011774 <tcp_fasttmr+0xbc>)
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	3301      	adds	r3, #1
 80116c4:	b2da      	uxtb	r2, r3
 80116c6:	4b2b      	ldr	r3, [pc, #172]	; (8011774 <tcp_fasttmr+0xbc>)
 80116c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80116ca:	4b2b      	ldr	r3, [pc, #172]	; (8011778 <tcp_fasttmr+0xc0>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80116d0:	e048      	b.n	8011764 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	7f9a      	ldrb	r2, [r3, #30]
 80116d6:	4b27      	ldr	r3, [pc, #156]	; (8011774 <tcp_fasttmr+0xbc>)
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d03f      	beq.n	801175e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80116de:	4b25      	ldr	r3, [pc, #148]	; (8011774 <tcp_fasttmr+0xbc>)
 80116e0:	781a      	ldrb	r2, [r3, #0]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	8b5b      	ldrh	r3, [r3, #26]
 80116ea:	f003 0301 	and.w	r3, r3, #1
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d010      	beq.n	8011714 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8b5b      	ldrh	r3, [r3, #26]
 80116f6:	f043 0302 	orr.w	r3, r3, #2
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f003 facf 	bl	8014ca4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	8b5b      	ldrh	r3, [r3, #26]
 801170a:	f023 0303 	bic.w	r3, r3, #3
 801170e:	b29a      	uxth	r2, r3
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	8b5b      	ldrh	r3, [r3, #26]
 8011718:	f003 0308 	and.w	r3, r3, #8
 801171c:	2b00      	cmp	r3, #0
 801171e:	d009      	beq.n	8011734 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	8b5b      	ldrh	r3, [r3, #26]
 8011724:	f023 0308 	bic.w	r3, r3, #8
 8011728:	b29a      	uxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f7ff fa78 	bl	8010c24 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00a      	beq.n	8011758 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011742:	4b0e      	ldr	r3, [pc, #56]	; (801177c <tcp_fasttmr+0xc4>)
 8011744:	2200      	movs	r2, #0
 8011746:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 f819 	bl	8011780 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801174e:	4b0b      	ldr	r3, [pc, #44]	; (801177c <tcp_fasttmr+0xc4>)
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d000      	beq.n	8011758 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011756:	e7b8      	b.n	80116ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	607b      	str	r3, [r7, #4]
 801175c:	e002      	b.n	8011764 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	68db      	ldr	r3, [r3, #12]
 8011762:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d1b3      	bne.n	80116d2 <tcp_fasttmr+0x1a>
    }
  }
}
 801176a:	bf00      	nop
 801176c:	bf00      	nop
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	2000d99e 	.word	0x2000d99e
 8011778:	2000d994 	.word	0x2000d994
 801177c:	2000d99c 	.word	0x2000d99c

08011780 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011780:	b590      	push	{r4, r7, lr}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d109      	bne.n	80117a2 <tcp_process_refused_data+0x22>
 801178e:	4b37      	ldr	r3, [pc, #220]	; (801186c <tcp_process_refused_data+0xec>)
 8011790:	f240 6209 	movw	r2, #1545	; 0x609
 8011794:	4936      	ldr	r1, [pc, #216]	; (8011870 <tcp_process_refused_data+0xf0>)
 8011796:	4837      	ldr	r0, [pc, #220]	; (8011874 <tcp_process_refused_data+0xf4>)
 8011798:	f007 fadc 	bl	8018d54 <iprintf>
 801179c:	f06f 030f 	mvn.w	r3, #15
 80117a0:	e060      	b.n	8011864 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117a6:	7b5b      	ldrb	r3, [r3, #13]
 80117a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d00b      	beq.n	80117d8 <tcp_process_refused_data+0x58>
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6918      	ldr	r0, [r3, #16]
 80117ca:	2300      	movs	r3, #0
 80117cc:	68ba      	ldr	r2, [r7, #8]
 80117ce:	6879      	ldr	r1, [r7, #4]
 80117d0:	47a0      	blx	r4
 80117d2:	4603      	mov	r3, r0
 80117d4:	73fb      	strb	r3, [r7, #15]
 80117d6:	e007      	b.n	80117e8 <tcp_process_refused_data+0x68>
 80117d8:	2300      	movs	r3, #0
 80117da:	68ba      	ldr	r2, [r7, #8]
 80117dc:	6879      	ldr	r1, [r7, #4]
 80117de:	2000      	movs	r0, #0
 80117e0:	f000 f8a4 	bl	801192c <tcp_recv_null>
 80117e4:	4603      	mov	r3, r0
 80117e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80117e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d12a      	bne.n	8011846 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80117f0:	7bbb      	ldrb	r3, [r7, #14]
 80117f2:	f003 0320 	and.w	r3, r3, #32
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d033      	beq.n	8011862 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011802:	d005      	beq.n	8011810 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011808:	3301      	adds	r3, #1
 801180a:	b29a      	uxth	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011816:	2b00      	cmp	r3, #0
 8011818:	d00b      	beq.n	8011832 <tcp_process_refused_data+0xb2>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6918      	ldr	r0, [r3, #16]
 8011824:	2300      	movs	r3, #0
 8011826:	2200      	movs	r2, #0
 8011828:	6879      	ldr	r1, [r7, #4]
 801182a:	47a0      	blx	r4
 801182c:	4603      	mov	r3, r0
 801182e:	73fb      	strb	r3, [r7, #15]
 8011830:	e001      	b.n	8011836 <tcp_process_refused_data+0xb6>
 8011832:	2300      	movs	r3, #0
 8011834:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801183a:	f113 0f0d 	cmn.w	r3, #13
 801183e:	d110      	bne.n	8011862 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011840:	f06f 030c 	mvn.w	r3, #12
 8011844:	e00e      	b.n	8011864 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801184a:	f113 0f0d 	cmn.w	r3, #13
 801184e:	d102      	bne.n	8011856 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011850:	f06f 030c 	mvn.w	r3, #12
 8011854:	e006      	b.n	8011864 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801185c:	f06f 0304 	mvn.w	r3, #4
 8011860:	e000      	b.n	8011864 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	3714      	adds	r7, #20
 8011868:	46bd      	mov	sp, r7
 801186a:	bd90      	pop	{r4, r7, pc}
 801186c:	0801ae7c 	.word	0x0801ae7c
 8011870:	0801b38c 	.word	0x0801b38c
 8011874:	0801aec0 	.word	0x0801aec0

08011878 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011880:	e007      	b.n	8011892 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 f80a 	bl	80118a2 <tcp_seg_free>
    seg = next;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1f4      	bne.n	8011882 <tcp_segs_free+0xa>
  }
}
 8011898:	bf00      	nop
 801189a:	bf00      	nop
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b082      	sub	sp, #8
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d00c      	beq.n	80118ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d004      	beq.n	80118c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fe fd71 	bl	80103a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	2003      	movs	r0, #3
 80118c6:	f7fd fec9 	bl	800f65c <memp_free>
  }
}
 80118ca:	bf00      	nop
 80118cc:	3708      	adds	r7, #8
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
	...

080118d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <tcp_seg_copy+0x1c>
 80118e2:	4b0f      	ldr	r3, [pc, #60]	; (8011920 <tcp_seg_copy+0x4c>)
 80118e4:	f240 6282 	movw	r2, #1666	; 0x682
 80118e8:	490e      	ldr	r1, [pc, #56]	; (8011924 <tcp_seg_copy+0x50>)
 80118ea:	480f      	ldr	r0, [pc, #60]	; (8011928 <tcp_seg_copy+0x54>)
 80118ec:	f007 fa32 	bl	8018d54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80118f0:	2003      	movs	r0, #3
 80118f2:	f7fd fe3d 	bl	800f570 <memp_malloc>
 80118f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d101      	bne.n	8011902 <tcp_seg_copy+0x2e>
    return NULL;
 80118fe:	2300      	movs	r3, #0
 8011900:	e00a      	b.n	8011918 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011902:	2210      	movs	r2, #16
 8011904:	6879      	ldr	r1, [r7, #4]
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f007 f95f 	bl	8018bca <memcpy>
  pbuf_ref(cseg->p);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	4618      	mov	r0, r3
 8011912:	f7fe fded 	bl	80104f0 <pbuf_ref>
  return cseg;
 8011916:	68fb      	ldr	r3, [r7, #12]
}
 8011918:	4618      	mov	r0, r3
 801191a:	3710      	adds	r7, #16
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	0801ae7c 	.word	0x0801ae7c
 8011924:	0801b3d0 	.word	0x0801b3d0
 8011928:	0801aec0 	.word	0x0801aec0

0801192c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b084      	sub	sp, #16
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
 8011938:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d109      	bne.n	8011954 <tcp_recv_null+0x28>
 8011940:	4b12      	ldr	r3, [pc, #72]	; (801198c <tcp_recv_null+0x60>)
 8011942:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011946:	4912      	ldr	r1, [pc, #72]	; (8011990 <tcp_recv_null+0x64>)
 8011948:	4812      	ldr	r0, [pc, #72]	; (8011994 <tcp_recv_null+0x68>)
 801194a:	f007 fa03 	bl	8018d54 <iprintf>
 801194e:	f06f 030f 	mvn.w	r3, #15
 8011952:	e016      	b.n	8011982 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d009      	beq.n	801196e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	891b      	ldrh	r3, [r3, #8]
 801195e:	4619      	mov	r1, r3
 8011960:	68b8      	ldr	r0, [r7, #8]
 8011962:	f7ff fb19 	bl	8010f98 <tcp_recved>
    pbuf_free(p);
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7fe fd1c 	bl	80103a4 <pbuf_free>
 801196c:	e008      	b.n	8011980 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801196e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d104      	bne.n	8011980 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011976:	68b8      	ldr	r0, [r7, #8]
 8011978:	f7ff f9be 	bl	8010cf8 <tcp_close>
 801197c:	4603      	mov	r3, r0
 801197e:	e000      	b.n	8011982 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011980:	2300      	movs	r3, #0
}
 8011982:	4618      	mov	r0, r3
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	0801ae7c 	.word	0x0801ae7c
 8011990:	0801b3ec 	.word	0x0801b3ec
 8011994:	0801aec0 	.word	0x0801aec0

08011998 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b086      	sub	sp, #24
 801199c:	af00      	add	r7, sp, #0
 801199e:	4603      	mov	r3, r0
 80119a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80119a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	db01      	blt.n	80119ae <tcp_kill_prio+0x16>
 80119aa:	79fb      	ldrb	r3, [r7, #7]
 80119ac:	e000      	b.n	80119b0 <tcp_kill_prio+0x18>
 80119ae:	237f      	movs	r3, #127	; 0x7f
 80119b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80119b2:	7afb      	ldrb	r3, [r7, #11]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d034      	beq.n	8011a22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80119b8:	7afb      	ldrb	r3, [r7, #11]
 80119ba:	3b01      	subs	r3, #1
 80119bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80119be:	2300      	movs	r3, #0
 80119c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80119c2:	2300      	movs	r3, #0
 80119c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80119c6:	4b19      	ldr	r3, [pc, #100]	; (8011a2c <tcp_kill_prio+0x94>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	617b      	str	r3, [r7, #20]
 80119cc:	e01f      	b.n	8011a0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	7d5b      	ldrb	r3, [r3, #21]
 80119d2:	7afa      	ldrb	r2, [r7, #11]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d80c      	bhi.n	80119f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80119dc:	7afa      	ldrb	r2, [r7, #11]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d112      	bne.n	8011a08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80119e2:	4b13      	ldr	r3, [pc, #76]	; (8011a30 <tcp_kill_prio+0x98>)
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	6a1b      	ldr	r3, [r3, #32]
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	68fa      	ldr	r2, [r7, #12]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d80a      	bhi.n	8011a08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80119f2:	4b0f      	ldr	r3, [pc, #60]	; (8011a30 <tcp_kill_prio+0x98>)
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	6a1b      	ldr	r3, [r3, #32]
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	7d5b      	ldrb	r3, [r3, #21]
 8011a06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	617b      	str	r3, [r7, #20]
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d1dc      	bne.n	80119ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d004      	beq.n	8011a24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011a1a:	6938      	ldr	r0, [r7, #16]
 8011a1c:	f7ff fa56 	bl	8010ecc <tcp_abort>
 8011a20:	e000      	b.n	8011a24 <tcp_kill_prio+0x8c>
    return;
 8011a22:	bf00      	nop
  }
}
 8011a24:	3718      	adds	r7, #24
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	2000d994 	.word	0x2000d994
 8011a30:	2000d988 	.word	0x2000d988

08011a34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b086      	sub	sp, #24
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011a3e:	79fb      	ldrb	r3, [r7, #7]
 8011a40:	2b08      	cmp	r3, #8
 8011a42:	d009      	beq.n	8011a58 <tcp_kill_state+0x24>
 8011a44:	79fb      	ldrb	r3, [r7, #7]
 8011a46:	2b09      	cmp	r3, #9
 8011a48:	d006      	beq.n	8011a58 <tcp_kill_state+0x24>
 8011a4a:	4b1a      	ldr	r3, [pc, #104]	; (8011ab4 <tcp_kill_state+0x80>)
 8011a4c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011a50:	4919      	ldr	r1, [pc, #100]	; (8011ab8 <tcp_kill_state+0x84>)
 8011a52:	481a      	ldr	r0, [pc, #104]	; (8011abc <tcp_kill_state+0x88>)
 8011a54:	f007 f97e 	bl	8018d54 <iprintf>

  inactivity = 0;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a60:	4b17      	ldr	r3, [pc, #92]	; (8011ac0 <tcp_kill_state+0x8c>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	617b      	str	r3, [r7, #20]
 8011a66:	e017      	b.n	8011a98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	7d1b      	ldrb	r3, [r3, #20]
 8011a6c:	79fa      	ldrb	r2, [r7, #7]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d10f      	bne.n	8011a92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011a72:	4b14      	ldr	r3, [pc, #80]	; (8011ac4 <tcp_kill_state+0x90>)
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	6a1b      	ldr	r3, [r3, #32]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d807      	bhi.n	8011a92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011a82:	4b10      	ldr	r3, [pc, #64]	; (8011ac4 <tcp_kill_state+0x90>)
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	6a1b      	ldr	r3, [r3, #32]
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	617b      	str	r3, [r7, #20]
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d1e4      	bne.n	8011a68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d003      	beq.n	8011aac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011aa4:	2100      	movs	r1, #0
 8011aa6:	6938      	ldr	r0, [r7, #16]
 8011aa8:	f7ff f952 	bl	8010d50 <tcp_abandon>
  }
}
 8011aac:	bf00      	nop
 8011aae:	3718      	adds	r7, #24
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}
 8011ab4:	0801ae7c 	.word	0x0801ae7c
 8011ab8:	0801b408 	.word	0x0801b408
 8011abc:	0801aec0 	.word	0x0801aec0
 8011ac0:	2000d994 	.word	0x2000d994
 8011ac4:	2000d988 	.word	0x2000d988

08011ac8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ad6:	4b12      	ldr	r3, [pc, #72]	; (8011b20 <tcp_kill_timewait+0x58>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	60fb      	str	r3, [r7, #12]
 8011adc:	e012      	b.n	8011b04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011ade:	4b11      	ldr	r3, [pc, #68]	; (8011b24 <tcp_kill_timewait+0x5c>)
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d807      	bhi.n	8011afe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011aee:	4b0d      	ldr	r3, [pc, #52]	; (8011b24 <tcp_kill_timewait+0x5c>)
 8011af0:	681a      	ldr	r2, [r3, #0]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	6a1b      	ldr	r3, [r3, #32]
 8011af6:	1ad3      	subs	r3, r2, r3
 8011af8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	68db      	ldr	r3, [r3, #12]
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1e9      	bne.n	8011ade <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d002      	beq.n	8011b16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b10:	68b8      	ldr	r0, [r7, #8]
 8011b12:	f7ff f9db 	bl	8010ecc <tcp_abort>
  }
}
 8011b16:	bf00      	nop
 8011b18:	3710      	adds	r7, #16
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	2000d998 	.word	0x2000d998
 8011b24:	2000d988 	.word	0x2000d988

08011b28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011b2e:	4b10      	ldr	r3, [pc, #64]	; (8011b70 <tcp_handle_closepend+0x48>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011b34:	e014      	b.n	8011b60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	8b5b      	ldrh	r3, [r3, #26]
 8011b40:	f003 0308 	and.w	r3, r3, #8
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d009      	beq.n	8011b5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	8b5b      	ldrh	r3, [r3, #26]
 8011b4c:	f023 0308 	bic.w	r3, r3, #8
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f7ff f864 	bl	8010c24 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1e7      	bne.n	8011b36 <tcp_handle_closepend+0xe>
  }
}
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
 8011b6a:	3708      	adds	r7, #8
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	2000d994 	.word	0x2000d994

08011b74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011b7e:	2001      	movs	r0, #1
 8011b80:	f7fd fcf6 	bl	800f570 <memp_malloc>
 8011b84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d126      	bne.n	8011bda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011b8c:	f7ff ffcc 	bl	8011b28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011b90:	f7ff ff9a 	bl	8011ac8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011b94:	2001      	movs	r0, #1
 8011b96:	f7fd fceb 	bl	800f570 <memp_malloc>
 8011b9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d11b      	bne.n	8011bda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011ba2:	2009      	movs	r0, #9
 8011ba4:	f7ff ff46 	bl	8011a34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ba8:	2001      	movs	r0, #1
 8011baa:	f7fd fce1 	bl	800f570 <memp_malloc>
 8011bae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d111      	bne.n	8011bda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011bb6:	2008      	movs	r0, #8
 8011bb8:	f7ff ff3c 	bl	8011a34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bbc:	2001      	movs	r0, #1
 8011bbe:	f7fd fcd7 	bl	800f570 <memp_malloc>
 8011bc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d107      	bne.n	8011bda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011bca:	79fb      	ldrb	r3, [r7, #7]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7ff fee3 	bl	8011998 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bd2:	2001      	movs	r0, #1
 8011bd4:	f7fd fccc 	bl	800f570 <memp_malloc>
 8011bd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d03f      	beq.n	8011c60 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011be0:	229c      	movs	r2, #156	; 0x9c
 8011be2:	2100      	movs	r1, #0
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	f007 f818 	bl	8018c1a <memset>
    pcb->prio = prio;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	79fa      	ldrb	r2, [r7, #7]
 8011bee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011bf6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	22ff      	movs	r2, #255	; 0xff
 8011c0e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011c16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2206      	movs	r2, #6
 8011c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2206      	movs	r2, #6
 8011c24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2201      	movs	r2, #1
 8011c32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011c36:	4b0d      	ldr	r3, [pc, #52]	; (8011c6c <tcp_alloc+0xf8>)
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011c3e:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <tcp_alloc+0xfc>)
 8011c40:	781a      	ldrb	r2, [r3, #0]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011c4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	4a08      	ldr	r2, [pc, #32]	; (8011c74 <tcp_alloc+0x100>)
 8011c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	4a07      	ldr	r2, [pc, #28]	; (8011c78 <tcp_alloc+0x104>)
 8011c5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011c60:	68fb      	ldr	r3, [r7, #12]
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3710      	adds	r7, #16
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	2000d988 	.word	0x2000d988
 8011c70:	2000d99e 	.word	0x2000d99e
 8011c74:	0801192d 	.word	0x0801192d
 8011c78:	006ddd00 	.word	0x006ddd00

08011c7c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d107      	bne.n	8011c9a <tcp_pcb_purge+0x1e>
 8011c8a:	4b21      	ldr	r3, [pc, #132]	; (8011d10 <tcp_pcb_purge+0x94>)
 8011c8c:	f640 0251 	movw	r2, #2129	; 0x851
 8011c90:	4920      	ldr	r1, [pc, #128]	; (8011d14 <tcp_pcb_purge+0x98>)
 8011c92:	4821      	ldr	r0, [pc, #132]	; (8011d18 <tcp_pcb_purge+0x9c>)
 8011c94:	f007 f85e 	bl	8018d54 <iprintf>
 8011c98:	e037      	b.n	8011d0a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	7d1b      	ldrb	r3, [r3, #20]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d033      	beq.n	8011d0a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011ca6:	2b0a      	cmp	r3, #10
 8011ca8:	d02f      	beq.n	8011d0a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d02b      	beq.n	8011d0a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d007      	beq.n	8011cca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe fb70 	bl	80103a4 <pbuf_free>
      pcb->refused_data = NULL;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d002      	beq.n	8011cd8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 f986 	bl	8011fe4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cde:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ff fdc7 	bl	8011878 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ff fdc2 	bl	8011878 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	66da      	str	r2, [r3, #108]	; 0x6c
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	0801ae7c 	.word	0x0801ae7c
 8011d14:	0801b4c8 	.word	0x0801b4c8
 8011d18:	0801aec0 	.word	0x0801aec0

08011d1c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d106      	bne.n	8011d3a <tcp_pcb_remove+0x1e>
 8011d2c:	4b3e      	ldr	r3, [pc, #248]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011d2e:	f640 0283 	movw	r2, #2179	; 0x883
 8011d32:	493e      	ldr	r1, [pc, #248]	; (8011e2c <tcp_pcb_remove+0x110>)
 8011d34:	483e      	ldr	r0, [pc, #248]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011d36:	f007 f80d 	bl	8018d54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d106      	bne.n	8011d4e <tcp_pcb_remove+0x32>
 8011d40:	4b39      	ldr	r3, [pc, #228]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011d42:	f640 0284 	movw	r2, #2180	; 0x884
 8011d46:	493b      	ldr	r1, [pc, #236]	; (8011e34 <tcp_pcb_remove+0x118>)
 8011d48:	4839      	ldr	r0, [pc, #228]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011d4a:	f007 f803 	bl	8018d54 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	683a      	ldr	r2, [r7, #0]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d105      	bne.n	8011d64 <tcp_pcb_remove+0x48>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	68da      	ldr	r2, [r3, #12]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	601a      	str	r2, [r3, #0]
 8011d62:	e013      	b.n	8011d8c <tcp_pcb_remove+0x70>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	60fb      	str	r3, [r7, #12]
 8011d6a:	e00c      	b.n	8011d86 <tcp_pcb_remove+0x6a>
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	683a      	ldr	r2, [r7, #0]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d104      	bne.n	8011d80 <tcp_pcb_remove+0x64>
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	68da      	ldr	r2, [r3, #12]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	60da      	str	r2, [r3, #12]
 8011d7e:	e005      	b.n	8011d8c <tcp_pcb_remove+0x70>
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	60fb      	str	r3, [r7, #12]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1ef      	bne.n	8011d6c <tcp_pcb_remove+0x50>
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011d92:	6838      	ldr	r0, [r7, #0]
 8011d94:	f7ff ff72 	bl	8011c7c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	7d1b      	ldrb	r3, [r3, #20]
 8011d9c:	2b0a      	cmp	r3, #10
 8011d9e:	d013      	beq.n	8011dc8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d00f      	beq.n	8011dc8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	8b5b      	ldrh	r3, [r3, #26]
 8011dac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d009      	beq.n	8011dc8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	8b5b      	ldrh	r3, [r3, #26]
 8011db8:	f043 0302 	orr.w	r3, r3, #2
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011dc2:	6838      	ldr	r0, [r7, #0]
 8011dc4:	f002 ff6e 	bl	8014ca4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	7d1b      	ldrb	r3, [r3, #20]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d020      	beq.n	8011e12 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d006      	beq.n	8011de6 <tcp_pcb_remove+0xca>
 8011dd8:	4b13      	ldr	r3, [pc, #76]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011dda:	f640 0293 	movw	r2, #2195	; 0x893
 8011dde:	4916      	ldr	r1, [pc, #88]	; (8011e38 <tcp_pcb_remove+0x11c>)
 8011de0:	4813      	ldr	r0, [pc, #76]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011de2:	f006 ffb7 	bl	8018d54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d006      	beq.n	8011dfc <tcp_pcb_remove+0xe0>
 8011dee:	4b0e      	ldr	r3, [pc, #56]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011df0:	f640 0294 	movw	r2, #2196	; 0x894
 8011df4:	4911      	ldr	r1, [pc, #68]	; (8011e3c <tcp_pcb_remove+0x120>)
 8011df6:	480e      	ldr	r0, [pc, #56]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011df8:	f006 ffac 	bl	8018d54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d006      	beq.n	8011e12 <tcp_pcb_remove+0xf6>
 8011e04:	4b08      	ldr	r3, [pc, #32]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011e06:	f640 0296 	movw	r2, #2198	; 0x896
 8011e0a:	490d      	ldr	r1, [pc, #52]	; (8011e40 <tcp_pcb_remove+0x124>)
 8011e0c:	4808      	ldr	r0, [pc, #32]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011e0e:	f006 ffa1 	bl	8018d54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	2200      	movs	r2, #0
 8011e16:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011e1e:	bf00      	nop
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	0801ae7c 	.word	0x0801ae7c
 8011e2c:	0801b4e4 	.word	0x0801b4e4
 8011e30:	0801aec0 	.word	0x0801aec0
 8011e34:	0801b500 	.word	0x0801b500
 8011e38:	0801b520 	.word	0x0801b520
 8011e3c:	0801b538 	.word	0x0801b538
 8011e40:	0801b554 	.word	0x0801b554

08011e44 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d106      	bne.n	8011e60 <tcp_next_iss+0x1c>
 8011e52:	4b0a      	ldr	r3, [pc, #40]	; (8011e7c <tcp_next_iss+0x38>)
 8011e54:	f640 02af 	movw	r2, #2223	; 0x8af
 8011e58:	4909      	ldr	r1, [pc, #36]	; (8011e80 <tcp_next_iss+0x3c>)
 8011e5a:	480a      	ldr	r0, [pc, #40]	; (8011e84 <tcp_next_iss+0x40>)
 8011e5c:	f006 ff7a 	bl	8018d54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011e60:	4b09      	ldr	r3, [pc, #36]	; (8011e88 <tcp_next_iss+0x44>)
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	4b09      	ldr	r3, [pc, #36]	; (8011e8c <tcp_next_iss+0x48>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4413      	add	r3, r2
 8011e6a:	4a07      	ldr	r2, [pc, #28]	; (8011e88 <tcp_next_iss+0x44>)
 8011e6c:	6013      	str	r3, [r2, #0]
  return iss;
 8011e6e:	4b06      	ldr	r3, [pc, #24]	; (8011e88 <tcp_next_iss+0x44>)
 8011e70:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	0801ae7c 	.word	0x0801ae7c
 8011e80:	0801b56c 	.word	0x0801b56c
 8011e84:	0801aec0 	.word	0x0801aec0
 8011e88:	20000094 	.word	0x20000094
 8011e8c:	2000d988 	.word	0x2000d988

08011e90 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b086      	sub	sp, #24
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	60b9      	str	r1, [r7, #8]
 8011e9a:	607a      	str	r2, [r7, #4]
 8011e9c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d106      	bne.n	8011eb2 <tcp_eff_send_mss_netif+0x22>
 8011ea4:	4b14      	ldr	r3, [pc, #80]	; (8011ef8 <tcp_eff_send_mss_netif+0x68>)
 8011ea6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011eaa:	4914      	ldr	r1, [pc, #80]	; (8011efc <tcp_eff_send_mss_netif+0x6c>)
 8011eac:	4814      	ldr	r0, [pc, #80]	; (8011f00 <tcp_eff_send_mss_netif+0x70>)
 8011eae:	f006 ff51 	bl	8018d54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d101      	bne.n	8011ebc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011eb8:	89fb      	ldrh	r3, [r7, #14]
 8011eba:	e019      	b.n	8011ef0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ec0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011ec2:	8afb      	ldrh	r3, [r7, #22]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d012      	beq.n	8011eee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011ec8:	2328      	movs	r3, #40	; 0x28
 8011eca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011ecc:	8afa      	ldrh	r2, [r7, #22]
 8011ece:	8abb      	ldrh	r3, [r7, #20]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d904      	bls.n	8011ede <tcp_eff_send_mss_netif+0x4e>
 8011ed4:	8afa      	ldrh	r2, [r7, #22]
 8011ed6:	8abb      	ldrh	r3, [r7, #20]
 8011ed8:	1ad3      	subs	r3, r2, r3
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	e000      	b.n	8011ee0 <tcp_eff_send_mss_netif+0x50>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011ee2:	8a7a      	ldrh	r2, [r7, #18]
 8011ee4:	89fb      	ldrh	r3, [r7, #14]
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	bf28      	it	cs
 8011eea:	4613      	movcs	r3, r2
 8011eec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011eee:	89fb      	ldrh	r3, [r7, #14]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3718      	adds	r7, #24
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	0801ae7c 	.word	0x0801ae7c
 8011efc:	0801b588 	.word	0x0801b588
 8011f00:	0801aec0 	.word	0x0801aec0

08011f04 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d119      	bne.n	8011f4c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011f18:	4b10      	ldr	r3, [pc, #64]	; (8011f5c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011f1a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011f1e:	4910      	ldr	r1, [pc, #64]	; (8011f60 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011f20:	4810      	ldr	r0, [pc, #64]	; (8011f64 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011f22:	f006 ff17 	bl	8018d54 <iprintf>

  while (pcb != NULL) {
 8011f26:	e011      	b.n	8011f4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	681a      	ldr	r2, [r3, #0]
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d108      	bne.n	8011f46 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7fe ffc6 	bl	8010ecc <tcp_abort>
      pcb = next;
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	60fb      	str	r3, [r7, #12]
 8011f44:	e002      	b.n	8011f4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	68db      	ldr	r3, [r3, #12]
 8011f4a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1ea      	bne.n	8011f28 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011f52:	bf00      	nop
 8011f54:	bf00      	nop
 8011f56:	3710      	adds	r7, #16
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	0801ae7c 	.word	0x0801ae7c
 8011f60:	0801b5b0 	.word	0x0801b5b0
 8011f64:	0801aec0 	.word	0x0801aec0

08011f68 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d02a      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d026      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011f80:	4b15      	ldr	r3, [pc, #84]	; (8011fd8 <tcp_netif_ip_addr_changed+0x70>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4619      	mov	r1, r3
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff ffbc 	bl	8011f04 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011f8c:	4b13      	ldr	r3, [pc, #76]	; (8011fdc <tcp_netif_ip_addr_changed+0x74>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4619      	mov	r1, r3
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff ffb6 	bl	8011f04 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d017      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d013      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011fa6:	4b0e      	ldr	r3, [pc, #56]	; (8011fe0 <tcp_netif_ip_addr_changed+0x78>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	60fb      	str	r3, [r7, #12]
 8011fac:	e00c      	b.n	8011fc8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d103      	bne.n	8011fc2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	60fb      	str	r3, [r7, #12]
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1ef      	bne.n	8011fae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011fce:	bf00      	nop
 8011fd0:	3710      	adds	r7, #16
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	2000d994 	.word	0x2000d994
 8011fdc:	2000d98c 	.word	0x2000d98c
 8011fe0:	2000d990 	.word	0x2000d990

08011fe4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d007      	beq.n	8012004 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7ff fc3d 	bl	8011878 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012004:	bf00      	nop
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801200c:	b590      	push	{r4, r7, lr}
 801200e:	b08d      	sub	sp, #52	; 0x34
 8012010:	af04      	add	r7, sp, #16
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d105      	bne.n	8012028 <tcp_input+0x1c>
 801201c:	4b9b      	ldr	r3, [pc, #620]	; (801228c <tcp_input+0x280>)
 801201e:	2283      	movs	r2, #131	; 0x83
 8012020:	499b      	ldr	r1, [pc, #620]	; (8012290 <tcp_input+0x284>)
 8012022:	489c      	ldr	r0, [pc, #624]	; (8012294 <tcp_input+0x288>)
 8012024:	f006 fe96 	bl	8018d54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	4a9a      	ldr	r2, [pc, #616]	; (8012298 <tcp_input+0x28c>)
 801202e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	895b      	ldrh	r3, [r3, #10]
 8012034:	2b13      	cmp	r3, #19
 8012036:	f240 83d1 	bls.w	80127dc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801203a:	4b98      	ldr	r3, [pc, #608]	; (801229c <tcp_input+0x290>)
 801203c:	695b      	ldr	r3, [r3, #20]
 801203e:	4a97      	ldr	r2, [pc, #604]	; (801229c <tcp_input+0x290>)
 8012040:	6812      	ldr	r2, [r2, #0]
 8012042:	4611      	mov	r1, r2
 8012044:	4618      	mov	r0, r3
 8012046:	f005 fc47 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	f040 83c7 	bne.w	80127e0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012052:	4b92      	ldr	r3, [pc, #584]	; (801229c <tcp_input+0x290>)
 8012054:	695b      	ldr	r3, [r3, #20]
 8012056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801205a:	2be0      	cmp	r3, #224	; 0xe0
 801205c:	f000 83c0 	beq.w	80127e0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012060:	4b8d      	ldr	r3, [pc, #564]	; (8012298 <tcp_input+0x28c>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	899b      	ldrh	r3, [r3, #12]
 8012066:	b29b      	uxth	r3, r3
 8012068:	4618      	mov	r0, r3
 801206a:	f7fc fda9 	bl	800ebc0 <lwip_htons>
 801206e:	4603      	mov	r3, r0
 8012070:	0b1b      	lsrs	r3, r3, #12
 8012072:	b29b      	uxth	r3, r3
 8012074:	b2db      	uxtb	r3, r3
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801207a:	7cbb      	ldrb	r3, [r7, #18]
 801207c:	2b13      	cmp	r3, #19
 801207e:	f240 83b1 	bls.w	80127e4 <tcp_input+0x7d8>
 8012082:	7cbb      	ldrb	r3, [r7, #18]
 8012084:	b29a      	uxth	r2, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	891b      	ldrh	r3, [r3, #8]
 801208a:	429a      	cmp	r2, r3
 801208c:	f200 83aa 	bhi.w	80127e4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012090:	7cbb      	ldrb	r3, [r7, #18]
 8012092:	b29b      	uxth	r3, r3
 8012094:	3b14      	subs	r3, #20
 8012096:	b29a      	uxth	r2, r3
 8012098:	4b81      	ldr	r3, [pc, #516]	; (80122a0 <tcp_input+0x294>)
 801209a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801209c:	4b81      	ldr	r3, [pc, #516]	; (80122a4 <tcp_input+0x298>)
 801209e:	2200      	movs	r2, #0
 80120a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	895a      	ldrh	r2, [r3, #10]
 80120a6:	7cbb      	ldrb	r3, [r7, #18]
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d309      	bcc.n	80120c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80120ae:	4b7c      	ldr	r3, [pc, #496]	; (80122a0 <tcp_input+0x294>)
 80120b0:	881a      	ldrh	r2, [r3, #0]
 80120b2:	4b7d      	ldr	r3, [pc, #500]	; (80122a8 <tcp_input+0x29c>)
 80120b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80120b6:	7cbb      	ldrb	r3, [r7, #18]
 80120b8:	4619      	mov	r1, r3
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7fe f8ec 	bl	8010298 <pbuf_remove_header>
 80120c0:	e04e      	b.n	8012160 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d105      	bne.n	80120d6 <tcp_input+0xca>
 80120ca:	4b70      	ldr	r3, [pc, #448]	; (801228c <tcp_input+0x280>)
 80120cc:	22c2      	movs	r2, #194	; 0xc2
 80120ce:	4977      	ldr	r1, [pc, #476]	; (80122ac <tcp_input+0x2a0>)
 80120d0:	4870      	ldr	r0, [pc, #448]	; (8012294 <tcp_input+0x288>)
 80120d2:	f006 fe3f 	bl	8018d54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80120d6:	2114      	movs	r1, #20
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f7fe f8dd 	bl	8010298 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	895a      	ldrh	r2, [r3, #10]
 80120e2:	4b71      	ldr	r3, [pc, #452]	; (80122a8 <tcp_input+0x29c>)
 80120e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80120e6:	4b6e      	ldr	r3, [pc, #440]	; (80122a0 <tcp_input+0x294>)
 80120e8:	881a      	ldrh	r2, [r3, #0]
 80120ea:	4b6f      	ldr	r3, [pc, #444]	; (80122a8 <tcp_input+0x29c>)
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	1ad3      	subs	r3, r2, r3
 80120f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80120f2:	4b6d      	ldr	r3, [pc, #436]	; (80122a8 <tcp_input+0x29c>)
 80120f4:	881b      	ldrh	r3, [r3, #0]
 80120f6:	4619      	mov	r1, r3
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f7fe f8cd 	bl	8010298 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	895b      	ldrh	r3, [r3, #10]
 8012104:	8a3a      	ldrh	r2, [r7, #16]
 8012106:	429a      	cmp	r2, r3
 8012108:	f200 836e 	bhi.w	80127e8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	4a64      	ldr	r2, [pc, #400]	; (80122a4 <tcp_input+0x298>)
 8012114:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	8a3a      	ldrh	r2, [r7, #16]
 801211c:	4611      	mov	r1, r2
 801211e:	4618      	mov	r0, r3
 8012120:	f7fe f8ba 	bl	8010298 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	891a      	ldrh	r2, [r3, #8]
 8012128:	8a3b      	ldrh	r3, [r7, #16]
 801212a:	1ad3      	subs	r3, r2, r3
 801212c:	b29a      	uxth	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	895b      	ldrh	r3, [r3, #10]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d005      	beq.n	8012146 <tcp_input+0x13a>
 801213a:	4b54      	ldr	r3, [pc, #336]	; (801228c <tcp_input+0x280>)
 801213c:	22df      	movs	r2, #223	; 0xdf
 801213e:	495c      	ldr	r1, [pc, #368]	; (80122b0 <tcp_input+0x2a4>)
 8012140:	4854      	ldr	r0, [pc, #336]	; (8012294 <tcp_input+0x288>)
 8012142:	f006 fe07 	bl	8018d54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	891a      	ldrh	r2, [r3, #8]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	891b      	ldrh	r3, [r3, #8]
 8012150:	429a      	cmp	r2, r3
 8012152:	d005      	beq.n	8012160 <tcp_input+0x154>
 8012154:	4b4d      	ldr	r3, [pc, #308]	; (801228c <tcp_input+0x280>)
 8012156:	22e0      	movs	r2, #224	; 0xe0
 8012158:	4956      	ldr	r1, [pc, #344]	; (80122b4 <tcp_input+0x2a8>)
 801215a:	484e      	ldr	r0, [pc, #312]	; (8012294 <tcp_input+0x288>)
 801215c:	f006 fdfa 	bl	8018d54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012160:	4b4d      	ldr	r3, [pc, #308]	; (8012298 <tcp_input+0x28c>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	881b      	ldrh	r3, [r3, #0]
 8012166:	b29b      	uxth	r3, r3
 8012168:	4a4b      	ldr	r2, [pc, #300]	; (8012298 <tcp_input+0x28c>)
 801216a:	6814      	ldr	r4, [r2, #0]
 801216c:	4618      	mov	r0, r3
 801216e:	f7fc fd27 	bl	800ebc0 <lwip_htons>
 8012172:	4603      	mov	r3, r0
 8012174:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012176:	4b48      	ldr	r3, [pc, #288]	; (8012298 <tcp_input+0x28c>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	885b      	ldrh	r3, [r3, #2]
 801217c:	b29b      	uxth	r3, r3
 801217e:	4a46      	ldr	r2, [pc, #280]	; (8012298 <tcp_input+0x28c>)
 8012180:	6814      	ldr	r4, [r2, #0]
 8012182:	4618      	mov	r0, r3
 8012184:	f7fc fd1c 	bl	800ebc0 <lwip_htons>
 8012188:	4603      	mov	r3, r0
 801218a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801218c:	4b42      	ldr	r3, [pc, #264]	; (8012298 <tcp_input+0x28c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4a41      	ldr	r2, [pc, #260]	; (8012298 <tcp_input+0x28c>)
 8012194:	6814      	ldr	r4, [r2, #0]
 8012196:	4618      	mov	r0, r3
 8012198:	f7fc fd27 	bl	800ebea <lwip_htonl>
 801219c:	4603      	mov	r3, r0
 801219e:	6063      	str	r3, [r4, #4]
 80121a0:	6863      	ldr	r3, [r4, #4]
 80121a2:	4a45      	ldr	r2, [pc, #276]	; (80122b8 <tcp_input+0x2ac>)
 80121a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80121a6:	4b3c      	ldr	r3, [pc, #240]	; (8012298 <tcp_input+0x28c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	4a3a      	ldr	r2, [pc, #232]	; (8012298 <tcp_input+0x28c>)
 80121ae:	6814      	ldr	r4, [r2, #0]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fc fd1a 	bl	800ebea <lwip_htonl>
 80121b6:	4603      	mov	r3, r0
 80121b8:	60a3      	str	r3, [r4, #8]
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	4a3f      	ldr	r2, [pc, #252]	; (80122bc <tcp_input+0x2b0>)
 80121be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80121c0:	4b35      	ldr	r3, [pc, #212]	; (8012298 <tcp_input+0x28c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	89db      	ldrh	r3, [r3, #14]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	4a33      	ldr	r2, [pc, #204]	; (8012298 <tcp_input+0x28c>)
 80121ca:	6814      	ldr	r4, [r2, #0]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fc fcf7 	bl	800ebc0 <lwip_htons>
 80121d2:	4603      	mov	r3, r0
 80121d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80121d6:	4b30      	ldr	r3, [pc, #192]	; (8012298 <tcp_input+0x28c>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	899b      	ldrh	r3, [r3, #12]
 80121dc:	b29b      	uxth	r3, r3
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fc fcee 	bl	800ebc0 <lwip_htons>
 80121e4:	4603      	mov	r3, r0
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121ec:	b2da      	uxtb	r2, r3
 80121ee:	4b34      	ldr	r3, [pc, #208]	; (80122c0 <tcp_input+0x2b4>)
 80121f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	891a      	ldrh	r2, [r3, #8]
 80121f6:	4b33      	ldr	r3, [pc, #204]	; (80122c4 <tcp_input+0x2b8>)
 80121f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80121fa:	4b31      	ldr	r3, [pc, #196]	; (80122c0 <tcp_input+0x2b4>)
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	f003 0303 	and.w	r3, r3, #3
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00c      	beq.n	8012220 <tcp_input+0x214>
    tcplen++;
 8012206:	4b2f      	ldr	r3, [pc, #188]	; (80122c4 <tcp_input+0x2b8>)
 8012208:	881b      	ldrh	r3, [r3, #0]
 801220a:	3301      	adds	r3, #1
 801220c:	b29a      	uxth	r2, r3
 801220e:	4b2d      	ldr	r3, [pc, #180]	; (80122c4 <tcp_input+0x2b8>)
 8012210:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	891a      	ldrh	r2, [r3, #8]
 8012216:	4b2b      	ldr	r3, [pc, #172]	; (80122c4 <tcp_input+0x2b8>)
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	429a      	cmp	r2, r3
 801221c:	f200 82e6 	bhi.w	80127ec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012220:	2300      	movs	r3, #0
 8012222:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012224:	4b28      	ldr	r3, [pc, #160]	; (80122c8 <tcp_input+0x2bc>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	61fb      	str	r3, [r7, #28]
 801222a:	e09d      	b.n	8012368 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	7d1b      	ldrb	r3, [r3, #20]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d105      	bne.n	8012240 <tcp_input+0x234>
 8012234:	4b15      	ldr	r3, [pc, #84]	; (801228c <tcp_input+0x280>)
 8012236:	22fb      	movs	r2, #251	; 0xfb
 8012238:	4924      	ldr	r1, [pc, #144]	; (80122cc <tcp_input+0x2c0>)
 801223a:	4816      	ldr	r0, [pc, #88]	; (8012294 <tcp_input+0x288>)
 801223c:	f006 fd8a 	bl	8018d54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	7d1b      	ldrb	r3, [r3, #20]
 8012244:	2b0a      	cmp	r3, #10
 8012246:	d105      	bne.n	8012254 <tcp_input+0x248>
 8012248:	4b10      	ldr	r3, [pc, #64]	; (801228c <tcp_input+0x280>)
 801224a:	22fc      	movs	r2, #252	; 0xfc
 801224c:	4920      	ldr	r1, [pc, #128]	; (80122d0 <tcp_input+0x2c4>)
 801224e:	4811      	ldr	r0, [pc, #68]	; (8012294 <tcp_input+0x288>)
 8012250:	f006 fd80 	bl	8018d54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	7d1b      	ldrb	r3, [r3, #20]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d105      	bne.n	8012268 <tcp_input+0x25c>
 801225c:	4b0b      	ldr	r3, [pc, #44]	; (801228c <tcp_input+0x280>)
 801225e:	22fd      	movs	r2, #253	; 0xfd
 8012260:	491c      	ldr	r1, [pc, #112]	; (80122d4 <tcp_input+0x2c8>)
 8012262:	480c      	ldr	r0, [pc, #48]	; (8012294 <tcp_input+0x288>)
 8012264:	f006 fd76 	bl	8018d54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	7a1b      	ldrb	r3, [r3, #8]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d033      	beq.n	80122d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	7a1a      	ldrb	r2, [r3, #8]
 8012274:	4b09      	ldr	r3, [pc, #36]	; (801229c <tcp_input+0x290>)
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801227c:	3301      	adds	r3, #1
 801227e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012280:	429a      	cmp	r2, r3
 8012282:	d029      	beq.n	80122d8 <tcp_input+0x2cc>
      prev = pcb;
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	61bb      	str	r3, [r7, #24]
      continue;
 8012288:	e06b      	b.n	8012362 <tcp_input+0x356>
 801228a:	bf00      	nop
 801228c:	0801b5e4 	.word	0x0801b5e4
 8012290:	0801b618 	.word	0x0801b618
 8012294:	0801b630 	.word	0x0801b630
 8012298:	2000d9b0 	.word	0x2000d9b0
 801229c:	2000a234 	.word	0x2000a234
 80122a0:	2000d9b4 	.word	0x2000d9b4
 80122a4:	2000d9b8 	.word	0x2000d9b8
 80122a8:	2000d9b6 	.word	0x2000d9b6
 80122ac:	0801b658 	.word	0x0801b658
 80122b0:	0801b668 	.word	0x0801b668
 80122b4:	0801b674 	.word	0x0801b674
 80122b8:	2000d9c0 	.word	0x2000d9c0
 80122bc:	2000d9c4 	.word	0x2000d9c4
 80122c0:	2000d9cc 	.word	0x2000d9cc
 80122c4:	2000d9ca 	.word	0x2000d9ca
 80122c8:	2000d994 	.word	0x2000d994
 80122cc:	0801b694 	.word	0x0801b694
 80122d0:	0801b6bc 	.word	0x0801b6bc
 80122d4:	0801b6e8 	.word	0x0801b6e8
    }

    if (pcb->remote_port == tcphdr->src &&
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	8b1a      	ldrh	r2, [r3, #24]
 80122dc:	4b72      	ldr	r3, [pc, #456]	; (80124a8 <tcp_input+0x49c>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d13a      	bne.n	801235e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	8ada      	ldrh	r2, [r3, #22]
 80122ec:	4b6e      	ldr	r3, [pc, #440]	; (80124a8 <tcp_input+0x49c>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	885b      	ldrh	r3, [r3, #2]
 80122f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d132      	bne.n	801235e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	4b6b      	ldr	r3, [pc, #428]	; (80124ac <tcp_input+0x4a0>)
 80122fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012300:	429a      	cmp	r2, r3
 8012302:	d12c      	bne.n	801235e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	4b68      	ldr	r3, [pc, #416]	; (80124ac <tcp_input+0x4a0>)
 801230a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801230c:	429a      	cmp	r2, r3
 801230e:	d126      	bne.n	801235e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	69fa      	ldr	r2, [r7, #28]
 8012316:	429a      	cmp	r2, r3
 8012318:	d106      	bne.n	8012328 <tcp_input+0x31c>
 801231a:	4b65      	ldr	r3, [pc, #404]	; (80124b0 <tcp_input+0x4a4>)
 801231c:	f240 120d 	movw	r2, #269	; 0x10d
 8012320:	4964      	ldr	r1, [pc, #400]	; (80124b4 <tcp_input+0x4a8>)
 8012322:	4865      	ldr	r0, [pc, #404]	; (80124b8 <tcp_input+0x4ac>)
 8012324:	f006 fd16 	bl	8018d54 <iprintf>
      if (prev != NULL) {
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d00a      	beq.n	8012344 <tcp_input+0x338>
        prev->next = pcb->next;
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	68da      	ldr	r2, [r3, #12]
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012336:	4b61      	ldr	r3, [pc, #388]	; (80124bc <tcp_input+0x4b0>)
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	69fb      	ldr	r3, [r7, #28]
 801233c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801233e:	4a5f      	ldr	r2, [pc, #380]	; (80124bc <tcp_input+0x4b0>)
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	69fa      	ldr	r2, [r7, #28]
 801234a:	429a      	cmp	r2, r3
 801234c:	d111      	bne.n	8012372 <tcp_input+0x366>
 801234e:	4b58      	ldr	r3, [pc, #352]	; (80124b0 <tcp_input+0x4a4>)
 8012350:	f240 1215 	movw	r2, #277	; 0x115
 8012354:	495a      	ldr	r1, [pc, #360]	; (80124c0 <tcp_input+0x4b4>)
 8012356:	4858      	ldr	r0, [pc, #352]	; (80124b8 <tcp_input+0x4ac>)
 8012358:	f006 fcfc 	bl	8018d54 <iprintf>
      break;
 801235c:	e009      	b.n	8012372 <tcp_input+0x366>
    }
    prev = pcb;
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012362:	69fb      	ldr	r3, [r7, #28]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	61fb      	str	r3, [r7, #28]
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	2b00      	cmp	r3, #0
 801236c:	f47f af5e 	bne.w	801222c <tcp_input+0x220>
 8012370:	e000      	b.n	8012374 <tcp_input+0x368>
      break;
 8012372:	bf00      	nop
  }

  if (pcb == NULL) {
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	2b00      	cmp	r3, #0
 8012378:	f040 80aa 	bne.w	80124d0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801237c:	4b51      	ldr	r3, [pc, #324]	; (80124c4 <tcp_input+0x4b8>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	61fb      	str	r3, [r7, #28]
 8012382:	e03f      	b.n	8012404 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	7d1b      	ldrb	r3, [r3, #20]
 8012388:	2b0a      	cmp	r3, #10
 801238a:	d006      	beq.n	801239a <tcp_input+0x38e>
 801238c:	4b48      	ldr	r3, [pc, #288]	; (80124b0 <tcp_input+0x4a4>)
 801238e:	f240 121f 	movw	r2, #287	; 0x11f
 8012392:	494d      	ldr	r1, [pc, #308]	; (80124c8 <tcp_input+0x4bc>)
 8012394:	4848      	ldr	r0, [pc, #288]	; (80124b8 <tcp_input+0x4ac>)
 8012396:	f006 fcdd 	bl	8018d54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	7a1b      	ldrb	r3, [r3, #8]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d009      	beq.n	80123b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	7a1a      	ldrb	r2, [r3, #8]
 80123a6:	4b41      	ldr	r3, [pc, #260]	; (80124ac <tcp_input+0x4a0>)
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80123ae:	3301      	adds	r3, #1
 80123b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d122      	bne.n	80123fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	8b1a      	ldrh	r2, [r3, #24]
 80123ba:	4b3b      	ldr	r3, [pc, #236]	; (80124a8 <tcp_input+0x49c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d11b      	bne.n	80123fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	8ada      	ldrh	r2, [r3, #22]
 80123ca:	4b37      	ldr	r3, [pc, #220]	; (80124a8 <tcp_input+0x49c>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	885b      	ldrh	r3, [r3, #2]
 80123d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d113      	bne.n	80123fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	685a      	ldr	r2, [r3, #4]
 80123da:	4b34      	ldr	r3, [pc, #208]	; (80124ac <tcp_input+0x4a0>)
 80123dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80123de:	429a      	cmp	r2, r3
 80123e0:	d10d      	bne.n	80123fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	4b31      	ldr	r3, [pc, #196]	; (80124ac <tcp_input+0x4a0>)
 80123e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d107      	bne.n	80123fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80123ee:	69f8      	ldr	r0, [r7, #28]
 80123f0:	f000 fb56 	bl	8012aa0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7fd ffd5 	bl	80103a4 <pbuf_free>
        return;
 80123fa:	e1fd      	b.n	80127f8 <tcp_input+0x7ec>
        continue;
 80123fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	61fb      	str	r3, [r7, #28]
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d1bc      	bne.n	8012384 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801240a:	2300      	movs	r3, #0
 801240c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801240e:	4b2f      	ldr	r3, [pc, #188]	; (80124cc <tcp_input+0x4c0>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	617b      	str	r3, [r7, #20]
 8012414:	e02a      	b.n	801246c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	7a1b      	ldrb	r3, [r3, #8]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00c      	beq.n	8012438 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	7a1a      	ldrb	r2, [r3, #8]
 8012422:	4b22      	ldr	r3, [pc, #136]	; (80124ac <tcp_input+0x4a0>)
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801242a:	3301      	adds	r3, #1
 801242c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801242e:	429a      	cmp	r2, r3
 8012430:	d002      	beq.n	8012438 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	61bb      	str	r3, [r7, #24]
        continue;
 8012436:	e016      	b.n	8012466 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	8ada      	ldrh	r2, [r3, #22]
 801243c:	4b1a      	ldr	r3, [pc, #104]	; (80124a8 <tcp_input+0x49c>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	885b      	ldrh	r3, [r3, #2]
 8012442:	b29b      	uxth	r3, r3
 8012444:	429a      	cmp	r2, r3
 8012446:	d10c      	bne.n	8012462 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	4b17      	ldr	r3, [pc, #92]	; (80124ac <tcp_input+0x4a0>)
 801244e:	695b      	ldr	r3, [r3, #20]
 8012450:	429a      	cmp	r2, r3
 8012452:	d00f      	beq.n	8012474 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00d      	beq.n	8012476 <tcp_input+0x46a>
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d009      	beq.n	8012476 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	617b      	str	r3, [r7, #20]
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1d1      	bne.n	8012416 <tcp_input+0x40a>
 8012472:	e000      	b.n	8012476 <tcp_input+0x46a>
            break;
 8012474:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d029      	beq.n	80124d0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00a      	beq.n	8012498 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	68da      	ldr	r2, [r3, #12]
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801248a:	4b10      	ldr	r3, [pc, #64]	; (80124cc <tcp_input+0x4c0>)
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012492:	4a0e      	ldr	r2, [pc, #56]	; (80124cc <tcp_input+0x4c0>)
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012498:	6978      	ldr	r0, [r7, #20]
 801249a:	f000 fa03 	bl	80128a4 <tcp_listen_input>
      }
      pbuf_free(p);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7fd ff80 	bl	80103a4 <pbuf_free>
      return;
 80124a4:	e1a8      	b.n	80127f8 <tcp_input+0x7ec>
 80124a6:	bf00      	nop
 80124a8:	2000d9b0 	.word	0x2000d9b0
 80124ac:	2000a234 	.word	0x2000a234
 80124b0:	0801b5e4 	.word	0x0801b5e4
 80124b4:	0801b710 	.word	0x0801b710
 80124b8:	0801b630 	.word	0x0801b630
 80124bc:	2000d994 	.word	0x2000d994
 80124c0:	0801b73c 	.word	0x0801b73c
 80124c4:	2000d998 	.word	0x2000d998
 80124c8:	0801b768 	.word	0x0801b768
 80124cc:	2000d990 	.word	0x2000d990
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	f000 8158 	beq.w	8012788 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80124d8:	4b95      	ldr	r3, [pc, #596]	; (8012730 <tcp_input+0x724>)
 80124da:	2200      	movs	r2, #0
 80124dc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	891a      	ldrh	r2, [r3, #8]
 80124e2:	4b93      	ldr	r3, [pc, #588]	; (8012730 <tcp_input+0x724>)
 80124e4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80124e6:	4a92      	ldr	r2, [pc, #584]	; (8012730 <tcp_input+0x724>)
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80124ec:	4b91      	ldr	r3, [pc, #580]	; (8012734 <tcp_input+0x728>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4a8f      	ldr	r2, [pc, #572]	; (8012730 <tcp_input+0x724>)
 80124f2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80124f4:	4b90      	ldr	r3, [pc, #576]	; (8012738 <tcp_input+0x72c>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80124fa:	4b90      	ldr	r3, [pc, #576]	; (801273c <tcp_input+0x730>)
 80124fc:	2200      	movs	r2, #0
 80124fe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012500:	4b8f      	ldr	r3, [pc, #572]	; (8012740 <tcp_input+0x734>)
 8012502:	2200      	movs	r2, #0
 8012504:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012506:	4b8f      	ldr	r3, [pc, #572]	; (8012744 <tcp_input+0x738>)
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	f003 0308 	and.w	r3, r3, #8
 801250e:	2b00      	cmp	r3, #0
 8012510:	d006      	beq.n	8012520 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	7b5b      	ldrb	r3, [r3, #13]
 8012516:	f043 0301 	orr.w	r3, r3, #1
 801251a:	b2da      	uxtb	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012524:	2b00      	cmp	r3, #0
 8012526:	d017      	beq.n	8012558 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012528:	69f8      	ldr	r0, [r7, #28]
 801252a:	f7ff f929 	bl	8011780 <tcp_process_refused_data>
 801252e:	4603      	mov	r3, r0
 8012530:	f113 0f0d 	cmn.w	r3, #13
 8012534:	d007      	beq.n	8012546 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00c      	beq.n	8012558 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801253e:	4b82      	ldr	r3, [pc, #520]	; (8012748 <tcp_input+0x73c>)
 8012540:	881b      	ldrh	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d008      	beq.n	8012558 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801254a:	2b00      	cmp	r3, #0
 801254c:	f040 80e3 	bne.w	8012716 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012550:	69f8      	ldr	r0, [r7, #28]
 8012552:	f003 f9ad 	bl	80158b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012556:	e0de      	b.n	8012716 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012558:	4a7c      	ldr	r2, [pc, #496]	; (801274c <tcp_input+0x740>)
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801255e:	69f8      	ldr	r0, [r7, #28]
 8012560:	f000 fb18 	bl	8012b94 <tcp_process>
 8012564:	4603      	mov	r3, r0
 8012566:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012568:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801256c:	f113 0f0d 	cmn.w	r3, #13
 8012570:	f000 80d3 	beq.w	801271a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012574:	4b71      	ldr	r3, [pc, #452]	; (801273c <tcp_input+0x730>)
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	f003 0308 	and.w	r3, r3, #8
 801257c:	2b00      	cmp	r3, #0
 801257e:	d015      	beq.n	80125ac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012586:	2b00      	cmp	r3, #0
 8012588:	d008      	beq.n	801259c <tcp_input+0x590>
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012590:	69fa      	ldr	r2, [r7, #28]
 8012592:	6912      	ldr	r2, [r2, #16]
 8012594:	f06f 010d 	mvn.w	r1, #13
 8012598:	4610      	mov	r0, r2
 801259a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801259c:	69f9      	ldr	r1, [r7, #28]
 801259e:	486c      	ldr	r0, [pc, #432]	; (8012750 <tcp_input+0x744>)
 80125a0:	f7ff fbbc 	bl	8011d1c <tcp_pcb_remove>
        tcp_free(pcb);
 80125a4:	69f8      	ldr	r0, [r7, #28]
 80125a6:	f7fe f9a9 	bl	80108fc <tcp_free>
 80125aa:	e0da      	b.n	8012762 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80125ac:	2300      	movs	r3, #0
 80125ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80125b0:	4b63      	ldr	r3, [pc, #396]	; (8012740 <tcp_input+0x734>)
 80125b2:	881b      	ldrh	r3, [r3, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d01d      	beq.n	80125f4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80125b8:	4b61      	ldr	r3, [pc, #388]	; (8012740 <tcp_input+0x734>)
 80125ba:	881b      	ldrh	r3, [r3, #0]
 80125bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d00a      	beq.n	80125de <tcp_input+0x5d2>
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125ce:	69fa      	ldr	r2, [r7, #28]
 80125d0:	6910      	ldr	r0, [r2, #16]
 80125d2:	89fa      	ldrh	r2, [r7, #14]
 80125d4:	69f9      	ldr	r1, [r7, #28]
 80125d6:	4798      	blx	r3
 80125d8:	4603      	mov	r3, r0
 80125da:	74fb      	strb	r3, [r7, #19]
 80125dc:	e001      	b.n	80125e2 <tcp_input+0x5d6>
 80125de:	2300      	movs	r3, #0
 80125e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80125e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125e6:	f113 0f0d 	cmn.w	r3, #13
 80125ea:	f000 8098 	beq.w	801271e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80125ee:	4b54      	ldr	r3, [pc, #336]	; (8012740 <tcp_input+0x734>)
 80125f0:	2200      	movs	r2, #0
 80125f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80125f4:	69f8      	ldr	r0, [r7, #28]
 80125f6:	f000 f915 	bl	8012824 <tcp_input_delayed_close>
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	f040 8090 	bne.w	8012722 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012602:	4b4d      	ldr	r3, [pc, #308]	; (8012738 <tcp_input+0x72c>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d041      	beq.n	801268e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801260e:	2b00      	cmp	r3, #0
 8012610:	d006      	beq.n	8012620 <tcp_input+0x614>
 8012612:	4b50      	ldr	r3, [pc, #320]	; (8012754 <tcp_input+0x748>)
 8012614:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012618:	494f      	ldr	r1, [pc, #316]	; (8012758 <tcp_input+0x74c>)
 801261a:	4850      	ldr	r0, [pc, #320]	; (801275c <tcp_input+0x750>)
 801261c:	f006 fb9a 	bl	8018d54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012620:	69fb      	ldr	r3, [r7, #28]
 8012622:	8b5b      	ldrh	r3, [r3, #26]
 8012624:	f003 0310 	and.w	r3, r3, #16
 8012628:	2b00      	cmp	r3, #0
 801262a:	d008      	beq.n	801263e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801262c:	4b42      	ldr	r3, [pc, #264]	; (8012738 <tcp_input+0x72c>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4618      	mov	r0, r3
 8012632:	f7fd feb7 	bl	80103a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012636:	69f8      	ldr	r0, [r7, #28]
 8012638:	f7fe fc48 	bl	8010ecc <tcp_abort>
            goto aborted;
 801263c:	e091      	b.n	8012762 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00c      	beq.n	8012662 <tcp_input+0x656>
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	6918      	ldr	r0, [r3, #16]
 8012652:	4b39      	ldr	r3, [pc, #228]	; (8012738 <tcp_input+0x72c>)
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	2300      	movs	r3, #0
 8012658:	69f9      	ldr	r1, [r7, #28]
 801265a:	47a0      	blx	r4
 801265c:	4603      	mov	r3, r0
 801265e:	74fb      	strb	r3, [r7, #19]
 8012660:	e008      	b.n	8012674 <tcp_input+0x668>
 8012662:	4b35      	ldr	r3, [pc, #212]	; (8012738 <tcp_input+0x72c>)
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	2300      	movs	r3, #0
 8012668:	69f9      	ldr	r1, [r7, #28]
 801266a:	2000      	movs	r0, #0
 801266c:	f7ff f95e 	bl	801192c <tcp_recv_null>
 8012670:	4603      	mov	r3, r0
 8012672:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012674:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012678:	f113 0f0d 	cmn.w	r3, #13
 801267c:	d053      	beq.n	8012726 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801267e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d003      	beq.n	801268e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012686:	4b2c      	ldr	r3, [pc, #176]	; (8012738 <tcp_input+0x72c>)
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801268e:	4b2b      	ldr	r3, [pc, #172]	; (801273c <tcp_input+0x730>)
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	f003 0320 	and.w	r3, r3, #32
 8012696:	2b00      	cmp	r3, #0
 8012698:	d030      	beq.n	80126fc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801269a:	69fb      	ldr	r3, [r7, #28]
 801269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d009      	beq.n	80126b6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126a6:	7b5a      	ldrb	r2, [r3, #13]
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126ac:	f042 0220 	orr.w	r2, r2, #32
 80126b0:	b2d2      	uxtb	r2, r2
 80126b2:	735a      	strb	r2, [r3, #13]
 80126b4:	e022      	b.n	80126fc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80126b6:	69fb      	ldr	r3, [r7, #28]
 80126b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80126be:	d005      	beq.n	80126cc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126c4:	3301      	adds	r3, #1
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00b      	beq.n	80126ee <tcp_input+0x6e2>
 80126d6:	69fb      	ldr	r3, [r7, #28]
 80126d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80126dc:	69fb      	ldr	r3, [r7, #28]
 80126de:	6918      	ldr	r0, [r3, #16]
 80126e0:	2300      	movs	r3, #0
 80126e2:	2200      	movs	r2, #0
 80126e4:	69f9      	ldr	r1, [r7, #28]
 80126e6:	47a0      	blx	r4
 80126e8:	4603      	mov	r3, r0
 80126ea:	74fb      	strb	r3, [r7, #19]
 80126ec:	e001      	b.n	80126f2 <tcp_input+0x6e6>
 80126ee:	2300      	movs	r3, #0
 80126f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80126f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80126f6:	f113 0f0d 	cmn.w	r3, #13
 80126fa:	d016      	beq.n	801272a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80126fc:	4b13      	ldr	r3, [pc, #76]	; (801274c <tcp_input+0x740>)
 80126fe:	2200      	movs	r2, #0
 8012700:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012702:	69f8      	ldr	r0, [r7, #28]
 8012704:	f000 f88e 	bl	8012824 <tcp_input_delayed_close>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d128      	bne.n	8012760 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801270e:	69f8      	ldr	r0, [r7, #28]
 8012710:	f002 fac8 	bl	8014ca4 <tcp_output>
 8012714:	e025      	b.n	8012762 <tcp_input+0x756>
        goto aborted;
 8012716:	bf00      	nop
 8012718:	e023      	b.n	8012762 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801271a:	bf00      	nop
 801271c:	e021      	b.n	8012762 <tcp_input+0x756>
              goto aborted;
 801271e:	bf00      	nop
 8012720:	e01f      	b.n	8012762 <tcp_input+0x756>
          goto aborted;
 8012722:	bf00      	nop
 8012724:	e01d      	b.n	8012762 <tcp_input+0x756>
            goto aborted;
 8012726:	bf00      	nop
 8012728:	e01b      	b.n	8012762 <tcp_input+0x756>
              goto aborted;
 801272a:	bf00      	nop
 801272c:	e019      	b.n	8012762 <tcp_input+0x756>
 801272e:	bf00      	nop
 8012730:	2000d9a0 	.word	0x2000d9a0
 8012734:	2000d9b0 	.word	0x2000d9b0
 8012738:	2000d9d0 	.word	0x2000d9d0
 801273c:	2000d9cd 	.word	0x2000d9cd
 8012740:	2000d9c8 	.word	0x2000d9c8
 8012744:	2000d9cc 	.word	0x2000d9cc
 8012748:	2000d9ca 	.word	0x2000d9ca
 801274c:	2000d9d4 	.word	0x2000d9d4
 8012750:	2000d994 	.word	0x2000d994
 8012754:	0801b5e4 	.word	0x0801b5e4
 8012758:	0801b798 	.word	0x0801b798
 801275c:	0801b630 	.word	0x0801b630
          goto aborted;
 8012760:	bf00      	nop
    tcp_input_pcb = NULL;
 8012762:	4b27      	ldr	r3, [pc, #156]	; (8012800 <tcp_input+0x7f4>)
 8012764:	2200      	movs	r2, #0
 8012766:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012768:	4b26      	ldr	r3, [pc, #152]	; (8012804 <tcp_input+0x7f8>)
 801276a:	2200      	movs	r2, #0
 801276c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801276e:	4b26      	ldr	r3, [pc, #152]	; (8012808 <tcp_input+0x7fc>)
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d03f      	beq.n	80127f6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012776:	4b24      	ldr	r3, [pc, #144]	; (8012808 <tcp_input+0x7fc>)
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	4618      	mov	r0, r3
 801277c:	f7fd fe12 	bl	80103a4 <pbuf_free>
      inseg.p = NULL;
 8012780:	4b21      	ldr	r3, [pc, #132]	; (8012808 <tcp_input+0x7fc>)
 8012782:	2200      	movs	r2, #0
 8012784:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012786:	e036      	b.n	80127f6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012788:	4b20      	ldr	r3, [pc, #128]	; (801280c <tcp_input+0x800>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	899b      	ldrh	r3, [r3, #12]
 801278e:	b29b      	uxth	r3, r3
 8012790:	4618      	mov	r0, r3
 8012792:	f7fc fa15 	bl	800ebc0 <lwip_htons>
 8012796:	4603      	mov	r3, r0
 8012798:	b2db      	uxtb	r3, r3
 801279a:	f003 0304 	and.w	r3, r3, #4
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d118      	bne.n	80127d4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127a2:	4b1b      	ldr	r3, [pc, #108]	; (8012810 <tcp_input+0x804>)
 80127a4:	6819      	ldr	r1, [r3, #0]
 80127a6:	4b1b      	ldr	r3, [pc, #108]	; (8012814 <tcp_input+0x808>)
 80127a8:	881b      	ldrh	r3, [r3, #0]
 80127aa:	461a      	mov	r2, r3
 80127ac:	4b1a      	ldr	r3, [pc, #104]	; (8012818 <tcp_input+0x80c>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127b2:	4b16      	ldr	r3, [pc, #88]	; (801280c <tcp_input+0x800>)
 80127b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127b6:	885b      	ldrh	r3, [r3, #2]
 80127b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127ba:	4a14      	ldr	r2, [pc, #80]	; (801280c <tcp_input+0x800>)
 80127bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127be:	8812      	ldrh	r2, [r2, #0]
 80127c0:	b292      	uxth	r2, r2
 80127c2:	9202      	str	r2, [sp, #8]
 80127c4:	9301      	str	r3, [sp, #4]
 80127c6:	4b15      	ldr	r3, [pc, #84]	; (801281c <tcp_input+0x810>)
 80127c8:	9300      	str	r3, [sp, #0]
 80127ca:	4b15      	ldr	r3, [pc, #84]	; (8012820 <tcp_input+0x814>)
 80127cc:	4602      	mov	r2, r0
 80127ce:	2000      	movs	r0, #0
 80127d0:	f003 f81c 	bl	801580c <tcp_rst>
    pbuf_free(p);
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7fd fde5 	bl	80103a4 <pbuf_free>
  return;
 80127da:	e00c      	b.n	80127f6 <tcp_input+0x7ea>
    goto dropped;
 80127dc:	bf00      	nop
 80127de:	e006      	b.n	80127ee <tcp_input+0x7e2>
    goto dropped;
 80127e0:	bf00      	nop
 80127e2:	e004      	b.n	80127ee <tcp_input+0x7e2>
    goto dropped;
 80127e4:	bf00      	nop
 80127e6:	e002      	b.n	80127ee <tcp_input+0x7e2>
      goto dropped;
 80127e8:	bf00      	nop
 80127ea:	e000      	b.n	80127ee <tcp_input+0x7e2>
      goto dropped;
 80127ec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f7fd fdd8 	bl	80103a4 <pbuf_free>
 80127f4:	e000      	b.n	80127f8 <tcp_input+0x7ec>
  return;
 80127f6:	bf00      	nop
}
 80127f8:	3724      	adds	r7, #36	; 0x24
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd90      	pop	{r4, r7, pc}
 80127fe:	bf00      	nop
 8012800:	2000d9d4 	.word	0x2000d9d4
 8012804:	2000d9d0 	.word	0x2000d9d0
 8012808:	2000d9a0 	.word	0x2000d9a0
 801280c:	2000d9b0 	.word	0x2000d9b0
 8012810:	2000d9c4 	.word	0x2000d9c4
 8012814:	2000d9ca 	.word	0x2000d9ca
 8012818:	2000d9c0 	.word	0x2000d9c0
 801281c:	2000a244 	.word	0x2000a244
 8012820:	2000a248 	.word	0x2000a248

08012824 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d106      	bne.n	8012840 <tcp_input_delayed_close+0x1c>
 8012832:	4b17      	ldr	r3, [pc, #92]	; (8012890 <tcp_input_delayed_close+0x6c>)
 8012834:	f240 225a 	movw	r2, #602	; 0x25a
 8012838:	4916      	ldr	r1, [pc, #88]	; (8012894 <tcp_input_delayed_close+0x70>)
 801283a:	4817      	ldr	r0, [pc, #92]	; (8012898 <tcp_input_delayed_close+0x74>)
 801283c:	f006 fa8a 	bl	8018d54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012840:	4b16      	ldr	r3, [pc, #88]	; (801289c <tcp_input_delayed_close+0x78>)
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	f003 0310 	and.w	r3, r3, #16
 8012848:	2b00      	cmp	r3, #0
 801284a:	d01c      	beq.n	8012886 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	8b5b      	ldrh	r3, [r3, #26]
 8012850:	f003 0310 	and.w	r3, r3, #16
 8012854:	2b00      	cmp	r3, #0
 8012856:	d10d      	bne.n	8012874 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801285e:	2b00      	cmp	r3, #0
 8012860:	d008      	beq.n	8012874 <tcp_input_delayed_close+0x50>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	6912      	ldr	r2, [r2, #16]
 801286c:	f06f 010e 	mvn.w	r1, #14
 8012870:	4610      	mov	r0, r2
 8012872:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012874:	6879      	ldr	r1, [r7, #4]
 8012876:	480a      	ldr	r0, [pc, #40]	; (80128a0 <tcp_input_delayed_close+0x7c>)
 8012878:	f7ff fa50 	bl	8011d1c <tcp_pcb_remove>
    tcp_free(pcb);
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7fe f83d 	bl	80108fc <tcp_free>
    return 1;
 8012882:	2301      	movs	r3, #1
 8012884:	e000      	b.n	8012888 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	0801b5e4 	.word	0x0801b5e4
 8012894:	0801b7b4 	.word	0x0801b7b4
 8012898:	0801b630 	.word	0x0801b630
 801289c:	2000d9cd 	.word	0x2000d9cd
 80128a0:	2000d994 	.word	0x2000d994

080128a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80128a4:	b590      	push	{r4, r7, lr}
 80128a6:	b08b      	sub	sp, #44	; 0x2c
 80128a8:	af04      	add	r7, sp, #16
 80128aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80128ac:	4b6f      	ldr	r3, [pc, #444]	; (8012a6c <tcp_listen_input+0x1c8>)
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	f003 0304 	and.w	r3, r3, #4
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	f040 80d2 	bne.w	8012a5e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d106      	bne.n	80128ce <tcp_listen_input+0x2a>
 80128c0:	4b6b      	ldr	r3, [pc, #428]	; (8012a70 <tcp_listen_input+0x1cc>)
 80128c2:	f240 2281 	movw	r2, #641	; 0x281
 80128c6:	496b      	ldr	r1, [pc, #428]	; (8012a74 <tcp_listen_input+0x1d0>)
 80128c8:	486b      	ldr	r0, [pc, #428]	; (8012a78 <tcp_listen_input+0x1d4>)
 80128ca:	f006 fa43 	bl	8018d54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80128ce:	4b67      	ldr	r3, [pc, #412]	; (8012a6c <tcp_listen_input+0x1c8>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	f003 0310 	and.w	r3, r3, #16
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d019      	beq.n	801290e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128da:	4b68      	ldr	r3, [pc, #416]	; (8012a7c <tcp_listen_input+0x1d8>)
 80128dc:	6819      	ldr	r1, [r3, #0]
 80128de:	4b68      	ldr	r3, [pc, #416]	; (8012a80 <tcp_listen_input+0x1dc>)
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	461a      	mov	r2, r3
 80128e4:	4b67      	ldr	r3, [pc, #412]	; (8012a84 <tcp_listen_input+0x1e0>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128ea:	4b67      	ldr	r3, [pc, #412]	; (8012a88 <tcp_listen_input+0x1e4>)
 80128ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128ee:	885b      	ldrh	r3, [r3, #2]
 80128f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128f2:	4a65      	ldr	r2, [pc, #404]	; (8012a88 <tcp_listen_input+0x1e4>)
 80128f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128f6:	8812      	ldrh	r2, [r2, #0]
 80128f8:	b292      	uxth	r2, r2
 80128fa:	9202      	str	r2, [sp, #8]
 80128fc:	9301      	str	r3, [sp, #4]
 80128fe:	4b63      	ldr	r3, [pc, #396]	; (8012a8c <tcp_listen_input+0x1e8>)
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	4b63      	ldr	r3, [pc, #396]	; (8012a90 <tcp_listen_input+0x1ec>)
 8012904:	4602      	mov	r2, r0
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f002 ff80 	bl	801580c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801290c:	e0a9      	b.n	8012a62 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801290e:	4b57      	ldr	r3, [pc, #348]	; (8012a6c <tcp_listen_input+0x1c8>)
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	f003 0302 	and.w	r3, r3, #2
 8012916:	2b00      	cmp	r3, #0
 8012918:	f000 80a3 	beq.w	8012a62 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	7d5b      	ldrb	r3, [r3, #21]
 8012920:	4618      	mov	r0, r3
 8012922:	f7ff f927 	bl	8011b74 <tcp_alloc>
 8012926:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d111      	bne.n	8012952 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	699b      	ldr	r3, [r3, #24]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00a      	beq.n	801294c <tcp_listen_input+0xa8>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	699b      	ldr	r3, [r3, #24]
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	6910      	ldr	r0, [r2, #16]
 801293e:	f04f 32ff 	mov.w	r2, #4294967295
 8012942:	2100      	movs	r1, #0
 8012944:	4798      	blx	r3
 8012946:	4603      	mov	r3, r0
 8012948:	73bb      	strb	r3, [r7, #14]
      return;
 801294a:	e08b      	b.n	8012a64 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801294c:	23f0      	movs	r3, #240	; 0xf0
 801294e:	73bb      	strb	r3, [r7, #14]
      return;
 8012950:	e088      	b.n	8012a64 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012952:	4b50      	ldr	r3, [pc, #320]	; (8012a94 <tcp_listen_input+0x1f0>)
 8012954:	695a      	ldr	r2, [r3, #20]
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801295a:	4b4e      	ldr	r3, [pc, #312]	; (8012a94 <tcp_listen_input+0x1f0>)
 801295c:	691a      	ldr	r2, [r3, #16]
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8ada      	ldrh	r2, [r3, #22]
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801296a:	4b47      	ldr	r3, [pc, #284]	; (8012a88 <tcp_listen_input+0x1e4>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	b29a      	uxth	r2, r3
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	2203      	movs	r2, #3
 801297a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801297c:	4b41      	ldr	r3, [pc, #260]	; (8012a84 <tcp_listen_input+0x1e0>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	1c5a      	adds	r2, r3, #1
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801298e:	6978      	ldr	r0, [r7, #20]
 8012990:	f7ff fa58 	bl	8011e44 <tcp_next_iss>
 8012994:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	693a      	ldr	r2, [r7, #16]
 801299a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	693a      	ldr	r2, [r7, #16]
 80129a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	693a      	ldr	r2, [r7, #16]
 80129a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	693a      	ldr	r2, [r7, #16]
 80129ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80129ae:	4b35      	ldr	r3, [pc, #212]	; (8012a84 <tcp_listen_input+0x1e0>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	1e5a      	subs	r2, r3, #1
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	691a      	ldr	r2, [r3, #16]
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	7a5b      	ldrb	r3, [r3, #9]
 80129ca:	f003 030c 	and.w	r3, r3, #12
 80129ce:	b2da      	uxtb	r2, r3
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	7a1a      	ldrb	r2, [r3, #8]
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80129dc:	4b2e      	ldr	r3, [pc, #184]	; (8012a98 <tcp_listen_input+0x1f4>)
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	60da      	str	r2, [r3, #12]
 80129e4:	4a2c      	ldr	r2, [pc, #176]	; (8012a98 <tcp_listen_input+0x1f4>)
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	6013      	str	r3, [r2, #0]
 80129ea:	f003 f8d1 	bl	8015b90 <tcp_timer_needed>
 80129ee:	4b2b      	ldr	r3, [pc, #172]	; (8012a9c <tcp_listen_input+0x1f8>)
 80129f0:	2201      	movs	r2, #1
 80129f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80129f4:	6978      	ldr	r0, [r7, #20]
 80129f6:	f001 fd8f 	bl	8014518 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80129fa:	4b23      	ldr	r3, [pc, #140]	; (8012a88 <tcp_listen_input+0x1e4>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	89db      	ldrh	r3, [r3, #14]
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f004 fcc5 	bl	80173ac <ip4_route>
 8012a22:	4601      	mov	r1, r0
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	3304      	adds	r3, #4
 8012a28:	461a      	mov	r2, r3
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f7ff fa30 	bl	8011e90 <tcp_eff_send_mss_netif>
 8012a30:	4603      	mov	r3, r0
 8012a32:	461a      	mov	r2, r3
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012a38:	2112      	movs	r1, #18
 8012a3a:	6978      	ldr	r0, [r7, #20]
 8012a3c:	f002 f844 	bl	8014ac8 <tcp_enqueue_flags>
 8012a40:	4603      	mov	r3, r0
 8012a42:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d004      	beq.n	8012a56 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	6978      	ldr	r0, [r7, #20]
 8012a50:	f7fe f97e 	bl	8010d50 <tcp_abandon>
      return;
 8012a54:	e006      	b.n	8012a64 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012a56:	6978      	ldr	r0, [r7, #20]
 8012a58:	f002 f924 	bl	8014ca4 <tcp_output>
  return;
 8012a5c:	e001      	b.n	8012a62 <tcp_listen_input+0x1be>
    return;
 8012a5e:	bf00      	nop
 8012a60:	e000      	b.n	8012a64 <tcp_listen_input+0x1c0>
  return;
 8012a62:	bf00      	nop
}
 8012a64:	371c      	adds	r7, #28
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd90      	pop	{r4, r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	2000d9cc 	.word	0x2000d9cc
 8012a70:	0801b5e4 	.word	0x0801b5e4
 8012a74:	0801b7dc 	.word	0x0801b7dc
 8012a78:	0801b630 	.word	0x0801b630
 8012a7c:	2000d9c4 	.word	0x2000d9c4
 8012a80:	2000d9ca 	.word	0x2000d9ca
 8012a84:	2000d9c0 	.word	0x2000d9c0
 8012a88:	2000d9b0 	.word	0x2000d9b0
 8012a8c:	2000a244 	.word	0x2000a244
 8012a90:	2000a248 	.word	0x2000a248
 8012a94:	2000a234 	.word	0x2000a234
 8012a98:	2000d994 	.word	0x2000d994
 8012a9c:	2000d99c 	.word	0x2000d99c

08012aa0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b086      	sub	sp, #24
 8012aa4:	af04      	add	r7, sp, #16
 8012aa6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012aa8:	4b2f      	ldr	r3, [pc, #188]	; (8012b68 <tcp_timewait_input+0xc8>)
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	f003 0304 	and.w	r3, r3, #4
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d153      	bne.n	8012b5c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d106      	bne.n	8012ac8 <tcp_timewait_input+0x28>
 8012aba:	4b2c      	ldr	r3, [pc, #176]	; (8012b6c <tcp_timewait_input+0xcc>)
 8012abc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012ac0:	492b      	ldr	r1, [pc, #172]	; (8012b70 <tcp_timewait_input+0xd0>)
 8012ac2:	482c      	ldr	r0, [pc, #176]	; (8012b74 <tcp_timewait_input+0xd4>)
 8012ac4:	f006 f946 	bl	8018d54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012ac8:	4b27      	ldr	r3, [pc, #156]	; (8012b68 <tcp_timewait_input+0xc8>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	f003 0302 	and.w	r3, r3, #2
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d02a      	beq.n	8012b2a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012ad4:	4b28      	ldr	r3, [pc, #160]	; (8012b78 <tcp_timewait_input+0xd8>)
 8012ad6:	681a      	ldr	r2, [r3, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	db2d      	blt.n	8012b3e <tcp_timewait_input+0x9e>
 8012ae2:	4b25      	ldr	r3, [pc, #148]	; (8012b78 <tcp_timewait_input+0xd8>)
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aea:	6879      	ldr	r1, [r7, #4]
 8012aec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012aee:	440b      	add	r3, r1
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	dc23      	bgt.n	8012b3e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012af6:	4b21      	ldr	r3, [pc, #132]	; (8012b7c <tcp_timewait_input+0xdc>)
 8012af8:	6819      	ldr	r1, [r3, #0]
 8012afa:	4b21      	ldr	r3, [pc, #132]	; (8012b80 <tcp_timewait_input+0xe0>)
 8012afc:	881b      	ldrh	r3, [r3, #0]
 8012afe:	461a      	mov	r2, r3
 8012b00:	4b1d      	ldr	r3, [pc, #116]	; (8012b78 <tcp_timewait_input+0xd8>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b06:	4b1f      	ldr	r3, [pc, #124]	; (8012b84 <tcp_timewait_input+0xe4>)
 8012b08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b0a:	885b      	ldrh	r3, [r3, #2]
 8012b0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b0e:	4a1d      	ldr	r2, [pc, #116]	; (8012b84 <tcp_timewait_input+0xe4>)
 8012b10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b12:	8812      	ldrh	r2, [r2, #0]
 8012b14:	b292      	uxth	r2, r2
 8012b16:	9202      	str	r2, [sp, #8]
 8012b18:	9301      	str	r3, [sp, #4]
 8012b1a:	4b1b      	ldr	r3, [pc, #108]	; (8012b88 <tcp_timewait_input+0xe8>)
 8012b1c:	9300      	str	r3, [sp, #0]
 8012b1e:	4b1b      	ldr	r3, [pc, #108]	; (8012b8c <tcp_timewait_input+0xec>)
 8012b20:	4602      	mov	r2, r0
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f002 fe72 	bl	801580c <tcp_rst>
      return;
 8012b28:	e01b      	b.n	8012b62 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012b2a:	4b0f      	ldr	r3, [pc, #60]	; (8012b68 <tcp_timewait_input+0xc8>)
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	f003 0301 	and.w	r3, r3, #1
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d003      	beq.n	8012b3e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012b36:	4b16      	ldr	r3, [pc, #88]	; (8012b90 <tcp_timewait_input+0xf0>)
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012b3e:	4b10      	ldr	r3, [pc, #64]	; (8012b80 <tcp_timewait_input+0xe0>)
 8012b40:	881b      	ldrh	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d00c      	beq.n	8012b60 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8b5b      	ldrh	r3, [r3, #26]
 8012b4a:	f043 0302 	orr.w	r3, r3, #2
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f002 f8a5 	bl	8014ca4 <tcp_output>
  }
  return;
 8012b5a:	e001      	b.n	8012b60 <tcp_timewait_input+0xc0>
    return;
 8012b5c:	bf00      	nop
 8012b5e:	e000      	b.n	8012b62 <tcp_timewait_input+0xc2>
  return;
 8012b60:	bf00      	nop
}
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	2000d9cc 	.word	0x2000d9cc
 8012b6c:	0801b5e4 	.word	0x0801b5e4
 8012b70:	0801b7fc 	.word	0x0801b7fc
 8012b74:	0801b630 	.word	0x0801b630
 8012b78:	2000d9c0 	.word	0x2000d9c0
 8012b7c:	2000d9c4 	.word	0x2000d9c4
 8012b80:	2000d9ca 	.word	0x2000d9ca
 8012b84:	2000d9b0 	.word	0x2000d9b0
 8012b88:	2000a244 	.word	0x2000a244
 8012b8c:	2000a248 	.word	0x2000a248
 8012b90:	2000d988 	.word	0x2000d988

08012b94 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012b94:	b590      	push	{r4, r7, lr}
 8012b96:	b08d      	sub	sp, #52	; 0x34
 8012b98:	af04      	add	r7, sp, #16
 8012b9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <tcp_process+0x24>
 8012baa:	4b9d      	ldr	r3, [pc, #628]	; (8012e20 <tcp_process+0x28c>)
 8012bac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012bb0:	499c      	ldr	r1, [pc, #624]	; (8012e24 <tcp_process+0x290>)
 8012bb2:	489d      	ldr	r0, [pc, #628]	; (8012e28 <tcp_process+0x294>)
 8012bb4:	f006 f8ce 	bl	8018d54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012bb8:	4b9c      	ldr	r3, [pc, #624]	; (8012e2c <tcp_process+0x298>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	f003 0304 	and.w	r3, r3, #4
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d04e      	beq.n	8012c62 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	7d1b      	ldrb	r3, [r3, #20]
 8012bc8:	2b02      	cmp	r3, #2
 8012bca:	d108      	bne.n	8012bde <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bd0:	4b97      	ldr	r3, [pc, #604]	; (8012e30 <tcp_process+0x29c>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d123      	bne.n	8012c20 <tcp_process+0x8c>
        acceptable = 1;
 8012bd8:	2301      	movs	r3, #1
 8012bda:	76fb      	strb	r3, [r7, #27]
 8012bdc:	e020      	b.n	8012c20 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012be2:	4b94      	ldr	r3, [pc, #592]	; (8012e34 <tcp_process+0x2a0>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d102      	bne.n	8012bf0 <tcp_process+0x5c>
        acceptable = 1;
 8012bea:	2301      	movs	r3, #1
 8012bec:	76fb      	strb	r3, [r7, #27]
 8012bee:	e017      	b.n	8012c20 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012bf0:	4b90      	ldr	r3, [pc, #576]	; (8012e34 <tcp_process+0x2a0>)
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	db10      	blt.n	8012c20 <tcp_process+0x8c>
 8012bfe:	4b8d      	ldr	r3, [pc, #564]	; (8012e34 <tcp_process+0x2a0>)
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c06:	6879      	ldr	r1, [r7, #4]
 8012c08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c0a:	440b      	add	r3, r1
 8012c0c:	1ad3      	subs	r3, r2, r3
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	dc06      	bgt.n	8012c20 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	8b5b      	ldrh	r3, [r3, #26]
 8012c16:	f043 0302 	orr.w	r3, r3, #2
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012c20:	7efb      	ldrb	r3, [r7, #27]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d01b      	beq.n	8012c5e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	7d1b      	ldrb	r3, [r3, #20]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d106      	bne.n	8012c3c <tcp_process+0xa8>
 8012c2e:	4b7c      	ldr	r3, [pc, #496]	; (8012e20 <tcp_process+0x28c>)
 8012c30:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012c34:	4980      	ldr	r1, [pc, #512]	; (8012e38 <tcp_process+0x2a4>)
 8012c36:	487c      	ldr	r0, [pc, #496]	; (8012e28 <tcp_process+0x294>)
 8012c38:	f006 f88c 	bl	8018d54 <iprintf>
      recv_flags |= TF_RESET;
 8012c3c:	4b7f      	ldr	r3, [pc, #508]	; (8012e3c <tcp_process+0x2a8>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f043 0308 	orr.w	r3, r3, #8
 8012c44:	b2da      	uxtb	r2, r3
 8012c46:	4b7d      	ldr	r3, [pc, #500]	; (8012e3c <tcp_process+0x2a8>)
 8012c48:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	8b5b      	ldrh	r3, [r3, #26]
 8012c4e:	f023 0301 	bic.w	r3, r3, #1
 8012c52:	b29a      	uxth	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012c58:	f06f 030d 	mvn.w	r3, #13
 8012c5c:	e37a      	b.n	8013354 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	e378      	b.n	8013354 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012c62:	4b72      	ldr	r3, [pc, #456]	; (8012e2c <tcp_process+0x298>)
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	f003 0302 	and.w	r3, r3, #2
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d010      	beq.n	8012c90 <tcp_process+0xfc>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	7d1b      	ldrb	r3, [r3, #20]
 8012c72:	2b02      	cmp	r3, #2
 8012c74:	d00c      	beq.n	8012c90 <tcp_process+0xfc>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	7d1b      	ldrb	r3, [r3, #20]
 8012c7a:	2b03      	cmp	r3, #3
 8012c7c:	d008      	beq.n	8012c90 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	8b5b      	ldrh	r3, [r3, #26]
 8012c82:	f043 0302 	orr.w	r3, r3, #2
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e361      	b.n	8013354 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	8b5b      	ldrh	r3, [r3, #26]
 8012c94:	f003 0310 	and.w	r3, r3, #16
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d103      	bne.n	8012ca4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012c9c:	4b68      	ldr	r3, [pc, #416]	; (8012e40 <tcp_process+0x2ac>)
 8012c9e:	681a      	ldr	r2, [r3, #0]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f001 fc2f 	bl	8014518 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	7d1b      	ldrb	r3, [r3, #20]
 8012cbe:	3b02      	subs	r3, #2
 8012cc0:	2b07      	cmp	r3, #7
 8012cc2:	f200 8337 	bhi.w	8013334 <tcp_process+0x7a0>
 8012cc6:	a201      	add	r2, pc, #4	; (adr r2, 8012ccc <tcp_process+0x138>)
 8012cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ccc:	08012ced 	.word	0x08012ced
 8012cd0:	08012f1d 	.word	0x08012f1d
 8012cd4:	08013095 	.word	0x08013095
 8012cd8:	080130bf 	.word	0x080130bf
 8012cdc:	080131e3 	.word	0x080131e3
 8012ce0:	08013095 	.word	0x08013095
 8012ce4:	0801326f 	.word	0x0801326f
 8012ce8:	080132ff 	.word	0x080132ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012cec:	4b4f      	ldr	r3, [pc, #316]	; (8012e2c <tcp_process+0x298>)
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	f003 0310 	and.w	r3, r3, #16
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f000 80e4 	beq.w	8012ec2 <tcp_process+0x32e>
 8012cfa:	4b4c      	ldr	r3, [pc, #304]	; (8012e2c <tcp_process+0x298>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 80dd 	beq.w	8012ec2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d0c:	1c5a      	adds	r2, r3, #1
 8012d0e:	4b48      	ldr	r3, [pc, #288]	; (8012e30 <tcp_process+0x29c>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	429a      	cmp	r2, r3
 8012d14:	f040 80d5 	bne.w	8012ec2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012d18:	4b46      	ldr	r3, [pc, #280]	; (8012e34 <tcp_process+0x2a0>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	1c5a      	adds	r2, r3, #1
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012d2a:	4b41      	ldr	r3, [pc, #260]	; (8012e30 <tcp_process+0x29c>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012d32:	4b44      	ldr	r3, [pc, #272]	; (8012e44 <tcp_process+0x2b0>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	89db      	ldrh	r3, [r3, #14]
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012d4c:	4b39      	ldr	r3, [pc, #228]	; (8012e34 <tcp_process+0x2a0>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	1e5a      	subs	r2, r3, #1
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2204      	movs	r2, #4
 8012d5a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	3304      	adds	r3, #4
 8012d64:	4618      	mov	r0, r3
 8012d66:	f004 fb21 	bl	80173ac <ip4_route>
 8012d6a:	4601      	mov	r1, r0
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3304      	adds	r3, #4
 8012d70:	461a      	mov	r2, r3
 8012d72:	4620      	mov	r0, r4
 8012d74:	f7ff f88c 	bl	8011e90 <tcp_eff_send_mss_netif>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d84:	009a      	lsls	r2, r3, #2
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012d90:	428b      	cmp	r3, r1
 8012d92:	bf38      	it	cc
 8012d94:	460b      	movcc	r3, r1
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d204      	bcs.n	8012da4 <tcp_process+0x210>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	e00d      	b.n	8012dc0 <tcp_process+0x22c>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	f241 121c 	movw	r2, #4380	; 0x111c
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d904      	bls.n	8012dbc <tcp_process+0x228>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012db6:	005b      	lsls	r3, r3, #1
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	e001      	b.n	8012dc0 <tcp_process+0x22c>
 8012dbc:	f241 131c 	movw	r3, #4380	; 0x111c
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d106      	bne.n	8012dde <tcp_process+0x24a>
 8012dd0:	4b13      	ldr	r3, [pc, #76]	; (8012e20 <tcp_process+0x28c>)
 8012dd2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012dd6:	491c      	ldr	r1, [pc, #112]	; (8012e48 <tcp_process+0x2b4>)
 8012dd8:	4813      	ldr	r0, [pc, #76]	; (8012e28 <tcp_process+0x294>)
 8012dda:	f005 ffbb 	bl	8018d54 <iprintf>
        --pcb->snd_queuelen;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012de4:	3b01      	subs	r3, #1
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012df2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d12a      	bne.n	8012e50 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dfe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <tcp_process+0x280>
 8012e06:	4b06      	ldr	r3, [pc, #24]	; (8012e20 <tcp_process+0x28c>)
 8012e08:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012e0c:	490f      	ldr	r1, [pc, #60]	; (8012e4c <tcp_process+0x2b8>)
 8012e0e:	4806      	ldr	r0, [pc, #24]	; (8012e28 <tcp_process+0x294>)
 8012e10:	f005 ffa0 	bl	8018d54 <iprintf>
          pcb->unsent = rseg->next;
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e1c:	e01c      	b.n	8012e58 <tcp_process+0x2c4>
 8012e1e:	bf00      	nop
 8012e20:	0801b5e4 	.word	0x0801b5e4
 8012e24:	0801b81c 	.word	0x0801b81c
 8012e28:	0801b630 	.word	0x0801b630
 8012e2c:	2000d9cc 	.word	0x2000d9cc
 8012e30:	2000d9c4 	.word	0x2000d9c4
 8012e34:	2000d9c0 	.word	0x2000d9c0
 8012e38:	0801b838 	.word	0x0801b838
 8012e3c:	2000d9cd 	.word	0x2000d9cd
 8012e40:	2000d988 	.word	0x2000d988
 8012e44:	2000d9b0 	.word	0x2000d9b0
 8012e48:	0801b858 	.word	0x0801b858
 8012e4c:	0801b870 	.word	0x0801b870
        } else {
          pcb->unacked = rseg->next;
 8012e50:	69fb      	ldr	r3, [r7, #28]
 8012e52:	681a      	ldr	r2, [r3, #0]
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012e58:	69f8      	ldr	r0, [r7, #28]
 8012e5a:	f7fe fd22 	bl	80118a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d104      	bne.n	8012e70 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e6c:	861a      	strh	r2, [r3, #48]	; 0x30
 8012e6e:	e006      	b.n	8012e7e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2200      	movs	r2, #0
 8012e74:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00a      	beq.n	8012e9e <tcp_process+0x30a>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	6910      	ldr	r0, [r2, #16]
 8012e92:	2200      	movs	r2, #0
 8012e94:	6879      	ldr	r1, [r7, #4]
 8012e96:	4798      	blx	r3
 8012e98:	4603      	mov	r3, r0
 8012e9a:	76bb      	strb	r3, [r7, #26]
 8012e9c:	e001      	b.n	8012ea2 <tcp_process+0x30e>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012ea2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ea6:	f113 0f0d 	cmn.w	r3, #13
 8012eaa:	d102      	bne.n	8012eb2 <tcp_process+0x31e>
          return ERR_ABRT;
 8012eac:	f06f 030c 	mvn.w	r3, #12
 8012eb0:	e250      	b.n	8013354 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	8b5b      	ldrh	r3, [r3, #26]
 8012eb6:	f043 0302 	orr.w	r3, r3, #2
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012ec0:	e23a      	b.n	8013338 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012ec2:	4b98      	ldr	r3, [pc, #608]	; (8013124 <tcp_process+0x590>)
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	f003 0310 	and.w	r3, r3, #16
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f000 8234 	beq.w	8013338 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ed0:	4b95      	ldr	r3, [pc, #596]	; (8013128 <tcp_process+0x594>)
 8012ed2:	6819      	ldr	r1, [r3, #0]
 8012ed4:	4b95      	ldr	r3, [pc, #596]	; (801312c <tcp_process+0x598>)
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	461a      	mov	r2, r3
 8012eda:	4b95      	ldr	r3, [pc, #596]	; (8013130 <tcp_process+0x59c>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ee0:	4b94      	ldr	r3, [pc, #592]	; (8013134 <tcp_process+0x5a0>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ee4:	885b      	ldrh	r3, [r3, #2]
 8012ee6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ee8:	4a92      	ldr	r2, [pc, #584]	; (8013134 <tcp_process+0x5a0>)
 8012eea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012eec:	8812      	ldrh	r2, [r2, #0]
 8012eee:	b292      	uxth	r2, r2
 8012ef0:	9202      	str	r2, [sp, #8]
 8012ef2:	9301      	str	r3, [sp, #4]
 8012ef4:	4b90      	ldr	r3, [pc, #576]	; (8013138 <tcp_process+0x5a4>)
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	4b90      	ldr	r3, [pc, #576]	; (801313c <tcp_process+0x5a8>)
 8012efa:	4602      	mov	r2, r0
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f002 fc85 	bl	801580c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f08:	2b05      	cmp	r3, #5
 8012f0a:	f200 8215 	bhi.w	8013338 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2200      	movs	r2, #0
 8012f12:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f002 fa4f 	bl	80153b8 <tcp_rexmit_rto>
      break;
 8012f1a:	e20d      	b.n	8013338 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012f1c:	4b81      	ldr	r3, [pc, #516]	; (8013124 <tcp_process+0x590>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	f003 0310 	and.w	r3, r3, #16
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f000 80a1 	beq.w	801306c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f2a:	4b7f      	ldr	r3, [pc, #508]	; (8013128 <tcp_process+0x594>)
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	3b01      	subs	r3, #1
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	db7e      	blt.n	8013038 <tcp_process+0x4a4>
 8012f3a:	4b7b      	ldr	r3, [pc, #492]	; (8013128 <tcp_process+0x594>)
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f42:	1ad3      	subs	r3, r2, r3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	dc77      	bgt.n	8013038 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2204      	movs	r2, #4
 8012f4c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d102      	bne.n	8012f5c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012f56:	23fa      	movs	r3, #250	; 0xfa
 8012f58:	76bb      	strb	r3, [r7, #26]
 8012f5a:	e01d      	b.n	8012f98 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f60:	699b      	ldr	r3, [r3, #24]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d106      	bne.n	8012f74 <tcp_process+0x3e0>
 8012f66:	4b76      	ldr	r3, [pc, #472]	; (8013140 <tcp_process+0x5ac>)
 8012f68:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012f6c:	4975      	ldr	r1, [pc, #468]	; (8013144 <tcp_process+0x5b0>)
 8012f6e:	4876      	ldr	r0, [pc, #472]	; (8013148 <tcp_process+0x5b4>)
 8012f70:	f005 fef0 	bl	8018d54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f78:	699b      	ldr	r3, [r3, #24]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d00a      	beq.n	8012f94 <tcp_process+0x400>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f82:	699b      	ldr	r3, [r3, #24]
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	6910      	ldr	r0, [r2, #16]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	6879      	ldr	r1, [r7, #4]
 8012f8c:	4798      	blx	r3
 8012f8e:	4603      	mov	r3, r0
 8012f90:	76bb      	strb	r3, [r7, #26]
 8012f92:	e001      	b.n	8012f98 <tcp_process+0x404>
 8012f94:	23f0      	movs	r3, #240	; 0xf0
 8012f96:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012f98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d00a      	beq.n	8012fb6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012fa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fa4:	f113 0f0d 	cmn.w	r3, #13
 8012fa8:	d002      	beq.n	8012fb0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7fd ff8e 	bl	8010ecc <tcp_abort>
            }
            return ERR_ABRT;
 8012fb0:	f06f 030c 	mvn.w	r3, #12
 8012fb4:	e1ce      	b.n	8013354 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 fae0 	bl	801357c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012fbc:	4b63      	ldr	r3, [pc, #396]	; (801314c <tcp_process+0x5b8>)
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d005      	beq.n	8012fd0 <tcp_process+0x43c>
            recv_acked--;
 8012fc4:	4b61      	ldr	r3, [pc, #388]	; (801314c <tcp_process+0x5b8>)
 8012fc6:	881b      	ldrh	r3, [r3, #0]
 8012fc8:	3b01      	subs	r3, #1
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	4b5f      	ldr	r3, [pc, #380]	; (801314c <tcp_process+0x5b8>)
 8012fce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fd4:	009a      	lsls	r2, r3, #2
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fda:	005b      	lsls	r3, r3, #1
 8012fdc:	f241 111c 	movw	r1, #4380	; 0x111c
 8012fe0:	428b      	cmp	r3, r1
 8012fe2:	bf38      	it	cc
 8012fe4:	460b      	movcc	r3, r1
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d204      	bcs.n	8012ff4 <tcp_process+0x460>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	e00d      	b.n	8013010 <tcp_process+0x47c>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ff8:	005b      	lsls	r3, r3, #1
 8012ffa:	f241 121c 	movw	r2, #4380	; 0x111c
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d904      	bls.n	801300c <tcp_process+0x478>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	b29b      	uxth	r3, r3
 801300a:	e001      	b.n	8013010 <tcp_process+0x47c>
 801300c:	f241 131c 	movw	r3, #4380	; 0x111c
 8013010:	687a      	ldr	r2, [r7, #4]
 8013012:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013016:	4b4e      	ldr	r3, [pc, #312]	; (8013150 <tcp_process+0x5bc>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f003 0320 	and.w	r3, r3, #32
 801301e:	2b00      	cmp	r3, #0
 8013020:	d037      	beq.n	8013092 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	8b5b      	ldrh	r3, [r3, #26]
 8013026:	f043 0302 	orr.w	r3, r3, #2
 801302a:	b29a      	uxth	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2207      	movs	r2, #7
 8013034:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013036:	e02c      	b.n	8013092 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013038:	4b3b      	ldr	r3, [pc, #236]	; (8013128 <tcp_process+0x594>)
 801303a:	6819      	ldr	r1, [r3, #0]
 801303c:	4b3b      	ldr	r3, [pc, #236]	; (801312c <tcp_process+0x598>)
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	461a      	mov	r2, r3
 8013042:	4b3b      	ldr	r3, [pc, #236]	; (8013130 <tcp_process+0x59c>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013048:	4b3a      	ldr	r3, [pc, #232]	; (8013134 <tcp_process+0x5a0>)
 801304a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801304c:	885b      	ldrh	r3, [r3, #2]
 801304e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013050:	4a38      	ldr	r2, [pc, #224]	; (8013134 <tcp_process+0x5a0>)
 8013052:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013054:	8812      	ldrh	r2, [r2, #0]
 8013056:	b292      	uxth	r2, r2
 8013058:	9202      	str	r2, [sp, #8]
 801305a:	9301      	str	r3, [sp, #4]
 801305c:	4b36      	ldr	r3, [pc, #216]	; (8013138 <tcp_process+0x5a4>)
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	4b36      	ldr	r3, [pc, #216]	; (801313c <tcp_process+0x5a8>)
 8013062:	4602      	mov	r2, r0
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f002 fbd1 	bl	801580c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801306a:	e167      	b.n	801333c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801306c:	4b2d      	ldr	r3, [pc, #180]	; (8013124 <tcp_process+0x590>)
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f003 0302 	and.w	r3, r3, #2
 8013074:	2b00      	cmp	r3, #0
 8013076:	f000 8161 	beq.w	801333c <tcp_process+0x7a8>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801307e:	1e5a      	subs	r2, r3, #1
 8013080:	4b2b      	ldr	r3, [pc, #172]	; (8013130 <tcp_process+0x59c>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	429a      	cmp	r2, r3
 8013086:	f040 8159 	bne.w	801333c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f002 f9b6 	bl	80153fc <tcp_rexmit>
      break;
 8013090:	e154      	b.n	801333c <tcp_process+0x7a8>
 8013092:	e153      	b.n	801333c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f000 fa71 	bl	801357c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801309a:	4b2d      	ldr	r3, [pc, #180]	; (8013150 <tcp_process+0x5bc>)
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f003 0320 	and.w	r3, r3, #32
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	f000 814c 	beq.w	8013340 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	8b5b      	ldrh	r3, [r3, #26]
 80130ac:	f043 0302 	orr.w	r3, r3, #2
 80130b0:	b29a      	uxth	r2, r3
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2207      	movs	r2, #7
 80130ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80130bc:	e140      	b.n	8013340 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 fa5c 	bl	801357c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80130c4:	4b22      	ldr	r3, [pc, #136]	; (8013150 <tcp_process+0x5bc>)
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	f003 0320 	and.w	r3, r3, #32
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d071      	beq.n	80131b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130d0:	4b14      	ldr	r3, [pc, #80]	; (8013124 <tcp_process+0x590>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	f003 0310 	and.w	r3, r3, #16
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d060      	beq.n	801319e <tcp_process+0x60a>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130e0:	4b11      	ldr	r3, [pc, #68]	; (8013128 <tcp_process+0x594>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d15a      	bne.n	801319e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d156      	bne.n	801319e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	8b5b      	ldrh	r3, [r3, #26]
 80130f4:	f043 0302 	orr.w	r3, r3, #2
 80130f8:	b29a      	uxth	r2, r3
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7fe fdbc 	bl	8011c7c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013104:	4b13      	ldr	r3, [pc, #76]	; (8013154 <tcp_process+0x5c0>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	429a      	cmp	r2, r3
 801310c:	d105      	bne.n	801311a <tcp_process+0x586>
 801310e:	4b11      	ldr	r3, [pc, #68]	; (8013154 <tcp_process+0x5c0>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	4a0f      	ldr	r2, [pc, #60]	; (8013154 <tcp_process+0x5c0>)
 8013116:	6013      	str	r3, [r2, #0]
 8013118:	e02e      	b.n	8013178 <tcp_process+0x5e4>
 801311a:	4b0e      	ldr	r3, [pc, #56]	; (8013154 <tcp_process+0x5c0>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	617b      	str	r3, [r7, #20]
 8013120:	e027      	b.n	8013172 <tcp_process+0x5de>
 8013122:	bf00      	nop
 8013124:	2000d9cc 	.word	0x2000d9cc
 8013128:	2000d9c4 	.word	0x2000d9c4
 801312c:	2000d9ca 	.word	0x2000d9ca
 8013130:	2000d9c0 	.word	0x2000d9c0
 8013134:	2000d9b0 	.word	0x2000d9b0
 8013138:	2000a244 	.word	0x2000a244
 801313c:	2000a248 	.word	0x2000a248
 8013140:	0801b5e4 	.word	0x0801b5e4
 8013144:	0801b884 	.word	0x0801b884
 8013148:	0801b630 	.word	0x0801b630
 801314c:	2000d9c8 	.word	0x2000d9c8
 8013150:	2000d9cd 	.word	0x2000d9cd
 8013154:	2000d994 	.word	0x2000d994
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	68db      	ldr	r3, [r3, #12]
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	429a      	cmp	r2, r3
 8013160:	d104      	bne.n	801316c <tcp_process+0x5d8>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	68da      	ldr	r2, [r3, #12]
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	60da      	str	r2, [r3, #12]
 801316a:	e005      	b.n	8013178 <tcp_process+0x5e4>
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	617b      	str	r3, [r7, #20]
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1ef      	bne.n	8013158 <tcp_process+0x5c4>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2200      	movs	r2, #0
 801317c:	60da      	str	r2, [r3, #12]
 801317e:	4b77      	ldr	r3, [pc, #476]	; (801335c <tcp_process+0x7c8>)
 8013180:	2201      	movs	r2, #1
 8013182:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	220a      	movs	r2, #10
 8013188:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801318a:	4b75      	ldr	r3, [pc, #468]	; (8013360 <tcp_process+0x7cc>)
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	60da      	str	r2, [r3, #12]
 8013192:	4a73      	ldr	r2, [pc, #460]	; (8013360 <tcp_process+0x7cc>)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6013      	str	r3, [r2, #0]
 8013198:	f002 fcfa 	bl	8015b90 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801319c:	e0d2      	b.n	8013344 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	8b5b      	ldrh	r3, [r3, #26]
 80131a2:	f043 0302 	orr.w	r3, r3, #2
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2208      	movs	r2, #8
 80131b0:	751a      	strb	r2, [r3, #20]
      break;
 80131b2:	e0c7      	b.n	8013344 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131b4:	4b6b      	ldr	r3, [pc, #428]	; (8013364 <tcp_process+0x7d0>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	f003 0310 	and.w	r3, r3, #16
 80131bc:	2b00      	cmp	r3, #0
 80131be:	f000 80c1 	beq.w	8013344 <tcp_process+0x7b0>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131c6:	4b68      	ldr	r3, [pc, #416]	; (8013368 <tcp_process+0x7d4>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	f040 80ba 	bne.w	8013344 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	f040 80b5 	bne.w	8013344 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2206      	movs	r2, #6
 80131de:	751a      	strb	r2, [r3, #20]
      break;
 80131e0:	e0b0      	b.n	8013344 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 f9ca 	bl	801357c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80131e8:	4b60      	ldr	r3, [pc, #384]	; (801336c <tcp_process+0x7d8>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 0320 	and.w	r3, r3, #32
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	f000 80a9 	beq.w	8013348 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	8b5b      	ldrh	r3, [r3, #26]
 80131fa:	f043 0302 	orr.w	r3, r3, #2
 80131fe:	b29a      	uxth	r2, r3
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f7fe fd39 	bl	8011c7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801320a:	4b59      	ldr	r3, [pc, #356]	; (8013370 <tcp_process+0x7dc>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	429a      	cmp	r2, r3
 8013212:	d105      	bne.n	8013220 <tcp_process+0x68c>
 8013214:	4b56      	ldr	r3, [pc, #344]	; (8013370 <tcp_process+0x7dc>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	4a55      	ldr	r2, [pc, #340]	; (8013370 <tcp_process+0x7dc>)
 801321c:	6013      	str	r3, [r2, #0]
 801321e:	e013      	b.n	8013248 <tcp_process+0x6b4>
 8013220:	4b53      	ldr	r3, [pc, #332]	; (8013370 <tcp_process+0x7dc>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	613b      	str	r3, [r7, #16]
 8013226:	e00c      	b.n	8013242 <tcp_process+0x6ae>
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	429a      	cmp	r2, r3
 8013230:	d104      	bne.n	801323c <tcp_process+0x6a8>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	68da      	ldr	r2, [r3, #12]
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	60da      	str	r2, [r3, #12]
 801323a:	e005      	b.n	8013248 <tcp_process+0x6b4>
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	613b      	str	r3, [r7, #16]
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d1ef      	bne.n	8013228 <tcp_process+0x694>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	60da      	str	r2, [r3, #12]
 801324e:	4b43      	ldr	r3, [pc, #268]	; (801335c <tcp_process+0x7c8>)
 8013250:	2201      	movs	r2, #1
 8013252:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	220a      	movs	r2, #10
 8013258:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801325a:	4b41      	ldr	r3, [pc, #260]	; (8013360 <tcp_process+0x7cc>)
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	60da      	str	r2, [r3, #12]
 8013262:	4a3f      	ldr	r2, [pc, #252]	; (8013360 <tcp_process+0x7cc>)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6013      	str	r3, [r2, #0]
 8013268:	f002 fc92 	bl	8015b90 <tcp_timer_needed>
      }
      break;
 801326c:	e06c      	b.n	8013348 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f000 f984 	bl	801357c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013274:	4b3b      	ldr	r3, [pc, #236]	; (8013364 <tcp_process+0x7d0>)
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	f003 0310 	and.w	r3, r3, #16
 801327c:	2b00      	cmp	r3, #0
 801327e:	d065      	beq.n	801334c <tcp_process+0x7b8>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013284:	4b38      	ldr	r3, [pc, #224]	; (8013368 <tcp_process+0x7d4>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	429a      	cmp	r2, r3
 801328a:	d15f      	bne.n	801334c <tcp_process+0x7b8>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013290:	2b00      	cmp	r3, #0
 8013292:	d15b      	bne.n	801334c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7fe fcf1 	bl	8011c7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801329a:	4b35      	ldr	r3, [pc, #212]	; (8013370 <tcp_process+0x7dc>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	687a      	ldr	r2, [r7, #4]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d105      	bne.n	80132b0 <tcp_process+0x71c>
 80132a4:	4b32      	ldr	r3, [pc, #200]	; (8013370 <tcp_process+0x7dc>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	68db      	ldr	r3, [r3, #12]
 80132aa:	4a31      	ldr	r2, [pc, #196]	; (8013370 <tcp_process+0x7dc>)
 80132ac:	6013      	str	r3, [r2, #0]
 80132ae:	e013      	b.n	80132d8 <tcp_process+0x744>
 80132b0:	4b2f      	ldr	r3, [pc, #188]	; (8013370 <tcp_process+0x7dc>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	60fb      	str	r3, [r7, #12]
 80132b6:	e00c      	b.n	80132d2 <tcp_process+0x73e>
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d104      	bne.n	80132cc <tcp_process+0x738>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	68da      	ldr	r2, [r3, #12]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	60da      	str	r2, [r3, #12]
 80132ca:	e005      	b.n	80132d8 <tcp_process+0x744>
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	68db      	ldr	r3, [r3, #12]
 80132d0:	60fb      	str	r3, [r7, #12]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d1ef      	bne.n	80132b8 <tcp_process+0x724>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	60da      	str	r2, [r3, #12]
 80132de:	4b1f      	ldr	r3, [pc, #124]	; (801335c <tcp_process+0x7c8>)
 80132e0:	2201      	movs	r2, #1
 80132e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	220a      	movs	r2, #10
 80132e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80132ea:	4b1d      	ldr	r3, [pc, #116]	; (8013360 <tcp_process+0x7cc>)
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	60da      	str	r2, [r3, #12]
 80132f2:	4a1b      	ldr	r2, [pc, #108]	; (8013360 <tcp_process+0x7cc>)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6013      	str	r3, [r2, #0]
 80132f8:	f002 fc4a 	bl	8015b90 <tcp_timer_needed>
      }
      break;
 80132fc:	e026      	b.n	801334c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 f93c 	bl	801357c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013304:	4b17      	ldr	r3, [pc, #92]	; (8013364 <tcp_process+0x7d0>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f003 0310 	and.w	r3, r3, #16
 801330c:	2b00      	cmp	r3, #0
 801330e:	d01f      	beq.n	8013350 <tcp_process+0x7bc>
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013314:	4b14      	ldr	r3, [pc, #80]	; (8013368 <tcp_process+0x7d4>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	429a      	cmp	r2, r3
 801331a:	d119      	bne.n	8013350 <tcp_process+0x7bc>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013320:	2b00      	cmp	r3, #0
 8013322:	d115      	bne.n	8013350 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013324:	4b11      	ldr	r3, [pc, #68]	; (801336c <tcp_process+0x7d8>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	f043 0310 	orr.w	r3, r3, #16
 801332c:	b2da      	uxtb	r2, r3
 801332e:	4b0f      	ldr	r3, [pc, #60]	; (801336c <tcp_process+0x7d8>)
 8013330:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013332:	e00d      	b.n	8013350 <tcp_process+0x7bc>
    default:
      break;
 8013334:	bf00      	nop
 8013336:	e00c      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013338:	bf00      	nop
 801333a:	e00a      	b.n	8013352 <tcp_process+0x7be>
      break;
 801333c:	bf00      	nop
 801333e:	e008      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013340:	bf00      	nop
 8013342:	e006      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013344:	bf00      	nop
 8013346:	e004      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013348:	bf00      	nop
 801334a:	e002      	b.n	8013352 <tcp_process+0x7be>
      break;
 801334c:	bf00      	nop
 801334e:	e000      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013350:	bf00      	nop
  }
  return ERR_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3724      	adds	r7, #36	; 0x24
 8013358:	46bd      	mov	sp, r7
 801335a:	bd90      	pop	{r4, r7, pc}
 801335c:	2000d99c 	.word	0x2000d99c
 8013360:	2000d998 	.word	0x2000d998
 8013364:	2000d9cc 	.word	0x2000d9cc
 8013368:	2000d9c4 	.word	0x2000d9c4
 801336c:	2000d9cd 	.word	0x2000d9cd
 8013370:	2000d994 	.word	0x2000d994

08013374 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013374:	b590      	push	{r4, r7, lr}
 8013376:	b085      	sub	sp, #20
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d106      	bne.n	8013392 <tcp_oos_insert_segment+0x1e>
 8013384:	4b3b      	ldr	r3, [pc, #236]	; (8013474 <tcp_oos_insert_segment+0x100>)
 8013386:	f240 421f 	movw	r2, #1055	; 0x41f
 801338a:	493b      	ldr	r1, [pc, #236]	; (8013478 <tcp_oos_insert_segment+0x104>)
 801338c:	483b      	ldr	r0, [pc, #236]	; (801347c <tcp_oos_insert_segment+0x108>)
 801338e:	f005 fce1 	bl	8018d54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	899b      	ldrh	r3, [r3, #12]
 8013398:	b29b      	uxth	r3, r3
 801339a:	4618      	mov	r0, r3
 801339c:	f7fb fc10 	bl	800ebc0 <lwip_htons>
 80133a0:	4603      	mov	r3, r0
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	f003 0301 	and.w	r3, r3, #1
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d028      	beq.n	80133fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80133ac:	6838      	ldr	r0, [r7, #0]
 80133ae:	f7fe fa63 	bl	8011878 <tcp_segs_free>
    next = NULL;
 80133b2:	2300      	movs	r3, #0
 80133b4:	603b      	str	r3, [r7, #0]
 80133b6:	e056      	b.n	8013466 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	899b      	ldrh	r3, [r3, #12]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fb fbfd 	bl	800ebc0 <lwip_htons>
 80133c6:	4603      	mov	r3, r0
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	f003 0301 	and.w	r3, r3, #1
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d00d      	beq.n	80133ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	68db      	ldr	r3, [r3, #12]
 80133d6:	899b      	ldrh	r3, [r3, #12]
 80133d8:	b29c      	uxth	r4, r3
 80133da:	2001      	movs	r0, #1
 80133dc:	f7fb fbf0 	bl	800ebc0 <lwip_htons>
 80133e0:	4603      	mov	r3, r0
 80133e2:	461a      	mov	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	4322      	orrs	r2, r4
 80133ea:	b292      	uxth	r2, r2
 80133ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f7fe fa52 	bl	80118a2 <tcp_seg_free>
    while (next &&
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d00e      	beq.n	8013422 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	891b      	ldrh	r3, [r3, #8]
 8013408:	461a      	mov	r2, r3
 801340a:	4b1d      	ldr	r3, [pc, #116]	; (8013480 <tcp_oos_insert_segment+0x10c>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	441a      	add	r2, r3
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	6839      	ldr	r1, [r7, #0]
 8013418:	8909      	ldrh	r1, [r1, #8]
 801341a:	440b      	add	r3, r1
 801341c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801341e:	2b00      	cmp	r3, #0
 8013420:	daca      	bge.n	80133b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d01e      	beq.n	8013466 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	891b      	ldrh	r3, [r3, #8]
 801342c:	461a      	mov	r2, r3
 801342e:	4b14      	ldr	r3, [pc, #80]	; (8013480 <tcp_oos_insert_segment+0x10c>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	441a      	add	r2, r3
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801343c:	2b00      	cmp	r3, #0
 801343e:	dd12      	ble.n	8013466 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	68db      	ldr	r3, [r3, #12]
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	b29a      	uxth	r2, r3
 8013448:	4b0d      	ldr	r3, [pc, #52]	; (8013480 <tcp_oos_insert_segment+0x10c>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	b29b      	uxth	r3, r3
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	b29a      	uxth	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	891b      	ldrh	r3, [r3, #8]
 801345e:	4619      	mov	r1, r3
 8013460:	4610      	mov	r0, r2
 8013462:	f7fc fe19 	bl	8010098 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	683a      	ldr	r2, [r7, #0]
 801346a:	601a      	str	r2, [r3, #0]
}
 801346c:	bf00      	nop
 801346e:	3714      	adds	r7, #20
 8013470:	46bd      	mov	sp, r7
 8013472:	bd90      	pop	{r4, r7, pc}
 8013474:	0801b5e4 	.word	0x0801b5e4
 8013478:	0801b8a4 	.word	0x0801b8a4
 801347c:	0801b630 	.word	0x0801b630
 8013480:	2000d9c0 	.word	0x2000d9c0

08013484 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013484:	b5b0      	push	{r4, r5, r7, lr}
 8013486:	b086      	sub	sp, #24
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013492:	e03e      	b.n	8013512 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7fd f80c 	bl	80104c0 <pbuf_clen>
 80134a8:	4603      	mov	r3, r0
 80134aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134b2:	8a7a      	ldrh	r2, [r7, #18]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d906      	bls.n	80134c6 <tcp_free_acked_segments+0x42>
 80134b8:	4b2a      	ldr	r3, [pc, #168]	; (8013564 <tcp_free_acked_segments+0xe0>)
 80134ba:	f240 4257 	movw	r2, #1111	; 0x457
 80134be:	492a      	ldr	r1, [pc, #168]	; (8013568 <tcp_free_acked_segments+0xe4>)
 80134c0:	482a      	ldr	r0, [pc, #168]	; (801356c <tcp_free_acked_segments+0xe8>)
 80134c2:	f005 fc47 	bl	8018d54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80134cc:	8a7b      	ldrh	r3, [r7, #18]
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	891a      	ldrh	r2, [r3, #8]
 80134dc:	4b24      	ldr	r3, [pc, #144]	; (8013570 <tcp_free_acked_segments+0xec>)
 80134de:	881b      	ldrh	r3, [r3, #0]
 80134e0:	4413      	add	r3, r2
 80134e2:	b29a      	uxth	r2, r3
 80134e4:	4b22      	ldr	r3, [pc, #136]	; (8013570 <tcp_free_acked_segments+0xec>)
 80134e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80134e8:	6978      	ldr	r0, [r7, #20]
 80134ea:	f7fe f9da 	bl	80118a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d00c      	beq.n	8013512 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d109      	bne.n	8013512 <tcp_free_acked_segments+0x8e>
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d106      	bne.n	8013512 <tcp_free_acked_segments+0x8e>
 8013504:	4b17      	ldr	r3, [pc, #92]	; (8013564 <tcp_free_acked_segments+0xe0>)
 8013506:	f240 4261 	movw	r2, #1121	; 0x461
 801350a:	491a      	ldr	r1, [pc, #104]	; (8013574 <tcp_free_acked_segments+0xf0>)
 801350c:	4817      	ldr	r0, [pc, #92]	; (801356c <tcp_free_acked_segments+0xe8>)
 801350e:	f005 fc21 	bl	8018d54 <iprintf>
  while (seg_list != NULL &&
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d020      	beq.n	801355a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	4618      	mov	r0, r3
 8013520:	f7fb fb63 	bl	800ebea <lwip_htonl>
 8013524:	4604      	mov	r4, r0
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	891b      	ldrh	r3, [r3, #8]
 801352a:	461d      	mov	r5, r3
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	899b      	ldrh	r3, [r3, #12]
 8013532:	b29b      	uxth	r3, r3
 8013534:	4618      	mov	r0, r3
 8013536:	f7fb fb43 	bl	800ebc0 <lwip_htons>
 801353a:	4603      	mov	r3, r0
 801353c:	b2db      	uxtb	r3, r3
 801353e:	f003 0303 	and.w	r3, r3, #3
 8013542:	2b00      	cmp	r3, #0
 8013544:	d001      	beq.n	801354a <tcp_free_acked_segments+0xc6>
 8013546:	2301      	movs	r3, #1
 8013548:	e000      	b.n	801354c <tcp_free_acked_segments+0xc8>
 801354a:	2300      	movs	r3, #0
 801354c:	442b      	add	r3, r5
 801354e:	18e2      	adds	r2, r4, r3
 8013550:	4b09      	ldr	r3, [pc, #36]	; (8013578 <tcp_free_acked_segments+0xf4>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013556:	2b00      	cmp	r3, #0
 8013558:	dd9c      	ble.n	8013494 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801355a:	68bb      	ldr	r3, [r7, #8]
}
 801355c:	4618      	mov	r0, r3
 801355e:	3718      	adds	r7, #24
 8013560:	46bd      	mov	sp, r7
 8013562:	bdb0      	pop	{r4, r5, r7, pc}
 8013564:	0801b5e4 	.word	0x0801b5e4
 8013568:	0801b8cc 	.word	0x0801b8cc
 801356c:	0801b630 	.word	0x0801b630
 8013570:	2000d9c8 	.word	0x2000d9c8
 8013574:	0801b8f4 	.word	0x0801b8f4
 8013578:	2000d9c4 	.word	0x2000d9c4

0801357c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801357c:	b5b0      	push	{r4, r5, r7, lr}
 801357e:	b094      	sub	sp, #80	; 0x50
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013584:	2300      	movs	r3, #0
 8013586:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d106      	bne.n	801359c <tcp_receive+0x20>
 801358e:	4b91      	ldr	r3, [pc, #580]	; (80137d4 <tcp_receive+0x258>)
 8013590:	f240 427b 	movw	r2, #1147	; 0x47b
 8013594:	4990      	ldr	r1, [pc, #576]	; (80137d8 <tcp_receive+0x25c>)
 8013596:	4891      	ldr	r0, [pc, #580]	; (80137dc <tcp_receive+0x260>)
 8013598:	f005 fbdc 	bl	8018d54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	7d1b      	ldrb	r3, [r3, #20]
 80135a0:	2b03      	cmp	r3, #3
 80135a2:	d806      	bhi.n	80135b2 <tcp_receive+0x36>
 80135a4:	4b8b      	ldr	r3, [pc, #556]	; (80137d4 <tcp_receive+0x258>)
 80135a6:	f240 427c 	movw	r2, #1148	; 0x47c
 80135aa:	498d      	ldr	r1, [pc, #564]	; (80137e0 <tcp_receive+0x264>)
 80135ac:	488b      	ldr	r0, [pc, #556]	; (80137dc <tcp_receive+0x260>)
 80135ae:	f005 fbd1 	bl	8018d54 <iprintf>

  if (flags & TCP_ACK) {
 80135b2:	4b8c      	ldr	r3, [pc, #560]	; (80137e4 <tcp_receive+0x268>)
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	f003 0310 	and.w	r3, r3, #16
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	f000 8264 	beq.w	8013a88 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135c6:	461a      	mov	r2, r3
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135cc:	4413      	add	r3, r2
 80135ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135d4:	4b84      	ldr	r3, [pc, #528]	; (80137e8 <tcp_receive+0x26c>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	2b00      	cmp	r3, #0
 80135dc:	db1b      	blt.n	8013616 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135e2:	4b81      	ldr	r3, [pc, #516]	; (80137e8 <tcp_receive+0x26c>)
 80135e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d106      	bne.n	80135f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80135ee:	4b7f      	ldr	r3, [pc, #508]	; (80137ec <tcp_receive+0x270>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	db0e      	blt.n	8013616 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80135fc:	4b7b      	ldr	r3, [pc, #492]	; (80137ec <tcp_receive+0x270>)
 80135fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013600:	429a      	cmp	r2, r3
 8013602:	d125      	bne.n	8013650 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013604:	4b7a      	ldr	r3, [pc, #488]	; (80137f0 <tcp_receive+0x274>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	89db      	ldrh	r3, [r3, #14]
 801360a:	b29a      	uxth	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013612:	429a      	cmp	r2, r3
 8013614:	d91c      	bls.n	8013650 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013616:	4b76      	ldr	r3, [pc, #472]	; (80137f0 <tcp_receive+0x274>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	89db      	ldrh	r3, [r3, #14]
 801361c:	b29a      	uxth	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013630:	429a      	cmp	r2, r3
 8013632:	d205      	bcs.n	8013640 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013640:	4b69      	ldr	r3, [pc, #420]	; (80137e8 <tcp_receive+0x26c>)
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013648:	4b68      	ldr	r3, [pc, #416]	; (80137ec <tcp_receive+0x270>)
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013650:	4b66      	ldr	r3, [pc, #408]	; (80137ec <tcp_receive+0x270>)
 8013652:	681a      	ldr	r2, [r3, #0]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013658:	1ad3      	subs	r3, r2, r3
 801365a:	2b00      	cmp	r3, #0
 801365c:	dc58      	bgt.n	8013710 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801365e:	4b65      	ldr	r3, [pc, #404]	; (80137f4 <tcp_receive+0x278>)
 8013660:	881b      	ldrh	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d14b      	bne.n	80136fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013670:	4413      	add	r3, r2
 8013672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013674:	429a      	cmp	r2, r3
 8013676:	d142      	bne.n	80136fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801367e:	2b00      	cmp	r3, #0
 8013680:	db3d      	blt.n	80136fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013686:	4b59      	ldr	r3, [pc, #356]	; (80137ec <tcp_receive+0x270>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	429a      	cmp	r2, r3
 801368c:	d137      	bne.n	80136fe <tcp_receive+0x182>
              found_dupack = 1;
 801368e:	2301      	movs	r3, #1
 8013690:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013698:	2bff      	cmp	r3, #255	; 0xff
 801369a:	d007      	beq.n	80136ac <tcp_receive+0x130>
                ++pcb->dupacks;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136a2:	3301      	adds	r3, #1
 80136a4:	b2da      	uxtb	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136b2:	2b03      	cmp	r3, #3
 80136b4:	d91b      	bls.n	80136ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136c0:	4413      	add	r3, r2
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d30a      	bcc.n	80136e4 <tcp_receive+0x168>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136d8:	4413      	add	r3, r2
 80136da:	b29a      	uxth	r2, r3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80136e2:	e004      	b.n	80136ee <tcp_receive+0x172>
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136f4:	2b02      	cmp	r3, #2
 80136f6:	d902      	bls.n	80136fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f001 feeb 	bl	80154d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80136fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013700:	2b00      	cmp	r3, #0
 8013702:	f040 8161 	bne.w	80139c8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2200      	movs	r2, #0
 801370a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801370e:	e15b      	b.n	80139c8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013710:	4b36      	ldr	r3, [pc, #216]	; (80137ec <tcp_receive+0x270>)
 8013712:	681a      	ldr	r2, [r3, #0]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013718:	1ad3      	subs	r3, r2, r3
 801371a:	3b01      	subs	r3, #1
 801371c:	2b00      	cmp	r3, #0
 801371e:	f2c0 814e 	blt.w	80139be <tcp_receive+0x442>
 8013722:	4b32      	ldr	r3, [pc, #200]	; (80137ec <tcp_receive+0x270>)
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	2b00      	cmp	r3, #0
 801372e:	f300 8146 	bgt.w	80139be <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	8b5b      	ldrh	r3, [r3, #26]
 8013736:	f003 0304 	and.w	r3, r3, #4
 801373a:	2b00      	cmp	r3, #0
 801373c:	d010      	beq.n	8013760 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8b5b      	ldrh	r3, [r3, #26]
 8013742:	f023 0304 	bic.w	r3, r3, #4
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801376e:	10db      	asrs	r3, r3, #3
 8013770:	b21b      	sxth	r3, r3
 8013772:	b29a      	uxth	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801377a:	b29b      	uxth	r3, r3
 801377c:	4413      	add	r3, r2
 801377e:	b29b      	uxth	r3, r3
 8013780:	b21a      	sxth	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013788:	4b18      	ldr	r3, [pc, #96]	; (80137ec <tcp_receive+0x270>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	b29a      	uxth	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013792:	b29b      	uxth	r3, r3
 8013794:	1ad3      	subs	r3, r2, r3
 8013796:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2200      	movs	r2, #0
 801379c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80137a0:	4b12      	ldr	r3, [pc, #72]	; (80137ec <tcp_receive+0x270>)
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	7d1b      	ldrb	r3, [r3, #20]
 80137ac:	2b03      	cmp	r3, #3
 80137ae:	f240 8097 	bls.w	80138e0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80137be:	429a      	cmp	r2, r3
 80137c0:	d245      	bcs.n	801384e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	8b5b      	ldrh	r3, [r3, #26]
 80137c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d014      	beq.n	80137f8 <tcp_receive+0x27c>
 80137ce:	2301      	movs	r3, #1
 80137d0:	e013      	b.n	80137fa <tcp_receive+0x27e>
 80137d2:	bf00      	nop
 80137d4:	0801b5e4 	.word	0x0801b5e4
 80137d8:	0801b914 	.word	0x0801b914
 80137dc:	0801b630 	.word	0x0801b630
 80137e0:	0801b930 	.word	0x0801b930
 80137e4:	2000d9cc 	.word	0x2000d9cc
 80137e8:	2000d9c0 	.word	0x2000d9c0
 80137ec:	2000d9c4 	.word	0x2000d9c4
 80137f0:	2000d9b0 	.word	0x2000d9b0
 80137f4:	2000d9ca 	.word	0x2000d9ca
 80137f8:	2302      	movs	r3, #2
 80137fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80137fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013802:	b29a      	uxth	r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013808:	fb12 f303 	smulbb	r3, r2, r3
 801380c:	b29b      	uxth	r3, r3
 801380e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013810:	4293      	cmp	r3, r2
 8013812:	bf28      	it	cs
 8013814:	4613      	movcs	r3, r2
 8013816:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801381e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013820:	4413      	add	r3, r2
 8013822:	b29a      	uxth	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801382a:	429a      	cmp	r2, r3
 801382c:	d309      	bcc.n	8013842 <tcp_receive+0x2c6>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013834:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013836:	4413      	add	r3, r2
 8013838:	b29a      	uxth	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013840:	e04e      	b.n	80138e0 <tcp_receive+0x364>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013848:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801384c:	e048      	b.n	80138e0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013854:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013856:	4413      	add	r3, r2
 8013858:	b29a      	uxth	r2, r3
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013860:	429a      	cmp	r2, r3
 8013862:	d309      	bcc.n	8013878 <tcp_receive+0x2fc>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801386a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801386c:	4413      	add	r3, r2
 801386e:	b29a      	uxth	r2, r3
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013876:	e004      	b.n	8013882 <tcp_receive+0x306>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801387e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801388e:	429a      	cmp	r2, r3
 8013890:	d326      	bcc.n	80138e0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138b2:	4413      	add	r3, r2
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138bc:	429a      	cmp	r2, r3
 80138be:	d30a      	bcc.n	80138d6 <tcp_receive+0x35a>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138ca:	4413      	add	r3, r2
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80138d4:	e004      	b.n	80138e0 <tcp_receive+0x364>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138e8:	4a98      	ldr	r2, [pc, #608]	; (8013b4c <tcp_receive+0x5d0>)
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff fdca 	bl	8013484 <tcp_free_acked_segments>
 80138f0:	4602      	mov	r2, r0
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138fe:	4a94      	ldr	r2, [pc, #592]	; (8013b50 <tcp_receive+0x5d4>)
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7ff fdbf 	bl	8013484 <tcp_free_acked_segments>
 8013906:	4602      	mov	r2, r0
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013910:	2b00      	cmp	r3, #0
 8013912:	d104      	bne.n	801391e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801391a:	861a      	strh	r2, [r3, #48]	; 0x30
 801391c:	e002      	b.n	8013924 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2200      	movs	r2, #0
 8013922:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2200      	movs	r2, #0
 8013928:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801392e:	2b00      	cmp	r3, #0
 8013930:	d103      	bne.n	801393a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2200      	movs	r2, #0
 8013936:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013940:	4b84      	ldr	r3, [pc, #528]	; (8013b54 <tcp_receive+0x5d8>)
 8013942:	881b      	ldrh	r3, [r3, #0]
 8013944:	4413      	add	r3, r2
 8013946:	b29a      	uxth	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	8b5b      	ldrh	r3, [r3, #26]
 8013952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013956:	2b00      	cmp	r3, #0
 8013958:	d035      	beq.n	80139c6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801395e:	2b00      	cmp	r3, #0
 8013960:	d118      	bne.n	8013994 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013966:	2b00      	cmp	r3, #0
 8013968:	d00c      	beq.n	8013984 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013972:	68db      	ldr	r3, [r3, #12]
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	4618      	mov	r0, r3
 8013978:	f7fb f937 	bl	800ebea <lwip_htonl>
 801397c:	4603      	mov	r3, r0
 801397e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013980:	2b00      	cmp	r3, #0
 8013982:	dc20      	bgt.n	80139c6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	8b5b      	ldrh	r3, [r3, #26]
 8013988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801398c:	b29a      	uxth	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013992:	e018      	b.n	80139c6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801399c:	68db      	ldr	r3, [r3, #12]
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fb f922 	bl	800ebea <lwip_htonl>
 80139a6:	4603      	mov	r3, r0
 80139a8:	1ae3      	subs	r3, r4, r3
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	dc0b      	bgt.n	80139c6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	8b5b      	ldrh	r3, [r3, #26]
 80139b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139bc:	e003      	b.n	80139c6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f001 ff76 	bl	80158b0 <tcp_send_empty_ack>
 80139c4:	e000      	b.n	80139c8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139c6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d05b      	beq.n	8013a88 <tcp_receive+0x50c>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80139d4:	4b60      	ldr	r3, [pc, #384]	; (8013b58 <tcp_receive+0x5dc>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	1ad3      	subs	r3, r2, r3
 80139da:	2b00      	cmp	r3, #0
 80139dc:	da54      	bge.n	8013a88 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80139de:	4b5f      	ldr	r3, [pc, #380]	; (8013b5c <tcp_receive+0x5e0>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	b29a      	uxth	r2, r3
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80139f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139fc:	10db      	asrs	r3, r3, #3
 80139fe:	b21b      	sxth	r3, r3
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	1ad3      	subs	r3, r2, r3
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a10:	b29a      	uxth	r2, r3
 8013a12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a16:	4413      	add	r3, r2
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	b21a      	sxth	r2, r3
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013a20:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	da05      	bge.n	8013a34 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a2c:	425b      	negs	r3, r3
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013a34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a3e:	109b      	asrs	r3, r3, #2
 8013a40:	b21b      	sxth	r3, r3
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	1ad3      	subs	r3, r2, r3
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a58:	4413      	add	r3, r2
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	b21a      	sxth	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a68:	10db      	asrs	r3, r3, #3
 8013a6a:	b21b      	sxth	r3, r3
 8013a6c:	b29a      	uxth	r2, r3
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	4413      	add	r3, r2
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	b21a      	sxth	r2, r3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2200      	movs	r2, #0
 8013a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013a88:	4b35      	ldr	r3, [pc, #212]	; (8013b60 <tcp_receive+0x5e4>)
 8013a8a:	881b      	ldrh	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	f000 84e2 	beq.w	8014456 <tcp_receive+0xeda>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	7d1b      	ldrb	r3, [r3, #20]
 8013a96:	2b06      	cmp	r3, #6
 8013a98:	f200 84dd 	bhi.w	8014456 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013aa0:	4b30      	ldr	r3, [pc, #192]	; (8013b64 <tcp_receive+0x5e8>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	1ad3      	subs	r3, r2, r3
 8013aa6:	3b01      	subs	r3, #1
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	f2c0 808f 	blt.w	8013bcc <tcp_receive+0x650>
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ab2:	4b2b      	ldr	r3, [pc, #172]	; (8013b60 <tcp_receive+0x5e4>)
 8013ab4:	881b      	ldrh	r3, [r3, #0]
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	4b2a      	ldr	r3, [pc, #168]	; (8013b64 <tcp_receive+0x5e8>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	440b      	add	r3, r1
 8013abe:	1ad3      	subs	r3, r2, r3
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f300 8082 	bgt.w	8013bcc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013ac8:	4b27      	ldr	r3, [pc, #156]	; (8013b68 <tcp_receive+0x5ec>)
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ad2:	4b24      	ldr	r3, [pc, #144]	; (8013b64 <tcp_receive+0x5e8>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013ada:	4b23      	ldr	r3, [pc, #140]	; (8013b68 <tcp_receive+0x5ec>)
 8013adc:	685b      	ldr	r3, [r3, #4]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d106      	bne.n	8013af0 <tcp_receive+0x574>
 8013ae2:	4b22      	ldr	r3, [pc, #136]	; (8013b6c <tcp_receive+0x5f0>)
 8013ae4:	f240 5294 	movw	r2, #1428	; 0x594
 8013ae8:	4921      	ldr	r1, [pc, #132]	; (8013b70 <tcp_receive+0x5f4>)
 8013aea:	4822      	ldr	r0, [pc, #136]	; (8013b74 <tcp_receive+0x5f8>)
 8013aec:	f005 f932 	bl	8018d54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d906      	bls.n	8013b08 <tcp_receive+0x58c>
 8013afa:	4b1c      	ldr	r3, [pc, #112]	; (8013b6c <tcp_receive+0x5f0>)
 8013afc:	f240 5295 	movw	r2, #1429	; 0x595
 8013b00:	491d      	ldr	r1, [pc, #116]	; (8013b78 <tcp_receive+0x5fc>)
 8013b02:	481c      	ldr	r0, [pc, #112]	; (8013b74 <tcp_receive+0x5f8>)
 8013b04:	f005 f926 	bl	8018d54 <iprintf>
      off = (u16_t)off32;
 8013b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013b0e:	4b16      	ldr	r3, [pc, #88]	; (8013b68 <tcp_receive+0x5ec>)
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	891b      	ldrh	r3, [r3, #8]
 8013b14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d906      	bls.n	8013b2a <tcp_receive+0x5ae>
 8013b1c:	4b13      	ldr	r3, [pc, #76]	; (8013b6c <tcp_receive+0x5f0>)
 8013b1e:	f240 5297 	movw	r2, #1431	; 0x597
 8013b22:	4916      	ldr	r1, [pc, #88]	; (8013b7c <tcp_receive+0x600>)
 8013b24:	4813      	ldr	r0, [pc, #76]	; (8013b74 <tcp_receive+0x5f8>)
 8013b26:	f005 f915 	bl	8018d54 <iprintf>
      inseg.len -= off;
 8013b2a:	4b0f      	ldr	r3, [pc, #60]	; (8013b68 <tcp_receive+0x5ec>)
 8013b2c:	891a      	ldrh	r2, [r3, #8]
 8013b2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b32:	1ad3      	subs	r3, r2, r3
 8013b34:	b29a      	uxth	r2, r3
 8013b36:	4b0c      	ldr	r3, [pc, #48]	; (8013b68 <tcp_receive+0x5ec>)
 8013b38:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013b3a:	4b0b      	ldr	r3, [pc, #44]	; (8013b68 <tcp_receive+0x5ec>)
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	891a      	ldrh	r2, [r3, #8]
 8013b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013b48:	e02a      	b.n	8013ba0 <tcp_receive+0x624>
 8013b4a:	bf00      	nop
 8013b4c:	0801b94c 	.word	0x0801b94c
 8013b50:	0801b954 	.word	0x0801b954
 8013b54:	2000d9c8 	.word	0x2000d9c8
 8013b58:	2000d9c4 	.word	0x2000d9c4
 8013b5c:	2000d988 	.word	0x2000d988
 8013b60:	2000d9ca 	.word	0x2000d9ca
 8013b64:	2000d9c0 	.word	0x2000d9c0
 8013b68:	2000d9a0 	.word	0x2000d9a0
 8013b6c:	0801b5e4 	.word	0x0801b5e4
 8013b70:	0801b95c 	.word	0x0801b95c
 8013b74:	0801b630 	.word	0x0801b630
 8013b78:	0801b96c 	.word	0x0801b96c
 8013b7c:	0801b97c 	.word	0x0801b97c
        off -= p->len;
 8013b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b82:	895b      	ldrh	r3, [r3, #10]
 8013b84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b88:	1ad3      	subs	r3, r2, r3
 8013b8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013b92:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b96:	2200      	movs	r2, #0
 8013b98:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ba2:	895b      	ldrh	r3, [r3, #10]
 8013ba4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d8e9      	bhi.n	8013b80 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013bac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013bb4:	f7fc fb70 	bl	8010298 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bbc:	4a91      	ldr	r2, [pc, #580]	; (8013e04 <tcp_receive+0x888>)
 8013bbe:	6013      	str	r3, [r2, #0]
 8013bc0:	4b91      	ldr	r3, [pc, #580]	; (8013e08 <tcp_receive+0x88c>)
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	4a8f      	ldr	r2, [pc, #572]	; (8013e04 <tcp_receive+0x888>)
 8013bc6:	6812      	ldr	r2, [r2, #0]
 8013bc8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013bca:	e00d      	b.n	8013be8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013bcc:	4b8d      	ldr	r3, [pc, #564]	; (8013e04 <tcp_receive+0x888>)
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd4:	1ad3      	subs	r3, r2, r3
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	da06      	bge.n	8013be8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	8b5b      	ldrh	r3, [r3, #26]
 8013bde:	f043 0302 	orr.w	r3, r3, #2
 8013be2:	b29a      	uxth	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013be8:	4b86      	ldr	r3, [pc, #536]	; (8013e04 <tcp_receive+0x888>)
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf0:	1ad3      	subs	r3, r2, r3
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	f2c0 842a 	blt.w	801444c <tcp_receive+0xed0>
 8013bf8:	4b82      	ldr	r3, [pc, #520]	; (8013e04 <tcp_receive+0x888>)
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c00:	6879      	ldr	r1, [r7, #4]
 8013c02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c04:	440b      	add	r3, r1
 8013c06:	1ad3      	subs	r3, r2, r3
 8013c08:	3301      	adds	r3, #1
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f300 841e 	bgt.w	801444c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c14:	4b7b      	ldr	r3, [pc, #492]	; (8013e04 <tcp_receive+0x888>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	f040 829a 	bne.w	8014152 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013c1e:	4b7a      	ldr	r3, [pc, #488]	; (8013e08 <tcp_receive+0x88c>)
 8013c20:	891c      	ldrh	r4, [r3, #8]
 8013c22:	4b79      	ldr	r3, [pc, #484]	; (8013e08 <tcp_receive+0x88c>)
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	899b      	ldrh	r3, [r3, #12]
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7fa ffc8 	bl	800ebc0 <lwip_htons>
 8013c30:	4603      	mov	r3, r0
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	f003 0303 	and.w	r3, r3, #3
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d001      	beq.n	8013c40 <tcp_receive+0x6c4>
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	e000      	b.n	8013c42 <tcp_receive+0x6c6>
 8013c40:	2300      	movs	r3, #0
 8013c42:	4423      	add	r3, r4
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	4b71      	ldr	r3, [pc, #452]	; (8013e0c <tcp_receive+0x890>)
 8013c48:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c4e:	4b6f      	ldr	r3, [pc, #444]	; (8013e0c <tcp_receive+0x890>)
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d275      	bcs.n	8013d42 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c56:	4b6c      	ldr	r3, [pc, #432]	; (8013e08 <tcp_receive+0x88c>)
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	899b      	ldrh	r3, [r3, #12]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7fa ffae 	bl	800ebc0 <lwip_htons>
 8013c64:	4603      	mov	r3, r0
 8013c66:	b2db      	uxtb	r3, r3
 8013c68:	f003 0301 	and.w	r3, r3, #1
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d01f      	beq.n	8013cb0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013c70:	4b65      	ldr	r3, [pc, #404]	; (8013e08 <tcp_receive+0x88c>)
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	899b      	ldrh	r3, [r3, #12]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	b21b      	sxth	r3, r3
 8013c7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c7e:	b21c      	sxth	r4, r3
 8013c80:	4b61      	ldr	r3, [pc, #388]	; (8013e08 <tcp_receive+0x88c>)
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	899b      	ldrh	r3, [r3, #12]
 8013c86:	b29b      	uxth	r3, r3
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7fa ff99 	bl	800ebc0 <lwip_htons>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	b2db      	uxtb	r3, r3
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7fa ff90 	bl	800ebc0 <lwip_htons>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	b21b      	sxth	r3, r3
 8013ca4:	4323      	orrs	r3, r4
 8013ca6:	b21a      	sxth	r2, r3
 8013ca8:	4b57      	ldr	r3, [pc, #348]	; (8013e08 <tcp_receive+0x88c>)
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	b292      	uxth	r2, r2
 8013cae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cb4:	4b54      	ldr	r3, [pc, #336]	; (8013e08 <tcp_receive+0x88c>)
 8013cb6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013cb8:	4b53      	ldr	r3, [pc, #332]	; (8013e08 <tcp_receive+0x88c>)
 8013cba:	68db      	ldr	r3, [r3, #12]
 8013cbc:	899b      	ldrh	r3, [r3, #12]
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fa ff7d 	bl	800ebc0 <lwip_htons>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	b2db      	uxtb	r3, r3
 8013cca:	f003 0302 	and.w	r3, r3, #2
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d005      	beq.n	8013cde <tcp_receive+0x762>
            inseg.len -= 1;
 8013cd2:	4b4d      	ldr	r3, [pc, #308]	; (8013e08 <tcp_receive+0x88c>)
 8013cd4:	891b      	ldrh	r3, [r3, #8]
 8013cd6:	3b01      	subs	r3, #1
 8013cd8:	b29a      	uxth	r2, r3
 8013cda:	4b4b      	ldr	r3, [pc, #300]	; (8013e08 <tcp_receive+0x88c>)
 8013cdc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013cde:	4b4a      	ldr	r3, [pc, #296]	; (8013e08 <tcp_receive+0x88c>)
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	4a49      	ldr	r2, [pc, #292]	; (8013e08 <tcp_receive+0x88c>)
 8013ce4:	8912      	ldrh	r2, [r2, #8]
 8013ce6:	4611      	mov	r1, r2
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fc f9d5 	bl	8010098 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013cee:	4b46      	ldr	r3, [pc, #280]	; (8013e08 <tcp_receive+0x88c>)
 8013cf0:	891c      	ldrh	r4, [r3, #8]
 8013cf2:	4b45      	ldr	r3, [pc, #276]	; (8013e08 <tcp_receive+0x88c>)
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	899b      	ldrh	r3, [r3, #12]
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fa ff60 	bl	800ebc0 <lwip_htons>
 8013d00:	4603      	mov	r3, r0
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	f003 0303 	and.w	r3, r3, #3
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d001      	beq.n	8013d10 <tcp_receive+0x794>
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	e000      	b.n	8013d12 <tcp_receive+0x796>
 8013d10:	2300      	movs	r3, #0
 8013d12:	4423      	add	r3, r4
 8013d14:	b29a      	uxth	r2, r3
 8013d16:	4b3d      	ldr	r3, [pc, #244]	; (8013e0c <tcp_receive+0x890>)
 8013d18:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013d1a:	4b3c      	ldr	r3, [pc, #240]	; (8013e0c <tcp_receive+0x890>)
 8013d1c:	881b      	ldrh	r3, [r3, #0]
 8013d1e:	461a      	mov	r2, r3
 8013d20:	4b38      	ldr	r3, [pc, #224]	; (8013e04 <tcp_receive+0x888>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	441a      	add	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d2a:	6879      	ldr	r1, [r7, #4]
 8013d2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d2e:	440b      	add	r3, r1
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d006      	beq.n	8013d42 <tcp_receive+0x7c6>
 8013d34:	4b36      	ldr	r3, [pc, #216]	; (8013e10 <tcp_receive+0x894>)
 8013d36:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013d3a:	4936      	ldr	r1, [pc, #216]	; (8013e14 <tcp_receive+0x898>)
 8013d3c:	4836      	ldr	r0, [pc, #216]	; (8013e18 <tcp_receive+0x89c>)
 8013d3e:	f005 f809 	bl	8018d54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f000 80e7 	beq.w	8013f1a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013d4c:	4b2e      	ldr	r3, [pc, #184]	; (8013e08 <tcp_receive+0x88c>)
 8013d4e:	68db      	ldr	r3, [r3, #12]
 8013d50:	899b      	ldrh	r3, [r3, #12]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fa ff33 	bl	800ebc0 <lwip_htons>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	f003 0301 	and.w	r3, r3, #1
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d010      	beq.n	8013d88 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013d66:	e00a      	b.n	8013d7e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d6c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013d78:	68f8      	ldr	r0, [r7, #12]
 8013d7a:	f7fd fd92 	bl	80118a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d1f0      	bne.n	8013d68 <tcp_receive+0x7ec>
 8013d86:	e0c8      	b.n	8013f1a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013d8e:	e052      	b.n	8013e36 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d92:	68db      	ldr	r3, [r3, #12]
 8013d94:	899b      	ldrh	r3, [r3, #12]
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7fa ff11 	bl	800ebc0 <lwip_htons>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	b2db      	uxtb	r3, r3
 8013da2:	f003 0301 	and.w	r3, r3, #1
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d03d      	beq.n	8013e26 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013daa:	4b17      	ldr	r3, [pc, #92]	; (8013e08 <tcp_receive+0x88c>)
 8013dac:	68db      	ldr	r3, [r3, #12]
 8013dae:	899b      	ldrh	r3, [r3, #12]
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fa ff04 	bl	800ebc0 <lwip_htons>
 8013db8:	4603      	mov	r3, r0
 8013dba:	b2db      	uxtb	r3, r3
 8013dbc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d130      	bne.n	8013e26 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013dc4:	4b10      	ldr	r3, [pc, #64]	; (8013e08 <tcp_receive+0x88c>)
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	899b      	ldrh	r3, [r3, #12]
 8013dca:	b29c      	uxth	r4, r3
 8013dcc:	2001      	movs	r0, #1
 8013dce:	f7fa fef7 	bl	800ebc0 <lwip_htons>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	4b0c      	ldr	r3, [pc, #48]	; (8013e08 <tcp_receive+0x88c>)
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	4322      	orrs	r2, r4
 8013ddc:	b292      	uxth	r2, r2
 8013dde:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013de0:	4b09      	ldr	r3, [pc, #36]	; (8013e08 <tcp_receive+0x88c>)
 8013de2:	891c      	ldrh	r4, [r3, #8]
 8013de4:	4b08      	ldr	r3, [pc, #32]	; (8013e08 <tcp_receive+0x88c>)
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	899b      	ldrh	r3, [r3, #12]
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fa fee7 	bl	800ebc0 <lwip_htons>
 8013df2:	4603      	mov	r3, r0
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	f003 0303 	and.w	r3, r3, #3
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00e      	beq.n	8013e1c <tcp_receive+0x8a0>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e00d      	b.n	8013e1e <tcp_receive+0x8a2>
 8013e02:	bf00      	nop
 8013e04:	2000d9c0 	.word	0x2000d9c0
 8013e08:	2000d9a0 	.word	0x2000d9a0
 8013e0c:	2000d9ca 	.word	0x2000d9ca
 8013e10:	0801b5e4 	.word	0x0801b5e4
 8013e14:	0801b98c 	.word	0x0801b98c
 8013e18:	0801b630 	.word	0x0801b630
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	4423      	add	r3, r4
 8013e20:	b29a      	uxth	r2, r3
 8013e22:	4b98      	ldr	r3, [pc, #608]	; (8014084 <tcp_receive+0xb08>)
 8013e24:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e28:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013e30:	6938      	ldr	r0, [r7, #16]
 8013e32:	f7fd fd36 	bl	80118a2 <tcp_seg_free>
            while (next &&
 8013e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00e      	beq.n	8013e5a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013e3c:	4b91      	ldr	r3, [pc, #580]	; (8014084 <tcp_receive+0xb08>)
 8013e3e:	881b      	ldrh	r3, [r3, #0]
 8013e40:	461a      	mov	r2, r3
 8013e42:	4b91      	ldr	r3, [pc, #580]	; (8014088 <tcp_receive+0xb0c>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	441a      	add	r2, r3
 8013e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e4a:	68db      	ldr	r3, [r3, #12]
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e50:	8909      	ldrh	r1, [r1, #8]
 8013e52:	440b      	add	r3, r1
 8013e54:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	da9a      	bge.n	8013d90 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d059      	beq.n	8013f14 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013e60:	4b88      	ldr	r3, [pc, #544]	; (8014084 <tcp_receive+0xb08>)
 8013e62:	881b      	ldrh	r3, [r3, #0]
 8013e64:	461a      	mov	r2, r3
 8013e66:	4b88      	ldr	r3, [pc, #544]	; (8014088 <tcp_receive+0xb0c>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	441a      	add	r2, r3
 8013e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	dd4d      	ble.n	8013f14 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e7a:	68db      	ldr	r3, [r3, #12]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	b29a      	uxth	r2, r3
 8013e80:	4b81      	ldr	r3, [pc, #516]	; (8014088 <tcp_receive+0xb0c>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	4b80      	ldr	r3, [pc, #512]	; (801408c <tcp_receive+0xb10>)
 8013e8c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013e8e:	4b7f      	ldr	r3, [pc, #508]	; (801408c <tcp_receive+0xb10>)
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	899b      	ldrh	r3, [r3, #12]
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7fa fe92 	bl	800ebc0 <lwip_htons>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	f003 0302 	and.w	r3, r3, #2
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d005      	beq.n	8013eb4 <tcp_receive+0x938>
                inseg.len -= 1;
 8013ea8:	4b78      	ldr	r3, [pc, #480]	; (801408c <tcp_receive+0xb10>)
 8013eaa:	891b      	ldrh	r3, [r3, #8]
 8013eac:	3b01      	subs	r3, #1
 8013eae:	b29a      	uxth	r2, r3
 8013eb0:	4b76      	ldr	r3, [pc, #472]	; (801408c <tcp_receive+0xb10>)
 8013eb2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013eb4:	4b75      	ldr	r3, [pc, #468]	; (801408c <tcp_receive+0xb10>)
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	4a74      	ldr	r2, [pc, #464]	; (801408c <tcp_receive+0xb10>)
 8013eba:	8912      	ldrh	r2, [r2, #8]
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fc f8ea 	bl	8010098 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013ec4:	4b71      	ldr	r3, [pc, #452]	; (801408c <tcp_receive+0xb10>)
 8013ec6:	891c      	ldrh	r4, [r3, #8]
 8013ec8:	4b70      	ldr	r3, [pc, #448]	; (801408c <tcp_receive+0xb10>)
 8013eca:	68db      	ldr	r3, [r3, #12]
 8013ecc:	899b      	ldrh	r3, [r3, #12]
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7fa fe75 	bl	800ebc0 <lwip_htons>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	f003 0303 	and.w	r3, r3, #3
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d001      	beq.n	8013ee6 <tcp_receive+0x96a>
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	e000      	b.n	8013ee8 <tcp_receive+0x96c>
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	4423      	add	r3, r4
 8013eea:	b29a      	uxth	r2, r3
 8013eec:	4b65      	ldr	r3, [pc, #404]	; (8014084 <tcp_receive+0xb08>)
 8013eee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013ef0:	4b64      	ldr	r3, [pc, #400]	; (8014084 <tcp_receive+0xb08>)
 8013ef2:	881b      	ldrh	r3, [r3, #0]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	4b64      	ldr	r3, [pc, #400]	; (8014088 <tcp_receive+0xb0c>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	441a      	add	r2, r3
 8013efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	685b      	ldr	r3, [r3, #4]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d006      	beq.n	8013f14 <tcp_receive+0x998>
 8013f06:	4b62      	ldr	r3, [pc, #392]	; (8014090 <tcp_receive+0xb14>)
 8013f08:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013f0c:	4961      	ldr	r1, [pc, #388]	; (8014094 <tcp_receive+0xb18>)
 8013f0e:	4862      	ldr	r0, [pc, #392]	; (8014098 <tcp_receive+0xb1c>)
 8013f10:	f004 ff20 	bl	8018d54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f18:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013f1a:	4b5a      	ldr	r3, [pc, #360]	; (8014084 <tcp_receive+0xb08>)
 8013f1c:	881b      	ldrh	r3, [r3, #0]
 8013f1e:	461a      	mov	r2, r3
 8013f20:	4b59      	ldr	r3, [pc, #356]	; (8014088 <tcp_receive+0xb0c>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	441a      	add	r2, r3
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f2e:	4b55      	ldr	r3, [pc, #340]	; (8014084 <tcp_receive+0xb08>)
 8013f30:	881b      	ldrh	r3, [r3, #0]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d206      	bcs.n	8013f44 <tcp_receive+0x9c8>
 8013f36:	4b56      	ldr	r3, [pc, #344]	; (8014090 <tcp_receive+0xb14>)
 8013f38:	f240 6207 	movw	r2, #1543	; 0x607
 8013f3c:	4957      	ldr	r1, [pc, #348]	; (801409c <tcp_receive+0xb20>)
 8013f3e:	4856      	ldr	r0, [pc, #344]	; (8014098 <tcp_receive+0xb1c>)
 8013f40:	f004 ff08 	bl	8018d54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f48:	4b4e      	ldr	r3, [pc, #312]	; (8014084 <tcp_receive+0xb08>)
 8013f4a:	881b      	ldrh	r3, [r3, #0]
 8013f4c:	1ad3      	subs	r3, r2, r3
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f7fc ffc5 	bl	8010ee4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013f5a:	4b4c      	ldr	r3, [pc, #304]	; (801408c <tcp_receive+0xb10>)
 8013f5c:	685b      	ldr	r3, [r3, #4]
 8013f5e:	891b      	ldrh	r3, [r3, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d006      	beq.n	8013f72 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013f64:	4b49      	ldr	r3, [pc, #292]	; (801408c <tcp_receive+0xb10>)
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	4a4d      	ldr	r2, [pc, #308]	; (80140a0 <tcp_receive+0xb24>)
 8013f6a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013f6c:	4b47      	ldr	r3, [pc, #284]	; (801408c <tcp_receive+0xb10>)
 8013f6e:	2200      	movs	r2, #0
 8013f70:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013f72:	4b46      	ldr	r3, [pc, #280]	; (801408c <tcp_receive+0xb10>)
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	899b      	ldrh	r3, [r3, #12]
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fa fe20 	bl	800ebc0 <lwip_htons>
 8013f80:	4603      	mov	r3, r0
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	f003 0301 	and.w	r3, r3, #1
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	f000 80b8 	beq.w	80140fe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013f8e:	4b45      	ldr	r3, [pc, #276]	; (80140a4 <tcp_receive+0xb28>)
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	f043 0320 	orr.w	r3, r3, #32
 8013f96:	b2da      	uxtb	r2, r3
 8013f98:	4b42      	ldr	r3, [pc, #264]	; (80140a4 <tcp_receive+0xb28>)
 8013f9a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013f9c:	e0af      	b.n	80140fe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	4a36      	ldr	r2, [pc, #216]	; (8014088 <tcp_receive+0xb0c>)
 8013fae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	891b      	ldrh	r3, [r3, #8]
 8013fb4:	461c      	mov	r4, r3
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	899b      	ldrh	r3, [r3, #12]
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fa fdfe 	bl	800ebc0 <lwip_htons>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	f003 0303 	and.w	r3, r3, #3
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d001      	beq.n	8013fd4 <tcp_receive+0xa58>
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	e000      	b.n	8013fd6 <tcp_receive+0xa5a>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	191a      	adds	r2, r3, r4
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fdc:	441a      	add	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fe6:	461c      	mov	r4, r3
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	891b      	ldrh	r3, [r3, #8]
 8013fec:	461d      	mov	r5, r3
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	68db      	ldr	r3, [r3, #12]
 8013ff2:	899b      	ldrh	r3, [r3, #12]
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7fa fde2 	bl	800ebc0 <lwip_htons>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	f003 0303 	and.w	r3, r3, #3
 8014004:	2b00      	cmp	r3, #0
 8014006:	d001      	beq.n	801400c <tcp_receive+0xa90>
 8014008:	2301      	movs	r3, #1
 801400a:	e000      	b.n	801400e <tcp_receive+0xa92>
 801400c:	2300      	movs	r3, #0
 801400e:	442b      	add	r3, r5
 8014010:	429c      	cmp	r4, r3
 8014012:	d206      	bcs.n	8014022 <tcp_receive+0xaa6>
 8014014:	4b1e      	ldr	r3, [pc, #120]	; (8014090 <tcp_receive+0xb14>)
 8014016:	f240 622b 	movw	r2, #1579	; 0x62b
 801401a:	4923      	ldr	r1, [pc, #140]	; (80140a8 <tcp_receive+0xb2c>)
 801401c:	481e      	ldr	r0, [pc, #120]	; (8014098 <tcp_receive+0xb1c>)
 801401e:	f004 fe99 	bl	8018d54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	891b      	ldrh	r3, [r3, #8]
 8014026:	461c      	mov	r4, r3
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	899b      	ldrh	r3, [r3, #12]
 801402e:	b29b      	uxth	r3, r3
 8014030:	4618      	mov	r0, r3
 8014032:	f7fa fdc5 	bl	800ebc0 <lwip_htons>
 8014036:	4603      	mov	r3, r0
 8014038:	b2db      	uxtb	r3, r3
 801403a:	f003 0303 	and.w	r3, r3, #3
 801403e:	2b00      	cmp	r3, #0
 8014040:	d001      	beq.n	8014046 <tcp_receive+0xaca>
 8014042:	2301      	movs	r3, #1
 8014044:	e000      	b.n	8014048 <tcp_receive+0xacc>
 8014046:	2300      	movs	r3, #0
 8014048:	1919      	adds	r1, r3, r4
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801404e:	b28b      	uxth	r3, r1
 8014050:	1ad3      	subs	r3, r2, r3
 8014052:	b29a      	uxth	r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7fc ff43 	bl	8010ee4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	891b      	ldrh	r3, [r3, #8]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d028      	beq.n	80140ba <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014068:	4b0d      	ldr	r3, [pc, #52]	; (80140a0 <tcp_receive+0xb24>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d01d      	beq.n	80140ac <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014070:	4b0b      	ldr	r3, [pc, #44]	; (80140a0 <tcp_receive+0xb24>)
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	685b      	ldr	r3, [r3, #4]
 8014078:	4619      	mov	r1, r3
 801407a:	4610      	mov	r0, r2
 801407c:	f7fc fa60 	bl	8010540 <pbuf_cat>
 8014080:	e018      	b.n	80140b4 <tcp_receive+0xb38>
 8014082:	bf00      	nop
 8014084:	2000d9ca 	.word	0x2000d9ca
 8014088:	2000d9c0 	.word	0x2000d9c0
 801408c:	2000d9a0 	.word	0x2000d9a0
 8014090:	0801b5e4 	.word	0x0801b5e4
 8014094:	0801b9c4 	.word	0x0801b9c4
 8014098:	0801b630 	.word	0x0801b630
 801409c:	0801ba00 	.word	0x0801ba00
 80140a0:	2000d9d0 	.word	0x2000d9d0
 80140a4:	2000d9cd 	.word	0x2000d9cd
 80140a8:	0801ba20 	.word	0x0801ba20
            } else {
              recv_data = cseg->p;
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	4a70      	ldr	r2, [pc, #448]	; (8014274 <tcp_receive+0xcf8>)
 80140b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	2200      	movs	r2, #0
 80140b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	899b      	ldrh	r3, [r3, #12]
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fa fd7c 	bl	800ebc0 <lwip_htons>
 80140c8:	4603      	mov	r3, r0
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	f003 0301 	and.w	r3, r3, #1
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d00d      	beq.n	80140f0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80140d4:	4b68      	ldr	r3, [pc, #416]	; (8014278 <tcp_receive+0xcfc>)
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	f043 0320 	orr.w	r3, r3, #32
 80140dc:	b2da      	uxtb	r2, r3
 80140de:	4b66      	ldr	r3, [pc, #408]	; (8014278 <tcp_receive+0xcfc>)
 80140e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	7d1b      	ldrb	r3, [r3, #20]
 80140e6:	2b04      	cmp	r3, #4
 80140e8:	d102      	bne.n	80140f0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2207      	movs	r2, #7
 80140ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	681a      	ldr	r2, [r3, #0]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80140f8:	68b8      	ldr	r0, [r7, #8]
 80140fa:	f7fd fbd2 	bl	80118a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014102:	2b00      	cmp	r3, #0
 8014104:	d008      	beq.n	8014118 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	685a      	ldr	r2, [r3, #4]
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014112:	429a      	cmp	r2, r3
 8014114:	f43f af43 	beq.w	8013f9e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	8b5b      	ldrh	r3, [r3, #26]
 801411c:	f003 0301 	and.w	r3, r3, #1
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00e      	beq.n	8014142 <tcp_receive+0xbc6>
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	8b5b      	ldrh	r3, [r3, #26]
 8014128:	f023 0301 	bic.w	r3, r3, #1
 801412c:	b29a      	uxth	r2, r3
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	835a      	strh	r2, [r3, #26]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	8b5b      	ldrh	r3, [r3, #26]
 8014136:	f043 0302 	orr.w	r3, r3, #2
 801413a:	b29a      	uxth	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014140:	e188      	b.n	8014454 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	8b5b      	ldrh	r3, [r3, #26]
 8014146:	f043 0301 	orr.w	r3, r3, #1
 801414a:	b29a      	uxth	r2, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014150:	e180      	b.n	8014454 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014156:	2b00      	cmp	r3, #0
 8014158:	d106      	bne.n	8014168 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801415a:	4848      	ldr	r0, [pc, #288]	; (801427c <tcp_receive+0xd00>)
 801415c:	f7fd fbba 	bl	80118d4 <tcp_seg_copy>
 8014160:	4602      	mov	r2, r0
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	675a      	str	r2, [r3, #116]	; 0x74
 8014166:	e16d      	b.n	8014444 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014168:	2300      	movs	r3, #0
 801416a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014170:	63bb      	str	r3, [r7, #56]	; 0x38
 8014172:	e157      	b.n	8014424 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	685a      	ldr	r2, [r3, #4]
 801417a:	4b41      	ldr	r3, [pc, #260]	; (8014280 <tcp_receive+0xd04>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	429a      	cmp	r2, r3
 8014180:	d11d      	bne.n	80141be <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014182:	4b3e      	ldr	r3, [pc, #248]	; (801427c <tcp_receive+0xd00>)
 8014184:	891a      	ldrh	r2, [r3, #8]
 8014186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014188:	891b      	ldrh	r3, [r3, #8]
 801418a:	429a      	cmp	r2, r3
 801418c:	f240 814f 	bls.w	801442e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014190:	483a      	ldr	r0, [pc, #232]	; (801427c <tcp_receive+0xd00>)
 8014192:	f7fd fb9f 	bl	80118d4 <tcp_seg_copy>
 8014196:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	2b00      	cmp	r3, #0
 801419c:	f000 8149 	beq.w	8014432 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80141a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d003      	beq.n	80141ae <tcp_receive+0xc32>
                    prev->next = cseg;
 80141a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141a8:	697a      	ldr	r2, [r7, #20]
 80141aa:	601a      	str	r2, [r3, #0]
 80141ac:	e002      	b.n	80141b4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	697a      	ldr	r2, [r7, #20]
 80141b2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80141b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141b6:	6978      	ldr	r0, [r7, #20]
 80141b8:	f7ff f8dc 	bl	8013374 <tcp_oos_insert_segment>
                }
                break;
 80141bc:	e139      	b.n	8014432 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80141be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d117      	bne.n	80141f4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80141c4:	4b2e      	ldr	r3, [pc, #184]	; (8014280 <tcp_receive+0xd04>)
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	1ad3      	subs	r3, r2, r3
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	da57      	bge.n	8014284 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80141d4:	4829      	ldr	r0, [pc, #164]	; (801427c <tcp_receive+0xd00>)
 80141d6:	f7fd fb7d 	bl	80118d4 <tcp_seg_copy>
 80141da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80141dc:	69bb      	ldr	r3, [r7, #24]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	f000 8129 	beq.w	8014436 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	69ba      	ldr	r2, [r7, #24]
 80141e8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80141ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141ec:	69b8      	ldr	r0, [r7, #24]
 80141ee:	f7ff f8c1 	bl	8013374 <tcp_oos_insert_segment>
                  }
                  break;
 80141f2:	e120      	b.n	8014436 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80141f4:	4b22      	ldr	r3, [pc, #136]	; (8014280 <tcp_receive+0xd04>)
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	1ad3      	subs	r3, r2, r3
 8014200:	3b01      	subs	r3, #1
 8014202:	2b00      	cmp	r3, #0
 8014204:	db3e      	blt.n	8014284 <tcp_receive+0xd08>
 8014206:	4b1e      	ldr	r3, [pc, #120]	; (8014280 <tcp_receive+0xd04>)
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420c:	68db      	ldr	r3, [r3, #12]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	1ad3      	subs	r3, r2, r3
 8014212:	3301      	adds	r3, #1
 8014214:	2b00      	cmp	r3, #0
 8014216:	dc35      	bgt.n	8014284 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014218:	4818      	ldr	r0, [pc, #96]	; (801427c <tcp_receive+0xd00>)
 801421a:	f7fd fb5b 	bl	80118d4 <tcp_seg_copy>
 801421e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014220:	69fb      	ldr	r3, [r7, #28]
 8014222:	2b00      	cmp	r3, #0
 8014224:	f000 8109 	beq.w	801443a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801422a:	68db      	ldr	r3, [r3, #12]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014230:	8912      	ldrh	r2, [r2, #8]
 8014232:	441a      	add	r2, r3
 8014234:	4b12      	ldr	r3, [pc, #72]	; (8014280 <tcp_receive+0xd04>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	2b00      	cmp	r3, #0
 801423c:	dd12      	ble.n	8014264 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801423e:	4b10      	ldr	r3, [pc, #64]	; (8014280 <tcp_receive+0xd04>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	b29a      	uxth	r2, r3
 8014244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014246:	68db      	ldr	r3, [r3, #12]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	b29b      	uxth	r3, r3
 801424c:	1ad3      	subs	r3, r2, r3
 801424e:	b29a      	uxth	r2, r3
 8014250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014252:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014256:	685a      	ldr	r2, [r3, #4]
 8014258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801425a:	891b      	ldrh	r3, [r3, #8]
 801425c:	4619      	mov	r1, r3
 801425e:	4610      	mov	r0, r2
 8014260:	f7fb ff1a 	bl	8010098 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014266:	69fa      	ldr	r2, [r7, #28]
 8014268:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801426a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801426c:	69f8      	ldr	r0, [r7, #28]
 801426e:	f7ff f881 	bl	8013374 <tcp_oos_insert_segment>
                  }
                  break;
 8014272:	e0e2      	b.n	801443a <tcp_receive+0xebe>
 8014274:	2000d9d0 	.word	0x2000d9d0
 8014278:	2000d9cd 	.word	0x2000d9cd
 801427c:	2000d9a0 	.word	0x2000d9a0
 8014280:	2000d9c0 	.word	0x2000d9c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014286:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	f040 80c6 	bne.w	801441e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014292:	4b80      	ldr	r3, [pc, #512]	; (8014494 <tcp_receive+0xf18>)
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014298:	68db      	ldr	r3, [r3, #12]
 801429a:	685b      	ldr	r3, [r3, #4]
 801429c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f340 80bd 	ble.w	801441e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80142a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142a6:	68db      	ldr	r3, [r3, #12]
 80142a8:	899b      	ldrh	r3, [r3, #12]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7fa fc87 	bl	800ebc0 <lwip_htons>
 80142b2:	4603      	mov	r3, r0
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	f003 0301 	and.w	r3, r3, #1
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f040 80bf 	bne.w	801443e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80142c0:	4875      	ldr	r0, [pc, #468]	; (8014498 <tcp_receive+0xf1c>)
 80142c2:	f7fd fb07 	bl	80118d4 <tcp_seg_copy>
 80142c6:	4602      	mov	r2, r0
 80142c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80142cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	f000 80b6 	beq.w	8014442 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80142d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d8:	68db      	ldr	r3, [r3, #12]
 80142da:	685b      	ldr	r3, [r3, #4]
 80142dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142de:	8912      	ldrh	r2, [r2, #8]
 80142e0:	441a      	add	r2, r3
 80142e2:	4b6c      	ldr	r3, [pc, #432]	; (8014494 <tcp_receive+0xf18>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	dd12      	ble.n	8014312 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80142ec:	4b69      	ldr	r3, [pc, #420]	; (8014494 <tcp_receive+0xf18>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	b29b      	uxth	r3, r3
 80142fa:	1ad3      	subs	r3, r2, r3
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014300:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014304:	685a      	ldr	r2, [r3, #4]
 8014306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014308:	891b      	ldrh	r3, [r3, #8]
 801430a:	4619      	mov	r1, r3
 801430c:	4610      	mov	r0, r2
 801430e:	f7fb fec3 	bl	8010098 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014312:	4b62      	ldr	r3, [pc, #392]	; (801449c <tcp_receive+0xf20>)
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	461a      	mov	r2, r3
 8014318:	4b5e      	ldr	r3, [pc, #376]	; (8014494 <tcp_receive+0xf18>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	441a      	add	r2, r3
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014322:	6879      	ldr	r1, [r7, #4]
 8014324:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014326:	440b      	add	r3, r1
 8014328:	1ad3      	subs	r3, r2, r3
 801432a:	2b00      	cmp	r3, #0
 801432c:	f340 8089 	ble.w	8014442 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	899b      	ldrh	r3, [r3, #12]
 8014338:	b29b      	uxth	r3, r3
 801433a:	4618      	mov	r0, r3
 801433c:	f7fa fc40 	bl	800ebc0 <lwip_htons>
 8014340:	4603      	mov	r3, r0
 8014342:	b2db      	uxtb	r3, r3
 8014344:	f003 0301 	and.w	r3, r3, #1
 8014348:	2b00      	cmp	r3, #0
 801434a:	d022      	beq.n	8014392 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	899b      	ldrh	r3, [r3, #12]
 8014354:	b29b      	uxth	r3, r3
 8014356:	b21b      	sxth	r3, r3
 8014358:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801435c:	b21c      	sxth	r4, r3
 801435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	899b      	ldrh	r3, [r3, #12]
 8014366:	b29b      	uxth	r3, r3
 8014368:	4618      	mov	r0, r3
 801436a:	f7fa fc29 	bl	800ebc0 <lwip_htons>
 801436e:	4603      	mov	r3, r0
 8014370:	b2db      	uxtb	r3, r3
 8014372:	b29b      	uxth	r3, r3
 8014374:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014378:	b29b      	uxth	r3, r3
 801437a:	4618      	mov	r0, r3
 801437c:	f7fa fc20 	bl	800ebc0 <lwip_htons>
 8014380:	4603      	mov	r3, r0
 8014382:	b21b      	sxth	r3, r3
 8014384:	4323      	orrs	r3, r4
 8014386:	b21a      	sxth	r2, r3
 8014388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	68db      	ldr	r3, [r3, #12]
 801438e:	b292      	uxth	r2, r2
 8014390:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014396:	b29a      	uxth	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801439c:	4413      	add	r3, r2
 801439e:	b299      	uxth	r1, r3
 80143a0:	4b3c      	ldr	r3, [pc, #240]	; (8014494 <tcp_receive+0xf18>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	1a8a      	subs	r2, r1, r2
 80143ac:	b292      	uxth	r2, r2
 80143ae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80143b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	685a      	ldr	r2, [r3, #4]
 80143b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	891b      	ldrh	r3, [r3, #8]
 80143bc:	4619      	mov	r1, r3
 80143be:	4610      	mov	r0, r2
 80143c0:	f7fb fe6a 	bl	8010098 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80143c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	891c      	ldrh	r4, [r3, #8]
 80143ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	899b      	ldrh	r3, [r3, #12]
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7fa fbf3 	bl	800ebc0 <lwip_htons>
 80143da:	4603      	mov	r3, r0
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	f003 0303 	and.w	r3, r3, #3
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d001      	beq.n	80143ea <tcp_receive+0xe6e>
 80143e6:	2301      	movs	r3, #1
 80143e8:	e000      	b.n	80143ec <tcp_receive+0xe70>
 80143ea:	2300      	movs	r3, #0
 80143ec:	4423      	add	r3, r4
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	4b2a      	ldr	r3, [pc, #168]	; (801449c <tcp_receive+0xf20>)
 80143f2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80143f4:	4b29      	ldr	r3, [pc, #164]	; (801449c <tcp_receive+0xf20>)
 80143f6:	881b      	ldrh	r3, [r3, #0]
 80143f8:	461a      	mov	r2, r3
 80143fa:	4b26      	ldr	r3, [pc, #152]	; (8014494 <tcp_receive+0xf18>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	441a      	add	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014404:	6879      	ldr	r1, [r7, #4]
 8014406:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014408:	440b      	add	r3, r1
 801440a:	429a      	cmp	r2, r3
 801440c:	d019      	beq.n	8014442 <tcp_receive+0xec6>
 801440e:	4b24      	ldr	r3, [pc, #144]	; (80144a0 <tcp_receive+0xf24>)
 8014410:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014414:	4923      	ldr	r1, [pc, #140]	; (80144a4 <tcp_receive+0xf28>)
 8014416:	4824      	ldr	r0, [pc, #144]	; (80144a8 <tcp_receive+0xf2c>)
 8014418:	f004 fc9c 	bl	8018d54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801441c:	e011      	b.n	8014442 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	63bb      	str	r3, [r7, #56]	; 0x38
 8014424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014426:	2b00      	cmp	r3, #0
 8014428:	f47f aea4 	bne.w	8014174 <tcp_receive+0xbf8>
 801442c:	e00a      	b.n	8014444 <tcp_receive+0xec8>
                break;
 801442e:	bf00      	nop
 8014430:	e008      	b.n	8014444 <tcp_receive+0xec8>
                break;
 8014432:	bf00      	nop
 8014434:	e006      	b.n	8014444 <tcp_receive+0xec8>
                  break;
 8014436:	bf00      	nop
 8014438:	e004      	b.n	8014444 <tcp_receive+0xec8>
                  break;
 801443a:	bf00      	nop
 801443c:	e002      	b.n	8014444 <tcp_receive+0xec8>
                  break;
 801443e:	bf00      	nop
 8014440:	e000      	b.n	8014444 <tcp_receive+0xec8>
                break;
 8014442:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f001 fa33 	bl	80158b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801444a:	e003      	b.n	8014454 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f001 fa2f 	bl	80158b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014452:	e01a      	b.n	801448a <tcp_receive+0xf0e>
 8014454:	e019      	b.n	801448a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014456:	4b0f      	ldr	r3, [pc, #60]	; (8014494 <tcp_receive+0xf18>)
 8014458:	681a      	ldr	r2, [r3, #0]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801445e:	1ad3      	subs	r3, r2, r3
 8014460:	2b00      	cmp	r3, #0
 8014462:	db0a      	blt.n	801447a <tcp_receive+0xefe>
 8014464:	4b0b      	ldr	r3, [pc, #44]	; (8014494 <tcp_receive+0xf18>)
 8014466:	681a      	ldr	r2, [r3, #0]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801446c:	6879      	ldr	r1, [r7, #4]
 801446e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014470:	440b      	add	r3, r1
 8014472:	1ad3      	subs	r3, r2, r3
 8014474:	3301      	adds	r3, #1
 8014476:	2b00      	cmp	r3, #0
 8014478:	dd07      	ble.n	801448a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	8b5b      	ldrh	r3, [r3, #26]
 801447e:	f043 0302 	orr.w	r3, r3, #2
 8014482:	b29a      	uxth	r2, r3
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014488:	e7ff      	b.n	801448a <tcp_receive+0xf0e>
 801448a:	bf00      	nop
 801448c:	3750      	adds	r7, #80	; 0x50
 801448e:	46bd      	mov	sp, r7
 8014490:	bdb0      	pop	{r4, r5, r7, pc}
 8014492:	bf00      	nop
 8014494:	2000d9c0 	.word	0x2000d9c0
 8014498:	2000d9a0 	.word	0x2000d9a0
 801449c:	2000d9ca 	.word	0x2000d9ca
 80144a0:	0801b5e4 	.word	0x0801b5e4
 80144a4:	0801b98c 	.word	0x0801b98c
 80144a8:	0801b630 	.word	0x0801b630

080144ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80144ac:	b480      	push	{r7}
 80144ae:	b083      	sub	sp, #12
 80144b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80144b2:	4b15      	ldr	r3, [pc, #84]	; (8014508 <tcp_get_next_optbyte+0x5c>)
 80144b4:	881b      	ldrh	r3, [r3, #0]
 80144b6:	1c5a      	adds	r2, r3, #1
 80144b8:	b291      	uxth	r1, r2
 80144ba:	4a13      	ldr	r2, [pc, #76]	; (8014508 <tcp_get_next_optbyte+0x5c>)
 80144bc:	8011      	strh	r1, [r2, #0]
 80144be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80144c0:	4b12      	ldr	r3, [pc, #72]	; (801450c <tcp_get_next_optbyte+0x60>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d004      	beq.n	80144d2 <tcp_get_next_optbyte+0x26>
 80144c8:	4b11      	ldr	r3, [pc, #68]	; (8014510 <tcp_get_next_optbyte+0x64>)
 80144ca:	881b      	ldrh	r3, [r3, #0]
 80144cc:	88fa      	ldrh	r2, [r7, #6]
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d208      	bcs.n	80144e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80144d2:	4b10      	ldr	r3, [pc, #64]	; (8014514 <tcp_get_next_optbyte+0x68>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	3314      	adds	r3, #20
 80144d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80144da:	88fb      	ldrh	r3, [r7, #6]
 80144dc:	683a      	ldr	r2, [r7, #0]
 80144de:	4413      	add	r3, r2
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	e00b      	b.n	80144fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80144e4:	88fb      	ldrh	r3, [r7, #6]
 80144e6:	b2da      	uxtb	r2, r3
 80144e8:	4b09      	ldr	r3, [pc, #36]	; (8014510 <tcp_get_next_optbyte+0x64>)
 80144ea:	881b      	ldrh	r3, [r3, #0]
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80144f2:	4b06      	ldr	r3, [pc, #24]	; (801450c <tcp_get_next_optbyte+0x60>)
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	797b      	ldrb	r3, [r7, #5]
 80144f8:	4413      	add	r3, r2
 80144fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	370c      	adds	r7, #12
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr
 8014508:	2000d9bc 	.word	0x2000d9bc
 801450c:	2000d9b8 	.word	0x2000d9b8
 8014510:	2000d9b6 	.word	0x2000d9b6
 8014514:	2000d9b0 	.word	0x2000d9b0

08014518 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d106      	bne.n	8014534 <tcp_parseopt+0x1c>
 8014526:	4b32      	ldr	r3, [pc, #200]	; (80145f0 <tcp_parseopt+0xd8>)
 8014528:	f240 727d 	movw	r2, #1917	; 0x77d
 801452c:	4931      	ldr	r1, [pc, #196]	; (80145f4 <tcp_parseopt+0xdc>)
 801452e:	4832      	ldr	r0, [pc, #200]	; (80145f8 <tcp_parseopt+0xe0>)
 8014530:	f004 fc10 	bl	8018d54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014534:	4b31      	ldr	r3, [pc, #196]	; (80145fc <tcp_parseopt+0xe4>)
 8014536:	881b      	ldrh	r3, [r3, #0]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d055      	beq.n	80145e8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801453c:	4b30      	ldr	r3, [pc, #192]	; (8014600 <tcp_parseopt+0xe8>)
 801453e:	2200      	movs	r2, #0
 8014540:	801a      	strh	r2, [r3, #0]
 8014542:	e045      	b.n	80145d0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014544:	f7ff ffb2 	bl	80144ac <tcp_get_next_optbyte>
 8014548:	4603      	mov	r3, r0
 801454a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801454c:	7bfb      	ldrb	r3, [r7, #15]
 801454e:	2b02      	cmp	r3, #2
 8014550:	d006      	beq.n	8014560 <tcp_parseopt+0x48>
 8014552:	2b02      	cmp	r3, #2
 8014554:	dc2b      	bgt.n	80145ae <tcp_parseopt+0x96>
 8014556:	2b00      	cmp	r3, #0
 8014558:	d041      	beq.n	80145de <tcp_parseopt+0xc6>
 801455a:	2b01      	cmp	r3, #1
 801455c:	d127      	bne.n	80145ae <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801455e:	e037      	b.n	80145d0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014560:	f7ff ffa4 	bl	80144ac <tcp_get_next_optbyte>
 8014564:	4603      	mov	r3, r0
 8014566:	2b04      	cmp	r3, #4
 8014568:	d13b      	bne.n	80145e2 <tcp_parseopt+0xca>
 801456a:	4b25      	ldr	r3, [pc, #148]	; (8014600 <tcp_parseopt+0xe8>)
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	3301      	adds	r3, #1
 8014570:	4a22      	ldr	r2, [pc, #136]	; (80145fc <tcp_parseopt+0xe4>)
 8014572:	8812      	ldrh	r2, [r2, #0]
 8014574:	4293      	cmp	r3, r2
 8014576:	da34      	bge.n	80145e2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014578:	f7ff ff98 	bl	80144ac <tcp_get_next_optbyte>
 801457c:	4603      	mov	r3, r0
 801457e:	b29b      	uxth	r3, r3
 8014580:	021b      	lsls	r3, r3, #8
 8014582:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014584:	f7ff ff92 	bl	80144ac <tcp_get_next_optbyte>
 8014588:	4603      	mov	r3, r0
 801458a:	b29a      	uxth	r2, r3
 801458c:	89bb      	ldrh	r3, [r7, #12]
 801458e:	4313      	orrs	r3, r2
 8014590:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014592:	89bb      	ldrh	r3, [r7, #12]
 8014594:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014598:	d804      	bhi.n	80145a4 <tcp_parseopt+0x8c>
 801459a:	89bb      	ldrh	r3, [r7, #12]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d001      	beq.n	80145a4 <tcp_parseopt+0x8c>
 80145a0:	89ba      	ldrh	r2, [r7, #12]
 80145a2:	e001      	b.n	80145a8 <tcp_parseopt+0x90>
 80145a4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80145ac:	e010      	b.n	80145d0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80145ae:	f7ff ff7d 	bl	80144ac <tcp_get_next_optbyte>
 80145b2:	4603      	mov	r3, r0
 80145b4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80145b6:	7afb      	ldrb	r3, [r7, #11]
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	d914      	bls.n	80145e6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80145bc:	7afb      	ldrb	r3, [r7, #11]
 80145be:	b29a      	uxth	r2, r3
 80145c0:	4b0f      	ldr	r3, [pc, #60]	; (8014600 <tcp_parseopt+0xe8>)
 80145c2:	881b      	ldrh	r3, [r3, #0]
 80145c4:	4413      	add	r3, r2
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	3b02      	subs	r3, #2
 80145ca:	b29a      	uxth	r2, r3
 80145cc:	4b0c      	ldr	r3, [pc, #48]	; (8014600 <tcp_parseopt+0xe8>)
 80145ce:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80145d0:	4b0b      	ldr	r3, [pc, #44]	; (8014600 <tcp_parseopt+0xe8>)
 80145d2:	881a      	ldrh	r2, [r3, #0]
 80145d4:	4b09      	ldr	r3, [pc, #36]	; (80145fc <tcp_parseopt+0xe4>)
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	429a      	cmp	r2, r3
 80145da:	d3b3      	bcc.n	8014544 <tcp_parseopt+0x2c>
 80145dc:	e004      	b.n	80145e8 <tcp_parseopt+0xd0>
          return;
 80145de:	bf00      	nop
 80145e0:	e002      	b.n	80145e8 <tcp_parseopt+0xd0>
            return;
 80145e2:	bf00      	nop
 80145e4:	e000      	b.n	80145e8 <tcp_parseopt+0xd0>
            return;
 80145e6:	bf00      	nop
      }
    }
  }
}
 80145e8:	3710      	adds	r7, #16
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	bf00      	nop
 80145f0:	0801b5e4 	.word	0x0801b5e4
 80145f4:	0801ba48 	.word	0x0801ba48
 80145f8:	0801b630 	.word	0x0801b630
 80145fc:	2000d9b4 	.word	0x2000d9b4
 8014600:	2000d9bc 	.word	0x2000d9bc

08014604 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014604:	b480      	push	{r7}
 8014606:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014608:	4b05      	ldr	r3, [pc, #20]	; (8014620 <tcp_trigger_input_pcb_close+0x1c>)
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	f043 0310 	orr.w	r3, r3, #16
 8014610:	b2da      	uxtb	r2, r3
 8014612:	4b03      	ldr	r3, [pc, #12]	; (8014620 <tcp_trigger_input_pcb_close+0x1c>)
 8014614:	701a      	strb	r2, [r3, #0]
}
 8014616:	bf00      	nop
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr
 8014620:	2000d9cd 	.word	0x2000d9cd

08014624 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b084      	sub	sp, #16
 8014628:	af00      	add	r7, sp, #0
 801462a:	60f8      	str	r0, [r7, #12]
 801462c:	60b9      	str	r1, [r7, #8]
 801462e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d00a      	beq.n	801464c <tcp_route+0x28>
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	7a1b      	ldrb	r3, [r3, #8]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d006      	beq.n	801464c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	7a1b      	ldrb	r3, [r3, #8]
 8014642:	4618      	mov	r0, r3
 8014644:	f7fb fb20 	bl	800fc88 <netif_get_by_index>
 8014648:	4603      	mov	r3, r0
 801464a:	e003      	b.n	8014654 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f002 fead 	bl	80173ac <ip4_route>
 8014652:	4603      	mov	r3, r0
  }
}
 8014654:	4618      	mov	r0, r3
 8014656:	3710      	adds	r7, #16
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}

0801465c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801465c:	b590      	push	{r4, r7, lr}
 801465e:	b087      	sub	sp, #28
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	603b      	str	r3, [r7, #0]
 8014668:	4613      	mov	r3, r2
 801466a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d105      	bne.n	801467e <tcp_create_segment+0x22>
 8014672:	4b44      	ldr	r3, [pc, #272]	; (8014784 <tcp_create_segment+0x128>)
 8014674:	22a3      	movs	r2, #163	; 0xa3
 8014676:	4944      	ldr	r1, [pc, #272]	; (8014788 <tcp_create_segment+0x12c>)
 8014678:	4844      	ldr	r0, [pc, #272]	; (801478c <tcp_create_segment+0x130>)
 801467a:	f004 fb6b 	bl	8018d54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d105      	bne.n	8014690 <tcp_create_segment+0x34>
 8014684:	4b3f      	ldr	r3, [pc, #252]	; (8014784 <tcp_create_segment+0x128>)
 8014686:	22a4      	movs	r2, #164	; 0xa4
 8014688:	4941      	ldr	r1, [pc, #260]	; (8014790 <tcp_create_segment+0x134>)
 801468a:	4840      	ldr	r0, [pc, #256]	; (801478c <tcp_create_segment+0x130>)
 801468c:	f004 fb62 	bl	8018d54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014690:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	b2db      	uxtb	r3, r3
 8014698:	f003 0304 	and.w	r3, r3, #4
 801469c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801469e:	2003      	movs	r0, #3
 80146a0:	f7fa ff66 	bl	800f570 <memp_malloc>
 80146a4:	6138      	str	r0, [r7, #16]
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d104      	bne.n	80146b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80146ac:	68b8      	ldr	r0, [r7, #8]
 80146ae:	f7fb fe79 	bl	80103a4 <pbuf_free>
    return NULL;
 80146b2:	2300      	movs	r3, #0
 80146b4:	e061      	b.n	801477a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80146b6:	693b      	ldr	r3, [r7, #16]
 80146b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80146bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	2200      	movs	r2, #0
 80146c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	68ba      	ldr	r2, [r7, #8]
 80146c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	891a      	ldrh	r2, [r3, #8]
 80146ce:	7dfb      	ldrb	r3, [r7, #23]
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d205      	bcs.n	80146e2 <tcp_create_segment+0x86>
 80146d6:	4b2b      	ldr	r3, [pc, #172]	; (8014784 <tcp_create_segment+0x128>)
 80146d8:	22b0      	movs	r2, #176	; 0xb0
 80146da:	492e      	ldr	r1, [pc, #184]	; (8014794 <tcp_create_segment+0x138>)
 80146dc:	482b      	ldr	r0, [pc, #172]	; (801478c <tcp_create_segment+0x130>)
 80146de:	f004 fb39 	bl	8018d54 <iprintf>
  seg->len = p->tot_len - optlen;
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	891a      	ldrh	r2, [r3, #8]
 80146e6:	7dfb      	ldrb	r3, [r7, #23]
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80146f2:	2114      	movs	r1, #20
 80146f4:	68b8      	ldr	r0, [r7, #8]
 80146f6:	f7fb fdbf 	bl	8010278 <pbuf_add_header>
 80146fa:	4603      	mov	r3, r0
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d004      	beq.n	801470a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014700:	6938      	ldr	r0, [r7, #16]
 8014702:	f7fd f8ce 	bl	80118a2 <tcp_seg_free>
    return NULL;
 8014706:	2300      	movs	r3, #0
 8014708:	e037      	b.n	801477a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	685a      	ldr	r2, [r3, #4]
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	8ada      	ldrh	r2, [r3, #22]
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	68dc      	ldr	r4, [r3, #12]
 801471c:	4610      	mov	r0, r2
 801471e:	f7fa fa4f 	bl	800ebc0 <lwip_htons>
 8014722:	4603      	mov	r3, r0
 8014724:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	8b1a      	ldrh	r2, [r3, #24]
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	68dc      	ldr	r4, [r3, #12]
 801472e:	4610      	mov	r0, r2
 8014730:	f7fa fa46 	bl	800ebc0 <lwip_htons>
 8014734:	4603      	mov	r3, r0
 8014736:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	68dc      	ldr	r4, [r3, #12]
 801473c:	6838      	ldr	r0, [r7, #0]
 801473e:	f7fa fa54 	bl	800ebea <lwip_htonl>
 8014742:	4603      	mov	r3, r0
 8014744:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014746:	7dfb      	ldrb	r3, [r7, #23]
 8014748:	089b      	lsrs	r3, r3, #2
 801474a:	b2db      	uxtb	r3, r3
 801474c:	b29b      	uxth	r3, r3
 801474e:	3305      	adds	r3, #5
 8014750:	b29b      	uxth	r3, r3
 8014752:	031b      	lsls	r3, r3, #12
 8014754:	b29a      	uxth	r2, r3
 8014756:	79fb      	ldrb	r3, [r7, #7]
 8014758:	b29b      	uxth	r3, r3
 801475a:	4313      	orrs	r3, r2
 801475c:	b29a      	uxth	r2, r3
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	68dc      	ldr	r4, [r3, #12]
 8014762:	4610      	mov	r0, r2
 8014764:	f7fa fa2c 	bl	800ebc0 <lwip_htons>
 8014768:	4603      	mov	r3, r0
 801476a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	2200      	movs	r2, #0
 8014772:	749a      	strb	r2, [r3, #18]
 8014774:	2200      	movs	r2, #0
 8014776:	74da      	strb	r2, [r3, #19]
  return seg;
 8014778:	693b      	ldr	r3, [r7, #16]
}
 801477a:	4618      	mov	r0, r3
 801477c:	371c      	adds	r7, #28
 801477e:	46bd      	mov	sp, r7
 8014780:	bd90      	pop	{r4, r7, pc}
 8014782:	bf00      	nop
 8014784:	0801ba64 	.word	0x0801ba64
 8014788:	0801ba98 	.word	0x0801ba98
 801478c:	0801bab8 	.word	0x0801bab8
 8014790:	0801bae0 	.word	0x0801bae0
 8014794:	0801bb04 	.word	0x0801bb04

08014798 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014798:	b590      	push	{r4, r7, lr}
 801479a:	b08b      	sub	sp, #44	; 0x2c
 801479c:	af02      	add	r7, sp, #8
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	460b      	mov	r3, r1
 80147a2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80147a4:	2300      	movs	r3, #0
 80147a6:	61fb      	str	r3, [r7, #28]
 80147a8:	2300      	movs	r3, #0
 80147aa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80147ac:	2300      	movs	r3, #0
 80147ae:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d106      	bne.n	80147c4 <tcp_split_unsent_seg+0x2c>
 80147b6:	4b95      	ldr	r3, [pc, #596]	; (8014a0c <tcp_split_unsent_seg+0x274>)
 80147b8:	f240 324b 	movw	r2, #843	; 0x34b
 80147bc:	4994      	ldr	r1, [pc, #592]	; (8014a10 <tcp_split_unsent_seg+0x278>)
 80147be:	4895      	ldr	r0, [pc, #596]	; (8014a14 <tcp_split_unsent_seg+0x27c>)
 80147c0:	f004 fac8 	bl	8018d54 <iprintf>

  useg = pcb->unsent;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147c8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d102      	bne.n	80147d6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80147d0:	f04f 33ff 	mov.w	r3, #4294967295
 80147d4:	e116      	b.n	8014a04 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80147d6:	887b      	ldrh	r3, [r7, #2]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d109      	bne.n	80147f0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80147dc:	4b8b      	ldr	r3, [pc, #556]	; (8014a0c <tcp_split_unsent_seg+0x274>)
 80147de:	f240 3253 	movw	r2, #851	; 0x353
 80147e2:	498d      	ldr	r1, [pc, #564]	; (8014a18 <tcp_split_unsent_seg+0x280>)
 80147e4:	488b      	ldr	r0, [pc, #556]	; (8014a14 <tcp_split_unsent_seg+0x27c>)
 80147e6:	f004 fab5 	bl	8018d54 <iprintf>
    return ERR_VAL;
 80147ea:	f06f 0305 	mvn.w	r3, #5
 80147ee:	e109      	b.n	8014a04 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	891b      	ldrh	r3, [r3, #8]
 80147f4:	887a      	ldrh	r2, [r7, #2]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d301      	bcc.n	80147fe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e102      	b.n	8014a04 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014802:	887a      	ldrh	r2, [r7, #2]
 8014804:	429a      	cmp	r2, r3
 8014806:	d906      	bls.n	8014816 <tcp_split_unsent_seg+0x7e>
 8014808:	4b80      	ldr	r3, [pc, #512]	; (8014a0c <tcp_split_unsent_seg+0x274>)
 801480a:	f240 325b 	movw	r2, #859	; 0x35b
 801480e:	4983      	ldr	r1, [pc, #524]	; (8014a1c <tcp_split_unsent_seg+0x284>)
 8014810:	4880      	ldr	r0, [pc, #512]	; (8014a14 <tcp_split_unsent_seg+0x27c>)
 8014812:	f004 fa9f 	bl	8018d54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	891b      	ldrh	r3, [r3, #8]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d106      	bne.n	801482c <tcp_split_unsent_seg+0x94>
 801481e:	4b7b      	ldr	r3, [pc, #492]	; (8014a0c <tcp_split_unsent_seg+0x274>)
 8014820:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014824:	497e      	ldr	r1, [pc, #504]	; (8014a20 <tcp_split_unsent_seg+0x288>)
 8014826:	487b      	ldr	r0, [pc, #492]	; (8014a14 <tcp_split_unsent_seg+0x27c>)
 8014828:	f004 fa94 	bl	8018d54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	7a9b      	ldrb	r3, [r3, #10]
 8014830:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014832:	7bfb      	ldrb	r3, [r7, #15]
 8014834:	009b      	lsls	r3, r3, #2
 8014836:	b2db      	uxtb	r3, r3
 8014838:	f003 0304 	and.w	r3, r3, #4
 801483c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	891a      	ldrh	r2, [r3, #8]
 8014842:	887b      	ldrh	r3, [r7, #2]
 8014844:	1ad3      	subs	r3, r2, r3
 8014846:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014848:	7bbb      	ldrb	r3, [r7, #14]
 801484a:	b29a      	uxth	r2, r3
 801484c:	89bb      	ldrh	r3, [r7, #12]
 801484e:	4413      	add	r3, r2
 8014850:	b29b      	uxth	r3, r3
 8014852:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014856:	4619      	mov	r1, r3
 8014858:	2036      	movs	r0, #54	; 0x36
 801485a:	f7fb fabf 	bl	800fddc <pbuf_alloc>
 801485e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	2b00      	cmp	r3, #0
 8014864:	f000 80b7 	beq.w	80149d6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	891a      	ldrh	r2, [r3, #8]
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	891b      	ldrh	r3, [r3, #8]
 8014872:	1ad3      	subs	r3, r2, r3
 8014874:	b29a      	uxth	r2, r3
 8014876:	887b      	ldrh	r3, [r7, #2]
 8014878:	4413      	add	r3, r2
 801487a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	6858      	ldr	r0, [r3, #4]
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	685a      	ldr	r2, [r3, #4]
 8014884:	7bbb      	ldrb	r3, [r7, #14]
 8014886:	18d1      	adds	r1, r2, r3
 8014888:	897b      	ldrh	r3, [r7, #10]
 801488a:	89ba      	ldrh	r2, [r7, #12]
 801488c:	f7fb ff80 	bl	8010790 <pbuf_copy_partial>
 8014890:	4603      	mov	r3, r0
 8014892:	461a      	mov	r2, r3
 8014894:	89bb      	ldrh	r3, [r7, #12]
 8014896:	4293      	cmp	r3, r2
 8014898:	f040 809f 	bne.w	80149da <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	899b      	ldrh	r3, [r3, #12]
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7fa f98b 	bl	800ebc0 <lwip_htons>
 80148aa:	4603      	mov	r3, r0
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80148b2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80148b4:	2300      	movs	r3, #0
 80148b6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80148b8:	7efb      	ldrb	r3, [r7, #27]
 80148ba:	f003 0308 	and.w	r3, r3, #8
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d007      	beq.n	80148d2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80148c2:	7efb      	ldrb	r3, [r7, #27]
 80148c4:	f023 0308 	bic.w	r3, r3, #8
 80148c8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80148ca:	7ebb      	ldrb	r3, [r7, #26]
 80148cc:	f043 0308 	orr.w	r3, r3, #8
 80148d0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80148d2:	7efb      	ldrb	r3, [r7, #27]
 80148d4:	f003 0301 	and.w	r3, r3, #1
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d007      	beq.n	80148ec <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80148dc:	7efb      	ldrb	r3, [r7, #27]
 80148de:	f023 0301 	bic.w	r3, r3, #1
 80148e2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80148e4:	7ebb      	ldrb	r3, [r7, #26]
 80148e6:	f043 0301 	orr.w	r3, r3, #1
 80148ea:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fa f979 	bl	800ebea <lwip_htonl>
 80148f8:	4602      	mov	r2, r0
 80148fa:	887b      	ldrh	r3, [r7, #2]
 80148fc:	18d1      	adds	r1, r2, r3
 80148fe:	7eba      	ldrb	r2, [r7, #26]
 8014900:	7bfb      	ldrb	r3, [r7, #15]
 8014902:	9300      	str	r3, [sp, #0]
 8014904:	460b      	mov	r3, r1
 8014906:	6939      	ldr	r1, [r7, #16]
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f7ff fea7 	bl	801465c <tcp_create_segment>
 801490e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d063      	beq.n	80149de <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	4618      	mov	r0, r3
 801491c:	f7fb fdd0 	bl	80104c0 <pbuf_clen>
 8014920:	4603      	mov	r3, r0
 8014922:	461a      	mov	r2, r3
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801492a:	1a9b      	subs	r3, r3, r2
 801492c:	b29a      	uxth	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	6858      	ldr	r0, [r3, #4]
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	891a      	ldrh	r2, [r3, #8]
 801493e:	89bb      	ldrh	r3, [r7, #12]
 8014940:	1ad3      	subs	r3, r2, r3
 8014942:	b29b      	uxth	r3, r3
 8014944:	4619      	mov	r1, r3
 8014946:	f7fb fba7 	bl	8010098 <pbuf_realloc>
  useg->len -= remainder;
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	891a      	ldrh	r2, [r3, #8]
 801494e:	89bb      	ldrh	r3, [r7, #12]
 8014950:	1ad3      	subs	r3, r2, r3
 8014952:	b29a      	uxth	r2, r3
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	899b      	ldrh	r3, [r3, #12]
 801495e:	b29c      	uxth	r4, r3
 8014960:	7efb      	ldrb	r3, [r7, #27]
 8014962:	b29b      	uxth	r3, r3
 8014964:	4618      	mov	r0, r3
 8014966:	f7fa f92b 	bl	800ebc0 <lwip_htons>
 801496a:	4603      	mov	r3, r0
 801496c:	461a      	mov	r2, r3
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	4322      	orrs	r2, r4
 8014974:	b292      	uxth	r2, r2
 8014976:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	4618      	mov	r0, r3
 801497e:	f7fb fd9f 	bl	80104c0 <pbuf_clen>
 8014982:	4603      	mov	r3, r0
 8014984:	461a      	mov	r2, r3
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801498c:	4413      	add	r3, r2
 801498e:	b29a      	uxth	r2, r3
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014996:	69fb      	ldr	r3, [r7, #28]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	4618      	mov	r0, r3
 801499c:	f7fb fd90 	bl	80104c0 <pbuf_clen>
 80149a0:	4603      	mov	r3, r0
 80149a2:	461a      	mov	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149aa:	4413      	add	r3, r2
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	69fb      	ldr	r3, [r7, #28]
 80149ba:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	69fa      	ldr	r2, [r7, #28]
 80149c0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80149c2:	69fb      	ldr	r3, [r7, #28]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d103      	bne.n	80149d2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2200      	movs	r2, #0
 80149ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80149d2:	2300      	movs	r3, #0
 80149d4:	e016      	b.n	8014a04 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80149d6:	bf00      	nop
 80149d8:	e002      	b.n	80149e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80149da:	bf00      	nop
 80149dc:	e000      	b.n	80149e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80149de:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d006      	beq.n	80149f4 <tcp_split_unsent_seg+0x25c>
 80149e6:	4b09      	ldr	r3, [pc, #36]	; (8014a0c <tcp_split_unsent_seg+0x274>)
 80149e8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80149ec:	490d      	ldr	r1, [pc, #52]	; (8014a24 <tcp_split_unsent_seg+0x28c>)
 80149ee:	4809      	ldr	r0, [pc, #36]	; (8014a14 <tcp_split_unsent_seg+0x27c>)
 80149f0:	f004 f9b0 	bl	8018d54 <iprintf>
  if (p != NULL) {
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d002      	beq.n	8014a00 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80149fa:	6938      	ldr	r0, [r7, #16]
 80149fc:	f7fb fcd2 	bl	80103a4 <pbuf_free>
  }

  return ERR_MEM;
 8014a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3724      	adds	r7, #36	; 0x24
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd90      	pop	{r4, r7, pc}
 8014a0c:	0801ba64 	.word	0x0801ba64
 8014a10:	0801bdf8 	.word	0x0801bdf8
 8014a14:	0801bab8 	.word	0x0801bab8
 8014a18:	0801be1c 	.word	0x0801be1c
 8014a1c:	0801be40 	.word	0x0801be40
 8014a20:	0801be50 	.word	0x0801be50
 8014a24:	0801be60 	.word	0x0801be60

08014a28 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014a28:	b590      	push	{r4, r7, lr}
 8014a2a:	b085      	sub	sp, #20
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d106      	bne.n	8014a44 <tcp_send_fin+0x1c>
 8014a36:	4b21      	ldr	r3, [pc, #132]	; (8014abc <tcp_send_fin+0x94>)
 8014a38:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014a3c:	4920      	ldr	r1, [pc, #128]	; (8014ac0 <tcp_send_fin+0x98>)
 8014a3e:	4821      	ldr	r0, [pc, #132]	; (8014ac4 <tcp_send_fin+0x9c>)
 8014a40:	f004 f988 	bl	8018d54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d02e      	beq.n	8014aaa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a50:	60fb      	str	r3, [r7, #12]
 8014a52:	e002      	b.n	8014a5a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1f8      	bne.n	8014a54 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	899b      	ldrh	r3, [r3, #12]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7fa f8a8 	bl	800ebc0 <lwip_htons>
 8014a70:	4603      	mov	r3, r0
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	f003 0307 	and.w	r3, r3, #7
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d116      	bne.n	8014aaa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	899b      	ldrh	r3, [r3, #12]
 8014a82:	b29c      	uxth	r4, r3
 8014a84:	2001      	movs	r0, #1
 8014a86:	f7fa f89b 	bl	800ebc0 <lwip_htons>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	68db      	ldr	r3, [r3, #12]
 8014a92:	4322      	orrs	r2, r4
 8014a94:	b292      	uxth	r2, r2
 8014a96:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	8b5b      	ldrh	r3, [r3, #26]
 8014a9c:	f043 0320 	orr.w	r3, r3, #32
 8014aa0:	b29a      	uxth	r2, r3
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	e004      	b.n	8014ab4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014aaa:	2101      	movs	r1, #1
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f000 f80b 	bl	8014ac8 <tcp_enqueue_flags>
 8014ab2:	4603      	mov	r3, r0
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3714      	adds	r7, #20
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd90      	pop	{r4, r7, pc}
 8014abc:	0801ba64 	.word	0x0801ba64
 8014ac0:	0801be6c 	.word	0x0801be6c
 8014ac4:	0801bab8 	.word	0x0801bab8

08014ac8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08a      	sub	sp, #40	; 0x28
 8014acc:	af02      	add	r7, sp, #8
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014adc:	78fb      	ldrb	r3, [r7, #3]
 8014ade:	f003 0303 	and.w	r3, r3, #3
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d106      	bne.n	8014af4 <tcp_enqueue_flags+0x2c>
 8014ae6:	4b67      	ldr	r3, [pc, #412]	; (8014c84 <tcp_enqueue_flags+0x1bc>)
 8014ae8:	f240 4211 	movw	r2, #1041	; 0x411
 8014aec:	4966      	ldr	r1, [pc, #408]	; (8014c88 <tcp_enqueue_flags+0x1c0>)
 8014aee:	4867      	ldr	r0, [pc, #412]	; (8014c8c <tcp_enqueue_flags+0x1c4>)
 8014af0:	f004 f930 	bl	8018d54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d106      	bne.n	8014b08 <tcp_enqueue_flags+0x40>
 8014afa:	4b62      	ldr	r3, [pc, #392]	; (8014c84 <tcp_enqueue_flags+0x1bc>)
 8014afc:	f240 4213 	movw	r2, #1043	; 0x413
 8014b00:	4963      	ldr	r1, [pc, #396]	; (8014c90 <tcp_enqueue_flags+0x1c8>)
 8014b02:	4862      	ldr	r0, [pc, #392]	; (8014c8c <tcp_enqueue_flags+0x1c4>)
 8014b04:	f004 f926 	bl	8018d54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014b08:	78fb      	ldrb	r3, [r7, #3]
 8014b0a:	f003 0302 	and.w	r3, r3, #2
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d001      	beq.n	8014b16 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014b12:	2301      	movs	r3, #1
 8014b14:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014b16:	7ffb      	ldrb	r3, [r7, #31]
 8014b18:	009b      	lsls	r3, r3, #2
 8014b1a:	b2db      	uxtb	r3, r3
 8014b1c:	f003 0304 	and.w	r3, r3, #4
 8014b20:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014b22:	7dfb      	ldrb	r3, [r7, #23]
 8014b24:	b29b      	uxth	r3, r3
 8014b26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	2036      	movs	r0, #54	; 0x36
 8014b2e:	f7fb f955 	bl	800fddc <pbuf_alloc>
 8014b32:	6138      	str	r0, [r7, #16]
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d109      	bne.n	8014b4e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	8b5b      	ldrh	r3, [r3, #26]
 8014b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b42:	b29a      	uxth	r2, r3
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014b48:	f04f 33ff 	mov.w	r3, #4294967295
 8014b4c:	e095      	b.n	8014c7a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	895a      	ldrh	r2, [r3, #10]
 8014b52:	7dfb      	ldrb	r3, [r7, #23]
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d206      	bcs.n	8014b68 <tcp_enqueue_flags+0xa0>
 8014b5a:	4b4a      	ldr	r3, [pc, #296]	; (8014c84 <tcp_enqueue_flags+0x1bc>)
 8014b5c:	f240 4239 	movw	r2, #1081	; 0x439
 8014b60:	494c      	ldr	r1, [pc, #304]	; (8014c94 <tcp_enqueue_flags+0x1cc>)
 8014b62:	484a      	ldr	r0, [pc, #296]	; (8014c8c <tcp_enqueue_flags+0x1c4>)
 8014b64:	f004 f8f6 	bl	8018d54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014b6c:	78fa      	ldrb	r2, [r7, #3]
 8014b6e:	7ffb      	ldrb	r3, [r7, #31]
 8014b70:	9300      	str	r3, [sp, #0]
 8014b72:	460b      	mov	r3, r1
 8014b74:	6939      	ldr	r1, [r7, #16]
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f7ff fd70 	bl	801465c <tcp_create_segment>
 8014b7c:	60f8      	str	r0, [r7, #12]
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d109      	bne.n	8014b98 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	8b5b      	ldrh	r3, [r3, #26]
 8014b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014b92:	f04f 33ff 	mov.w	r3, #4294967295
 8014b96:	e070      	b.n	8014c7a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	68db      	ldr	r3, [r3, #12]
 8014b9c:	f003 0303 	and.w	r3, r3, #3
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d006      	beq.n	8014bb2 <tcp_enqueue_flags+0xea>
 8014ba4:	4b37      	ldr	r3, [pc, #220]	; (8014c84 <tcp_enqueue_flags+0x1bc>)
 8014ba6:	f240 4242 	movw	r2, #1090	; 0x442
 8014baa:	493b      	ldr	r1, [pc, #236]	; (8014c98 <tcp_enqueue_flags+0x1d0>)
 8014bac:	4837      	ldr	r0, [pc, #220]	; (8014c8c <tcp_enqueue_flags+0x1c4>)
 8014bae:	f004 f8d1 	bl	8018d54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	891b      	ldrh	r3, [r3, #8]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d006      	beq.n	8014bc8 <tcp_enqueue_flags+0x100>
 8014bba:	4b32      	ldr	r3, [pc, #200]	; (8014c84 <tcp_enqueue_flags+0x1bc>)
 8014bbc:	f240 4243 	movw	r2, #1091	; 0x443
 8014bc0:	4936      	ldr	r1, [pc, #216]	; (8014c9c <tcp_enqueue_flags+0x1d4>)
 8014bc2:	4832      	ldr	r0, [pc, #200]	; (8014c8c <tcp_enqueue_flags+0x1c4>)
 8014bc4:	f004 f8c6 	bl	8018d54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d103      	bne.n	8014bd8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	68fa      	ldr	r2, [r7, #12]
 8014bd4:	66da      	str	r2, [r3, #108]	; 0x6c
 8014bd6:	e00d      	b.n	8014bf4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bdc:	61bb      	str	r3, [r7, #24]
 8014bde:	e002      	b.n	8014be6 <tcp_enqueue_flags+0x11e>
 8014be0:	69bb      	ldr	r3, [r7, #24]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	61bb      	str	r3, [r7, #24]
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d1f8      	bne.n	8014be0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	68fa      	ldr	r2, [r7, #12]
 8014bf2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014bfc:	78fb      	ldrb	r3, [r7, #3]
 8014bfe:	f003 0302 	and.w	r3, r3, #2
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d104      	bne.n	8014c10 <tcp_enqueue_flags+0x148>
 8014c06:	78fb      	ldrb	r3, [r7, #3]
 8014c08:	f003 0301 	and.w	r3, r3, #1
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d004      	beq.n	8014c1a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c14:	1c5a      	adds	r2, r3, #1
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014c1a:	78fb      	ldrb	r3, [r7, #3]
 8014c1c:	f003 0301 	and.w	r3, r3, #1
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d006      	beq.n	8014c32 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	8b5b      	ldrh	r3, [r3, #26]
 8014c28:	f043 0320 	orr.w	r3, r3, #32
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	4618      	mov	r0, r3
 8014c38:	f7fb fc42 	bl	80104c0 <pbuf_clen>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	461a      	mov	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c46:	4413      	add	r3, r2
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d00e      	beq.n	8014c78 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d10a      	bne.n	8014c78 <tcp_enqueue_flags+0x1b0>
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d106      	bne.n	8014c78 <tcp_enqueue_flags+0x1b0>
 8014c6a:	4b06      	ldr	r3, [pc, #24]	; (8014c84 <tcp_enqueue_flags+0x1bc>)
 8014c6c:	f240 4265 	movw	r2, #1125	; 0x465
 8014c70:	490b      	ldr	r1, [pc, #44]	; (8014ca0 <tcp_enqueue_flags+0x1d8>)
 8014c72:	4806      	ldr	r0, [pc, #24]	; (8014c8c <tcp_enqueue_flags+0x1c4>)
 8014c74:	f004 f86e 	bl	8018d54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014c78:	2300      	movs	r3, #0
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	3720      	adds	r7, #32
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	bf00      	nop
 8014c84:	0801ba64 	.word	0x0801ba64
 8014c88:	0801be88 	.word	0x0801be88
 8014c8c:	0801bab8 	.word	0x0801bab8
 8014c90:	0801bee0 	.word	0x0801bee0
 8014c94:	0801bf00 	.word	0x0801bf00
 8014c98:	0801bf3c 	.word	0x0801bf3c
 8014c9c:	0801bf54 	.word	0x0801bf54
 8014ca0:	0801bf80 	.word	0x0801bf80

08014ca4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014ca4:	b5b0      	push	{r4, r5, r7, lr}
 8014ca6:	b08a      	sub	sp, #40	; 0x28
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d106      	bne.n	8014cc0 <tcp_output+0x1c>
 8014cb2:	4b8a      	ldr	r3, [pc, #552]	; (8014edc <tcp_output+0x238>)
 8014cb4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014cb8:	4989      	ldr	r1, [pc, #548]	; (8014ee0 <tcp_output+0x23c>)
 8014cba:	488a      	ldr	r0, [pc, #552]	; (8014ee4 <tcp_output+0x240>)
 8014cbc:	f004 f84a 	bl	8018d54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	7d1b      	ldrb	r3, [r3, #20]
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d106      	bne.n	8014cd6 <tcp_output+0x32>
 8014cc8:	4b84      	ldr	r3, [pc, #528]	; (8014edc <tcp_output+0x238>)
 8014cca:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014cce:	4986      	ldr	r1, [pc, #536]	; (8014ee8 <tcp_output+0x244>)
 8014cd0:	4884      	ldr	r0, [pc, #528]	; (8014ee4 <tcp_output+0x240>)
 8014cd2:	f004 f83f 	bl	8018d54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014cd6:	4b85      	ldr	r3, [pc, #532]	; (8014eec <tcp_output+0x248>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	687a      	ldr	r2, [r7, #4]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d101      	bne.n	8014ce4 <tcp_output+0x40>
    return ERR_OK;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	e1ce      	b.n	8015082 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	bf28      	it	cs
 8014cf4:	4613      	movcs	r3, r2
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d10b      	bne.n	8014d1e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	8b5b      	ldrh	r3, [r3, #26]
 8014d0a:	f003 0302 	and.w	r3, r3, #2
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	f000 81aa 	beq.w	8015068 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f000 fdcb 	bl	80158b0 <tcp_send_empty_ack>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	e1b1      	b.n	8015082 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	3304      	adds	r3, #4
 8014d24:	461a      	mov	r2, r3
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7ff fc7c 	bl	8014624 <tcp_route>
 8014d2c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d102      	bne.n	8014d3a <tcp_output+0x96>
    return ERR_RTE;
 8014d34:	f06f 0303 	mvn.w	r3, #3
 8014d38:	e1a3      	b.n	8015082 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d003      	beq.n	8014d48 <tcp_output+0xa4>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d111      	bne.n	8014d6c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d002      	beq.n	8014d54 <tcp_output+0xb0>
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	3304      	adds	r3, #4
 8014d52:	e000      	b.n	8014d56 <tcp_output+0xb2>
 8014d54:	2300      	movs	r3, #0
 8014d56:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d102      	bne.n	8014d64 <tcp_output+0xc0>
      return ERR_RTE;
 8014d5e:	f06f 0303 	mvn.w	r3, #3
 8014d62:	e18e      	b.n	8015082 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014d64:	693b      	ldr	r3, [r7, #16]
 8014d66:	681a      	ldr	r2, [r3, #0]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d6e:	68db      	ldr	r3, [r3, #12]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7f9 ff39 	bl	800ebea <lwip_htonl>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d7e:	1ad3      	subs	r3, r2, r3
 8014d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d82:	8912      	ldrh	r2, [r2, #8]
 8014d84:	4413      	add	r3, r2
 8014d86:	69ba      	ldr	r2, [r7, #24]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d227      	bcs.n	8014ddc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014d92:	461a      	mov	r2, r3
 8014d94:	69bb      	ldr	r3, [r7, #24]
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d114      	bne.n	8014dc4 <tcp_output+0x120>
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d110      	bne.n	8014dc4 <tcp_output+0x120>
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d10b      	bne.n	8014dc4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2201      	movs	r2, #1
 8014db8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	8b5b      	ldrh	r3, [r3, #26]
 8014dc8:	f003 0302 	and.w	r3, r3, #2
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	f000 814d 	beq.w	801506c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f000 fd6c 	bl	80158b0 <tcp_send_empty_ack>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	e152      	b.n	8015082 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014de8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	f000 811c 	beq.w	801502a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014df2:	e002      	b.n	8014dfa <tcp_output+0x156>
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	623b      	str	r3, [r7, #32]
 8014dfa:	6a3b      	ldr	r3, [r7, #32]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d1f8      	bne.n	8014df4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014e02:	e112      	b.n	801502a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	899b      	ldrh	r3, [r3, #12]
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7f9 fed7 	bl	800ebc0 <lwip_htons>
 8014e12:	4603      	mov	r3, r0
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	f003 0304 	and.w	r3, r3, #4
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d006      	beq.n	8014e2c <tcp_output+0x188>
 8014e1e:	4b2f      	ldr	r3, [pc, #188]	; (8014edc <tcp_output+0x238>)
 8014e20:	f240 5236 	movw	r2, #1334	; 0x536
 8014e24:	4932      	ldr	r1, [pc, #200]	; (8014ef0 <tcp_output+0x24c>)
 8014e26:	482f      	ldr	r0, [pc, #188]	; (8014ee4 <tcp_output+0x240>)
 8014e28:	f003 ff94 	bl	8018d54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d01f      	beq.n	8014e74 <tcp_output+0x1d0>
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	8b5b      	ldrh	r3, [r3, #26]
 8014e38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d119      	bne.n	8014e74 <tcp_output+0x1d0>
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d00b      	beq.n	8014e60 <tcp_output+0x1bc>
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d110      	bne.n	8014e74 <tcp_output+0x1d0>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e56:	891a      	ldrh	r2, [r3, #8]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d209      	bcs.n	8014e74 <tcp_output+0x1d0>
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d004      	beq.n	8014e74 <tcp_output+0x1d0>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e70:	2b08      	cmp	r3, #8
 8014e72:	d901      	bls.n	8014e78 <tcp_output+0x1d4>
 8014e74:	2301      	movs	r3, #1
 8014e76:	e000      	b.n	8014e7a <tcp_output+0x1d6>
 8014e78:	2300      	movs	r3, #0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d106      	bne.n	8014e8c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	8b5b      	ldrh	r3, [r3, #26]
 8014e82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	f000 80e4 	beq.w	8015054 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	7d1b      	ldrb	r3, [r3, #20]
 8014e90:	2b02      	cmp	r3, #2
 8014e92:	d00d      	beq.n	8014eb0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	899b      	ldrh	r3, [r3, #12]
 8014e9a:	b29c      	uxth	r4, r3
 8014e9c:	2010      	movs	r0, #16
 8014e9e:	f7f9 fe8f 	bl	800ebc0 <lwip_htons>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	4322      	orrs	r2, r4
 8014eac:	b292      	uxth	r2, r2
 8014eae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014eb0:	697a      	ldr	r2, [r7, #20]
 8014eb2:	6879      	ldr	r1, [r7, #4]
 8014eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014eb6:	f000 f909 	bl	80150cc <tcp_output_segment>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d016      	beq.n	8014ef4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	8b5b      	ldrh	r3, [r3, #26]
 8014eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ece:	b29a      	uxth	r2, r3
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	835a      	strh	r2, [r3, #26]
      return err;
 8014ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ed8:	e0d3      	b.n	8015082 <tcp_output+0x3de>
 8014eda:	bf00      	nop
 8014edc:	0801ba64 	.word	0x0801ba64
 8014ee0:	0801bfa8 	.word	0x0801bfa8
 8014ee4:	0801bab8 	.word	0x0801bab8
 8014ee8:	0801bfc0 	.word	0x0801bfc0
 8014eec:	2000d9d4 	.word	0x2000d9d4
 8014ef0:	0801bfe8 	.word	0x0801bfe8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	7d1b      	ldrb	r3, [r3, #20]
 8014f00:	2b02      	cmp	r3, #2
 8014f02:	d006      	beq.n	8014f12 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	8b5b      	ldrh	r3, [r3, #26]
 8014f08:	f023 0303 	bic.w	r3, r3, #3
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7f9 fe66 	bl	800ebea <lwip_htonl>
 8014f1e:	4604      	mov	r4, r0
 8014f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f22:	891b      	ldrh	r3, [r3, #8]
 8014f24:	461d      	mov	r5, r3
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	899b      	ldrh	r3, [r3, #12]
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7f9 fe46 	bl	800ebc0 <lwip_htons>
 8014f34:	4603      	mov	r3, r0
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	f003 0303 	and.w	r3, r3, #3
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d001      	beq.n	8014f44 <tcp_output+0x2a0>
 8014f40:	2301      	movs	r3, #1
 8014f42:	e000      	b.n	8014f46 <tcp_output+0x2a2>
 8014f44:	2300      	movs	r3, #0
 8014f46:	442b      	add	r3, r5
 8014f48:	4423      	add	r3, r4
 8014f4a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	1ad3      	subs	r3, r2, r3
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	da02      	bge.n	8014f5e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	68ba      	ldr	r2, [r7, #8]
 8014f5c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f60:	891b      	ldrh	r3, [r3, #8]
 8014f62:	461c      	mov	r4, r3
 8014f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f66:	68db      	ldr	r3, [r3, #12]
 8014f68:	899b      	ldrh	r3, [r3, #12]
 8014f6a:	b29b      	uxth	r3, r3
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7f9 fe27 	bl	800ebc0 <lwip_htons>
 8014f72:	4603      	mov	r3, r0
 8014f74:	b2db      	uxtb	r3, r3
 8014f76:	f003 0303 	and.w	r3, r3, #3
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d001      	beq.n	8014f82 <tcp_output+0x2de>
 8014f7e:	2301      	movs	r3, #1
 8014f80:	e000      	b.n	8014f84 <tcp_output+0x2e0>
 8014f82:	2300      	movs	r3, #0
 8014f84:	4423      	add	r3, r4
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d049      	beq.n	801501e <tcp_output+0x37a>
      seg->next = NULL;
 8014f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d105      	bne.n	8014fa4 <tcp_output+0x300>
        pcb->unacked = seg;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f9c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa0:	623b      	str	r3, [r7, #32]
 8014fa2:	e03f      	b.n	8015024 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7f9 fe1d 	bl	800ebea <lwip_htonl>
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	6a3b      	ldr	r3, [r7, #32]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7f9 fe16 	bl	800ebea <lwip_htonl>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	1ae3      	subs	r3, r4, r3
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	da24      	bge.n	8015010 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	3370      	adds	r3, #112	; 0x70
 8014fca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014fcc:	e002      	b.n	8014fd4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014fce:	69fb      	ldr	r3, [r7, #28]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d011      	beq.n	8015000 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014fdc:	69fb      	ldr	r3, [r7, #28]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	68db      	ldr	r3, [r3, #12]
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7f9 fe00 	bl	800ebea <lwip_htonl>
 8014fea:	4604      	mov	r4, r0
 8014fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fee:	68db      	ldr	r3, [r3, #12]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7f9 fdf9 	bl	800ebea <lwip_htonl>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	dbe6      	blt.n	8014fce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	681a      	ldr	r2, [r3, #0]
 8015004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015006:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015008:	69fb      	ldr	r3, [r7, #28]
 801500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801500c:	601a      	str	r2, [r3, #0]
 801500e:	e009      	b.n	8015024 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015010:	6a3b      	ldr	r3, [r7, #32]
 8015012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015014:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015016:	6a3b      	ldr	r3, [r7, #32]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	623b      	str	r3, [r7, #32]
 801501c:	e002      	b.n	8015024 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801501e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015020:	f7fc fc3f 	bl	80118a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015028:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801502c:	2b00      	cmp	r3, #0
 801502e:	d012      	beq.n	8015056 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	4618      	mov	r0, r3
 8015038:	f7f9 fdd7 	bl	800ebea <lwip_htonl>
 801503c:	4602      	mov	r2, r0
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015042:	1ad3      	subs	r3, r2, r3
 8015044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015046:	8912      	ldrh	r2, [r2, #8]
 8015048:	4413      	add	r3, r2
  while (seg != NULL &&
 801504a:	69ba      	ldr	r2, [r7, #24]
 801504c:	429a      	cmp	r2, r3
 801504e:	f4bf aed9 	bcs.w	8014e04 <tcp_output+0x160>
 8015052:	e000      	b.n	8015056 <tcp_output+0x3b2>
      break;
 8015054:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801505a:	2b00      	cmp	r3, #0
 801505c:	d108      	bne.n	8015070 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2200      	movs	r2, #0
 8015062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015066:	e004      	b.n	8015072 <tcp_output+0x3ce>
    goto output_done;
 8015068:	bf00      	nop
 801506a:	e002      	b.n	8015072 <tcp_output+0x3ce>
    goto output_done;
 801506c:	bf00      	nop
 801506e:	e000      	b.n	8015072 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015070:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	8b5b      	ldrh	r3, [r3, #26]
 8015076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015080:	2300      	movs	r3, #0
}
 8015082:	4618      	mov	r0, r3
 8015084:	3728      	adds	r7, #40	; 0x28
 8015086:	46bd      	mov	sp, r7
 8015088:	bdb0      	pop	{r4, r5, r7, pc}
 801508a:	bf00      	nop

0801508c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d106      	bne.n	80150a8 <tcp_output_segment_busy+0x1c>
 801509a:	4b09      	ldr	r3, [pc, #36]	; (80150c0 <tcp_output_segment_busy+0x34>)
 801509c:	f240 529a 	movw	r2, #1434	; 0x59a
 80150a0:	4908      	ldr	r1, [pc, #32]	; (80150c4 <tcp_output_segment_busy+0x38>)
 80150a2:	4809      	ldr	r0, [pc, #36]	; (80150c8 <tcp_output_segment_busy+0x3c>)
 80150a4:	f003 fe56 	bl	8018d54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	7b9b      	ldrb	r3, [r3, #14]
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d001      	beq.n	80150b6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80150b2:	2301      	movs	r3, #1
 80150b4:	e000      	b.n	80150b8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80150b6:	2300      	movs	r3, #0
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	0801ba64 	.word	0x0801ba64
 80150c4:	0801c000 	.word	0x0801c000
 80150c8:	0801bab8 	.word	0x0801bab8

080150cc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80150cc:	b5b0      	push	{r4, r5, r7, lr}
 80150ce:	b08c      	sub	sp, #48	; 0x30
 80150d0:	af04      	add	r7, sp, #16
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d106      	bne.n	80150ec <tcp_output_segment+0x20>
 80150de:	4b63      	ldr	r3, [pc, #396]	; (801526c <tcp_output_segment+0x1a0>)
 80150e0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80150e4:	4962      	ldr	r1, [pc, #392]	; (8015270 <tcp_output_segment+0x1a4>)
 80150e6:	4863      	ldr	r0, [pc, #396]	; (8015274 <tcp_output_segment+0x1a8>)
 80150e8:	f003 fe34 	bl	8018d54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d106      	bne.n	8015100 <tcp_output_segment+0x34>
 80150f2:	4b5e      	ldr	r3, [pc, #376]	; (801526c <tcp_output_segment+0x1a0>)
 80150f4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80150f8:	495f      	ldr	r1, [pc, #380]	; (8015278 <tcp_output_segment+0x1ac>)
 80150fa:	485e      	ldr	r0, [pc, #376]	; (8015274 <tcp_output_segment+0x1a8>)
 80150fc:	f003 fe2a 	bl	8018d54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d106      	bne.n	8015114 <tcp_output_segment+0x48>
 8015106:	4b59      	ldr	r3, [pc, #356]	; (801526c <tcp_output_segment+0x1a0>)
 8015108:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801510c:	495b      	ldr	r1, [pc, #364]	; (801527c <tcp_output_segment+0x1b0>)
 801510e:	4859      	ldr	r0, [pc, #356]	; (8015274 <tcp_output_segment+0x1a8>)
 8015110:	f003 fe20 	bl	8018d54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015114:	68f8      	ldr	r0, [r7, #12]
 8015116:	f7ff ffb9 	bl	801508c <tcp_output_segment_busy>
 801511a:	4603      	mov	r3, r0
 801511c:	2b00      	cmp	r3, #0
 801511e:	d001      	beq.n	8015124 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015120:	2300      	movs	r3, #0
 8015122:	e09f      	b.n	8015264 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	68dc      	ldr	r4, [r3, #12]
 801512c:	4610      	mov	r0, r2
 801512e:	f7f9 fd5c 	bl	800ebea <lwip_htonl>
 8015132:	4603      	mov	r3, r0
 8015134:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	68dc      	ldr	r4, [r3, #12]
 801513e:	4610      	mov	r0, r2
 8015140:	f7f9 fd3e 	bl	800ebc0 <lwip_htons>
 8015144:	4603      	mov	r3, r0
 8015146:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514c:	68ba      	ldr	r2, [r7, #8]
 801514e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015150:	441a      	add	r2, r3
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	3314      	adds	r3, #20
 801515c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	7a9b      	ldrb	r3, [r3, #10]
 8015162:	f003 0301 	and.w	r3, r3, #1
 8015166:	2b00      	cmp	r3, #0
 8015168:	d015      	beq.n	8015196 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	3304      	adds	r3, #4
 801516e:	461a      	mov	r2, r3
 8015170:	6879      	ldr	r1, [r7, #4]
 8015172:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015176:	f7fc fe8b 	bl	8011e90 <tcp_eff_send_mss_netif>
 801517a:	4603      	mov	r3, r0
 801517c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801517e:	8b7b      	ldrh	r3, [r7, #26]
 8015180:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015184:	4618      	mov	r0, r3
 8015186:	f7f9 fd30 	bl	800ebea <lwip_htonl>
 801518a:	4602      	mov	r2, r0
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	3304      	adds	r3, #4
 8015194:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801519c:	2b00      	cmp	r3, #0
 801519e:	da02      	bge.n	80151a6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	2200      	movs	r2, #0
 80151a4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d10c      	bne.n	80151c8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80151ae:	4b34      	ldr	r3, [pc, #208]	; (8015280 <tcp_output_segment+0x1b4>)
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	68db      	ldr	r3, [r3, #12]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	4618      	mov	r0, r3
 80151be:	f7f9 fd14 	bl	800ebea <lwip_htonl>
 80151c2:	4602      	mov	r2, r0
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	68da      	ldr	r2, [r3, #12]
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	1ad3      	subs	r3, r2, r3
 80151d4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	8959      	ldrh	r1, [r3, #10]
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	8b3a      	ldrh	r2, [r7, #24]
 80151e2:	1a8a      	subs	r2, r1, r2
 80151e4:	b292      	uxth	r2, r2
 80151e6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	685b      	ldr	r3, [r3, #4]
 80151ec:	8919      	ldrh	r1, [r3, #8]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	685b      	ldr	r3, [r3, #4]
 80151f2:	8b3a      	ldrh	r2, [r7, #24]
 80151f4:	1a8a      	subs	r2, r1, r2
 80151f6:	b292      	uxth	r2, r2
 80151f8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	68fa      	ldr	r2, [r7, #12]
 8015200:	68d2      	ldr	r2, [r2, #12]
 8015202:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	68db      	ldr	r3, [r3, #12]
 8015208:	2200      	movs	r2, #0
 801520a:	741a      	strb	r2, [r3, #16]
 801520c:	2200      	movs	r2, #0
 801520e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	68db      	ldr	r3, [r3, #12]
 8015214:	f103 0214 	add.w	r2, r3, #20
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	7a9b      	ldrb	r3, [r3, #10]
 801521c:	009b      	lsls	r3, r3, #2
 801521e:	f003 0304 	and.w	r3, r3, #4
 8015222:	4413      	add	r3, r2
 8015224:	69fa      	ldr	r2, [r7, #28]
 8015226:	429a      	cmp	r2, r3
 8015228:	d006      	beq.n	8015238 <tcp_output_segment+0x16c>
 801522a:	4b10      	ldr	r3, [pc, #64]	; (801526c <tcp_output_segment+0x1a0>)
 801522c:	f240 621c 	movw	r2, #1564	; 0x61c
 8015230:	4914      	ldr	r1, [pc, #80]	; (8015284 <tcp_output_segment+0x1b8>)
 8015232:	4810      	ldr	r0, [pc, #64]	; (8015274 <tcp_output_segment+0x1a8>)
 8015234:	f003 fd8e 	bl	8018d54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	6858      	ldr	r0, [r3, #4]
 801523c:	68b9      	ldr	r1, [r7, #8]
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	1d1c      	adds	r4, r3, #4
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	7add      	ldrb	r5, [r3, #11]
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	7a9b      	ldrb	r3, [r3, #10]
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	9202      	str	r2, [sp, #8]
 801524e:	2206      	movs	r2, #6
 8015250:	9201      	str	r2, [sp, #4]
 8015252:	9300      	str	r3, [sp, #0]
 8015254:	462b      	mov	r3, r5
 8015256:	4622      	mov	r2, r4
 8015258:	f002 fa66 	bl	8017728 <ip4_output_if>
 801525c:	4603      	mov	r3, r0
 801525e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015260:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015264:	4618      	mov	r0, r3
 8015266:	3720      	adds	r7, #32
 8015268:	46bd      	mov	sp, r7
 801526a:	bdb0      	pop	{r4, r5, r7, pc}
 801526c:	0801ba64 	.word	0x0801ba64
 8015270:	0801c028 	.word	0x0801c028
 8015274:	0801bab8 	.word	0x0801bab8
 8015278:	0801c048 	.word	0x0801c048
 801527c:	0801c068 	.word	0x0801c068
 8015280:	2000d988 	.word	0x2000d988
 8015284:	0801c08c 	.word	0x0801c08c

08015288 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015288:	b5b0      	push	{r4, r5, r7, lr}
 801528a:	b084      	sub	sp, #16
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d106      	bne.n	80152a4 <tcp_rexmit_rto_prepare+0x1c>
 8015296:	4b31      	ldr	r3, [pc, #196]	; (801535c <tcp_rexmit_rto_prepare+0xd4>)
 8015298:	f240 6263 	movw	r2, #1635	; 0x663
 801529c:	4930      	ldr	r1, [pc, #192]	; (8015360 <tcp_rexmit_rto_prepare+0xd8>)
 801529e:	4831      	ldr	r0, [pc, #196]	; (8015364 <tcp_rexmit_rto_prepare+0xdc>)
 80152a0:	f003 fd58 	bl	8018d54 <iprintf>

  if (pcb->unacked == NULL) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d102      	bne.n	80152b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80152ac:	f06f 0305 	mvn.w	r3, #5
 80152b0:	e050      	b.n	8015354 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152b6:	60fb      	str	r3, [r7, #12]
 80152b8:	e00b      	b.n	80152d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80152ba:	68f8      	ldr	r0, [r7, #12]
 80152bc:	f7ff fee6 	bl	801508c <tcp_output_segment_busy>
 80152c0:	4603      	mov	r3, r0
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d002      	beq.n	80152cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80152c6:	f06f 0305 	mvn.w	r3, #5
 80152ca:	e043      	b.n	8015354 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	60fb      	str	r3, [r7, #12]
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1ef      	bne.n	80152ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	f7ff fed6 	bl	801508c <tcp_output_segment_busy>
 80152e0:	4603      	mov	r3, r0
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d002      	beq.n	80152ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80152e6:	f06f 0305 	mvn.w	r3, #5
 80152ea:	e033      	b.n	8015354 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2200      	movs	r2, #0
 8015300:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	8b5b      	ldrh	r3, [r3, #26]
 8015306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801530a:	b29a      	uxth	r2, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	68db      	ldr	r3, [r3, #12]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	4618      	mov	r0, r3
 8015318:	f7f9 fc67 	bl	800ebea <lwip_htonl>
 801531c:	4604      	mov	r4, r0
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	891b      	ldrh	r3, [r3, #8]
 8015322:	461d      	mov	r5, r3
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	68db      	ldr	r3, [r3, #12]
 8015328:	899b      	ldrh	r3, [r3, #12]
 801532a:	b29b      	uxth	r3, r3
 801532c:	4618      	mov	r0, r3
 801532e:	f7f9 fc47 	bl	800ebc0 <lwip_htons>
 8015332:	4603      	mov	r3, r0
 8015334:	b2db      	uxtb	r3, r3
 8015336:	f003 0303 	and.w	r3, r3, #3
 801533a:	2b00      	cmp	r3, #0
 801533c:	d001      	beq.n	8015342 <tcp_rexmit_rto_prepare+0xba>
 801533e:	2301      	movs	r3, #1
 8015340:	e000      	b.n	8015344 <tcp_rexmit_rto_prepare+0xbc>
 8015342:	2300      	movs	r3, #0
 8015344:	442b      	add	r3, r5
 8015346:	18e2      	adds	r2, r4, r3
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2200      	movs	r2, #0
 8015350:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015352:	2300      	movs	r3, #0
}
 8015354:	4618      	mov	r0, r3
 8015356:	3710      	adds	r7, #16
 8015358:	46bd      	mov	sp, r7
 801535a:	bdb0      	pop	{r4, r5, r7, pc}
 801535c:	0801ba64 	.word	0x0801ba64
 8015360:	0801c0a0 	.word	0x0801c0a0
 8015364:	0801bab8 	.word	0x0801bab8

08015368 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d106      	bne.n	8015384 <tcp_rexmit_rto_commit+0x1c>
 8015376:	4b0d      	ldr	r3, [pc, #52]	; (80153ac <tcp_rexmit_rto_commit+0x44>)
 8015378:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801537c:	490c      	ldr	r1, [pc, #48]	; (80153b0 <tcp_rexmit_rto_commit+0x48>)
 801537e:	480d      	ldr	r0, [pc, #52]	; (80153b4 <tcp_rexmit_rto_commit+0x4c>)
 8015380:	f003 fce8 	bl	8018d54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801538a:	2bff      	cmp	r3, #255	; 0xff
 801538c:	d007      	beq.n	801539e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015394:	3301      	adds	r3, #1
 8015396:	b2da      	uxtb	r2, r3
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f7ff fc80 	bl	8014ca4 <tcp_output>
}
 80153a4:	bf00      	nop
 80153a6:	3708      	adds	r7, #8
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	0801ba64 	.word	0x0801ba64
 80153b0:	0801c0c4 	.word	0x0801c0c4
 80153b4:	0801bab8 	.word	0x0801bab8

080153b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d106      	bne.n	80153d4 <tcp_rexmit_rto+0x1c>
 80153c6:	4b0a      	ldr	r3, [pc, #40]	; (80153f0 <tcp_rexmit_rto+0x38>)
 80153c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80153cc:	4909      	ldr	r1, [pc, #36]	; (80153f4 <tcp_rexmit_rto+0x3c>)
 80153ce:	480a      	ldr	r0, [pc, #40]	; (80153f8 <tcp_rexmit_rto+0x40>)
 80153d0:	f003 fcc0 	bl	8018d54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7ff ff57 	bl	8015288 <tcp_rexmit_rto_prepare>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d102      	bne.n	80153e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f7ff ffc1 	bl	8015368 <tcp_rexmit_rto_commit>
  }
}
 80153e6:	bf00      	nop
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	0801ba64 	.word	0x0801ba64
 80153f4:	0801c0e8 	.word	0x0801c0e8
 80153f8:	0801bab8 	.word	0x0801bab8

080153fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80153fc:	b590      	push	{r4, r7, lr}
 80153fe:	b085      	sub	sp, #20
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d106      	bne.n	8015418 <tcp_rexmit+0x1c>
 801540a:	4b2f      	ldr	r3, [pc, #188]	; (80154c8 <tcp_rexmit+0xcc>)
 801540c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015410:	492e      	ldr	r1, [pc, #184]	; (80154cc <tcp_rexmit+0xd0>)
 8015412:	482f      	ldr	r0, [pc, #188]	; (80154d0 <tcp_rexmit+0xd4>)
 8015414:	f003 fc9e 	bl	8018d54 <iprintf>

  if (pcb->unacked == NULL) {
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801541c:	2b00      	cmp	r3, #0
 801541e:	d102      	bne.n	8015426 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015420:	f06f 0305 	mvn.w	r3, #5
 8015424:	e04c      	b.n	80154c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801542a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801542c:	68b8      	ldr	r0, [r7, #8]
 801542e:	f7ff fe2d 	bl	801508c <tcp_output_segment_busy>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d002      	beq.n	801543e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015438:	f06f 0305 	mvn.w	r3, #5
 801543c:	e040      	b.n	80154c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	681a      	ldr	r2, [r3, #0]
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	336c      	adds	r3, #108	; 0x6c
 801544a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801544c:	e002      	b.n	8015454 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d011      	beq.n	8015480 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	68db      	ldr	r3, [r3, #12]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	4618      	mov	r0, r3
 8015466:	f7f9 fbc0 	bl	800ebea <lwip_htonl>
 801546a:	4604      	mov	r4, r0
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	68db      	ldr	r3, [r3, #12]
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	4618      	mov	r0, r3
 8015474:	f7f9 fbb9 	bl	800ebea <lwip_htonl>
 8015478:	4603      	mov	r3, r0
 801547a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801547c:	2b00      	cmp	r3, #0
 801547e:	dbe6      	blt.n	801544e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	68ba      	ldr	r2, [r7, #8]
 801548c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d103      	bne.n	801549e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2200      	movs	r2, #0
 801549a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154a4:	2bff      	cmp	r3, #255	; 0xff
 80154a6:	d007      	beq.n	80154b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154ae:	3301      	adds	r3, #1
 80154b0:	b2da      	uxtb	r2, r3
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2200      	movs	r2, #0
 80154bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80154be:	2300      	movs	r3, #0
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3714      	adds	r7, #20
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd90      	pop	{r4, r7, pc}
 80154c8:	0801ba64 	.word	0x0801ba64
 80154cc:	0801c104 	.word	0x0801c104
 80154d0:	0801bab8 	.word	0x0801bab8

080154d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d106      	bne.n	80154f0 <tcp_rexmit_fast+0x1c>
 80154e2:	4b2a      	ldr	r3, [pc, #168]	; (801558c <tcp_rexmit_fast+0xb8>)
 80154e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80154e8:	4929      	ldr	r1, [pc, #164]	; (8015590 <tcp_rexmit_fast+0xbc>)
 80154ea:	482a      	ldr	r0, [pc, #168]	; (8015594 <tcp_rexmit_fast+0xc0>)
 80154ec:	f003 fc32 	bl	8018d54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d044      	beq.n	8015582 <tcp_rexmit_fast+0xae>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	8b5b      	ldrh	r3, [r3, #26]
 80154fc:	f003 0304 	and.w	r3, r3, #4
 8015500:	2b00      	cmp	r3, #0
 8015502:	d13e      	bne.n	8015582 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f7ff ff79 	bl	80153fc <tcp_rexmit>
 801550a:	4603      	mov	r3, r0
 801550c:	2b00      	cmp	r3, #0
 801550e:	d138      	bne.n	8015582 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801551c:	4293      	cmp	r3, r2
 801551e:	bf28      	it	cs
 8015520:	4613      	movcs	r3, r2
 8015522:	b29b      	uxth	r3, r3
 8015524:	0fda      	lsrs	r2, r3, #31
 8015526:	4413      	add	r3, r2
 8015528:	105b      	asrs	r3, r3, #1
 801552a:	b29a      	uxth	r2, r3
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015538:	461a      	mov	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	429a      	cmp	r2, r3
 8015542:	d206      	bcs.n	8015552 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015548:	005b      	lsls	r3, r3, #1
 801554a:	b29a      	uxth	r2, r3
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801555c:	4619      	mov	r1, r3
 801555e:	0049      	lsls	r1, r1, #1
 8015560:	440b      	add	r3, r1
 8015562:	b29b      	uxth	r3, r3
 8015564:	4413      	add	r3, r2
 8015566:	b29a      	uxth	r2, r3
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	8b5b      	ldrh	r3, [r3, #26]
 8015572:	f043 0304 	orr.w	r3, r3, #4
 8015576:	b29a      	uxth	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2200      	movs	r2, #0
 8015580:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015582:	bf00      	nop
 8015584:	3708      	adds	r7, #8
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	0801ba64 	.word	0x0801ba64
 8015590:	0801c11c 	.word	0x0801c11c
 8015594:	0801bab8 	.word	0x0801bab8

08015598 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b086      	sub	sp, #24
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	607b      	str	r3, [r7, #4]
 80155a2:	460b      	mov	r3, r1
 80155a4:	817b      	strh	r3, [r7, #10]
 80155a6:	4613      	mov	r3, r2
 80155a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80155aa:	897a      	ldrh	r2, [r7, #10]
 80155ac:	893b      	ldrh	r3, [r7, #8]
 80155ae:	4413      	add	r3, r2
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	3314      	adds	r3, #20
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155ba:	4619      	mov	r1, r3
 80155bc:	2022      	movs	r0, #34	; 0x22
 80155be:	f7fa fc0d 	bl	800fddc <pbuf_alloc>
 80155c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d04d      	beq.n	8015666 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80155ca:	897b      	ldrh	r3, [r7, #10]
 80155cc:	3313      	adds	r3, #19
 80155ce:	697a      	ldr	r2, [r7, #20]
 80155d0:	8952      	ldrh	r2, [r2, #10]
 80155d2:	4293      	cmp	r3, r2
 80155d4:	db06      	blt.n	80155e4 <tcp_output_alloc_header_common+0x4c>
 80155d6:	4b26      	ldr	r3, [pc, #152]	; (8015670 <tcp_output_alloc_header_common+0xd8>)
 80155d8:	f240 7223 	movw	r2, #1827	; 0x723
 80155dc:	4925      	ldr	r1, [pc, #148]	; (8015674 <tcp_output_alloc_header_common+0xdc>)
 80155de:	4826      	ldr	r0, [pc, #152]	; (8015678 <tcp_output_alloc_header_common+0xe0>)
 80155e0:	f003 fbb8 	bl	8018d54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80155ea:	8c3b      	ldrh	r3, [r7, #32]
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7f9 fae7 	bl	800ebc0 <lwip_htons>
 80155f2:	4603      	mov	r3, r0
 80155f4:	461a      	mov	r2, r3
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80155fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155fc:	4618      	mov	r0, r3
 80155fe:	f7f9 fadf 	bl	800ebc0 <lwip_htons>
 8015602:	4603      	mov	r3, r0
 8015604:	461a      	mov	r2, r3
 8015606:	693b      	ldr	r3, [r7, #16]
 8015608:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015610:	68f8      	ldr	r0, [r7, #12]
 8015612:	f7f9 faea 	bl	800ebea <lwip_htonl>
 8015616:	4602      	mov	r2, r0
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801561c:	897b      	ldrh	r3, [r7, #10]
 801561e:	089b      	lsrs	r3, r3, #2
 8015620:	b29b      	uxth	r3, r3
 8015622:	3305      	adds	r3, #5
 8015624:	b29b      	uxth	r3, r3
 8015626:	031b      	lsls	r3, r3, #12
 8015628:	b29a      	uxth	r2, r3
 801562a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801562e:	b29b      	uxth	r3, r3
 8015630:	4313      	orrs	r3, r2
 8015632:	b29b      	uxth	r3, r3
 8015634:	4618      	mov	r0, r3
 8015636:	f7f9 fac3 	bl	800ebc0 <lwip_htons>
 801563a:	4603      	mov	r3, r0
 801563c:	461a      	mov	r2, r3
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015644:	4618      	mov	r0, r3
 8015646:	f7f9 fabb 	bl	800ebc0 <lwip_htons>
 801564a:	4603      	mov	r3, r0
 801564c:	461a      	mov	r2, r3
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	2200      	movs	r2, #0
 8015656:	741a      	strb	r2, [r3, #16]
 8015658:	2200      	movs	r2, #0
 801565a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801565c:	693b      	ldr	r3, [r7, #16]
 801565e:	2200      	movs	r2, #0
 8015660:	749a      	strb	r2, [r3, #18]
 8015662:	2200      	movs	r2, #0
 8015664:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015666:	697b      	ldr	r3, [r7, #20]
}
 8015668:	4618      	mov	r0, r3
 801566a:	3718      	adds	r7, #24
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}
 8015670:	0801ba64 	.word	0x0801ba64
 8015674:	0801c13c 	.word	0x0801c13c
 8015678:	0801bab8 	.word	0x0801bab8

0801567c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801567c:	b5b0      	push	{r4, r5, r7, lr}
 801567e:	b08a      	sub	sp, #40	; 0x28
 8015680:	af04      	add	r7, sp, #16
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	607b      	str	r3, [r7, #4]
 8015686:	460b      	mov	r3, r1
 8015688:	817b      	strh	r3, [r7, #10]
 801568a:	4613      	mov	r3, r2
 801568c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d106      	bne.n	80156a2 <tcp_output_alloc_header+0x26>
 8015694:	4b15      	ldr	r3, [pc, #84]	; (80156ec <tcp_output_alloc_header+0x70>)
 8015696:	f240 7242 	movw	r2, #1858	; 0x742
 801569a:	4915      	ldr	r1, [pc, #84]	; (80156f0 <tcp_output_alloc_header+0x74>)
 801569c:	4815      	ldr	r0, [pc, #84]	; (80156f4 <tcp_output_alloc_header+0x78>)
 801569e:	f003 fb59 	bl	8018d54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	8adb      	ldrh	r3, [r3, #22]
 80156aa:	68fa      	ldr	r2, [r7, #12]
 80156ac:	8b12      	ldrh	r2, [r2, #24]
 80156ae:	68f9      	ldr	r1, [r7, #12]
 80156b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80156b2:	893d      	ldrh	r5, [r7, #8]
 80156b4:	897c      	ldrh	r4, [r7, #10]
 80156b6:	9103      	str	r1, [sp, #12]
 80156b8:	2110      	movs	r1, #16
 80156ba:	9102      	str	r1, [sp, #8]
 80156bc:	9201      	str	r2, [sp, #4]
 80156be:	9300      	str	r3, [sp, #0]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	462a      	mov	r2, r5
 80156c4:	4621      	mov	r1, r4
 80156c6:	f7ff ff67 	bl	8015598 <tcp_output_alloc_header_common>
 80156ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d006      	beq.n	80156e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156d6:	68fa      	ldr	r2, [r7, #12]
 80156d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80156da:	441a      	add	r2, r3
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80156e0:	697b      	ldr	r3, [r7, #20]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3718      	adds	r7, #24
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bdb0      	pop	{r4, r5, r7, pc}
 80156ea:	bf00      	nop
 80156ec:	0801ba64 	.word	0x0801ba64
 80156f0:	0801c16c 	.word	0x0801c16c
 80156f4:	0801bab8 	.word	0x0801bab8

080156f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b088      	sub	sp, #32
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	4611      	mov	r1, r2
 8015704:	461a      	mov	r2, r3
 8015706:	460b      	mov	r3, r1
 8015708:	71fb      	strb	r3, [r7, #7]
 801570a:	4613      	mov	r3, r2
 801570c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801570e:	2300      	movs	r3, #0
 8015710:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d106      	bne.n	8015726 <tcp_output_fill_options+0x2e>
 8015718:	4b13      	ldr	r3, [pc, #76]	; (8015768 <tcp_output_fill_options+0x70>)
 801571a:	f240 7256 	movw	r2, #1878	; 0x756
 801571e:	4913      	ldr	r1, [pc, #76]	; (801576c <tcp_output_fill_options+0x74>)
 8015720:	4813      	ldr	r0, [pc, #76]	; (8015770 <tcp_output_fill_options+0x78>)
 8015722:	f003 fb17 	bl	8018d54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801572c:	69bb      	ldr	r3, [r7, #24]
 801572e:	3314      	adds	r3, #20
 8015730:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015732:	69bb      	ldr	r3, [r7, #24]
 8015734:	f103 0214 	add.w	r2, r3, #20
 8015738:	8bfb      	ldrh	r3, [r7, #30]
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	4619      	mov	r1, r3
 801573e:	79fb      	ldrb	r3, [r7, #7]
 8015740:	009b      	lsls	r3, r3, #2
 8015742:	f003 0304 	and.w	r3, r3, #4
 8015746:	440b      	add	r3, r1
 8015748:	4413      	add	r3, r2
 801574a:	697a      	ldr	r2, [r7, #20]
 801574c:	429a      	cmp	r2, r3
 801574e:	d006      	beq.n	801575e <tcp_output_fill_options+0x66>
 8015750:	4b05      	ldr	r3, [pc, #20]	; (8015768 <tcp_output_fill_options+0x70>)
 8015752:	f240 7275 	movw	r2, #1909	; 0x775
 8015756:	4907      	ldr	r1, [pc, #28]	; (8015774 <tcp_output_fill_options+0x7c>)
 8015758:	4805      	ldr	r0, [pc, #20]	; (8015770 <tcp_output_fill_options+0x78>)
 801575a:	f003 fafb 	bl	8018d54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801575e:	bf00      	nop
 8015760:	3720      	adds	r7, #32
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}
 8015766:	bf00      	nop
 8015768:	0801ba64 	.word	0x0801ba64
 801576c:	0801c194 	.word	0x0801c194
 8015770:	0801bab8 	.word	0x0801bab8
 8015774:	0801c08c 	.word	0x0801c08c

08015778 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b08a      	sub	sp, #40	; 0x28
 801577c:	af04      	add	r7, sp, #16
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
 8015784:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d106      	bne.n	801579a <tcp_output_control_segment+0x22>
 801578c:	4b1c      	ldr	r3, [pc, #112]	; (8015800 <tcp_output_control_segment+0x88>)
 801578e:	f240 7287 	movw	r2, #1927	; 0x787
 8015792:	491c      	ldr	r1, [pc, #112]	; (8015804 <tcp_output_control_segment+0x8c>)
 8015794:	481c      	ldr	r0, [pc, #112]	; (8015808 <tcp_output_control_segment+0x90>)
 8015796:	f003 fadd 	bl	8018d54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801579a:	683a      	ldr	r2, [r7, #0]
 801579c:	6879      	ldr	r1, [r7, #4]
 801579e:	68f8      	ldr	r0, [r7, #12]
 80157a0:	f7fe ff40 	bl	8014624 <tcp_route>
 80157a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80157a6:	693b      	ldr	r3, [r7, #16]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d102      	bne.n	80157b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80157ac:	23fc      	movs	r3, #252	; 0xfc
 80157ae:	75fb      	strb	r3, [r7, #23]
 80157b0:	e01c      	b.n	80157ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d006      	beq.n	80157c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	7adb      	ldrb	r3, [r3, #11]
 80157bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	7a9b      	ldrb	r3, [r3, #10]
 80157c2:	757b      	strb	r3, [r7, #21]
 80157c4:	e003      	b.n	80157ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80157c6:	23ff      	movs	r3, #255	; 0xff
 80157c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80157ca:	2300      	movs	r3, #0
 80157cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80157ce:	7dba      	ldrb	r2, [r7, #22]
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	9302      	str	r3, [sp, #8]
 80157d4:	2306      	movs	r3, #6
 80157d6:	9301      	str	r3, [sp, #4]
 80157d8:	7d7b      	ldrb	r3, [r7, #21]
 80157da:	9300      	str	r3, [sp, #0]
 80157dc:	4613      	mov	r3, r2
 80157de:	683a      	ldr	r2, [r7, #0]
 80157e0:	6879      	ldr	r1, [r7, #4]
 80157e2:	68b8      	ldr	r0, [r7, #8]
 80157e4:	f001 ffa0 	bl	8017728 <ip4_output_if>
 80157e8:	4603      	mov	r3, r0
 80157ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80157ec:	68b8      	ldr	r0, [r7, #8]
 80157ee:	f7fa fdd9 	bl	80103a4 <pbuf_free>
  return err;
 80157f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	3718      	adds	r7, #24
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}
 80157fe:	bf00      	nop
 8015800:	0801ba64 	.word	0x0801ba64
 8015804:	0801c1bc 	.word	0x0801c1bc
 8015808:	0801bab8 	.word	0x0801bab8

0801580c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801580c:	b590      	push	{r4, r7, lr}
 801580e:	b08b      	sub	sp, #44	; 0x2c
 8015810:	af04      	add	r7, sp, #16
 8015812:	60f8      	str	r0, [r7, #12]
 8015814:	60b9      	str	r1, [r7, #8]
 8015816:	607a      	str	r2, [r7, #4]
 8015818:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d106      	bne.n	801582e <tcp_rst+0x22>
 8015820:	4b1f      	ldr	r3, [pc, #124]	; (80158a0 <tcp_rst+0x94>)
 8015822:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015826:	491f      	ldr	r1, [pc, #124]	; (80158a4 <tcp_rst+0x98>)
 8015828:	481f      	ldr	r0, [pc, #124]	; (80158a8 <tcp_rst+0x9c>)
 801582a:	f003 fa93 	bl	8018d54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015830:	2b00      	cmp	r3, #0
 8015832:	d106      	bne.n	8015842 <tcp_rst+0x36>
 8015834:	4b1a      	ldr	r3, [pc, #104]	; (80158a0 <tcp_rst+0x94>)
 8015836:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801583a:	491c      	ldr	r1, [pc, #112]	; (80158ac <tcp_rst+0xa0>)
 801583c:	481a      	ldr	r0, [pc, #104]	; (80158a8 <tcp_rst+0x9c>)
 801583e:	f003 fa89 	bl	8018d54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015842:	2300      	movs	r3, #0
 8015844:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015846:	f246 0308 	movw	r3, #24584	; 0x6008
 801584a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801584c:	7dfb      	ldrb	r3, [r7, #23]
 801584e:	b29c      	uxth	r4, r3
 8015850:	68b8      	ldr	r0, [r7, #8]
 8015852:	f7f9 f9ca 	bl	800ebea <lwip_htonl>
 8015856:	4602      	mov	r2, r0
 8015858:	8abb      	ldrh	r3, [r7, #20]
 801585a:	9303      	str	r3, [sp, #12]
 801585c:	2314      	movs	r3, #20
 801585e:	9302      	str	r3, [sp, #8]
 8015860:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015862:	9301      	str	r3, [sp, #4]
 8015864:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015866:	9300      	str	r3, [sp, #0]
 8015868:	4613      	mov	r3, r2
 801586a:	2200      	movs	r2, #0
 801586c:	4621      	mov	r1, r4
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7ff fe92 	bl	8015598 <tcp_output_alloc_header_common>
 8015874:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d00c      	beq.n	8015896 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801587c:	7dfb      	ldrb	r3, [r7, #23]
 801587e:	2200      	movs	r2, #0
 8015880:	6939      	ldr	r1, [r7, #16]
 8015882:	68f8      	ldr	r0, [r7, #12]
 8015884:	f7ff ff38 	bl	80156f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588a:	683a      	ldr	r2, [r7, #0]
 801588c:	6939      	ldr	r1, [r7, #16]
 801588e:	68f8      	ldr	r0, [r7, #12]
 8015890:	f7ff ff72 	bl	8015778 <tcp_output_control_segment>
 8015894:	e000      	b.n	8015898 <tcp_rst+0x8c>
    return;
 8015896:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015898:	371c      	adds	r7, #28
 801589a:	46bd      	mov	sp, r7
 801589c:	bd90      	pop	{r4, r7, pc}
 801589e:	bf00      	nop
 80158a0:	0801ba64 	.word	0x0801ba64
 80158a4:	0801c1e8 	.word	0x0801c1e8
 80158a8:	0801bab8 	.word	0x0801bab8
 80158ac:	0801c204 	.word	0x0801c204

080158b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80158b0:	b590      	push	{r4, r7, lr}
 80158b2:	b087      	sub	sp, #28
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80158b8:	2300      	movs	r3, #0
 80158ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80158bc:	2300      	movs	r3, #0
 80158be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d106      	bne.n	80158d4 <tcp_send_empty_ack+0x24>
 80158c6:	4b28      	ldr	r3, [pc, #160]	; (8015968 <tcp_send_empty_ack+0xb8>)
 80158c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80158cc:	4927      	ldr	r1, [pc, #156]	; (801596c <tcp_send_empty_ack+0xbc>)
 80158ce:	4828      	ldr	r0, [pc, #160]	; (8015970 <tcp_send_empty_ack+0xc0>)
 80158d0:	f003 fa40 	bl	8018d54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80158d4:	7dfb      	ldrb	r3, [r7, #23]
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	f003 0304 	and.w	r3, r3, #4
 80158de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80158e0:	7d7b      	ldrb	r3, [r7, #21]
 80158e2:	b29c      	uxth	r4, r3
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158e8:	4618      	mov	r0, r3
 80158ea:	f7f9 f97e 	bl	800ebea <lwip_htonl>
 80158ee:	4603      	mov	r3, r0
 80158f0:	2200      	movs	r2, #0
 80158f2:	4621      	mov	r1, r4
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f7ff fec1 	bl	801567c <tcp_output_alloc_header>
 80158fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d109      	bne.n	8015916 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	8b5b      	ldrh	r3, [r3, #26]
 8015906:	f043 0303 	orr.w	r3, r3, #3
 801590a:	b29a      	uxth	r2, r3
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015910:	f06f 0301 	mvn.w	r3, #1
 8015914:	e023      	b.n	801595e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015916:	7dbb      	ldrb	r3, [r7, #22]
 8015918:	7dfa      	ldrb	r2, [r7, #23]
 801591a:	6939      	ldr	r1, [r7, #16]
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f7ff feeb 	bl	80156f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015922:	687a      	ldr	r2, [r7, #4]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	3304      	adds	r3, #4
 8015928:	6939      	ldr	r1, [r7, #16]
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f7ff ff24 	bl	8015778 <tcp_output_control_segment>
 8015930:	4603      	mov	r3, r0
 8015932:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d007      	beq.n	801594c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	8b5b      	ldrh	r3, [r3, #26]
 8015940:	f043 0303 	orr.w	r3, r3, #3
 8015944:	b29a      	uxth	r2, r3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	835a      	strh	r2, [r3, #26]
 801594a:	e006      	b.n	801595a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	8b5b      	ldrh	r3, [r3, #26]
 8015950:	f023 0303 	bic.w	r3, r3, #3
 8015954:	b29a      	uxth	r2, r3
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801595a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801595e:	4618      	mov	r0, r3
 8015960:	371c      	adds	r7, #28
 8015962:	46bd      	mov	sp, r7
 8015964:	bd90      	pop	{r4, r7, pc}
 8015966:	bf00      	nop
 8015968:	0801ba64 	.word	0x0801ba64
 801596c:	0801c220 	.word	0x0801c220
 8015970:	0801bab8 	.word	0x0801bab8

08015974 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015974:	b590      	push	{r4, r7, lr}
 8015976:	b087      	sub	sp, #28
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801597c:	2300      	movs	r3, #0
 801597e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d106      	bne.n	8015994 <tcp_keepalive+0x20>
 8015986:	4b18      	ldr	r3, [pc, #96]	; (80159e8 <tcp_keepalive+0x74>)
 8015988:	f640 0224 	movw	r2, #2084	; 0x824
 801598c:	4917      	ldr	r1, [pc, #92]	; (80159ec <tcp_keepalive+0x78>)
 801598e:	4818      	ldr	r0, [pc, #96]	; (80159f0 <tcp_keepalive+0x7c>)
 8015990:	f003 f9e0 	bl	8018d54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015994:	7dfb      	ldrb	r3, [r7, #23]
 8015996:	b29c      	uxth	r4, r3
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801599c:	3b01      	subs	r3, #1
 801599e:	4618      	mov	r0, r3
 80159a0:	f7f9 f923 	bl	800ebea <lwip_htonl>
 80159a4:	4603      	mov	r3, r0
 80159a6:	2200      	movs	r2, #0
 80159a8:	4621      	mov	r1, r4
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f7ff fe66 	bl	801567c <tcp_output_alloc_header>
 80159b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d102      	bne.n	80159be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80159b8:	f04f 33ff 	mov.w	r3, #4294967295
 80159bc:	e010      	b.n	80159e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80159be:	7dfb      	ldrb	r3, [r7, #23]
 80159c0:	2200      	movs	r2, #0
 80159c2:	6939      	ldr	r1, [r7, #16]
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f7ff fe97 	bl	80156f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	3304      	adds	r3, #4
 80159d0:	6939      	ldr	r1, [r7, #16]
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f7ff fed0 	bl	8015778 <tcp_output_control_segment>
 80159d8:	4603      	mov	r3, r0
 80159da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80159dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	371c      	adds	r7, #28
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd90      	pop	{r4, r7, pc}
 80159e8:	0801ba64 	.word	0x0801ba64
 80159ec:	0801c240 	.word	0x0801c240
 80159f0:	0801bab8 	.word	0x0801bab8

080159f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80159f4:	b590      	push	{r4, r7, lr}
 80159f6:	b08b      	sub	sp, #44	; 0x2c
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80159fc:	2300      	movs	r3, #0
 80159fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d106      	bne.n	8015a16 <tcp_zero_window_probe+0x22>
 8015a08:	4b4c      	ldr	r3, [pc, #304]	; (8015b3c <tcp_zero_window_probe+0x148>)
 8015a0a:	f640 024f 	movw	r2, #2127	; 0x84f
 8015a0e:	494c      	ldr	r1, [pc, #304]	; (8015b40 <tcp_zero_window_probe+0x14c>)
 8015a10:	484c      	ldr	r0, [pc, #304]	; (8015b44 <tcp_zero_window_probe+0x150>)
 8015a12:	f003 f99f 	bl	8018d54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a1a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015a1c:	6a3b      	ldr	r3, [r7, #32]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015a22:	2300      	movs	r3, #0
 8015a24:	e086      	b.n	8015b34 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015a2c:	2bff      	cmp	r3, #255	; 0xff
 8015a2e:	d007      	beq.n	8015a40 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015a36:	3301      	adds	r3, #1
 8015a38:	b2da      	uxtb	r2, r3
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015a40:	6a3b      	ldr	r3, [r7, #32]
 8015a42:	68db      	ldr	r3, [r3, #12]
 8015a44:	899b      	ldrh	r3, [r3, #12]
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7f9 f8b9 	bl	800ebc0 <lwip_htons>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	b2db      	uxtb	r3, r3
 8015a52:	f003 0301 	and.w	r3, r3, #1
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d005      	beq.n	8015a66 <tcp_zero_window_probe+0x72>
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	891b      	ldrh	r3, [r3, #8]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d101      	bne.n	8015a66 <tcp_zero_window_probe+0x72>
 8015a62:	2301      	movs	r3, #1
 8015a64:	e000      	b.n	8015a68 <tcp_zero_window_probe+0x74>
 8015a66:	2300      	movs	r3, #0
 8015a68:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015a6a:	7ffb      	ldrb	r3, [r7, #31]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	bf0c      	ite	eq
 8015a70:	2301      	moveq	r3, #1
 8015a72:	2300      	movne	r3, #0
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a7c:	b299      	uxth	r1, r3
 8015a7e:	6a3b      	ldr	r3, [r7, #32]
 8015a80:	68db      	ldr	r3, [r3, #12]
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	8bba      	ldrh	r2, [r7, #28]
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f7ff fdf8 	bl	801567c <tcp_output_alloc_header>
 8015a8c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d102      	bne.n	8015a9a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015a94:	f04f 33ff 	mov.w	r3, #4294967295
 8015a98:	e04c      	b.n	8015b34 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015a9a:	69bb      	ldr	r3, [r7, #24]
 8015a9c:	685b      	ldr	r3, [r3, #4]
 8015a9e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015aa0:	7ffb      	ldrb	r3, [r7, #31]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d011      	beq.n	8015aca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	899b      	ldrh	r3, [r3, #12]
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	b21b      	sxth	r3, r3
 8015aae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015ab2:	b21c      	sxth	r4, r3
 8015ab4:	2011      	movs	r0, #17
 8015ab6:	f7f9 f883 	bl	800ebc0 <lwip_htons>
 8015aba:	4603      	mov	r3, r0
 8015abc:	b21b      	sxth	r3, r3
 8015abe:	4323      	orrs	r3, r4
 8015ac0:	b21b      	sxth	r3, r3
 8015ac2:	b29a      	uxth	r2, r3
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	819a      	strh	r2, [r3, #12]
 8015ac8:	e010      	b.n	8015aec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015aca:	69bb      	ldr	r3, [r7, #24]
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	3314      	adds	r3, #20
 8015ad0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015ad2:	6a3b      	ldr	r3, [r7, #32]
 8015ad4:	6858      	ldr	r0, [r3, #4]
 8015ad6:	6a3b      	ldr	r3, [r7, #32]
 8015ad8:	685b      	ldr	r3, [r3, #4]
 8015ada:	891a      	ldrh	r2, [r3, #8]
 8015adc:	6a3b      	ldr	r3, [r7, #32]
 8015ade:	891b      	ldrh	r3, [r3, #8]
 8015ae0:	1ad3      	subs	r3, r2, r3
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	2201      	movs	r2, #1
 8015ae6:	6939      	ldr	r1, [r7, #16]
 8015ae8:	f7fa fe52 	bl	8010790 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015aec:	6a3b      	ldr	r3, [r7, #32]
 8015aee:	68db      	ldr	r3, [r3, #12]
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7f9 f879 	bl	800ebea <lwip_htonl>
 8015af8:	4603      	mov	r3, r0
 8015afa:	3301      	adds	r3, #1
 8015afc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	1ad3      	subs	r3, r2, r3
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	da02      	bge.n	8015b10 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	68fa      	ldr	r2, [r7, #12]
 8015b0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b14:	2200      	movs	r2, #0
 8015b16:	69b9      	ldr	r1, [r7, #24]
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f7ff fded 	bl	80156f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015b1e:	687a      	ldr	r2, [r7, #4]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	3304      	adds	r3, #4
 8015b24:	69b9      	ldr	r1, [r7, #24]
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f7ff fe26 	bl	8015778 <tcp_output_control_segment>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015b30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	372c      	adds	r7, #44	; 0x2c
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd90      	pop	{r4, r7, pc}
 8015b3c:	0801ba64 	.word	0x0801ba64
 8015b40:	0801c25c 	.word	0x0801c25c
 8015b44:	0801bab8 	.word	0x0801bab8

08015b48 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015b50:	f7fa ff0c 	bl	801096c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015b54:	4b0a      	ldr	r3, [pc, #40]	; (8015b80 <tcpip_tcp_timer+0x38>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d103      	bne.n	8015b64 <tcpip_tcp_timer+0x1c>
 8015b5c:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <tcpip_tcp_timer+0x3c>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d005      	beq.n	8015b70 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015b64:	2200      	movs	r2, #0
 8015b66:	4908      	ldr	r1, [pc, #32]	; (8015b88 <tcpip_tcp_timer+0x40>)
 8015b68:	20fa      	movs	r0, #250	; 0xfa
 8015b6a:	f000 f8f3 	bl	8015d54 <sys_timeout>
 8015b6e:	e003      	b.n	8015b78 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015b70:	4b06      	ldr	r3, [pc, #24]	; (8015b8c <tcpip_tcp_timer+0x44>)
 8015b72:	2200      	movs	r2, #0
 8015b74:	601a      	str	r2, [r3, #0]
  }
}
 8015b76:	bf00      	nop
 8015b78:	bf00      	nop
 8015b7a:	3708      	adds	r7, #8
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	2000d994 	.word	0x2000d994
 8015b84:	2000d998 	.word	0x2000d998
 8015b88:	08015b49 	.word	0x08015b49
 8015b8c:	2000d9e0 	.word	0x2000d9e0

08015b90 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015b94:	4b0a      	ldr	r3, [pc, #40]	; (8015bc0 <tcp_timer_needed+0x30>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d10f      	bne.n	8015bbc <tcp_timer_needed+0x2c>
 8015b9c:	4b09      	ldr	r3, [pc, #36]	; (8015bc4 <tcp_timer_needed+0x34>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d103      	bne.n	8015bac <tcp_timer_needed+0x1c>
 8015ba4:	4b08      	ldr	r3, [pc, #32]	; (8015bc8 <tcp_timer_needed+0x38>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d007      	beq.n	8015bbc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015bac:	4b04      	ldr	r3, [pc, #16]	; (8015bc0 <tcp_timer_needed+0x30>)
 8015bae:	2201      	movs	r2, #1
 8015bb0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	4905      	ldr	r1, [pc, #20]	; (8015bcc <tcp_timer_needed+0x3c>)
 8015bb6:	20fa      	movs	r0, #250	; 0xfa
 8015bb8:	f000 f8cc 	bl	8015d54 <sys_timeout>
  }
}
 8015bbc:	bf00      	nop
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	2000d9e0 	.word	0x2000d9e0
 8015bc4:	2000d994 	.word	0x2000d994
 8015bc8:	2000d998 	.word	0x2000d998
 8015bcc:	08015b49 	.word	0x08015b49

08015bd0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b086      	sub	sp, #24
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	60f8      	str	r0, [r7, #12]
 8015bd8:	60b9      	str	r1, [r7, #8]
 8015bda:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015bdc:	200a      	movs	r0, #10
 8015bde:	f7f9 fcc7 	bl	800f570 <memp_malloc>
 8015be2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d109      	bne.n	8015bfe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d151      	bne.n	8015c94 <sys_timeout_abs+0xc4>
 8015bf0:	4b2a      	ldr	r3, [pc, #168]	; (8015c9c <sys_timeout_abs+0xcc>)
 8015bf2:	22be      	movs	r2, #190	; 0xbe
 8015bf4:	492a      	ldr	r1, [pc, #168]	; (8015ca0 <sys_timeout_abs+0xd0>)
 8015bf6:	482b      	ldr	r0, [pc, #172]	; (8015ca4 <sys_timeout_abs+0xd4>)
 8015bf8:	f003 f8ac 	bl	8018d54 <iprintf>
    return;
 8015bfc:	e04a      	b.n	8015c94 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	2200      	movs	r2, #0
 8015c02:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	68ba      	ldr	r2, [r7, #8]
 8015c08:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015c16:	4b24      	ldr	r3, [pc, #144]	; (8015ca8 <sys_timeout_abs+0xd8>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d103      	bne.n	8015c26 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015c1e:	4a22      	ldr	r2, [pc, #136]	; (8015ca8 <sys_timeout_abs+0xd8>)
 8015c20:	693b      	ldr	r3, [r7, #16]
 8015c22:	6013      	str	r3, [r2, #0]
    return;
 8015c24:	e037      	b.n	8015c96 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	685a      	ldr	r2, [r3, #4]
 8015c2a:	4b1f      	ldr	r3, [pc, #124]	; (8015ca8 <sys_timeout_abs+0xd8>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	1ad3      	subs	r3, r2, r3
 8015c32:	0fdb      	lsrs	r3, r3, #31
 8015c34:	f003 0301 	and.w	r3, r3, #1
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d007      	beq.n	8015c4e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015c3e:	4b1a      	ldr	r3, [pc, #104]	; (8015ca8 <sys_timeout_abs+0xd8>)
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015c46:	4a18      	ldr	r2, [pc, #96]	; (8015ca8 <sys_timeout_abs+0xd8>)
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	6013      	str	r3, [r2, #0]
 8015c4c:	e023      	b.n	8015c96 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015c4e:	4b16      	ldr	r3, [pc, #88]	; (8015ca8 <sys_timeout_abs+0xd8>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	617b      	str	r3, [r7, #20]
 8015c54:	e01a      	b.n	8015c8c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d00b      	beq.n	8015c76 <sys_timeout_abs+0xa6>
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	685a      	ldr	r2, [r3, #4]
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	0fdb      	lsrs	r3, r3, #31
 8015c6c:	f003 0301 	and.w	r3, r3, #1
 8015c70:	b2db      	uxtb	r3, r3
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d007      	beq.n	8015c86 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015c76:	697b      	ldr	r3, [r7, #20]
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	693a      	ldr	r2, [r7, #16]
 8015c82:	601a      	str	r2, [r3, #0]
        break;
 8015c84:	e007      	b.n	8015c96 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	617b      	str	r3, [r7, #20]
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d1e1      	bne.n	8015c56 <sys_timeout_abs+0x86>
 8015c92:	e000      	b.n	8015c96 <sys_timeout_abs+0xc6>
    return;
 8015c94:	bf00      	nop
      }
    }
  }
}
 8015c96:	3718      	adds	r7, #24
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}
 8015c9c:	0801c280 	.word	0x0801c280
 8015ca0:	0801c2b4 	.word	0x0801c2b4
 8015ca4:	0801c2f4 	.word	0x0801c2f4
 8015ca8:	2000d9d8 	.word	0x2000d9d8

08015cac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b086      	sub	sp, #24
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	685b      	ldr	r3, [r3, #4]
 8015cbc:	4798      	blx	r3

  now = sys_now();
 8015cbe:	f7f4 fd79 	bl	800a7b4 <sys_now>
 8015cc2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	681a      	ldr	r2, [r3, #0]
 8015cc8:	4b0f      	ldr	r3, [pc, #60]	; (8015d08 <lwip_cyclic_timer+0x5c>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	4413      	add	r3, r2
 8015cce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015cd0:	68fa      	ldr	r2, [r7, #12]
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	1ad3      	subs	r3, r2, r3
 8015cd6:	0fdb      	lsrs	r3, r3, #31
 8015cd8:	f003 0301 	and.w	r3, r3, #1
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d009      	beq.n	8015cf6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	681a      	ldr	r2, [r3, #0]
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	4413      	add	r3, r2
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	4907      	ldr	r1, [pc, #28]	; (8015d0c <lwip_cyclic_timer+0x60>)
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f7ff ff6e 	bl	8015bd0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015cf4:	e004      	b.n	8015d00 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	4904      	ldr	r1, [pc, #16]	; (8015d0c <lwip_cyclic_timer+0x60>)
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f7ff ff68 	bl	8015bd0 <sys_timeout_abs>
}
 8015d00:	bf00      	nop
 8015d02:	3718      	adds	r7, #24
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}
 8015d08:	2000d9dc 	.word	0x2000d9dc
 8015d0c:	08015cad 	.word	0x08015cad

08015d10 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b082      	sub	sp, #8
 8015d14:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015d16:	2301      	movs	r3, #1
 8015d18:	607b      	str	r3, [r7, #4]
 8015d1a:	e00e      	b.n	8015d3a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015d1c:	4a0b      	ldr	r2, [pc, #44]	; (8015d4c <sys_timeouts_init+0x3c>)
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	4a08      	ldr	r2, [pc, #32]	; (8015d4c <sys_timeouts_init+0x3c>)
 8015d2a:	4413      	add	r3, r2
 8015d2c:	461a      	mov	r2, r3
 8015d2e:	4908      	ldr	r1, [pc, #32]	; (8015d50 <sys_timeouts_init+0x40>)
 8015d30:	f000 f810 	bl	8015d54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	3301      	adds	r3, #1
 8015d38:	607b      	str	r3, [r7, #4]
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2b02      	cmp	r3, #2
 8015d3e:	d9ed      	bls.n	8015d1c <sys_timeouts_init+0xc>
  }
}
 8015d40:	bf00      	nop
 8015d42:	bf00      	nop
 8015d44:	3708      	adds	r7, #8
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	0801cf4c 	.word	0x0801cf4c
 8015d50:	08015cad 	.word	0x08015cad

08015d54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b086      	sub	sp, #24
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	60f8      	str	r0, [r7, #12]
 8015d5c:	60b9      	str	r1, [r7, #8]
 8015d5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d66:	d306      	bcc.n	8015d76 <sys_timeout+0x22>
 8015d68:	4b0a      	ldr	r3, [pc, #40]	; (8015d94 <sys_timeout+0x40>)
 8015d6a:	f240 1229 	movw	r2, #297	; 0x129
 8015d6e:	490a      	ldr	r1, [pc, #40]	; (8015d98 <sys_timeout+0x44>)
 8015d70:	480a      	ldr	r0, [pc, #40]	; (8015d9c <sys_timeout+0x48>)
 8015d72:	f002 ffef 	bl	8018d54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015d76:	f7f4 fd1d 	bl	800a7b4 <sys_now>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	4413      	add	r3, r2
 8015d80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015d82:	687a      	ldr	r2, [r7, #4]
 8015d84:	68b9      	ldr	r1, [r7, #8]
 8015d86:	6978      	ldr	r0, [r7, #20]
 8015d88:	f7ff ff22 	bl	8015bd0 <sys_timeout_abs>
#endif
}
 8015d8c:	bf00      	nop
 8015d8e:	3718      	adds	r7, #24
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	0801c280 	.word	0x0801c280
 8015d98:	0801c31c 	.word	0x0801c31c
 8015d9c:	0801c2f4 	.word	0x0801c2f4

08015da0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015da6:	f7f4 fd05 	bl	800a7b4 <sys_now>
 8015daa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015dac:	4b17      	ldr	r3, [pc, #92]	; (8015e0c <sys_check_timeouts+0x6c>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d022      	beq.n	8015dfe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	685b      	ldr	r3, [r3, #4]
 8015dbc:	68fa      	ldr	r2, [r7, #12]
 8015dbe:	1ad3      	subs	r3, r2, r3
 8015dc0:	0fdb      	lsrs	r3, r3, #31
 8015dc2:	f003 0301 	and.w	r3, r3, #1
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d11a      	bne.n	8015e02 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4a0e      	ldr	r2, [pc, #56]	; (8015e0c <sys_check_timeouts+0x6c>)
 8015dd2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015dd4:	68bb      	ldr	r3, [r7, #8]
 8015dd6:	689b      	ldr	r3, [r3, #8]
 8015dd8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	68db      	ldr	r3, [r3, #12]
 8015dde:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	4a0a      	ldr	r2, [pc, #40]	; (8015e10 <sys_check_timeouts+0x70>)
 8015de6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015de8:	68b9      	ldr	r1, [r7, #8]
 8015dea:	200a      	movs	r0, #10
 8015dec:	f7f9 fc36 	bl	800f65c <memp_free>
    if (handler != NULL) {
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d0da      	beq.n	8015dac <sys_check_timeouts+0xc>
      handler(arg);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6838      	ldr	r0, [r7, #0]
 8015dfa:	4798      	blx	r3
  do {
 8015dfc:	e7d6      	b.n	8015dac <sys_check_timeouts+0xc>
      return;
 8015dfe:	bf00      	nop
 8015e00:	e000      	b.n	8015e04 <sys_check_timeouts+0x64>
      return;
 8015e02:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015e04:	3710      	adds	r7, #16
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
 8015e0a:	bf00      	nop
 8015e0c:	2000d9d8 	.word	0x2000d9d8
 8015e10:	2000d9dc 	.word	0x2000d9dc

08015e14 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015e1a:	4b16      	ldr	r3, [pc, #88]	; (8015e74 <sys_timeouts_sleeptime+0x60>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d102      	bne.n	8015e28 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015e22:	f04f 33ff 	mov.w	r3, #4294967295
 8015e26:	e020      	b.n	8015e6a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015e28:	f7f4 fcc4 	bl	800a7b4 <sys_now>
 8015e2c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015e2e:	4b11      	ldr	r3, [pc, #68]	; (8015e74 <sys_timeouts_sleeptime+0x60>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	685a      	ldr	r2, [r3, #4]
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	1ad3      	subs	r3, r2, r3
 8015e38:	0fdb      	lsrs	r3, r3, #31
 8015e3a:	f003 0301 	and.w	r3, r3, #1
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d001      	beq.n	8015e48 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015e44:	2300      	movs	r3, #0
 8015e46:	e010      	b.n	8015e6a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015e48:	4b0a      	ldr	r3, [pc, #40]	; (8015e74 <sys_timeouts_sleeptime+0x60>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	685a      	ldr	r2, [r3, #4]
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	1ad3      	subs	r3, r2, r3
 8015e52:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	da06      	bge.n	8015e68 <sys_timeouts_sleeptime+0x54>
 8015e5a:	4b07      	ldr	r3, [pc, #28]	; (8015e78 <sys_timeouts_sleeptime+0x64>)
 8015e5c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015e60:	4906      	ldr	r1, [pc, #24]	; (8015e7c <sys_timeouts_sleeptime+0x68>)
 8015e62:	4807      	ldr	r0, [pc, #28]	; (8015e80 <sys_timeouts_sleeptime+0x6c>)
 8015e64:	f002 ff76 	bl	8018d54 <iprintf>
    return ret;
 8015e68:	683b      	ldr	r3, [r7, #0]
  }
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3708      	adds	r7, #8
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	2000d9d8 	.word	0x2000d9d8
 8015e78:	0801c280 	.word	0x0801c280
 8015e7c:	0801c354 	.word	0x0801c354
 8015e80:	0801c2f4 	.word	0x0801c2f4

08015e84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015e88:	f002 fff2 	bl	8018e70 <rand>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	4b01      	ldr	r3, [pc, #4]	; (8015ea4 <udp_init+0x20>)
 8015e9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015ea0:	bf00      	nop
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	20000098 	.word	0x20000098

08015ea8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	4613      	mov	r3, r2
 8015eb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d105      	bne.n	8015ec8 <udp_input_local_match+0x20>
 8015ebc:	4b27      	ldr	r3, [pc, #156]	; (8015f5c <udp_input_local_match+0xb4>)
 8015ebe:	2287      	movs	r2, #135	; 0x87
 8015ec0:	4927      	ldr	r1, [pc, #156]	; (8015f60 <udp_input_local_match+0xb8>)
 8015ec2:	4828      	ldr	r0, [pc, #160]	; (8015f64 <udp_input_local_match+0xbc>)
 8015ec4:	f002 ff46 	bl	8018d54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015ec8:	68bb      	ldr	r3, [r7, #8]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d105      	bne.n	8015eda <udp_input_local_match+0x32>
 8015ece:	4b23      	ldr	r3, [pc, #140]	; (8015f5c <udp_input_local_match+0xb4>)
 8015ed0:	2288      	movs	r2, #136	; 0x88
 8015ed2:	4925      	ldr	r1, [pc, #148]	; (8015f68 <udp_input_local_match+0xc0>)
 8015ed4:	4823      	ldr	r0, [pc, #140]	; (8015f64 <udp_input_local_match+0xbc>)
 8015ed6:	f002 ff3d 	bl	8018d54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	7a1b      	ldrb	r3, [r3, #8]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d00b      	beq.n	8015efa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	7a1a      	ldrb	r2, [r3, #8]
 8015ee6:	4b21      	ldr	r3, [pc, #132]	; (8015f6c <udp_input_local_match+0xc4>)
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015eee:	3301      	adds	r3, #1
 8015ef0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d001      	beq.n	8015efa <udp_input_local_match+0x52>
    return 0;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	e02b      	b.n	8015f52 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015efa:	79fb      	ldrb	r3, [r7, #7]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d018      	beq.n	8015f32 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d013      	beq.n	8015f2e <udp_input_local_match+0x86>
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d00f      	beq.n	8015f2e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015f0e:	4b17      	ldr	r3, [pc, #92]	; (8015f6c <udp_input_local_match+0xc4>)
 8015f10:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f16:	d00a      	beq.n	8015f2e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681a      	ldr	r2, [r3, #0]
 8015f1c:	4b13      	ldr	r3, [pc, #76]	; (8015f6c <udp_input_local_match+0xc4>)
 8015f1e:	695b      	ldr	r3, [r3, #20]
 8015f20:	405a      	eors	r2, r3
 8015f22:	68bb      	ldr	r3, [r7, #8]
 8015f24:	3308      	adds	r3, #8
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d110      	bne.n	8015f50 <udp_input_local_match+0xa8>
          return 1;
 8015f2e:	2301      	movs	r3, #1
 8015f30:	e00f      	b.n	8015f52 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d009      	beq.n	8015f4c <udp_input_local_match+0xa4>
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d005      	beq.n	8015f4c <udp_input_local_match+0xa4>
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	681a      	ldr	r2, [r3, #0]
 8015f44:	4b09      	ldr	r3, [pc, #36]	; (8015f6c <udp_input_local_match+0xc4>)
 8015f46:	695b      	ldr	r3, [r3, #20]
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d101      	bne.n	8015f50 <udp_input_local_match+0xa8>
        return 1;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	e000      	b.n	8015f52 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015f50:	2300      	movs	r3, #0
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3710      	adds	r7, #16
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	0801c368 	.word	0x0801c368
 8015f60:	0801c398 	.word	0x0801c398
 8015f64:	0801c3bc 	.word	0x0801c3bc
 8015f68:	0801c3e4 	.word	0x0801c3e4
 8015f6c:	2000a234 	.word	0x2000a234

08015f70 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015f70:	b590      	push	{r4, r7, lr}
 8015f72:	b08d      	sub	sp, #52	; 0x34
 8015f74:	af02      	add	r7, sp, #8
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d105      	bne.n	8015f90 <udp_input+0x20>
 8015f84:	4b7c      	ldr	r3, [pc, #496]	; (8016178 <udp_input+0x208>)
 8015f86:	22cf      	movs	r2, #207	; 0xcf
 8015f88:	497c      	ldr	r1, [pc, #496]	; (801617c <udp_input+0x20c>)
 8015f8a:	487d      	ldr	r0, [pc, #500]	; (8016180 <udp_input+0x210>)
 8015f8c:	f002 fee2 	bl	8018d54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d105      	bne.n	8015fa2 <udp_input+0x32>
 8015f96:	4b78      	ldr	r3, [pc, #480]	; (8016178 <udp_input+0x208>)
 8015f98:	22d0      	movs	r2, #208	; 0xd0
 8015f9a:	497a      	ldr	r1, [pc, #488]	; (8016184 <udp_input+0x214>)
 8015f9c:	4878      	ldr	r0, [pc, #480]	; (8016180 <udp_input+0x210>)
 8015f9e:	f002 fed9 	bl	8018d54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	895b      	ldrh	r3, [r3, #10]
 8015fa6:	2b07      	cmp	r3, #7
 8015fa8:	d803      	bhi.n	8015fb2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7fa f9fa 	bl	80103a4 <pbuf_free>
    goto end;
 8015fb0:	e0de      	b.n	8016170 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	685b      	ldr	r3, [r3, #4]
 8015fb6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015fb8:	4b73      	ldr	r3, [pc, #460]	; (8016188 <udp_input+0x218>)
 8015fba:	695b      	ldr	r3, [r3, #20]
 8015fbc:	4a72      	ldr	r2, [pc, #456]	; (8016188 <udp_input+0x218>)
 8015fbe:	6812      	ldr	r2, [r2, #0]
 8015fc0:	4611      	mov	r1, r2
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f001 fc88 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	881b      	ldrh	r3, [r3, #0]
 8015fd0:	b29b      	uxth	r3, r3
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7f8 fdf4 	bl	800ebc0 <lwip_htons>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	885b      	ldrh	r3, [r3, #2]
 8015fe0:	b29b      	uxth	r3, r3
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7f8 fdec 	bl	800ebc0 <lwip_htons>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015fec:	2300      	movs	r3, #0
 8015fee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ff8:	4b64      	ldr	r3, [pc, #400]	; (801618c <udp_input+0x21c>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8015ffe:	e054      	b.n	80160aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016002:	8a5b      	ldrh	r3, [r3, #18]
 8016004:	89fa      	ldrh	r2, [r7, #14]
 8016006:	429a      	cmp	r2, r3
 8016008:	d14a      	bne.n	80160a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801600a:	7cfb      	ldrb	r3, [r7, #19]
 801600c:	461a      	mov	r2, r3
 801600e:	6839      	ldr	r1, [r7, #0]
 8016010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016012:	f7ff ff49 	bl	8015ea8 <udp_input_local_match>
 8016016:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016018:	2b00      	cmp	r3, #0
 801601a:	d041      	beq.n	80160a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601e:	7c1b      	ldrb	r3, [r3, #16]
 8016020:	f003 0304 	and.w	r3, r3, #4
 8016024:	2b00      	cmp	r3, #0
 8016026:	d11d      	bne.n	8016064 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016028:	69fb      	ldr	r3, [r7, #28]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d102      	bne.n	8016034 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016030:	61fb      	str	r3, [r7, #28]
 8016032:	e017      	b.n	8016064 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016034:	7cfb      	ldrb	r3, [r7, #19]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d014      	beq.n	8016064 <udp_input+0xf4>
 801603a:	4b53      	ldr	r3, [pc, #332]	; (8016188 <udp_input+0x218>)
 801603c:	695b      	ldr	r3, [r3, #20]
 801603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016042:	d10f      	bne.n	8016064 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016044:	69fb      	ldr	r3, [r7, #28]
 8016046:	681a      	ldr	r2, [r3, #0]
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	3304      	adds	r3, #4
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	429a      	cmp	r2, r3
 8016050:	d008      	beq.n	8016064 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016054:	681a      	ldr	r2, [r3, #0]
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	3304      	adds	r3, #4
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	429a      	cmp	r2, r3
 801605e:	d101      	bne.n	8016064 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016062:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016066:	8a9b      	ldrh	r3, [r3, #20]
 8016068:	8a3a      	ldrh	r2, [r7, #16]
 801606a:	429a      	cmp	r2, r3
 801606c:	d118      	bne.n	80160a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016070:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016072:	2b00      	cmp	r3, #0
 8016074:	d005      	beq.n	8016082 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016078:	685a      	ldr	r2, [r3, #4]
 801607a:	4b43      	ldr	r3, [pc, #268]	; (8016188 <udp_input+0x218>)
 801607c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801607e:	429a      	cmp	r2, r3
 8016080:	d10e      	bne.n	80160a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016082:	6a3b      	ldr	r3, [r7, #32]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d014      	beq.n	80160b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801608a:	68da      	ldr	r2, [r3, #12]
 801608c:	6a3b      	ldr	r3, [r7, #32]
 801608e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016090:	4b3e      	ldr	r3, [pc, #248]	; (801618c <udp_input+0x21c>)
 8016092:	681a      	ldr	r2, [r3, #0]
 8016094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016096:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016098:	4a3c      	ldr	r2, [pc, #240]	; (801618c <udp_input+0x21c>)
 801609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801609e:	e008      	b.n	80160b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80160a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a6:	68db      	ldr	r3, [r3, #12]
 80160a8:	627b      	str	r3, [r7, #36]	; 0x24
 80160aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d1a7      	bne.n	8016000 <udp_input+0x90>
 80160b0:	e000      	b.n	80160b4 <udp_input+0x144>
        break;
 80160b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80160b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d101      	bne.n	80160be <udp_input+0x14e>
    pcb = uncon_pcb;
 80160ba:	69fb      	ldr	r3, [r7, #28]
 80160bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80160be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d002      	beq.n	80160ca <udp_input+0x15a>
    for_us = 1;
 80160c4:	2301      	movs	r3, #1
 80160c6:	76fb      	strb	r3, [r7, #27]
 80160c8:	e00a      	b.n	80160e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	3304      	adds	r3, #4
 80160ce:	681a      	ldr	r2, [r3, #0]
 80160d0:	4b2d      	ldr	r3, [pc, #180]	; (8016188 <udp_input+0x218>)
 80160d2:	695b      	ldr	r3, [r3, #20]
 80160d4:	429a      	cmp	r2, r3
 80160d6:	bf0c      	ite	eq
 80160d8:	2301      	moveq	r3, #1
 80160da:	2300      	movne	r3, #0
 80160dc:	b2db      	uxtb	r3, r3
 80160de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80160e0:	7efb      	ldrb	r3, [r7, #27]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d041      	beq.n	801616a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80160e6:	2108      	movs	r1, #8
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7fa f8d5 	bl	8010298 <pbuf_remove_header>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00a      	beq.n	801610a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80160f4:	4b20      	ldr	r3, [pc, #128]	; (8016178 <udp_input+0x208>)
 80160f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80160fa:	4925      	ldr	r1, [pc, #148]	; (8016190 <udp_input+0x220>)
 80160fc:	4820      	ldr	r0, [pc, #128]	; (8016180 <udp_input+0x210>)
 80160fe:	f002 fe29 	bl	8018d54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f7fa f94e 	bl	80103a4 <pbuf_free>
      goto end;
 8016108:	e032      	b.n	8016170 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610c:	2b00      	cmp	r3, #0
 801610e:	d012      	beq.n	8016136 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016112:	699b      	ldr	r3, [r3, #24]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00a      	beq.n	801612e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611a:	699c      	ldr	r4, [r3, #24]
 801611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611e:	69d8      	ldr	r0, [r3, #28]
 8016120:	8a3b      	ldrh	r3, [r7, #16]
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	4b1b      	ldr	r3, [pc, #108]	; (8016194 <udp_input+0x224>)
 8016126:	687a      	ldr	r2, [r7, #4]
 8016128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801612a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801612c:	e021      	b.n	8016172 <udp_input+0x202>
        pbuf_free(p);
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f7fa f938 	bl	80103a4 <pbuf_free>
        goto end;
 8016134:	e01c      	b.n	8016170 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016136:	7cfb      	ldrb	r3, [r7, #19]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d112      	bne.n	8016162 <udp_input+0x1f2>
 801613c:	4b12      	ldr	r3, [pc, #72]	; (8016188 <udp_input+0x218>)
 801613e:	695b      	ldr	r3, [r3, #20]
 8016140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016144:	2be0      	cmp	r3, #224	; 0xe0
 8016146:	d00c      	beq.n	8016162 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016148:	4b0f      	ldr	r3, [pc, #60]	; (8016188 <udp_input+0x218>)
 801614a:	899b      	ldrh	r3, [r3, #12]
 801614c:	3308      	adds	r3, #8
 801614e:	b29b      	uxth	r3, r3
 8016150:	b21b      	sxth	r3, r3
 8016152:	4619      	mov	r1, r3
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f7fa f912 	bl	801037e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801615a:	2103      	movs	r1, #3
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f001 f89b 	bl	8017298 <icmp_dest_unreach>
      pbuf_free(p);
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f7fa f91e 	bl	80103a4 <pbuf_free>
  return;
 8016168:	e003      	b.n	8016172 <udp_input+0x202>
    pbuf_free(p);
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7fa f91a 	bl	80103a4 <pbuf_free>
  return;
 8016170:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016172:	372c      	adds	r7, #44	; 0x2c
 8016174:	46bd      	mov	sp, r7
 8016176:	bd90      	pop	{r4, r7, pc}
 8016178:	0801c368 	.word	0x0801c368
 801617c:	0801c40c 	.word	0x0801c40c
 8016180:	0801c3bc 	.word	0x0801c3bc
 8016184:	0801c424 	.word	0x0801c424
 8016188:	2000a234 	.word	0x2000a234
 801618c:	2000d9e4 	.word	0x2000d9e4
 8016190:	0801c440 	.word	0x0801c440
 8016194:	2000a244 	.word	0x2000a244

08016198 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016198:	b480      	push	{r7}
 801619a:	b085      	sub	sp, #20
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d01e      	beq.n	80161e6 <udp_netif_ip_addr_changed+0x4e>
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d01a      	beq.n	80161e6 <udp_netif_ip_addr_changed+0x4e>
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d017      	beq.n	80161e6 <udp_netif_ip_addr_changed+0x4e>
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d013      	beq.n	80161e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80161be:	4b0d      	ldr	r3, [pc, #52]	; (80161f4 <udp_netif_ip_addr_changed+0x5c>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	60fb      	str	r3, [r7, #12]
 80161c4:	e00c      	b.n	80161e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	429a      	cmp	r2, r3
 80161d0:	d103      	bne.n	80161da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80161d2:	683b      	ldr	r3, [r7, #0]
 80161d4:	681a      	ldr	r2, [r3, #0]
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	68db      	ldr	r3, [r3, #12]
 80161de:	60fb      	str	r3, [r7, #12]
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d1ef      	bne.n	80161c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80161e6:	bf00      	nop
 80161e8:	3714      	adds	r7, #20
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	2000d9e4 	.word	0x2000d9e4

080161f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016200:	4915      	ldr	r1, [pc, #84]	; (8016258 <etharp_free_entry+0x60>)
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	4613      	mov	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	440b      	add	r3, r1
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d013      	beq.n	801623c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016214:	4910      	ldr	r1, [pc, #64]	; (8016258 <etharp_free_entry+0x60>)
 8016216:	687a      	ldr	r2, [r7, #4]
 8016218:	4613      	mov	r3, r2
 801621a:	005b      	lsls	r3, r3, #1
 801621c:	4413      	add	r3, r2
 801621e:	00db      	lsls	r3, r3, #3
 8016220:	440b      	add	r3, r1
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	4618      	mov	r0, r3
 8016226:	f7fa f8bd 	bl	80103a4 <pbuf_free>
    arp_table[i].q = NULL;
 801622a:	490b      	ldr	r1, [pc, #44]	; (8016258 <etharp_free_entry+0x60>)
 801622c:	687a      	ldr	r2, [r7, #4]
 801622e:	4613      	mov	r3, r2
 8016230:	005b      	lsls	r3, r3, #1
 8016232:	4413      	add	r3, r2
 8016234:	00db      	lsls	r3, r3, #3
 8016236:	440b      	add	r3, r1
 8016238:	2200      	movs	r2, #0
 801623a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801623c:	4906      	ldr	r1, [pc, #24]	; (8016258 <etharp_free_entry+0x60>)
 801623e:	687a      	ldr	r2, [r7, #4]
 8016240:	4613      	mov	r3, r2
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	4413      	add	r3, r2
 8016246:	00db      	lsls	r3, r3, #3
 8016248:	440b      	add	r3, r1
 801624a:	3314      	adds	r3, #20
 801624c:	2200      	movs	r2, #0
 801624e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016250:	bf00      	nop
 8016252:	3708      	adds	r7, #8
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}
 8016258:	2000d9e8 	.word	0x2000d9e8

0801625c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b082      	sub	sp, #8
 8016260:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016262:	2300      	movs	r3, #0
 8016264:	607b      	str	r3, [r7, #4]
 8016266:	e096      	b.n	8016396 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016268:	494f      	ldr	r1, [pc, #316]	; (80163a8 <etharp_tmr+0x14c>)
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	4613      	mov	r3, r2
 801626e:	005b      	lsls	r3, r3, #1
 8016270:	4413      	add	r3, r2
 8016272:	00db      	lsls	r3, r3, #3
 8016274:	440b      	add	r3, r1
 8016276:	3314      	adds	r3, #20
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801627c:	78fb      	ldrb	r3, [r7, #3]
 801627e:	2b00      	cmp	r3, #0
 8016280:	f000 8086 	beq.w	8016390 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016284:	4948      	ldr	r1, [pc, #288]	; (80163a8 <etharp_tmr+0x14c>)
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	4613      	mov	r3, r2
 801628a:	005b      	lsls	r3, r3, #1
 801628c:	4413      	add	r3, r2
 801628e:	00db      	lsls	r3, r3, #3
 8016290:	440b      	add	r3, r1
 8016292:	3312      	adds	r3, #18
 8016294:	881b      	ldrh	r3, [r3, #0]
 8016296:	3301      	adds	r3, #1
 8016298:	b298      	uxth	r0, r3
 801629a:	4943      	ldr	r1, [pc, #268]	; (80163a8 <etharp_tmr+0x14c>)
 801629c:	687a      	ldr	r2, [r7, #4]
 801629e:	4613      	mov	r3, r2
 80162a0:	005b      	lsls	r3, r3, #1
 80162a2:	4413      	add	r3, r2
 80162a4:	00db      	lsls	r3, r3, #3
 80162a6:	440b      	add	r3, r1
 80162a8:	3312      	adds	r3, #18
 80162aa:	4602      	mov	r2, r0
 80162ac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80162ae:	493e      	ldr	r1, [pc, #248]	; (80163a8 <etharp_tmr+0x14c>)
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	4613      	mov	r3, r2
 80162b4:	005b      	lsls	r3, r3, #1
 80162b6:	4413      	add	r3, r2
 80162b8:	00db      	lsls	r3, r3, #3
 80162ba:	440b      	add	r3, r1
 80162bc:	3312      	adds	r3, #18
 80162be:	881b      	ldrh	r3, [r3, #0]
 80162c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80162c4:	d215      	bcs.n	80162f2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80162c6:	4938      	ldr	r1, [pc, #224]	; (80163a8 <etharp_tmr+0x14c>)
 80162c8:	687a      	ldr	r2, [r7, #4]
 80162ca:	4613      	mov	r3, r2
 80162cc:	005b      	lsls	r3, r3, #1
 80162ce:	4413      	add	r3, r2
 80162d0:	00db      	lsls	r3, r3, #3
 80162d2:	440b      	add	r3, r1
 80162d4:	3314      	adds	r3, #20
 80162d6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80162d8:	2b01      	cmp	r3, #1
 80162da:	d10e      	bne.n	80162fa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80162dc:	4932      	ldr	r1, [pc, #200]	; (80163a8 <etharp_tmr+0x14c>)
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	4613      	mov	r3, r2
 80162e2:	005b      	lsls	r3, r3, #1
 80162e4:	4413      	add	r3, r2
 80162e6:	00db      	lsls	r3, r3, #3
 80162e8:	440b      	add	r3, r1
 80162ea:	3312      	adds	r3, #18
 80162ec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80162ee:	2b04      	cmp	r3, #4
 80162f0:	d903      	bls.n	80162fa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f7ff ff80 	bl	80161f8 <etharp_free_entry>
 80162f8:	e04a      	b.n	8016390 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80162fa:	492b      	ldr	r1, [pc, #172]	; (80163a8 <etharp_tmr+0x14c>)
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	4613      	mov	r3, r2
 8016300:	005b      	lsls	r3, r3, #1
 8016302:	4413      	add	r3, r2
 8016304:	00db      	lsls	r3, r3, #3
 8016306:	440b      	add	r3, r1
 8016308:	3314      	adds	r3, #20
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	2b03      	cmp	r3, #3
 801630e:	d10a      	bne.n	8016326 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016310:	4925      	ldr	r1, [pc, #148]	; (80163a8 <etharp_tmr+0x14c>)
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	4613      	mov	r3, r2
 8016316:	005b      	lsls	r3, r3, #1
 8016318:	4413      	add	r3, r2
 801631a:	00db      	lsls	r3, r3, #3
 801631c:	440b      	add	r3, r1
 801631e:	3314      	adds	r3, #20
 8016320:	2204      	movs	r2, #4
 8016322:	701a      	strb	r2, [r3, #0]
 8016324:	e034      	b.n	8016390 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016326:	4920      	ldr	r1, [pc, #128]	; (80163a8 <etharp_tmr+0x14c>)
 8016328:	687a      	ldr	r2, [r7, #4]
 801632a:	4613      	mov	r3, r2
 801632c:	005b      	lsls	r3, r3, #1
 801632e:	4413      	add	r3, r2
 8016330:	00db      	lsls	r3, r3, #3
 8016332:	440b      	add	r3, r1
 8016334:	3314      	adds	r3, #20
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	2b04      	cmp	r3, #4
 801633a:	d10a      	bne.n	8016352 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801633c:	491a      	ldr	r1, [pc, #104]	; (80163a8 <etharp_tmr+0x14c>)
 801633e:	687a      	ldr	r2, [r7, #4]
 8016340:	4613      	mov	r3, r2
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	00db      	lsls	r3, r3, #3
 8016348:	440b      	add	r3, r1
 801634a:	3314      	adds	r3, #20
 801634c:	2202      	movs	r2, #2
 801634e:	701a      	strb	r2, [r3, #0]
 8016350:	e01e      	b.n	8016390 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016352:	4915      	ldr	r1, [pc, #84]	; (80163a8 <etharp_tmr+0x14c>)
 8016354:	687a      	ldr	r2, [r7, #4]
 8016356:	4613      	mov	r3, r2
 8016358:	005b      	lsls	r3, r3, #1
 801635a:	4413      	add	r3, r2
 801635c:	00db      	lsls	r3, r3, #3
 801635e:	440b      	add	r3, r1
 8016360:	3314      	adds	r3, #20
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	2b01      	cmp	r3, #1
 8016366:	d113      	bne.n	8016390 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016368:	490f      	ldr	r1, [pc, #60]	; (80163a8 <etharp_tmr+0x14c>)
 801636a:	687a      	ldr	r2, [r7, #4]
 801636c:	4613      	mov	r3, r2
 801636e:	005b      	lsls	r3, r3, #1
 8016370:	4413      	add	r3, r2
 8016372:	00db      	lsls	r3, r3, #3
 8016374:	440b      	add	r3, r1
 8016376:	3308      	adds	r3, #8
 8016378:	6818      	ldr	r0, [r3, #0]
 801637a:	687a      	ldr	r2, [r7, #4]
 801637c:	4613      	mov	r3, r2
 801637e:	005b      	lsls	r3, r3, #1
 8016380:	4413      	add	r3, r2
 8016382:	00db      	lsls	r3, r3, #3
 8016384:	4a08      	ldr	r2, [pc, #32]	; (80163a8 <etharp_tmr+0x14c>)
 8016386:	4413      	add	r3, r2
 8016388:	3304      	adds	r3, #4
 801638a:	4619      	mov	r1, r3
 801638c:	f000 fe6e 	bl	801706c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	3301      	adds	r3, #1
 8016394:	607b      	str	r3, [r7, #4]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2b09      	cmp	r3, #9
 801639a:	f77f af65 	ble.w	8016268 <etharp_tmr+0xc>
      }
    }
  }
}
 801639e:	bf00      	nop
 80163a0:	bf00      	nop
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	2000d9e8 	.word	0x2000d9e8

080163ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b08a      	sub	sp, #40	; 0x28
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	460b      	mov	r3, r1
 80163b6:	607a      	str	r2, [r7, #4]
 80163b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80163ba:	230a      	movs	r3, #10
 80163bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80163be:	230a      	movs	r3, #10
 80163c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80163c2:	230a      	movs	r3, #10
 80163c4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80163c6:	2300      	movs	r3, #0
 80163c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80163ca:	230a      	movs	r3, #10
 80163cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80163ce:	2300      	movs	r3, #0
 80163d0:	83bb      	strh	r3, [r7, #28]
 80163d2:	2300      	movs	r3, #0
 80163d4:	837b      	strh	r3, [r7, #26]
 80163d6:	2300      	movs	r3, #0
 80163d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163da:	2300      	movs	r3, #0
 80163dc:	843b      	strh	r3, [r7, #32]
 80163de:	e0ae      	b.n	801653e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80163e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163e4:	49a6      	ldr	r1, [pc, #664]	; (8016680 <etharp_find_entry+0x2d4>)
 80163e6:	4613      	mov	r3, r2
 80163e8:	005b      	lsls	r3, r3, #1
 80163ea:	4413      	add	r3, r2
 80163ec:	00db      	lsls	r3, r3, #3
 80163ee:	440b      	add	r3, r1
 80163f0:	3314      	adds	r3, #20
 80163f2:	781b      	ldrb	r3, [r3, #0]
 80163f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80163f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80163fa:	2b0a      	cmp	r3, #10
 80163fc:	d105      	bne.n	801640a <etharp_find_entry+0x5e>
 80163fe:	7dfb      	ldrb	r3, [r7, #23]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d102      	bne.n	801640a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016404:	8c3b      	ldrh	r3, [r7, #32]
 8016406:	847b      	strh	r3, [r7, #34]	; 0x22
 8016408:	e095      	b.n	8016536 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801640a:	7dfb      	ldrb	r3, [r7, #23]
 801640c:	2b00      	cmp	r3, #0
 801640e:	f000 8092 	beq.w	8016536 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016412:	7dfb      	ldrb	r3, [r7, #23]
 8016414:	2b01      	cmp	r3, #1
 8016416:	d009      	beq.n	801642c <etharp_find_entry+0x80>
 8016418:	7dfb      	ldrb	r3, [r7, #23]
 801641a:	2b01      	cmp	r3, #1
 801641c:	d806      	bhi.n	801642c <etharp_find_entry+0x80>
 801641e:	4b99      	ldr	r3, [pc, #612]	; (8016684 <etharp_find_entry+0x2d8>)
 8016420:	f240 1223 	movw	r2, #291	; 0x123
 8016424:	4998      	ldr	r1, [pc, #608]	; (8016688 <etharp_find_entry+0x2dc>)
 8016426:	4899      	ldr	r0, [pc, #612]	; (801668c <etharp_find_entry+0x2e0>)
 8016428:	f002 fc94 	bl	8018d54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d020      	beq.n	8016474 <etharp_find_entry+0xc8>
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	6819      	ldr	r1, [r3, #0]
 8016436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801643a:	4891      	ldr	r0, [pc, #580]	; (8016680 <etharp_find_entry+0x2d4>)
 801643c:	4613      	mov	r3, r2
 801643e:	005b      	lsls	r3, r3, #1
 8016440:	4413      	add	r3, r2
 8016442:	00db      	lsls	r3, r3, #3
 8016444:	4403      	add	r3, r0
 8016446:	3304      	adds	r3, #4
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	4299      	cmp	r1, r3
 801644c:	d112      	bne.n	8016474 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d00c      	beq.n	801646e <etharp_find_entry+0xc2>
 8016454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016458:	4989      	ldr	r1, [pc, #548]	; (8016680 <etharp_find_entry+0x2d4>)
 801645a:	4613      	mov	r3, r2
 801645c:	005b      	lsls	r3, r3, #1
 801645e:	4413      	add	r3, r2
 8016460:	00db      	lsls	r3, r3, #3
 8016462:	440b      	add	r3, r1
 8016464:	3308      	adds	r3, #8
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	687a      	ldr	r2, [r7, #4]
 801646a:	429a      	cmp	r2, r3
 801646c:	d102      	bne.n	8016474 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801646e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016472:	e100      	b.n	8016676 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016474:	7dfb      	ldrb	r3, [r7, #23]
 8016476:	2b01      	cmp	r3, #1
 8016478:	d140      	bne.n	80164fc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801647a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801647e:	4980      	ldr	r1, [pc, #512]	; (8016680 <etharp_find_entry+0x2d4>)
 8016480:	4613      	mov	r3, r2
 8016482:	005b      	lsls	r3, r3, #1
 8016484:	4413      	add	r3, r2
 8016486:	00db      	lsls	r3, r3, #3
 8016488:	440b      	add	r3, r1
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d01a      	beq.n	80164c6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016490:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016494:	497a      	ldr	r1, [pc, #488]	; (8016680 <etharp_find_entry+0x2d4>)
 8016496:	4613      	mov	r3, r2
 8016498:	005b      	lsls	r3, r3, #1
 801649a:	4413      	add	r3, r2
 801649c:	00db      	lsls	r3, r3, #3
 801649e:	440b      	add	r3, r1
 80164a0:	3312      	adds	r3, #18
 80164a2:	881b      	ldrh	r3, [r3, #0]
 80164a4:	8bba      	ldrh	r2, [r7, #28]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d845      	bhi.n	8016536 <etharp_find_entry+0x18a>
            old_queue = i;
 80164aa:	8c3b      	ldrh	r3, [r7, #32]
 80164ac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80164ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164b2:	4973      	ldr	r1, [pc, #460]	; (8016680 <etharp_find_entry+0x2d4>)
 80164b4:	4613      	mov	r3, r2
 80164b6:	005b      	lsls	r3, r3, #1
 80164b8:	4413      	add	r3, r2
 80164ba:	00db      	lsls	r3, r3, #3
 80164bc:	440b      	add	r3, r1
 80164be:	3312      	adds	r3, #18
 80164c0:	881b      	ldrh	r3, [r3, #0]
 80164c2:	83bb      	strh	r3, [r7, #28]
 80164c4:	e037      	b.n	8016536 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80164c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164ca:	496d      	ldr	r1, [pc, #436]	; (8016680 <etharp_find_entry+0x2d4>)
 80164cc:	4613      	mov	r3, r2
 80164ce:	005b      	lsls	r3, r3, #1
 80164d0:	4413      	add	r3, r2
 80164d2:	00db      	lsls	r3, r3, #3
 80164d4:	440b      	add	r3, r1
 80164d6:	3312      	adds	r3, #18
 80164d8:	881b      	ldrh	r3, [r3, #0]
 80164da:	8b7a      	ldrh	r2, [r7, #26]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d82a      	bhi.n	8016536 <etharp_find_entry+0x18a>
            old_pending = i;
 80164e0:	8c3b      	ldrh	r3, [r7, #32]
 80164e2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80164e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164e8:	4965      	ldr	r1, [pc, #404]	; (8016680 <etharp_find_entry+0x2d4>)
 80164ea:	4613      	mov	r3, r2
 80164ec:	005b      	lsls	r3, r3, #1
 80164ee:	4413      	add	r3, r2
 80164f0:	00db      	lsls	r3, r3, #3
 80164f2:	440b      	add	r3, r1
 80164f4:	3312      	adds	r3, #18
 80164f6:	881b      	ldrh	r3, [r3, #0]
 80164f8:	837b      	strh	r3, [r7, #26]
 80164fa:	e01c      	b.n	8016536 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80164fc:	7dfb      	ldrb	r3, [r7, #23]
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d919      	bls.n	8016536 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016502:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016506:	495e      	ldr	r1, [pc, #376]	; (8016680 <etharp_find_entry+0x2d4>)
 8016508:	4613      	mov	r3, r2
 801650a:	005b      	lsls	r3, r3, #1
 801650c:	4413      	add	r3, r2
 801650e:	00db      	lsls	r3, r3, #3
 8016510:	440b      	add	r3, r1
 8016512:	3312      	adds	r3, #18
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	8b3a      	ldrh	r2, [r7, #24]
 8016518:	429a      	cmp	r2, r3
 801651a:	d80c      	bhi.n	8016536 <etharp_find_entry+0x18a>
            old_stable = i;
 801651c:	8c3b      	ldrh	r3, [r7, #32]
 801651e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016520:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016524:	4956      	ldr	r1, [pc, #344]	; (8016680 <etharp_find_entry+0x2d4>)
 8016526:	4613      	mov	r3, r2
 8016528:	005b      	lsls	r3, r3, #1
 801652a:	4413      	add	r3, r2
 801652c:	00db      	lsls	r3, r3, #3
 801652e:	440b      	add	r3, r1
 8016530:	3312      	adds	r3, #18
 8016532:	881b      	ldrh	r3, [r3, #0]
 8016534:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016536:	8c3b      	ldrh	r3, [r7, #32]
 8016538:	3301      	adds	r3, #1
 801653a:	b29b      	uxth	r3, r3
 801653c:	843b      	strh	r3, [r7, #32]
 801653e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016542:	2b09      	cmp	r3, #9
 8016544:	f77f af4c 	ble.w	80163e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016548:	7afb      	ldrb	r3, [r7, #11]
 801654a:	f003 0302 	and.w	r3, r3, #2
 801654e:	2b00      	cmp	r3, #0
 8016550:	d108      	bne.n	8016564 <etharp_find_entry+0x1b8>
 8016552:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016556:	2b0a      	cmp	r3, #10
 8016558:	d107      	bne.n	801656a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801655a:	7afb      	ldrb	r3, [r7, #11]
 801655c:	f003 0301 	and.w	r3, r3, #1
 8016560:	2b00      	cmp	r3, #0
 8016562:	d102      	bne.n	801656a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016564:	f04f 33ff 	mov.w	r3, #4294967295
 8016568:	e085      	b.n	8016676 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801656a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801656e:	2b09      	cmp	r3, #9
 8016570:	dc02      	bgt.n	8016578 <etharp_find_entry+0x1cc>
    i = empty;
 8016572:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016574:	843b      	strh	r3, [r7, #32]
 8016576:	e039      	b.n	80165ec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016578:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801657c:	2b09      	cmp	r3, #9
 801657e:	dc14      	bgt.n	80165aa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016580:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016582:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016584:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016588:	493d      	ldr	r1, [pc, #244]	; (8016680 <etharp_find_entry+0x2d4>)
 801658a:	4613      	mov	r3, r2
 801658c:	005b      	lsls	r3, r3, #1
 801658e:	4413      	add	r3, r2
 8016590:	00db      	lsls	r3, r3, #3
 8016592:	440b      	add	r3, r1
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d018      	beq.n	80165cc <etharp_find_entry+0x220>
 801659a:	4b3a      	ldr	r3, [pc, #232]	; (8016684 <etharp_find_entry+0x2d8>)
 801659c:	f240 126d 	movw	r2, #365	; 0x16d
 80165a0:	493b      	ldr	r1, [pc, #236]	; (8016690 <etharp_find_entry+0x2e4>)
 80165a2:	483a      	ldr	r0, [pc, #232]	; (801668c <etharp_find_entry+0x2e0>)
 80165a4:	f002 fbd6 	bl	8018d54 <iprintf>
 80165a8:	e010      	b.n	80165cc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80165aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80165ae:	2b09      	cmp	r3, #9
 80165b0:	dc02      	bgt.n	80165b8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80165b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80165b4:	843b      	strh	r3, [r7, #32]
 80165b6:	e009      	b.n	80165cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80165b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80165bc:	2b09      	cmp	r3, #9
 80165be:	dc02      	bgt.n	80165c6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80165c0:	8bfb      	ldrh	r3, [r7, #30]
 80165c2:	843b      	strh	r3, [r7, #32]
 80165c4:	e002      	b.n	80165cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80165c6:	f04f 33ff 	mov.w	r3, #4294967295
 80165ca:	e054      	b.n	8016676 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80165cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165d0:	2b09      	cmp	r3, #9
 80165d2:	dd06      	ble.n	80165e2 <etharp_find_entry+0x236>
 80165d4:	4b2b      	ldr	r3, [pc, #172]	; (8016684 <etharp_find_entry+0x2d8>)
 80165d6:	f240 127f 	movw	r2, #383	; 0x17f
 80165da:	492e      	ldr	r1, [pc, #184]	; (8016694 <etharp_find_entry+0x2e8>)
 80165dc:	482b      	ldr	r0, [pc, #172]	; (801668c <etharp_find_entry+0x2e0>)
 80165de:	f002 fbb9 	bl	8018d54 <iprintf>
    etharp_free_entry(i);
 80165e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165e6:	4618      	mov	r0, r3
 80165e8:	f7ff fe06 	bl	80161f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80165ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165f0:	2b09      	cmp	r3, #9
 80165f2:	dd06      	ble.n	8016602 <etharp_find_entry+0x256>
 80165f4:	4b23      	ldr	r3, [pc, #140]	; (8016684 <etharp_find_entry+0x2d8>)
 80165f6:	f240 1283 	movw	r2, #387	; 0x183
 80165fa:	4926      	ldr	r1, [pc, #152]	; (8016694 <etharp_find_entry+0x2e8>)
 80165fc:	4823      	ldr	r0, [pc, #140]	; (801668c <etharp_find_entry+0x2e0>)
 80165fe:	f002 fba9 	bl	8018d54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016602:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016606:	491e      	ldr	r1, [pc, #120]	; (8016680 <etharp_find_entry+0x2d4>)
 8016608:	4613      	mov	r3, r2
 801660a:	005b      	lsls	r3, r3, #1
 801660c:	4413      	add	r3, r2
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	440b      	add	r3, r1
 8016612:	3314      	adds	r3, #20
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d006      	beq.n	8016628 <etharp_find_entry+0x27c>
 801661a:	4b1a      	ldr	r3, [pc, #104]	; (8016684 <etharp_find_entry+0x2d8>)
 801661c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016620:	491d      	ldr	r1, [pc, #116]	; (8016698 <etharp_find_entry+0x2ec>)
 8016622:	481a      	ldr	r0, [pc, #104]	; (801668c <etharp_find_entry+0x2e0>)
 8016624:	f002 fb96 	bl	8018d54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d00b      	beq.n	8016646 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801662e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	6819      	ldr	r1, [r3, #0]
 8016636:	4812      	ldr	r0, [pc, #72]	; (8016680 <etharp_find_entry+0x2d4>)
 8016638:	4613      	mov	r3, r2
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	4413      	add	r3, r2
 801663e:	00db      	lsls	r3, r3, #3
 8016640:	4403      	add	r3, r0
 8016642:	3304      	adds	r3, #4
 8016644:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016646:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801664a:	490d      	ldr	r1, [pc, #52]	; (8016680 <etharp_find_entry+0x2d4>)
 801664c:	4613      	mov	r3, r2
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	4413      	add	r3, r2
 8016652:	00db      	lsls	r3, r3, #3
 8016654:	440b      	add	r3, r1
 8016656:	3312      	adds	r3, #18
 8016658:	2200      	movs	r2, #0
 801665a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801665c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016660:	4907      	ldr	r1, [pc, #28]	; (8016680 <etharp_find_entry+0x2d4>)
 8016662:	4613      	mov	r3, r2
 8016664:	005b      	lsls	r3, r3, #1
 8016666:	4413      	add	r3, r2
 8016668:	00db      	lsls	r3, r3, #3
 801666a:	440b      	add	r3, r1
 801666c:	3308      	adds	r3, #8
 801666e:	687a      	ldr	r2, [r7, #4]
 8016670:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016672:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016676:	4618      	mov	r0, r3
 8016678:	3728      	adds	r7, #40	; 0x28
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	2000d9e8 	.word	0x2000d9e8
 8016684:	0801c6cc 	.word	0x0801c6cc
 8016688:	0801c704 	.word	0x0801c704
 801668c:	0801c744 	.word	0x0801c744
 8016690:	0801c76c 	.word	0x0801c76c
 8016694:	0801c784 	.word	0x0801c784
 8016698:	0801c798 	.word	0x0801c798

0801669c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b088      	sub	sp, #32
 80166a0:	af02      	add	r7, sp, #8
 80166a2:	60f8      	str	r0, [r7, #12]
 80166a4:	60b9      	str	r1, [r7, #8]
 80166a6:	607a      	str	r2, [r7, #4]
 80166a8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80166b0:	2b06      	cmp	r3, #6
 80166b2:	d006      	beq.n	80166c2 <etharp_update_arp_entry+0x26>
 80166b4:	4b48      	ldr	r3, [pc, #288]	; (80167d8 <etharp_update_arp_entry+0x13c>)
 80166b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80166ba:	4948      	ldr	r1, [pc, #288]	; (80167dc <etharp_update_arp_entry+0x140>)
 80166bc:	4848      	ldr	r0, [pc, #288]	; (80167e0 <etharp_update_arp_entry+0x144>)
 80166be:	f002 fb49 	bl	8018d54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80166c2:	68bb      	ldr	r3, [r7, #8]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d012      	beq.n	80166ee <etharp_update_arp_entry+0x52>
 80166c8:	68bb      	ldr	r3, [r7, #8]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d00e      	beq.n	80166ee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80166d0:	68bb      	ldr	r3, [r7, #8]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	68f9      	ldr	r1, [r7, #12]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f001 f8fe 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 80166dc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d105      	bne.n	80166ee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80166ea:	2be0      	cmp	r3, #224	; 0xe0
 80166ec:	d102      	bne.n	80166f4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80166ee:	f06f 030f 	mvn.w	r3, #15
 80166f2:	e06c      	b.n	80167ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80166f4:	78fb      	ldrb	r3, [r7, #3]
 80166f6:	68fa      	ldr	r2, [r7, #12]
 80166f8:	4619      	mov	r1, r3
 80166fa:	68b8      	ldr	r0, [r7, #8]
 80166fc:	f7ff fe56 	bl	80163ac <etharp_find_entry>
 8016700:	4603      	mov	r3, r0
 8016702:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016704:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016708:	2b00      	cmp	r3, #0
 801670a:	da02      	bge.n	8016712 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801670c:	8afb      	ldrh	r3, [r7, #22]
 801670e:	b25b      	sxtb	r3, r3
 8016710:	e05d      	b.n	80167ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016712:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016716:	4933      	ldr	r1, [pc, #204]	; (80167e4 <etharp_update_arp_entry+0x148>)
 8016718:	4613      	mov	r3, r2
 801671a:	005b      	lsls	r3, r3, #1
 801671c:	4413      	add	r3, r2
 801671e:	00db      	lsls	r3, r3, #3
 8016720:	440b      	add	r3, r1
 8016722:	3314      	adds	r3, #20
 8016724:	2202      	movs	r2, #2
 8016726:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016728:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801672c:	492d      	ldr	r1, [pc, #180]	; (80167e4 <etharp_update_arp_entry+0x148>)
 801672e:	4613      	mov	r3, r2
 8016730:	005b      	lsls	r3, r3, #1
 8016732:	4413      	add	r3, r2
 8016734:	00db      	lsls	r3, r3, #3
 8016736:	440b      	add	r3, r1
 8016738:	3308      	adds	r3, #8
 801673a:	68fa      	ldr	r2, [r7, #12]
 801673c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801673e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016742:	4613      	mov	r3, r2
 8016744:	005b      	lsls	r3, r3, #1
 8016746:	4413      	add	r3, r2
 8016748:	00db      	lsls	r3, r3, #3
 801674a:	3308      	adds	r3, #8
 801674c:	4a25      	ldr	r2, [pc, #148]	; (80167e4 <etharp_update_arp_entry+0x148>)
 801674e:	4413      	add	r3, r2
 8016750:	3304      	adds	r3, #4
 8016752:	2206      	movs	r2, #6
 8016754:	6879      	ldr	r1, [r7, #4]
 8016756:	4618      	mov	r0, r3
 8016758:	f002 fa37 	bl	8018bca <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801675c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016760:	4920      	ldr	r1, [pc, #128]	; (80167e4 <etharp_update_arp_entry+0x148>)
 8016762:	4613      	mov	r3, r2
 8016764:	005b      	lsls	r3, r3, #1
 8016766:	4413      	add	r3, r2
 8016768:	00db      	lsls	r3, r3, #3
 801676a:	440b      	add	r3, r1
 801676c:	3312      	adds	r3, #18
 801676e:	2200      	movs	r2, #0
 8016770:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016772:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016776:	491b      	ldr	r1, [pc, #108]	; (80167e4 <etharp_update_arp_entry+0x148>)
 8016778:	4613      	mov	r3, r2
 801677a:	005b      	lsls	r3, r3, #1
 801677c:	4413      	add	r3, r2
 801677e:	00db      	lsls	r3, r3, #3
 8016780:	440b      	add	r3, r1
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d021      	beq.n	80167cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016788:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801678c:	4915      	ldr	r1, [pc, #84]	; (80167e4 <etharp_update_arp_entry+0x148>)
 801678e:	4613      	mov	r3, r2
 8016790:	005b      	lsls	r3, r3, #1
 8016792:	4413      	add	r3, r2
 8016794:	00db      	lsls	r3, r3, #3
 8016796:	440b      	add	r3, r1
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801679c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80167a0:	4910      	ldr	r1, [pc, #64]	; (80167e4 <etharp_update_arp_entry+0x148>)
 80167a2:	4613      	mov	r3, r2
 80167a4:	005b      	lsls	r3, r3, #1
 80167a6:	4413      	add	r3, r2
 80167a8:	00db      	lsls	r3, r3, #3
 80167aa:	440b      	add	r3, r1
 80167ac:	2200      	movs	r2, #0
 80167ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80167b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80167ba:	9300      	str	r3, [sp, #0]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6939      	ldr	r1, [r7, #16]
 80167c0:	68f8      	ldr	r0, [r7, #12]
 80167c2:	f001 ff97 	bl	80186f4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80167c6:	6938      	ldr	r0, [r7, #16]
 80167c8:	f7f9 fdec 	bl	80103a4 <pbuf_free>
  }
  return ERR_OK;
 80167cc:	2300      	movs	r3, #0
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	3718      	adds	r7, #24
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	0801c6cc 	.word	0x0801c6cc
 80167dc:	0801c7c4 	.word	0x0801c7c4
 80167e0:	0801c744 	.word	0x0801c744
 80167e4:	2000d9e8 	.word	0x2000d9e8

080167e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b084      	sub	sp, #16
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167f0:	2300      	movs	r3, #0
 80167f2:	60fb      	str	r3, [r7, #12]
 80167f4:	e01e      	b.n	8016834 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80167f6:	4913      	ldr	r1, [pc, #76]	; (8016844 <etharp_cleanup_netif+0x5c>)
 80167f8:	68fa      	ldr	r2, [r7, #12]
 80167fa:	4613      	mov	r3, r2
 80167fc:	005b      	lsls	r3, r3, #1
 80167fe:	4413      	add	r3, r2
 8016800:	00db      	lsls	r3, r3, #3
 8016802:	440b      	add	r3, r1
 8016804:	3314      	adds	r3, #20
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801680a:	7afb      	ldrb	r3, [r7, #11]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d00e      	beq.n	801682e <etharp_cleanup_netif+0x46>
 8016810:	490c      	ldr	r1, [pc, #48]	; (8016844 <etharp_cleanup_netif+0x5c>)
 8016812:	68fa      	ldr	r2, [r7, #12]
 8016814:	4613      	mov	r3, r2
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	4413      	add	r3, r2
 801681a:	00db      	lsls	r3, r3, #3
 801681c:	440b      	add	r3, r1
 801681e:	3308      	adds	r3, #8
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	687a      	ldr	r2, [r7, #4]
 8016824:	429a      	cmp	r2, r3
 8016826:	d102      	bne.n	801682e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	f7ff fce5 	bl	80161f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	3301      	adds	r3, #1
 8016832:	60fb      	str	r3, [r7, #12]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2b09      	cmp	r3, #9
 8016838:	dddd      	ble.n	80167f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801683a:	bf00      	nop
 801683c:	bf00      	nop
 801683e:	3710      	adds	r7, #16
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}
 8016844:	2000d9e8 	.word	0x2000d9e8

08016848 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016848:	b5b0      	push	{r4, r5, r7, lr}
 801684a:	b08a      	sub	sp, #40	; 0x28
 801684c:	af04      	add	r7, sp, #16
 801684e:	6078      	str	r0, [r7, #4]
 8016850:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d107      	bne.n	8016868 <etharp_input+0x20>
 8016858:	4b3d      	ldr	r3, [pc, #244]	; (8016950 <etharp_input+0x108>)
 801685a:	f240 228a 	movw	r2, #650	; 0x28a
 801685e:	493d      	ldr	r1, [pc, #244]	; (8016954 <etharp_input+0x10c>)
 8016860:	483d      	ldr	r0, [pc, #244]	; (8016958 <etharp_input+0x110>)
 8016862:	f002 fa77 	bl	8018d54 <iprintf>
 8016866:	e06f      	b.n	8016948 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	881b      	ldrh	r3, [r3, #0]
 8016872:	b29b      	uxth	r3, r3
 8016874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016878:	d10c      	bne.n	8016894 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801687e:	2b06      	cmp	r3, #6
 8016880:	d108      	bne.n	8016894 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016886:	2b04      	cmp	r3, #4
 8016888:	d104      	bne.n	8016894 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801688a:	693b      	ldr	r3, [r7, #16]
 801688c:	885b      	ldrh	r3, [r3, #2]
 801688e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016890:	2b08      	cmp	r3, #8
 8016892:	d003      	beq.n	801689c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f7f9 fd85 	bl	80103a4 <pbuf_free>
    return;
 801689a:	e055      	b.n	8016948 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	330e      	adds	r3, #14
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	3318      	adds	r3, #24
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80168ac:	683b      	ldr	r3, [r7, #0]
 80168ae:	3304      	adds	r3, #4
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d102      	bne.n	80168bc <etharp_input+0x74>
    for_us = 0;
 80168b6:	2300      	movs	r3, #0
 80168b8:	75fb      	strb	r3, [r7, #23]
 80168ba:	e009      	b.n	80168d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80168bc:	68ba      	ldr	r2, [r7, #8]
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	3304      	adds	r3, #4
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	429a      	cmp	r2, r3
 80168c6:	bf0c      	ite	eq
 80168c8:	2301      	moveq	r3, #1
 80168ca:	2300      	movne	r3, #0
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80168d0:	693b      	ldr	r3, [r7, #16]
 80168d2:	f103 0208 	add.w	r2, r3, #8
 80168d6:	7dfb      	ldrb	r3, [r7, #23]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d001      	beq.n	80168e0 <etharp_input+0x98>
 80168dc:	2301      	movs	r3, #1
 80168de:	e000      	b.n	80168e2 <etharp_input+0x9a>
 80168e0:	2302      	movs	r3, #2
 80168e2:	f107 010c 	add.w	r1, r7, #12
 80168e6:	6838      	ldr	r0, [r7, #0]
 80168e8:	f7ff fed8 	bl	801669c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	88db      	ldrh	r3, [r3, #6]
 80168f0:	b29b      	uxth	r3, r3
 80168f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168f6:	d003      	beq.n	8016900 <etharp_input+0xb8>
 80168f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168fc:	d01e      	beq.n	801693c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80168fe:	e020      	b.n	8016942 <etharp_input+0xfa>
      if (for_us) {
 8016900:	7dfb      	ldrb	r3, [r7, #23]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d01c      	beq.n	8016940 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801691c:	693a      	ldr	r2, [r7, #16]
 801691e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016920:	2102      	movs	r1, #2
 8016922:	9103      	str	r1, [sp, #12]
 8016924:	f107 010c 	add.w	r1, r7, #12
 8016928:	9102      	str	r1, [sp, #8]
 801692a:	9201      	str	r2, [sp, #4]
 801692c:	9300      	str	r3, [sp, #0]
 801692e:	462b      	mov	r3, r5
 8016930:	4622      	mov	r2, r4
 8016932:	4601      	mov	r1, r0
 8016934:	6838      	ldr	r0, [r7, #0]
 8016936:	f000 faeb 	bl	8016f10 <etharp_raw>
      break;
 801693a:	e001      	b.n	8016940 <etharp_input+0xf8>
      break;
 801693c:	bf00      	nop
 801693e:	e000      	b.n	8016942 <etharp_input+0xfa>
      break;
 8016940:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7f9 fd2e 	bl	80103a4 <pbuf_free>
}
 8016948:	3718      	adds	r7, #24
 801694a:	46bd      	mov	sp, r7
 801694c:	bdb0      	pop	{r4, r5, r7, pc}
 801694e:	bf00      	nop
 8016950:	0801c6cc 	.word	0x0801c6cc
 8016954:	0801c81c 	.word	0x0801c81c
 8016958:	0801c744 	.word	0x0801c744

0801695c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b086      	sub	sp, #24
 8016960:	af02      	add	r7, sp, #8
 8016962:	60f8      	str	r0, [r7, #12]
 8016964:	60b9      	str	r1, [r7, #8]
 8016966:	4613      	mov	r3, r2
 8016968:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801696a:	79fa      	ldrb	r2, [r7, #7]
 801696c:	4944      	ldr	r1, [pc, #272]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	440b      	add	r3, r1
 8016978:	3314      	adds	r3, #20
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2b01      	cmp	r3, #1
 801697e:	d806      	bhi.n	801698e <etharp_output_to_arp_index+0x32>
 8016980:	4b40      	ldr	r3, [pc, #256]	; (8016a84 <etharp_output_to_arp_index+0x128>)
 8016982:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016986:	4940      	ldr	r1, [pc, #256]	; (8016a88 <etharp_output_to_arp_index+0x12c>)
 8016988:	4840      	ldr	r0, [pc, #256]	; (8016a8c <etharp_output_to_arp_index+0x130>)
 801698a:	f002 f9e3 	bl	8018d54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801698e:	79fa      	ldrb	r2, [r7, #7]
 8016990:	493b      	ldr	r1, [pc, #236]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 8016992:	4613      	mov	r3, r2
 8016994:	005b      	lsls	r3, r3, #1
 8016996:	4413      	add	r3, r2
 8016998:	00db      	lsls	r3, r3, #3
 801699a:	440b      	add	r3, r1
 801699c:	3314      	adds	r3, #20
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	2b02      	cmp	r3, #2
 80169a2:	d153      	bne.n	8016a4c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80169a4:	79fa      	ldrb	r2, [r7, #7]
 80169a6:	4936      	ldr	r1, [pc, #216]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 80169a8:	4613      	mov	r3, r2
 80169aa:	005b      	lsls	r3, r3, #1
 80169ac:	4413      	add	r3, r2
 80169ae:	00db      	lsls	r3, r3, #3
 80169b0:	440b      	add	r3, r1
 80169b2:	3312      	adds	r3, #18
 80169b4:	881b      	ldrh	r3, [r3, #0]
 80169b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80169ba:	d919      	bls.n	80169f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80169bc:	79fa      	ldrb	r2, [r7, #7]
 80169be:	4613      	mov	r3, r2
 80169c0:	005b      	lsls	r3, r3, #1
 80169c2:	4413      	add	r3, r2
 80169c4:	00db      	lsls	r3, r3, #3
 80169c6:	4a2e      	ldr	r2, [pc, #184]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 80169c8:	4413      	add	r3, r2
 80169ca:	3304      	adds	r3, #4
 80169cc:	4619      	mov	r1, r3
 80169ce:	68f8      	ldr	r0, [r7, #12]
 80169d0:	f000 fb4c 	bl	801706c <etharp_request>
 80169d4:	4603      	mov	r3, r0
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d138      	bne.n	8016a4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80169da:	79fa      	ldrb	r2, [r7, #7]
 80169dc:	4928      	ldr	r1, [pc, #160]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 80169de:	4613      	mov	r3, r2
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	4413      	add	r3, r2
 80169e4:	00db      	lsls	r3, r3, #3
 80169e6:	440b      	add	r3, r1
 80169e8:	3314      	adds	r3, #20
 80169ea:	2203      	movs	r2, #3
 80169ec:	701a      	strb	r2, [r3, #0]
 80169ee:	e02d      	b.n	8016a4c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80169f0:	79fa      	ldrb	r2, [r7, #7]
 80169f2:	4923      	ldr	r1, [pc, #140]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 80169f4:	4613      	mov	r3, r2
 80169f6:	005b      	lsls	r3, r3, #1
 80169f8:	4413      	add	r3, r2
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	440b      	add	r3, r1
 80169fe:	3312      	adds	r3, #18
 8016a00:	881b      	ldrh	r3, [r3, #0]
 8016a02:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016a06:	d321      	bcc.n	8016a4c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016a08:	79fa      	ldrb	r2, [r7, #7]
 8016a0a:	4613      	mov	r3, r2
 8016a0c:	005b      	lsls	r3, r3, #1
 8016a0e:	4413      	add	r3, r2
 8016a10:	00db      	lsls	r3, r3, #3
 8016a12:	4a1b      	ldr	r2, [pc, #108]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 8016a14:	4413      	add	r3, r2
 8016a16:	1d19      	adds	r1, r3, #4
 8016a18:	79fa      	ldrb	r2, [r7, #7]
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	005b      	lsls	r3, r3, #1
 8016a1e:	4413      	add	r3, r2
 8016a20:	00db      	lsls	r3, r3, #3
 8016a22:	3308      	adds	r3, #8
 8016a24:	4a16      	ldr	r2, [pc, #88]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 8016a26:	4413      	add	r3, r2
 8016a28:	3304      	adds	r3, #4
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	68f8      	ldr	r0, [r7, #12]
 8016a2e:	f000 fafb 	bl	8017028 <etharp_request_dst>
 8016a32:	4603      	mov	r3, r0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d109      	bne.n	8016a4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016a38:	79fa      	ldrb	r2, [r7, #7]
 8016a3a:	4911      	ldr	r1, [pc, #68]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	005b      	lsls	r3, r3, #1
 8016a40:	4413      	add	r3, r2
 8016a42:	00db      	lsls	r3, r3, #3
 8016a44:	440b      	add	r3, r1
 8016a46:	3314      	adds	r3, #20
 8016a48:	2203      	movs	r2, #3
 8016a4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016a52:	79fa      	ldrb	r2, [r7, #7]
 8016a54:	4613      	mov	r3, r2
 8016a56:	005b      	lsls	r3, r3, #1
 8016a58:	4413      	add	r3, r2
 8016a5a:	00db      	lsls	r3, r3, #3
 8016a5c:	3308      	adds	r3, #8
 8016a5e:	4a08      	ldr	r2, [pc, #32]	; (8016a80 <etharp_output_to_arp_index+0x124>)
 8016a60:	4413      	add	r3, r2
 8016a62:	3304      	adds	r3, #4
 8016a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016a68:	9200      	str	r2, [sp, #0]
 8016a6a:	460a      	mov	r2, r1
 8016a6c:	68b9      	ldr	r1, [r7, #8]
 8016a6e:	68f8      	ldr	r0, [r7, #12]
 8016a70:	f001 fe40 	bl	80186f4 <ethernet_output>
 8016a74:	4603      	mov	r3, r0
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	3710      	adds	r7, #16
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd80      	pop	{r7, pc}
 8016a7e:	bf00      	nop
 8016a80:	2000d9e8 	.word	0x2000d9e8
 8016a84:	0801c6cc 	.word	0x0801c6cc
 8016a88:	0801c83c 	.word	0x0801c83c
 8016a8c:	0801c744 	.word	0x0801c744

08016a90 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b08a      	sub	sp, #40	; 0x28
 8016a94:	af02      	add	r7, sp, #8
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	60b9      	str	r1, [r7, #8]
 8016a9a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d106      	bne.n	8016ab4 <etharp_output+0x24>
 8016aa6:	4b73      	ldr	r3, [pc, #460]	; (8016c74 <etharp_output+0x1e4>)
 8016aa8:	f240 321e 	movw	r2, #798	; 0x31e
 8016aac:	4972      	ldr	r1, [pc, #456]	; (8016c78 <etharp_output+0x1e8>)
 8016aae:	4873      	ldr	r0, [pc, #460]	; (8016c7c <etharp_output+0x1ec>)
 8016ab0:	f002 f950 	bl	8018d54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d106      	bne.n	8016ac8 <etharp_output+0x38>
 8016aba:	4b6e      	ldr	r3, [pc, #440]	; (8016c74 <etharp_output+0x1e4>)
 8016abc:	f240 321f 	movw	r2, #799	; 0x31f
 8016ac0:	496f      	ldr	r1, [pc, #444]	; (8016c80 <etharp_output+0x1f0>)
 8016ac2:	486e      	ldr	r0, [pc, #440]	; (8016c7c <etharp_output+0x1ec>)
 8016ac4:	f002 f946 	bl	8018d54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d106      	bne.n	8016adc <etharp_output+0x4c>
 8016ace:	4b69      	ldr	r3, [pc, #420]	; (8016c74 <etharp_output+0x1e4>)
 8016ad0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016ad4:	496b      	ldr	r1, [pc, #428]	; (8016c84 <etharp_output+0x1f4>)
 8016ad6:	4869      	ldr	r0, [pc, #420]	; (8016c7c <etharp_output+0x1ec>)
 8016ad8:	f002 f93c 	bl	8018d54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	68f9      	ldr	r1, [r7, #12]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f000 fef8 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d002      	beq.n	8016af4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016aee:	4b66      	ldr	r3, [pc, #408]	; (8016c88 <etharp_output+0x1f8>)
 8016af0:	61fb      	str	r3, [r7, #28]
 8016af2:	e0af      	b.n	8016c54 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016afc:	2be0      	cmp	r3, #224	; 0xe0
 8016afe:	d118      	bne.n	8016b32 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016b00:	2301      	movs	r3, #1
 8016b02:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016b04:	2300      	movs	r3, #0
 8016b06:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016b08:	235e      	movs	r3, #94	; 0x5e
 8016b0a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	3301      	adds	r3, #1
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b16:	b2db      	uxtb	r3, r3
 8016b18:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	3302      	adds	r3, #2
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	3303      	adds	r3, #3
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016b2a:	f107 0310 	add.w	r3, r7, #16
 8016b2e:	61fb      	str	r3, [r7, #28]
 8016b30:	e090      	b.n	8016c54 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681a      	ldr	r2, [r3, #0]
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	3304      	adds	r3, #4
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	405a      	eors	r2, r3
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	3308      	adds	r3, #8
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	4013      	ands	r3, r2
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d012      	beq.n	8016b70 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016b50:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016b54:	4293      	cmp	r3, r2
 8016b56:	d00b      	beq.n	8016b70 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	330c      	adds	r3, #12
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d003      	beq.n	8016b6a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	330c      	adds	r3, #12
 8016b66:	61bb      	str	r3, [r7, #24]
 8016b68:	e002      	b.n	8016b70 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016b6a:	f06f 0303 	mvn.w	r3, #3
 8016b6e:	e07d      	b.n	8016c6c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016b70:	4b46      	ldr	r3, [pc, #280]	; (8016c8c <etharp_output+0x1fc>)
 8016b72:	781b      	ldrb	r3, [r3, #0]
 8016b74:	4619      	mov	r1, r3
 8016b76:	4a46      	ldr	r2, [pc, #280]	; (8016c90 <etharp_output+0x200>)
 8016b78:	460b      	mov	r3, r1
 8016b7a:	005b      	lsls	r3, r3, #1
 8016b7c:	440b      	add	r3, r1
 8016b7e:	00db      	lsls	r3, r3, #3
 8016b80:	4413      	add	r3, r2
 8016b82:	3314      	adds	r3, #20
 8016b84:	781b      	ldrb	r3, [r3, #0]
 8016b86:	2b01      	cmp	r3, #1
 8016b88:	d925      	bls.n	8016bd6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016b8a:	4b40      	ldr	r3, [pc, #256]	; (8016c8c <etharp_output+0x1fc>)
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	4619      	mov	r1, r3
 8016b90:	4a3f      	ldr	r2, [pc, #252]	; (8016c90 <etharp_output+0x200>)
 8016b92:	460b      	mov	r3, r1
 8016b94:	005b      	lsls	r3, r3, #1
 8016b96:	440b      	add	r3, r1
 8016b98:	00db      	lsls	r3, r3, #3
 8016b9a:	4413      	add	r3, r2
 8016b9c:	3308      	adds	r3, #8
 8016b9e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d117      	bne.n	8016bd6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	681a      	ldr	r2, [r3, #0]
 8016baa:	4b38      	ldr	r3, [pc, #224]	; (8016c8c <etharp_output+0x1fc>)
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	4618      	mov	r0, r3
 8016bb0:	4937      	ldr	r1, [pc, #220]	; (8016c90 <etharp_output+0x200>)
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	005b      	lsls	r3, r3, #1
 8016bb6:	4403      	add	r3, r0
 8016bb8:	00db      	lsls	r3, r3, #3
 8016bba:	440b      	add	r3, r1
 8016bbc:	3304      	adds	r3, #4
 8016bbe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d108      	bne.n	8016bd6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016bc4:	4b31      	ldr	r3, [pc, #196]	; (8016c8c <etharp_output+0x1fc>)
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	461a      	mov	r2, r3
 8016bca:	68b9      	ldr	r1, [r7, #8]
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	f7ff fec5 	bl	801695c <etharp_output_to_arp_index>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	e04a      	b.n	8016c6c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	75fb      	strb	r3, [r7, #23]
 8016bda:	e031      	b.n	8016c40 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016bdc:	7dfa      	ldrb	r2, [r7, #23]
 8016bde:	492c      	ldr	r1, [pc, #176]	; (8016c90 <etharp_output+0x200>)
 8016be0:	4613      	mov	r3, r2
 8016be2:	005b      	lsls	r3, r3, #1
 8016be4:	4413      	add	r3, r2
 8016be6:	00db      	lsls	r3, r3, #3
 8016be8:	440b      	add	r3, r1
 8016bea:	3314      	adds	r3, #20
 8016bec:	781b      	ldrb	r3, [r3, #0]
 8016bee:	2b01      	cmp	r3, #1
 8016bf0:	d923      	bls.n	8016c3a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016bf2:	7dfa      	ldrb	r2, [r7, #23]
 8016bf4:	4926      	ldr	r1, [pc, #152]	; (8016c90 <etharp_output+0x200>)
 8016bf6:	4613      	mov	r3, r2
 8016bf8:	005b      	lsls	r3, r3, #1
 8016bfa:	4413      	add	r3, r2
 8016bfc:	00db      	lsls	r3, r3, #3
 8016bfe:	440b      	add	r3, r1
 8016c00:	3308      	adds	r3, #8
 8016c02:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016c04:	68fa      	ldr	r2, [r7, #12]
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d117      	bne.n	8016c3a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	6819      	ldr	r1, [r3, #0]
 8016c0e:	7dfa      	ldrb	r2, [r7, #23]
 8016c10:	481f      	ldr	r0, [pc, #124]	; (8016c90 <etharp_output+0x200>)
 8016c12:	4613      	mov	r3, r2
 8016c14:	005b      	lsls	r3, r3, #1
 8016c16:	4413      	add	r3, r2
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	4403      	add	r3, r0
 8016c1c:	3304      	adds	r3, #4
 8016c1e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016c20:	4299      	cmp	r1, r3
 8016c22:	d10a      	bne.n	8016c3a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016c24:	4a19      	ldr	r2, [pc, #100]	; (8016c8c <etharp_output+0x1fc>)
 8016c26:	7dfb      	ldrb	r3, [r7, #23]
 8016c28:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016c2a:	7dfb      	ldrb	r3, [r7, #23]
 8016c2c:	461a      	mov	r2, r3
 8016c2e:	68b9      	ldr	r1, [r7, #8]
 8016c30:	68f8      	ldr	r0, [r7, #12]
 8016c32:	f7ff fe93 	bl	801695c <etharp_output_to_arp_index>
 8016c36:	4603      	mov	r3, r0
 8016c38:	e018      	b.n	8016c6c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016c3a:	7dfb      	ldrb	r3, [r7, #23]
 8016c3c:	3301      	adds	r3, #1
 8016c3e:	75fb      	strb	r3, [r7, #23]
 8016c40:	7dfb      	ldrb	r3, [r7, #23]
 8016c42:	2b09      	cmp	r3, #9
 8016c44:	d9ca      	bls.n	8016bdc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016c46:	68ba      	ldr	r2, [r7, #8]
 8016c48:	69b9      	ldr	r1, [r7, #24]
 8016c4a:	68f8      	ldr	r0, [r7, #12]
 8016c4c:	f000 f822 	bl	8016c94 <etharp_query>
 8016c50:	4603      	mov	r3, r0
 8016c52:	e00b      	b.n	8016c6c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	69fb      	ldr	r3, [r7, #28]
 8016c62:	68b9      	ldr	r1, [r7, #8]
 8016c64:	68f8      	ldr	r0, [r7, #12]
 8016c66:	f001 fd45 	bl	80186f4 <ethernet_output>
 8016c6a:	4603      	mov	r3, r0
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3720      	adds	r7, #32
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}
 8016c74:	0801c6cc 	.word	0x0801c6cc
 8016c78:	0801c81c 	.word	0x0801c81c
 8016c7c:	0801c744 	.word	0x0801c744
 8016c80:	0801c86c 	.word	0x0801c86c
 8016c84:	0801c80c 	.word	0x0801c80c
 8016c88:	0801cf68 	.word	0x0801cf68
 8016c8c:	2000dad8 	.word	0x2000dad8
 8016c90:	2000d9e8 	.word	0x2000d9e8

08016c94 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b08c      	sub	sp, #48	; 0x30
 8016c98:	af02      	add	r7, sp, #8
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	60b9      	str	r1, [r7, #8]
 8016c9e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	3326      	adds	r3, #38	; 0x26
 8016ca4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016ca6:	23ff      	movs	r3, #255	; 0xff
 8016ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016cac:	2300      	movs	r3, #0
 8016cae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	68f9      	ldr	r1, [r7, #12]
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f000 fe0e 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d10c      	bne.n	8016cdc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016cca:	2be0      	cmp	r3, #224	; 0xe0
 8016ccc:	d006      	beq.n	8016cdc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d003      	beq.n	8016cdc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d102      	bne.n	8016ce2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016cdc:	f06f 030f 	mvn.w	r3, #15
 8016ce0:	e101      	b.n	8016ee6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016ce2:	68fa      	ldr	r2, [r7, #12]
 8016ce4:	2101      	movs	r1, #1
 8016ce6:	68b8      	ldr	r0, [r7, #8]
 8016ce8:	f7ff fb60 	bl	80163ac <etharp_find_entry>
 8016cec:	4603      	mov	r3, r0
 8016cee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016cf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	da02      	bge.n	8016cfe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016cf8:	8a7b      	ldrh	r3, [r7, #18]
 8016cfa:	b25b      	sxtb	r3, r3
 8016cfc:	e0f3      	b.n	8016ee6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016cfe:	8a7b      	ldrh	r3, [r7, #18]
 8016d00:	2b7e      	cmp	r3, #126	; 0x7e
 8016d02:	d906      	bls.n	8016d12 <etharp_query+0x7e>
 8016d04:	4b7a      	ldr	r3, [pc, #488]	; (8016ef0 <etharp_query+0x25c>)
 8016d06:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016d0a:	497a      	ldr	r1, [pc, #488]	; (8016ef4 <etharp_query+0x260>)
 8016d0c:	487a      	ldr	r0, [pc, #488]	; (8016ef8 <etharp_query+0x264>)
 8016d0e:	f002 f821 	bl	8018d54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016d12:	8a7b      	ldrh	r3, [r7, #18]
 8016d14:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016d16:	7c7a      	ldrb	r2, [r7, #17]
 8016d18:	4978      	ldr	r1, [pc, #480]	; (8016efc <etharp_query+0x268>)
 8016d1a:	4613      	mov	r3, r2
 8016d1c:	005b      	lsls	r3, r3, #1
 8016d1e:	4413      	add	r3, r2
 8016d20:	00db      	lsls	r3, r3, #3
 8016d22:	440b      	add	r3, r1
 8016d24:	3314      	adds	r3, #20
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d115      	bne.n	8016d58 <etharp_query+0xc4>
    is_new_entry = 1;
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016d30:	7c7a      	ldrb	r2, [r7, #17]
 8016d32:	4972      	ldr	r1, [pc, #456]	; (8016efc <etharp_query+0x268>)
 8016d34:	4613      	mov	r3, r2
 8016d36:	005b      	lsls	r3, r3, #1
 8016d38:	4413      	add	r3, r2
 8016d3a:	00db      	lsls	r3, r3, #3
 8016d3c:	440b      	add	r3, r1
 8016d3e:	3314      	adds	r3, #20
 8016d40:	2201      	movs	r2, #1
 8016d42:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016d44:	7c7a      	ldrb	r2, [r7, #17]
 8016d46:	496d      	ldr	r1, [pc, #436]	; (8016efc <etharp_query+0x268>)
 8016d48:	4613      	mov	r3, r2
 8016d4a:	005b      	lsls	r3, r3, #1
 8016d4c:	4413      	add	r3, r2
 8016d4e:	00db      	lsls	r3, r3, #3
 8016d50:	440b      	add	r3, r1
 8016d52:	3308      	adds	r3, #8
 8016d54:	68fa      	ldr	r2, [r7, #12]
 8016d56:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016d58:	7c7a      	ldrb	r2, [r7, #17]
 8016d5a:	4968      	ldr	r1, [pc, #416]	; (8016efc <etharp_query+0x268>)
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	4413      	add	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	440b      	add	r3, r1
 8016d66:	3314      	adds	r3, #20
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b01      	cmp	r3, #1
 8016d6c:	d011      	beq.n	8016d92 <etharp_query+0xfe>
 8016d6e:	7c7a      	ldrb	r2, [r7, #17]
 8016d70:	4962      	ldr	r1, [pc, #392]	; (8016efc <etharp_query+0x268>)
 8016d72:	4613      	mov	r3, r2
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	4413      	add	r3, r2
 8016d78:	00db      	lsls	r3, r3, #3
 8016d7a:	440b      	add	r3, r1
 8016d7c:	3314      	adds	r3, #20
 8016d7e:	781b      	ldrb	r3, [r3, #0]
 8016d80:	2b01      	cmp	r3, #1
 8016d82:	d806      	bhi.n	8016d92 <etharp_query+0xfe>
 8016d84:	4b5a      	ldr	r3, [pc, #360]	; (8016ef0 <etharp_query+0x25c>)
 8016d86:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016d8a:	495d      	ldr	r1, [pc, #372]	; (8016f00 <etharp_query+0x26c>)
 8016d8c:	485a      	ldr	r0, [pc, #360]	; (8016ef8 <etharp_query+0x264>)
 8016d8e:	f001 ffe1 	bl	8018d54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016d92:	6a3b      	ldr	r3, [r7, #32]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d102      	bne.n	8016d9e <etharp_query+0x10a>
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d10c      	bne.n	8016db8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016d9e:	68b9      	ldr	r1, [r7, #8]
 8016da0:	68f8      	ldr	r0, [r7, #12]
 8016da2:	f000 f963 	bl	801706c <etharp_request>
 8016da6:	4603      	mov	r3, r0
 8016da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d102      	bne.n	8016db8 <etharp_query+0x124>
      return result;
 8016db2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016db6:	e096      	b.n	8016ee6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d106      	bne.n	8016dcc <etharp_query+0x138>
 8016dbe:	4b4c      	ldr	r3, [pc, #304]	; (8016ef0 <etharp_query+0x25c>)
 8016dc0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016dc4:	494f      	ldr	r1, [pc, #316]	; (8016f04 <etharp_query+0x270>)
 8016dc6:	484c      	ldr	r0, [pc, #304]	; (8016ef8 <etharp_query+0x264>)
 8016dc8:	f001 ffc4 	bl	8018d54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016dcc:	7c7a      	ldrb	r2, [r7, #17]
 8016dce:	494b      	ldr	r1, [pc, #300]	; (8016efc <etharp_query+0x268>)
 8016dd0:	4613      	mov	r3, r2
 8016dd2:	005b      	lsls	r3, r3, #1
 8016dd4:	4413      	add	r3, r2
 8016dd6:	00db      	lsls	r3, r3, #3
 8016dd8:	440b      	add	r3, r1
 8016dda:	3314      	adds	r3, #20
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	2b01      	cmp	r3, #1
 8016de0:	d917      	bls.n	8016e12 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016de2:	4a49      	ldr	r2, [pc, #292]	; (8016f08 <etharp_query+0x274>)
 8016de4:	7c7b      	ldrb	r3, [r7, #17]
 8016de6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016de8:	7c7a      	ldrb	r2, [r7, #17]
 8016dea:	4613      	mov	r3, r2
 8016dec:	005b      	lsls	r3, r3, #1
 8016dee:	4413      	add	r3, r2
 8016df0:	00db      	lsls	r3, r3, #3
 8016df2:	3308      	adds	r3, #8
 8016df4:	4a41      	ldr	r2, [pc, #260]	; (8016efc <etharp_query+0x268>)
 8016df6:	4413      	add	r3, r2
 8016df8:	3304      	adds	r3, #4
 8016dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016dfe:	9200      	str	r2, [sp, #0]
 8016e00:	697a      	ldr	r2, [r7, #20]
 8016e02:	6879      	ldr	r1, [r7, #4]
 8016e04:	68f8      	ldr	r0, [r7, #12]
 8016e06:	f001 fc75 	bl	80186f4 <ethernet_output>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e10:	e067      	b.n	8016ee2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016e12:	7c7a      	ldrb	r2, [r7, #17]
 8016e14:	4939      	ldr	r1, [pc, #228]	; (8016efc <etharp_query+0x268>)
 8016e16:	4613      	mov	r3, r2
 8016e18:	005b      	lsls	r3, r3, #1
 8016e1a:	4413      	add	r3, r2
 8016e1c:	00db      	lsls	r3, r3, #3
 8016e1e:	440b      	add	r3, r1
 8016e20:	3314      	adds	r3, #20
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	2b01      	cmp	r3, #1
 8016e26:	d15c      	bne.n	8016ee2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016e30:	e01c      	b.n	8016e6c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016e32:	69fb      	ldr	r3, [r7, #28]
 8016e34:	895a      	ldrh	r2, [r3, #10]
 8016e36:	69fb      	ldr	r3, [r7, #28]
 8016e38:	891b      	ldrh	r3, [r3, #8]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d10a      	bne.n	8016e54 <etharp_query+0x1c0>
 8016e3e:	69fb      	ldr	r3, [r7, #28]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d006      	beq.n	8016e54 <etharp_query+0x1c0>
 8016e46:	4b2a      	ldr	r3, [pc, #168]	; (8016ef0 <etharp_query+0x25c>)
 8016e48:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016e4c:	492f      	ldr	r1, [pc, #188]	; (8016f0c <etharp_query+0x278>)
 8016e4e:	482a      	ldr	r0, [pc, #168]	; (8016ef8 <etharp_query+0x264>)
 8016e50:	f001 ff80 	bl	8018d54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016e54:	69fb      	ldr	r3, [r7, #28]
 8016e56:	7b1b      	ldrb	r3, [r3, #12]
 8016e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d002      	beq.n	8016e66 <etharp_query+0x1d2>
        copy_needed = 1;
 8016e60:	2301      	movs	r3, #1
 8016e62:	61bb      	str	r3, [r7, #24]
        break;
 8016e64:	e005      	b.n	8016e72 <etharp_query+0x1de>
      }
      p = p->next;
 8016e66:	69fb      	ldr	r3, [r7, #28]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016e6c:	69fb      	ldr	r3, [r7, #28]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d1df      	bne.n	8016e32 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016e72:	69bb      	ldr	r3, [r7, #24]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d007      	beq.n	8016e88 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016e7e:	200e      	movs	r0, #14
 8016e80:	f7f9 fcf8 	bl	8010874 <pbuf_clone>
 8016e84:	61f8      	str	r0, [r7, #28]
 8016e86:	e004      	b.n	8016e92 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016e8c:	69f8      	ldr	r0, [r7, #28]
 8016e8e:	f7f9 fb2f 	bl	80104f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d021      	beq.n	8016edc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016e98:	7c7a      	ldrb	r2, [r7, #17]
 8016e9a:	4918      	ldr	r1, [pc, #96]	; (8016efc <etharp_query+0x268>)
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	005b      	lsls	r3, r3, #1
 8016ea0:	4413      	add	r3, r2
 8016ea2:	00db      	lsls	r3, r3, #3
 8016ea4:	440b      	add	r3, r1
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d00a      	beq.n	8016ec2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016eac:	7c7a      	ldrb	r2, [r7, #17]
 8016eae:	4913      	ldr	r1, [pc, #76]	; (8016efc <etharp_query+0x268>)
 8016eb0:	4613      	mov	r3, r2
 8016eb2:	005b      	lsls	r3, r3, #1
 8016eb4:	4413      	add	r3, r2
 8016eb6:	00db      	lsls	r3, r3, #3
 8016eb8:	440b      	add	r3, r1
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7f9 fa71 	bl	80103a4 <pbuf_free>
      }
      arp_table[i].q = p;
 8016ec2:	7c7a      	ldrb	r2, [r7, #17]
 8016ec4:	490d      	ldr	r1, [pc, #52]	; (8016efc <etharp_query+0x268>)
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	005b      	lsls	r3, r3, #1
 8016eca:	4413      	add	r3, r2
 8016ecc:	00db      	lsls	r3, r3, #3
 8016ece:	440b      	add	r3, r1
 8016ed0:	69fa      	ldr	r2, [r7, #28]
 8016ed2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016eda:	e002      	b.n	8016ee2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016edc:	23ff      	movs	r3, #255	; 0xff
 8016ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016ee2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3728      	adds	r7, #40	; 0x28
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop
 8016ef0:	0801c6cc 	.word	0x0801c6cc
 8016ef4:	0801c878 	.word	0x0801c878
 8016ef8:	0801c744 	.word	0x0801c744
 8016efc:	2000d9e8 	.word	0x2000d9e8
 8016f00:	0801c888 	.word	0x0801c888
 8016f04:	0801c86c 	.word	0x0801c86c
 8016f08:	2000dad8 	.word	0x2000dad8
 8016f0c:	0801c8b0 	.word	0x0801c8b0

08016f10 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b08a      	sub	sp, #40	; 0x28
 8016f14:	af02      	add	r7, sp, #8
 8016f16:	60f8      	str	r0, [r7, #12]
 8016f18:	60b9      	str	r1, [r7, #8]
 8016f1a:	607a      	str	r2, [r7, #4]
 8016f1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d106      	bne.n	8016f36 <etharp_raw+0x26>
 8016f28:	4b3a      	ldr	r3, [pc, #232]	; (8017014 <etharp_raw+0x104>)
 8016f2a:	f240 4257 	movw	r2, #1111	; 0x457
 8016f2e:	493a      	ldr	r1, [pc, #232]	; (8017018 <etharp_raw+0x108>)
 8016f30:	483a      	ldr	r0, [pc, #232]	; (801701c <etharp_raw+0x10c>)
 8016f32:	f001 ff0f 	bl	8018d54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016f36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f3a:	211c      	movs	r1, #28
 8016f3c:	200e      	movs	r0, #14
 8016f3e:	f7f8 ff4d 	bl	800fddc <pbuf_alloc>
 8016f42:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016f44:	69bb      	ldr	r3, [r7, #24]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d102      	bne.n	8016f50 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f4e:	e05d      	b.n	801700c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016f50:	69bb      	ldr	r3, [r7, #24]
 8016f52:	895b      	ldrh	r3, [r3, #10]
 8016f54:	2b1b      	cmp	r3, #27
 8016f56:	d806      	bhi.n	8016f66 <etharp_raw+0x56>
 8016f58:	4b2e      	ldr	r3, [pc, #184]	; (8017014 <etharp_raw+0x104>)
 8016f5a:	f240 4262 	movw	r2, #1122	; 0x462
 8016f5e:	4930      	ldr	r1, [pc, #192]	; (8017020 <etharp_raw+0x110>)
 8016f60:	482e      	ldr	r0, [pc, #184]	; (801701c <etharp_raw+0x10c>)
 8016f62:	f001 fef7 	bl	8018d54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016f66:	69bb      	ldr	r3, [r7, #24]
 8016f68:	685b      	ldr	r3, [r3, #4]
 8016f6a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016f6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7f7 fe26 	bl	800ebc0 <lwip_htons>
 8016f74:	4603      	mov	r3, r0
 8016f76:	461a      	mov	r2, r3
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016f82:	2b06      	cmp	r3, #6
 8016f84:	d006      	beq.n	8016f94 <etharp_raw+0x84>
 8016f86:	4b23      	ldr	r3, [pc, #140]	; (8017014 <etharp_raw+0x104>)
 8016f88:	f240 4269 	movw	r2, #1129	; 0x469
 8016f8c:	4925      	ldr	r1, [pc, #148]	; (8017024 <etharp_raw+0x114>)
 8016f8e:	4823      	ldr	r0, [pc, #140]	; (801701c <etharp_raw+0x10c>)
 8016f90:	f001 fee0 	bl	8018d54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	3308      	adds	r3, #8
 8016f98:	2206      	movs	r2, #6
 8016f9a:	6839      	ldr	r1, [r7, #0]
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f001 fe14 	bl	8018bca <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016fa2:	697b      	ldr	r3, [r7, #20]
 8016fa4:	3312      	adds	r3, #18
 8016fa6:	2206      	movs	r2, #6
 8016fa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016faa:	4618      	mov	r0, r3
 8016fac:	f001 fe0d 	bl	8018bca <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	330e      	adds	r3, #14
 8016fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016fb6:	6812      	ldr	r2, [r2, #0]
 8016fb8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	3318      	adds	r3, #24
 8016fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fc0:	6812      	ldr	r2, [r2, #0]
 8016fc2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	701a      	strb	r2, [r3, #0]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f042 0201 	orr.w	r2, r2, #1
 8016fd0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	f042 0208 	orr.w	r2, r2, #8
 8016fda:	709a      	strb	r2, [r3, #2]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016fe0:	697b      	ldr	r3, [r7, #20]
 8016fe2:	2206      	movs	r2, #6
 8016fe4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016fe6:	697b      	ldr	r3, [r7, #20]
 8016fe8:	2204      	movs	r2, #4
 8016fea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016fec:	f640 0306 	movw	r3, #2054	; 0x806
 8016ff0:	9300      	str	r3, [sp, #0]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	68ba      	ldr	r2, [r7, #8]
 8016ff6:	69b9      	ldr	r1, [r7, #24]
 8016ff8:	68f8      	ldr	r0, [r7, #12]
 8016ffa:	f001 fb7b 	bl	80186f4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016ffe:	69b8      	ldr	r0, [r7, #24]
 8017000:	f7f9 f9d0 	bl	80103a4 <pbuf_free>
  p = NULL;
 8017004:	2300      	movs	r3, #0
 8017006:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017008:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801700c:	4618      	mov	r0, r3
 801700e:	3720      	adds	r7, #32
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}
 8017014:	0801c6cc 	.word	0x0801c6cc
 8017018:	0801c81c 	.word	0x0801c81c
 801701c:	0801c744 	.word	0x0801c744
 8017020:	0801c8cc 	.word	0x0801c8cc
 8017024:	0801c900 	.word	0x0801c900

08017028 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b088      	sub	sp, #32
 801702c:	af04      	add	r7, sp, #16
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017044:	2201      	movs	r2, #1
 8017046:	9203      	str	r2, [sp, #12]
 8017048:	68ba      	ldr	r2, [r7, #8]
 801704a:	9202      	str	r2, [sp, #8]
 801704c:	4a06      	ldr	r2, [pc, #24]	; (8017068 <etharp_request_dst+0x40>)
 801704e:	9201      	str	r2, [sp, #4]
 8017050:	9300      	str	r3, [sp, #0]
 8017052:	4603      	mov	r3, r0
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f7ff ff5a 	bl	8016f10 <etharp_raw>
 801705c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801705e:	4618      	mov	r0, r3
 8017060:	3710      	adds	r7, #16
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop
 8017068:	0801cf70 	.word	0x0801cf70

0801706c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b082      	sub	sp, #8
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017076:	4a05      	ldr	r2, [pc, #20]	; (801708c <etharp_request+0x20>)
 8017078:	6839      	ldr	r1, [r7, #0]
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f7ff ffd4 	bl	8017028 <etharp_request_dst>
 8017080:	4603      	mov	r3, r0
}
 8017082:	4618      	mov	r0, r3
 8017084:	3708      	adds	r7, #8
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	0801cf68 	.word	0x0801cf68

08017090 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b08e      	sub	sp, #56	; 0x38
 8017094:	af04      	add	r7, sp, #16
 8017096:	6078      	str	r0, [r7, #4]
 8017098:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801709a:	4b79      	ldr	r3, [pc, #484]	; (8017280 <icmp_input+0x1f0>)
 801709c:	689b      	ldr	r3, [r3, #8]
 801709e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80170a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	f003 030f 	and.w	r3, r3, #15
 80170a8:	b2db      	uxtb	r3, r3
 80170aa:	009b      	lsls	r3, r3, #2
 80170ac:	b2db      	uxtb	r3, r3
 80170ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80170b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170b2:	2b13      	cmp	r3, #19
 80170b4:	f240 80cd 	bls.w	8017252 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	895b      	ldrh	r3, [r3, #10]
 80170bc:	2b03      	cmp	r3, #3
 80170be:	f240 80ca 	bls.w	8017256 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80170cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 80b7 	beq.w	8017244 <icmp_input+0x1b4>
 80170d6:	2b08      	cmp	r3, #8
 80170d8:	f040 80b7 	bne.w	801724a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80170dc:	4b69      	ldr	r3, [pc, #420]	; (8017284 <icmp_input+0x1f4>)
 80170de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80170e0:	4b67      	ldr	r3, [pc, #412]	; (8017280 <icmp_input+0x1f0>)
 80170e2:	695b      	ldr	r3, [r3, #20]
 80170e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80170e8:	2be0      	cmp	r3, #224	; 0xe0
 80170ea:	f000 80bb 	beq.w	8017264 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80170ee:	4b64      	ldr	r3, [pc, #400]	; (8017280 <icmp_input+0x1f0>)
 80170f0:	695b      	ldr	r3, [r3, #20]
 80170f2:	4a63      	ldr	r2, [pc, #396]	; (8017280 <icmp_input+0x1f0>)
 80170f4:	6812      	ldr	r2, [r2, #0]
 80170f6:	4611      	mov	r1, r2
 80170f8:	4618      	mov	r0, r3
 80170fa:	f000 fbed 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b00      	cmp	r3, #0
 8017102:	f040 80b1 	bne.w	8017268 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	891b      	ldrh	r3, [r3, #8]
 801710a:	2b07      	cmp	r3, #7
 801710c:	f240 80a5 	bls.w	801725a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017112:	330e      	adds	r3, #14
 8017114:	4619      	mov	r1, r3
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f7f9 f8ae 	bl	8010278 <pbuf_add_header>
 801711c:	4603      	mov	r3, r0
 801711e:	2b00      	cmp	r3, #0
 8017120:	d04b      	beq.n	80171ba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	891a      	ldrh	r2, [r3, #8]
 8017126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017128:	4413      	add	r3, r2
 801712a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	891b      	ldrh	r3, [r3, #8]
 8017130:	8b7a      	ldrh	r2, [r7, #26]
 8017132:	429a      	cmp	r2, r3
 8017134:	f0c0 809a 	bcc.w	801726c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017138:	8b7b      	ldrh	r3, [r7, #26]
 801713a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801713e:	4619      	mov	r1, r3
 8017140:	200e      	movs	r0, #14
 8017142:	f7f8 fe4b 	bl	800fddc <pbuf_alloc>
 8017146:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	2b00      	cmp	r3, #0
 801714c:	f000 8090 	beq.w	8017270 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	895b      	ldrh	r3, [r3, #10]
 8017154:	461a      	mov	r2, r3
 8017156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017158:	3308      	adds	r3, #8
 801715a:	429a      	cmp	r2, r3
 801715c:	d203      	bcs.n	8017166 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801715e:	6978      	ldr	r0, [r7, #20]
 8017160:	f7f9 f920 	bl	80103a4 <pbuf_free>
          goto icmperr;
 8017164:	e085      	b.n	8017272 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017166:	697b      	ldr	r3, [r7, #20]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801716c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801716e:	4618      	mov	r0, r3
 8017170:	f001 fd2b 	bl	8018bca <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017176:	4619      	mov	r1, r3
 8017178:	6978      	ldr	r0, [r7, #20]
 801717a:	f7f9 f88d 	bl	8010298 <pbuf_remove_header>
 801717e:	4603      	mov	r3, r0
 8017180:	2b00      	cmp	r3, #0
 8017182:	d009      	beq.n	8017198 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017184:	4b40      	ldr	r3, [pc, #256]	; (8017288 <icmp_input+0x1f8>)
 8017186:	22b6      	movs	r2, #182	; 0xb6
 8017188:	4940      	ldr	r1, [pc, #256]	; (801728c <icmp_input+0x1fc>)
 801718a:	4841      	ldr	r0, [pc, #260]	; (8017290 <icmp_input+0x200>)
 801718c:	f001 fde2 	bl	8018d54 <iprintf>
          pbuf_free(r);
 8017190:	6978      	ldr	r0, [r7, #20]
 8017192:	f7f9 f907 	bl	80103a4 <pbuf_free>
          goto icmperr;
 8017196:	e06c      	b.n	8017272 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017198:	6879      	ldr	r1, [r7, #4]
 801719a:	6978      	ldr	r0, [r7, #20]
 801719c:	f7f9 fa26 	bl	80105ec <pbuf_copy>
 80171a0:	4603      	mov	r3, r0
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d003      	beq.n	80171ae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80171a6:	6978      	ldr	r0, [r7, #20]
 80171a8:	f7f9 f8fc 	bl	80103a4 <pbuf_free>
          goto icmperr;
 80171ac:	e061      	b.n	8017272 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f7f9 f8f8 	bl	80103a4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	607b      	str	r3, [r7, #4]
 80171b8:	e00f      	b.n	80171da <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80171ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171bc:	330e      	adds	r3, #14
 80171be:	4619      	mov	r1, r3
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7f9 f869 	bl	8010298 <pbuf_remove_header>
 80171c6:	4603      	mov	r3, r0
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d006      	beq.n	80171da <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80171cc:	4b2e      	ldr	r3, [pc, #184]	; (8017288 <icmp_input+0x1f8>)
 80171ce:	22c7      	movs	r2, #199	; 0xc7
 80171d0:	4930      	ldr	r1, [pc, #192]	; (8017294 <icmp_input+0x204>)
 80171d2:	482f      	ldr	r0, [pc, #188]	; (8017290 <icmp_input+0x200>)
 80171d4:	f001 fdbe 	bl	8018d54 <iprintf>
          goto icmperr;
 80171d8:	e04b      	b.n	8017272 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	685b      	ldr	r3, [r3, #4]
 80171de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80171e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171e2:	4619      	mov	r1, r3
 80171e4:	6878      	ldr	r0, [r7, #4]
 80171e6:	f7f9 f847 	bl	8010278 <pbuf_add_header>
 80171ea:	4603      	mov	r3, r0
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d12b      	bne.n	8017248 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80171f6:	69fb      	ldr	r3, [r7, #28]
 80171f8:	681a      	ldr	r2, [r3, #0]
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80171fe:	4b20      	ldr	r3, [pc, #128]	; (8017280 <icmp_input+0x1f0>)
 8017200:	691a      	ldr	r2, [r3, #16]
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017206:	693b      	ldr	r3, [r7, #16]
 8017208:	2200      	movs	r2, #0
 801720a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	2200      	movs	r2, #0
 8017210:	709a      	strb	r2, [r3, #2]
 8017212:	2200      	movs	r2, #0
 8017214:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	22ff      	movs	r2, #255	; 0xff
 801721a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	2200      	movs	r2, #0
 8017220:	729a      	strb	r2, [r3, #10]
 8017222:	2200      	movs	r2, #0
 8017224:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	9302      	str	r3, [sp, #8]
 801722a:	2301      	movs	r3, #1
 801722c:	9301      	str	r3, [sp, #4]
 801722e:	2300      	movs	r3, #0
 8017230:	9300      	str	r3, [sp, #0]
 8017232:	23ff      	movs	r3, #255	; 0xff
 8017234:	2200      	movs	r2, #0
 8017236:	69f9      	ldr	r1, [r7, #28]
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f000 fa75 	bl	8017728 <ip4_output_if>
 801723e:	4603      	mov	r3, r0
 8017240:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017242:	e001      	b.n	8017248 <icmp_input+0x1b8>
      break;
 8017244:	bf00      	nop
 8017246:	e000      	b.n	801724a <icmp_input+0x1ba>
      break;
 8017248:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f7f9 f8aa 	bl	80103a4 <pbuf_free>
  return;
 8017250:	e013      	b.n	801727a <icmp_input+0x1ea>
    goto lenerr;
 8017252:	bf00      	nop
 8017254:	e002      	b.n	801725c <icmp_input+0x1cc>
    goto lenerr;
 8017256:	bf00      	nop
 8017258:	e000      	b.n	801725c <icmp_input+0x1cc>
        goto lenerr;
 801725a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f7f9 f8a1 	bl	80103a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017262:	e00a      	b.n	801727a <icmp_input+0x1ea>
        goto icmperr;
 8017264:	bf00      	nop
 8017266:	e004      	b.n	8017272 <icmp_input+0x1e2>
        goto icmperr;
 8017268:	bf00      	nop
 801726a:	e002      	b.n	8017272 <icmp_input+0x1e2>
          goto icmperr;
 801726c:	bf00      	nop
 801726e:	e000      	b.n	8017272 <icmp_input+0x1e2>
          goto icmperr;
 8017270:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f7f9 f896 	bl	80103a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017278:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801727a:	3728      	adds	r7, #40	; 0x28
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	2000a234 	.word	0x2000a234
 8017284:	2000a248 	.word	0x2000a248
 8017288:	0801c944 	.word	0x0801c944
 801728c:	0801c97c 	.word	0x0801c97c
 8017290:	0801c9b4 	.word	0x0801c9b4
 8017294:	0801c9dc 	.word	0x0801c9dc

08017298 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	460b      	mov	r3, r1
 80172a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80172a4:	78fb      	ldrb	r3, [r7, #3]
 80172a6:	461a      	mov	r2, r3
 80172a8:	2103      	movs	r1, #3
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f000 f814 	bl	80172d8 <icmp_send_response>
}
 80172b0:	bf00      	nop
 80172b2:	3708      	adds	r7, #8
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	460b      	mov	r3, r1
 80172c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80172c4:	78fb      	ldrb	r3, [r7, #3]
 80172c6:	461a      	mov	r2, r3
 80172c8:	210b      	movs	r1, #11
 80172ca:	6878      	ldr	r0, [r7, #4]
 80172cc:	f000 f804 	bl	80172d8 <icmp_send_response>
}
 80172d0:	bf00      	nop
 80172d2:	3708      	adds	r7, #8
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}

080172d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b08c      	sub	sp, #48	; 0x30
 80172dc:	af04      	add	r7, sp, #16
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	460b      	mov	r3, r1
 80172e2:	70fb      	strb	r3, [r7, #3]
 80172e4:	4613      	mov	r3, r2
 80172e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80172e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80172ec:	2124      	movs	r1, #36	; 0x24
 80172ee:	2022      	movs	r0, #34	; 0x22
 80172f0:	f7f8 fd74 	bl	800fddc <pbuf_alloc>
 80172f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80172f6:	69fb      	ldr	r3, [r7, #28]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d04c      	beq.n	8017396 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80172fc:	69fb      	ldr	r3, [r7, #28]
 80172fe:	895b      	ldrh	r3, [r3, #10]
 8017300:	2b23      	cmp	r3, #35	; 0x23
 8017302:	d806      	bhi.n	8017312 <icmp_send_response+0x3a>
 8017304:	4b26      	ldr	r3, [pc, #152]	; (80173a0 <icmp_send_response+0xc8>)
 8017306:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801730a:	4926      	ldr	r1, [pc, #152]	; (80173a4 <icmp_send_response+0xcc>)
 801730c:	4826      	ldr	r0, [pc, #152]	; (80173a8 <icmp_send_response+0xd0>)
 801730e:	f001 fd21 	bl	8018d54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017318:	69fb      	ldr	r3, [r7, #28]
 801731a:	685b      	ldr	r3, [r3, #4]
 801731c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	78fa      	ldrb	r2, [r7, #3]
 8017322:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017324:	697b      	ldr	r3, [r7, #20]
 8017326:	78ba      	ldrb	r2, [r7, #2]
 8017328:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	2200      	movs	r2, #0
 801732e:	711a      	strb	r2, [r3, #4]
 8017330:	2200      	movs	r2, #0
 8017332:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	2200      	movs	r2, #0
 8017338:	719a      	strb	r2, [r3, #6]
 801733a:	2200      	movs	r2, #0
 801733c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801733e:	69fb      	ldr	r3, [r7, #28]
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	f103 0008 	add.w	r0, r3, #8
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	685b      	ldr	r3, [r3, #4]
 801734a:	221c      	movs	r2, #28
 801734c:	4619      	mov	r1, r3
 801734e:	f001 fc3c 	bl	8018bca <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017352:	69bb      	ldr	r3, [r7, #24]
 8017354:	68db      	ldr	r3, [r3, #12]
 8017356:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017358:	f107 030c 	add.w	r3, r7, #12
 801735c:	4618      	mov	r0, r3
 801735e:	f000 f825 	bl	80173ac <ip4_route>
 8017362:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d011      	beq.n	801738e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	2200      	movs	r2, #0
 801736e:	709a      	strb	r2, [r3, #2]
 8017370:	2200      	movs	r2, #0
 8017372:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017374:	f107 020c 	add.w	r2, r7, #12
 8017378:	693b      	ldr	r3, [r7, #16]
 801737a:	9302      	str	r3, [sp, #8]
 801737c:	2301      	movs	r3, #1
 801737e:	9301      	str	r3, [sp, #4]
 8017380:	2300      	movs	r3, #0
 8017382:	9300      	str	r3, [sp, #0]
 8017384:	23ff      	movs	r3, #255	; 0xff
 8017386:	2100      	movs	r1, #0
 8017388:	69f8      	ldr	r0, [r7, #28]
 801738a:	f000 f9cd 	bl	8017728 <ip4_output_if>
  }
  pbuf_free(q);
 801738e:	69f8      	ldr	r0, [r7, #28]
 8017390:	f7f9 f808 	bl	80103a4 <pbuf_free>
 8017394:	e000      	b.n	8017398 <icmp_send_response+0xc0>
    return;
 8017396:	bf00      	nop
}
 8017398:	3720      	adds	r7, #32
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	0801c944 	.word	0x0801c944
 80173a4:	0801ca10 	.word	0x0801ca10
 80173a8:	0801c9b4 	.word	0x0801c9b4

080173ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80173ac:	b480      	push	{r7}
 80173ae:	b085      	sub	sp, #20
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80173b4:	4b33      	ldr	r3, [pc, #204]	; (8017484 <ip4_route+0xd8>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	60fb      	str	r3, [r7, #12]
 80173ba:	e036      	b.n	801742a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80173c2:	f003 0301 	and.w	r3, r3, #1
 80173c6:	b2db      	uxtb	r3, r3
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d02b      	beq.n	8017424 <ip4_route+0x78>
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80173d2:	089b      	lsrs	r3, r3, #2
 80173d4:	f003 0301 	and.w	r3, r3, #1
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d022      	beq.n	8017424 <ip4_route+0x78>
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	3304      	adds	r3, #4
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d01d      	beq.n	8017424 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	681a      	ldr	r2, [r3, #0]
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	3304      	adds	r3, #4
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	405a      	eors	r2, r3
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	3308      	adds	r3, #8
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	4013      	ands	r3, r2
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d101      	bne.n	8017404 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	e038      	b.n	8017476 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801740a:	f003 0302 	and.w	r3, r3, #2
 801740e:	2b00      	cmp	r3, #0
 8017410:	d108      	bne.n	8017424 <ip4_route+0x78>
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681a      	ldr	r2, [r3, #0]
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	330c      	adds	r3, #12
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	429a      	cmp	r2, r3
 801741e:	d101      	bne.n	8017424 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	e028      	b.n	8017476 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	60fb      	str	r3, [r7, #12]
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d1c5      	bne.n	80173bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017430:	4b15      	ldr	r3, [pc, #84]	; (8017488 <ip4_route+0xdc>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d01a      	beq.n	801746e <ip4_route+0xc2>
 8017438:	4b13      	ldr	r3, [pc, #76]	; (8017488 <ip4_route+0xdc>)
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017440:	f003 0301 	and.w	r3, r3, #1
 8017444:	2b00      	cmp	r3, #0
 8017446:	d012      	beq.n	801746e <ip4_route+0xc2>
 8017448:	4b0f      	ldr	r3, [pc, #60]	; (8017488 <ip4_route+0xdc>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017450:	f003 0304 	and.w	r3, r3, #4
 8017454:	2b00      	cmp	r3, #0
 8017456:	d00a      	beq.n	801746e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017458:	4b0b      	ldr	r3, [pc, #44]	; (8017488 <ip4_route+0xdc>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	3304      	adds	r3, #4
 801745e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017460:	2b00      	cmp	r3, #0
 8017462:	d004      	beq.n	801746e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	b2db      	uxtb	r3, r3
 801746a:	2b7f      	cmp	r3, #127	; 0x7f
 801746c:	d101      	bne.n	8017472 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801746e:	2300      	movs	r3, #0
 8017470:	e001      	b.n	8017476 <ip4_route+0xca>
  }

  return netif_default;
 8017472:	4b05      	ldr	r3, [pc, #20]	; (8017488 <ip4_route+0xdc>)
 8017474:	681b      	ldr	r3, [r3, #0]
}
 8017476:	4618      	mov	r0, r3
 8017478:	3714      	adds	r7, #20
 801747a:	46bd      	mov	sp, r7
 801747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017480:	4770      	bx	lr
 8017482:	bf00      	nop
 8017484:	2000d97c 	.word	0x2000d97c
 8017488:	2000d980 	.word	0x2000d980

0801748c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b082      	sub	sp, #8
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801749a:	f003 0301 	and.w	r3, r3, #1
 801749e:	b2db      	uxtb	r3, r3
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d016      	beq.n	80174d2 <ip4_input_accept+0x46>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	3304      	adds	r3, #4
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d011      	beq.n	80174d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80174ae:	4b0b      	ldr	r3, [pc, #44]	; (80174dc <ip4_input_accept+0x50>)
 80174b0:	695a      	ldr	r2, [r3, #20]
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	3304      	adds	r3, #4
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	429a      	cmp	r2, r3
 80174ba:	d008      	beq.n	80174ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80174bc:	4b07      	ldr	r3, [pc, #28]	; (80174dc <ip4_input_accept+0x50>)
 80174be:	695b      	ldr	r3, [r3, #20]
 80174c0:	6879      	ldr	r1, [r7, #4]
 80174c2:	4618      	mov	r0, r3
 80174c4:	f000 fa08 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 80174c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d001      	beq.n	80174d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80174ce:	2301      	movs	r3, #1
 80174d0:	e000      	b.n	80174d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80174d2:	2300      	movs	r3, #0
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3708      	adds	r7, #8
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}
 80174dc:	2000a234 	.word	0x2000a234

080174e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b086      	sub	sp, #24
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
 80174e8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	685b      	ldr	r3, [r3, #4]
 80174ee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80174f0:	697b      	ldr	r3, [r7, #20]
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	091b      	lsrs	r3, r3, #4
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	2b04      	cmp	r3, #4
 80174fa:	d004      	beq.n	8017506 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f7f8 ff51 	bl	80103a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017502:	2300      	movs	r3, #0
 8017504:	e107      	b.n	8017716 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	781b      	ldrb	r3, [r3, #0]
 801750a:	f003 030f 	and.w	r3, r3, #15
 801750e:	b2db      	uxtb	r3, r3
 8017510:	009b      	lsls	r3, r3, #2
 8017512:	b2db      	uxtb	r3, r3
 8017514:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	885b      	ldrh	r3, [r3, #2]
 801751a:	b29b      	uxth	r3, r3
 801751c:	4618      	mov	r0, r3
 801751e:	f7f7 fb4f 	bl	800ebc0 <lwip_htons>
 8017522:	4603      	mov	r3, r0
 8017524:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	891b      	ldrh	r3, [r3, #8]
 801752a:	89ba      	ldrh	r2, [r7, #12]
 801752c:	429a      	cmp	r2, r3
 801752e:	d204      	bcs.n	801753a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017530:	89bb      	ldrh	r3, [r7, #12]
 8017532:	4619      	mov	r1, r3
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f7f8 fdaf 	bl	8010098 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	895b      	ldrh	r3, [r3, #10]
 801753e:	89fa      	ldrh	r2, [r7, #14]
 8017540:	429a      	cmp	r2, r3
 8017542:	d807      	bhi.n	8017554 <ip4_input+0x74>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	891b      	ldrh	r3, [r3, #8]
 8017548:	89ba      	ldrh	r2, [r7, #12]
 801754a:	429a      	cmp	r2, r3
 801754c:	d802      	bhi.n	8017554 <ip4_input+0x74>
 801754e:	89fb      	ldrh	r3, [r7, #14]
 8017550:	2b13      	cmp	r3, #19
 8017552:	d804      	bhi.n	801755e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f7f8 ff25 	bl	80103a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801755a:	2300      	movs	r3, #0
 801755c:	e0db      	b.n	8017716 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	691b      	ldr	r3, [r3, #16]
 8017562:	4a6f      	ldr	r2, [pc, #444]	; (8017720 <ip4_input+0x240>)
 8017564:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	4a6d      	ldr	r2, [pc, #436]	; (8017720 <ip4_input+0x240>)
 801756c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801756e:	4b6c      	ldr	r3, [pc, #432]	; (8017720 <ip4_input+0x240>)
 8017570:	695b      	ldr	r3, [r3, #20]
 8017572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017576:	2be0      	cmp	r3, #224	; 0xe0
 8017578:	d112      	bne.n	80175a0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017580:	f003 0301 	and.w	r3, r3, #1
 8017584:	b2db      	uxtb	r3, r3
 8017586:	2b00      	cmp	r3, #0
 8017588:	d007      	beq.n	801759a <ip4_input+0xba>
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	3304      	adds	r3, #4
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d002      	beq.n	801759a <ip4_input+0xba>
      netif = inp;
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	613b      	str	r3, [r7, #16]
 8017598:	e02a      	b.n	80175f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801759a:	2300      	movs	r3, #0
 801759c:	613b      	str	r3, [r7, #16]
 801759e:	e027      	b.n	80175f0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80175a0:	6838      	ldr	r0, [r7, #0]
 80175a2:	f7ff ff73 	bl	801748c <ip4_input_accept>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d002      	beq.n	80175b2 <ip4_input+0xd2>
      netif = inp;
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	613b      	str	r3, [r7, #16]
 80175b0:	e01e      	b.n	80175f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80175b2:	2300      	movs	r3, #0
 80175b4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80175b6:	4b5a      	ldr	r3, [pc, #360]	; (8017720 <ip4_input+0x240>)
 80175b8:	695b      	ldr	r3, [r3, #20]
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	2b7f      	cmp	r3, #127	; 0x7f
 80175be:	d017      	beq.n	80175f0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80175c0:	4b58      	ldr	r3, [pc, #352]	; (8017724 <ip4_input+0x244>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	613b      	str	r3, [r7, #16]
 80175c6:	e00e      	b.n	80175e6 <ip4_input+0x106>
          if (netif == inp) {
 80175c8:	693a      	ldr	r2, [r7, #16]
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d006      	beq.n	80175de <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80175d0:	6938      	ldr	r0, [r7, #16]
 80175d2:	f7ff ff5b 	bl	801748c <ip4_input_accept>
 80175d6:	4603      	mov	r3, r0
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d108      	bne.n	80175ee <ip4_input+0x10e>
 80175dc:	e000      	b.n	80175e0 <ip4_input+0x100>
            continue;
 80175de:	bf00      	nop
        NETIF_FOREACH(netif) {
 80175e0:	693b      	ldr	r3, [r7, #16]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	613b      	str	r3, [r7, #16]
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d1ed      	bne.n	80175c8 <ip4_input+0xe8>
 80175ec:	e000      	b.n	80175f0 <ip4_input+0x110>
            break;
 80175ee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80175f0:	4b4b      	ldr	r3, [pc, #300]	; (8017720 <ip4_input+0x240>)
 80175f2:	691b      	ldr	r3, [r3, #16]
 80175f4:	6839      	ldr	r1, [r7, #0]
 80175f6:	4618      	mov	r0, r3
 80175f8:	f000 f96e 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 80175fc:	4603      	mov	r3, r0
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d105      	bne.n	801760e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017602:	4b47      	ldr	r3, [pc, #284]	; (8017720 <ip4_input+0x240>)
 8017604:	691b      	ldr	r3, [r3, #16]
 8017606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801760a:	2be0      	cmp	r3, #224	; 0xe0
 801760c:	d104      	bne.n	8017618 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f7f8 fec8 	bl	80103a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017614:	2300      	movs	r3, #0
 8017616:	e07e      	b.n	8017716 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d104      	bne.n	8017628 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f7f8 fec0 	bl	80103a4 <pbuf_free>
    return ERR_OK;
 8017624:	2300      	movs	r3, #0
 8017626:	e076      	b.n	8017716 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	88db      	ldrh	r3, [r3, #6]
 801762c:	b29b      	uxth	r3, r3
 801762e:	461a      	mov	r2, r3
 8017630:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017634:	4013      	ands	r3, r2
 8017636:	2b00      	cmp	r3, #0
 8017638:	d00b      	beq.n	8017652 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f000 fc92 	bl	8017f64 <ip4_reass>
 8017640:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d101      	bne.n	801764c <ip4_input+0x16c>
      return ERR_OK;
 8017648:	2300      	movs	r3, #0
 801764a:	e064      	b.n	8017716 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	685b      	ldr	r3, [r3, #4]
 8017650:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017652:	4a33      	ldr	r2, [pc, #204]	; (8017720 <ip4_input+0x240>)
 8017654:	693b      	ldr	r3, [r7, #16]
 8017656:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017658:	4a31      	ldr	r2, [pc, #196]	; (8017720 <ip4_input+0x240>)
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801765e:	4a30      	ldr	r2, [pc, #192]	; (8017720 <ip4_input+0x240>)
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	f003 030f 	and.w	r3, r3, #15
 801766c:	b2db      	uxtb	r3, r3
 801766e:	009b      	lsls	r3, r3, #2
 8017670:	b2db      	uxtb	r3, r3
 8017672:	b29a      	uxth	r2, r3
 8017674:	4b2a      	ldr	r3, [pc, #168]	; (8017720 <ip4_input+0x240>)
 8017676:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017678:	89fb      	ldrh	r3, [r7, #14]
 801767a:	4619      	mov	r1, r3
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f7f8 fe0b 	bl	8010298 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017682:	697b      	ldr	r3, [r7, #20]
 8017684:	7a5b      	ldrb	r3, [r3, #9]
 8017686:	2b11      	cmp	r3, #17
 8017688:	d006      	beq.n	8017698 <ip4_input+0x1b8>
 801768a:	2b11      	cmp	r3, #17
 801768c:	dc13      	bgt.n	80176b6 <ip4_input+0x1d6>
 801768e:	2b01      	cmp	r3, #1
 8017690:	d00c      	beq.n	80176ac <ip4_input+0x1cc>
 8017692:	2b06      	cmp	r3, #6
 8017694:	d005      	beq.n	80176a2 <ip4_input+0x1c2>
 8017696:	e00e      	b.n	80176b6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017698:	6839      	ldr	r1, [r7, #0]
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f7fe fc68 	bl	8015f70 <udp_input>
        break;
 80176a0:	e026      	b.n	80176f0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80176a2:	6839      	ldr	r1, [r7, #0]
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7fa fcb1 	bl	801200c <tcp_input>
        break;
 80176aa:	e021      	b.n	80176f0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80176ac:	6839      	ldr	r1, [r7, #0]
 80176ae:	6878      	ldr	r0, [r7, #4]
 80176b0:	f7ff fcee 	bl	8017090 <icmp_input>
        break;
 80176b4:	e01c      	b.n	80176f0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80176b6:	4b1a      	ldr	r3, [pc, #104]	; (8017720 <ip4_input+0x240>)
 80176b8:	695b      	ldr	r3, [r3, #20]
 80176ba:	6939      	ldr	r1, [r7, #16]
 80176bc:	4618      	mov	r0, r3
 80176be:	f000 f90b 	bl	80178d8 <ip4_addr_isbroadcast_u32>
 80176c2:	4603      	mov	r3, r0
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d10f      	bne.n	80176e8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80176c8:	4b15      	ldr	r3, [pc, #84]	; (8017720 <ip4_input+0x240>)
 80176ca:	695b      	ldr	r3, [r3, #20]
 80176cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80176d0:	2be0      	cmp	r3, #224	; 0xe0
 80176d2:	d009      	beq.n	80176e8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80176d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80176d8:	4619      	mov	r1, r3
 80176da:	6878      	ldr	r0, [r7, #4]
 80176dc:	f7f8 fe4f 	bl	801037e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80176e0:	2102      	movs	r1, #2
 80176e2:	6878      	ldr	r0, [r7, #4]
 80176e4:	f7ff fdd8 	bl	8017298 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f7f8 fe5b 	bl	80103a4 <pbuf_free>
        break;
 80176ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80176f0:	4b0b      	ldr	r3, [pc, #44]	; (8017720 <ip4_input+0x240>)
 80176f2:	2200      	movs	r2, #0
 80176f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80176f6:	4b0a      	ldr	r3, [pc, #40]	; (8017720 <ip4_input+0x240>)
 80176f8:	2200      	movs	r2, #0
 80176fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80176fc:	4b08      	ldr	r3, [pc, #32]	; (8017720 <ip4_input+0x240>)
 80176fe:	2200      	movs	r2, #0
 8017700:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017702:	4b07      	ldr	r3, [pc, #28]	; (8017720 <ip4_input+0x240>)
 8017704:	2200      	movs	r2, #0
 8017706:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017708:	4b05      	ldr	r3, [pc, #20]	; (8017720 <ip4_input+0x240>)
 801770a:	2200      	movs	r2, #0
 801770c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801770e:	4b04      	ldr	r3, [pc, #16]	; (8017720 <ip4_input+0x240>)
 8017710:	2200      	movs	r2, #0
 8017712:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017714:	2300      	movs	r3, #0
}
 8017716:	4618      	mov	r0, r3
 8017718:	3718      	adds	r7, #24
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	2000a234 	.word	0x2000a234
 8017724:	2000d97c 	.word	0x2000d97c

08017728 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b08a      	sub	sp, #40	; 0x28
 801772c:	af04      	add	r7, sp, #16
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d009      	beq.n	8017754 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017740:	68bb      	ldr	r3, [r7, #8]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d003      	beq.n	801774e <ip4_output_if+0x26>
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d102      	bne.n	8017754 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017750:	3304      	adds	r3, #4
 8017752:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017754:	78fa      	ldrb	r2, [r7, #3]
 8017756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017758:	9302      	str	r3, [sp, #8]
 801775a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801775e:	9301      	str	r3, [sp, #4]
 8017760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017764:	9300      	str	r3, [sp, #0]
 8017766:	4613      	mov	r3, r2
 8017768:	687a      	ldr	r2, [r7, #4]
 801776a:	6979      	ldr	r1, [r7, #20]
 801776c:	68f8      	ldr	r0, [r7, #12]
 801776e:	f000 f805 	bl	801777c <ip4_output_if_src>
 8017772:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017774:	4618      	mov	r0, r3
 8017776:	3718      	adds	r7, #24
 8017778:	46bd      	mov	sp, r7
 801777a:	bd80      	pop	{r7, pc}

0801777c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801777c:	b580      	push	{r7, lr}
 801777e:	b088      	sub	sp, #32
 8017780:	af00      	add	r7, sp, #0
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
 8017788:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	7b9b      	ldrb	r3, [r3, #14]
 801778e:	2b01      	cmp	r3, #1
 8017790:	d006      	beq.n	80177a0 <ip4_output_if_src+0x24>
 8017792:	4b4b      	ldr	r3, [pc, #300]	; (80178c0 <ip4_output_if_src+0x144>)
 8017794:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017798:	494a      	ldr	r1, [pc, #296]	; (80178c4 <ip4_output_if_src+0x148>)
 801779a:	484b      	ldr	r0, [pc, #300]	; (80178c8 <ip4_output_if_src+0x14c>)
 801779c:	f001 fada 	bl	8018d54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d060      	beq.n	8017868 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80177a6:	2314      	movs	r3, #20
 80177a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80177aa:	2114      	movs	r1, #20
 80177ac:	68f8      	ldr	r0, [r7, #12]
 80177ae:	f7f8 fd63 	bl	8010278 <pbuf_add_header>
 80177b2:	4603      	mov	r3, r0
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d002      	beq.n	80177be <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80177b8:	f06f 0301 	mvn.w	r3, #1
 80177bc:	e07c      	b.n	80178b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	895b      	ldrh	r3, [r3, #10]
 80177c8:	2b13      	cmp	r3, #19
 80177ca:	d806      	bhi.n	80177da <ip4_output_if_src+0x5e>
 80177cc:	4b3c      	ldr	r3, [pc, #240]	; (80178c0 <ip4_output_if_src+0x144>)
 80177ce:	f44f 7262 	mov.w	r2, #904	; 0x388
 80177d2:	493e      	ldr	r1, [pc, #248]	; (80178cc <ip4_output_if_src+0x150>)
 80177d4:	483c      	ldr	r0, [pc, #240]	; (80178c8 <ip4_output_if_src+0x14c>)
 80177d6:	f001 fabd 	bl	8018d54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80177da:	69fb      	ldr	r3, [r7, #28]
 80177dc:	78fa      	ldrb	r2, [r7, #3]
 80177de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80177e0:	69fb      	ldr	r3, [r7, #28]
 80177e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80177e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	681a      	ldr	r2, [r3, #0]
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80177f0:	8b7b      	ldrh	r3, [r7, #26]
 80177f2:	089b      	lsrs	r3, r3, #2
 80177f4:	b29b      	uxth	r3, r3
 80177f6:	b2db      	uxtb	r3, r3
 80177f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177fc:	b2da      	uxtb	r2, r3
 80177fe:	69fb      	ldr	r3, [r7, #28]
 8017800:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017802:	69fb      	ldr	r3, [r7, #28]
 8017804:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017808:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	891b      	ldrh	r3, [r3, #8]
 801780e:	4618      	mov	r0, r3
 8017810:	f7f7 f9d6 	bl	800ebc0 <lwip_htons>
 8017814:	4603      	mov	r3, r0
 8017816:	461a      	mov	r2, r3
 8017818:	69fb      	ldr	r3, [r7, #28]
 801781a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801781c:	69fb      	ldr	r3, [r7, #28]
 801781e:	2200      	movs	r2, #0
 8017820:	719a      	strb	r2, [r3, #6]
 8017822:	2200      	movs	r2, #0
 8017824:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017826:	4b2a      	ldr	r3, [pc, #168]	; (80178d0 <ip4_output_if_src+0x154>)
 8017828:	881b      	ldrh	r3, [r3, #0]
 801782a:	4618      	mov	r0, r3
 801782c:	f7f7 f9c8 	bl	800ebc0 <lwip_htons>
 8017830:	4603      	mov	r3, r0
 8017832:	461a      	mov	r2, r3
 8017834:	69fb      	ldr	r3, [r7, #28]
 8017836:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017838:	4b25      	ldr	r3, [pc, #148]	; (80178d0 <ip4_output_if_src+0x154>)
 801783a:	881b      	ldrh	r3, [r3, #0]
 801783c:	3301      	adds	r3, #1
 801783e:	b29a      	uxth	r2, r3
 8017840:	4b23      	ldr	r3, [pc, #140]	; (80178d0 <ip4_output_if_src+0x154>)
 8017842:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017844:	68bb      	ldr	r3, [r7, #8]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d104      	bne.n	8017854 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801784a:	4b22      	ldr	r3, [pc, #136]	; (80178d4 <ip4_output_if_src+0x158>)
 801784c:	681a      	ldr	r2, [r3, #0]
 801784e:	69fb      	ldr	r3, [r7, #28]
 8017850:	60da      	str	r2, [r3, #12]
 8017852:	e003      	b.n	801785c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017854:	68bb      	ldr	r3, [r7, #8]
 8017856:	681a      	ldr	r2, [r3, #0]
 8017858:	69fb      	ldr	r3, [r7, #28]
 801785a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801785c:	69fb      	ldr	r3, [r7, #28]
 801785e:	2200      	movs	r2, #0
 8017860:	729a      	strb	r2, [r3, #10]
 8017862:	2200      	movs	r2, #0
 8017864:	72da      	strb	r2, [r3, #11]
 8017866:	e00f      	b.n	8017888 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	895b      	ldrh	r3, [r3, #10]
 801786c:	2b13      	cmp	r3, #19
 801786e:	d802      	bhi.n	8017876 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017870:	f06f 0301 	mvn.w	r3, #1
 8017874:	e020      	b.n	80178b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801787c:	69fb      	ldr	r3, [r7, #28]
 801787e:	691b      	ldr	r3, [r3, #16]
 8017880:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017882:	f107 0314 	add.w	r3, r7, #20
 8017886:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801788a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801788c:	2b00      	cmp	r3, #0
 801788e:	d00c      	beq.n	80178aa <ip4_output_if_src+0x12e>
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	891a      	ldrh	r2, [r3, #8]
 8017894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017898:	429a      	cmp	r2, r3
 801789a:	d906      	bls.n	80178aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801789c:	687a      	ldr	r2, [r7, #4]
 801789e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80178a0:	68f8      	ldr	r0, [r7, #12]
 80178a2:	f000 fd53 	bl	801834c <ip4_frag>
 80178a6:	4603      	mov	r3, r0
 80178a8:	e006      	b.n	80178b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80178aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ac:	695b      	ldr	r3, [r3, #20]
 80178ae:	687a      	ldr	r2, [r7, #4]
 80178b0:	68f9      	ldr	r1, [r7, #12]
 80178b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178b4:	4798      	blx	r3
 80178b6:	4603      	mov	r3, r0
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3720      	adds	r7, #32
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	0801ca3c 	.word	0x0801ca3c
 80178c4:	0801ca70 	.word	0x0801ca70
 80178c8:	0801ca7c 	.word	0x0801ca7c
 80178cc:	0801caa4 	.word	0x0801caa4
 80178d0:	2000dada 	.word	0x2000dada
 80178d4:	0801cf64 	.word	0x0801cf64

080178d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80178d8:	b480      	push	{r7}
 80178da:	b085      	sub	sp, #20
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178ec:	d002      	beq.n	80178f4 <ip4_addr_isbroadcast_u32+0x1c>
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d101      	bne.n	80178f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80178f4:	2301      	movs	r3, #1
 80178f6:	e02a      	b.n	801794e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80178fe:	f003 0302 	and.w	r3, r3, #2
 8017902:	2b00      	cmp	r3, #0
 8017904:	d101      	bne.n	801790a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017906:	2300      	movs	r3, #0
 8017908:	e021      	b.n	801794e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801790a:	683b      	ldr	r3, [r7, #0]
 801790c:	3304      	adds	r3, #4
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	687a      	ldr	r2, [r7, #4]
 8017912:	429a      	cmp	r2, r3
 8017914:	d101      	bne.n	801791a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017916:	2300      	movs	r3, #0
 8017918:	e019      	b.n	801794e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801791a:	68fa      	ldr	r2, [r7, #12]
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	3304      	adds	r3, #4
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	405a      	eors	r2, r3
 8017924:	683b      	ldr	r3, [r7, #0]
 8017926:	3308      	adds	r3, #8
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4013      	ands	r3, r2
 801792c:	2b00      	cmp	r3, #0
 801792e:	d10d      	bne.n	801794c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	3308      	adds	r3, #8
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	43da      	mvns	r2, r3
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	3308      	adds	r3, #8
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017944:	429a      	cmp	r2, r3
 8017946:	d101      	bne.n	801794c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017948:	2301      	movs	r3, #1
 801794a:	e000      	b.n	801794e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801794c:	2300      	movs	r3, #0
  }
}
 801794e:	4618      	mov	r0, r3
 8017950:	3714      	adds	r7, #20
 8017952:	46bd      	mov	sp, r7
 8017954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017958:	4770      	bx	lr
	...

0801795c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b084      	sub	sp, #16
 8017960:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017962:	2300      	movs	r3, #0
 8017964:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017966:	4b12      	ldr	r3, [pc, #72]	; (80179b0 <ip_reass_tmr+0x54>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801796c:	e018      	b.n	80179a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	7fdb      	ldrb	r3, [r3, #31]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d00b      	beq.n	801798e <ip_reass_tmr+0x32>
      r->timer--;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	7fdb      	ldrb	r3, [r3, #31]
 801797a:	3b01      	subs	r3, #1
 801797c:	b2da      	uxtb	r2, r3
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	60fb      	str	r3, [r7, #12]
 801798c:	e008      	b.n	80179a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017998:	68b9      	ldr	r1, [r7, #8]
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f000 f80a 	bl	80179b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d1e3      	bne.n	801796e <ip_reass_tmr+0x12>
    }
  }
}
 80179a6:	bf00      	nop
 80179a8:	bf00      	nop
 80179aa:	3710      	adds	r7, #16
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	2000dadc 	.word	0x2000dadc

080179b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b088      	sub	sp, #32
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
 80179bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80179be:	2300      	movs	r3, #0
 80179c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80179c2:	683a      	ldr	r2, [r7, #0]
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d105      	bne.n	80179d6 <ip_reass_free_complete_datagram+0x22>
 80179ca:	4b45      	ldr	r3, [pc, #276]	; (8017ae0 <ip_reass_free_complete_datagram+0x12c>)
 80179cc:	22ab      	movs	r2, #171	; 0xab
 80179ce:	4945      	ldr	r1, [pc, #276]	; (8017ae4 <ip_reass_free_complete_datagram+0x130>)
 80179d0:	4845      	ldr	r0, [pc, #276]	; (8017ae8 <ip_reass_free_complete_datagram+0x134>)
 80179d2:	f001 f9bf 	bl	8018d54 <iprintf>
  if (prev != NULL) {
 80179d6:	683b      	ldr	r3, [r7, #0]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d00a      	beq.n	80179f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	687a      	ldr	r2, [r7, #4]
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d005      	beq.n	80179f2 <ip_reass_free_complete_datagram+0x3e>
 80179e6:	4b3e      	ldr	r3, [pc, #248]	; (8017ae0 <ip_reass_free_complete_datagram+0x12c>)
 80179e8:	22ad      	movs	r2, #173	; 0xad
 80179ea:	4940      	ldr	r1, [pc, #256]	; (8017aec <ip_reass_free_complete_datagram+0x138>)
 80179ec:	483e      	ldr	r0, [pc, #248]	; (8017ae8 <ip_reass_free_complete_datagram+0x134>)
 80179ee:	f001 f9b1 	bl	8018d54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	685b      	ldr	r3, [r3, #4]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	889b      	ldrh	r3, [r3, #4]
 80179fe:	b29b      	uxth	r3, r3
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d12a      	bne.n	8017a5a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	685b      	ldr	r3, [r3, #4]
 8017a08:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017a0a:	697b      	ldr	r3, [r7, #20]
 8017a0c:	681a      	ldr	r2, [r3, #0]
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017a12:	69bb      	ldr	r3, [r7, #24]
 8017a14:	6858      	ldr	r0, [r3, #4]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	3308      	adds	r3, #8
 8017a1a:	2214      	movs	r2, #20
 8017a1c:	4619      	mov	r1, r3
 8017a1e:	f001 f8d4 	bl	8018bca <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017a22:	2101      	movs	r1, #1
 8017a24:	69b8      	ldr	r0, [r7, #24]
 8017a26:	f7ff fc47 	bl	80172b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017a2a:	69b8      	ldr	r0, [r7, #24]
 8017a2c:	f7f8 fd48 	bl	80104c0 <pbuf_clen>
 8017a30:	4603      	mov	r3, r0
 8017a32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017a34:	8bfa      	ldrh	r2, [r7, #30]
 8017a36:	8a7b      	ldrh	r3, [r7, #18]
 8017a38:	4413      	add	r3, r2
 8017a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a3e:	db05      	blt.n	8017a4c <ip_reass_free_complete_datagram+0x98>
 8017a40:	4b27      	ldr	r3, [pc, #156]	; (8017ae0 <ip_reass_free_complete_datagram+0x12c>)
 8017a42:	22bc      	movs	r2, #188	; 0xbc
 8017a44:	492a      	ldr	r1, [pc, #168]	; (8017af0 <ip_reass_free_complete_datagram+0x13c>)
 8017a46:	4828      	ldr	r0, [pc, #160]	; (8017ae8 <ip_reass_free_complete_datagram+0x134>)
 8017a48:	f001 f984 	bl	8018d54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017a4c:	8bfa      	ldrh	r2, [r7, #30]
 8017a4e:	8a7b      	ldrh	r3, [r7, #18]
 8017a50:	4413      	add	r3, r2
 8017a52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017a54:	69b8      	ldr	r0, [r7, #24]
 8017a56:	f7f8 fca5 	bl	80103a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017a60:	e01f      	b.n	8017aa2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017a62:	69bb      	ldr	r3, [r7, #24]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017a68:	69bb      	ldr	r3, [r7, #24]
 8017a6a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017a6c:	697b      	ldr	r3, [r7, #20]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017a72:	68f8      	ldr	r0, [r7, #12]
 8017a74:	f7f8 fd24 	bl	80104c0 <pbuf_clen>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017a7c:	8bfa      	ldrh	r2, [r7, #30]
 8017a7e:	8a7b      	ldrh	r3, [r7, #18]
 8017a80:	4413      	add	r3, r2
 8017a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a86:	db05      	blt.n	8017a94 <ip_reass_free_complete_datagram+0xe0>
 8017a88:	4b15      	ldr	r3, [pc, #84]	; (8017ae0 <ip_reass_free_complete_datagram+0x12c>)
 8017a8a:	22cc      	movs	r2, #204	; 0xcc
 8017a8c:	4918      	ldr	r1, [pc, #96]	; (8017af0 <ip_reass_free_complete_datagram+0x13c>)
 8017a8e:	4816      	ldr	r0, [pc, #88]	; (8017ae8 <ip_reass_free_complete_datagram+0x134>)
 8017a90:	f001 f960 	bl	8018d54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017a94:	8bfa      	ldrh	r2, [r7, #30]
 8017a96:	8a7b      	ldrh	r3, [r7, #18]
 8017a98:	4413      	add	r3, r2
 8017a9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017a9c:	68f8      	ldr	r0, [r7, #12]
 8017a9e:	f7f8 fc81 	bl	80103a4 <pbuf_free>
  while (p != NULL) {
 8017aa2:	69bb      	ldr	r3, [r7, #24]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d1dc      	bne.n	8017a62 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017aa8:	6839      	ldr	r1, [r7, #0]
 8017aaa:	6878      	ldr	r0, [r7, #4]
 8017aac:	f000 f8c2 	bl	8017c34 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017ab0:	4b10      	ldr	r3, [pc, #64]	; (8017af4 <ip_reass_free_complete_datagram+0x140>)
 8017ab2:	881b      	ldrh	r3, [r3, #0]
 8017ab4:	8bfa      	ldrh	r2, [r7, #30]
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d905      	bls.n	8017ac6 <ip_reass_free_complete_datagram+0x112>
 8017aba:	4b09      	ldr	r3, [pc, #36]	; (8017ae0 <ip_reass_free_complete_datagram+0x12c>)
 8017abc:	22d2      	movs	r2, #210	; 0xd2
 8017abe:	490e      	ldr	r1, [pc, #56]	; (8017af8 <ip_reass_free_complete_datagram+0x144>)
 8017ac0:	4809      	ldr	r0, [pc, #36]	; (8017ae8 <ip_reass_free_complete_datagram+0x134>)
 8017ac2:	f001 f947 	bl	8018d54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017ac6:	4b0b      	ldr	r3, [pc, #44]	; (8017af4 <ip_reass_free_complete_datagram+0x140>)
 8017ac8:	881a      	ldrh	r2, [r3, #0]
 8017aca:	8bfb      	ldrh	r3, [r7, #30]
 8017acc:	1ad3      	subs	r3, r2, r3
 8017ace:	b29a      	uxth	r2, r3
 8017ad0:	4b08      	ldr	r3, [pc, #32]	; (8017af4 <ip_reass_free_complete_datagram+0x140>)
 8017ad2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017ad4:	8bfb      	ldrh	r3, [r7, #30]
}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	3720      	adds	r7, #32
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bd80      	pop	{r7, pc}
 8017ade:	bf00      	nop
 8017ae0:	0801cad4 	.word	0x0801cad4
 8017ae4:	0801cb10 	.word	0x0801cb10
 8017ae8:	0801cb1c 	.word	0x0801cb1c
 8017aec:	0801cb44 	.word	0x0801cb44
 8017af0:	0801cb58 	.word	0x0801cb58
 8017af4:	2000dae0 	.word	0x2000dae0
 8017af8:	0801cb78 	.word	0x0801cb78

08017afc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b08a      	sub	sp, #40	; 0x28
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017b06:	2300      	movs	r3, #0
 8017b08:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017b12:	2300      	movs	r3, #0
 8017b14:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017b16:	2300      	movs	r3, #0
 8017b18:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017b1a:	4b28      	ldr	r3, [pc, #160]	; (8017bbc <ip_reass_remove_oldest_datagram+0xc0>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017b20:	e030      	b.n	8017b84 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b24:	695a      	ldr	r2, [r3, #20]
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	68db      	ldr	r3, [r3, #12]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d10c      	bne.n	8017b48 <ip_reass_remove_oldest_datagram+0x4c>
 8017b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b30:	699a      	ldr	r2, [r3, #24]
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	691b      	ldr	r3, [r3, #16]
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d106      	bne.n	8017b48 <ip_reass_remove_oldest_datagram+0x4c>
 8017b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b3c:	899a      	ldrh	r2, [r3, #12]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	889b      	ldrh	r3, [r3, #4]
 8017b42:	b29b      	uxth	r3, r3
 8017b44:	429a      	cmp	r2, r3
 8017b46:	d014      	beq.n	8017b72 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017b4e:	6a3b      	ldr	r3, [r7, #32]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d104      	bne.n	8017b5e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b56:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017b58:	69fb      	ldr	r3, [r7, #28]
 8017b5a:	61bb      	str	r3, [r7, #24]
 8017b5c:	e009      	b.n	8017b72 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b60:	7fda      	ldrb	r2, [r3, #31]
 8017b62:	6a3b      	ldr	r3, [r7, #32]
 8017b64:	7fdb      	ldrb	r3, [r3, #31]
 8017b66:	429a      	cmp	r2, r3
 8017b68:	d803      	bhi.n	8017b72 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b6c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d001      	beq.n	8017b7e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b7c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d1cb      	bne.n	8017b22 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017b8a:	6a3b      	ldr	r3, [r7, #32]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d008      	beq.n	8017ba2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017b90:	69b9      	ldr	r1, [r7, #24]
 8017b92:	6a38      	ldr	r0, [r7, #32]
 8017b94:	f7ff ff0e 	bl	80179b4 <ip_reass_free_complete_datagram>
 8017b98:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017b9a:	697a      	ldr	r2, [r7, #20]
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	4413      	add	r3, r2
 8017ba0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017ba2:	697a      	ldr	r2, [r7, #20]
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	da02      	bge.n	8017bb0 <ip_reass_remove_oldest_datagram+0xb4>
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	dcac      	bgt.n	8017b0a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017bb0:	697b      	ldr	r3, [r7, #20]
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3728      	adds	r7, #40	; 0x28
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	2000dadc 	.word	0x2000dadc

08017bc0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
 8017bc8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017bca:	2004      	movs	r0, #4
 8017bcc:	f7f7 fcd0 	bl	800f570 <memp_malloc>
 8017bd0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d110      	bne.n	8017bfa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017bd8:	6839      	ldr	r1, [r7, #0]
 8017bda:	6878      	ldr	r0, [r7, #4]
 8017bdc:	f7ff ff8e 	bl	8017afc <ip_reass_remove_oldest_datagram>
 8017be0:	4602      	mov	r2, r0
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	4293      	cmp	r3, r2
 8017be6:	dc03      	bgt.n	8017bf0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017be8:	2004      	movs	r0, #4
 8017bea:	f7f7 fcc1 	bl	800f570 <memp_malloc>
 8017bee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d101      	bne.n	8017bfa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	e016      	b.n	8017c28 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017bfa:	2220      	movs	r2, #32
 8017bfc:	2100      	movs	r1, #0
 8017bfe:	68f8      	ldr	r0, [r7, #12]
 8017c00:	f001 f80b 	bl	8018c1a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	220f      	movs	r2, #15
 8017c08:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017c0a:	4b09      	ldr	r3, [pc, #36]	; (8017c30 <ip_reass_enqueue_new_datagram+0x70>)
 8017c0c:	681a      	ldr	r2, [r3, #0]
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017c12:	4a07      	ldr	r2, [pc, #28]	; (8017c30 <ip_reass_enqueue_new_datagram+0x70>)
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	3308      	adds	r3, #8
 8017c1c:	2214      	movs	r2, #20
 8017c1e:	6879      	ldr	r1, [r7, #4]
 8017c20:	4618      	mov	r0, r3
 8017c22:	f000 ffd2 	bl	8018bca <memcpy>
  return ipr;
 8017c26:	68fb      	ldr	r3, [r7, #12]
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	3710      	adds	r7, #16
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	2000dadc 	.word	0x2000dadc

08017c34 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017c3e:	4b10      	ldr	r3, [pc, #64]	; (8017c80 <ip_reass_dequeue_datagram+0x4c>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	687a      	ldr	r2, [r7, #4]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d104      	bne.n	8017c52 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	4a0c      	ldr	r2, [pc, #48]	; (8017c80 <ip_reass_dequeue_datagram+0x4c>)
 8017c4e:	6013      	str	r3, [r2, #0]
 8017c50:	e00d      	b.n	8017c6e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d106      	bne.n	8017c66 <ip_reass_dequeue_datagram+0x32>
 8017c58:	4b0a      	ldr	r3, [pc, #40]	; (8017c84 <ip_reass_dequeue_datagram+0x50>)
 8017c5a:	f240 1245 	movw	r2, #325	; 0x145
 8017c5e:	490a      	ldr	r1, [pc, #40]	; (8017c88 <ip_reass_dequeue_datagram+0x54>)
 8017c60:	480a      	ldr	r0, [pc, #40]	; (8017c8c <ip_reass_dequeue_datagram+0x58>)
 8017c62:	f001 f877 	bl	8018d54 <iprintf>
    prev->next = ipr->next;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681a      	ldr	r2, [r3, #0]
 8017c6a:	683b      	ldr	r3, [r7, #0]
 8017c6c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017c6e:	6879      	ldr	r1, [r7, #4]
 8017c70:	2004      	movs	r0, #4
 8017c72:	f7f7 fcf3 	bl	800f65c <memp_free>
}
 8017c76:	bf00      	nop
 8017c78:	3708      	adds	r7, #8
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}
 8017c7e:	bf00      	nop
 8017c80:	2000dadc 	.word	0x2000dadc
 8017c84:	0801cad4 	.word	0x0801cad4
 8017c88:	0801cb9c 	.word	0x0801cb9c
 8017c8c:	0801cb1c 	.word	0x0801cb1c

08017c90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b08c      	sub	sp, #48	; 0x30
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017ca4:	68bb      	ldr	r3, [r7, #8]
 8017ca6:	685b      	ldr	r3, [r3, #4]
 8017ca8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017caa:	69fb      	ldr	r3, [r7, #28]
 8017cac:	885b      	ldrh	r3, [r3, #2]
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f7f6 ff85 	bl	800ebc0 <lwip_htons>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017cba:	69fb      	ldr	r3, [r7, #28]
 8017cbc:	781b      	ldrb	r3, [r3, #0]
 8017cbe:	f003 030f 	and.w	r3, r3, #15
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	009b      	lsls	r3, r3, #2
 8017cc6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017cc8:	7e7b      	ldrb	r3, [r7, #25]
 8017cca:	b29b      	uxth	r3, r3
 8017ccc:	8b7a      	ldrh	r2, [r7, #26]
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d202      	bcs.n	8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8017cd6:	e135      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017cd8:	7e7b      	ldrb	r3, [r7, #25]
 8017cda:	b29b      	uxth	r3, r3
 8017cdc:	8b7a      	ldrh	r2, [r7, #26]
 8017cde:	1ad3      	subs	r3, r2, r3
 8017ce0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	88db      	ldrh	r3, [r3, #6]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7f6 ff69 	bl	800ebc0 <lwip_htons>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cf4:	b29b      	uxth	r3, r3
 8017cf6:	00db      	lsls	r3, r3, #3
 8017cf8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	685b      	ldr	r3, [r3, #4]
 8017cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d02:	2200      	movs	r2, #0
 8017d04:	701a      	strb	r2, [r3, #0]
 8017d06:	2200      	movs	r2, #0
 8017d08:	705a      	strb	r2, [r3, #1]
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	709a      	strb	r2, [r3, #2]
 8017d0e:	2200      	movs	r2, #0
 8017d10:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d14:	8afa      	ldrh	r2, [r7, #22]
 8017d16:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017d18:	8afa      	ldrh	r2, [r7, #22]
 8017d1a:	8b7b      	ldrh	r3, [r7, #26]
 8017d1c:	4413      	add	r3, r2
 8017d1e:	b29a      	uxth	r2, r3
 8017d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d22:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d26:	88db      	ldrh	r3, [r3, #6]
 8017d28:	b29b      	uxth	r3, r3
 8017d2a:	8afa      	ldrh	r2, [r7, #22]
 8017d2c:	429a      	cmp	r2, r3
 8017d2e:	d902      	bls.n	8017d36 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d30:	f04f 33ff 	mov.w	r3, #4294967295
 8017d34:	e106      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	685b      	ldr	r3, [r3, #4]
 8017d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8017d3c:	e068      	b.n	8017e10 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d40:	685b      	ldr	r3, [r3, #4]
 8017d42:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d46:	889b      	ldrh	r3, [r3, #4]
 8017d48:	b29a      	uxth	r2, r3
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	889b      	ldrh	r3, [r3, #4]
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d235      	bcs.n	8017dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d58:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d020      	beq.n	8017da2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	889b      	ldrh	r3, [r3, #4]
 8017d64:	b29a      	uxth	r2, r3
 8017d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d68:	88db      	ldrh	r3, [r3, #6]
 8017d6a:	b29b      	uxth	r3, r3
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d307      	bcc.n	8017d80 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	88db      	ldrh	r3, [r3, #6]
 8017d74:	b29a      	uxth	r2, r3
 8017d76:	693b      	ldr	r3, [r7, #16]
 8017d78:	889b      	ldrh	r3, [r3, #4]
 8017d7a:	b29b      	uxth	r3, r3
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d902      	bls.n	8017d86 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d80:	f04f 33ff 	mov.w	r3, #4294967295
 8017d84:	e0de      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d88:	68ba      	ldr	r2, [r7, #8]
 8017d8a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d8e:	88db      	ldrh	r3, [r3, #6]
 8017d90:	b29a      	uxth	r2, r3
 8017d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d94:	889b      	ldrh	r3, [r3, #4]
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	429a      	cmp	r2, r3
 8017d9a:	d03d      	beq.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017da0:	e03a      	b.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da4:	88db      	ldrh	r3, [r3, #6]
 8017da6:	b29a      	uxth	r2, r3
 8017da8:	693b      	ldr	r3, [r7, #16]
 8017daa:	889b      	ldrh	r3, [r3, #4]
 8017dac:	b29b      	uxth	r3, r3
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d902      	bls.n	8017db8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017db2:	f04f 33ff 	mov.w	r3, #4294967295
 8017db6:	e0c5      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	68ba      	ldr	r2, [r7, #8]
 8017dbc:	605a      	str	r2, [r3, #4]
      break;
 8017dbe:	e02b      	b.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc2:	889b      	ldrh	r3, [r3, #4]
 8017dc4:	b29a      	uxth	r2, r3
 8017dc6:	693b      	ldr	r3, [r7, #16]
 8017dc8:	889b      	ldrh	r3, [r3, #4]
 8017dca:	b29b      	uxth	r3, r3
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d102      	bne.n	8017dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017dd4:	e0b6      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd8:	889b      	ldrh	r3, [r3, #4]
 8017dda:	b29a      	uxth	r2, r3
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	88db      	ldrh	r3, [r3, #6]
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d202      	bcs.n	8017dec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017de6:	f04f 33ff 	mov.w	r3, #4294967295
 8017dea:	e0ab      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d009      	beq.n	8017e06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df4:	88db      	ldrh	r3, [r3, #6]
 8017df6:	b29a      	uxth	r2, r3
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	889b      	ldrh	r3, [r3, #4]
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d001      	beq.n	8017e06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017e02:	2300      	movs	r3, #0
 8017e04:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017e0c:	693b      	ldr	r3, [r7, #16]
 8017e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d193      	bne.n	8017d3e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017e16:	e000      	b.n	8017e1a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017e18:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d12d      	bne.n	8017e7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d01c      	beq.n	8017e60 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e28:	88db      	ldrh	r3, [r3, #6]
 8017e2a:	b29a      	uxth	r2, r3
 8017e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e2e:	889b      	ldrh	r3, [r3, #4]
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d906      	bls.n	8017e44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017e36:	4b45      	ldr	r3, [pc, #276]	; (8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e38:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017e3c:	4944      	ldr	r1, [pc, #272]	; (8017f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017e3e:	4845      	ldr	r0, [pc, #276]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e40:	f000 ff88 	bl	8018d54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e46:	68ba      	ldr	r2, [r7, #8]
 8017e48:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e4c:	88db      	ldrh	r3, [r3, #6]
 8017e4e:	b29a      	uxth	r2, r3
 8017e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e52:	889b      	ldrh	r3, [r3, #4]
 8017e54:	b29b      	uxth	r3, r3
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d010      	beq.n	8017e7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	623b      	str	r3, [r7, #32]
 8017e5e:	e00d      	b.n	8017e7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	685b      	ldr	r3, [r3, #4]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d006      	beq.n	8017e76 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017e68:	4b38      	ldr	r3, [pc, #224]	; (8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e6a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017e6e:	493a      	ldr	r1, [pc, #232]	; (8017f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017e70:	4838      	ldr	r0, [pc, #224]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e72:	f000 ff6f 	bl	8018d54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	68ba      	ldr	r2, [r7, #8]
 8017e7a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d105      	bne.n	8017e8e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	7f9b      	ldrb	r3, [r3, #30]
 8017e86:	f003 0301 	and.w	r3, r3, #1
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d059      	beq.n	8017f42 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017e8e:	6a3b      	ldr	r3, [r7, #32]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d04f      	beq.n	8017f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	685b      	ldr	r3, [r3, #4]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d006      	beq.n	8017eaa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	685b      	ldr	r3, [r3, #4]
 8017ea0:	685b      	ldr	r3, [r3, #4]
 8017ea2:	889b      	ldrh	r3, [r3, #4]
 8017ea4:	b29b      	uxth	r3, r3
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d002      	beq.n	8017eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017eaa:	2300      	movs	r3, #0
 8017eac:	623b      	str	r3, [r7, #32]
 8017eae:	e041      	b.n	8017f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017eba:	e012      	b.n	8017ee2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec4:	88db      	ldrh	r3, [r3, #6]
 8017ec6:	b29a      	uxth	r2, r3
 8017ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eca:	889b      	ldrh	r3, [r3, #4]
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d002      	beq.n	8017ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	623b      	str	r3, [r7, #32]
            break;
 8017ed6:	e007      	b.n	8017ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eda:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d1e9      	bne.n	8017ebc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017ee8:	6a3b      	ldr	r3, [r7, #32]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d022      	beq.n	8017f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d106      	bne.n	8017f04 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017ef6:	4b15      	ldr	r3, [pc, #84]	; (8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ef8:	f240 12df 	movw	r2, #479	; 0x1df
 8017efc:	4917      	ldr	r1, [pc, #92]	; (8017f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017efe:	4815      	ldr	r0, [pc, #84]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f00:	f000 ff28 	bl	8018d54 <iprintf>
          LWIP_ASSERT("sanity check",
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	685b      	ldr	r3, [r3, #4]
 8017f08:	685b      	ldr	r3, [r3, #4]
 8017f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d106      	bne.n	8017f1e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017f10:	4b0e      	ldr	r3, [pc, #56]	; (8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017f16:	4911      	ldr	r1, [pc, #68]	; (8017f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017f18:	480e      	ldr	r0, [pc, #56]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f1a:	f000 ff1b 	bl	8018d54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d006      	beq.n	8017f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017f26:	4b09      	ldr	r3, [pc, #36]	; (8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f28:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017f2c:	490c      	ldr	r1, [pc, #48]	; (8017f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017f2e:	4809      	ldr	r0, [pc, #36]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f30:	f000 ff10 	bl	8018d54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017f34:	6a3b      	ldr	r3, [r7, #32]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	bf14      	ite	ne
 8017f3a:	2301      	movne	r3, #1
 8017f3c:	2300      	moveq	r3, #0
 8017f3e:	b2db      	uxtb	r3, r3
 8017f40:	e000      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017f42:	2300      	movs	r3, #0
}
 8017f44:	4618      	mov	r0, r3
 8017f46:	3730      	adds	r7, #48	; 0x30
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	0801cad4 	.word	0x0801cad4
 8017f50:	0801cbb8 	.word	0x0801cbb8
 8017f54:	0801cb1c 	.word	0x0801cb1c
 8017f58:	0801cbd8 	.word	0x0801cbd8
 8017f5c:	0801cc10 	.word	0x0801cc10
 8017f60:	0801cc20 	.word	0x0801cc20

08017f64 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b08e      	sub	sp, #56	; 0x38
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f74:	781b      	ldrb	r3, [r3, #0]
 8017f76:	f003 030f 	and.w	r3, r3, #15
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	009b      	lsls	r3, r3, #2
 8017f7e:	b2db      	uxtb	r3, r3
 8017f80:	2b14      	cmp	r3, #20
 8017f82:	f040 8171 	bne.w	8018268 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f88:	88db      	ldrh	r3, [r3, #6]
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f7f6 fe17 	bl	800ebc0 <lwip_htons>
 8017f92:	4603      	mov	r3, r0
 8017f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f98:	b29b      	uxth	r3, r3
 8017f9a:	00db      	lsls	r3, r3, #3
 8017f9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fa0:	885b      	ldrh	r3, [r3, #2]
 8017fa2:	b29b      	uxth	r3, r3
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f7f6 fe0b 	bl	800ebc0 <lwip_htons>
 8017faa:	4603      	mov	r3, r0
 8017fac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	f003 030f 	and.w	r3, r3, #15
 8017fb6:	b2db      	uxtb	r3, r3
 8017fb8:	009b      	lsls	r3, r3, #2
 8017fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017fc2:	b29b      	uxth	r3, r3
 8017fc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	f0c0 8150 	bcc.w	801826c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017fd0:	b29b      	uxth	r3, r3
 8017fd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017fd4:	1ad3      	subs	r3, r2, r3
 8017fd6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017fd8:	6878      	ldr	r0, [r7, #4]
 8017fda:	f7f8 fa71 	bl	80104c0 <pbuf_clen>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017fe2:	4b8c      	ldr	r3, [pc, #560]	; (8018214 <ip4_reass+0x2b0>)
 8017fe4:	881b      	ldrh	r3, [r3, #0]
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	8c3b      	ldrh	r3, [r7, #32]
 8017fea:	4413      	add	r3, r2
 8017fec:	2b0a      	cmp	r3, #10
 8017fee:	dd10      	ble.n	8018012 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017ff0:	8c3b      	ldrh	r3, [r7, #32]
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ff6:	f7ff fd81 	bl	8017afc <ip_reass_remove_oldest_datagram>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	f000 8137 	beq.w	8018270 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018002:	4b84      	ldr	r3, [pc, #528]	; (8018214 <ip4_reass+0x2b0>)
 8018004:	881b      	ldrh	r3, [r3, #0]
 8018006:	461a      	mov	r2, r3
 8018008:	8c3b      	ldrh	r3, [r7, #32]
 801800a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801800c:	2b0a      	cmp	r3, #10
 801800e:	f300 812f 	bgt.w	8018270 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018012:	4b81      	ldr	r3, [pc, #516]	; (8018218 <ip4_reass+0x2b4>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	633b      	str	r3, [r7, #48]	; 0x30
 8018018:	e015      	b.n	8018046 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801801c:	695a      	ldr	r2, [r3, #20]
 801801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018020:	68db      	ldr	r3, [r3, #12]
 8018022:	429a      	cmp	r2, r3
 8018024:	d10c      	bne.n	8018040 <ip4_reass+0xdc>
 8018026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018028:	699a      	ldr	r2, [r3, #24]
 801802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801802c:	691b      	ldr	r3, [r3, #16]
 801802e:	429a      	cmp	r2, r3
 8018030:	d106      	bne.n	8018040 <ip4_reass+0xdc>
 8018032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018034:	899a      	ldrh	r2, [r3, #12]
 8018036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018038:	889b      	ldrh	r3, [r3, #4]
 801803a:	b29b      	uxth	r3, r3
 801803c:	429a      	cmp	r2, r3
 801803e:	d006      	beq.n	801804e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	633b      	str	r3, [r7, #48]	; 0x30
 8018046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018048:	2b00      	cmp	r3, #0
 801804a:	d1e6      	bne.n	801801a <ip4_reass+0xb6>
 801804c:	e000      	b.n	8018050 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801804e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018052:	2b00      	cmp	r3, #0
 8018054:	d109      	bne.n	801806a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018056:	8c3b      	ldrh	r3, [r7, #32]
 8018058:	4619      	mov	r1, r3
 801805a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801805c:	f7ff fdb0 	bl	8017bc0 <ip_reass_enqueue_new_datagram>
 8018060:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018064:	2b00      	cmp	r3, #0
 8018066:	d11c      	bne.n	80180a2 <ip4_reass+0x13e>
      goto nullreturn;
 8018068:	e105      	b.n	8018276 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801806c:	88db      	ldrh	r3, [r3, #6]
 801806e:	b29b      	uxth	r3, r3
 8018070:	4618      	mov	r0, r3
 8018072:	f7f6 fda5 	bl	800ebc0 <lwip_htons>
 8018076:	4603      	mov	r3, r0
 8018078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801807c:	2b00      	cmp	r3, #0
 801807e:	d110      	bne.n	80180a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018082:	89db      	ldrh	r3, [r3, #14]
 8018084:	4618      	mov	r0, r3
 8018086:	f7f6 fd9b 	bl	800ebc0 <lwip_htons>
 801808a:	4603      	mov	r3, r0
 801808c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018090:	2b00      	cmp	r3, #0
 8018092:	d006      	beq.n	80180a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018096:	3308      	adds	r3, #8
 8018098:	2214      	movs	r2, #20
 801809a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801809c:	4618      	mov	r0, r3
 801809e:	f000 fd94 	bl	8018bca <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80180a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a4:	88db      	ldrh	r3, [r3, #6]
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	f003 0320 	and.w	r3, r3, #32
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	bf0c      	ite	eq
 80180b0:	2301      	moveq	r3, #1
 80180b2:	2300      	movne	r3, #0
 80180b4:	b2db      	uxtb	r3, r3
 80180b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80180b8:	69fb      	ldr	r3, [r7, #28]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d00e      	beq.n	80180dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80180be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80180c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180c2:	4413      	add	r3, r2
 80180c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80180c6:	8b7a      	ldrh	r2, [r7, #26]
 80180c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80180ca:	429a      	cmp	r2, r3
 80180cc:	f0c0 80a0 	bcc.w	8018210 <ip4_reass+0x2ac>
 80180d0:	8b7b      	ldrh	r3, [r7, #26]
 80180d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80180d6:	4293      	cmp	r3, r2
 80180d8:	f200 809a 	bhi.w	8018210 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80180dc:	69fa      	ldr	r2, [r7, #28]
 80180de:	6879      	ldr	r1, [r7, #4]
 80180e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180e2:	f7ff fdd5 	bl	8017c90 <ip_reass_chain_frag_into_datagram_and_validate>
 80180e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180ee:	f000 809b 	beq.w	8018228 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80180f2:	4b48      	ldr	r3, [pc, #288]	; (8018214 <ip4_reass+0x2b0>)
 80180f4:	881a      	ldrh	r2, [r3, #0]
 80180f6:	8c3b      	ldrh	r3, [r7, #32]
 80180f8:	4413      	add	r3, r2
 80180fa:	b29a      	uxth	r2, r3
 80180fc:	4b45      	ldr	r3, [pc, #276]	; (8018214 <ip4_reass+0x2b0>)
 80180fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018100:	69fb      	ldr	r3, [r7, #28]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d00d      	beq.n	8018122 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018106:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801810a:	4413      	add	r3, r2
 801810c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018110:	8a7a      	ldrh	r2, [r7, #18]
 8018112:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018116:	7f9b      	ldrb	r3, [r3, #30]
 8018118:	f043 0301 	orr.w	r3, r3, #1
 801811c:	b2da      	uxtb	r2, r3
 801811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018120:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018122:	697b      	ldr	r3, [r7, #20]
 8018124:	2b01      	cmp	r3, #1
 8018126:	d171      	bne.n	801820c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801812a:	8b9b      	ldrh	r3, [r3, #28]
 801812c:	3314      	adds	r3, #20
 801812e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018132:	685b      	ldr	r3, [r3, #4]
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801813c:	685b      	ldr	r3, [r3, #4]
 801813e:	685b      	ldr	r3, [r3, #4]
 8018140:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018144:	3308      	adds	r3, #8
 8018146:	2214      	movs	r2, #20
 8018148:	4619      	mov	r1, r3
 801814a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801814c:	f000 fd3d 	bl	8018bca <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018150:	8a3b      	ldrh	r3, [r7, #16]
 8018152:	4618      	mov	r0, r3
 8018154:	f7f6 fd34 	bl	800ebc0 <lwip_htons>
 8018158:	4603      	mov	r3, r0
 801815a:	461a      	mov	r2, r3
 801815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801815e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018162:	2200      	movs	r2, #0
 8018164:	719a      	strb	r2, [r3, #6]
 8018166:	2200      	movs	r2, #0
 8018168:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801816c:	2200      	movs	r2, #0
 801816e:	729a      	strb	r2, [r3, #10]
 8018170:	2200      	movs	r2, #0
 8018172:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801817a:	e00d      	b.n	8018198 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018182:	2114      	movs	r1, #20
 8018184:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018186:	f7f8 f887 	bl	8010298 <pbuf_remove_header>
      pbuf_cat(p, r);
 801818a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f7f8 f9d7 	bl	8010540 <pbuf_cat>
      r = iprh->next_pbuf;
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801819a:	2b00      	cmp	r3, #0
 801819c:	d1ee      	bne.n	801817c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801819e:	4b1e      	ldr	r3, [pc, #120]	; (8018218 <ip4_reass+0x2b4>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d102      	bne.n	80181ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 80181a8:	2300      	movs	r3, #0
 80181aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181ac:	e010      	b.n	80181d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80181ae:	4b1a      	ldr	r3, [pc, #104]	; (8018218 <ip4_reass+0x2b4>)
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181b4:	e007      	b.n	80181c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80181b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181bc:	429a      	cmp	r2, r3
 80181be:	d006      	beq.n	80181ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80181c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d1f4      	bne.n	80181b6 <ip4_reass+0x252>
 80181cc:	e000      	b.n	80181d0 <ip4_reass+0x26c>
          break;
 80181ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80181d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80181d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181d4:	f7ff fd2e 	bl	8017c34 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	f7f8 f971 	bl	80104c0 <pbuf_clen>
 80181de:	4603      	mov	r3, r0
 80181e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80181e2:	4b0c      	ldr	r3, [pc, #48]	; (8018214 <ip4_reass+0x2b0>)
 80181e4:	881b      	ldrh	r3, [r3, #0]
 80181e6:	8c3a      	ldrh	r2, [r7, #32]
 80181e8:	429a      	cmp	r2, r3
 80181ea:	d906      	bls.n	80181fa <ip4_reass+0x296>
 80181ec:	4b0b      	ldr	r3, [pc, #44]	; (801821c <ip4_reass+0x2b8>)
 80181ee:	f240 229b 	movw	r2, #667	; 0x29b
 80181f2:	490b      	ldr	r1, [pc, #44]	; (8018220 <ip4_reass+0x2bc>)
 80181f4:	480b      	ldr	r0, [pc, #44]	; (8018224 <ip4_reass+0x2c0>)
 80181f6:	f000 fdad 	bl	8018d54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80181fa:	4b06      	ldr	r3, [pc, #24]	; (8018214 <ip4_reass+0x2b0>)
 80181fc:	881a      	ldrh	r2, [r3, #0]
 80181fe:	8c3b      	ldrh	r3, [r7, #32]
 8018200:	1ad3      	subs	r3, r2, r3
 8018202:	b29a      	uxth	r2, r3
 8018204:	4b03      	ldr	r3, [pc, #12]	; (8018214 <ip4_reass+0x2b0>)
 8018206:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	e038      	b.n	801827e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801820c:	2300      	movs	r3, #0
 801820e:	e036      	b.n	801827e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018210:	bf00      	nop
 8018212:	e00a      	b.n	801822a <ip4_reass+0x2c6>
 8018214:	2000dae0 	.word	0x2000dae0
 8018218:	2000dadc 	.word	0x2000dadc
 801821c:	0801cad4 	.word	0x0801cad4
 8018220:	0801cc44 	.word	0x0801cc44
 8018224:	0801cb1c 	.word	0x0801cb1c
    goto nullreturn_ipr;
 8018228:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822c:	2b00      	cmp	r3, #0
 801822e:	d106      	bne.n	801823e <ip4_reass+0x2da>
 8018230:	4b15      	ldr	r3, [pc, #84]	; (8018288 <ip4_reass+0x324>)
 8018232:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018236:	4915      	ldr	r1, [pc, #84]	; (801828c <ip4_reass+0x328>)
 8018238:	4815      	ldr	r0, [pc, #84]	; (8018290 <ip4_reass+0x32c>)
 801823a:	f000 fd8b 	bl	8018d54 <iprintf>
  if (ipr->p == NULL) {
 801823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d116      	bne.n	8018274 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018246:	4b13      	ldr	r3, [pc, #76]	; (8018294 <ip4_reass+0x330>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801824c:	429a      	cmp	r2, r3
 801824e:	d006      	beq.n	801825e <ip4_reass+0x2fa>
 8018250:	4b0d      	ldr	r3, [pc, #52]	; (8018288 <ip4_reass+0x324>)
 8018252:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018256:	4910      	ldr	r1, [pc, #64]	; (8018298 <ip4_reass+0x334>)
 8018258:	480d      	ldr	r0, [pc, #52]	; (8018290 <ip4_reass+0x32c>)
 801825a:	f000 fd7b 	bl	8018d54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801825e:	2100      	movs	r1, #0
 8018260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018262:	f7ff fce7 	bl	8017c34 <ip_reass_dequeue_datagram>
 8018266:	e006      	b.n	8018276 <ip4_reass+0x312>
    goto nullreturn;
 8018268:	bf00      	nop
 801826a:	e004      	b.n	8018276 <ip4_reass+0x312>
    goto nullreturn;
 801826c:	bf00      	nop
 801826e:	e002      	b.n	8018276 <ip4_reass+0x312>
      goto nullreturn;
 8018270:	bf00      	nop
 8018272:	e000      	b.n	8018276 <ip4_reass+0x312>
  }

nullreturn:
 8018274:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018276:	6878      	ldr	r0, [r7, #4]
 8018278:	f7f8 f894 	bl	80103a4 <pbuf_free>
  return NULL;
 801827c:	2300      	movs	r3, #0
}
 801827e:	4618      	mov	r0, r3
 8018280:	3738      	adds	r7, #56	; 0x38
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}
 8018286:	bf00      	nop
 8018288:	0801cad4 	.word	0x0801cad4
 801828c:	0801cc60 	.word	0x0801cc60
 8018290:	0801cb1c 	.word	0x0801cb1c
 8018294:	2000dadc 	.word	0x2000dadc
 8018298:	0801cc6c 	.word	0x0801cc6c

0801829c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80182a0:	2005      	movs	r0, #5
 80182a2:	f7f7 f965 	bl	800f570 <memp_malloc>
 80182a6:	4603      	mov	r3, r0
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	bd80      	pop	{r7, pc}

080182ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b082      	sub	sp, #8
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d106      	bne.n	80182c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80182ba:	4b07      	ldr	r3, [pc, #28]	; (80182d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80182bc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80182c0:	4906      	ldr	r1, [pc, #24]	; (80182dc <ip_frag_free_pbuf_custom_ref+0x30>)
 80182c2:	4807      	ldr	r0, [pc, #28]	; (80182e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80182c4:	f000 fd46 	bl	8018d54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80182c8:	6879      	ldr	r1, [r7, #4]
 80182ca:	2005      	movs	r0, #5
 80182cc:	f7f7 f9c6 	bl	800f65c <memp_free>
}
 80182d0:	bf00      	nop
 80182d2:	3708      	adds	r7, #8
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}
 80182d8:	0801cad4 	.word	0x0801cad4
 80182dc:	0801cc8c 	.word	0x0801cc8c
 80182e0:	0801cb1c 	.word	0x0801cb1c

080182e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b084      	sub	sp, #16
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d106      	bne.n	8018304 <ipfrag_free_pbuf_custom+0x20>
 80182f6:	4b11      	ldr	r3, [pc, #68]	; (801833c <ipfrag_free_pbuf_custom+0x58>)
 80182f8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80182fc:	4910      	ldr	r1, [pc, #64]	; (8018340 <ipfrag_free_pbuf_custom+0x5c>)
 80182fe:	4811      	ldr	r0, [pc, #68]	; (8018344 <ipfrag_free_pbuf_custom+0x60>)
 8018300:	f000 fd28 	bl	8018d54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018304:	68fa      	ldr	r2, [r7, #12]
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	429a      	cmp	r2, r3
 801830a:	d006      	beq.n	801831a <ipfrag_free_pbuf_custom+0x36>
 801830c:	4b0b      	ldr	r3, [pc, #44]	; (801833c <ipfrag_free_pbuf_custom+0x58>)
 801830e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018312:	490d      	ldr	r1, [pc, #52]	; (8018348 <ipfrag_free_pbuf_custom+0x64>)
 8018314:	480b      	ldr	r0, [pc, #44]	; (8018344 <ipfrag_free_pbuf_custom+0x60>)
 8018316:	f000 fd1d 	bl	8018d54 <iprintf>
  if (pcr->original != NULL) {
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	695b      	ldr	r3, [r3, #20]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d004      	beq.n	801832c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	695b      	ldr	r3, [r3, #20]
 8018326:	4618      	mov	r0, r3
 8018328:	f7f8 f83c 	bl	80103a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801832c:	68f8      	ldr	r0, [r7, #12]
 801832e:	f7ff ffbd 	bl	80182ac <ip_frag_free_pbuf_custom_ref>
}
 8018332:	bf00      	nop
 8018334:	3710      	adds	r7, #16
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}
 801833a:	bf00      	nop
 801833c:	0801cad4 	.word	0x0801cad4
 8018340:	0801cc98 	.word	0x0801cc98
 8018344:	0801cb1c 	.word	0x0801cb1c
 8018348:	0801cca4 	.word	0x0801cca4

0801834c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b094      	sub	sp, #80	; 0x50
 8018350:	af02      	add	r7, sp, #8
 8018352:	60f8      	str	r0, [r7, #12]
 8018354:	60b9      	str	r1, [r7, #8]
 8018356:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018362:	3b14      	subs	r3, #20
 8018364:	2b00      	cmp	r3, #0
 8018366:	da00      	bge.n	801836a <ip4_frag+0x1e>
 8018368:	3307      	adds	r3, #7
 801836a:	10db      	asrs	r3, r3, #3
 801836c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801836e:	2314      	movs	r3, #20
 8018370:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	685b      	ldr	r3, [r3, #4]
 8018376:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801837a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837e:	781b      	ldrb	r3, [r3, #0]
 8018380:	f003 030f 	and.w	r3, r3, #15
 8018384:	b2db      	uxtb	r3, r3
 8018386:	009b      	lsls	r3, r3, #2
 8018388:	b2db      	uxtb	r3, r3
 801838a:	2b14      	cmp	r3, #20
 801838c:	d002      	beq.n	8018394 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801838e:	f06f 0305 	mvn.w	r3, #5
 8018392:	e110      	b.n	80185b6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	895b      	ldrh	r3, [r3, #10]
 8018398:	2b13      	cmp	r3, #19
 801839a:	d809      	bhi.n	80183b0 <ip4_frag+0x64>
 801839c:	4b88      	ldr	r3, [pc, #544]	; (80185c0 <ip4_frag+0x274>)
 801839e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80183a2:	4988      	ldr	r1, [pc, #544]	; (80185c4 <ip4_frag+0x278>)
 80183a4:	4888      	ldr	r0, [pc, #544]	; (80185c8 <ip4_frag+0x27c>)
 80183a6:	f000 fcd5 	bl	8018d54 <iprintf>
 80183aa:	f06f 0305 	mvn.w	r3, #5
 80183ae:	e102      	b.n	80185b6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80183b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b2:	88db      	ldrh	r3, [r3, #6]
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7f6 fc02 	bl	800ebc0 <lwip_htons>
 80183bc:	4603      	mov	r3, r0
 80183be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80183c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80183ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80183d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	891b      	ldrh	r3, [r3, #8]
 80183d6:	3b14      	subs	r3, #20
 80183d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80183dc:	e0e1      	b.n	80185a2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80183de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80183e0:	00db      	lsls	r3, r3, #3
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183e8:	4293      	cmp	r3, r2
 80183ea:	bf28      	it	cs
 80183ec:	4613      	movcs	r3, r2
 80183ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80183f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183f4:	2114      	movs	r1, #20
 80183f6:	200e      	movs	r0, #14
 80183f8:	f7f7 fcf0 	bl	800fddc <pbuf_alloc>
 80183fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80183fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018400:	2b00      	cmp	r3, #0
 8018402:	f000 80d5 	beq.w	80185b0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018408:	895b      	ldrh	r3, [r3, #10]
 801840a:	2b13      	cmp	r3, #19
 801840c:	d806      	bhi.n	801841c <ip4_frag+0xd0>
 801840e:	4b6c      	ldr	r3, [pc, #432]	; (80185c0 <ip4_frag+0x274>)
 8018410:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018414:	496d      	ldr	r1, [pc, #436]	; (80185cc <ip4_frag+0x280>)
 8018416:	486c      	ldr	r0, [pc, #432]	; (80185c8 <ip4_frag+0x27c>)
 8018418:	f000 fc9c 	bl	8018d54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	2214      	movs	r2, #20
 8018422:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018424:	4618      	mov	r0, r3
 8018426:	f000 fbd0 	bl	8018bca <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018430:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018432:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018436:	e064      	b.n	8018502 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	895a      	ldrh	r2, [r3, #10]
 801843c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801843e:	1ad3      	subs	r3, r2, r3
 8018440:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	895b      	ldrh	r3, [r3, #10]
 8018446:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018448:	429a      	cmp	r2, r3
 801844a:	d906      	bls.n	801845a <ip4_frag+0x10e>
 801844c:	4b5c      	ldr	r3, [pc, #368]	; (80185c0 <ip4_frag+0x274>)
 801844e:	f240 322d 	movw	r2, #813	; 0x32d
 8018452:	495f      	ldr	r1, [pc, #380]	; (80185d0 <ip4_frag+0x284>)
 8018454:	485c      	ldr	r0, [pc, #368]	; (80185c8 <ip4_frag+0x27c>)
 8018456:	f000 fc7d 	bl	8018d54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801845a:	8bfa      	ldrh	r2, [r7, #30]
 801845c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018460:	4293      	cmp	r3, r2
 8018462:	bf28      	it	cs
 8018464:	4613      	movcs	r3, r2
 8018466:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801846a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801846e:	2b00      	cmp	r3, #0
 8018470:	d105      	bne.n	801847e <ip4_frag+0x132>
        poff = 0;
 8018472:	2300      	movs	r3, #0
 8018474:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	60fb      	str	r3, [r7, #12]
        continue;
 801847c:	e041      	b.n	8018502 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801847e:	f7ff ff0d 	bl	801829c <ip_frag_alloc_pbuf_custom_ref>
 8018482:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018484:	69bb      	ldr	r3, [r7, #24]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d103      	bne.n	8018492 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801848a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801848c:	f7f7 ff8a 	bl	80103a4 <pbuf_free>
        goto memerr;
 8018490:	e08f      	b.n	80185b2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018492:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801849a:	4413      	add	r3, r2
 801849c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80184a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80184a4:	9201      	str	r2, [sp, #4]
 80184a6:	9300      	str	r3, [sp, #0]
 80184a8:	4603      	mov	r3, r0
 80184aa:	2241      	movs	r2, #65	; 0x41
 80184ac:	2000      	movs	r0, #0
 80184ae:	f7f7 fdbf 	bl	8010030 <pbuf_alloced_custom>
 80184b2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d106      	bne.n	80184c8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80184ba:	69b8      	ldr	r0, [r7, #24]
 80184bc:	f7ff fef6 	bl	80182ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80184c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184c2:	f7f7 ff6f 	bl	80103a4 <pbuf_free>
        goto memerr;
 80184c6:	e074      	b.n	80185b2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80184c8:	68f8      	ldr	r0, [r7, #12]
 80184ca:	f7f8 f811 	bl	80104f0 <pbuf_ref>
      pcr->original = p;
 80184ce:	69bb      	ldr	r3, [r7, #24]
 80184d0:	68fa      	ldr	r2, [r7, #12]
 80184d2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80184d4:	69bb      	ldr	r3, [r7, #24]
 80184d6:	4a3f      	ldr	r2, [pc, #252]	; (80185d4 <ip4_frag+0x288>)
 80184d8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80184da:	6979      	ldr	r1, [r7, #20]
 80184dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184de:	f7f8 f82f 	bl	8010540 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80184e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80184e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80184ea:	1ad3      	subs	r3, r2, r3
 80184ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80184f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d004      	beq.n	8018502 <ip4_frag+0x1b6>
        poff = 0;
 80184f8:	2300      	movs	r3, #0
 80184fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018502:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018506:	2b00      	cmp	r3, #0
 8018508:	d196      	bne.n	8018438 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801850a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801850c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018510:	4413      	add	r3, r2
 8018512:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018518:	f1a3 0213 	sub.w	r2, r3, #19
 801851c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018520:	429a      	cmp	r2, r3
 8018522:	bfcc      	ite	gt
 8018524:	2301      	movgt	r3, #1
 8018526:	2300      	movle	r3, #0
 8018528:	b2db      	uxtb	r3, r3
 801852a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801852c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018534:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018536:	6a3b      	ldr	r3, [r7, #32]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d002      	beq.n	8018542 <ip4_frag+0x1f6>
 801853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853e:	2b00      	cmp	r3, #0
 8018540:	d003      	beq.n	801854a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018542:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018548:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801854a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801854c:	4618      	mov	r0, r3
 801854e:	f7f6 fb37 	bl	800ebc0 <lwip_htons>
 8018552:	4603      	mov	r3, r0
 8018554:	461a      	mov	r2, r3
 8018556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018558:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801855a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801855c:	3314      	adds	r3, #20
 801855e:	b29b      	uxth	r3, r3
 8018560:	4618      	mov	r0, r3
 8018562:	f7f6 fb2d 	bl	800ebc0 <lwip_htons>
 8018566:	4603      	mov	r3, r0
 8018568:	461a      	mov	r2, r3
 801856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801856c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018570:	2200      	movs	r2, #0
 8018572:	729a      	strb	r2, [r3, #10]
 8018574:	2200      	movs	r2, #0
 8018576:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018578:	68bb      	ldr	r3, [r7, #8]
 801857a:	695b      	ldr	r3, [r3, #20]
 801857c:	687a      	ldr	r2, [r7, #4]
 801857e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018580:	68b8      	ldr	r0, [r7, #8]
 8018582:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018586:	f7f7 ff0d 	bl	80103a4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801858a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801858e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018590:	1ad3      	subs	r3, r2, r3
 8018592:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018596:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801859a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801859c:	4413      	add	r3, r2
 801859e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80185a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	f47f af19 	bne.w	80183de <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80185ac:	2300      	movs	r3, #0
 80185ae:	e002      	b.n	80185b6 <ip4_frag+0x26a>
      goto memerr;
 80185b0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80185b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	3748      	adds	r7, #72	; 0x48
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}
 80185be:	bf00      	nop
 80185c0:	0801cad4 	.word	0x0801cad4
 80185c4:	0801ccb0 	.word	0x0801ccb0
 80185c8:	0801cb1c 	.word	0x0801cb1c
 80185cc:	0801cccc 	.word	0x0801cccc
 80185d0:	0801ccec 	.word	0x0801ccec
 80185d4:	080182e5 	.word	0x080182e5

080185d8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b086      	sub	sp, #24
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80185e2:	230e      	movs	r3, #14
 80185e4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	895b      	ldrh	r3, [r3, #10]
 80185ea:	2b0e      	cmp	r3, #14
 80185ec:	d96e      	bls.n	80186cc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	7bdb      	ldrb	r3, [r3, #15]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d106      	bne.n	8018604 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80185f6:	683b      	ldr	r3, [r7, #0]
 80185f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80185fc:	3301      	adds	r3, #1
 80185fe:	b2da      	uxtb	r2, r3
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	685b      	ldr	r3, [r3, #4]
 8018608:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801860a:	693b      	ldr	r3, [r7, #16]
 801860c:	7b1a      	ldrb	r2, [r3, #12]
 801860e:	7b5b      	ldrb	r3, [r3, #13]
 8018610:	021b      	lsls	r3, r3, #8
 8018612:	4313      	orrs	r3, r2
 8018614:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018616:	693b      	ldr	r3, [r7, #16]
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	f003 0301 	and.w	r3, r3, #1
 801861e:	2b00      	cmp	r3, #0
 8018620:	d023      	beq.n	801866a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018622:	693b      	ldr	r3, [r7, #16]
 8018624:	781b      	ldrb	r3, [r3, #0]
 8018626:	2b01      	cmp	r3, #1
 8018628:	d10f      	bne.n	801864a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	785b      	ldrb	r3, [r3, #1]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d11b      	bne.n	801866a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018632:	693b      	ldr	r3, [r7, #16]
 8018634:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018636:	2b5e      	cmp	r3, #94	; 0x5e
 8018638:	d117      	bne.n	801866a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	7b5b      	ldrb	r3, [r3, #13]
 801863e:	f043 0310 	orr.w	r3, r3, #16
 8018642:	b2da      	uxtb	r2, r3
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	735a      	strb	r2, [r3, #13]
 8018648:	e00f      	b.n	801866a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801864a:	693b      	ldr	r3, [r7, #16]
 801864c:	2206      	movs	r2, #6
 801864e:	4928      	ldr	r1, [pc, #160]	; (80186f0 <ethernet_input+0x118>)
 8018650:	4618      	mov	r0, r3
 8018652:	f000 faaa 	bl	8018baa <memcmp>
 8018656:	4603      	mov	r3, r0
 8018658:	2b00      	cmp	r3, #0
 801865a:	d106      	bne.n	801866a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	7b5b      	ldrb	r3, [r3, #13]
 8018660:	f043 0308 	orr.w	r3, r3, #8
 8018664:	b2da      	uxtb	r2, r3
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801866a:	89fb      	ldrh	r3, [r7, #14]
 801866c:	2b08      	cmp	r3, #8
 801866e:	d003      	beq.n	8018678 <ethernet_input+0xa0>
 8018670:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018674:	d014      	beq.n	80186a0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018676:	e032      	b.n	80186de <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801867e:	f003 0308 	and.w	r3, r3, #8
 8018682:	2b00      	cmp	r3, #0
 8018684:	d024      	beq.n	80186d0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018686:	8afb      	ldrh	r3, [r7, #22]
 8018688:	4619      	mov	r1, r3
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	f7f7 fe04 	bl	8010298 <pbuf_remove_header>
 8018690:	4603      	mov	r3, r0
 8018692:	2b00      	cmp	r3, #0
 8018694:	d11e      	bne.n	80186d4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018696:	6839      	ldr	r1, [r7, #0]
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f7fe ff21 	bl	80174e0 <ip4_input>
      break;
 801869e:	e013      	b.n	80186c8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80186a0:	683b      	ldr	r3, [r7, #0]
 80186a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80186a6:	f003 0308 	and.w	r3, r3, #8
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d014      	beq.n	80186d8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80186ae:	8afb      	ldrh	r3, [r7, #22]
 80186b0:	4619      	mov	r1, r3
 80186b2:	6878      	ldr	r0, [r7, #4]
 80186b4:	f7f7 fdf0 	bl	8010298 <pbuf_remove_header>
 80186b8:	4603      	mov	r3, r0
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d10e      	bne.n	80186dc <ethernet_input+0x104>
        etharp_input(p, netif);
 80186be:	6839      	ldr	r1, [r7, #0]
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f7fe f8c1 	bl	8016848 <etharp_input>
      break;
 80186c6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80186c8:	2300      	movs	r3, #0
 80186ca:	e00c      	b.n	80186e6 <ethernet_input+0x10e>
    goto free_and_return;
 80186cc:	bf00      	nop
 80186ce:	e006      	b.n	80186de <ethernet_input+0x106>
        goto free_and_return;
 80186d0:	bf00      	nop
 80186d2:	e004      	b.n	80186de <ethernet_input+0x106>
        goto free_and_return;
 80186d4:	bf00      	nop
 80186d6:	e002      	b.n	80186de <ethernet_input+0x106>
        goto free_and_return;
 80186d8:	bf00      	nop
 80186da:	e000      	b.n	80186de <ethernet_input+0x106>
        goto free_and_return;
 80186dc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f7f7 fe60 	bl	80103a4 <pbuf_free>
  return ERR_OK;
 80186e4:	2300      	movs	r3, #0
}
 80186e6:	4618      	mov	r0, r3
 80186e8:	3718      	adds	r7, #24
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}
 80186ee:	bf00      	nop
 80186f0:	0801cf68 	.word	0x0801cf68

080186f4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b086      	sub	sp, #24
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	60f8      	str	r0, [r7, #12]
 80186fc:	60b9      	str	r1, [r7, #8]
 80186fe:	607a      	str	r2, [r7, #4]
 8018700:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018702:	8c3b      	ldrh	r3, [r7, #32]
 8018704:	4618      	mov	r0, r3
 8018706:	f7f6 fa5b 	bl	800ebc0 <lwip_htons>
 801870a:	4603      	mov	r3, r0
 801870c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801870e:	210e      	movs	r1, #14
 8018710:	68b8      	ldr	r0, [r7, #8]
 8018712:	f7f7 fdb1 	bl	8010278 <pbuf_add_header>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d125      	bne.n	8018768 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801871c:	68bb      	ldr	r3, [r7, #8]
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018722:	693b      	ldr	r3, [r7, #16]
 8018724:	8afa      	ldrh	r2, [r7, #22]
 8018726:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	2206      	movs	r2, #6
 801872c:	6839      	ldr	r1, [r7, #0]
 801872e:	4618      	mov	r0, r3
 8018730:	f000 fa4b 	bl	8018bca <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018734:	693b      	ldr	r3, [r7, #16]
 8018736:	3306      	adds	r3, #6
 8018738:	2206      	movs	r2, #6
 801873a:	6879      	ldr	r1, [r7, #4]
 801873c:	4618      	mov	r0, r3
 801873e:	f000 fa44 	bl	8018bca <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018748:	2b06      	cmp	r3, #6
 801874a:	d006      	beq.n	801875a <ethernet_output+0x66>
 801874c:	4b0a      	ldr	r3, [pc, #40]	; (8018778 <ethernet_output+0x84>)
 801874e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018752:	490a      	ldr	r1, [pc, #40]	; (801877c <ethernet_output+0x88>)
 8018754:	480a      	ldr	r0, [pc, #40]	; (8018780 <ethernet_output+0x8c>)
 8018756:	f000 fafd 	bl	8018d54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	699b      	ldr	r3, [r3, #24]
 801875e:	68b9      	ldr	r1, [r7, #8]
 8018760:	68f8      	ldr	r0, [r7, #12]
 8018762:	4798      	blx	r3
 8018764:	4603      	mov	r3, r0
 8018766:	e002      	b.n	801876e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018768:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801876a:	f06f 0301 	mvn.w	r3, #1
}
 801876e:	4618      	mov	r0, r3
 8018770:	3718      	adds	r7, #24
 8018772:	46bd      	mov	sp, r7
 8018774:	bd80      	pop	{r7, pc}
 8018776:	bf00      	nop
 8018778:	0801ccfc 	.word	0x0801ccfc
 801877c:	0801cd34 	.word	0x0801cd34
 8018780:	0801cd68 	.word	0x0801cd68

08018784 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
 801878c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801878e:	683b      	ldr	r3, [r7, #0]
 8018790:	2200      	movs	r2, #0
 8018792:	2104      	movs	r1, #4
 8018794:	4618      	mov	r0, r3
 8018796:	f7f2 fdc1 	bl	800b31c <osMessageQueueNew>
 801879a:	4602      	mov	r2, r0
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d102      	bne.n	80187ae <sys_mbox_new+0x2a>
    return ERR_MEM;
 80187a8:	f04f 33ff 	mov.w	r3, #4294967295
 80187ac:	e000      	b.n	80187b0 <sys_mbox_new+0x2c>

  return ERR_OK;
 80187ae:	2300      	movs	r3, #0
}
 80187b0:	4618      	mov	r0, r3
 80187b2:	3708      	adds	r7, #8
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}

080187b8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6818      	ldr	r0, [r3, #0]
 80187c6:	4639      	mov	r1, r7
 80187c8:	2300      	movs	r3, #0
 80187ca:	2200      	movs	r2, #0
 80187cc:	f7f2 fe1a 	bl	800b404 <osMessageQueuePut>
 80187d0:	4603      	mov	r3, r0
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d102      	bne.n	80187dc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80187d6:	2300      	movs	r3, #0
 80187d8:	73fb      	strb	r3, [r7, #15]
 80187da:	e001      	b.n	80187e0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80187dc:	23ff      	movs	r3, #255	; 0xff
 80187de:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80187e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80187e4:	4618      	mov	r0, r3
 80187e6:	3710      	adds	r7, #16
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}

080187ec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b086      	sub	sp, #24
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	60f8      	str	r0, [r7, #12]
 80187f4:	60b9      	str	r1, [r7, #8]
 80187f6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80187f8:	f7f2 faa0 	bl	800ad3c <osKernelGetTickCount>
 80187fc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d013      	beq.n	801882c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	6818      	ldr	r0, [r3, #0]
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	2200      	movs	r2, #0
 801880c:	68b9      	ldr	r1, [r7, #8]
 801880e:	f7f2 fe59 	bl	800b4c4 <osMessageQueueGet>
 8018812:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018814:	693b      	ldr	r3, [r7, #16]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d105      	bne.n	8018826 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801881a:	f7f2 fa8f 	bl	800ad3c <osKernelGetTickCount>
 801881e:	4602      	mov	r2, r0
 8018820:	697b      	ldr	r3, [r7, #20]
 8018822:	1ad3      	subs	r3, r2, r3
 8018824:	e00f      	b.n	8018846 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018826:	f04f 33ff 	mov.w	r3, #4294967295
 801882a:	e00c      	b.n	8018846 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	6818      	ldr	r0, [r3, #0]
 8018830:	f04f 33ff 	mov.w	r3, #4294967295
 8018834:	2200      	movs	r2, #0
 8018836:	68b9      	ldr	r1, [r7, #8]
 8018838:	f7f2 fe44 	bl	800b4c4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801883c:	f7f2 fa7e 	bl	800ad3c <osKernelGetTickCount>
 8018840:	4602      	mov	r2, r0
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018846:	4618      	mov	r0, r3
 8018848:	3718      	adds	r7, #24
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}

0801884e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801884e:	b480      	push	{r7}
 8018850:	b083      	sub	sp, #12
 8018852:	af00      	add	r7, sp, #0
 8018854:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d101      	bne.n	8018862 <sys_mbox_valid+0x14>
    return 0;
 801885e:	2300      	movs	r3, #0
 8018860:	e000      	b.n	8018864 <sys_mbox_valid+0x16>
  else
    return 1;
 8018862:	2301      	movs	r3, #1
}
 8018864:	4618      	mov	r0, r3
 8018866:	370c      	adds	r7, #12
 8018868:	46bd      	mov	sp, r7
 801886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886e:	4770      	bx	lr

08018870 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018874:	2000      	movs	r0, #0
 8018876:	f7f2 fb23 	bl	800aec0 <osMutexNew>
 801887a:	4603      	mov	r3, r0
 801887c:	4a01      	ldr	r2, [pc, #4]	; (8018884 <sys_init+0x14>)
 801887e:	6013      	str	r3, [r2, #0]
#endif
}
 8018880:	bf00      	nop
 8018882:	bd80      	pop	{r7, pc}
 8018884:	2000dae4 	.word	0x2000dae4

08018888 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018888:	b580      	push	{r7, lr}
 801888a:	b082      	sub	sp, #8
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018890:	2000      	movs	r0, #0
 8018892:	f7f2 fb15 	bl	800aec0 <osMutexNew>
 8018896:	4602      	mov	r2, r0
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d102      	bne.n	80188aa <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80188a4:	f04f 33ff 	mov.w	r3, #4294967295
 80188a8:	e000      	b.n	80188ac <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80188aa:	2300      	movs	r3, #0
}
 80188ac:	4618      	mov	r0, r3
 80188ae:	3708      	adds	r7, #8
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}

080188b4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b082      	sub	sp, #8
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	f04f 31ff 	mov.w	r1, #4294967295
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7f2 fb81 	bl	800afcc <osMutexAcquire>
#endif
}
 80188ca:	bf00      	nop
 80188cc:	3708      	adds	r7, #8
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd80      	pop	{r7, pc}

080188d2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80188d2:	b580      	push	{r7, lr}
 80188d4:	b082      	sub	sp, #8
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	4618      	mov	r0, r3
 80188e0:	f7f2 fbbf 	bl	800b062 <osMutexRelease>
}
 80188e4:	bf00      	nop
 80188e6:	3708      	adds	r7, #8
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b08e      	sub	sp, #56	; 0x38
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	60f8      	str	r0, [r7, #12]
 80188f4:	60b9      	str	r1, [r7, #8]
 80188f6:	607a      	str	r2, [r7, #4]
 80188f8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80188fa:	f107 0314 	add.w	r3, r7, #20
 80188fe:	2224      	movs	r2, #36	; 0x24
 8018900:	2100      	movs	r1, #0
 8018902:	4618      	mov	r0, r3
 8018904:	f000 f989 	bl	8018c1a <memset>
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	617b      	str	r3, [r7, #20]
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018912:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018914:	f107 0314 	add.w	r3, r7, #20
 8018918:	461a      	mov	r2, r3
 801891a:	6879      	ldr	r1, [r7, #4]
 801891c:	68b8      	ldr	r0, [r7, #8]
 801891e:	f7f2 fa22 	bl	800ad66 <osThreadNew>
 8018922:	4603      	mov	r3, r0
#endif
}
 8018924:	4618      	mov	r0, r3
 8018926:	3738      	adds	r7, #56	; 0x38
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}

0801892c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018930:	4b04      	ldr	r3, [pc, #16]	; (8018944 <sys_arch_protect+0x18>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	f04f 31ff 	mov.w	r1, #4294967295
 8018938:	4618      	mov	r0, r3
 801893a:	f7f2 fb47 	bl	800afcc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801893e:	2301      	movs	r3, #1
}
 8018940:	4618      	mov	r0, r3
 8018942:	bd80      	pop	{r7, pc}
 8018944:	2000dae4 	.word	0x2000dae4

08018948 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018948:	b580      	push	{r7, lr}
 801894a:	b082      	sub	sp, #8
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018950:	4b04      	ldr	r3, [pc, #16]	; (8018964 <sys_arch_unprotect+0x1c>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4618      	mov	r0, r3
 8018956:	f7f2 fb84 	bl	800b062 <osMutexRelease>
}
 801895a:	bf00      	nop
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	2000dae4 	.word	0x2000dae4

08018968 <atoi>:
 8018968:	220a      	movs	r2, #10
 801896a:	2100      	movs	r1, #0
 801896c:	f000 bc44 	b.w	80191f8 <strtol>

08018970 <std>:
 8018970:	2300      	movs	r3, #0
 8018972:	b510      	push	{r4, lr}
 8018974:	4604      	mov	r4, r0
 8018976:	e9c0 3300 	strd	r3, r3, [r0]
 801897a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801897e:	6083      	str	r3, [r0, #8]
 8018980:	8181      	strh	r1, [r0, #12]
 8018982:	6643      	str	r3, [r0, #100]	; 0x64
 8018984:	81c2      	strh	r2, [r0, #14]
 8018986:	6183      	str	r3, [r0, #24]
 8018988:	4619      	mov	r1, r3
 801898a:	2208      	movs	r2, #8
 801898c:	305c      	adds	r0, #92	; 0x5c
 801898e:	f000 f944 	bl	8018c1a <memset>
 8018992:	4b05      	ldr	r3, [pc, #20]	; (80189a8 <std+0x38>)
 8018994:	6263      	str	r3, [r4, #36]	; 0x24
 8018996:	4b05      	ldr	r3, [pc, #20]	; (80189ac <std+0x3c>)
 8018998:	62a3      	str	r3, [r4, #40]	; 0x28
 801899a:	4b05      	ldr	r3, [pc, #20]	; (80189b0 <std+0x40>)
 801899c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801899e:	4b05      	ldr	r3, [pc, #20]	; (80189b4 <std+0x44>)
 80189a0:	6224      	str	r4, [r4, #32]
 80189a2:	6323      	str	r3, [r4, #48]	; 0x30
 80189a4:	bd10      	pop	{r4, pc}
 80189a6:	bf00      	nop
 80189a8:	08019021 	.word	0x08019021
 80189ac:	08019043 	.word	0x08019043
 80189b0:	0801907b 	.word	0x0801907b
 80189b4:	0801909f 	.word	0x0801909f

080189b8 <_cleanup_r>:
 80189b8:	4901      	ldr	r1, [pc, #4]	; (80189c0 <_cleanup_r+0x8>)
 80189ba:	f000 b8af 	b.w	8018b1c <_fwalk_reent>
 80189be:	bf00      	nop
 80189c0:	08019525 	.word	0x08019525

080189c4 <__sfmoreglue>:
 80189c4:	b570      	push	{r4, r5, r6, lr}
 80189c6:	2268      	movs	r2, #104	; 0x68
 80189c8:	1e4d      	subs	r5, r1, #1
 80189ca:	4355      	muls	r5, r2
 80189cc:	460e      	mov	r6, r1
 80189ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80189d2:	f000 f94b 	bl	8018c6c <_malloc_r>
 80189d6:	4604      	mov	r4, r0
 80189d8:	b140      	cbz	r0, 80189ec <__sfmoreglue+0x28>
 80189da:	2100      	movs	r1, #0
 80189dc:	e9c0 1600 	strd	r1, r6, [r0]
 80189e0:	300c      	adds	r0, #12
 80189e2:	60a0      	str	r0, [r4, #8]
 80189e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80189e8:	f000 f917 	bl	8018c1a <memset>
 80189ec:	4620      	mov	r0, r4
 80189ee:	bd70      	pop	{r4, r5, r6, pc}

080189f0 <__sfp_lock_acquire>:
 80189f0:	4801      	ldr	r0, [pc, #4]	; (80189f8 <__sfp_lock_acquire+0x8>)
 80189f2:	f000 b8d8 	b.w	8018ba6 <__retarget_lock_acquire_recursive>
 80189f6:	bf00      	nop
 80189f8:	2000dae9 	.word	0x2000dae9

080189fc <__sfp_lock_release>:
 80189fc:	4801      	ldr	r0, [pc, #4]	; (8018a04 <__sfp_lock_release+0x8>)
 80189fe:	f000 b8d3 	b.w	8018ba8 <__retarget_lock_release_recursive>
 8018a02:	bf00      	nop
 8018a04:	2000dae9 	.word	0x2000dae9

08018a08 <__sinit_lock_acquire>:
 8018a08:	4801      	ldr	r0, [pc, #4]	; (8018a10 <__sinit_lock_acquire+0x8>)
 8018a0a:	f000 b8cc 	b.w	8018ba6 <__retarget_lock_acquire_recursive>
 8018a0e:	bf00      	nop
 8018a10:	2000daea 	.word	0x2000daea

08018a14 <__sinit_lock_release>:
 8018a14:	4801      	ldr	r0, [pc, #4]	; (8018a1c <__sinit_lock_release+0x8>)
 8018a16:	f000 b8c7 	b.w	8018ba8 <__retarget_lock_release_recursive>
 8018a1a:	bf00      	nop
 8018a1c:	2000daea 	.word	0x2000daea

08018a20 <__sinit>:
 8018a20:	b510      	push	{r4, lr}
 8018a22:	4604      	mov	r4, r0
 8018a24:	f7ff fff0 	bl	8018a08 <__sinit_lock_acquire>
 8018a28:	69a3      	ldr	r3, [r4, #24]
 8018a2a:	b11b      	cbz	r3, 8018a34 <__sinit+0x14>
 8018a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a30:	f7ff bff0 	b.w	8018a14 <__sinit_lock_release>
 8018a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018a38:	6523      	str	r3, [r4, #80]	; 0x50
 8018a3a:	4b13      	ldr	r3, [pc, #76]	; (8018a88 <__sinit+0x68>)
 8018a3c:	4a13      	ldr	r2, [pc, #76]	; (8018a8c <__sinit+0x6c>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8018a42:	42a3      	cmp	r3, r4
 8018a44:	bf04      	itt	eq
 8018a46:	2301      	moveq	r3, #1
 8018a48:	61a3      	streq	r3, [r4, #24]
 8018a4a:	4620      	mov	r0, r4
 8018a4c:	f000 f820 	bl	8018a90 <__sfp>
 8018a50:	6060      	str	r0, [r4, #4]
 8018a52:	4620      	mov	r0, r4
 8018a54:	f000 f81c 	bl	8018a90 <__sfp>
 8018a58:	60a0      	str	r0, [r4, #8]
 8018a5a:	4620      	mov	r0, r4
 8018a5c:	f000 f818 	bl	8018a90 <__sfp>
 8018a60:	2200      	movs	r2, #0
 8018a62:	60e0      	str	r0, [r4, #12]
 8018a64:	2104      	movs	r1, #4
 8018a66:	6860      	ldr	r0, [r4, #4]
 8018a68:	f7ff ff82 	bl	8018970 <std>
 8018a6c:	68a0      	ldr	r0, [r4, #8]
 8018a6e:	2201      	movs	r2, #1
 8018a70:	2109      	movs	r1, #9
 8018a72:	f7ff ff7d 	bl	8018970 <std>
 8018a76:	68e0      	ldr	r0, [r4, #12]
 8018a78:	2202      	movs	r2, #2
 8018a7a:	2112      	movs	r1, #18
 8018a7c:	f7ff ff78 	bl	8018970 <std>
 8018a80:	2301      	movs	r3, #1
 8018a82:	61a3      	str	r3, [r4, #24]
 8018a84:	e7d2      	b.n	8018a2c <__sinit+0xc>
 8018a86:	bf00      	nop
 8018a88:	0801d0d8 	.word	0x0801d0d8
 8018a8c:	080189b9 	.word	0x080189b9

08018a90 <__sfp>:
 8018a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a92:	4607      	mov	r7, r0
 8018a94:	f7ff ffac 	bl	80189f0 <__sfp_lock_acquire>
 8018a98:	4b1e      	ldr	r3, [pc, #120]	; (8018b14 <__sfp+0x84>)
 8018a9a:	681e      	ldr	r6, [r3, #0]
 8018a9c:	69b3      	ldr	r3, [r6, #24]
 8018a9e:	b913      	cbnz	r3, 8018aa6 <__sfp+0x16>
 8018aa0:	4630      	mov	r0, r6
 8018aa2:	f7ff ffbd 	bl	8018a20 <__sinit>
 8018aa6:	3648      	adds	r6, #72	; 0x48
 8018aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018aac:	3b01      	subs	r3, #1
 8018aae:	d503      	bpl.n	8018ab8 <__sfp+0x28>
 8018ab0:	6833      	ldr	r3, [r6, #0]
 8018ab2:	b30b      	cbz	r3, 8018af8 <__sfp+0x68>
 8018ab4:	6836      	ldr	r6, [r6, #0]
 8018ab6:	e7f7      	b.n	8018aa8 <__sfp+0x18>
 8018ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018abc:	b9d5      	cbnz	r5, 8018af4 <__sfp+0x64>
 8018abe:	4b16      	ldr	r3, [pc, #88]	; (8018b18 <__sfp+0x88>)
 8018ac0:	60e3      	str	r3, [r4, #12]
 8018ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8018ac8:	f000 f86c 	bl	8018ba4 <__retarget_lock_init_recursive>
 8018acc:	f7ff ff96 	bl	80189fc <__sfp_lock_release>
 8018ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018ad8:	6025      	str	r5, [r4, #0]
 8018ada:	61a5      	str	r5, [r4, #24]
 8018adc:	2208      	movs	r2, #8
 8018ade:	4629      	mov	r1, r5
 8018ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018ae4:	f000 f899 	bl	8018c1a <memset>
 8018ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018af0:	4620      	mov	r0, r4
 8018af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018af4:	3468      	adds	r4, #104	; 0x68
 8018af6:	e7d9      	b.n	8018aac <__sfp+0x1c>
 8018af8:	2104      	movs	r1, #4
 8018afa:	4638      	mov	r0, r7
 8018afc:	f7ff ff62 	bl	80189c4 <__sfmoreglue>
 8018b00:	4604      	mov	r4, r0
 8018b02:	6030      	str	r0, [r6, #0]
 8018b04:	2800      	cmp	r0, #0
 8018b06:	d1d5      	bne.n	8018ab4 <__sfp+0x24>
 8018b08:	f7ff ff78 	bl	80189fc <__sfp_lock_release>
 8018b0c:	230c      	movs	r3, #12
 8018b0e:	603b      	str	r3, [r7, #0]
 8018b10:	e7ee      	b.n	8018af0 <__sfp+0x60>
 8018b12:	bf00      	nop
 8018b14:	0801d0d8 	.word	0x0801d0d8
 8018b18:	ffff0001 	.word	0xffff0001

08018b1c <_fwalk_reent>:
 8018b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b20:	4606      	mov	r6, r0
 8018b22:	4688      	mov	r8, r1
 8018b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018b28:	2700      	movs	r7, #0
 8018b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8018b32:	d505      	bpl.n	8018b40 <_fwalk_reent+0x24>
 8018b34:	6824      	ldr	r4, [r4, #0]
 8018b36:	2c00      	cmp	r4, #0
 8018b38:	d1f7      	bne.n	8018b2a <_fwalk_reent+0xe>
 8018b3a:	4638      	mov	r0, r7
 8018b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b40:	89ab      	ldrh	r3, [r5, #12]
 8018b42:	2b01      	cmp	r3, #1
 8018b44:	d907      	bls.n	8018b56 <_fwalk_reent+0x3a>
 8018b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018b4a:	3301      	adds	r3, #1
 8018b4c:	d003      	beq.n	8018b56 <_fwalk_reent+0x3a>
 8018b4e:	4629      	mov	r1, r5
 8018b50:	4630      	mov	r0, r6
 8018b52:	47c0      	blx	r8
 8018b54:	4307      	orrs	r7, r0
 8018b56:	3568      	adds	r5, #104	; 0x68
 8018b58:	e7e9      	b.n	8018b2e <_fwalk_reent+0x12>
	...

08018b5c <__libc_init_array>:
 8018b5c:	b570      	push	{r4, r5, r6, lr}
 8018b5e:	4d0d      	ldr	r5, [pc, #52]	; (8018b94 <__libc_init_array+0x38>)
 8018b60:	4c0d      	ldr	r4, [pc, #52]	; (8018b98 <__libc_init_array+0x3c>)
 8018b62:	1b64      	subs	r4, r4, r5
 8018b64:	10a4      	asrs	r4, r4, #2
 8018b66:	2600      	movs	r6, #0
 8018b68:	42a6      	cmp	r6, r4
 8018b6a:	d109      	bne.n	8018b80 <__libc_init_array+0x24>
 8018b6c:	4d0b      	ldr	r5, [pc, #44]	; (8018b9c <__libc_init_array+0x40>)
 8018b6e:	4c0c      	ldr	r4, [pc, #48]	; (8018ba0 <__libc_init_array+0x44>)
 8018b70:	f001 fb00 	bl	801a174 <_init>
 8018b74:	1b64      	subs	r4, r4, r5
 8018b76:	10a4      	asrs	r4, r4, #2
 8018b78:	2600      	movs	r6, #0
 8018b7a:	42a6      	cmp	r6, r4
 8018b7c:	d105      	bne.n	8018b8a <__libc_init_array+0x2e>
 8018b7e:	bd70      	pop	{r4, r5, r6, pc}
 8018b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b84:	4798      	blx	r3
 8018b86:	3601      	adds	r6, #1
 8018b88:	e7ee      	b.n	8018b68 <__libc_init_array+0xc>
 8018b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b8e:	4798      	blx	r3
 8018b90:	3601      	adds	r6, #1
 8018b92:	e7f2      	b.n	8018b7a <__libc_init_array+0x1e>
 8018b94:	0801d1c8 	.word	0x0801d1c8
 8018b98:	0801d1c8 	.word	0x0801d1c8
 8018b9c:	0801d1c8 	.word	0x0801d1c8
 8018ba0:	0801d1cc 	.word	0x0801d1cc

08018ba4 <__retarget_lock_init_recursive>:
 8018ba4:	4770      	bx	lr

08018ba6 <__retarget_lock_acquire_recursive>:
 8018ba6:	4770      	bx	lr

08018ba8 <__retarget_lock_release_recursive>:
 8018ba8:	4770      	bx	lr

08018baa <memcmp>:
 8018baa:	b510      	push	{r4, lr}
 8018bac:	3901      	subs	r1, #1
 8018bae:	4402      	add	r2, r0
 8018bb0:	4290      	cmp	r0, r2
 8018bb2:	d101      	bne.n	8018bb8 <memcmp+0xe>
 8018bb4:	2000      	movs	r0, #0
 8018bb6:	e005      	b.n	8018bc4 <memcmp+0x1a>
 8018bb8:	7803      	ldrb	r3, [r0, #0]
 8018bba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018bbe:	42a3      	cmp	r3, r4
 8018bc0:	d001      	beq.n	8018bc6 <memcmp+0x1c>
 8018bc2:	1b18      	subs	r0, r3, r4
 8018bc4:	bd10      	pop	{r4, pc}
 8018bc6:	3001      	adds	r0, #1
 8018bc8:	e7f2      	b.n	8018bb0 <memcmp+0x6>

08018bca <memcpy>:
 8018bca:	440a      	add	r2, r1
 8018bcc:	4291      	cmp	r1, r2
 8018bce:	f100 33ff 	add.w	r3, r0, #4294967295
 8018bd2:	d100      	bne.n	8018bd6 <memcpy+0xc>
 8018bd4:	4770      	bx	lr
 8018bd6:	b510      	push	{r4, lr}
 8018bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018be0:	4291      	cmp	r1, r2
 8018be2:	d1f9      	bne.n	8018bd8 <memcpy+0xe>
 8018be4:	bd10      	pop	{r4, pc}

08018be6 <memmove>:
 8018be6:	4288      	cmp	r0, r1
 8018be8:	b510      	push	{r4, lr}
 8018bea:	eb01 0402 	add.w	r4, r1, r2
 8018bee:	d902      	bls.n	8018bf6 <memmove+0x10>
 8018bf0:	4284      	cmp	r4, r0
 8018bf2:	4623      	mov	r3, r4
 8018bf4:	d807      	bhi.n	8018c06 <memmove+0x20>
 8018bf6:	1e43      	subs	r3, r0, #1
 8018bf8:	42a1      	cmp	r1, r4
 8018bfa:	d008      	beq.n	8018c0e <memmove+0x28>
 8018bfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018c00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018c04:	e7f8      	b.n	8018bf8 <memmove+0x12>
 8018c06:	4402      	add	r2, r0
 8018c08:	4601      	mov	r1, r0
 8018c0a:	428a      	cmp	r2, r1
 8018c0c:	d100      	bne.n	8018c10 <memmove+0x2a>
 8018c0e:	bd10      	pop	{r4, pc}
 8018c10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018c14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018c18:	e7f7      	b.n	8018c0a <memmove+0x24>

08018c1a <memset>:
 8018c1a:	4402      	add	r2, r0
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	4293      	cmp	r3, r2
 8018c20:	d100      	bne.n	8018c24 <memset+0xa>
 8018c22:	4770      	bx	lr
 8018c24:	f803 1b01 	strb.w	r1, [r3], #1
 8018c28:	e7f9      	b.n	8018c1e <memset+0x4>
	...

08018c2c <sbrk_aligned>:
 8018c2c:	b570      	push	{r4, r5, r6, lr}
 8018c2e:	4e0e      	ldr	r6, [pc, #56]	; (8018c68 <sbrk_aligned+0x3c>)
 8018c30:	460c      	mov	r4, r1
 8018c32:	6831      	ldr	r1, [r6, #0]
 8018c34:	4605      	mov	r5, r0
 8018c36:	b911      	cbnz	r1, 8018c3e <sbrk_aligned+0x12>
 8018c38:	f000 f9c2 	bl	8018fc0 <_sbrk_r>
 8018c3c:	6030      	str	r0, [r6, #0]
 8018c3e:	4621      	mov	r1, r4
 8018c40:	4628      	mov	r0, r5
 8018c42:	f000 f9bd 	bl	8018fc0 <_sbrk_r>
 8018c46:	1c43      	adds	r3, r0, #1
 8018c48:	d00a      	beq.n	8018c60 <sbrk_aligned+0x34>
 8018c4a:	1cc4      	adds	r4, r0, #3
 8018c4c:	f024 0403 	bic.w	r4, r4, #3
 8018c50:	42a0      	cmp	r0, r4
 8018c52:	d007      	beq.n	8018c64 <sbrk_aligned+0x38>
 8018c54:	1a21      	subs	r1, r4, r0
 8018c56:	4628      	mov	r0, r5
 8018c58:	f000 f9b2 	bl	8018fc0 <_sbrk_r>
 8018c5c:	3001      	adds	r0, #1
 8018c5e:	d101      	bne.n	8018c64 <sbrk_aligned+0x38>
 8018c60:	f04f 34ff 	mov.w	r4, #4294967295
 8018c64:	4620      	mov	r0, r4
 8018c66:	bd70      	pop	{r4, r5, r6, pc}
 8018c68:	2000daf0 	.word	0x2000daf0

08018c6c <_malloc_r>:
 8018c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c70:	1ccd      	adds	r5, r1, #3
 8018c72:	f025 0503 	bic.w	r5, r5, #3
 8018c76:	3508      	adds	r5, #8
 8018c78:	2d0c      	cmp	r5, #12
 8018c7a:	bf38      	it	cc
 8018c7c:	250c      	movcc	r5, #12
 8018c7e:	2d00      	cmp	r5, #0
 8018c80:	4607      	mov	r7, r0
 8018c82:	db01      	blt.n	8018c88 <_malloc_r+0x1c>
 8018c84:	42a9      	cmp	r1, r5
 8018c86:	d905      	bls.n	8018c94 <_malloc_r+0x28>
 8018c88:	230c      	movs	r3, #12
 8018c8a:	603b      	str	r3, [r7, #0]
 8018c8c:	2600      	movs	r6, #0
 8018c8e:	4630      	mov	r0, r6
 8018c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c94:	4e2e      	ldr	r6, [pc, #184]	; (8018d50 <_malloc_r+0xe4>)
 8018c96:	f000 fd13 	bl	80196c0 <__malloc_lock>
 8018c9a:	6833      	ldr	r3, [r6, #0]
 8018c9c:	461c      	mov	r4, r3
 8018c9e:	bb34      	cbnz	r4, 8018cee <_malloc_r+0x82>
 8018ca0:	4629      	mov	r1, r5
 8018ca2:	4638      	mov	r0, r7
 8018ca4:	f7ff ffc2 	bl	8018c2c <sbrk_aligned>
 8018ca8:	1c43      	adds	r3, r0, #1
 8018caa:	4604      	mov	r4, r0
 8018cac:	d14d      	bne.n	8018d4a <_malloc_r+0xde>
 8018cae:	6834      	ldr	r4, [r6, #0]
 8018cb0:	4626      	mov	r6, r4
 8018cb2:	2e00      	cmp	r6, #0
 8018cb4:	d140      	bne.n	8018d38 <_malloc_r+0xcc>
 8018cb6:	6823      	ldr	r3, [r4, #0]
 8018cb8:	4631      	mov	r1, r6
 8018cba:	4638      	mov	r0, r7
 8018cbc:	eb04 0803 	add.w	r8, r4, r3
 8018cc0:	f000 f97e 	bl	8018fc0 <_sbrk_r>
 8018cc4:	4580      	cmp	r8, r0
 8018cc6:	d13a      	bne.n	8018d3e <_malloc_r+0xd2>
 8018cc8:	6821      	ldr	r1, [r4, #0]
 8018cca:	3503      	adds	r5, #3
 8018ccc:	1a6d      	subs	r5, r5, r1
 8018cce:	f025 0503 	bic.w	r5, r5, #3
 8018cd2:	3508      	adds	r5, #8
 8018cd4:	2d0c      	cmp	r5, #12
 8018cd6:	bf38      	it	cc
 8018cd8:	250c      	movcc	r5, #12
 8018cda:	4629      	mov	r1, r5
 8018cdc:	4638      	mov	r0, r7
 8018cde:	f7ff ffa5 	bl	8018c2c <sbrk_aligned>
 8018ce2:	3001      	adds	r0, #1
 8018ce4:	d02b      	beq.n	8018d3e <_malloc_r+0xd2>
 8018ce6:	6823      	ldr	r3, [r4, #0]
 8018ce8:	442b      	add	r3, r5
 8018cea:	6023      	str	r3, [r4, #0]
 8018cec:	e00e      	b.n	8018d0c <_malloc_r+0xa0>
 8018cee:	6822      	ldr	r2, [r4, #0]
 8018cf0:	1b52      	subs	r2, r2, r5
 8018cf2:	d41e      	bmi.n	8018d32 <_malloc_r+0xc6>
 8018cf4:	2a0b      	cmp	r2, #11
 8018cf6:	d916      	bls.n	8018d26 <_malloc_r+0xba>
 8018cf8:	1961      	adds	r1, r4, r5
 8018cfa:	42a3      	cmp	r3, r4
 8018cfc:	6025      	str	r5, [r4, #0]
 8018cfe:	bf18      	it	ne
 8018d00:	6059      	strne	r1, [r3, #4]
 8018d02:	6863      	ldr	r3, [r4, #4]
 8018d04:	bf08      	it	eq
 8018d06:	6031      	streq	r1, [r6, #0]
 8018d08:	5162      	str	r2, [r4, r5]
 8018d0a:	604b      	str	r3, [r1, #4]
 8018d0c:	4638      	mov	r0, r7
 8018d0e:	f104 060b 	add.w	r6, r4, #11
 8018d12:	f000 fcdb 	bl	80196cc <__malloc_unlock>
 8018d16:	f026 0607 	bic.w	r6, r6, #7
 8018d1a:	1d23      	adds	r3, r4, #4
 8018d1c:	1af2      	subs	r2, r6, r3
 8018d1e:	d0b6      	beq.n	8018c8e <_malloc_r+0x22>
 8018d20:	1b9b      	subs	r3, r3, r6
 8018d22:	50a3      	str	r3, [r4, r2]
 8018d24:	e7b3      	b.n	8018c8e <_malloc_r+0x22>
 8018d26:	6862      	ldr	r2, [r4, #4]
 8018d28:	42a3      	cmp	r3, r4
 8018d2a:	bf0c      	ite	eq
 8018d2c:	6032      	streq	r2, [r6, #0]
 8018d2e:	605a      	strne	r2, [r3, #4]
 8018d30:	e7ec      	b.n	8018d0c <_malloc_r+0xa0>
 8018d32:	4623      	mov	r3, r4
 8018d34:	6864      	ldr	r4, [r4, #4]
 8018d36:	e7b2      	b.n	8018c9e <_malloc_r+0x32>
 8018d38:	4634      	mov	r4, r6
 8018d3a:	6876      	ldr	r6, [r6, #4]
 8018d3c:	e7b9      	b.n	8018cb2 <_malloc_r+0x46>
 8018d3e:	230c      	movs	r3, #12
 8018d40:	603b      	str	r3, [r7, #0]
 8018d42:	4638      	mov	r0, r7
 8018d44:	f000 fcc2 	bl	80196cc <__malloc_unlock>
 8018d48:	e7a1      	b.n	8018c8e <_malloc_r+0x22>
 8018d4a:	6025      	str	r5, [r4, #0]
 8018d4c:	e7de      	b.n	8018d0c <_malloc_r+0xa0>
 8018d4e:	bf00      	nop
 8018d50:	2000daec 	.word	0x2000daec

08018d54 <iprintf>:
 8018d54:	b40f      	push	{r0, r1, r2, r3}
 8018d56:	4b0a      	ldr	r3, [pc, #40]	; (8018d80 <iprintf+0x2c>)
 8018d58:	b513      	push	{r0, r1, r4, lr}
 8018d5a:	681c      	ldr	r4, [r3, #0]
 8018d5c:	b124      	cbz	r4, 8018d68 <iprintf+0x14>
 8018d5e:	69a3      	ldr	r3, [r4, #24]
 8018d60:	b913      	cbnz	r3, 8018d68 <iprintf+0x14>
 8018d62:	4620      	mov	r0, r4
 8018d64:	f7ff fe5c 	bl	8018a20 <__sinit>
 8018d68:	ab05      	add	r3, sp, #20
 8018d6a:	9a04      	ldr	r2, [sp, #16]
 8018d6c:	68a1      	ldr	r1, [r4, #8]
 8018d6e:	9301      	str	r3, [sp, #4]
 8018d70:	4620      	mov	r0, r4
 8018d72:	f000 fe83 	bl	8019a7c <_vfiprintf_r>
 8018d76:	b002      	add	sp, #8
 8018d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d7c:	b004      	add	sp, #16
 8018d7e:	4770      	bx	lr
 8018d80:	2000009c 	.word	0x2000009c

08018d84 <_puts_r>:
 8018d84:	b570      	push	{r4, r5, r6, lr}
 8018d86:	460e      	mov	r6, r1
 8018d88:	4605      	mov	r5, r0
 8018d8a:	b118      	cbz	r0, 8018d94 <_puts_r+0x10>
 8018d8c:	6983      	ldr	r3, [r0, #24]
 8018d8e:	b90b      	cbnz	r3, 8018d94 <_puts_r+0x10>
 8018d90:	f7ff fe46 	bl	8018a20 <__sinit>
 8018d94:	69ab      	ldr	r3, [r5, #24]
 8018d96:	68ac      	ldr	r4, [r5, #8]
 8018d98:	b913      	cbnz	r3, 8018da0 <_puts_r+0x1c>
 8018d9a:	4628      	mov	r0, r5
 8018d9c:	f7ff fe40 	bl	8018a20 <__sinit>
 8018da0:	4b2c      	ldr	r3, [pc, #176]	; (8018e54 <_puts_r+0xd0>)
 8018da2:	429c      	cmp	r4, r3
 8018da4:	d120      	bne.n	8018de8 <_puts_r+0x64>
 8018da6:	686c      	ldr	r4, [r5, #4]
 8018da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018daa:	07db      	lsls	r3, r3, #31
 8018dac:	d405      	bmi.n	8018dba <_puts_r+0x36>
 8018dae:	89a3      	ldrh	r3, [r4, #12]
 8018db0:	0598      	lsls	r0, r3, #22
 8018db2:	d402      	bmi.n	8018dba <_puts_r+0x36>
 8018db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018db6:	f7ff fef6 	bl	8018ba6 <__retarget_lock_acquire_recursive>
 8018dba:	89a3      	ldrh	r3, [r4, #12]
 8018dbc:	0719      	lsls	r1, r3, #28
 8018dbe:	d51d      	bpl.n	8018dfc <_puts_r+0x78>
 8018dc0:	6923      	ldr	r3, [r4, #16]
 8018dc2:	b1db      	cbz	r3, 8018dfc <_puts_r+0x78>
 8018dc4:	3e01      	subs	r6, #1
 8018dc6:	68a3      	ldr	r3, [r4, #8]
 8018dc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018dcc:	3b01      	subs	r3, #1
 8018dce:	60a3      	str	r3, [r4, #8]
 8018dd0:	bb39      	cbnz	r1, 8018e22 <_puts_r+0x9e>
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	da38      	bge.n	8018e48 <_puts_r+0xc4>
 8018dd6:	4622      	mov	r2, r4
 8018dd8:	210a      	movs	r1, #10
 8018dda:	4628      	mov	r0, r5
 8018ddc:	f000 fa16 	bl	801920c <__swbuf_r>
 8018de0:	3001      	adds	r0, #1
 8018de2:	d011      	beq.n	8018e08 <_puts_r+0x84>
 8018de4:	250a      	movs	r5, #10
 8018de6:	e011      	b.n	8018e0c <_puts_r+0x88>
 8018de8:	4b1b      	ldr	r3, [pc, #108]	; (8018e58 <_puts_r+0xd4>)
 8018dea:	429c      	cmp	r4, r3
 8018dec:	d101      	bne.n	8018df2 <_puts_r+0x6e>
 8018dee:	68ac      	ldr	r4, [r5, #8]
 8018df0:	e7da      	b.n	8018da8 <_puts_r+0x24>
 8018df2:	4b1a      	ldr	r3, [pc, #104]	; (8018e5c <_puts_r+0xd8>)
 8018df4:	429c      	cmp	r4, r3
 8018df6:	bf08      	it	eq
 8018df8:	68ec      	ldreq	r4, [r5, #12]
 8018dfa:	e7d5      	b.n	8018da8 <_puts_r+0x24>
 8018dfc:	4621      	mov	r1, r4
 8018dfe:	4628      	mov	r0, r5
 8018e00:	f000 fa68 	bl	80192d4 <__swsetup_r>
 8018e04:	2800      	cmp	r0, #0
 8018e06:	d0dd      	beq.n	8018dc4 <_puts_r+0x40>
 8018e08:	f04f 35ff 	mov.w	r5, #4294967295
 8018e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e0e:	07da      	lsls	r2, r3, #31
 8018e10:	d405      	bmi.n	8018e1e <_puts_r+0x9a>
 8018e12:	89a3      	ldrh	r3, [r4, #12]
 8018e14:	059b      	lsls	r3, r3, #22
 8018e16:	d402      	bmi.n	8018e1e <_puts_r+0x9a>
 8018e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e1a:	f7ff fec5 	bl	8018ba8 <__retarget_lock_release_recursive>
 8018e1e:	4628      	mov	r0, r5
 8018e20:	bd70      	pop	{r4, r5, r6, pc}
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	da04      	bge.n	8018e30 <_puts_r+0xac>
 8018e26:	69a2      	ldr	r2, [r4, #24]
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	dc06      	bgt.n	8018e3a <_puts_r+0xb6>
 8018e2c:	290a      	cmp	r1, #10
 8018e2e:	d004      	beq.n	8018e3a <_puts_r+0xb6>
 8018e30:	6823      	ldr	r3, [r4, #0]
 8018e32:	1c5a      	adds	r2, r3, #1
 8018e34:	6022      	str	r2, [r4, #0]
 8018e36:	7019      	strb	r1, [r3, #0]
 8018e38:	e7c5      	b.n	8018dc6 <_puts_r+0x42>
 8018e3a:	4622      	mov	r2, r4
 8018e3c:	4628      	mov	r0, r5
 8018e3e:	f000 f9e5 	bl	801920c <__swbuf_r>
 8018e42:	3001      	adds	r0, #1
 8018e44:	d1bf      	bne.n	8018dc6 <_puts_r+0x42>
 8018e46:	e7df      	b.n	8018e08 <_puts_r+0x84>
 8018e48:	6823      	ldr	r3, [r4, #0]
 8018e4a:	250a      	movs	r5, #10
 8018e4c:	1c5a      	adds	r2, r3, #1
 8018e4e:	6022      	str	r2, [r4, #0]
 8018e50:	701d      	strb	r5, [r3, #0]
 8018e52:	e7db      	b.n	8018e0c <_puts_r+0x88>
 8018e54:	0801d098 	.word	0x0801d098
 8018e58:	0801d0b8 	.word	0x0801d0b8
 8018e5c:	0801d078 	.word	0x0801d078

08018e60 <puts>:
 8018e60:	4b02      	ldr	r3, [pc, #8]	; (8018e6c <puts+0xc>)
 8018e62:	4601      	mov	r1, r0
 8018e64:	6818      	ldr	r0, [r3, #0]
 8018e66:	f7ff bf8d 	b.w	8018d84 <_puts_r>
 8018e6a:	bf00      	nop
 8018e6c:	2000009c 	.word	0x2000009c

08018e70 <rand>:
 8018e70:	4b16      	ldr	r3, [pc, #88]	; (8018ecc <rand+0x5c>)
 8018e72:	b510      	push	{r4, lr}
 8018e74:	681c      	ldr	r4, [r3, #0]
 8018e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018e78:	b9b3      	cbnz	r3, 8018ea8 <rand+0x38>
 8018e7a:	2018      	movs	r0, #24
 8018e7c:	f000 fc18 	bl	80196b0 <malloc>
 8018e80:	63a0      	str	r0, [r4, #56]	; 0x38
 8018e82:	b928      	cbnz	r0, 8018e90 <rand+0x20>
 8018e84:	4602      	mov	r2, r0
 8018e86:	4b12      	ldr	r3, [pc, #72]	; (8018ed0 <rand+0x60>)
 8018e88:	4812      	ldr	r0, [pc, #72]	; (8018ed4 <rand+0x64>)
 8018e8a:	214e      	movs	r1, #78	; 0x4e
 8018e8c:	f000 fa90 	bl	80193b0 <__assert_func>
 8018e90:	4a11      	ldr	r2, [pc, #68]	; (8018ed8 <rand+0x68>)
 8018e92:	4b12      	ldr	r3, [pc, #72]	; (8018edc <rand+0x6c>)
 8018e94:	e9c0 2300 	strd	r2, r3, [r0]
 8018e98:	4b11      	ldr	r3, [pc, #68]	; (8018ee0 <rand+0x70>)
 8018e9a:	6083      	str	r3, [r0, #8]
 8018e9c:	230b      	movs	r3, #11
 8018e9e:	8183      	strh	r3, [r0, #12]
 8018ea0:	2201      	movs	r2, #1
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018ea8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018eaa:	4a0e      	ldr	r2, [pc, #56]	; (8018ee4 <rand+0x74>)
 8018eac:	6920      	ldr	r0, [r4, #16]
 8018eae:	6963      	ldr	r3, [r4, #20]
 8018eb0:	490d      	ldr	r1, [pc, #52]	; (8018ee8 <rand+0x78>)
 8018eb2:	4342      	muls	r2, r0
 8018eb4:	fb01 2203 	mla	r2, r1, r3, r2
 8018eb8:	fba0 0101 	umull	r0, r1, r0, r1
 8018ebc:	1c43      	adds	r3, r0, #1
 8018ebe:	eb42 0001 	adc.w	r0, r2, r1
 8018ec2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018ec6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018eca:	bd10      	pop	{r4, pc}
 8018ecc:	2000009c 	.word	0x2000009c
 8018ed0:	0801d0dc 	.word	0x0801d0dc
 8018ed4:	0801d0f3 	.word	0x0801d0f3
 8018ed8:	abcd330e 	.word	0xabcd330e
 8018edc:	e66d1234 	.word	0xe66d1234
 8018ee0:	0005deec 	.word	0x0005deec
 8018ee4:	5851f42d 	.word	0x5851f42d
 8018ee8:	4c957f2d 	.word	0x4c957f2d

08018eec <cleanup_glue>:
 8018eec:	b538      	push	{r3, r4, r5, lr}
 8018eee:	460c      	mov	r4, r1
 8018ef0:	6809      	ldr	r1, [r1, #0]
 8018ef2:	4605      	mov	r5, r0
 8018ef4:	b109      	cbz	r1, 8018efa <cleanup_glue+0xe>
 8018ef6:	f7ff fff9 	bl	8018eec <cleanup_glue>
 8018efa:	4621      	mov	r1, r4
 8018efc:	4628      	mov	r0, r5
 8018efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f02:	f000 bbe9 	b.w	80196d8 <_free_r>
	...

08018f08 <_reclaim_reent>:
 8018f08:	4b2c      	ldr	r3, [pc, #176]	; (8018fbc <_reclaim_reent+0xb4>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	4283      	cmp	r3, r0
 8018f0e:	b570      	push	{r4, r5, r6, lr}
 8018f10:	4604      	mov	r4, r0
 8018f12:	d051      	beq.n	8018fb8 <_reclaim_reent+0xb0>
 8018f14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018f16:	b143      	cbz	r3, 8018f2a <_reclaim_reent+0x22>
 8018f18:	68db      	ldr	r3, [r3, #12]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d14a      	bne.n	8018fb4 <_reclaim_reent+0xac>
 8018f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f20:	6819      	ldr	r1, [r3, #0]
 8018f22:	b111      	cbz	r1, 8018f2a <_reclaim_reent+0x22>
 8018f24:	4620      	mov	r0, r4
 8018f26:	f000 fbd7 	bl	80196d8 <_free_r>
 8018f2a:	6961      	ldr	r1, [r4, #20]
 8018f2c:	b111      	cbz	r1, 8018f34 <_reclaim_reent+0x2c>
 8018f2e:	4620      	mov	r0, r4
 8018f30:	f000 fbd2 	bl	80196d8 <_free_r>
 8018f34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018f36:	b111      	cbz	r1, 8018f3e <_reclaim_reent+0x36>
 8018f38:	4620      	mov	r0, r4
 8018f3a:	f000 fbcd 	bl	80196d8 <_free_r>
 8018f3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018f40:	b111      	cbz	r1, 8018f48 <_reclaim_reent+0x40>
 8018f42:	4620      	mov	r0, r4
 8018f44:	f000 fbc8 	bl	80196d8 <_free_r>
 8018f48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018f4a:	b111      	cbz	r1, 8018f52 <_reclaim_reent+0x4a>
 8018f4c:	4620      	mov	r0, r4
 8018f4e:	f000 fbc3 	bl	80196d8 <_free_r>
 8018f52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018f54:	b111      	cbz	r1, 8018f5c <_reclaim_reent+0x54>
 8018f56:	4620      	mov	r0, r4
 8018f58:	f000 fbbe 	bl	80196d8 <_free_r>
 8018f5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018f5e:	b111      	cbz	r1, 8018f66 <_reclaim_reent+0x5e>
 8018f60:	4620      	mov	r0, r4
 8018f62:	f000 fbb9 	bl	80196d8 <_free_r>
 8018f66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018f68:	b111      	cbz	r1, 8018f70 <_reclaim_reent+0x68>
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	f000 fbb4 	bl	80196d8 <_free_r>
 8018f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018f72:	b111      	cbz	r1, 8018f7a <_reclaim_reent+0x72>
 8018f74:	4620      	mov	r0, r4
 8018f76:	f000 fbaf 	bl	80196d8 <_free_r>
 8018f7a:	69a3      	ldr	r3, [r4, #24]
 8018f7c:	b1e3      	cbz	r3, 8018fb8 <_reclaim_reent+0xb0>
 8018f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018f80:	4620      	mov	r0, r4
 8018f82:	4798      	blx	r3
 8018f84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018f86:	b1b9      	cbz	r1, 8018fb8 <_reclaim_reent+0xb0>
 8018f88:	4620      	mov	r0, r4
 8018f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f8e:	f7ff bfad 	b.w	8018eec <cleanup_glue>
 8018f92:	5949      	ldr	r1, [r1, r5]
 8018f94:	b941      	cbnz	r1, 8018fa8 <_reclaim_reent+0xa0>
 8018f96:	3504      	adds	r5, #4
 8018f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f9a:	2d80      	cmp	r5, #128	; 0x80
 8018f9c:	68d9      	ldr	r1, [r3, #12]
 8018f9e:	d1f8      	bne.n	8018f92 <_reclaim_reent+0x8a>
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f000 fb99 	bl	80196d8 <_free_r>
 8018fa6:	e7ba      	b.n	8018f1e <_reclaim_reent+0x16>
 8018fa8:	680e      	ldr	r6, [r1, #0]
 8018faa:	4620      	mov	r0, r4
 8018fac:	f000 fb94 	bl	80196d8 <_free_r>
 8018fb0:	4631      	mov	r1, r6
 8018fb2:	e7ef      	b.n	8018f94 <_reclaim_reent+0x8c>
 8018fb4:	2500      	movs	r5, #0
 8018fb6:	e7ef      	b.n	8018f98 <_reclaim_reent+0x90>
 8018fb8:	bd70      	pop	{r4, r5, r6, pc}
 8018fba:	bf00      	nop
 8018fbc:	2000009c 	.word	0x2000009c

08018fc0 <_sbrk_r>:
 8018fc0:	b538      	push	{r3, r4, r5, lr}
 8018fc2:	4d06      	ldr	r5, [pc, #24]	; (8018fdc <_sbrk_r+0x1c>)
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	4608      	mov	r0, r1
 8018fca:	602b      	str	r3, [r5, #0]
 8018fcc:	f7e9 fad6 	bl	800257c <_sbrk>
 8018fd0:	1c43      	adds	r3, r0, #1
 8018fd2:	d102      	bne.n	8018fda <_sbrk_r+0x1a>
 8018fd4:	682b      	ldr	r3, [r5, #0]
 8018fd6:	b103      	cbz	r3, 8018fda <_sbrk_r+0x1a>
 8018fd8:	6023      	str	r3, [r4, #0]
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
 8018fdc:	2000daf4 	.word	0x2000daf4

08018fe0 <siprintf>:
 8018fe0:	b40e      	push	{r1, r2, r3}
 8018fe2:	b500      	push	{lr}
 8018fe4:	b09c      	sub	sp, #112	; 0x70
 8018fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8018fe8:	9002      	str	r0, [sp, #8]
 8018fea:	9006      	str	r0, [sp, #24]
 8018fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018ff0:	4809      	ldr	r0, [pc, #36]	; (8019018 <siprintf+0x38>)
 8018ff2:	9107      	str	r1, [sp, #28]
 8018ff4:	9104      	str	r1, [sp, #16]
 8018ff6:	4909      	ldr	r1, [pc, #36]	; (801901c <siprintf+0x3c>)
 8018ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ffc:	9105      	str	r1, [sp, #20]
 8018ffe:	6800      	ldr	r0, [r0, #0]
 8019000:	9301      	str	r3, [sp, #4]
 8019002:	a902      	add	r1, sp, #8
 8019004:	f000 fc10 	bl	8019828 <_svfiprintf_r>
 8019008:	9b02      	ldr	r3, [sp, #8]
 801900a:	2200      	movs	r2, #0
 801900c:	701a      	strb	r2, [r3, #0]
 801900e:	b01c      	add	sp, #112	; 0x70
 8019010:	f85d eb04 	ldr.w	lr, [sp], #4
 8019014:	b003      	add	sp, #12
 8019016:	4770      	bx	lr
 8019018:	2000009c 	.word	0x2000009c
 801901c:	ffff0208 	.word	0xffff0208

08019020 <__sread>:
 8019020:	b510      	push	{r4, lr}
 8019022:	460c      	mov	r4, r1
 8019024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019028:	f000 ffec 	bl	801a004 <_read_r>
 801902c:	2800      	cmp	r0, #0
 801902e:	bfab      	itete	ge
 8019030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019032:	89a3      	ldrhlt	r3, [r4, #12]
 8019034:	181b      	addge	r3, r3, r0
 8019036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801903a:	bfac      	ite	ge
 801903c:	6563      	strge	r3, [r4, #84]	; 0x54
 801903e:	81a3      	strhlt	r3, [r4, #12]
 8019040:	bd10      	pop	{r4, pc}

08019042 <__swrite>:
 8019042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019046:	461f      	mov	r7, r3
 8019048:	898b      	ldrh	r3, [r1, #12]
 801904a:	05db      	lsls	r3, r3, #23
 801904c:	4605      	mov	r5, r0
 801904e:	460c      	mov	r4, r1
 8019050:	4616      	mov	r6, r2
 8019052:	d505      	bpl.n	8019060 <__swrite+0x1e>
 8019054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019058:	2302      	movs	r3, #2
 801905a:	2200      	movs	r2, #0
 801905c:	f000 fab0 	bl	80195c0 <_lseek_r>
 8019060:	89a3      	ldrh	r3, [r4, #12]
 8019062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801906a:	81a3      	strh	r3, [r4, #12]
 801906c:	4632      	mov	r2, r6
 801906e:	463b      	mov	r3, r7
 8019070:	4628      	mov	r0, r5
 8019072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019076:	f000 b91b 	b.w	80192b0 <_write_r>

0801907a <__sseek>:
 801907a:	b510      	push	{r4, lr}
 801907c:	460c      	mov	r4, r1
 801907e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019082:	f000 fa9d 	bl	80195c0 <_lseek_r>
 8019086:	1c43      	adds	r3, r0, #1
 8019088:	89a3      	ldrh	r3, [r4, #12]
 801908a:	bf15      	itete	ne
 801908c:	6560      	strne	r0, [r4, #84]	; 0x54
 801908e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019096:	81a3      	strheq	r3, [r4, #12]
 8019098:	bf18      	it	ne
 801909a:	81a3      	strhne	r3, [r4, #12]
 801909c:	bd10      	pop	{r4, pc}

0801909e <__sclose>:
 801909e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190a2:	f000 b9a3 	b.w	80193ec <_close_r>

080190a6 <strncmp>:
 80190a6:	b510      	push	{r4, lr}
 80190a8:	b17a      	cbz	r2, 80190ca <strncmp+0x24>
 80190aa:	4603      	mov	r3, r0
 80190ac:	3901      	subs	r1, #1
 80190ae:	1884      	adds	r4, r0, r2
 80190b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80190b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80190b8:	4290      	cmp	r0, r2
 80190ba:	d101      	bne.n	80190c0 <strncmp+0x1a>
 80190bc:	42a3      	cmp	r3, r4
 80190be:	d101      	bne.n	80190c4 <strncmp+0x1e>
 80190c0:	1a80      	subs	r0, r0, r2
 80190c2:	bd10      	pop	{r4, pc}
 80190c4:	2800      	cmp	r0, #0
 80190c6:	d1f3      	bne.n	80190b0 <strncmp+0xa>
 80190c8:	e7fa      	b.n	80190c0 <strncmp+0x1a>
 80190ca:	4610      	mov	r0, r2
 80190cc:	e7f9      	b.n	80190c2 <strncmp+0x1c>

080190ce <strncpy>:
 80190ce:	b510      	push	{r4, lr}
 80190d0:	3901      	subs	r1, #1
 80190d2:	4603      	mov	r3, r0
 80190d4:	b132      	cbz	r2, 80190e4 <strncpy+0x16>
 80190d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80190da:	f803 4b01 	strb.w	r4, [r3], #1
 80190de:	3a01      	subs	r2, #1
 80190e0:	2c00      	cmp	r4, #0
 80190e2:	d1f7      	bne.n	80190d4 <strncpy+0x6>
 80190e4:	441a      	add	r2, r3
 80190e6:	2100      	movs	r1, #0
 80190e8:	4293      	cmp	r3, r2
 80190ea:	d100      	bne.n	80190ee <strncpy+0x20>
 80190ec:	bd10      	pop	{r4, pc}
 80190ee:	f803 1b01 	strb.w	r1, [r3], #1
 80190f2:	e7f9      	b.n	80190e8 <strncpy+0x1a>

080190f4 <_strtol_l.constprop.0>:
 80190f4:	2b01      	cmp	r3, #1
 80190f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190fa:	d001      	beq.n	8019100 <_strtol_l.constprop.0+0xc>
 80190fc:	2b24      	cmp	r3, #36	; 0x24
 80190fe:	d906      	bls.n	801910e <_strtol_l.constprop.0+0x1a>
 8019100:	f000 f984 	bl	801940c <__errno>
 8019104:	2316      	movs	r3, #22
 8019106:	6003      	str	r3, [r0, #0]
 8019108:	2000      	movs	r0, #0
 801910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801910e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80191f4 <_strtol_l.constprop.0+0x100>
 8019112:	460d      	mov	r5, r1
 8019114:	462e      	mov	r6, r5
 8019116:	f815 4b01 	ldrb.w	r4, [r5], #1
 801911a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801911e:	f017 0708 	ands.w	r7, r7, #8
 8019122:	d1f7      	bne.n	8019114 <_strtol_l.constprop.0+0x20>
 8019124:	2c2d      	cmp	r4, #45	; 0x2d
 8019126:	d132      	bne.n	801918e <_strtol_l.constprop.0+0x9a>
 8019128:	782c      	ldrb	r4, [r5, #0]
 801912a:	2701      	movs	r7, #1
 801912c:	1cb5      	adds	r5, r6, #2
 801912e:	2b00      	cmp	r3, #0
 8019130:	d05b      	beq.n	80191ea <_strtol_l.constprop.0+0xf6>
 8019132:	2b10      	cmp	r3, #16
 8019134:	d109      	bne.n	801914a <_strtol_l.constprop.0+0x56>
 8019136:	2c30      	cmp	r4, #48	; 0x30
 8019138:	d107      	bne.n	801914a <_strtol_l.constprop.0+0x56>
 801913a:	782c      	ldrb	r4, [r5, #0]
 801913c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019140:	2c58      	cmp	r4, #88	; 0x58
 8019142:	d14d      	bne.n	80191e0 <_strtol_l.constprop.0+0xec>
 8019144:	786c      	ldrb	r4, [r5, #1]
 8019146:	2310      	movs	r3, #16
 8019148:	3502      	adds	r5, #2
 801914a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801914e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019152:	f04f 0c00 	mov.w	ip, #0
 8019156:	fbb8 f9f3 	udiv	r9, r8, r3
 801915a:	4666      	mov	r6, ip
 801915c:	fb03 8a19 	mls	sl, r3, r9, r8
 8019160:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8019164:	f1be 0f09 	cmp.w	lr, #9
 8019168:	d816      	bhi.n	8019198 <_strtol_l.constprop.0+0xa4>
 801916a:	4674      	mov	r4, lr
 801916c:	42a3      	cmp	r3, r4
 801916e:	dd24      	ble.n	80191ba <_strtol_l.constprop.0+0xc6>
 8019170:	f1bc 0f00 	cmp.w	ip, #0
 8019174:	db1e      	blt.n	80191b4 <_strtol_l.constprop.0+0xc0>
 8019176:	45b1      	cmp	r9, r6
 8019178:	d31c      	bcc.n	80191b4 <_strtol_l.constprop.0+0xc0>
 801917a:	d101      	bne.n	8019180 <_strtol_l.constprop.0+0x8c>
 801917c:	45a2      	cmp	sl, r4
 801917e:	db19      	blt.n	80191b4 <_strtol_l.constprop.0+0xc0>
 8019180:	fb06 4603 	mla	r6, r6, r3, r4
 8019184:	f04f 0c01 	mov.w	ip, #1
 8019188:	f815 4b01 	ldrb.w	r4, [r5], #1
 801918c:	e7e8      	b.n	8019160 <_strtol_l.constprop.0+0x6c>
 801918e:	2c2b      	cmp	r4, #43	; 0x2b
 8019190:	bf04      	itt	eq
 8019192:	782c      	ldrbeq	r4, [r5, #0]
 8019194:	1cb5      	addeq	r5, r6, #2
 8019196:	e7ca      	b.n	801912e <_strtol_l.constprop.0+0x3a>
 8019198:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801919c:	f1be 0f19 	cmp.w	lr, #25
 80191a0:	d801      	bhi.n	80191a6 <_strtol_l.constprop.0+0xb2>
 80191a2:	3c37      	subs	r4, #55	; 0x37
 80191a4:	e7e2      	b.n	801916c <_strtol_l.constprop.0+0x78>
 80191a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80191aa:	f1be 0f19 	cmp.w	lr, #25
 80191ae:	d804      	bhi.n	80191ba <_strtol_l.constprop.0+0xc6>
 80191b0:	3c57      	subs	r4, #87	; 0x57
 80191b2:	e7db      	b.n	801916c <_strtol_l.constprop.0+0x78>
 80191b4:	f04f 3cff 	mov.w	ip, #4294967295
 80191b8:	e7e6      	b.n	8019188 <_strtol_l.constprop.0+0x94>
 80191ba:	f1bc 0f00 	cmp.w	ip, #0
 80191be:	da05      	bge.n	80191cc <_strtol_l.constprop.0+0xd8>
 80191c0:	2322      	movs	r3, #34	; 0x22
 80191c2:	6003      	str	r3, [r0, #0]
 80191c4:	4646      	mov	r6, r8
 80191c6:	b942      	cbnz	r2, 80191da <_strtol_l.constprop.0+0xe6>
 80191c8:	4630      	mov	r0, r6
 80191ca:	e79e      	b.n	801910a <_strtol_l.constprop.0+0x16>
 80191cc:	b107      	cbz	r7, 80191d0 <_strtol_l.constprop.0+0xdc>
 80191ce:	4276      	negs	r6, r6
 80191d0:	2a00      	cmp	r2, #0
 80191d2:	d0f9      	beq.n	80191c8 <_strtol_l.constprop.0+0xd4>
 80191d4:	f1bc 0f00 	cmp.w	ip, #0
 80191d8:	d000      	beq.n	80191dc <_strtol_l.constprop.0+0xe8>
 80191da:	1e69      	subs	r1, r5, #1
 80191dc:	6011      	str	r1, [r2, #0]
 80191de:	e7f3      	b.n	80191c8 <_strtol_l.constprop.0+0xd4>
 80191e0:	2430      	movs	r4, #48	; 0x30
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d1b1      	bne.n	801914a <_strtol_l.constprop.0+0x56>
 80191e6:	2308      	movs	r3, #8
 80191e8:	e7af      	b.n	801914a <_strtol_l.constprop.0+0x56>
 80191ea:	2c30      	cmp	r4, #48	; 0x30
 80191ec:	d0a5      	beq.n	801913a <_strtol_l.constprop.0+0x46>
 80191ee:	230a      	movs	r3, #10
 80191f0:	e7ab      	b.n	801914a <_strtol_l.constprop.0+0x56>
 80191f2:	bf00      	nop
 80191f4:	0801cf77 	.word	0x0801cf77

080191f8 <strtol>:
 80191f8:	4613      	mov	r3, r2
 80191fa:	460a      	mov	r2, r1
 80191fc:	4601      	mov	r1, r0
 80191fe:	4802      	ldr	r0, [pc, #8]	; (8019208 <strtol+0x10>)
 8019200:	6800      	ldr	r0, [r0, #0]
 8019202:	f7ff bf77 	b.w	80190f4 <_strtol_l.constprop.0>
 8019206:	bf00      	nop
 8019208:	2000009c 	.word	0x2000009c

0801920c <__swbuf_r>:
 801920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801920e:	460e      	mov	r6, r1
 8019210:	4614      	mov	r4, r2
 8019212:	4605      	mov	r5, r0
 8019214:	b118      	cbz	r0, 801921e <__swbuf_r+0x12>
 8019216:	6983      	ldr	r3, [r0, #24]
 8019218:	b90b      	cbnz	r3, 801921e <__swbuf_r+0x12>
 801921a:	f7ff fc01 	bl	8018a20 <__sinit>
 801921e:	4b21      	ldr	r3, [pc, #132]	; (80192a4 <__swbuf_r+0x98>)
 8019220:	429c      	cmp	r4, r3
 8019222:	d12b      	bne.n	801927c <__swbuf_r+0x70>
 8019224:	686c      	ldr	r4, [r5, #4]
 8019226:	69a3      	ldr	r3, [r4, #24]
 8019228:	60a3      	str	r3, [r4, #8]
 801922a:	89a3      	ldrh	r3, [r4, #12]
 801922c:	071a      	lsls	r2, r3, #28
 801922e:	d52f      	bpl.n	8019290 <__swbuf_r+0x84>
 8019230:	6923      	ldr	r3, [r4, #16]
 8019232:	b36b      	cbz	r3, 8019290 <__swbuf_r+0x84>
 8019234:	6923      	ldr	r3, [r4, #16]
 8019236:	6820      	ldr	r0, [r4, #0]
 8019238:	1ac0      	subs	r0, r0, r3
 801923a:	6963      	ldr	r3, [r4, #20]
 801923c:	b2f6      	uxtb	r6, r6
 801923e:	4283      	cmp	r3, r0
 8019240:	4637      	mov	r7, r6
 8019242:	dc04      	bgt.n	801924e <__swbuf_r+0x42>
 8019244:	4621      	mov	r1, r4
 8019246:	4628      	mov	r0, r5
 8019248:	f000 f96c 	bl	8019524 <_fflush_r>
 801924c:	bb30      	cbnz	r0, 801929c <__swbuf_r+0x90>
 801924e:	68a3      	ldr	r3, [r4, #8]
 8019250:	3b01      	subs	r3, #1
 8019252:	60a3      	str	r3, [r4, #8]
 8019254:	6823      	ldr	r3, [r4, #0]
 8019256:	1c5a      	adds	r2, r3, #1
 8019258:	6022      	str	r2, [r4, #0]
 801925a:	701e      	strb	r6, [r3, #0]
 801925c:	6963      	ldr	r3, [r4, #20]
 801925e:	3001      	adds	r0, #1
 8019260:	4283      	cmp	r3, r0
 8019262:	d004      	beq.n	801926e <__swbuf_r+0x62>
 8019264:	89a3      	ldrh	r3, [r4, #12]
 8019266:	07db      	lsls	r3, r3, #31
 8019268:	d506      	bpl.n	8019278 <__swbuf_r+0x6c>
 801926a:	2e0a      	cmp	r6, #10
 801926c:	d104      	bne.n	8019278 <__swbuf_r+0x6c>
 801926e:	4621      	mov	r1, r4
 8019270:	4628      	mov	r0, r5
 8019272:	f000 f957 	bl	8019524 <_fflush_r>
 8019276:	b988      	cbnz	r0, 801929c <__swbuf_r+0x90>
 8019278:	4638      	mov	r0, r7
 801927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801927c:	4b0a      	ldr	r3, [pc, #40]	; (80192a8 <__swbuf_r+0x9c>)
 801927e:	429c      	cmp	r4, r3
 8019280:	d101      	bne.n	8019286 <__swbuf_r+0x7a>
 8019282:	68ac      	ldr	r4, [r5, #8]
 8019284:	e7cf      	b.n	8019226 <__swbuf_r+0x1a>
 8019286:	4b09      	ldr	r3, [pc, #36]	; (80192ac <__swbuf_r+0xa0>)
 8019288:	429c      	cmp	r4, r3
 801928a:	bf08      	it	eq
 801928c:	68ec      	ldreq	r4, [r5, #12]
 801928e:	e7ca      	b.n	8019226 <__swbuf_r+0x1a>
 8019290:	4621      	mov	r1, r4
 8019292:	4628      	mov	r0, r5
 8019294:	f000 f81e 	bl	80192d4 <__swsetup_r>
 8019298:	2800      	cmp	r0, #0
 801929a:	d0cb      	beq.n	8019234 <__swbuf_r+0x28>
 801929c:	f04f 37ff 	mov.w	r7, #4294967295
 80192a0:	e7ea      	b.n	8019278 <__swbuf_r+0x6c>
 80192a2:	bf00      	nop
 80192a4:	0801d098 	.word	0x0801d098
 80192a8:	0801d0b8 	.word	0x0801d0b8
 80192ac:	0801d078 	.word	0x0801d078

080192b0 <_write_r>:
 80192b0:	b538      	push	{r3, r4, r5, lr}
 80192b2:	4d07      	ldr	r5, [pc, #28]	; (80192d0 <_write_r+0x20>)
 80192b4:	4604      	mov	r4, r0
 80192b6:	4608      	mov	r0, r1
 80192b8:	4611      	mov	r1, r2
 80192ba:	2200      	movs	r2, #0
 80192bc:	602a      	str	r2, [r5, #0]
 80192be:	461a      	mov	r2, r3
 80192c0:	f7e9 f90b 	bl	80024da <_write>
 80192c4:	1c43      	adds	r3, r0, #1
 80192c6:	d102      	bne.n	80192ce <_write_r+0x1e>
 80192c8:	682b      	ldr	r3, [r5, #0]
 80192ca:	b103      	cbz	r3, 80192ce <_write_r+0x1e>
 80192cc:	6023      	str	r3, [r4, #0]
 80192ce:	bd38      	pop	{r3, r4, r5, pc}
 80192d0:	2000daf4 	.word	0x2000daf4

080192d4 <__swsetup_r>:
 80192d4:	4b32      	ldr	r3, [pc, #200]	; (80193a0 <__swsetup_r+0xcc>)
 80192d6:	b570      	push	{r4, r5, r6, lr}
 80192d8:	681d      	ldr	r5, [r3, #0]
 80192da:	4606      	mov	r6, r0
 80192dc:	460c      	mov	r4, r1
 80192de:	b125      	cbz	r5, 80192ea <__swsetup_r+0x16>
 80192e0:	69ab      	ldr	r3, [r5, #24]
 80192e2:	b913      	cbnz	r3, 80192ea <__swsetup_r+0x16>
 80192e4:	4628      	mov	r0, r5
 80192e6:	f7ff fb9b 	bl	8018a20 <__sinit>
 80192ea:	4b2e      	ldr	r3, [pc, #184]	; (80193a4 <__swsetup_r+0xd0>)
 80192ec:	429c      	cmp	r4, r3
 80192ee:	d10f      	bne.n	8019310 <__swsetup_r+0x3c>
 80192f0:	686c      	ldr	r4, [r5, #4]
 80192f2:	89a3      	ldrh	r3, [r4, #12]
 80192f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80192f8:	0719      	lsls	r1, r3, #28
 80192fa:	d42c      	bmi.n	8019356 <__swsetup_r+0x82>
 80192fc:	06dd      	lsls	r5, r3, #27
 80192fe:	d411      	bmi.n	8019324 <__swsetup_r+0x50>
 8019300:	2309      	movs	r3, #9
 8019302:	6033      	str	r3, [r6, #0]
 8019304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019308:	81a3      	strh	r3, [r4, #12]
 801930a:	f04f 30ff 	mov.w	r0, #4294967295
 801930e:	e03e      	b.n	801938e <__swsetup_r+0xba>
 8019310:	4b25      	ldr	r3, [pc, #148]	; (80193a8 <__swsetup_r+0xd4>)
 8019312:	429c      	cmp	r4, r3
 8019314:	d101      	bne.n	801931a <__swsetup_r+0x46>
 8019316:	68ac      	ldr	r4, [r5, #8]
 8019318:	e7eb      	b.n	80192f2 <__swsetup_r+0x1e>
 801931a:	4b24      	ldr	r3, [pc, #144]	; (80193ac <__swsetup_r+0xd8>)
 801931c:	429c      	cmp	r4, r3
 801931e:	bf08      	it	eq
 8019320:	68ec      	ldreq	r4, [r5, #12]
 8019322:	e7e6      	b.n	80192f2 <__swsetup_r+0x1e>
 8019324:	0758      	lsls	r0, r3, #29
 8019326:	d512      	bpl.n	801934e <__swsetup_r+0x7a>
 8019328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801932a:	b141      	cbz	r1, 801933e <__swsetup_r+0x6a>
 801932c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019330:	4299      	cmp	r1, r3
 8019332:	d002      	beq.n	801933a <__swsetup_r+0x66>
 8019334:	4630      	mov	r0, r6
 8019336:	f000 f9cf 	bl	80196d8 <_free_r>
 801933a:	2300      	movs	r3, #0
 801933c:	6363      	str	r3, [r4, #52]	; 0x34
 801933e:	89a3      	ldrh	r3, [r4, #12]
 8019340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019344:	81a3      	strh	r3, [r4, #12]
 8019346:	2300      	movs	r3, #0
 8019348:	6063      	str	r3, [r4, #4]
 801934a:	6923      	ldr	r3, [r4, #16]
 801934c:	6023      	str	r3, [r4, #0]
 801934e:	89a3      	ldrh	r3, [r4, #12]
 8019350:	f043 0308 	orr.w	r3, r3, #8
 8019354:	81a3      	strh	r3, [r4, #12]
 8019356:	6923      	ldr	r3, [r4, #16]
 8019358:	b94b      	cbnz	r3, 801936e <__swsetup_r+0x9a>
 801935a:	89a3      	ldrh	r3, [r4, #12]
 801935c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019364:	d003      	beq.n	801936e <__swsetup_r+0x9a>
 8019366:	4621      	mov	r1, r4
 8019368:	4630      	mov	r0, r6
 801936a:	f000 f961 	bl	8019630 <__smakebuf_r>
 801936e:	89a0      	ldrh	r0, [r4, #12]
 8019370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019374:	f010 0301 	ands.w	r3, r0, #1
 8019378:	d00a      	beq.n	8019390 <__swsetup_r+0xbc>
 801937a:	2300      	movs	r3, #0
 801937c:	60a3      	str	r3, [r4, #8]
 801937e:	6963      	ldr	r3, [r4, #20]
 8019380:	425b      	negs	r3, r3
 8019382:	61a3      	str	r3, [r4, #24]
 8019384:	6923      	ldr	r3, [r4, #16]
 8019386:	b943      	cbnz	r3, 801939a <__swsetup_r+0xc6>
 8019388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801938c:	d1ba      	bne.n	8019304 <__swsetup_r+0x30>
 801938e:	bd70      	pop	{r4, r5, r6, pc}
 8019390:	0781      	lsls	r1, r0, #30
 8019392:	bf58      	it	pl
 8019394:	6963      	ldrpl	r3, [r4, #20]
 8019396:	60a3      	str	r3, [r4, #8]
 8019398:	e7f4      	b.n	8019384 <__swsetup_r+0xb0>
 801939a:	2000      	movs	r0, #0
 801939c:	e7f7      	b.n	801938e <__swsetup_r+0xba>
 801939e:	bf00      	nop
 80193a0:	2000009c 	.word	0x2000009c
 80193a4:	0801d098 	.word	0x0801d098
 80193a8:	0801d0b8 	.word	0x0801d0b8
 80193ac:	0801d078 	.word	0x0801d078

080193b0 <__assert_func>:
 80193b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80193b2:	4614      	mov	r4, r2
 80193b4:	461a      	mov	r2, r3
 80193b6:	4b09      	ldr	r3, [pc, #36]	; (80193dc <__assert_func+0x2c>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	4605      	mov	r5, r0
 80193bc:	68d8      	ldr	r0, [r3, #12]
 80193be:	b14c      	cbz	r4, 80193d4 <__assert_func+0x24>
 80193c0:	4b07      	ldr	r3, [pc, #28]	; (80193e0 <__assert_func+0x30>)
 80193c2:	9100      	str	r1, [sp, #0]
 80193c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80193c8:	4906      	ldr	r1, [pc, #24]	; (80193e4 <__assert_func+0x34>)
 80193ca:	462b      	mov	r3, r5
 80193cc:	f000 f8e6 	bl	801959c <fiprintf>
 80193d0:	f000 fe2a 	bl	801a028 <abort>
 80193d4:	4b04      	ldr	r3, [pc, #16]	; (80193e8 <__assert_func+0x38>)
 80193d6:	461c      	mov	r4, r3
 80193d8:	e7f3      	b.n	80193c2 <__assert_func+0x12>
 80193da:	bf00      	nop
 80193dc:	2000009c 	.word	0x2000009c
 80193e0:	0801d14e 	.word	0x0801d14e
 80193e4:	0801d15b 	.word	0x0801d15b
 80193e8:	0801d189 	.word	0x0801d189

080193ec <_close_r>:
 80193ec:	b538      	push	{r3, r4, r5, lr}
 80193ee:	4d06      	ldr	r5, [pc, #24]	; (8019408 <_close_r+0x1c>)
 80193f0:	2300      	movs	r3, #0
 80193f2:	4604      	mov	r4, r0
 80193f4:	4608      	mov	r0, r1
 80193f6:	602b      	str	r3, [r5, #0]
 80193f8:	f7e9 f88b 	bl	8002512 <_close>
 80193fc:	1c43      	adds	r3, r0, #1
 80193fe:	d102      	bne.n	8019406 <_close_r+0x1a>
 8019400:	682b      	ldr	r3, [r5, #0]
 8019402:	b103      	cbz	r3, 8019406 <_close_r+0x1a>
 8019404:	6023      	str	r3, [r4, #0]
 8019406:	bd38      	pop	{r3, r4, r5, pc}
 8019408:	2000daf4 	.word	0x2000daf4

0801940c <__errno>:
 801940c:	4b01      	ldr	r3, [pc, #4]	; (8019414 <__errno+0x8>)
 801940e:	6818      	ldr	r0, [r3, #0]
 8019410:	4770      	bx	lr
 8019412:	bf00      	nop
 8019414:	2000009c 	.word	0x2000009c

08019418 <__sflush_r>:
 8019418:	898a      	ldrh	r2, [r1, #12]
 801941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801941e:	4605      	mov	r5, r0
 8019420:	0710      	lsls	r0, r2, #28
 8019422:	460c      	mov	r4, r1
 8019424:	d458      	bmi.n	80194d8 <__sflush_r+0xc0>
 8019426:	684b      	ldr	r3, [r1, #4]
 8019428:	2b00      	cmp	r3, #0
 801942a:	dc05      	bgt.n	8019438 <__sflush_r+0x20>
 801942c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801942e:	2b00      	cmp	r3, #0
 8019430:	dc02      	bgt.n	8019438 <__sflush_r+0x20>
 8019432:	2000      	movs	r0, #0
 8019434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801943a:	2e00      	cmp	r6, #0
 801943c:	d0f9      	beq.n	8019432 <__sflush_r+0x1a>
 801943e:	2300      	movs	r3, #0
 8019440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019444:	682f      	ldr	r7, [r5, #0]
 8019446:	602b      	str	r3, [r5, #0]
 8019448:	d032      	beq.n	80194b0 <__sflush_r+0x98>
 801944a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801944c:	89a3      	ldrh	r3, [r4, #12]
 801944e:	075a      	lsls	r2, r3, #29
 8019450:	d505      	bpl.n	801945e <__sflush_r+0x46>
 8019452:	6863      	ldr	r3, [r4, #4]
 8019454:	1ac0      	subs	r0, r0, r3
 8019456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019458:	b10b      	cbz	r3, 801945e <__sflush_r+0x46>
 801945a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801945c:	1ac0      	subs	r0, r0, r3
 801945e:	2300      	movs	r3, #0
 8019460:	4602      	mov	r2, r0
 8019462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019464:	6a21      	ldr	r1, [r4, #32]
 8019466:	4628      	mov	r0, r5
 8019468:	47b0      	blx	r6
 801946a:	1c43      	adds	r3, r0, #1
 801946c:	89a3      	ldrh	r3, [r4, #12]
 801946e:	d106      	bne.n	801947e <__sflush_r+0x66>
 8019470:	6829      	ldr	r1, [r5, #0]
 8019472:	291d      	cmp	r1, #29
 8019474:	d82c      	bhi.n	80194d0 <__sflush_r+0xb8>
 8019476:	4a2a      	ldr	r2, [pc, #168]	; (8019520 <__sflush_r+0x108>)
 8019478:	40ca      	lsrs	r2, r1
 801947a:	07d6      	lsls	r6, r2, #31
 801947c:	d528      	bpl.n	80194d0 <__sflush_r+0xb8>
 801947e:	2200      	movs	r2, #0
 8019480:	6062      	str	r2, [r4, #4]
 8019482:	04d9      	lsls	r1, r3, #19
 8019484:	6922      	ldr	r2, [r4, #16]
 8019486:	6022      	str	r2, [r4, #0]
 8019488:	d504      	bpl.n	8019494 <__sflush_r+0x7c>
 801948a:	1c42      	adds	r2, r0, #1
 801948c:	d101      	bne.n	8019492 <__sflush_r+0x7a>
 801948e:	682b      	ldr	r3, [r5, #0]
 8019490:	b903      	cbnz	r3, 8019494 <__sflush_r+0x7c>
 8019492:	6560      	str	r0, [r4, #84]	; 0x54
 8019494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019496:	602f      	str	r7, [r5, #0]
 8019498:	2900      	cmp	r1, #0
 801949a:	d0ca      	beq.n	8019432 <__sflush_r+0x1a>
 801949c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194a0:	4299      	cmp	r1, r3
 80194a2:	d002      	beq.n	80194aa <__sflush_r+0x92>
 80194a4:	4628      	mov	r0, r5
 80194a6:	f000 f917 	bl	80196d8 <_free_r>
 80194aa:	2000      	movs	r0, #0
 80194ac:	6360      	str	r0, [r4, #52]	; 0x34
 80194ae:	e7c1      	b.n	8019434 <__sflush_r+0x1c>
 80194b0:	6a21      	ldr	r1, [r4, #32]
 80194b2:	2301      	movs	r3, #1
 80194b4:	4628      	mov	r0, r5
 80194b6:	47b0      	blx	r6
 80194b8:	1c41      	adds	r1, r0, #1
 80194ba:	d1c7      	bne.n	801944c <__sflush_r+0x34>
 80194bc:	682b      	ldr	r3, [r5, #0]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d0c4      	beq.n	801944c <__sflush_r+0x34>
 80194c2:	2b1d      	cmp	r3, #29
 80194c4:	d001      	beq.n	80194ca <__sflush_r+0xb2>
 80194c6:	2b16      	cmp	r3, #22
 80194c8:	d101      	bne.n	80194ce <__sflush_r+0xb6>
 80194ca:	602f      	str	r7, [r5, #0]
 80194cc:	e7b1      	b.n	8019432 <__sflush_r+0x1a>
 80194ce:	89a3      	ldrh	r3, [r4, #12]
 80194d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194d4:	81a3      	strh	r3, [r4, #12]
 80194d6:	e7ad      	b.n	8019434 <__sflush_r+0x1c>
 80194d8:	690f      	ldr	r7, [r1, #16]
 80194da:	2f00      	cmp	r7, #0
 80194dc:	d0a9      	beq.n	8019432 <__sflush_r+0x1a>
 80194de:	0793      	lsls	r3, r2, #30
 80194e0:	680e      	ldr	r6, [r1, #0]
 80194e2:	bf08      	it	eq
 80194e4:	694b      	ldreq	r3, [r1, #20]
 80194e6:	600f      	str	r7, [r1, #0]
 80194e8:	bf18      	it	ne
 80194ea:	2300      	movne	r3, #0
 80194ec:	eba6 0807 	sub.w	r8, r6, r7
 80194f0:	608b      	str	r3, [r1, #8]
 80194f2:	f1b8 0f00 	cmp.w	r8, #0
 80194f6:	dd9c      	ble.n	8019432 <__sflush_r+0x1a>
 80194f8:	6a21      	ldr	r1, [r4, #32]
 80194fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80194fc:	4643      	mov	r3, r8
 80194fe:	463a      	mov	r2, r7
 8019500:	4628      	mov	r0, r5
 8019502:	47b0      	blx	r6
 8019504:	2800      	cmp	r0, #0
 8019506:	dc06      	bgt.n	8019516 <__sflush_r+0xfe>
 8019508:	89a3      	ldrh	r3, [r4, #12]
 801950a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801950e:	81a3      	strh	r3, [r4, #12]
 8019510:	f04f 30ff 	mov.w	r0, #4294967295
 8019514:	e78e      	b.n	8019434 <__sflush_r+0x1c>
 8019516:	4407      	add	r7, r0
 8019518:	eba8 0800 	sub.w	r8, r8, r0
 801951c:	e7e9      	b.n	80194f2 <__sflush_r+0xda>
 801951e:	bf00      	nop
 8019520:	20400001 	.word	0x20400001

08019524 <_fflush_r>:
 8019524:	b538      	push	{r3, r4, r5, lr}
 8019526:	690b      	ldr	r3, [r1, #16]
 8019528:	4605      	mov	r5, r0
 801952a:	460c      	mov	r4, r1
 801952c:	b913      	cbnz	r3, 8019534 <_fflush_r+0x10>
 801952e:	2500      	movs	r5, #0
 8019530:	4628      	mov	r0, r5
 8019532:	bd38      	pop	{r3, r4, r5, pc}
 8019534:	b118      	cbz	r0, 801953e <_fflush_r+0x1a>
 8019536:	6983      	ldr	r3, [r0, #24]
 8019538:	b90b      	cbnz	r3, 801953e <_fflush_r+0x1a>
 801953a:	f7ff fa71 	bl	8018a20 <__sinit>
 801953e:	4b14      	ldr	r3, [pc, #80]	; (8019590 <_fflush_r+0x6c>)
 8019540:	429c      	cmp	r4, r3
 8019542:	d11b      	bne.n	801957c <_fflush_r+0x58>
 8019544:	686c      	ldr	r4, [r5, #4]
 8019546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d0ef      	beq.n	801952e <_fflush_r+0xa>
 801954e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019550:	07d0      	lsls	r0, r2, #31
 8019552:	d404      	bmi.n	801955e <_fflush_r+0x3a>
 8019554:	0599      	lsls	r1, r3, #22
 8019556:	d402      	bmi.n	801955e <_fflush_r+0x3a>
 8019558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801955a:	f7ff fb24 	bl	8018ba6 <__retarget_lock_acquire_recursive>
 801955e:	4628      	mov	r0, r5
 8019560:	4621      	mov	r1, r4
 8019562:	f7ff ff59 	bl	8019418 <__sflush_r>
 8019566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019568:	07da      	lsls	r2, r3, #31
 801956a:	4605      	mov	r5, r0
 801956c:	d4e0      	bmi.n	8019530 <_fflush_r+0xc>
 801956e:	89a3      	ldrh	r3, [r4, #12]
 8019570:	059b      	lsls	r3, r3, #22
 8019572:	d4dd      	bmi.n	8019530 <_fflush_r+0xc>
 8019574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019576:	f7ff fb17 	bl	8018ba8 <__retarget_lock_release_recursive>
 801957a:	e7d9      	b.n	8019530 <_fflush_r+0xc>
 801957c:	4b05      	ldr	r3, [pc, #20]	; (8019594 <_fflush_r+0x70>)
 801957e:	429c      	cmp	r4, r3
 8019580:	d101      	bne.n	8019586 <_fflush_r+0x62>
 8019582:	68ac      	ldr	r4, [r5, #8]
 8019584:	e7df      	b.n	8019546 <_fflush_r+0x22>
 8019586:	4b04      	ldr	r3, [pc, #16]	; (8019598 <_fflush_r+0x74>)
 8019588:	429c      	cmp	r4, r3
 801958a:	bf08      	it	eq
 801958c:	68ec      	ldreq	r4, [r5, #12]
 801958e:	e7da      	b.n	8019546 <_fflush_r+0x22>
 8019590:	0801d098 	.word	0x0801d098
 8019594:	0801d0b8 	.word	0x0801d0b8
 8019598:	0801d078 	.word	0x0801d078

0801959c <fiprintf>:
 801959c:	b40e      	push	{r1, r2, r3}
 801959e:	b503      	push	{r0, r1, lr}
 80195a0:	4601      	mov	r1, r0
 80195a2:	ab03      	add	r3, sp, #12
 80195a4:	4805      	ldr	r0, [pc, #20]	; (80195bc <fiprintf+0x20>)
 80195a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80195aa:	6800      	ldr	r0, [r0, #0]
 80195ac:	9301      	str	r3, [sp, #4]
 80195ae:	f000 fa65 	bl	8019a7c <_vfiprintf_r>
 80195b2:	b002      	add	sp, #8
 80195b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80195b8:	b003      	add	sp, #12
 80195ba:	4770      	bx	lr
 80195bc:	2000009c 	.word	0x2000009c

080195c0 <_lseek_r>:
 80195c0:	b538      	push	{r3, r4, r5, lr}
 80195c2:	4d07      	ldr	r5, [pc, #28]	; (80195e0 <_lseek_r+0x20>)
 80195c4:	4604      	mov	r4, r0
 80195c6:	4608      	mov	r0, r1
 80195c8:	4611      	mov	r1, r2
 80195ca:	2200      	movs	r2, #0
 80195cc:	602a      	str	r2, [r5, #0]
 80195ce:	461a      	mov	r2, r3
 80195d0:	f7e8 ffc6 	bl	8002560 <_lseek>
 80195d4:	1c43      	adds	r3, r0, #1
 80195d6:	d102      	bne.n	80195de <_lseek_r+0x1e>
 80195d8:	682b      	ldr	r3, [r5, #0]
 80195da:	b103      	cbz	r3, 80195de <_lseek_r+0x1e>
 80195dc:	6023      	str	r3, [r4, #0]
 80195de:	bd38      	pop	{r3, r4, r5, pc}
 80195e0:	2000daf4 	.word	0x2000daf4

080195e4 <__swhatbuf_r>:
 80195e4:	b570      	push	{r4, r5, r6, lr}
 80195e6:	460e      	mov	r6, r1
 80195e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195ec:	2900      	cmp	r1, #0
 80195ee:	b096      	sub	sp, #88	; 0x58
 80195f0:	4614      	mov	r4, r2
 80195f2:	461d      	mov	r5, r3
 80195f4:	da08      	bge.n	8019608 <__swhatbuf_r+0x24>
 80195f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80195fa:	2200      	movs	r2, #0
 80195fc:	602a      	str	r2, [r5, #0]
 80195fe:	061a      	lsls	r2, r3, #24
 8019600:	d410      	bmi.n	8019624 <__swhatbuf_r+0x40>
 8019602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019606:	e00e      	b.n	8019626 <__swhatbuf_r+0x42>
 8019608:	466a      	mov	r2, sp
 801960a:	f000 fd15 	bl	801a038 <_fstat_r>
 801960e:	2800      	cmp	r0, #0
 8019610:	dbf1      	blt.n	80195f6 <__swhatbuf_r+0x12>
 8019612:	9a01      	ldr	r2, [sp, #4]
 8019614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801961c:	425a      	negs	r2, r3
 801961e:	415a      	adcs	r2, r3
 8019620:	602a      	str	r2, [r5, #0]
 8019622:	e7ee      	b.n	8019602 <__swhatbuf_r+0x1e>
 8019624:	2340      	movs	r3, #64	; 0x40
 8019626:	2000      	movs	r0, #0
 8019628:	6023      	str	r3, [r4, #0]
 801962a:	b016      	add	sp, #88	; 0x58
 801962c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019630 <__smakebuf_r>:
 8019630:	898b      	ldrh	r3, [r1, #12]
 8019632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019634:	079d      	lsls	r5, r3, #30
 8019636:	4606      	mov	r6, r0
 8019638:	460c      	mov	r4, r1
 801963a:	d507      	bpl.n	801964c <__smakebuf_r+0x1c>
 801963c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019640:	6023      	str	r3, [r4, #0]
 8019642:	6123      	str	r3, [r4, #16]
 8019644:	2301      	movs	r3, #1
 8019646:	6163      	str	r3, [r4, #20]
 8019648:	b002      	add	sp, #8
 801964a:	bd70      	pop	{r4, r5, r6, pc}
 801964c:	ab01      	add	r3, sp, #4
 801964e:	466a      	mov	r2, sp
 8019650:	f7ff ffc8 	bl	80195e4 <__swhatbuf_r>
 8019654:	9900      	ldr	r1, [sp, #0]
 8019656:	4605      	mov	r5, r0
 8019658:	4630      	mov	r0, r6
 801965a:	f7ff fb07 	bl	8018c6c <_malloc_r>
 801965e:	b948      	cbnz	r0, 8019674 <__smakebuf_r+0x44>
 8019660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019664:	059a      	lsls	r2, r3, #22
 8019666:	d4ef      	bmi.n	8019648 <__smakebuf_r+0x18>
 8019668:	f023 0303 	bic.w	r3, r3, #3
 801966c:	f043 0302 	orr.w	r3, r3, #2
 8019670:	81a3      	strh	r3, [r4, #12]
 8019672:	e7e3      	b.n	801963c <__smakebuf_r+0xc>
 8019674:	4b0d      	ldr	r3, [pc, #52]	; (80196ac <__smakebuf_r+0x7c>)
 8019676:	62b3      	str	r3, [r6, #40]	; 0x28
 8019678:	89a3      	ldrh	r3, [r4, #12]
 801967a:	6020      	str	r0, [r4, #0]
 801967c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019680:	81a3      	strh	r3, [r4, #12]
 8019682:	9b00      	ldr	r3, [sp, #0]
 8019684:	6163      	str	r3, [r4, #20]
 8019686:	9b01      	ldr	r3, [sp, #4]
 8019688:	6120      	str	r0, [r4, #16]
 801968a:	b15b      	cbz	r3, 80196a4 <__smakebuf_r+0x74>
 801968c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019690:	4630      	mov	r0, r6
 8019692:	f000 fce3 	bl	801a05c <_isatty_r>
 8019696:	b128      	cbz	r0, 80196a4 <__smakebuf_r+0x74>
 8019698:	89a3      	ldrh	r3, [r4, #12]
 801969a:	f023 0303 	bic.w	r3, r3, #3
 801969e:	f043 0301 	orr.w	r3, r3, #1
 80196a2:	81a3      	strh	r3, [r4, #12]
 80196a4:	89a0      	ldrh	r0, [r4, #12]
 80196a6:	4305      	orrs	r5, r0
 80196a8:	81a5      	strh	r5, [r4, #12]
 80196aa:	e7cd      	b.n	8019648 <__smakebuf_r+0x18>
 80196ac:	080189b9 	.word	0x080189b9

080196b0 <malloc>:
 80196b0:	4b02      	ldr	r3, [pc, #8]	; (80196bc <malloc+0xc>)
 80196b2:	4601      	mov	r1, r0
 80196b4:	6818      	ldr	r0, [r3, #0]
 80196b6:	f7ff bad9 	b.w	8018c6c <_malloc_r>
 80196ba:	bf00      	nop
 80196bc:	2000009c 	.word	0x2000009c

080196c0 <__malloc_lock>:
 80196c0:	4801      	ldr	r0, [pc, #4]	; (80196c8 <__malloc_lock+0x8>)
 80196c2:	f7ff ba70 	b.w	8018ba6 <__retarget_lock_acquire_recursive>
 80196c6:	bf00      	nop
 80196c8:	2000dae8 	.word	0x2000dae8

080196cc <__malloc_unlock>:
 80196cc:	4801      	ldr	r0, [pc, #4]	; (80196d4 <__malloc_unlock+0x8>)
 80196ce:	f7ff ba6b 	b.w	8018ba8 <__retarget_lock_release_recursive>
 80196d2:	bf00      	nop
 80196d4:	2000dae8 	.word	0x2000dae8

080196d8 <_free_r>:
 80196d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196da:	2900      	cmp	r1, #0
 80196dc:	d044      	beq.n	8019768 <_free_r+0x90>
 80196de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196e2:	9001      	str	r0, [sp, #4]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	f1a1 0404 	sub.w	r4, r1, #4
 80196ea:	bfb8      	it	lt
 80196ec:	18e4      	addlt	r4, r4, r3
 80196ee:	f7ff ffe7 	bl	80196c0 <__malloc_lock>
 80196f2:	4a1e      	ldr	r2, [pc, #120]	; (801976c <_free_r+0x94>)
 80196f4:	9801      	ldr	r0, [sp, #4]
 80196f6:	6813      	ldr	r3, [r2, #0]
 80196f8:	b933      	cbnz	r3, 8019708 <_free_r+0x30>
 80196fa:	6063      	str	r3, [r4, #4]
 80196fc:	6014      	str	r4, [r2, #0]
 80196fe:	b003      	add	sp, #12
 8019700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019704:	f7ff bfe2 	b.w	80196cc <__malloc_unlock>
 8019708:	42a3      	cmp	r3, r4
 801970a:	d908      	bls.n	801971e <_free_r+0x46>
 801970c:	6825      	ldr	r5, [r4, #0]
 801970e:	1961      	adds	r1, r4, r5
 8019710:	428b      	cmp	r3, r1
 8019712:	bf01      	itttt	eq
 8019714:	6819      	ldreq	r1, [r3, #0]
 8019716:	685b      	ldreq	r3, [r3, #4]
 8019718:	1949      	addeq	r1, r1, r5
 801971a:	6021      	streq	r1, [r4, #0]
 801971c:	e7ed      	b.n	80196fa <_free_r+0x22>
 801971e:	461a      	mov	r2, r3
 8019720:	685b      	ldr	r3, [r3, #4]
 8019722:	b10b      	cbz	r3, 8019728 <_free_r+0x50>
 8019724:	42a3      	cmp	r3, r4
 8019726:	d9fa      	bls.n	801971e <_free_r+0x46>
 8019728:	6811      	ldr	r1, [r2, #0]
 801972a:	1855      	adds	r5, r2, r1
 801972c:	42a5      	cmp	r5, r4
 801972e:	d10b      	bne.n	8019748 <_free_r+0x70>
 8019730:	6824      	ldr	r4, [r4, #0]
 8019732:	4421      	add	r1, r4
 8019734:	1854      	adds	r4, r2, r1
 8019736:	42a3      	cmp	r3, r4
 8019738:	6011      	str	r1, [r2, #0]
 801973a:	d1e0      	bne.n	80196fe <_free_r+0x26>
 801973c:	681c      	ldr	r4, [r3, #0]
 801973e:	685b      	ldr	r3, [r3, #4]
 8019740:	6053      	str	r3, [r2, #4]
 8019742:	4421      	add	r1, r4
 8019744:	6011      	str	r1, [r2, #0]
 8019746:	e7da      	b.n	80196fe <_free_r+0x26>
 8019748:	d902      	bls.n	8019750 <_free_r+0x78>
 801974a:	230c      	movs	r3, #12
 801974c:	6003      	str	r3, [r0, #0]
 801974e:	e7d6      	b.n	80196fe <_free_r+0x26>
 8019750:	6825      	ldr	r5, [r4, #0]
 8019752:	1961      	adds	r1, r4, r5
 8019754:	428b      	cmp	r3, r1
 8019756:	bf04      	itt	eq
 8019758:	6819      	ldreq	r1, [r3, #0]
 801975a:	685b      	ldreq	r3, [r3, #4]
 801975c:	6063      	str	r3, [r4, #4]
 801975e:	bf04      	itt	eq
 8019760:	1949      	addeq	r1, r1, r5
 8019762:	6021      	streq	r1, [r4, #0]
 8019764:	6054      	str	r4, [r2, #4]
 8019766:	e7ca      	b.n	80196fe <_free_r+0x26>
 8019768:	b003      	add	sp, #12
 801976a:	bd30      	pop	{r4, r5, pc}
 801976c:	2000daec 	.word	0x2000daec

08019770 <__ssputs_r>:
 8019770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019774:	688e      	ldr	r6, [r1, #8]
 8019776:	429e      	cmp	r6, r3
 8019778:	4682      	mov	sl, r0
 801977a:	460c      	mov	r4, r1
 801977c:	4690      	mov	r8, r2
 801977e:	461f      	mov	r7, r3
 8019780:	d838      	bhi.n	80197f4 <__ssputs_r+0x84>
 8019782:	898a      	ldrh	r2, [r1, #12]
 8019784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019788:	d032      	beq.n	80197f0 <__ssputs_r+0x80>
 801978a:	6825      	ldr	r5, [r4, #0]
 801978c:	6909      	ldr	r1, [r1, #16]
 801978e:	eba5 0901 	sub.w	r9, r5, r1
 8019792:	6965      	ldr	r5, [r4, #20]
 8019794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801979c:	3301      	adds	r3, #1
 801979e:	444b      	add	r3, r9
 80197a0:	106d      	asrs	r5, r5, #1
 80197a2:	429d      	cmp	r5, r3
 80197a4:	bf38      	it	cc
 80197a6:	461d      	movcc	r5, r3
 80197a8:	0553      	lsls	r3, r2, #21
 80197aa:	d531      	bpl.n	8019810 <__ssputs_r+0xa0>
 80197ac:	4629      	mov	r1, r5
 80197ae:	f7ff fa5d 	bl	8018c6c <_malloc_r>
 80197b2:	4606      	mov	r6, r0
 80197b4:	b950      	cbnz	r0, 80197cc <__ssputs_r+0x5c>
 80197b6:	230c      	movs	r3, #12
 80197b8:	f8ca 3000 	str.w	r3, [sl]
 80197bc:	89a3      	ldrh	r3, [r4, #12]
 80197be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197c2:	81a3      	strh	r3, [r4, #12]
 80197c4:	f04f 30ff 	mov.w	r0, #4294967295
 80197c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197cc:	6921      	ldr	r1, [r4, #16]
 80197ce:	464a      	mov	r2, r9
 80197d0:	f7ff f9fb 	bl	8018bca <memcpy>
 80197d4:	89a3      	ldrh	r3, [r4, #12]
 80197d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197de:	81a3      	strh	r3, [r4, #12]
 80197e0:	6126      	str	r6, [r4, #16]
 80197e2:	6165      	str	r5, [r4, #20]
 80197e4:	444e      	add	r6, r9
 80197e6:	eba5 0509 	sub.w	r5, r5, r9
 80197ea:	6026      	str	r6, [r4, #0]
 80197ec:	60a5      	str	r5, [r4, #8]
 80197ee:	463e      	mov	r6, r7
 80197f0:	42be      	cmp	r6, r7
 80197f2:	d900      	bls.n	80197f6 <__ssputs_r+0x86>
 80197f4:	463e      	mov	r6, r7
 80197f6:	6820      	ldr	r0, [r4, #0]
 80197f8:	4632      	mov	r2, r6
 80197fa:	4641      	mov	r1, r8
 80197fc:	f7ff f9f3 	bl	8018be6 <memmove>
 8019800:	68a3      	ldr	r3, [r4, #8]
 8019802:	1b9b      	subs	r3, r3, r6
 8019804:	60a3      	str	r3, [r4, #8]
 8019806:	6823      	ldr	r3, [r4, #0]
 8019808:	4433      	add	r3, r6
 801980a:	6023      	str	r3, [r4, #0]
 801980c:	2000      	movs	r0, #0
 801980e:	e7db      	b.n	80197c8 <__ssputs_r+0x58>
 8019810:	462a      	mov	r2, r5
 8019812:	f000 fc33 	bl	801a07c <_realloc_r>
 8019816:	4606      	mov	r6, r0
 8019818:	2800      	cmp	r0, #0
 801981a:	d1e1      	bne.n	80197e0 <__ssputs_r+0x70>
 801981c:	6921      	ldr	r1, [r4, #16]
 801981e:	4650      	mov	r0, sl
 8019820:	f7ff ff5a 	bl	80196d8 <_free_r>
 8019824:	e7c7      	b.n	80197b6 <__ssputs_r+0x46>
	...

08019828 <_svfiprintf_r>:
 8019828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801982c:	4698      	mov	r8, r3
 801982e:	898b      	ldrh	r3, [r1, #12]
 8019830:	061b      	lsls	r3, r3, #24
 8019832:	b09d      	sub	sp, #116	; 0x74
 8019834:	4607      	mov	r7, r0
 8019836:	460d      	mov	r5, r1
 8019838:	4614      	mov	r4, r2
 801983a:	d50e      	bpl.n	801985a <_svfiprintf_r+0x32>
 801983c:	690b      	ldr	r3, [r1, #16]
 801983e:	b963      	cbnz	r3, 801985a <_svfiprintf_r+0x32>
 8019840:	2140      	movs	r1, #64	; 0x40
 8019842:	f7ff fa13 	bl	8018c6c <_malloc_r>
 8019846:	6028      	str	r0, [r5, #0]
 8019848:	6128      	str	r0, [r5, #16]
 801984a:	b920      	cbnz	r0, 8019856 <_svfiprintf_r+0x2e>
 801984c:	230c      	movs	r3, #12
 801984e:	603b      	str	r3, [r7, #0]
 8019850:	f04f 30ff 	mov.w	r0, #4294967295
 8019854:	e0d1      	b.n	80199fa <_svfiprintf_r+0x1d2>
 8019856:	2340      	movs	r3, #64	; 0x40
 8019858:	616b      	str	r3, [r5, #20]
 801985a:	2300      	movs	r3, #0
 801985c:	9309      	str	r3, [sp, #36]	; 0x24
 801985e:	2320      	movs	r3, #32
 8019860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019864:	f8cd 800c 	str.w	r8, [sp, #12]
 8019868:	2330      	movs	r3, #48	; 0x30
 801986a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019a14 <_svfiprintf_r+0x1ec>
 801986e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019872:	f04f 0901 	mov.w	r9, #1
 8019876:	4623      	mov	r3, r4
 8019878:	469a      	mov	sl, r3
 801987a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801987e:	b10a      	cbz	r2, 8019884 <_svfiprintf_r+0x5c>
 8019880:	2a25      	cmp	r2, #37	; 0x25
 8019882:	d1f9      	bne.n	8019878 <_svfiprintf_r+0x50>
 8019884:	ebba 0b04 	subs.w	fp, sl, r4
 8019888:	d00b      	beq.n	80198a2 <_svfiprintf_r+0x7a>
 801988a:	465b      	mov	r3, fp
 801988c:	4622      	mov	r2, r4
 801988e:	4629      	mov	r1, r5
 8019890:	4638      	mov	r0, r7
 8019892:	f7ff ff6d 	bl	8019770 <__ssputs_r>
 8019896:	3001      	adds	r0, #1
 8019898:	f000 80aa 	beq.w	80199f0 <_svfiprintf_r+0x1c8>
 801989c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801989e:	445a      	add	r2, fp
 80198a0:	9209      	str	r2, [sp, #36]	; 0x24
 80198a2:	f89a 3000 	ldrb.w	r3, [sl]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	f000 80a2 	beq.w	80199f0 <_svfiprintf_r+0x1c8>
 80198ac:	2300      	movs	r3, #0
 80198ae:	f04f 32ff 	mov.w	r2, #4294967295
 80198b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198b6:	f10a 0a01 	add.w	sl, sl, #1
 80198ba:	9304      	str	r3, [sp, #16]
 80198bc:	9307      	str	r3, [sp, #28]
 80198be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198c2:	931a      	str	r3, [sp, #104]	; 0x68
 80198c4:	4654      	mov	r4, sl
 80198c6:	2205      	movs	r2, #5
 80198c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198cc:	4851      	ldr	r0, [pc, #324]	; (8019a14 <_svfiprintf_r+0x1ec>)
 80198ce:	f7e6 fc8f 	bl	80001f0 <memchr>
 80198d2:	9a04      	ldr	r2, [sp, #16]
 80198d4:	b9d8      	cbnz	r0, 801990e <_svfiprintf_r+0xe6>
 80198d6:	06d0      	lsls	r0, r2, #27
 80198d8:	bf44      	itt	mi
 80198da:	2320      	movmi	r3, #32
 80198dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198e0:	0711      	lsls	r1, r2, #28
 80198e2:	bf44      	itt	mi
 80198e4:	232b      	movmi	r3, #43	; 0x2b
 80198e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198ea:	f89a 3000 	ldrb.w	r3, [sl]
 80198ee:	2b2a      	cmp	r3, #42	; 0x2a
 80198f0:	d015      	beq.n	801991e <_svfiprintf_r+0xf6>
 80198f2:	9a07      	ldr	r2, [sp, #28]
 80198f4:	4654      	mov	r4, sl
 80198f6:	2000      	movs	r0, #0
 80198f8:	f04f 0c0a 	mov.w	ip, #10
 80198fc:	4621      	mov	r1, r4
 80198fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019902:	3b30      	subs	r3, #48	; 0x30
 8019904:	2b09      	cmp	r3, #9
 8019906:	d94e      	bls.n	80199a6 <_svfiprintf_r+0x17e>
 8019908:	b1b0      	cbz	r0, 8019938 <_svfiprintf_r+0x110>
 801990a:	9207      	str	r2, [sp, #28]
 801990c:	e014      	b.n	8019938 <_svfiprintf_r+0x110>
 801990e:	eba0 0308 	sub.w	r3, r0, r8
 8019912:	fa09 f303 	lsl.w	r3, r9, r3
 8019916:	4313      	orrs	r3, r2
 8019918:	9304      	str	r3, [sp, #16]
 801991a:	46a2      	mov	sl, r4
 801991c:	e7d2      	b.n	80198c4 <_svfiprintf_r+0x9c>
 801991e:	9b03      	ldr	r3, [sp, #12]
 8019920:	1d19      	adds	r1, r3, #4
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	9103      	str	r1, [sp, #12]
 8019926:	2b00      	cmp	r3, #0
 8019928:	bfbb      	ittet	lt
 801992a:	425b      	neglt	r3, r3
 801992c:	f042 0202 	orrlt.w	r2, r2, #2
 8019930:	9307      	strge	r3, [sp, #28]
 8019932:	9307      	strlt	r3, [sp, #28]
 8019934:	bfb8      	it	lt
 8019936:	9204      	strlt	r2, [sp, #16]
 8019938:	7823      	ldrb	r3, [r4, #0]
 801993a:	2b2e      	cmp	r3, #46	; 0x2e
 801993c:	d10c      	bne.n	8019958 <_svfiprintf_r+0x130>
 801993e:	7863      	ldrb	r3, [r4, #1]
 8019940:	2b2a      	cmp	r3, #42	; 0x2a
 8019942:	d135      	bne.n	80199b0 <_svfiprintf_r+0x188>
 8019944:	9b03      	ldr	r3, [sp, #12]
 8019946:	1d1a      	adds	r2, r3, #4
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	9203      	str	r2, [sp, #12]
 801994c:	2b00      	cmp	r3, #0
 801994e:	bfb8      	it	lt
 8019950:	f04f 33ff 	movlt.w	r3, #4294967295
 8019954:	3402      	adds	r4, #2
 8019956:	9305      	str	r3, [sp, #20]
 8019958:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019a24 <_svfiprintf_r+0x1fc>
 801995c:	7821      	ldrb	r1, [r4, #0]
 801995e:	2203      	movs	r2, #3
 8019960:	4650      	mov	r0, sl
 8019962:	f7e6 fc45 	bl	80001f0 <memchr>
 8019966:	b140      	cbz	r0, 801997a <_svfiprintf_r+0x152>
 8019968:	2340      	movs	r3, #64	; 0x40
 801996a:	eba0 000a 	sub.w	r0, r0, sl
 801996e:	fa03 f000 	lsl.w	r0, r3, r0
 8019972:	9b04      	ldr	r3, [sp, #16]
 8019974:	4303      	orrs	r3, r0
 8019976:	3401      	adds	r4, #1
 8019978:	9304      	str	r3, [sp, #16]
 801997a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801997e:	4826      	ldr	r0, [pc, #152]	; (8019a18 <_svfiprintf_r+0x1f0>)
 8019980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019984:	2206      	movs	r2, #6
 8019986:	f7e6 fc33 	bl	80001f0 <memchr>
 801998a:	2800      	cmp	r0, #0
 801998c:	d038      	beq.n	8019a00 <_svfiprintf_r+0x1d8>
 801998e:	4b23      	ldr	r3, [pc, #140]	; (8019a1c <_svfiprintf_r+0x1f4>)
 8019990:	bb1b      	cbnz	r3, 80199da <_svfiprintf_r+0x1b2>
 8019992:	9b03      	ldr	r3, [sp, #12]
 8019994:	3307      	adds	r3, #7
 8019996:	f023 0307 	bic.w	r3, r3, #7
 801999a:	3308      	adds	r3, #8
 801999c:	9303      	str	r3, [sp, #12]
 801999e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199a0:	4433      	add	r3, r6
 80199a2:	9309      	str	r3, [sp, #36]	; 0x24
 80199a4:	e767      	b.n	8019876 <_svfiprintf_r+0x4e>
 80199a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80199aa:	460c      	mov	r4, r1
 80199ac:	2001      	movs	r0, #1
 80199ae:	e7a5      	b.n	80198fc <_svfiprintf_r+0xd4>
 80199b0:	2300      	movs	r3, #0
 80199b2:	3401      	adds	r4, #1
 80199b4:	9305      	str	r3, [sp, #20]
 80199b6:	4619      	mov	r1, r3
 80199b8:	f04f 0c0a 	mov.w	ip, #10
 80199bc:	4620      	mov	r0, r4
 80199be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199c2:	3a30      	subs	r2, #48	; 0x30
 80199c4:	2a09      	cmp	r2, #9
 80199c6:	d903      	bls.n	80199d0 <_svfiprintf_r+0x1a8>
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d0c5      	beq.n	8019958 <_svfiprintf_r+0x130>
 80199cc:	9105      	str	r1, [sp, #20]
 80199ce:	e7c3      	b.n	8019958 <_svfiprintf_r+0x130>
 80199d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80199d4:	4604      	mov	r4, r0
 80199d6:	2301      	movs	r3, #1
 80199d8:	e7f0      	b.n	80199bc <_svfiprintf_r+0x194>
 80199da:	ab03      	add	r3, sp, #12
 80199dc:	9300      	str	r3, [sp, #0]
 80199de:	462a      	mov	r2, r5
 80199e0:	4b0f      	ldr	r3, [pc, #60]	; (8019a20 <_svfiprintf_r+0x1f8>)
 80199e2:	a904      	add	r1, sp, #16
 80199e4:	4638      	mov	r0, r7
 80199e6:	f3af 8000 	nop.w
 80199ea:	1c42      	adds	r2, r0, #1
 80199ec:	4606      	mov	r6, r0
 80199ee:	d1d6      	bne.n	801999e <_svfiprintf_r+0x176>
 80199f0:	89ab      	ldrh	r3, [r5, #12]
 80199f2:	065b      	lsls	r3, r3, #25
 80199f4:	f53f af2c 	bmi.w	8019850 <_svfiprintf_r+0x28>
 80199f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199fa:	b01d      	add	sp, #116	; 0x74
 80199fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a00:	ab03      	add	r3, sp, #12
 8019a02:	9300      	str	r3, [sp, #0]
 8019a04:	462a      	mov	r2, r5
 8019a06:	4b06      	ldr	r3, [pc, #24]	; (8019a20 <_svfiprintf_r+0x1f8>)
 8019a08:	a904      	add	r1, sp, #16
 8019a0a:	4638      	mov	r0, r7
 8019a0c:	f000 f9d4 	bl	8019db8 <_printf_i>
 8019a10:	e7eb      	b.n	80199ea <_svfiprintf_r+0x1c2>
 8019a12:	bf00      	nop
 8019a14:	0801d18a 	.word	0x0801d18a
 8019a18:	0801d194 	.word	0x0801d194
 8019a1c:	00000000 	.word	0x00000000
 8019a20:	08019771 	.word	0x08019771
 8019a24:	0801d190 	.word	0x0801d190

08019a28 <__sfputc_r>:
 8019a28:	6893      	ldr	r3, [r2, #8]
 8019a2a:	3b01      	subs	r3, #1
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	b410      	push	{r4}
 8019a30:	6093      	str	r3, [r2, #8]
 8019a32:	da08      	bge.n	8019a46 <__sfputc_r+0x1e>
 8019a34:	6994      	ldr	r4, [r2, #24]
 8019a36:	42a3      	cmp	r3, r4
 8019a38:	db01      	blt.n	8019a3e <__sfputc_r+0x16>
 8019a3a:	290a      	cmp	r1, #10
 8019a3c:	d103      	bne.n	8019a46 <__sfputc_r+0x1e>
 8019a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a42:	f7ff bbe3 	b.w	801920c <__swbuf_r>
 8019a46:	6813      	ldr	r3, [r2, #0]
 8019a48:	1c58      	adds	r0, r3, #1
 8019a4a:	6010      	str	r0, [r2, #0]
 8019a4c:	7019      	strb	r1, [r3, #0]
 8019a4e:	4608      	mov	r0, r1
 8019a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a54:	4770      	bx	lr

08019a56 <__sfputs_r>:
 8019a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a58:	4606      	mov	r6, r0
 8019a5a:	460f      	mov	r7, r1
 8019a5c:	4614      	mov	r4, r2
 8019a5e:	18d5      	adds	r5, r2, r3
 8019a60:	42ac      	cmp	r4, r5
 8019a62:	d101      	bne.n	8019a68 <__sfputs_r+0x12>
 8019a64:	2000      	movs	r0, #0
 8019a66:	e007      	b.n	8019a78 <__sfputs_r+0x22>
 8019a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a6c:	463a      	mov	r2, r7
 8019a6e:	4630      	mov	r0, r6
 8019a70:	f7ff ffda 	bl	8019a28 <__sfputc_r>
 8019a74:	1c43      	adds	r3, r0, #1
 8019a76:	d1f3      	bne.n	8019a60 <__sfputs_r+0xa>
 8019a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019a7c <_vfiprintf_r>:
 8019a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a80:	460d      	mov	r5, r1
 8019a82:	b09d      	sub	sp, #116	; 0x74
 8019a84:	4614      	mov	r4, r2
 8019a86:	4698      	mov	r8, r3
 8019a88:	4606      	mov	r6, r0
 8019a8a:	b118      	cbz	r0, 8019a94 <_vfiprintf_r+0x18>
 8019a8c:	6983      	ldr	r3, [r0, #24]
 8019a8e:	b90b      	cbnz	r3, 8019a94 <_vfiprintf_r+0x18>
 8019a90:	f7fe ffc6 	bl	8018a20 <__sinit>
 8019a94:	4b89      	ldr	r3, [pc, #548]	; (8019cbc <_vfiprintf_r+0x240>)
 8019a96:	429d      	cmp	r5, r3
 8019a98:	d11b      	bne.n	8019ad2 <_vfiprintf_r+0x56>
 8019a9a:	6875      	ldr	r5, [r6, #4]
 8019a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a9e:	07d9      	lsls	r1, r3, #31
 8019aa0:	d405      	bmi.n	8019aae <_vfiprintf_r+0x32>
 8019aa2:	89ab      	ldrh	r3, [r5, #12]
 8019aa4:	059a      	lsls	r2, r3, #22
 8019aa6:	d402      	bmi.n	8019aae <_vfiprintf_r+0x32>
 8019aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019aaa:	f7ff f87c 	bl	8018ba6 <__retarget_lock_acquire_recursive>
 8019aae:	89ab      	ldrh	r3, [r5, #12]
 8019ab0:	071b      	lsls	r3, r3, #28
 8019ab2:	d501      	bpl.n	8019ab8 <_vfiprintf_r+0x3c>
 8019ab4:	692b      	ldr	r3, [r5, #16]
 8019ab6:	b9eb      	cbnz	r3, 8019af4 <_vfiprintf_r+0x78>
 8019ab8:	4629      	mov	r1, r5
 8019aba:	4630      	mov	r0, r6
 8019abc:	f7ff fc0a 	bl	80192d4 <__swsetup_r>
 8019ac0:	b1c0      	cbz	r0, 8019af4 <_vfiprintf_r+0x78>
 8019ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ac4:	07dc      	lsls	r4, r3, #31
 8019ac6:	d50e      	bpl.n	8019ae6 <_vfiprintf_r+0x6a>
 8019ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8019acc:	b01d      	add	sp, #116	; 0x74
 8019ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ad2:	4b7b      	ldr	r3, [pc, #492]	; (8019cc0 <_vfiprintf_r+0x244>)
 8019ad4:	429d      	cmp	r5, r3
 8019ad6:	d101      	bne.n	8019adc <_vfiprintf_r+0x60>
 8019ad8:	68b5      	ldr	r5, [r6, #8]
 8019ada:	e7df      	b.n	8019a9c <_vfiprintf_r+0x20>
 8019adc:	4b79      	ldr	r3, [pc, #484]	; (8019cc4 <_vfiprintf_r+0x248>)
 8019ade:	429d      	cmp	r5, r3
 8019ae0:	bf08      	it	eq
 8019ae2:	68f5      	ldreq	r5, [r6, #12]
 8019ae4:	e7da      	b.n	8019a9c <_vfiprintf_r+0x20>
 8019ae6:	89ab      	ldrh	r3, [r5, #12]
 8019ae8:	0598      	lsls	r0, r3, #22
 8019aea:	d4ed      	bmi.n	8019ac8 <_vfiprintf_r+0x4c>
 8019aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019aee:	f7ff f85b 	bl	8018ba8 <__retarget_lock_release_recursive>
 8019af2:	e7e9      	b.n	8019ac8 <_vfiprintf_r+0x4c>
 8019af4:	2300      	movs	r3, #0
 8019af6:	9309      	str	r3, [sp, #36]	; 0x24
 8019af8:	2320      	movs	r3, #32
 8019afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b02:	2330      	movs	r3, #48	; 0x30
 8019b04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019cc8 <_vfiprintf_r+0x24c>
 8019b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b0c:	f04f 0901 	mov.w	r9, #1
 8019b10:	4623      	mov	r3, r4
 8019b12:	469a      	mov	sl, r3
 8019b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b18:	b10a      	cbz	r2, 8019b1e <_vfiprintf_r+0xa2>
 8019b1a:	2a25      	cmp	r2, #37	; 0x25
 8019b1c:	d1f9      	bne.n	8019b12 <_vfiprintf_r+0x96>
 8019b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8019b22:	d00b      	beq.n	8019b3c <_vfiprintf_r+0xc0>
 8019b24:	465b      	mov	r3, fp
 8019b26:	4622      	mov	r2, r4
 8019b28:	4629      	mov	r1, r5
 8019b2a:	4630      	mov	r0, r6
 8019b2c:	f7ff ff93 	bl	8019a56 <__sfputs_r>
 8019b30:	3001      	adds	r0, #1
 8019b32:	f000 80aa 	beq.w	8019c8a <_vfiprintf_r+0x20e>
 8019b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b38:	445a      	add	r2, fp
 8019b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8019b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	f000 80a2 	beq.w	8019c8a <_vfiprintf_r+0x20e>
 8019b46:	2300      	movs	r3, #0
 8019b48:	f04f 32ff 	mov.w	r2, #4294967295
 8019b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b50:	f10a 0a01 	add.w	sl, sl, #1
 8019b54:	9304      	str	r3, [sp, #16]
 8019b56:	9307      	str	r3, [sp, #28]
 8019b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8019b5e:	4654      	mov	r4, sl
 8019b60:	2205      	movs	r2, #5
 8019b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b66:	4858      	ldr	r0, [pc, #352]	; (8019cc8 <_vfiprintf_r+0x24c>)
 8019b68:	f7e6 fb42 	bl	80001f0 <memchr>
 8019b6c:	9a04      	ldr	r2, [sp, #16]
 8019b6e:	b9d8      	cbnz	r0, 8019ba8 <_vfiprintf_r+0x12c>
 8019b70:	06d1      	lsls	r1, r2, #27
 8019b72:	bf44      	itt	mi
 8019b74:	2320      	movmi	r3, #32
 8019b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b7a:	0713      	lsls	r3, r2, #28
 8019b7c:	bf44      	itt	mi
 8019b7e:	232b      	movmi	r3, #43	; 0x2b
 8019b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b84:	f89a 3000 	ldrb.w	r3, [sl]
 8019b88:	2b2a      	cmp	r3, #42	; 0x2a
 8019b8a:	d015      	beq.n	8019bb8 <_vfiprintf_r+0x13c>
 8019b8c:	9a07      	ldr	r2, [sp, #28]
 8019b8e:	4654      	mov	r4, sl
 8019b90:	2000      	movs	r0, #0
 8019b92:	f04f 0c0a 	mov.w	ip, #10
 8019b96:	4621      	mov	r1, r4
 8019b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b9c:	3b30      	subs	r3, #48	; 0x30
 8019b9e:	2b09      	cmp	r3, #9
 8019ba0:	d94e      	bls.n	8019c40 <_vfiprintf_r+0x1c4>
 8019ba2:	b1b0      	cbz	r0, 8019bd2 <_vfiprintf_r+0x156>
 8019ba4:	9207      	str	r2, [sp, #28]
 8019ba6:	e014      	b.n	8019bd2 <_vfiprintf_r+0x156>
 8019ba8:	eba0 0308 	sub.w	r3, r0, r8
 8019bac:	fa09 f303 	lsl.w	r3, r9, r3
 8019bb0:	4313      	orrs	r3, r2
 8019bb2:	9304      	str	r3, [sp, #16]
 8019bb4:	46a2      	mov	sl, r4
 8019bb6:	e7d2      	b.n	8019b5e <_vfiprintf_r+0xe2>
 8019bb8:	9b03      	ldr	r3, [sp, #12]
 8019bba:	1d19      	adds	r1, r3, #4
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	9103      	str	r1, [sp, #12]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	bfbb      	ittet	lt
 8019bc4:	425b      	neglt	r3, r3
 8019bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8019bca:	9307      	strge	r3, [sp, #28]
 8019bcc:	9307      	strlt	r3, [sp, #28]
 8019bce:	bfb8      	it	lt
 8019bd0:	9204      	strlt	r2, [sp, #16]
 8019bd2:	7823      	ldrb	r3, [r4, #0]
 8019bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8019bd6:	d10c      	bne.n	8019bf2 <_vfiprintf_r+0x176>
 8019bd8:	7863      	ldrb	r3, [r4, #1]
 8019bda:	2b2a      	cmp	r3, #42	; 0x2a
 8019bdc:	d135      	bne.n	8019c4a <_vfiprintf_r+0x1ce>
 8019bde:	9b03      	ldr	r3, [sp, #12]
 8019be0:	1d1a      	adds	r2, r3, #4
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	9203      	str	r2, [sp, #12]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	bfb8      	it	lt
 8019bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8019bee:	3402      	adds	r4, #2
 8019bf0:	9305      	str	r3, [sp, #20]
 8019bf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019cd8 <_vfiprintf_r+0x25c>
 8019bf6:	7821      	ldrb	r1, [r4, #0]
 8019bf8:	2203      	movs	r2, #3
 8019bfa:	4650      	mov	r0, sl
 8019bfc:	f7e6 faf8 	bl	80001f0 <memchr>
 8019c00:	b140      	cbz	r0, 8019c14 <_vfiprintf_r+0x198>
 8019c02:	2340      	movs	r3, #64	; 0x40
 8019c04:	eba0 000a 	sub.w	r0, r0, sl
 8019c08:	fa03 f000 	lsl.w	r0, r3, r0
 8019c0c:	9b04      	ldr	r3, [sp, #16]
 8019c0e:	4303      	orrs	r3, r0
 8019c10:	3401      	adds	r4, #1
 8019c12:	9304      	str	r3, [sp, #16]
 8019c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c18:	482c      	ldr	r0, [pc, #176]	; (8019ccc <_vfiprintf_r+0x250>)
 8019c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c1e:	2206      	movs	r2, #6
 8019c20:	f7e6 fae6 	bl	80001f0 <memchr>
 8019c24:	2800      	cmp	r0, #0
 8019c26:	d03f      	beq.n	8019ca8 <_vfiprintf_r+0x22c>
 8019c28:	4b29      	ldr	r3, [pc, #164]	; (8019cd0 <_vfiprintf_r+0x254>)
 8019c2a:	bb1b      	cbnz	r3, 8019c74 <_vfiprintf_r+0x1f8>
 8019c2c:	9b03      	ldr	r3, [sp, #12]
 8019c2e:	3307      	adds	r3, #7
 8019c30:	f023 0307 	bic.w	r3, r3, #7
 8019c34:	3308      	adds	r3, #8
 8019c36:	9303      	str	r3, [sp, #12]
 8019c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c3a:	443b      	add	r3, r7
 8019c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c3e:	e767      	b.n	8019b10 <_vfiprintf_r+0x94>
 8019c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c44:	460c      	mov	r4, r1
 8019c46:	2001      	movs	r0, #1
 8019c48:	e7a5      	b.n	8019b96 <_vfiprintf_r+0x11a>
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	3401      	adds	r4, #1
 8019c4e:	9305      	str	r3, [sp, #20]
 8019c50:	4619      	mov	r1, r3
 8019c52:	f04f 0c0a 	mov.w	ip, #10
 8019c56:	4620      	mov	r0, r4
 8019c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c5c:	3a30      	subs	r2, #48	; 0x30
 8019c5e:	2a09      	cmp	r2, #9
 8019c60:	d903      	bls.n	8019c6a <_vfiprintf_r+0x1ee>
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d0c5      	beq.n	8019bf2 <_vfiprintf_r+0x176>
 8019c66:	9105      	str	r1, [sp, #20]
 8019c68:	e7c3      	b.n	8019bf2 <_vfiprintf_r+0x176>
 8019c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c6e:	4604      	mov	r4, r0
 8019c70:	2301      	movs	r3, #1
 8019c72:	e7f0      	b.n	8019c56 <_vfiprintf_r+0x1da>
 8019c74:	ab03      	add	r3, sp, #12
 8019c76:	9300      	str	r3, [sp, #0]
 8019c78:	462a      	mov	r2, r5
 8019c7a:	4b16      	ldr	r3, [pc, #88]	; (8019cd4 <_vfiprintf_r+0x258>)
 8019c7c:	a904      	add	r1, sp, #16
 8019c7e:	4630      	mov	r0, r6
 8019c80:	f3af 8000 	nop.w
 8019c84:	4607      	mov	r7, r0
 8019c86:	1c78      	adds	r0, r7, #1
 8019c88:	d1d6      	bne.n	8019c38 <_vfiprintf_r+0x1bc>
 8019c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c8c:	07d9      	lsls	r1, r3, #31
 8019c8e:	d405      	bmi.n	8019c9c <_vfiprintf_r+0x220>
 8019c90:	89ab      	ldrh	r3, [r5, #12]
 8019c92:	059a      	lsls	r2, r3, #22
 8019c94:	d402      	bmi.n	8019c9c <_vfiprintf_r+0x220>
 8019c96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c98:	f7fe ff86 	bl	8018ba8 <__retarget_lock_release_recursive>
 8019c9c:	89ab      	ldrh	r3, [r5, #12]
 8019c9e:	065b      	lsls	r3, r3, #25
 8019ca0:	f53f af12 	bmi.w	8019ac8 <_vfiprintf_r+0x4c>
 8019ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ca6:	e711      	b.n	8019acc <_vfiprintf_r+0x50>
 8019ca8:	ab03      	add	r3, sp, #12
 8019caa:	9300      	str	r3, [sp, #0]
 8019cac:	462a      	mov	r2, r5
 8019cae:	4b09      	ldr	r3, [pc, #36]	; (8019cd4 <_vfiprintf_r+0x258>)
 8019cb0:	a904      	add	r1, sp, #16
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	f000 f880 	bl	8019db8 <_printf_i>
 8019cb8:	e7e4      	b.n	8019c84 <_vfiprintf_r+0x208>
 8019cba:	bf00      	nop
 8019cbc:	0801d098 	.word	0x0801d098
 8019cc0:	0801d0b8 	.word	0x0801d0b8
 8019cc4:	0801d078 	.word	0x0801d078
 8019cc8:	0801d18a 	.word	0x0801d18a
 8019ccc:	0801d194 	.word	0x0801d194
 8019cd0:	00000000 	.word	0x00000000
 8019cd4:	08019a57 	.word	0x08019a57
 8019cd8:	0801d190 	.word	0x0801d190

08019cdc <_printf_common>:
 8019cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ce0:	4616      	mov	r6, r2
 8019ce2:	4699      	mov	r9, r3
 8019ce4:	688a      	ldr	r2, [r1, #8]
 8019ce6:	690b      	ldr	r3, [r1, #16]
 8019ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019cec:	4293      	cmp	r3, r2
 8019cee:	bfb8      	it	lt
 8019cf0:	4613      	movlt	r3, r2
 8019cf2:	6033      	str	r3, [r6, #0]
 8019cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019cf8:	4607      	mov	r7, r0
 8019cfa:	460c      	mov	r4, r1
 8019cfc:	b10a      	cbz	r2, 8019d02 <_printf_common+0x26>
 8019cfe:	3301      	adds	r3, #1
 8019d00:	6033      	str	r3, [r6, #0]
 8019d02:	6823      	ldr	r3, [r4, #0]
 8019d04:	0699      	lsls	r1, r3, #26
 8019d06:	bf42      	ittt	mi
 8019d08:	6833      	ldrmi	r3, [r6, #0]
 8019d0a:	3302      	addmi	r3, #2
 8019d0c:	6033      	strmi	r3, [r6, #0]
 8019d0e:	6825      	ldr	r5, [r4, #0]
 8019d10:	f015 0506 	ands.w	r5, r5, #6
 8019d14:	d106      	bne.n	8019d24 <_printf_common+0x48>
 8019d16:	f104 0a19 	add.w	sl, r4, #25
 8019d1a:	68e3      	ldr	r3, [r4, #12]
 8019d1c:	6832      	ldr	r2, [r6, #0]
 8019d1e:	1a9b      	subs	r3, r3, r2
 8019d20:	42ab      	cmp	r3, r5
 8019d22:	dc26      	bgt.n	8019d72 <_printf_common+0x96>
 8019d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019d28:	1e13      	subs	r3, r2, #0
 8019d2a:	6822      	ldr	r2, [r4, #0]
 8019d2c:	bf18      	it	ne
 8019d2e:	2301      	movne	r3, #1
 8019d30:	0692      	lsls	r2, r2, #26
 8019d32:	d42b      	bmi.n	8019d8c <_printf_common+0xb0>
 8019d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d38:	4649      	mov	r1, r9
 8019d3a:	4638      	mov	r0, r7
 8019d3c:	47c0      	blx	r8
 8019d3e:	3001      	adds	r0, #1
 8019d40:	d01e      	beq.n	8019d80 <_printf_common+0xa4>
 8019d42:	6823      	ldr	r3, [r4, #0]
 8019d44:	68e5      	ldr	r5, [r4, #12]
 8019d46:	6832      	ldr	r2, [r6, #0]
 8019d48:	f003 0306 	and.w	r3, r3, #6
 8019d4c:	2b04      	cmp	r3, #4
 8019d4e:	bf08      	it	eq
 8019d50:	1aad      	subeq	r5, r5, r2
 8019d52:	68a3      	ldr	r3, [r4, #8]
 8019d54:	6922      	ldr	r2, [r4, #16]
 8019d56:	bf0c      	ite	eq
 8019d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d5c:	2500      	movne	r5, #0
 8019d5e:	4293      	cmp	r3, r2
 8019d60:	bfc4      	itt	gt
 8019d62:	1a9b      	subgt	r3, r3, r2
 8019d64:	18ed      	addgt	r5, r5, r3
 8019d66:	2600      	movs	r6, #0
 8019d68:	341a      	adds	r4, #26
 8019d6a:	42b5      	cmp	r5, r6
 8019d6c:	d11a      	bne.n	8019da4 <_printf_common+0xc8>
 8019d6e:	2000      	movs	r0, #0
 8019d70:	e008      	b.n	8019d84 <_printf_common+0xa8>
 8019d72:	2301      	movs	r3, #1
 8019d74:	4652      	mov	r2, sl
 8019d76:	4649      	mov	r1, r9
 8019d78:	4638      	mov	r0, r7
 8019d7a:	47c0      	blx	r8
 8019d7c:	3001      	adds	r0, #1
 8019d7e:	d103      	bne.n	8019d88 <_printf_common+0xac>
 8019d80:	f04f 30ff 	mov.w	r0, #4294967295
 8019d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d88:	3501      	adds	r5, #1
 8019d8a:	e7c6      	b.n	8019d1a <_printf_common+0x3e>
 8019d8c:	18e1      	adds	r1, r4, r3
 8019d8e:	1c5a      	adds	r2, r3, #1
 8019d90:	2030      	movs	r0, #48	; 0x30
 8019d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019d96:	4422      	add	r2, r4
 8019d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019da0:	3302      	adds	r3, #2
 8019da2:	e7c7      	b.n	8019d34 <_printf_common+0x58>
 8019da4:	2301      	movs	r3, #1
 8019da6:	4622      	mov	r2, r4
 8019da8:	4649      	mov	r1, r9
 8019daa:	4638      	mov	r0, r7
 8019dac:	47c0      	blx	r8
 8019dae:	3001      	adds	r0, #1
 8019db0:	d0e6      	beq.n	8019d80 <_printf_common+0xa4>
 8019db2:	3601      	adds	r6, #1
 8019db4:	e7d9      	b.n	8019d6a <_printf_common+0x8e>
	...

08019db8 <_printf_i>:
 8019db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019dbc:	7e0f      	ldrb	r7, [r1, #24]
 8019dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019dc0:	2f78      	cmp	r7, #120	; 0x78
 8019dc2:	4691      	mov	r9, r2
 8019dc4:	4680      	mov	r8, r0
 8019dc6:	460c      	mov	r4, r1
 8019dc8:	469a      	mov	sl, r3
 8019dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019dce:	d807      	bhi.n	8019de0 <_printf_i+0x28>
 8019dd0:	2f62      	cmp	r7, #98	; 0x62
 8019dd2:	d80a      	bhi.n	8019dea <_printf_i+0x32>
 8019dd4:	2f00      	cmp	r7, #0
 8019dd6:	f000 80d8 	beq.w	8019f8a <_printf_i+0x1d2>
 8019dda:	2f58      	cmp	r7, #88	; 0x58
 8019ddc:	f000 80a3 	beq.w	8019f26 <_printf_i+0x16e>
 8019de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019de8:	e03a      	b.n	8019e60 <_printf_i+0xa8>
 8019dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019dee:	2b15      	cmp	r3, #21
 8019df0:	d8f6      	bhi.n	8019de0 <_printf_i+0x28>
 8019df2:	a101      	add	r1, pc, #4	; (adr r1, 8019df8 <_printf_i+0x40>)
 8019df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019df8:	08019e51 	.word	0x08019e51
 8019dfc:	08019e65 	.word	0x08019e65
 8019e00:	08019de1 	.word	0x08019de1
 8019e04:	08019de1 	.word	0x08019de1
 8019e08:	08019de1 	.word	0x08019de1
 8019e0c:	08019de1 	.word	0x08019de1
 8019e10:	08019e65 	.word	0x08019e65
 8019e14:	08019de1 	.word	0x08019de1
 8019e18:	08019de1 	.word	0x08019de1
 8019e1c:	08019de1 	.word	0x08019de1
 8019e20:	08019de1 	.word	0x08019de1
 8019e24:	08019f71 	.word	0x08019f71
 8019e28:	08019e95 	.word	0x08019e95
 8019e2c:	08019f53 	.word	0x08019f53
 8019e30:	08019de1 	.word	0x08019de1
 8019e34:	08019de1 	.word	0x08019de1
 8019e38:	08019f93 	.word	0x08019f93
 8019e3c:	08019de1 	.word	0x08019de1
 8019e40:	08019e95 	.word	0x08019e95
 8019e44:	08019de1 	.word	0x08019de1
 8019e48:	08019de1 	.word	0x08019de1
 8019e4c:	08019f5b 	.word	0x08019f5b
 8019e50:	682b      	ldr	r3, [r5, #0]
 8019e52:	1d1a      	adds	r2, r3, #4
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	602a      	str	r2, [r5, #0]
 8019e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e60:	2301      	movs	r3, #1
 8019e62:	e0a3      	b.n	8019fac <_printf_i+0x1f4>
 8019e64:	6820      	ldr	r0, [r4, #0]
 8019e66:	6829      	ldr	r1, [r5, #0]
 8019e68:	0606      	lsls	r6, r0, #24
 8019e6a:	f101 0304 	add.w	r3, r1, #4
 8019e6e:	d50a      	bpl.n	8019e86 <_printf_i+0xce>
 8019e70:	680e      	ldr	r6, [r1, #0]
 8019e72:	602b      	str	r3, [r5, #0]
 8019e74:	2e00      	cmp	r6, #0
 8019e76:	da03      	bge.n	8019e80 <_printf_i+0xc8>
 8019e78:	232d      	movs	r3, #45	; 0x2d
 8019e7a:	4276      	negs	r6, r6
 8019e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e80:	485e      	ldr	r0, [pc, #376]	; (8019ffc <_printf_i+0x244>)
 8019e82:	230a      	movs	r3, #10
 8019e84:	e019      	b.n	8019eba <_printf_i+0x102>
 8019e86:	680e      	ldr	r6, [r1, #0]
 8019e88:	602b      	str	r3, [r5, #0]
 8019e8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019e8e:	bf18      	it	ne
 8019e90:	b236      	sxthne	r6, r6
 8019e92:	e7ef      	b.n	8019e74 <_printf_i+0xbc>
 8019e94:	682b      	ldr	r3, [r5, #0]
 8019e96:	6820      	ldr	r0, [r4, #0]
 8019e98:	1d19      	adds	r1, r3, #4
 8019e9a:	6029      	str	r1, [r5, #0]
 8019e9c:	0601      	lsls	r1, r0, #24
 8019e9e:	d501      	bpl.n	8019ea4 <_printf_i+0xec>
 8019ea0:	681e      	ldr	r6, [r3, #0]
 8019ea2:	e002      	b.n	8019eaa <_printf_i+0xf2>
 8019ea4:	0646      	lsls	r6, r0, #25
 8019ea6:	d5fb      	bpl.n	8019ea0 <_printf_i+0xe8>
 8019ea8:	881e      	ldrh	r6, [r3, #0]
 8019eaa:	4854      	ldr	r0, [pc, #336]	; (8019ffc <_printf_i+0x244>)
 8019eac:	2f6f      	cmp	r7, #111	; 0x6f
 8019eae:	bf0c      	ite	eq
 8019eb0:	2308      	moveq	r3, #8
 8019eb2:	230a      	movne	r3, #10
 8019eb4:	2100      	movs	r1, #0
 8019eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019eba:	6865      	ldr	r5, [r4, #4]
 8019ebc:	60a5      	str	r5, [r4, #8]
 8019ebe:	2d00      	cmp	r5, #0
 8019ec0:	bfa2      	ittt	ge
 8019ec2:	6821      	ldrge	r1, [r4, #0]
 8019ec4:	f021 0104 	bicge.w	r1, r1, #4
 8019ec8:	6021      	strge	r1, [r4, #0]
 8019eca:	b90e      	cbnz	r6, 8019ed0 <_printf_i+0x118>
 8019ecc:	2d00      	cmp	r5, #0
 8019ece:	d04d      	beq.n	8019f6c <_printf_i+0x1b4>
 8019ed0:	4615      	mov	r5, r2
 8019ed2:	fbb6 f1f3 	udiv	r1, r6, r3
 8019ed6:	fb03 6711 	mls	r7, r3, r1, r6
 8019eda:	5dc7      	ldrb	r7, [r0, r7]
 8019edc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ee0:	4637      	mov	r7, r6
 8019ee2:	42bb      	cmp	r3, r7
 8019ee4:	460e      	mov	r6, r1
 8019ee6:	d9f4      	bls.n	8019ed2 <_printf_i+0x11a>
 8019ee8:	2b08      	cmp	r3, #8
 8019eea:	d10b      	bne.n	8019f04 <_printf_i+0x14c>
 8019eec:	6823      	ldr	r3, [r4, #0]
 8019eee:	07de      	lsls	r6, r3, #31
 8019ef0:	d508      	bpl.n	8019f04 <_printf_i+0x14c>
 8019ef2:	6923      	ldr	r3, [r4, #16]
 8019ef4:	6861      	ldr	r1, [r4, #4]
 8019ef6:	4299      	cmp	r1, r3
 8019ef8:	bfde      	ittt	le
 8019efa:	2330      	movle	r3, #48	; 0x30
 8019efc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019f00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019f04:	1b52      	subs	r2, r2, r5
 8019f06:	6122      	str	r2, [r4, #16]
 8019f08:	f8cd a000 	str.w	sl, [sp]
 8019f0c:	464b      	mov	r3, r9
 8019f0e:	aa03      	add	r2, sp, #12
 8019f10:	4621      	mov	r1, r4
 8019f12:	4640      	mov	r0, r8
 8019f14:	f7ff fee2 	bl	8019cdc <_printf_common>
 8019f18:	3001      	adds	r0, #1
 8019f1a:	d14c      	bne.n	8019fb6 <_printf_i+0x1fe>
 8019f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f20:	b004      	add	sp, #16
 8019f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f26:	4835      	ldr	r0, [pc, #212]	; (8019ffc <_printf_i+0x244>)
 8019f28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019f2c:	6829      	ldr	r1, [r5, #0]
 8019f2e:	6823      	ldr	r3, [r4, #0]
 8019f30:	f851 6b04 	ldr.w	r6, [r1], #4
 8019f34:	6029      	str	r1, [r5, #0]
 8019f36:	061d      	lsls	r5, r3, #24
 8019f38:	d514      	bpl.n	8019f64 <_printf_i+0x1ac>
 8019f3a:	07df      	lsls	r7, r3, #31
 8019f3c:	bf44      	itt	mi
 8019f3e:	f043 0320 	orrmi.w	r3, r3, #32
 8019f42:	6023      	strmi	r3, [r4, #0]
 8019f44:	b91e      	cbnz	r6, 8019f4e <_printf_i+0x196>
 8019f46:	6823      	ldr	r3, [r4, #0]
 8019f48:	f023 0320 	bic.w	r3, r3, #32
 8019f4c:	6023      	str	r3, [r4, #0]
 8019f4e:	2310      	movs	r3, #16
 8019f50:	e7b0      	b.n	8019eb4 <_printf_i+0xfc>
 8019f52:	6823      	ldr	r3, [r4, #0]
 8019f54:	f043 0320 	orr.w	r3, r3, #32
 8019f58:	6023      	str	r3, [r4, #0]
 8019f5a:	2378      	movs	r3, #120	; 0x78
 8019f5c:	4828      	ldr	r0, [pc, #160]	; (801a000 <_printf_i+0x248>)
 8019f5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019f62:	e7e3      	b.n	8019f2c <_printf_i+0x174>
 8019f64:	0659      	lsls	r1, r3, #25
 8019f66:	bf48      	it	mi
 8019f68:	b2b6      	uxthmi	r6, r6
 8019f6a:	e7e6      	b.n	8019f3a <_printf_i+0x182>
 8019f6c:	4615      	mov	r5, r2
 8019f6e:	e7bb      	b.n	8019ee8 <_printf_i+0x130>
 8019f70:	682b      	ldr	r3, [r5, #0]
 8019f72:	6826      	ldr	r6, [r4, #0]
 8019f74:	6961      	ldr	r1, [r4, #20]
 8019f76:	1d18      	adds	r0, r3, #4
 8019f78:	6028      	str	r0, [r5, #0]
 8019f7a:	0635      	lsls	r5, r6, #24
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	d501      	bpl.n	8019f84 <_printf_i+0x1cc>
 8019f80:	6019      	str	r1, [r3, #0]
 8019f82:	e002      	b.n	8019f8a <_printf_i+0x1d2>
 8019f84:	0670      	lsls	r0, r6, #25
 8019f86:	d5fb      	bpl.n	8019f80 <_printf_i+0x1c8>
 8019f88:	8019      	strh	r1, [r3, #0]
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	6123      	str	r3, [r4, #16]
 8019f8e:	4615      	mov	r5, r2
 8019f90:	e7ba      	b.n	8019f08 <_printf_i+0x150>
 8019f92:	682b      	ldr	r3, [r5, #0]
 8019f94:	1d1a      	adds	r2, r3, #4
 8019f96:	602a      	str	r2, [r5, #0]
 8019f98:	681d      	ldr	r5, [r3, #0]
 8019f9a:	6862      	ldr	r2, [r4, #4]
 8019f9c:	2100      	movs	r1, #0
 8019f9e:	4628      	mov	r0, r5
 8019fa0:	f7e6 f926 	bl	80001f0 <memchr>
 8019fa4:	b108      	cbz	r0, 8019faa <_printf_i+0x1f2>
 8019fa6:	1b40      	subs	r0, r0, r5
 8019fa8:	6060      	str	r0, [r4, #4]
 8019faa:	6863      	ldr	r3, [r4, #4]
 8019fac:	6123      	str	r3, [r4, #16]
 8019fae:	2300      	movs	r3, #0
 8019fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fb4:	e7a8      	b.n	8019f08 <_printf_i+0x150>
 8019fb6:	6923      	ldr	r3, [r4, #16]
 8019fb8:	462a      	mov	r2, r5
 8019fba:	4649      	mov	r1, r9
 8019fbc:	4640      	mov	r0, r8
 8019fbe:	47d0      	blx	sl
 8019fc0:	3001      	adds	r0, #1
 8019fc2:	d0ab      	beq.n	8019f1c <_printf_i+0x164>
 8019fc4:	6823      	ldr	r3, [r4, #0]
 8019fc6:	079b      	lsls	r3, r3, #30
 8019fc8:	d413      	bmi.n	8019ff2 <_printf_i+0x23a>
 8019fca:	68e0      	ldr	r0, [r4, #12]
 8019fcc:	9b03      	ldr	r3, [sp, #12]
 8019fce:	4298      	cmp	r0, r3
 8019fd0:	bfb8      	it	lt
 8019fd2:	4618      	movlt	r0, r3
 8019fd4:	e7a4      	b.n	8019f20 <_printf_i+0x168>
 8019fd6:	2301      	movs	r3, #1
 8019fd8:	4632      	mov	r2, r6
 8019fda:	4649      	mov	r1, r9
 8019fdc:	4640      	mov	r0, r8
 8019fde:	47d0      	blx	sl
 8019fe0:	3001      	adds	r0, #1
 8019fe2:	d09b      	beq.n	8019f1c <_printf_i+0x164>
 8019fe4:	3501      	adds	r5, #1
 8019fe6:	68e3      	ldr	r3, [r4, #12]
 8019fe8:	9903      	ldr	r1, [sp, #12]
 8019fea:	1a5b      	subs	r3, r3, r1
 8019fec:	42ab      	cmp	r3, r5
 8019fee:	dcf2      	bgt.n	8019fd6 <_printf_i+0x21e>
 8019ff0:	e7eb      	b.n	8019fca <_printf_i+0x212>
 8019ff2:	2500      	movs	r5, #0
 8019ff4:	f104 0619 	add.w	r6, r4, #25
 8019ff8:	e7f5      	b.n	8019fe6 <_printf_i+0x22e>
 8019ffa:	bf00      	nop
 8019ffc:	0801d19b 	.word	0x0801d19b
 801a000:	0801d1ac 	.word	0x0801d1ac

0801a004 <_read_r>:
 801a004:	b538      	push	{r3, r4, r5, lr}
 801a006:	4d07      	ldr	r5, [pc, #28]	; (801a024 <_read_r+0x20>)
 801a008:	4604      	mov	r4, r0
 801a00a:	4608      	mov	r0, r1
 801a00c:	4611      	mov	r1, r2
 801a00e:	2200      	movs	r2, #0
 801a010:	602a      	str	r2, [r5, #0]
 801a012:	461a      	mov	r2, r3
 801a014:	f7e8 fa44 	bl	80024a0 <_read>
 801a018:	1c43      	adds	r3, r0, #1
 801a01a:	d102      	bne.n	801a022 <_read_r+0x1e>
 801a01c:	682b      	ldr	r3, [r5, #0]
 801a01e:	b103      	cbz	r3, 801a022 <_read_r+0x1e>
 801a020:	6023      	str	r3, [r4, #0]
 801a022:	bd38      	pop	{r3, r4, r5, pc}
 801a024:	2000daf4 	.word	0x2000daf4

0801a028 <abort>:
 801a028:	b508      	push	{r3, lr}
 801a02a:	2006      	movs	r0, #6
 801a02c:	f000 f87e 	bl	801a12c <raise>
 801a030:	2001      	movs	r0, #1
 801a032:	f7e8 fa2b 	bl	800248c <_exit>
	...

0801a038 <_fstat_r>:
 801a038:	b538      	push	{r3, r4, r5, lr}
 801a03a:	4d07      	ldr	r5, [pc, #28]	; (801a058 <_fstat_r+0x20>)
 801a03c:	2300      	movs	r3, #0
 801a03e:	4604      	mov	r4, r0
 801a040:	4608      	mov	r0, r1
 801a042:	4611      	mov	r1, r2
 801a044:	602b      	str	r3, [r5, #0]
 801a046:	f7e8 fa70 	bl	800252a <_fstat>
 801a04a:	1c43      	adds	r3, r0, #1
 801a04c:	d102      	bne.n	801a054 <_fstat_r+0x1c>
 801a04e:	682b      	ldr	r3, [r5, #0]
 801a050:	b103      	cbz	r3, 801a054 <_fstat_r+0x1c>
 801a052:	6023      	str	r3, [r4, #0]
 801a054:	bd38      	pop	{r3, r4, r5, pc}
 801a056:	bf00      	nop
 801a058:	2000daf4 	.word	0x2000daf4

0801a05c <_isatty_r>:
 801a05c:	b538      	push	{r3, r4, r5, lr}
 801a05e:	4d06      	ldr	r5, [pc, #24]	; (801a078 <_isatty_r+0x1c>)
 801a060:	2300      	movs	r3, #0
 801a062:	4604      	mov	r4, r0
 801a064:	4608      	mov	r0, r1
 801a066:	602b      	str	r3, [r5, #0]
 801a068:	f7e8 fa6f 	bl	800254a <_isatty>
 801a06c:	1c43      	adds	r3, r0, #1
 801a06e:	d102      	bne.n	801a076 <_isatty_r+0x1a>
 801a070:	682b      	ldr	r3, [r5, #0]
 801a072:	b103      	cbz	r3, 801a076 <_isatty_r+0x1a>
 801a074:	6023      	str	r3, [r4, #0]
 801a076:	bd38      	pop	{r3, r4, r5, pc}
 801a078:	2000daf4 	.word	0x2000daf4

0801a07c <_realloc_r>:
 801a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a080:	4680      	mov	r8, r0
 801a082:	4614      	mov	r4, r2
 801a084:	460e      	mov	r6, r1
 801a086:	b921      	cbnz	r1, 801a092 <_realloc_r+0x16>
 801a088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a08c:	4611      	mov	r1, r2
 801a08e:	f7fe bded 	b.w	8018c6c <_malloc_r>
 801a092:	b92a      	cbnz	r2, 801a0a0 <_realloc_r+0x24>
 801a094:	f7ff fb20 	bl	80196d8 <_free_r>
 801a098:	4625      	mov	r5, r4
 801a09a:	4628      	mov	r0, r5
 801a09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0a0:	f000 f860 	bl	801a164 <_malloc_usable_size_r>
 801a0a4:	4284      	cmp	r4, r0
 801a0a6:	4607      	mov	r7, r0
 801a0a8:	d802      	bhi.n	801a0b0 <_realloc_r+0x34>
 801a0aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a0ae:	d812      	bhi.n	801a0d6 <_realloc_r+0x5a>
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	4640      	mov	r0, r8
 801a0b4:	f7fe fdda 	bl	8018c6c <_malloc_r>
 801a0b8:	4605      	mov	r5, r0
 801a0ba:	2800      	cmp	r0, #0
 801a0bc:	d0ed      	beq.n	801a09a <_realloc_r+0x1e>
 801a0be:	42bc      	cmp	r4, r7
 801a0c0:	4622      	mov	r2, r4
 801a0c2:	4631      	mov	r1, r6
 801a0c4:	bf28      	it	cs
 801a0c6:	463a      	movcs	r2, r7
 801a0c8:	f7fe fd7f 	bl	8018bca <memcpy>
 801a0cc:	4631      	mov	r1, r6
 801a0ce:	4640      	mov	r0, r8
 801a0d0:	f7ff fb02 	bl	80196d8 <_free_r>
 801a0d4:	e7e1      	b.n	801a09a <_realloc_r+0x1e>
 801a0d6:	4635      	mov	r5, r6
 801a0d8:	e7df      	b.n	801a09a <_realloc_r+0x1e>

0801a0da <_raise_r>:
 801a0da:	291f      	cmp	r1, #31
 801a0dc:	b538      	push	{r3, r4, r5, lr}
 801a0de:	4604      	mov	r4, r0
 801a0e0:	460d      	mov	r5, r1
 801a0e2:	d904      	bls.n	801a0ee <_raise_r+0x14>
 801a0e4:	2316      	movs	r3, #22
 801a0e6:	6003      	str	r3, [r0, #0]
 801a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0ec:	bd38      	pop	{r3, r4, r5, pc}
 801a0ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a0f0:	b112      	cbz	r2, 801a0f8 <_raise_r+0x1e>
 801a0f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a0f6:	b94b      	cbnz	r3, 801a10c <_raise_r+0x32>
 801a0f8:	4620      	mov	r0, r4
 801a0fa:	f000 f831 	bl	801a160 <_getpid_r>
 801a0fe:	462a      	mov	r2, r5
 801a100:	4601      	mov	r1, r0
 801a102:	4620      	mov	r0, r4
 801a104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a108:	f000 b818 	b.w	801a13c <_kill_r>
 801a10c:	2b01      	cmp	r3, #1
 801a10e:	d00a      	beq.n	801a126 <_raise_r+0x4c>
 801a110:	1c59      	adds	r1, r3, #1
 801a112:	d103      	bne.n	801a11c <_raise_r+0x42>
 801a114:	2316      	movs	r3, #22
 801a116:	6003      	str	r3, [r0, #0]
 801a118:	2001      	movs	r0, #1
 801a11a:	e7e7      	b.n	801a0ec <_raise_r+0x12>
 801a11c:	2400      	movs	r4, #0
 801a11e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a122:	4628      	mov	r0, r5
 801a124:	4798      	blx	r3
 801a126:	2000      	movs	r0, #0
 801a128:	e7e0      	b.n	801a0ec <_raise_r+0x12>
	...

0801a12c <raise>:
 801a12c:	4b02      	ldr	r3, [pc, #8]	; (801a138 <raise+0xc>)
 801a12e:	4601      	mov	r1, r0
 801a130:	6818      	ldr	r0, [r3, #0]
 801a132:	f7ff bfd2 	b.w	801a0da <_raise_r>
 801a136:	bf00      	nop
 801a138:	2000009c 	.word	0x2000009c

0801a13c <_kill_r>:
 801a13c:	b538      	push	{r3, r4, r5, lr}
 801a13e:	4d07      	ldr	r5, [pc, #28]	; (801a15c <_kill_r+0x20>)
 801a140:	2300      	movs	r3, #0
 801a142:	4604      	mov	r4, r0
 801a144:	4608      	mov	r0, r1
 801a146:	4611      	mov	r1, r2
 801a148:	602b      	str	r3, [r5, #0]
 801a14a:	f7e8 f98d 	bl	8002468 <_kill>
 801a14e:	1c43      	adds	r3, r0, #1
 801a150:	d102      	bne.n	801a158 <_kill_r+0x1c>
 801a152:	682b      	ldr	r3, [r5, #0]
 801a154:	b103      	cbz	r3, 801a158 <_kill_r+0x1c>
 801a156:	6023      	str	r3, [r4, #0]
 801a158:	bd38      	pop	{r3, r4, r5, pc}
 801a15a:	bf00      	nop
 801a15c:	2000daf4 	.word	0x2000daf4

0801a160 <_getpid_r>:
 801a160:	f7e8 b97a 	b.w	8002458 <_getpid>

0801a164 <_malloc_usable_size_r>:
 801a164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a168:	1f18      	subs	r0, r3, #4
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	bfbc      	itt	lt
 801a16e:	580b      	ldrlt	r3, [r1, r0]
 801a170:	18c0      	addlt	r0, r0, r3
 801a172:	4770      	bx	lr

0801a174 <_init>:
 801a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a176:	bf00      	nop
 801a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a17a:	bc08      	pop	{r3}
 801a17c:	469e      	mov	lr, r3
 801a17e:	4770      	bx	lr

0801a180 <_fini>:
 801a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a182:	bf00      	nop
 801a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a186:	bc08      	pop	{r3}
 801a188:	469e      	mov	lr, r3
 801a18a:	4770      	bx	lr
