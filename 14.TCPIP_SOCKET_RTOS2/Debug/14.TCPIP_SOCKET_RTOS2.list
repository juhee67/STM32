
14.TCPIP_SOCKET_RTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003054  0801acb0  0801acb0  0002acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd04  0801dd04  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801dd04  0801dd04  0002dd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd0c  0801dd0c  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dd0c  0801dd0c  0002dd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd10  0801dd10  0002dd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0801dd14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301d0  2**0
                  CONTENTS
 10 .bss          0000da38  200001d0  200001d0  000301d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000dc08  2000dc08  000301d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040425  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000984f  00000000  00000000  00070625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f58  00000000  00000000  00079e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d10  00000000  00000000  0007cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a0c2  00000000  00000000  0007fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000481ba  00000000  00000000  000b9ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118e3e  00000000  00000000  00101d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0021ab9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d000  00000000  00000000  0021abec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ac98 	.word	0x0801ac98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	0801ac98 	.word	0x0801ac98

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <get_button>:
	}
}
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
 80005b0:	4613      	mov	r3, r2
 80005b2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f004 ff65 	bl	8005488 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10d      	bne.n	80005e4 <get_button+0x40>
 80005c8:	787b      	ldrb	r3, [r7, #1]
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <get_button+0x6c>)
 80005cc:	5cd3      	ldrb	r3, [r2, r3]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d108      	bne.n	80005e4 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 80005d2:	2050      	movs	r0, #80	; 0x50
 80005d4:	f002 fd38 	bl	8003048 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 80005d8:	787b      	ldrb	r3, [r7, #1]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <get_button+0x6c>)
 80005dc:	2100      	movs	r1, #0
 80005de:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 80005e0:	2301      	movs	r3, #1
 80005e2:	e011      	b.n	8000608 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d10d      	bne.n	8000606 <get_button+0x62>
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <get_button+0x6c>)
 80005ee:	5cd3      	ldrb	r3, [r2, r3]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d108      	bne.n	8000606 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 80005f4:	201e      	movs	r0, #30
 80005f6:	f002 fd27 	bl	8003048 <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 80005fa:	787b      	ldrb	r3, [r7, #1]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <get_button+0x6c>)
 80005fe:	2101      	movs	r1, #1
 8000600:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000004 	.word	0x20000004

08000614 <init_dotmatrix>:
// 초기화 작업
// 1. display_data에 number_data[0]에 있는 내용 복사
// 2. number_data를 scroll_buffer에 복사
// 3. dotmatrix의 led를 off
void init_dotmatrix(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e00f      	b.n	8000640 <init_dotmatrix+0x2c>
	{
		display_data[i] = number_data[i];
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <init_dotmatrix+0xb4>)
 800062c:	4413      	add	r3, r2
 800062e:	b2d9      	uxtb	r1, r3
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <init_dotmatrix+0xb8>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	460a      	mov	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 8; i++)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3301      	adds	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b07      	cmp	r3, #7
 8000644:	ddec      	ble.n	8000620 <init_dotmatrix+0xc>
	}
	for (int i=1; i < number_of_character+1; i++)
 8000646:	2301      	movs	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	e01e      	b.n	800068a <init_dotmatrix+0x76>
	{
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e015      	b.n	800067e <init_dotmatrix+0x6a>
		{
			scroll_buffer[i][j] = number_data[i-1][j];
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	491c      	ldr	r1, [pc, #112]	; (80006c8 <init_dotmatrix+0xb4>)
 8000658:	4613      	mov	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	18ca      	adds	r2, r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	7819      	ldrb	r1, [r3, #0]
 8000668:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <init_dotmatrix+0xbc>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	441a      	add	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	460a      	mov	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b07      	cmp	r3, #7
 8000682:	dde6      	ble.n	8000652 <init_dotmatrix+0x3e>
	for (int i=1; i < number_of_character+1; i++)
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <init_dotmatrix+0xc0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	429a      	cmp	r2, r3
 8000692:	dddb      	ble.n	800064c <init_dotmatrix+0x38>
		}
	}
	for (int i=0; i < 8; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	e00e      	b.n	80006b8 <init_dotmatrix+0xa4>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // led all off
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <init_dotmatrix+0xc4>)
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <init_dotmatrix+0xc8>)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4619      	mov	r1, r3
 80006ae:	f004 ff03 	bl	80054b8 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b07      	cmp	r3, #7
 80006bc:	dded      	ble.n	800069a <init_dotmatrix+0x86>
	}
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000006c 	.word	0x2000006c
 80006cc:	200001ec 	.word	0x200001ec
 80006d0:	200001f4 	.word	0x200001f4
 80006d4:	20000134 	.word	0x20000134
 80006d8:	2000000c 	.word	0x2000000c
 80006dc:	2000005c 	.word	0x2000005c

080006e0 <write_column_data>:
void write_column_data(int col)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 8; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	e01f      	b.n	800072e <write_column_data+0x4e>
		if (i == col)
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // on
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // off
#else
//---------- common 캐소우드 방식
		if (i == col)
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d10c      	bne.n	8000710 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // on
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <write_column_data+0x60>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <write_column_data+0x64>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	f004 fed5 	bl	80054b8 <HAL_GPIO_WritePin>
 800070e:	e00b      	b.n	8000728 <write_column_data+0x48>
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // off
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <write_column_data+0x60>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <write_column_data+0x64>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	f004 fec8 	bl	80054b8 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b07      	cmp	r3, #7
 8000732:	dddc      	ble.n	80006ee <write_column_data+0xe>
#endif
	}
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000000c 	.word	0x2000000c
 8000744:	2000005c 	.word	0x2000005c

08000748 <write_row_data>:
// 0b00111110
void write_row_data(unsigned char data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	unsigned char d;

	d = data;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	72fb      	strb	r3, [r7, #11]

	for (int i=0; i < 8; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e023      	b.n	80007a4 <write_row_data+0x5c>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
#else
//-common 캐소우드
		if ( d & (1 << i))   // 1인경우
 800075c:	7afa      	ldrb	r2, [r7, #11]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	fa42 f303 	asr.w	r3, r2, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00c      	beq.n	8000786 <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 800076c:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <write_row_data+0x6c>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <write_row_data+0x70>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	f004 fe9a 	bl	80054b8 <HAL_GPIO_WritePin>
 8000784:	e00b      	b.n	800079e <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <write_row_data+0x6c>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <write_row_data+0x70>)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000796:	2201      	movs	r2, #1
 8000798:	4619      	mov	r1, r3
 800079a:	f004 fe8d 	bl	80054b8 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	ddd8      	ble.n	800075c <write_row_data+0x14>
#endif
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000002c 	.word	0x2000002c
 80007b8:	2000004c 	.word	0x2000004c

080007bc <dotmatrix_main>:
#if 1
// scroll 문자 출력 프로그램
extern osMutexId_t myMutex01Handle;
int dotmatrix_main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
    char lcd_buff[40];

	// init_dotmatrix();


	uint32_t now = HAL_GetTick();  // 1ms
 80007c2:	f002 fc35 	bl	8003030 <HAL_GetTick>
 80007c6:	62f8      	str	r0, [r7, #44]	; 0x2c
	// 1.처음시작시 past_time=0; now: 500 --> past_time=500
	if (now - past_time >= 500) // 500ms scroll
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <dotmatrix_main+0xec>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007d4:	d34d      	bcc.n	8000872 <dotmatrix_main+0xb6>
	{
		past_time = now;
 80007d6:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <dotmatrix_main+0xec>)
 80007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007da:	6013      	str	r3, [r2, #0]
		for (int i=0; i < 8; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
 80007e0:	e029      	b.n	8000836 <dotmatrix_main+0x7a>
		{

			display_data[i] = (scroll_buffer[index][i] >> count) |
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <dotmatrix_main+0xf0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <dotmatrix_main+0xf4>)
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	441a      	add	r2, r3
 80007ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <dotmatrix_main+0xf8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	fa42 f303 	asr.w	r3, r2, r3
 80007fc:	b25a      	sxtb	r2, r3
					(scroll_buffer[index+1][i] << 8 - count);
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <dotmatrix_main+0xf0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	492a      	ldr	r1, [pc, #168]	; (80008b0 <dotmatrix_main+0xf4>)
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4419      	add	r1, r3
 800080a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080c:	440b      	add	r3, r1
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <dotmatrix_main+0xf8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f1c3 0308 	rsb	r3, r3, #8
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
			display_data[i] = (scroll_buffer[index][i] >> count) |
 800081e:	b25b      	sxtb	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b25b      	sxtb	r3, r3
 8000824:	b2d9      	uxtb	r1, r3
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <dotmatrix_main+0xfc>)
 8000828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082a:	4413      	add	r3, r2
 800082c:	460a      	mov	r2, r1
 800082e:	701a      	strb	r2, [r3, #0]
		for (int i=0; i < 8; i++)
 8000830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000832:	3301      	adds	r3, #1
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
 8000836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000838:	2b07      	cmp	r3, #7
 800083a:	ddd2      	ble.n	80007e2 <dotmatrix_main+0x26>
		}
		if (++count == 8) // 8칼람을 다 처리 했으면 다음 scroll_buffer로 이동
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <dotmatrix_main+0xf8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <dotmatrix_main+0xf8>)
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <dotmatrix_main+0xf8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b08      	cmp	r3, #8
 800084c:	d111      	bne.n	8000872 <dotmatrix_main+0xb6>
		{
			count =0;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <dotmatrix_main+0xf8>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
			index++;  // 다음 scroll_buffer로 이동
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <dotmatrix_main+0xf0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <dotmatrix_main+0xf0>)
 800085c:	6013      	str	r3, [r2, #0]
			if (index == number_of_character+1) index=0;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <dotmatrix_main+0x100>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <dotmatrix_main+0xf0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d102      	bne.n	8000872 <dotmatrix_main+0xb6>
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <dotmatrix_main+0xf0>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
			// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
		}
	}
	for (int i=0; i < 8; i++)
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
 8000876:	e00f      	b.n	8000898 <dotmatrix_main+0xdc>
	{
		// 공통 양극 방식
		// column에는 0을 ROW에는 1을 출력해야 해당 LED가 on된다.
		write_column_data(i);
 8000878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800087a:	f7ff ff31 	bl	80006e0 <write_column_data>
		write_row_data(display_data[i]);
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <dotmatrix_main+0xfc>)
 8000880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff5e 	bl	8000748 <write_row_data>
		HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f002 fbdb 	bl	8003048 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000894:	3301      	adds	r3, #1
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
 8000898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089a:	2b07      	cmp	r3, #7
 800089c:	ddec      	ble.n	8000878 <dotmatrix_main+0xbc>
	}

	return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000384 	.word	0x20000384
 80008ac:	20000388 	.word	0x20000388
 80008b0:	200001f4 	.word	0x200001f4
 80008b4:	2000038c 	.word	0x2000038c
 80008b8:	200001ec 	.word	0x200001ec
 80008bc:	20000134 	.word	0x20000134

080008c0 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f023 030f 	bic.w	r3, r3, #15
 80008d0:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	f043 030c 	orr.w	r3, r3, #12
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80008ec:	7bbb      	ldrb	r3, [r7, #14]
 80008ee:	f043 030c 	orr.w	r3, r3, #12
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000900:	bf00      	nop
 8000902:	f107 0208 	add.w	r2, r7, #8
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2304      	movs	r3, #4
 800090c:	214e      	movs	r1, #78	; 0x4e
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <lcd_command+0x64>)
 8000910:	f004 ff48 	bl	80057a4 <HAL_I2C_Master_Transmit>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f3      	bne.n	8000902 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800091a:	bf00      	nop
}
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200003fc 	.word	0x200003fc

08000928 <i2c_lcd_init>:
	}
	return;
}
// lcd 초기화
void i2c_lcd_init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 800092c:	2033      	movs	r0, #51	; 0x33
 800092e:	f7ff ffc7 	bl	80008c0 <lcd_command>
	lcd_command(0x32);
 8000932:	2032      	movs	r0, #50	; 0x32
 8000934:	f7ff ffc4 	bl	80008c0 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000938:	2028      	movs	r0, #40	; 0x28
 800093a:	f7ff ffc1 	bl	80008c0 <lcd_command>
	lcd_command(DISPLAY_ON);
 800093e:	200c      	movs	r0, #12
 8000940:	f7ff ffbe 	bl	80008c0 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000944:	2006      	movs	r0, #6
 8000946:	f7ff ffbb 	bl	80008c0 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff ffb8 	bl	80008c0 <lcd_command>
	HAL_Delay(2);
 8000950:	2002      	movs	r0, #2
 8000952:	f002 fb79 	bl	8003048 <HAL_Delay>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <dec2bin>:

	return high + low;
}
// decimal --> BCD  ex) 23: 001 0111
unsigned char dec2bin(unsigned char byte)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	high = (byte / 10) << 4;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <dec2bin+0x44>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <dec2bin+0x44>)
 800097a:	fba3 1302 	umull	r1, r3, r3, r2
 800097e:	08d9      	lsrs	r1, r3, #3
 8000980:	460b      	mov	r3, r1
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	73bb      	strb	r3, [r7, #14]

	return high + low;
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	7bbb      	ldrb	r3, [r7, #14]
 8000990:	4413      	add	r3, r2
 8000992:	b2db      	uxtb	r3, r3

}
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	cccccccd 	.word	0xcccccccd

080009a4 <set_rtc>:
	 oldTime.Seconds=sTime.Seconds;
}
// setrtc231016103800
//       678901234567
void set_rtc(char *date_time)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4];  // date
	char hh[4], min[4], ss[4];  // time

	strncpy(yy, date_time+6, 2); // yy[0] = '2' yy[1]='3' yy[2]=0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1d99      	adds	r1, r3, #6
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	2202      	movs	r2, #2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f019 f91b 	bl	8019bf2 <strncpy>
	strncpy(mm, date_time+8, 2);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f103 0108 	add.w	r1, r3, #8
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2202      	movs	r2, #2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f019 f912 	bl	8019bf2 <strncpy>
	strncpy(dd, date_time+10, 2);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f103 010a 	add.w	r1, r3, #10
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2202      	movs	r2, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f019 f909 	bl	8019bf2 <strncpy>

	strncpy(hh, date_time+12, 2);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f103 010c 	add.w	r1, r3, #12
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2202      	movs	r2, #2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f019 f900 	bl	8019bf2 <strncpy>
	strncpy(min, date_time+14, 2);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f103 010e 	add.w	r1, r3, #14
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2202      	movs	r2, #2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f019 f8f7 	bl	8019bf2 <strncpy>
	strncpy(ss, date_time+16, 2);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f103 0110 	add.w	r1, r3, #16
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f019 f8ee 	bl	8019bf2 <strncpy>

	// ascii --> int --> bcd
	sDate.Year=dec2bin(atoi(yy));
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f018 fd36 	bl	801948c <atoi>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff99 	bl	800095c <dec2bin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <set_rtc+0x138>)
 8000a30:	70da      	strb	r2, [r3, #3]
	sDate.Month=dec2bin(atoi(mm));
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	4618      	mov	r0, r3
 8000a38:	f018 fd28 	bl	801948c <atoi>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff8b 	bl	800095c <dec2bin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <set_rtc+0x138>)
 8000a4c:	705a      	strb	r2, [r3, #1]
	sDate.Date=dec2bin(atoi(dd));
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4618      	mov	r0, r3
 8000a54:	f018 fd1a 	bl	801948c <atoi>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff7d 	bl	800095c <dec2bin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <set_rtc+0x138>)
 8000a68:	709a      	strb	r2, [r3, #2]

	sTime.Hours=dec2bin(atoi(hh));
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f018 fd0c 	bl	801948c <atoi>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff6f 	bl	800095c <dec2bin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <set_rtc+0x13c>)
 8000a84:	701a      	strb	r2, [r3, #0]
	sTime.Minutes=dec2bin(atoi(min));
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f018 fcfe 	bl	801948c <atoi>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff61 	bl	800095c <dec2bin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <set_rtc+0x13c>)
 8000aa0:	705a      	strb	r2, [r3, #1]
	sTime.Seconds=dec2bin(atoi(ss));
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f018 fcf0 	bl	801948c <atoi>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff53 	bl	800095c <dec2bin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <set_rtc+0x13c>)
 8000abc:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4906      	ldr	r1, [pc, #24]	; (8000adc <set_rtc+0x138>)
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <set_rtc+0x140>)
 8000ac4:	f006 faa8 	bl	8007018 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4905      	ldr	r1, [pc, #20]	; (8000ae0 <set_rtc+0x13c>)
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <set_rtc+0x140>)
 8000ace:	f006 fa09 	bl	8006ee4 <HAL_RTC_SetTime>
}
 8000ad2:	bf00      	nop
 8000ad4:	3720      	adds	r7, #32
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200003a4 	.word	0x200003a4
 8000ae0:	20000390 	.word	0x20000390
 8000ae4:	20000450 	.word	0x20000450

08000ae8 <flower_on>:
#endif
	}
}

void flower_on()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	21ff      	movs	r1, #255	; 0xff
 8000af2:	4814      	ldr	r0, [pc, #80]	; (8000b44 <flower_on+0x5c>)
 8000af4:	f004 fce0 	bl	80054b8 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	e01a      	b.n	8000b34 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 8000afe:	2210      	movs	r2, #16
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <flower_on+0x5c>)
 8000b0e:	f004 fcd3 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 8000b12:	2208      	movs	r2, #8
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	fa42 f303 	asr.w	r3, r2, r3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <flower_on+0x5c>)
 8000b22:	f004 fcc9 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000b26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b2a:	f002 fa8d 	bl	8003048 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3301      	adds	r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dde1      	ble.n	8000afe <flower_on+0x16>
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <flower_off>:


void flower_off()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	21ff      	movs	r1, #255	; 0xff
 8000b52:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <flower_off+0x5c>)
 8000b54:	f004 fcb0 	bl	80054b8 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	e01a      	b.n	8000b94 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	fa42 f303 	asr.w	r3, r2, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <flower_off+0x5c>)
 8000b6e:	f004 fca3 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <flower_off+0x5c>)
 8000b82:	f004 fc99 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000b86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b8a:	f002 fa5d 	bl	8003048 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	dde1      	ble.n	8000b5e <flower_off+0x16>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020c00 	.word	0x40020c00

08000ba8 <led_keepon_up>:

void led_keepon_up()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	e00f      	b.n	8000bd4 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <led_keepon_up+0x3c>)
 8000bc4:	f004 fc78 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000bc8:	20c8      	movs	r0, #200	; 0xc8
 8000bca:	f002 fa3d 	bl	8003048 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b07      	cmp	r3, #7
 8000bd8:	ddec      	ble.n	8000bb4 <led_keepon_up+0xc>
	}
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <led_keepon_down>:

void led_keepon_down()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e00f      	b.n	8000c14 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	fa42 f303 	asr.w	r3, r2, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	4808      	ldr	r0, [pc, #32]	; (8000c24 <led_keepon_down+0x3c>)
 8000c04:	f004 fc58 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000c08:	20c8      	movs	r0, #200	; 0xc8
 8000c0a:	f002 fa1d 	bl	8003048 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	ddec      	ble.n	8000bf4 <led_keepon_down+0xc>
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <led_on_up+0x50>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2bc7      	cmp	r3, #199	; 0xc7
 8000c32:	dd1e      	ble.n	8000c72 <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <led_on_up+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000c3a:	f000 f861 	bl	8000d00 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <led_on_up+0x54>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2201      	movs	r2, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <led_on_up+0x58>)
 8000c50:	f004 fc32 	bl	80054b8 <HAL_GPIO_WritePin>
		i++;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <led_on_up+0x54>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <led_on_up+0x54>)
 8000c5c:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <led_on_up+0x54>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	dd05      	ble.n	8000c72 <led_on_up+0x4a>
		{
			i=0;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <led_on_up+0x54>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <led_on_up+0x5c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000bd4 	.word	0x20000bd4
 8000c7c:	200003ac 	.word	0x200003ac
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	200003a8 	.word	0x200003a8

08000c88 <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <led_on_down+0x50>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2bc7      	cmp	r3, #199	; 0xc7
 8000c92:	dd1e      	ble.n	8000cd2 <led_on_down+0x4a>
	{
		t1ms_counter=0;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <led_on_down+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000c9a:	f000 f831 	bl	8000d00 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <led_on_down+0x54>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	fa42 f303 	asr.w	r3, r2, r3
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <led_on_down+0x58>)
 8000cb0:	f004 fc02 	bl	80054b8 <HAL_GPIO_WritePin>
		i++;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <led_on_down+0x54>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <led_on_down+0x54>)
 8000cbc:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <led_on_down+0x54>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	dd05      	ble.n	8000cd2 <led_on_down+0x4a>
		{
			i=0;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <led_on_down+0x54>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <led_on_down+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000bd4 	.word	0x20000bd4
 8000cdc:	200003b0 	.word	0x200003b0
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	200003a8 	.word	0x200003a8

08000ce8 <led_all_on>:

void led_all_on(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	21ff      	movs	r1, #255	; 0xff
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <led_all_on+0x14>)
 8000cf2:	f004 fbe1 	bl	80054b8 <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40020c00 	.word	0x40020c00

08000d00 <led_all_off>:

void led_all_off(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	21ff      	movs	r1, #255	; 0xff
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <led_all_off+0x14>)
 8000d0a:	f004 fbd5 	bl	80054b8 <HAL_GPIO_WritePin>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020c00 	.word	0x40020c00

08000d18 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000d20:	1d39      	adds	r1, r7, #4
 8000d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d26:	2201      	movs	r2, #1
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <__io_putchar+0x20>)
 8000d2a:	f007 ffa6 	bl	8008c7a <HAL_UART_Transmit>

  return ch;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000620 	.word	0x20000620

08000d3c <delay_us>:
//----------  printf end ----------

void delay_us(unsigned long us)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <delay_us+0x2c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8000d4c:	bf00      	nop
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <delay_us+0x2c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d8f9      	bhi.n	8000d4e <delay_us+0x12>
		;
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	200005d8 	.word	0x200005d8

08000d6c <HAL_GPIO_EXTI_Callback>:
// 1. move from Driver/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c to here
// 2. enter here every external interrupt
volatile int ext_int_no = -1;  // GPIO_Pin?�� 0번도 존재?��?���???? 구분?���???? ?��?��?��
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
printf("EXT INT\0");
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x70>)
 8000d78:	f018 fd7e 	bl	8019878 <iprintf>
	switch(GPIO_Pin)
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d01c      	beq.n	8000dbc <HAL_GPIO_EXTI_Callback+0x50>
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	dc26      	bgt.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x68>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <HAL_GPIO_EXTI_Callback+0x24>
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d00b      	beq.n	8000da6 <HAL_GPIO_EXTI_Callback+0x3a>
		ext_int_no=GPIO_Pin;
		nucleo_stm32f429zi_led_off();
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);  // LED3
		break;
	}
}
 8000d8e:	e021      	b.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x68>
		ext_int_no=GPIO_Pin;
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d94:	6013      	str	r3, [r2, #0]
		nucleo_stm32f429zi_led_off();
 8000d96:	f000 f845 	bl	8000e24 <nucleo_stm32f429zi_led_off>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); // LED1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000da0:	f004 fb8a 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8000da4:	e016      	b.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x68>
		ext_int_no=GPIO_Pin;
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000daa:	6013      	str	r3, [r2, #0]
		nucleo_stm32f429zi_led_off();
 8000dac:	f000 f83a 	bl	8000e24 <nucleo_stm32f429zi_led_off>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);   // LED2
 8000db0:	2201      	movs	r2, #1
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000db6:	f004 fb7f 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8000dba:	e00b      	b.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x68>
		ext_int_no=GPIO_Pin;
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dc0:	6013      	str	r3, [r2, #0]
		nucleo_stm32f429zi_led_off();
 8000dc2:	f000 f82f 	bl	8000e24 <nucleo_stm32f429zi_led_off>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);  // LED3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000dce:	f004 fb73 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8000dd2:	bf00      	nop
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	0801ace0 	.word	0x0801ace0
 8000de0:	20000138 	.word	0x20000138
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_ADC_ConvCpltCallback>:
uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_ADC_ConvCpltCallback+0x30>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d109      	bne.n	8000e0e <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000dfa:	4808      	ldr	r0, [pc, #32]	; (8000e1c <HAL_ADC_ConvCpltCallback+0x34>)
 8000dfc:	f002 fb7a 	bl	80034f4 <HAL_ADC_GetValue>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_ADC_ConvCpltCallback+0x38>)
 8000e06:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <HAL_ADC_ConvCpltCallback+0x34>)
 8000e0a:	f002 f985 	bl	8003118 <HAL_ADC_Start_IT>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	200003b4 	.word	0x200003b4
 8000e20:	20000bd8 	.word	0x20000bd8

08000e24 <nucleo_stm32f429zi_led_off>:
// led off on STM32F429ZI
void nucleo_stm32f429zi_led_off()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <nucleo_stm32f429zi_led_off+0x28>)
 8000e2e:	f004 fb43 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <nucleo_stm32f429zi_led_off+0x28>)
 8000e38:	f004 fb3e 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e42:	4802      	ldr	r0, [pc, #8]	; (8000e4c <nucleo_stm32f429zi_led_off+0x28>)
 8000e44:	f004 fb38 	bl	80054b8 <HAL_GPIO_WritePin>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40020400 	.word	0x40020400

08000e50 <nucleo_stm32f429zi_led_on>:
void nucleo_stm32f429zi_led_on()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2101      	movs	r1, #1
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <nucleo_stm32f429zi_led_on+0x28>)
 8000e5a:	f004 fb2d 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <nucleo_stm32f429zi_led_on+0x28>)
 8000e64:	f004 fb28 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6e:	4802      	ldr	r0, [pc, #8]	; (8000e78 <nucleo_stm32f429zi_led_on+0x28>)
 8000e70:	f004 fb22 	bl	80054b8 <HAL_GPIO_WritePin>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020400 	.word	0x40020400

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e80:	f002 f8a0 	bl	8002fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e84:	f000 f8bc 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e88:	f000 fc4e 	bl	8001728 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e8c:	f000 fbca 	bl	8001624 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e90:	f000 fc1c 	bl	80016cc <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000e94:	f000 fbf0 	bl	8001678 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000e98:	f000 fb7c 	bl	8001594 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000e9c:	f000 fb9e 	bl	80015dc <MX_TIM11_Init>
  MX_TIM3_Init();
 8000ea0:	f000 fa60 	bl	8001364 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ea4:	f000 fab2 	bl	800140c <MX_TIM4_Init>
  MX_TIM2_Init();
 8000ea8:	f000 fa02 	bl	80012b0 <MX_TIM2_Init>
  MX_RTC_Init();
 8000eac:	f000 f9a6 	bl	80011fc <MX_RTC_Init>
  MX_TIM5_Init();
 8000eb0:	f000 fafa 	bl	80014a8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000eb4:	f000 f962 	bl	800117c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000eb8:	f000 f90e 	bl	80010d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4934      	ldr	r1, [pc, #208]	; (8000f90 <main+0x114>)
 8000ec0:	4834      	ldr	r0, [pc, #208]	; (8000f94 <main+0x118>)
 8000ec2:	f007 ff6c 	bl	8008d9e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4933      	ldr	r1, [pc, #204]	; (8000f98 <main+0x11c>)
 8000eca:	4834      	ldr	r0, [pc, #208]	; (8000f9c <main+0x120>)
 8000ecc:	f007 ff67 	bl	8008d9e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000ed0:	4833      	ldr	r0, [pc, #204]	; (8000fa0 <main+0x124>)
 8000ed2:	f006 fa15 	bl	8007300 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000ed6:	4833      	ldr	r0, [pc, #204]	; (8000fa4 <main+0x128>)
 8000ed8:	f006 fa12 	bl	8007300 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4832      	ldr	r0, [pc, #200]	; (8000fa8 <main+0x12c>)
 8000ee0:	f006 fcfc 	bl	80078dc <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4831      	ldr	r0, [pc, #196]	; (8000fac <main+0x130>)
 8000ee8:	f006 fb92 	bl	8007610 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000eec:	2100      	movs	r1, #0
 8000eee:	4830      	ldr	r0, [pc, #192]	; (8000fb0 <main+0x134>)
 8000ef0:	f006 fac6 	bl	8007480 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <main+0x138>)
 8000ef8:	f006 fac2 	bl	8007480 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <main+0x13c>)
 8000efe:	f002 f90b 	bl	8003118 <HAL_ADC_Start_IT>

//  DHT11_Init();
  i2c_lcd_init();
 8000f02:	f7ff fd11 	bl	8000928 <i2c_lcd_init>
  init_dotmatrix();
 8000f06:	f7ff fb85 	bl	8000614 <init_dotmatrix>

  TIM10_10ms_counter=0;
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <main+0x140>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
//    buzzer_main();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f10:	f00a f848 	bl	800afa4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000f14:	482a      	ldr	r0, [pc, #168]	; (8000fc0 <main+0x144>)
 8000f16:	f00a f951 	bl	800b1bc <osMutexNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <main+0x148>)
 8000f1e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f20:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <main+0x14c>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <main+0x150>)
 8000f26:	f00a f89c 	bl	800b062 <osThreadNew>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <main+0x154>)
 8000f2e:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 8000f30:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <main+0x158>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4828      	ldr	r0, [pc, #160]	; (8000fd8 <main+0x15c>)
 8000f36:	f00a f894 	bl	800b062 <osThreadNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <main+0x160>)
 8000f3e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <main+0x164>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4827      	ldr	r0, [pc, #156]	; (8000fe4 <main+0x168>)
 8000f46:	f00a f88c 	bl	800b062 <osThreadNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <main+0x16c>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_func, NULL, &Task3_attributes);
 8000f50:	4a26      	ldr	r2, [pc, #152]	; (8000fec <main+0x170>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <main+0x174>)
 8000f56:	f00a f884 	bl	800b062 <osThreadNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <main+0x178>)
 8000f5e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f60:	f00a f844 	bl	800afec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("cds sensor: %d\n", adcValue[0]);
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <main+0x17c>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4824      	ldr	r0, [pc, #144]	; (8000ffc <main+0x180>)
 8000f6c:	f018 fc84 	bl	8019878 <iprintf>
	  if (adcValue[0] < 2500)
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <main+0x17c>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d802      	bhi.n	8000f82 <main+0x106>
	  {
		  nucleo_stm32f429zi_led_on();
 8000f7c:	f7ff ff68 	bl	8000e50 <nucleo_stm32f429zi_led_on>
 8000f80:	e001      	b.n	8000f86 <main+0x10a>
	  }
	  else
	  {
		  nucleo_stm32f429zi_led_off();
 8000f82:	f7ff ff4f 	bl	8000e24 <nucleo_stm32f429zi_led_off>
	  }
	  HAL_Delay(10);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f002 f85e 	bl	8003048 <HAL_Delay>
	  printf("cds sensor: %d\n", adcValue[0]);
 8000f8c:	e7ea      	b.n	8000f64 <main+0xe8>
 8000f8e:	bf00      	nop
 8000f90:	20000bc8 	.word	0x20000bc8
 8000f94:	20000620 	.word	0x20000620
 8000f98:	20000bc9 	.word	0x20000bc9
 8000f9c:	20000664 	.word	0x20000664
 8000fa0:	20000590 	.word	0x20000590
 8000fa4:	200005d8 	.word	0x200005d8
 8000fa8:	200004b8 	.word	0x200004b8
 8000fac:	20000500 	.word	0x20000500
 8000fb0:	20000470 	.word	0x20000470
 8000fb4:	20000548 	.word	0x20000548
 8000fb8:	200003b4 	.word	0x200003b4
 8000fbc:	20000bcc 	.word	0x20000bcc
 8000fc0:	0801d964 	.word	0x0801d964
 8000fc4:	20000bc4 	.word	0x20000bc4
 8000fc8:	0801d8d4 	.word	0x0801d8d4
 8000fcc:	080019b9 	.word	0x080019b9
 8000fd0:	20000bb4 	.word	0x20000bb4
 8000fd4:	0801d8f8 	.word	0x0801d8f8
 8000fd8:	08001aa9 	.word	0x08001aa9
 8000fdc:	20000bb8 	.word	0x20000bb8
 8000fe0:	0801d91c 	.word	0x0801d91c
 8000fe4:	08001abd 	.word	0x08001abd
 8000fe8:	20000bbc 	.word	0x20000bbc
 8000fec:	0801d940 	.word	0x0801d940
 8000ff0:	08001ad1 	.word	0x08001ad1
 8000ff4:	20000bc0 	.word	0x20000bc0
 8000ff8:	20000bd8 	.word	0x20000bd8
 8000ffc:	0801acec 	.word	0x0801acec

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f018 fb95 	bl	801973e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <SystemClock_Config+0xd0>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <SystemClock_Config+0xd0>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <SystemClock_Config+0xd0>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <SystemClock_Config+0xd4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <SystemClock_Config+0xd4>)
 800104a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <SystemClock_Config+0xd4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800105c:	2309      	movs	r3, #9
 800105e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001060:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001078:	23a8      	movs	r3, #168	; 0xa8
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001080:	2307      	movs	r3, #7
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f005 f82b 	bl	80060e4 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001094:	f000 fd4e 	bl	8001b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2105      	movs	r1, #5
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 fa8c 	bl	80065d4 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010c2:	f000 fd37 	bl	8001b34 <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3750      	adds	r7, #80	; 0x50
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_ADC1_Init+0x98>)
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <MX_ADC1_Init+0x9c>)
 80010ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_ADC1_Init+0x98>)
 80010f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_ADC1_Init+0x98>)
 8001106:	2201      	movs	r2, #1
 8001108:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_ADC1_Init+0x98>)
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <MX_ADC1_Init+0xa0>)
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_ADC1_Init+0x98>)
 8001126:	2201      	movs	r2, #1
 8001128:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC1_Init+0x98>)
 8001134:	2201      	movs	r2, #1
 8001136:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_ADC1_Init+0x98>)
 800113a:	f001 ffa9 	bl	8003090 <HAL_ADC_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001144:	f000 fcf6 	bl	8001b34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001148:	2304      	movs	r3, #4
 800114a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001150:	2307      	movs	r3, #7
 8001152:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_ADC1_Init+0x98>)
 800115a:	f002 f9ed 	bl	8003538 <HAL_ADC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001164:	f000 fce6 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200003b4 	.word	0x200003b4
 8001174:	40012000 	.word	0x40012000
 8001178:	0f000001 	.word	0x0f000001

0800117c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_I2C1_Init+0x74>)
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <MX_I2C1_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_I2C1_Init+0x74>)
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <MX_I2C1_Init+0x7c>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_I2C1_Init+0x74>)
 800119a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011ba:	f004 f9af 	bl	800551c <HAL_I2C_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 fcb6 	bl	8001b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011cc:	f004 fdf1 	bl	8005db2 <HAL_I2CEx_ConfigAnalogFilter>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011d6:	f000 fcad 	bl	8001b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011de:	f004 fe24 	bl	8005e2a <HAL_I2CEx_ConfigDigitalFilter>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011e8:	f000 fca4 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200003fc 	.word	0x200003fc
 80011f4:	40005400 	.word	0x40005400
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001210:	2300      	movs	r3, #0
 8001212:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_RTC_Init+0xac>)
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <MX_RTC_Init+0xb0>)
 8001218:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_RTC_Init+0xac>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_RTC_Init+0xac>)
 8001222:	227f      	movs	r2, #127	; 0x7f
 8001224:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_RTC_Init+0xac>)
 8001228:	22ff      	movs	r2, #255	; 0xff
 800122a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_RTC_Init+0xac>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_RTC_Init+0xac>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_RTC_Init+0xac>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800123e:	481a      	ldr	r0, [pc, #104]	; (80012a8 <MX_RTC_Init+0xac>)
 8001240:	f005 fdda 	bl	8006df8 <HAL_RTC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 fc73 	bl	8001b34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 800124e:	2309      	movs	r3, #9
 8001250:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8001252:	2338      	movs	r3, #56	; 0x38
 8001254:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001256:	2300      	movs	r3, #0
 8001258:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <MX_RTC_Init+0xac>)
 800126a:	f005 fe3b 	bl	8006ee4 <HAL_RTC_SetTime>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001274:	f000 fc5e 	bl	8001b34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001278:	2301      	movs	r3, #1
 800127a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 800127c:	2310      	movs	r3, #16
 800127e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001280:	2316      	movs	r3, #22
 8001282:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001284:	2323      	movs	r3, #35	; 0x23
 8001286:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_RTC_Init+0xac>)
 8001290:	f005 fec2 	bl	8007018 <HAL_RTC_SetDate>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800129a:	f000 fc4b 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000450 	.word	0x20000450
 80012ac:	40002800 	.word	0x40002800

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012dc:	f240 628f 	movw	r2, #1679	; 0x68f
 80012e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012fe:	f006 f86f 	bl	80073e0 <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001308:	f000 fc14 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4619      	mov	r1, r3
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_TIM2_Init+0xb0>)
 800131c:	f007 fbd0 	bl	8008ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001326:	f000 fc05 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	; 0x60
 800132c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800132e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM2_Init+0xb0>)
 8001344:	f006 fd96 	bl	8007e74 <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800134e:	f000 fbf1 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM2_Init+0xb0>)
 8001354:	f000 ff5e 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000470 	.word	0x20000470

08001364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <MX_TIM3_Init+0xa0>)
 8001382:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_TIM3_Init+0xa4>)
 8001384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM3_Init+0xa0>)
 8001388:	2253      	movs	r2, #83	; 0x53
 800138a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_TIM3_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM3_Init+0xa0>)
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM3_Init+0xa0>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_TIM3_Init+0xa0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013a6:	4817      	ldr	r0, [pc, #92]	; (8001404 <MX_TIM3_Init+0xa0>)
 80013a8:	f006 fa48 	bl	800783c <HAL_TIM_IC_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013b2:	f000 fbbf 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4619      	mov	r1, r3
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <MX_TIM3_Init+0xa0>)
 80013c6:	f007 fb7b 	bl	8008ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 fbb0 	bl	8001b34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013d4:	230a      	movs	r3, #10
 80013d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM3_Init+0xa0>)
 80013ec:	f006 fca6 	bl	8007d3c <HAL_TIM_IC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013f6:	f000 fb9d 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200004b8 	.word	0x200004b8
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_TIM4_Init+0x94>)
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <MX_TIM4_Init+0x98>)
 800142c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_TIM4_Init+0x94>)
 8001430:	f240 3247 	movw	r2, #839	; 0x347
 8001434:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_TIM4_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_TIM4_Init+0x94>)
 800143e:	2263      	movs	r2, #99	; 0x63
 8001440:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_TIM4_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_TIM4_Init+0x94>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <MX_TIM4_Init+0x94>)
 8001450:	f005 ff07 	bl	8007262 <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800145a:	f000 fb6b 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_TIM4_Init+0x94>)
 800146c:	f006 fdc4 	bl	8007ff8 <HAL_TIM_ConfigClockSource>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001476:	f000 fb5d 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_TIM4_Init+0x94>)
 8001488:	f007 fb1a 	bl	8008ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001492:	f000 fb4f 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000500 	.word	0x20000500
 80014a4:	40000800 	.word	0x40000800

080014a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <MX_TIM5_Init+0xe4>)
 80014da:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <MX_TIM5_Init+0xe8>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_TIM5_Init+0xe4>)
 80014e0:	2233      	movs	r2, #51	; 0x33
 80014e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_TIM5_Init+0xe4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_TIM5_Init+0xe4>)
 80014ec:	f240 128f 	movw	r2, #399	; 0x18f
 80014f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_TIM5_Init+0xe4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_TIM5_Init+0xe4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <MX_TIM5_Init+0xe4>)
 8001500:	f005 feaf 	bl	8007262 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800150a:	f000 fb13 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001518:	4619      	mov	r1, r3
 800151a:	481c      	ldr	r0, [pc, #112]	; (800158c <MX_TIM5_Init+0xe4>)
 800151c:	f006 fd6c 	bl	8007ff8 <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001526:	f000 fb05 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <MX_TIM5_Init+0xe4>)
 800152c:	f005 ff58 	bl	80073e0 <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001536:	f000 fafd 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	4619      	mov	r1, r3
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <MX_TIM5_Init+0xe4>)
 800154a:	f007 fab9 	bl	8008ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001554:	f000 faee 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 800155c:	23c7      	movs	r3, #199	; 0xc7
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	220c      	movs	r2, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM5_Init+0xe4>)
 8001570:	f006 fc80 	bl	8007e74 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800157a:	f000 fadb 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM5_Init+0xe4>)
 8001580:	f000 fe48 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000548 	.word	0x20000548
 8001590:	40000c00 	.word	0x40000c00

08001594 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_TIM10_Init+0x40>)
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <MX_TIM10_Init+0x44>)
 800159c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_TIM10_Init+0x40>)
 80015a0:	22a7      	movs	r2, #167	; 0xa7
 80015a2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_TIM10_Init+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_TIM10_Init+0x40>)
 80015ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80015b0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_TIM10_Init+0x40>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_TIM10_Init+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM10_Init+0x40>)
 80015c0:	f005 fe4f 	bl	8007262 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80015ca:	f000 fab3 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000590 	.word	0x20000590
 80015d8:	40014400 	.word	0x40014400

080015dc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_TIM11_Init+0x40>)
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <MX_TIM11_Init+0x44>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MX_TIM11_Init+0x40>)
 80015e8:	22a7      	movs	r2, #167	; 0xa7
 80015ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_TIM11_Init+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_TIM11_Init+0x40>)
 80015f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_TIM11_Init+0x40>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_TIM11_Init+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM11_Init+0x40>)
 8001608:	f005 fe2b 	bl	8007262 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001612:	f000 fa8f 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200005d8 	.word	0x200005d8
 8001620:	40014800 	.word	0x40014800

08001624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_USART3_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800165c:	f007 fac0 	bl	8008be0 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 fa65 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000620 	.word	0x20000620
 8001674:	40004800 	.word	0x40004800

08001678 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART6_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 8001684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001688:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART6_UART_Init+0x4c>)
 80016b0:	f007 fa96 	bl	8008be0 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f000 fa3b 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000664 	.word	0x20000664
 80016c8:	40011400 	.word	0x40011400

080016cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016da:	2204      	movs	r2, #4
 80016dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001704:	2201      	movs	r2, #1
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001710:	f004 fbca 	bl	8005ea8 <HAL_PCD_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800171a:	f000 fa0b 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200006a8 	.word	0x200006a8

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
 8001742:	4b95      	ldr	r3, [pc, #596]	; (8001998 <MX_GPIO_Init+0x270>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a94      	ldr	r2, [pc, #592]	; (8001998 <MX_GPIO_Init+0x270>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b92      	ldr	r3, [pc, #584]	; (8001998 <MX_GPIO_Init+0x270>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <MX_GPIO_Init+0x270>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a8d      	ldr	r2, [pc, #564]	; (8001998 <MX_GPIO_Init+0x270>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b8b      	ldr	r3, [pc, #556]	; (8001998 <MX_GPIO_Init+0x270>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	4b87      	ldr	r3, [pc, #540]	; (8001998 <MX_GPIO_Init+0x270>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a86      	ldr	r2, [pc, #536]	; (8001998 <MX_GPIO_Init+0x270>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b84      	ldr	r3, [pc, #528]	; (8001998 <MX_GPIO_Init+0x270>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	4b80      	ldr	r3, [pc, #512]	; (8001998 <MX_GPIO_Init+0x270>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a7f      	ldr	r2, [pc, #508]	; (8001998 <MX_GPIO_Init+0x270>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <MX_GPIO_Init+0x270>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b79      	ldr	r3, [pc, #484]	; (8001998 <MX_GPIO_Init+0x270>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a78      	ldr	r2, [pc, #480]	; (8001998 <MX_GPIO_Init+0x270>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b76      	ldr	r3, [pc, #472]	; (8001998 <MX_GPIO_Init+0x270>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b72      	ldr	r3, [pc, #456]	; (8001998 <MX_GPIO_Init+0x270>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a71      	ldr	r2, [pc, #452]	; (8001998 <MX_GPIO_Init+0x270>)
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <MX_GPIO_Init+0x270>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b6b      	ldr	r3, [pc, #428]	; (8001998 <MX_GPIO_Init+0x270>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a6a      	ldr	r2, [pc, #424]	; (8001998 <MX_GPIO_Init+0x270>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <MX_GPIO_Init+0x270>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b64      	ldr	r3, [pc, #400]	; (8001998 <MX_GPIO_Init+0x270>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a63      	ldr	r2, [pc, #396]	; (8001998 <MX_GPIO_Init+0x270>)
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b61      	ldr	r3, [pc, #388]	; (8001998 <MX_GPIO_Init+0x270>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001824:	485d      	ldr	r0, [pc, #372]	; (800199c <MX_GPIO_Init+0x274>)
 8001826:	f003 fe47 	bl	80054b8 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2101      	movs	r1, #1
 800182e:	485c      	ldr	r0, [pc, #368]	; (80019a0 <MX_GPIO_Init+0x278>)
 8001830:	f003 fe42 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f244 0181 	movw	r1, #16513	; 0x4081
 800183a:	485a      	ldr	r0, [pc, #360]	; (80019a4 <MX_GPIO_Init+0x27c>)
 800183c:	f003 fe3c 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001846:	4858      	ldr	r0, [pc, #352]	; (80019a8 <MX_GPIO_Init+0x280>)
 8001848:	f003 fe36 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800184c:	2200      	movs	r2, #0
 800184e:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001852:	4856      	ldr	r0, [pc, #344]	; (80019ac <MX_GPIO_Init+0x284>)
 8001854:	f003 fe30 	bl	80054b8 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2140      	movs	r1, #64	; 0x40
 800185c:	4854      	ldr	r0, [pc, #336]	; (80019b0 <MX_GPIO_Init+0x288>)
 800185e:	f003 fe2b 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001862:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	4848      	ldr	r0, [pc, #288]	; (800199c <MX_GPIO_Init+0x274>)
 800187c:	f003 fc58 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 8001880:	f242 030d 	movw	r3, #8205	; 0x200d
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4847      	ldr	r0, [pc, #284]	; (80019b4 <MX_GPIO_Init+0x28c>)
 8001898:	f003 fc4a 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800189c:	2301      	movs	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	483b      	ldr	r0, [pc, #236]	; (80019a0 <MX_GPIO_Init+0x278>)
 80018b4:	f003 fc3c 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	4834      	ldr	r0, [pc, #208]	; (80019a4 <MX_GPIO_Init+0x27c>)
 80018d2:	f003 fc2d 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	482e      	ldr	r0, [pc, #184]	; (80019a8 <MX_GPIO_Init+0x280>)
 80018f0:	f003 fc1e 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80018f4:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4824      	ldr	r0, [pc, #144]	; (800199c <MX_GPIO_Init+0x274>)
 800190a:	f003 fc11 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800190e:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	4821      	ldr	r0, [pc, #132]	; (80019ac <MX_GPIO_Init+0x284>)
 8001928:	f003 fc02 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	481b      	ldr	r0, [pc, #108]	; (80019b0 <MX_GPIO_Init+0x288>)
 8001944:	f003 fbf4 	bl	8005130 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <MX_GPIO_Init+0x288>)
 800195c:	f003 fbe8 	bl	8005130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2105      	movs	r1, #5
 8001964:	2006      	movs	r0, #6
 8001966:	f002 f8d7 	bl	8003b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800196a:	2006      	movs	r0, #6
 800196c:	f002 f8f0 	bl	8003b50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2105      	movs	r1, #5
 8001974:	2008      	movs	r0, #8
 8001976:	f002 f8cf 	bl	8003b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800197a:	2008      	movs	r0, #8
 800197c:	f002 f8e8 	bl	8003b50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2105      	movs	r1, #5
 8001984:	2009      	movs	r0, #9
 8001986:	f002 f8c7 	bl	8003b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800198a:	2009      	movs	r0, #9
 800198c:	f002 f8e0 	bl	8003b50 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001990:	bf00      	nop
 8001992:	3738      	adds	r7, #56	; 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	40021000 	.word	0x40021000
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40021400 	.word	0x40021400
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021800 	.word	0x40021800
 80019b4:	40020800 	.word	0x40020800

080019b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80019c0:	f008 fc88 	bl	800a2d4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  //====================	TCP/IP START 	======================//
  udp_echoserver_init();  		// ADD_SIKWON
 80019c4:	f001 f902 	bl	8002bcc <udp_echoserver_init>
  upcb1 = udp_new(); 			// ADD create new UDP control block
 80019c8:	f015 f960 	bl	8016c8c <udp_new>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a2c      	ldr	r2, [pc, #176]	; (8001a80 <StartDefaultTask+0xc8>)
 80019d0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&addr1, 10,10,15,56);	// client PC IP address
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <StartDefaultTask+0xcc>)
 80019d4:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <StartDefaultTask+0xd0>)
 80019d6:	601a      	str	r2, [r3, #0]
  udp_bind(upcb1, IP_ADDR_ANY,9999);	// ADD
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <StartDefaultTask+0xc8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80019e0:	492a      	ldr	r1, [pc, #168]	; (8001a8c <StartDefaultTask+0xd4>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f015 f814 	bl	8016a10 <udp_bind>
  //====================	TCP/IP END 		======================//

  /* Infinite loop */
  for(;;)
  {
	ethernetif_input(&gnetif);  // ADD_SIKWON
 80019e8:	4829      	ldr	r0, [pc, #164]	; (8001a90 <StartDefaultTask+0xd8>)
 80019ea:	f008 ffe9 	bl	800a9c0 <ethernetif_input>
	sys_check_timeouts();   	// ADD_SIKWON
 80019ee:	f014 fbf1 	bl	80161d4 <sys_check_timeouts>

	udp_connect(upcb1, &addr1, 9999);
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <StartDefaultTask+0xc8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80019fa:	4922      	ldr	r1, [pc, #136]	; (8001a84 <StartDefaultTask+0xcc>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f015 f88f 	bl	8016b20 <udp_connect>
	sprintf(temp_str, "Hello juhee\n");
 8001a02:	4924      	ldr	r1, [pc, #144]	; (8001a94 <StartDefaultTask+0xdc>)
 8001a04:	4824      	ldr	r0, [pc, #144]	; (8001a98 <StartDefaultTask+0xe0>)
 8001a06:	f018 f87d 	bl	8019b04 <siprintf>
	p1 = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)temp_str), PBUF_POOL);
 8001a0a:	4823      	ldr	r0, [pc, #140]	; (8001a98 <StartDefaultTask+0xe0>)
 8001a0c:	f7fe fbf0 	bl	80001f0 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001a18:	4619      	mov	r1, r3
 8001a1a:	2036      	movs	r0, #54	; 0x36
 8001a1c:	f00e fb56 	bl	80100cc <pbuf_alloc>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <StartDefaultTask+0xe4>)
 8001a24:	6013      	str	r3, [r2, #0]
	if (p1 != NULL)		// OK alloc
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <StartDefaultTask+0xe4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01e      	beq.n	8001a6c <StartDefaultTask+0xb4>
	{
		// 1. copy data to pbuf
		pbuf_take(p1, (char*)temp_str, strlen((char*)temp_str));
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <StartDefaultTask+0xe4>)
 8001a30:	681c      	ldr	r4, [r3, #0]
 8001a32:	4819      	ldr	r0, [pc, #100]	; (8001a98 <StartDefaultTask+0xe0>)
 8001a34:	f7fe fbdc 	bl	80001f0 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4916      	ldr	r1, [pc, #88]	; (8001a98 <StartDefaultTask+0xe0>)
 8001a40:	4620      	mov	r0, r4
 8001a42:	f00f f89f 	bl	8010b84 <pbuf_take>
		// 2. send udp data
		udp_send(upcb1, p1);
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <StartDefaultTask+0xc8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <StartDefaultTask+0xe4>)
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f014 fdf3 	bl	801663c <udp_send>
		// 3. free the UDP connection
		udp_disconnect(upcb1);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <StartDefaultTask+0xc8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f015 f8ce 	bl	8016bfc <udp_disconnect>
		// 4. free pbuf
		pbuf_free(p1);
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <StartDefaultTask+0xe4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00e fe15 	bl	8010694 <pbuf_free>
 8001a6a:	e005      	b.n	8001a78 <StartDefaultTask+0xc0>
	}
	else
	{
		HAL_UART_Transmit(&huart3, "pbuf not alloc!!\n", strlen("pbuf not alloc!!\n"), 10);	//10ms timeout
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	2211      	movs	r2, #17
 8001a70:	490b      	ldr	r1, [pc, #44]	; (8001aa0 <StartDefaultTask+0xe8>)
 8001a72:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <StartDefaultTask+0xec>)
 8001a74:	f007 f901 	bl	8008c7a <HAL_UART_Transmit>
	}
	osDelay(100);	// 100ms
 8001a78:	2064      	movs	r0, #100	; 0x64
 8001a7a:	f009 fb84 	bl	800b186 <osDelay>
  {
 8001a7e:	e7b3      	b.n	80019e8 <StartDefaultTask+0x30>
 8001a80:	20000c10 	.word	0x20000c10
 8001a84:	20000be0 	.word	0x20000be0
 8001a88:	380f0a0a 	.word	0x380f0a0a
 8001a8c:	0801daa8 	.word	0x0801daa8
 8001a90:	20000cd8 	.word	0x20000cd8
 8001a94:	0801acfc 	.word	0x0801acfc
 8001a98:	20000be8 	.word	0x20000be8
 8001a9c:	20000be4 	.word	0x20000be4
 8001aa0:	0801ad0c 	.word	0x0801ad0c
 8001aa4:	20000620 	.word	0x20000620

08001aa8 <Task1_func>:
* @retval None
*/
extern void init_dotmatrix(void);
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
  /* Infinite loop */
  for(;;)
  {
    dotmatrix_main();
 8001ab0:	f7fe fe84 	bl	80007bc <dotmatrix_main>
    osDelay(1);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f009 fb66 	bl	800b186 <osDelay>
    dotmatrix_main();
 8001aba:	e7f9      	b.n	8001ab0 <Task1_func+0x8>

08001abc <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */
  /* Infinite loop */
  for(;;)
  {
	stepmotor_main_test();
 8001ac4:	f000 f84c 	bl	8001b60 <stepmotor_main_test>
    osDelay(1);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f009 fb5c 	bl	800b186 <osDelay>
	stepmotor_main_test();
 8001ace:	e7f9      	b.n	8001ac4 <Task2_func+0x8>

08001ad0 <Task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_func */
void Task3_func(void *argument)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_func */
  /* Infinite loop */
  for(;;)
  {
 	pc_command_processing();
 8001ad8:	f000 ff60 	bl	800299c <pc_command_processing>
    bt_command_processing();
 8001adc:	f000 fffc 	bl	8002ad8 <bt_command_processing>
    osDelay(1);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f009 fb50 	bl	800b186 <osDelay>
 	pc_command_processing();
 8001ae6:	e7f7      	b.n	8001ad8 <Task3_func+0x8>

08001ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001afa:	f001 fa85 	bl	8003008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM10)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d109      	bne.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b10:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b1a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40001000 	.word	0x40001000
 8001b28:	40014400 	.word	0x40014400
 8001b2c:	20000bcc 	.word	0x20000bcc
 8001b30:	20000bd0 	.word	0x20000bd0

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>

08001b3e <set_rpm>:
//                           = 4612ms
//                           = 4.6초
// 60초 / 4.6(1회전시 소요시간 초) ==> 13회전
// 시계방향으로 1회전 <---> 반시계방향으로 1회전
void set_rpm(int rpm) // rpm 1~ 13
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	delay_us(60000000/4096/rpm);
 8001b46:	f643 1238 	movw	r2, #14648	; 0x3938
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f8f3 	bl	8000d3c <delay_us>
	// 최대 speed 기준(13) : delay_us(1126);
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <stepmotor_main_test>:
#define IDLE     0
#define FORWARD  1
#define BACKWARD 2
int stepmotor_state=IDLE;
void stepmotor_main_test(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
#if 1
// 버튼 처리에 의한 스텝모터 구동 프로그램 작성
	switch(stepmotor_state)
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d034      	beq.n	8001bd6 <stepmotor_main_test+0x76>
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	dc58      	bgt.n	8001c22 <stepmotor_main_test+0xc2>
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <stepmotor_main_test+0x1a>
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d00d      	beq.n	8001b94 <stepmotor_main_test+0x34>
			set_rpm(13);  // rpm값만큼 wait
		}
	}

#endif
}
 8001b78:	e053      	b.n	8001c22 <stepmotor_main_test+0xc2>
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b80:	482a      	ldr	r0, [pc, #168]	; (8001c2c <stepmotor_main_test+0xcc>)
 8001b82:	f7fe fd0f 	bl	80005a4 <get_button>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d145      	bne.n	8001c18 <stepmotor_main_test+0xb8>
			stepmotor_state = FORWARD;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
		break;
 8001b92:	e041      	b.n	8001c18 <stepmotor_main_test+0xb8>
		stepmotor_drive(stepmotor_state);
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f849 	bl	8001c30 <stepmotor_drive>
		set_rpm(10);    // rpm 속도 조절
 8001b9e:	200a      	movs	r0, #10
 8001ba0:	f7ff ffcd 	bl	8001b3e <set_rpm>
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001baa:	4820      	ldr	r0, [pc, #128]	; (8001c2c <stepmotor_main_test+0xcc>)
 8001bac:	f7fe fcfa 	bl	80005a4 <get_button>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <stepmotor_main_test+0x5c>
			stepmotor_state = BACKWARD;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc2:	481a      	ldr	r0, [pc, #104]	; (8001c2c <stepmotor_main_test+0xcc>)
 8001bc4:	f7fe fcee 	bl	80005a4 <get_button>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d126      	bne.n	8001c1c <stepmotor_main_test+0xbc>
			stepmotor_state = IDLE;
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
		break;
 8001bd4:	e022      	b.n	8001c1c <stepmotor_main_test+0xbc>
		stepmotor_drive(stepmotor_state);
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f828 	bl	8001c30 <stepmotor_drive>
		set_rpm(10);    // rpm 속도 조절
 8001be0:	200a      	movs	r0, #10
 8001be2:	f7ff ffac 	bl	8001b3e <set_rpm>
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bec:	480f      	ldr	r0, [pc, #60]	; (8001c2c <stepmotor_main_test+0xcc>)
 8001bee:	f7fe fcd9 	bl	80005a4 <get_button>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <stepmotor_main_test+0x9e>
			stepmotor_state = FORWARD;
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c04:	4809      	ldr	r0, [pc, #36]	; (8001c2c <stepmotor_main_test+0xcc>)
 8001c06:	f7fe fccd 	bl	80005a4 <get_button>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d107      	bne.n	8001c20 <stepmotor_main_test+0xc0>
			stepmotor_state = IDLE;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <stepmotor_main_test+0xc8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
		break;
 8001c16:	e003      	b.n	8001c20 <stepmotor_main_test+0xc0>
		break;
 8001c18:	bf00      	nop
 8001c1a:	e002      	b.n	8001c22 <stepmotor_main_test+0xc2>
		break;
 8001c1c:	bf00      	nop
 8001c1e:	e000      	b.n	8001c22 <stepmotor_main_test+0xc2>
		break;
 8001c20:	bf00      	nop
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000c14 	.word	0x20000c14
 8001c2c:	40021000 	.word	0x40021000

08001c30 <stepmotor_drive>:
//
// direction : 1 == 시계방향 회전
//             2 ---> 반시계
//             0 : idle
void stepmotor_drive(int direction)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	static int step=0;   // static을 쓰면 전역변수 처럼 동작

	switch(step){
 8001c38:	4b83      	ldr	r3, [pc, #524]	; (8001e48 <stepmotor_drive+0x218>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b07      	cmp	r3, #7
 8001c3e:	f200 80db 	bhi.w	8001df8 <stepmotor_drive+0x1c8>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <stepmotor_drive+0x18>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001c69 	.word	0x08001c69
 8001c4c:	08001c9b 	.word	0x08001c9b
 8001c50:	08001ccd 	.word	0x08001ccd
 8001c54:	08001cff 	.word	0x08001cff
 8001c58:	08001d31 	.word	0x08001d31
 8001c5c:	08001d63 	.word	0x08001d63
 8001c60:	08001d95 	.word	0x08001d95
 8001c64:	08001dc7 	.word	0x08001dc7
	case 0:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c6e:	4877      	ldr	r0, [pc, #476]	; (8001e4c <stepmotor_drive+0x21c>)
 8001c70:	f003 fc22 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7a:	4874      	ldr	r0, [pc, #464]	; (8001e4c <stepmotor_drive+0x21c>)
 8001c7c:	f003 fc1c 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	4871      	ldr	r0, [pc, #452]	; (8001e4c <stepmotor_drive+0x21c>)
 8001c88:	f003 fc16 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c92:	486e      	ldr	r0, [pc, #440]	; (8001e4c <stepmotor_drive+0x21c>)
 8001c94:	f003 fc10 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001c98:	e0ae      	b.n	8001df8 <stepmotor_drive+0x1c8>
	case 1:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca0:	486a      	ldr	r0, [pc, #424]	; (8001e4c <stepmotor_drive+0x21c>)
 8001ca2:	f003 fc09 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	4867      	ldr	r0, [pc, #412]	; (8001e4c <stepmotor_drive+0x21c>)
 8001cae:	f003 fc03 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb8:	4864      	ldr	r0, [pc, #400]	; (8001e4c <stepmotor_drive+0x21c>)
 8001cba:	f003 fbfd 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc4:	4861      	ldr	r0, [pc, #388]	; (8001e4c <stepmotor_drive+0x21c>)
 8001cc6:	f003 fbf7 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001cca:	e095      	b.n	8001df8 <stepmotor_drive+0x1c8>
	case 2:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd2:	485e      	ldr	r0, [pc, #376]	; (8001e4c <stepmotor_drive+0x21c>)
 8001cd4:	f003 fbf0 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cde:	485b      	ldr	r0, [pc, #364]	; (8001e4c <stepmotor_drive+0x21c>)
 8001ce0:	f003 fbea 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cea:	4858      	ldr	r0, [pc, #352]	; (8001e4c <stepmotor_drive+0x21c>)
 8001cec:	f003 fbe4 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf6:	4855      	ldr	r0, [pc, #340]	; (8001e4c <stepmotor_drive+0x21c>)
 8001cf8:	f003 fbde 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001cfc:	e07c      	b.n	8001df8 <stepmotor_drive+0x1c8>
	case 3:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d04:	4851      	ldr	r0, [pc, #324]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d06:	f003 fbd7 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d10:	484e      	ldr	r0, [pc, #312]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d12:	f003 fbd1 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1c:	484b      	ldr	r0, [pc, #300]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d1e:	f003 fbcb 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d28:	4848      	ldr	r0, [pc, #288]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d2a:	f003 fbc5 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001d2e:	e063      	b.n	8001df8 <stepmotor_drive+0x1c8>
	case 4:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d36:	4845      	ldr	r0, [pc, #276]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d38:	f003 fbbe 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d42:	4842      	ldr	r0, [pc, #264]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d44:	f003 fbb8 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d4e:	483f      	ldr	r0, [pc, #252]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d50:	f003 fbb2 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5a:	483c      	ldr	r0, [pc, #240]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d5c:	f003 fbac 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001d60:	e04a      	b.n	8001df8 <stepmotor_drive+0x1c8>
	case 5:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d68:	4838      	ldr	r0, [pc, #224]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d6a:	f003 fba5 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d74:	4835      	ldr	r0, [pc, #212]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d76:	f003 fb9f 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d80:	4832      	ldr	r0, [pc, #200]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d82:	f003 fb99 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001d86:	2201      	movs	r2, #1
 8001d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d8c:	482f      	ldr	r0, [pc, #188]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d8e:	f003 fb93 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001d92:	e031      	b.n	8001df8 <stepmotor_drive+0x1c8>
	case 6:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d9a:	482c      	ldr	r0, [pc, #176]	; (8001e4c <stepmotor_drive+0x21c>)
 8001d9c:	f003 fb8c 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da6:	4829      	ldr	r0, [pc, #164]	; (8001e4c <stepmotor_drive+0x21c>)
 8001da8:	f003 fb86 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db2:	4826      	ldr	r0, [pc, #152]	; (8001e4c <stepmotor_drive+0x21c>)
 8001db4:	f003 fb80 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbe:	4823      	ldr	r0, [pc, #140]	; (8001e4c <stepmotor_drive+0x21c>)
 8001dc0:	f003 fb7a 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001dc4:	e018      	b.n	8001df8 <stepmotor_drive+0x1c8>
	case 7:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dcc:	481f      	ldr	r0, [pc, #124]	; (8001e4c <stepmotor_drive+0x21c>)
 8001dce:	f003 fb73 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd8:	481c      	ldr	r0, [pc, #112]	; (8001e4c <stepmotor_drive+0x21c>)
 8001dda:	f003 fb6d 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de4:	4819      	ldr	r0, [pc, #100]	; (8001e4c <stepmotor_drive+0x21c>)
 8001de6:	f003 fb67 	bl	80054b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df0:	4816      	ldr	r0, [pc, #88]	; (8001e4c <stepmotor_drive+0x21c>)
 8001df2:	f003 fb61 	bl	80054b8 <HAL_GPIO_WritePin>
		break;
 8001df6:	bf00      	nop
	}
	if (direction == 1)  // 정회전
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d110      	bne.n	8001e20 <stepmotor_drive+0x1f0>
	{
		step++;   // for (step=0; step < 8; step++)
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <stepmotor_drive+0x218>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <stepmotor_drive+0x218>)
 8001e06:	6013      	str	r3, [r2, #0]
		step %= 8;  // 다음 진행할 step 준비
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <stepmotor_drive+0x218>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	425a      	negs	r2, r3
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	f002 0207 	and.w	r2, r2, #7
 8001e16:	bf58      	it	pl
 8001e18:	4253      	negpl	r3, r2
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <stepmotor_drive+0x218>)
 8001e1c:	6013      	str	r3, [r2, #0]
	else if (direction == 2) // 역회전
	{
		step--;
		if (step < 0) step = 7;
	}
}
 8001e1e:	e00e      	b.n	8001e3e <stepmotor_drive+0x20e>
	else if (direction == 2) // 역회전
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d10b      	bne.n	8001e3e <stepmotor_drive+0x20e>
		step--;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <stepmotor_drive+0x218>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <stepmotor_drive+0x218>)
 8001e2e:	6013      	str	r3, [r2, #0]
		if (step < 0) step = 7;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <stepmotor_drive+0x218>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da02      	bge.n	8001e3e <stepmotor_drive+0x20e>
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <stepmotor_drive+0x218>)
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	601a      	str	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000c18 	.word	0x20000c18
 8001e4c:	40020c00 	.word	0x40020c00

08001e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	210f      	movs	r1, #15
 8001e92:	f06f 0001 	mvn.w	r0, #1
 8001e96:	f001 fe3f 	bl	8003b18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_ADC_MspInit+0x8c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12f      	bne.n	8001f2a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_ADC_MspInit+0x90>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_ADC_MspInit+0x90>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_ADC_MspInit+0x90>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_ADC_MspInit+0x90>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_ADC_MspInit+0x90>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_ADC_MspInit+0x90>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f02:	2310      	movs	r3, #16
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f06:	2303      	movs	r3, #3
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <HAL_ADC_MspInit+0x94>)
 8001f16:	f003 f90b 	bl	8005130 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	2012      	movs	r0, #18
 8001f20:	f001 fdfa 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f24:	2012      	movs	r0, #18
 8001f26:	f001 fe13 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40012000 	.word	0x40012000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000

08001f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_I2C_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12c      	bne.n	8001fbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f84:	2312      	movs	r3, #18
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f90:	2304      	movs	r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480c      	ldr	r0, [pc, #48]	; (8001fcc <HAL_I2C_MspInit+0x8c>)
 8001f9c:	f003 f8c8 	bl	8005130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020400 	.word	0x40020400

08001fd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	2230      	movs	r2, #48	; 0x30
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f017 fbac 	bl	801973e <memset>
  if(hrtc->Instance==RTC)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_RTC_MspInit+0x4c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fd3a 	bl	8006a78 <HAL_RCCEx_PeriphCLKConfig>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800200a:	f7ff fd93 	bl	8001b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_RTC_MspInit+0x50>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002014:	bf00      	nop
 8002016:	3738      	adds	r7, #56	; 0x38
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40002800 	.word	0x40002800
 8002020:	42470e3c 	.word	0x42470e3c

08002024 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d115      	bne.n	8002062 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_TIM_PWM_MspInit+0x48>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_TIM_PWM_MspInit+0x48>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_TIM_PWM_MspInit+0x48>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2105      	movs	r1, #5
 8002056:	201c      	movs	r0, #28
 8002058:	f001 fd5e 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800205c:	201c      	movs	r0, #28
 800205e:	f001 fd77 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_TIM_IC_MspInit+0x94>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d133      	bne.n	80020fa <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_TIM_IC_MspInit+0x98>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_TIM_IC_MspInit+0x98>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_TIM_IC_MspInit+0x98>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_TIM_IC_MspInit+0x98>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_TIM_IC_MspInit+0x98>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_TIM_IC_MspInit+0x98>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80020ca:	2340      	movs	r3, #64	; 0x40
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020da:	2302      	movs	r3, #2
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <HAL_TIM_IC_MspInit+0x9c>)
 80020e6:	f003 f823 	bl	8005130 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2105      	movs	r1, #5
 80020ee:	201d      	movs	r0, #29
 80020f0:	f001 fd12 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020f4:	201d      	movs	r0, #29
 80020f6:	f001 fd2b 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3728      	adds	r7, #40	; 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40000400 	.word	0x40000400
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_TIM_Base_MspInit+0xf0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d116      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a36      	ldr	r2, [pc, #216]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2105      	movs	r1, #5
 8002142:	201e      	movs	r0, #30
 8002144:	f001 fce8 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002148:	201e      	movs	r0, #30
 800214a:	f001 fd01 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800214e:	e052      	b.n	80021f6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_TIM_Base_MspInit+0xf8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d116      	bne.n	8002188 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2105      	movs	r1, #5
 800217a:	2032      	movs	r0, #50	; 0x32
 800217c:	f001 fccc 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002180:	2032      	movs	r0, #50	; 0x32
 8002182:	f001 fce5 	bl	8003b50 <HAL_NVIC_EnableIRQ>
}
 8002186:	e036      	b.n	80021f6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1f      	ldr	r2, [pc, #124]	; (800220c <HAL_TIM_Base_MspInit+0xfc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d116      	bne.n	80021c0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2105      	movs	r1, #5
 80021b2:	2019      	movs	r0, #25
 80021b4:	f001 fcb0 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021b8:	2019      	movs	r0, #25
 80021ba:	f001 fcc9 	bl	8003b50 <HAL_NVIC_EnableIRQ>
}
 80021be:	e01a      	b.n	80021f6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_TIM_Base_MspInit+0x100>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d115      	bne.n	80021f6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_TIM_Base_MspInit+0xf4>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2105      	movs	r1, #5
 80021ea:	201a      	movs	r0, #26
 80021ec:	f001 fc94 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80021f0:	201a      	movs	r0, #26
 80021f2:	f001 fcad 	bl	8003b50 <HAL_NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40000800 	.word	0x40000800
 8002204:	40023800 	.word	0x40023800
 8002208:	40000c00 	.word	0x40000c00
 800220c:	40014400 	.word	0x40014400
 8002210:	40014800 	.word	0x40014800

08002214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d11e      	bne.n	8002274 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_TIM_MspPostInit+0xb0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <HAL_TIM_MspPostInit+0xb0>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_TIM_MspPostInit+0xb0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002252:	2320      	movs	r3, #32
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002262:	2301      	movs	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	4816      	ldr	r0, [pc, #88]	; (80022c8 <HAL_TIM_MspPostInit+0xb4>)
 800226e:	f002 ff5f 	bl	8005130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002272:	e022      	b.n	80022ba <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_TIM_MspPostInit+0xb8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11d      	bne.n	80022ba <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_TIM_MspPostInit+0xb0>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_TIM_MspPostInit+0xb0>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_TIM_MspPostInit+0xb0>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800229a:	2308      	movs	r3, #8
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022aa:	2302      	movs	r3, #2
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <HAL_TIM_MspPostInit+0xb4>)
 80022b6:	f002 ff3b 	bl	8005130 <HAL_GPIO_Init>
}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40000c00 	.word	0x40000c00

080022d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <HAL_UART_MspInit+0x108>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d135      	bne.n	800235e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_UART_MspInit+0x10c>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_UART_MspInit+0x10c>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_UART_MspInit+0x10c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_UART_MspInit+0x10c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a31      	ldr	r2, [pc, #196]	; (80023dc <HAL_UART_MspInit+0x10c>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HAL_UART_MspInit+0x10c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800232a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800233c:	2307      	movs	r3, #7
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4826      	ldr	r0, [pc, #152]	; (80023e0 <HAL_UART_MspInit+0x110>)
 8002348:	f002 fef2 	bl	8005130 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2105      	movs	r1, #5
 8002350:	2027      	movs	r0, #39	; 0x27
 8002352:	f001 fbe1 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002356:	2027      	movs	r0, #39	; 0x27
 8002358:	f001 fbfa 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800235c:	e038      	b.n	80023d0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_UART_MspInit+0x114>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d133      	bne.n	80023d0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_UART_MspInit+0x10c>)
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_UART_MspInit+0x10c>)
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	6453      	str	r3, [r2, #68]	; 0x44
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_UART_MspInit+0x10c>)
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_UART_MspInit+0x10c>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_UART_MspInit+0x10c>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6313      	str	r3, [r2, #48]	; 0x30
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_UART_MspInit+0x10c>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a0:	23c0      	movs	r3, #192	; 0xc0
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023b0:	2308      	movs	r3, #8
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	480b      	ldr	r0, [pc, #44]	; (80023e8 <HAL_UART_MspInit+0x118>)
 80023bc:	f002 feb8 	bl	8005130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2105      	movs	r1, #5
 80023c4:	2047      	movs	r0, #71	; 0x47
 80023c6:	f001 fba7 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023ca:	2047      	movs	r0, #71	; 0x47
 80023cc:	f001 fbc0 	bl	8003b50 <HAL_NVIC_EnableIRQ>
}
 80023d0:	bf00      	nop
 80023d2:	3730      	adds	r7, #48	; 0x30
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40004800 	.word	0x40004800
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40011400 	.word	0x40011400
 80023e8:	40020800 	.word	0x40020800

080023ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240c:	d13f      	bne.n	800248e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800242a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800243c:	230a      	movs	r3, #10
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4815      	ldr	r0, [pc, #84]	; (800249c <HAL_PCD_MspInit+0xb0>)
 8002448:	f002 fe72 	bl	8005130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800244c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	480e      	ldr	r0, [pc, #56]	; (800249c <HAL_PCD_MspInit+0xb0>)
 8002462:	f002 fe65 	bl	8005130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_PCD_MspInit+0xac>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	6353      	str	r3, [r2, #52]	; 0x34
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_PCD_MspInit+0xac>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000

080024a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	4b33      	ldr	r3, [pc, #204]	; (8002584 <HAL_InitTick+0xe4>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	4a32      	ldr	r2, [pc, #200]	; (8002584 <HAL_InitTick+0xe4>)
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	6413      	str	r3, [r2, #64]	; 0x40
 80024c0:	4b30      	ldr	r3, [pc, #192]	; (8002584 <HAL_InitTick+0xe4>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024cc:	f107 0210 	add.w	r2, r7, #16
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f004 fa9c 	bl	8006a14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024e6:	f004 fa6d 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80024ea:	6378      	str	r0, [r7, #52]	; 0x34
 80024ec:	e004      	b.n	80024f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024ee:	f004 fa69 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80024f2:	4603      	mov	r3, r0
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_InitTick+0xe8>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	0c9b      	lsrs	r3, r3, #18
 8002502:	3b01      	subs	r3, #1
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <HAL_InitTick+0xec>)
 8002508:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_InitTick+0xf0>)
 800250a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_InitTick+0xec>)
 800250e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002512:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_InitTick+0xec>)
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <HAL_InitTick+0xec>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_InitTick+0xec>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_InitTick+0xec>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800252c:	4817      	ldr	r0, [pc, #92]	; (800258c <HAL_InitTick+0xec>)
 800252e:	f004 fe98 	bl	8007262 <HAL_TIM_Base_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002538:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800253c:	2b00      	cmp	r3, #0
 800253e:	d11b      	bne.n	8002578 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002540:	4812      	ldr	r0, [pc, #72]	; (800258c <HAL_InitTick+0xec>)
 8002542:	f004 fedd 	bl	8007300 <HAL_TIM_Base_Start_IT>
 8002546:	4603      	mov	r3, r0
 8002548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800254c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002550:	2b00      	cmp	r3, #0
 8002552:	d111      	bne.n	8002578 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002554:	2036      	movs	r0, #54	; 0x36
 8002556:	f001 fafb 	bl	8003b50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d808      	bhi.n	8002572 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	2036      	movs	r0, #54	; 0x36
 8002566:	f001 fad7 	bl	8003b18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_InitTick+0xf4>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e002      	b.n	8002578 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800257c:	4618      	mov	r0, r3
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	431bde83 	.word	0x431bde83
 800258c:	20000c1c 	.word	0x20000c1c
 8002590:	40001000 	.word	0x40001000
 8002594:	20000140 	.word	0x20000140

08002598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800259c:	e7fe      	b.n	800259c <NMI_Handler+0x4>

0800259e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <HardFault_Handler+0x4>

080025a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <MemManage_Handler+0x4>

080025aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <BusFault_Handler+0x4>

080025b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <UsageFault_Handler+0x4>

080025b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f002 ff8f 	bl	80054ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 80025d6:	2004      	movs	r0, #4
 80025d8:	f002 ff88 	bl	80054ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 80025e4:	2008      	movs	r0, #8
 80025e6:	f002 ff81 	bl	80054ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <ADC_IRQHandler+0x10>)
 80025f6:	f000 fe6d 	bl	80032d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200003b4 	.word	0x200003b4

08002604 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800260a:	f005 fa8f 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000590 	.word	0x20000590

08002618 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800261e:	f005 fa85 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200005d8 	.word	0x200005d8

0800262c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TIM2_IRQHandler+0x10>)
 8002632:	f005 fa7b 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000470 	.word	0x20000470

08002640 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <TIM3_IRQHandler+0x10>)
 8002646:	f005 fa71 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200004b8 	.word	0x200004b8

08002654 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <TIM4_IRQHandler+0x10>)
 800265a:	f005 fa67 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000500 	.word	0x20000500

08002668 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <USART3_IRQHandler+0x10>)
 800266e:	f006 fbc7 	bl	8008e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000620 	.word	0x20000620

0800267c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <TIM5_IRQHandler+0x10>)
 8002682:	f005 fa53 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000548 	.word	0x20000548

08002690 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <TIM6_DAC_IRQHandler+0x10>)
 8002696:	f005 fa49 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000c1c 	.word	0x20000c1c

080026a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <ETH_IRQHandler+0x10>)
 80026aa:	f001 fe6b 	bl	8004384 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000581c 	.word	0x2000581c

080026b8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <ETH_WKUP_IRQHandler+0x10>)
 80026be:	f001 fe61 	bl	8004384 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000581c 	.word	0x2000581c

080026cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <USART6_IRQHandler+0x10>)
 80026d2:	f006 fb95 	bl	8008e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000664 	.word	0x20000664

080026e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return 1;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_kill>:

int _kill(int pid, int sig)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <_kill+0x20>)
 80026fc:	2216      	movs	r2, #22
 80026fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	2000dc04 	.word	0x2000dc04

08002714 <_exit>:

void _exit (int status)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ffe5 	bl	80026f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002726:	e7fe      	b.n	8002726 <_exit+0x12>

08002728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e00a      	b.n	8002750 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800273a:	f3af 8000 	nop.w
 800273e:	4601      	mov	r1, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	b2ca      	uxtb	r2, r1
 8002748:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf0      	blt.n	800273a <_read+0x12>
  }

  return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e009      	b.n	8002788 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	60ba      	str	r2, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe facb 	bl	8000d18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbf1      	blt.n	8002774 <_write+0x12>
  }
  return len;
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_close>:

int _close(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c2:	605a      	str	r2, [r3, #4]
  return 0;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <_isatty>:

int _isatty(int file)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <_sbrk+0x5c>)
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <_sbrk+0x60>)
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <_sbrk+0x64>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <_sbrk+0x68>)
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d205      	bcs.n	8002840 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <_sbrk+0x6c>)
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e009      	b.n	8002854 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	4a06      	ldr	r2, [pc, #24]	; (8002868 <_sbrk+0x64>)
 8002850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	20030000 	.word	0x20030000
 8002864:	00000400 	.word	0x00000400
 8002868:	20000c64 	.word	0x20000c64
 800286c:	2000dc08 	.word	0x2000dc08
 8002870:	2000dc04 	.word	0x2000dc04

08002874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <SystemInit+0x20>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <SystemInit+0x20>)
 8002880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a32      	ldr	r2, [pc, #200]	; (800296c <HAL_UART_RxCpltCallback+0xd4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d12c      	bne.n	8002902 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_UART_RxCpltCallback+0xd8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b27      	cmp	r3, #39	; 0x27
 80028ae:	dc1d      	bgt.n	80028ec <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_UART_RxCpltCallback+0xdc>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b0a      	cmp	r3, #10
 80028b6:	d003      	beq.n	80028c0 <HAL_UART_RxCpltCallback+0x28>
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <HAL_UART_RxCpltCallback+0xdc>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b0d      	cmp	r3, #13
 80028be:	d10b      	bne.n	80028d8 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_UART_RxCpltCallback+0xd8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	; (8002978 <HAL_UART_RxCpltCallback+0xe0>)
 80028c6:	2100      	movs	r1, #0
 80028c8:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80028ca:	4b2c      	ldr	r3, [pc, #176]	; (800297c <HAL_UART_RxCpltCallback+0xe4>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_UART_RxCpltCallback+0xd8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e00f      	b.n	80028f8 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_UART_RxCpltCallback+0xd8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	4924      	ldr	r1, [pc, #144]	; (8002970 <HAL_UART_RxCpltCallback+0xd8>)
 80028e0:	600a      	str	r2, [r1, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_UART_RxCpltCallback+0xdc>)
 80028e4:	7811      	ldrb	r1, [r2, #0]
 80028e6:	4a24      	ldr	r2, [pc, #144]	; (8002978 <HAL_UART_RxCpltCallback+0xe0>)
 80028e8:	54d1      	strb	r1, [r2, r3]
 80028ea:	e005      	b.n	80028f8 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 80028ec:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_UART_RxCpltCallback+0xd8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 80028f2:	4823      	ldr	r0, [pc, #140]	; (8002980 <HAL_UART_RxCpltCallback+0xe8>)
 80028f4:	f017 f846 	bl	8019984 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80028f8:	2201      	movs	r2, #1
 80028fa:	491e      	ldr	r1, [pc, #120]	; (8002974 <HAL_UART_RxCpltCallback+0xdc>)
 80028fc:	481b      	ldr	r0, [pc, #108]	; (800296c <HAL_UART_RxCpltCallback+0xd4>)
 80028fe:	f006 fa4e 	bl	8008d9e <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_UART_RxCpltCallback+0xec>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d12c      	bne.n	8002964 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_UART_RxCpltCallback+0xf0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b27      	cmp	r3, #39	; 0x27
 8002910:	dc1d      	bgt.n	800294e <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_UART_RxCpltCallback+0xf4>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b0a      	cmp	r3, #10
 8002918:	d003      	beq.n	8002922 <HAL_UART_RxCpltCallback+0x8a>
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_UART_RxCpltCallback+0xf4>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b0d      	cmp	r3, #13
 8002920:	d10b      	bne.n	800293a <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_UART_RxCpltCallback+0xd8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_UART_RxCpltCallback+0xf8>)
 8002928:	2100      	movs	r1, #0
 800292a:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_UART_RxCpltCallback+0xfc>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_UART_RxCpltCallback+0xf0>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e00f      	b.n	800295a <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_UART_RxCpltCallback+0xf0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	4911      	ldr	r1, [pc, #68]	; (8002988 <HAL_UART_RxCpltCallback+0xf0>)
 8002942:	600a      	str	r2, [r1, #0]
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_UART_RxCpltCallback+0xf4>)
 8002946:	7811      	ldrb	r1, [r2, #0]
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_UART_RxCpltCallback+0xf8>)
 800294a:	54d1      	strb	r1, [r2, r3]
 800294c:	e005      	b.n	800295a <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_UART_RxCpltCallback+0xf0>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8002954:	4810      	ldr	r0, [pc, #64]	; (8002998 <HAL_UART_RxCpltCallback+0x100>)
 8002956:	f017 f815 	bl	8019984 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 800295a:	2201      	movs	r2, #1
 800295c:	490b      	ldr	r1, [pc, #44]	; (800298c <HAL_UART_RxCpltCallback+0xf4>)
 800295e:	4809      	ldr	r0, [pc, #36]	; (8002984 <HAL_UART_RxCpltCallback+0xec>)
 8002960:	f006 fa1d 	bl	8008d9e <HAL_UART_Receive_IT>
	}
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000620 	.word	0x20000620
 8002970:	20000c90 	.word	0x20000c90
 8002974:	20000bc8 	.word	0x20000bc8
 8002978:	20000c68 	.word	0x20000c68
 800297c:	20000c94 	.word	0x20000c94
 8002980:	0801ad20 	.word	0x0801ad20
 8002984:	20000664 	.word	0x20000664
 8002988:	20000cc0 	.word	0x20000cc0
 800298c:	20000bc9 	.word	0x20000bc9
 8002990:	20000c98 	.word	0x20000c98
 8002994:	20000cc4 	.word	0x20000cc4
 8002998:	0801ad38 	.word	0x0801ad38

0800299c <pc_command_processing>:

void pc_command_processing(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 80029a0:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <pc_command_processing+0x104>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d079      	beq.n	8002a9c <pc_command_processing+0x100>
	{
		newline_detect_flag=0;
 80029a8:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <pc_command_processing+0x104>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 80029ae:	483d      	ldr	r0, [pc, #244]	; (8002aa4 <pc_command_processing+0x108>)
 80029b0:	f016 ffe8 	bl	8019984 <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80029b4:	220a      	movs	r2, #10
 80029b6:	493c      	ldr	r1, [pc, #240]	; (8002aa8 <pc_command_processing+0x10c>)
 80029b8:	483a      	ldr	r0, [pc, #232]	; (8002aa4 <pc_command_processing+0x108>)
 80029ba:	f017 f906 	bl	8019bca <strncmp>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <pc_command_processing+0x2e>
		{
			led_all_on();
 80029c4:	f7fe f990 	bl	8000ce8 <led_all_on>
			return;
 80029c8:	e068      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80029ca:	220b      	movs	r2, #11
 80029cc:	4937      	ldr	r1, [pc, #220]	; (8002aac <pc_command_processing+0x110>)
 80029ce:	4835      	ldr	r0, [pc, #212]	; (8002aa4 <pc_command_processing+0x108>)
 80029d0:	f017 f8fb 	bl	8019bca <strncmp>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <pc_command_processing+0x44>
		{
			led_all_off();
 80029da:	f7fe f991 	bl	8000d00 <led_all_off>
			return;
 80029de:	e05d      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80029e0:	220b      	movs	r2, #11
 80029e2:	4933      	ldr	r1, [pc, #204]	; (8002ab0 <pc_command_processing+0x114>)
 80029e4:	482f      	ldr	r0, [pc, #188]	; (8002aa4 <pc_command_processing+0x108>)
 80029e6:	f017 f8f0 	bl	8019bca <strncmp>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <pc_command_processing+0x5a>
		{
			led_on_down();
 80029f0:	f7fe f94a 	bl	8000c88 <led_on_down>
			return;
 80029f4:	e052      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80029f6:	2209      	movs	r2, #9
 80029f8:	492e      	ldr	r1, [pc, #184]	; (8002ab4 <pc_command_processing+0x118>)
 80029fa:	482a      	ldr	r0, [pc, #168]	; (8002aa4 <pc_command_processing+0x108>)
 80029fc:	f017 f8e5 	bl	8019bca <strncmp>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <pc_command_processing+0x70>
		{
			led_on_up();
 8002a06:	f7fe f90f 	bl	8000c28 <led_on_up>
			return;
 8002a0a:	e047      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a0c:	2209      	movs	r2, #9
 8002a0e:	492a      	ldr	r1, [pc, #168]	; (8002ab8 <pc_command_processing+0x11c>)
 8002a10:	4824      	ldr	r0, [pc, #144]	; (8002aa4 <pc_command_processing+0x108>)
 8002a12:	f017 f8da 	bl	8019bca <strncmp>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <pc_command_processing+0x86>
		{
			flower_on();
 8002a1c:	f7fe f864 	bl	8000ae8 <flower_on>
			return;
 8002a20:	e03c      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a22:	220a      	movs	r2, #10
 8002a24:	4925      	ldr	r1, [pc, #148]	; (8002abc <pc_command_processing+0x120>)
 8002a26:	481f      	ldr	r0, [pc, #124]	; (8002aa4 <pc_command_processing+0x108>)
 8002a28:	f017 f8cf 	bl	8019bca <strncmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <pc_command_processing+0x9c>
		{
			flower_off();
 8002a32:	f7fe f889 	bl	8000b48 <flower_off>
			return;
 8002a36:	e031      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a38:	220d      	movs	r2, #13
 8002a3a:	4921      	ldr	r1, [pc, #132]	; (8002ac0 <pc_command_processing+0x124>)
 8002a3c:	4819      	ldr	r0, [pc, #100]	; (8002aa4 <pc_command_processing+0x108>)
 8002a3e:	f017 f8c4 	bl	8019bca <strncmp>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <pc_command_processing+0xb2>
		{
			led_keepon_up();
 8002a48:	f7fe f8ae 	bl	8000ba8 <led_keepon_up>
			return;
 8002a4c:	e026      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a4e:	220f      	movs	r2, #15
 8002a50:	491c      	ldr	r1, [pc, #112]	; (8002ac4 <pc_command_processing+0x128>)
 8002a52:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <pc_command_processing+0x108>)
 8002a54:	f017 f8b9 	bl	8019bca <strncmp>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <pc_command_processing+0xc8>
		{
			led_keepon_down();
 8002a5e:	f7fe f8c3 	bl	8000be8 <led_keepon_down>
			return;
 8002a62:	e01b      	b.n	8002a9c <pc_command_processing+0x100>
		}
		//dht11time150
		if (!strncmp(rx_buff, "dht11time", strlen("dht11time")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a64:	2209      	movs	r2, #9
 8002a66:	4918      	ldr	r1, [pc, #96]	; (8002ac8 <pc_command_processing+0x12c>)
 8002a68:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <pc_command_processing+0x108>)
 8002a6a:	f017 f8ae 	bl	8019bca <strncmp>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <pc_command_processing+0xe8>
		{
			dht11time = atoi(rx_buff+9);
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <pc_command_processing+0x130>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f016 fd08 	bl	801948c <atoi>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <pc_command_processing+0x134>)
 8002a80:	6013      	str	r3, [r2, #0]
			return;
 8002a82:	e00b      	b.n	8002a9c <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "setrtc", strlen("setrtc")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a84:	2206      	movs	r2, #6
 8002a86:	4913      	ldr	r1, [pc, #76]	; (8002ad4 <pc_command_processing+0x138>)
 8002a88:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <pc_command_processing+0x108>)
 8002a8a:	f017 f89e 	bl	8019bca <strncmp>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <pc_command_processing+0x100>
		{
			set_rtc(rx_buff);
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <pc_command_processing+0x108>)
 8002a96:	f7fd ff85 	bl	80009a4 <set_rtc>
			return;
 8002a9a:	bf00      	nop
		}

	}
}
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000c94 	.word	0x20000c94
 8002aa4:	20000c68 	.word	0x20000c68
 8002aa8:	0801ad54 	.word	0x0801ad54
 8002aac:	0801ad60 	.word	0x0801ad60
 8002ab0:	0801ad6c 	.word	0x0801ad6c
 8002ab4:	0801ad78 	.word	0x0801ad78
 8002ab8:	0801ad84 	.word	0x0801ad84
 8002abc:	0801ad90 	.word	0x0801ad90
 8002ac0:	0801ad9c 	.word	0x0801ad9c
 8002ac4:	0801adac 	.word	0x0801adac
 8002ac8:	0801adbc 	.word	0x0801adbc
 8002acc:	20000c71 	.word	0x20000c71
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	0801adc8 	.word	0x0801adc8

08002ad8 <bt_command_processing>:

void bt_command_processing(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002adc:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <bt_command_processing+0xcc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d05d      	beq.n	8002ba0 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 8002ae4:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <bt_command_processing+0xcc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8002aea:	482f      	ldr	r0, [pc, #188]	; (8002ba8 <bt_command_processing+0xd0>)
 8002aec:	f016 ff4a 	bl	8019984 <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002af0:	220a      	movs	r2, #10
 8002af2:	492e      	ldr	r1, [pc, #184]	; (8002bac <bt_command_processing+0xd4>)
 8002af4:	482c      	ldr	r0, [pc, #176]	; (8002ba8 <bt_command_processing+0xd0>)
 8002af6:	f017 f868 	bl	8019bca <strncmp>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <bt_command_processing+0x2e>
		{
			led_all_on();
 8002b00:	f7fe f8f2 	bl	8000ce8 <led_all_on>
			return;
 8002b04:	e04c      	b.n	8002ba0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b06:	220b      	movs	r2, #11
 8002b08:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <bt_command_processing+0xd8>)
 8002b0a:	4827      	ldr	r0, [pc, #156]	; (8002ba8 <bt_command_processing+0xd0>)
 8002b0c:	f017 f85d 	bl	8019bca <strncmp>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <bt_command_processing+0x44>
		{
			led_all_off();
 8002b16:	f7fe f8f3 	bl	8000d00 <led_all_off>
			return;
 8002b1a:	e041      	b.n	8002ba0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b1c:	220b      	movs	r2, #11
 8002b1e:	4925      	ldr	r1, [pc, #148]	; (8002bb4 <bt_command_processing+0xdc>)
 8002b20:	4821      	ldr	r0, [pc, #132]	; (8002ba8 <bt_command_processing+0xd0>)
 8002b22:	f017 f852 	bl	8019bca <strncmp>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <bt_command_processing+0x5a>
		{
			led_on_down();
 8002b2c:	f7fe f8ac 	bl	8000c88 <led_on_down>
			return;
 8002b30:	e036      	b.n	8002ba0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b32:	2209      	movs	r2, #9
 8002b34:	4920      	ldr	r1, [pc, #128]	; (8002bb8 <bt_command_processing+0xe0>)
 8002b36:	481c      	ldr	r0, [pc, #112]	; (8002ba8 <bt_command_processing+0xd0>)
 8002b38:	f017 f847 	bl	8019bca <strncmp>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <bt_command_processing+0x70>
		{
			led_on_up();
 8002b42:	f7fe f871 	bl	8000c28 <led_on_up>
			return;
 8002b46:	e02b      	b.n	8002ba0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b48:	2209      	movs	r2, #9
 8002b4a:	491c      	ldr	r1, [pc, #112]	; (8002bbc <bt_command_processing+0xe4>)
 8002b4c:	4816      	ldr	r0, [pc, #88]	; (8002ba8 <bt_command_processing+0xd0>)
 8002b4e:	f017 f83c 	bl	8019bca <strncmp>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <bt_command_processing+0x86>
		{
			flower_on();
 8002b58:	f7fd ffc6 	bl	8000ae8 <flower_on>
			return;
 8002b5c:	e020      	b.n	8002ba0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b5e:	220a      	movs	r2, #10
 8002b60:	4917      	ldr	r1, [pc, #92]	; (8002bc0 <bt_command_processing+0xe8>)
 8002b62:	4811      	ldr	r0, [pc, #68]	; (8002ba8 <bt_command_processing+0xd0>)
 8002b64:	f017 f831 	bl	8019bca <strncmp>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <bt_command_processing+0x9c>
		{
			flower_off();
 8002b6e:	f7fd ffeb 	bl	8000b48 <flower_off>
			return;
 8002b72:	e015      	b.n	8002ba0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b74:	220d      	movs	r2, #13
 8002b76:	4913      	ldr	r1, [pc, #76]	; (8002bc4 <bt_command_processing+0xec>)
 8002b78:	480b      	ldr	r0, [pc, #44]	; (8002ba8 <bt_command_processing+0xd0>)
 8002b7a:	f017 f826 	bl	8019bca <strncmp>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <bt_command_processing+0xb2>
		{
			led_keepon_up();
 8002b84:	f7fe f810 	bl	8000ba8 <led_keepon_up>
			return;
 8002b88:	e00a      	b.n	8002ba0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <bt_command_processing+0xf0>)
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <bt_command_processing+0xd0>)
 8002b90:	f017 f81b 	bl	8019bca <strncmp>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <bt_command_processing+0xc8>
		{
			led_keepon_down();
 8002b9a:	f7fe f825 	bl	8000be8 <led_keepon_down>
			return;
 8002b9e:	bf00      	nop
		}
	}
}
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000cc4 	.word	0x20000cc4
 8002ba8:	20000c98 	.word	0x20000c98
 8002bac:	0801ad54 	.word	0x0801ad54
 8002bb0:	0801ad60 	.word	0x0801ad60
 8002bb4:	0801ad6c 	.word	0x0801ad6c
 8002bb8:	0801ad78 	.word	0x0801ad78
 8002bbc:	0801ad84 	.word	0x0801ad84
 8002bc0:	0801ad90 	.word	0x0801ad90
 8002bc4:	0801ad9c 	.word	0x0801ad9c
 8002bc8:	0801adac 	.word	0x0801adac

08002bcc <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8002bd2:	f014 f85b 	bl	8016c8c <udp_new>
 8002bd6:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00f      	beq.n	8002bfe <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8002bde:	2207      	movs	r2, #7
 8002be0:	4909      	ldr	r1, [pc, #36]	; (8002c08 <udp_echoserver_init+0x3c>)
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f013 ff14 	bl	8016a10 <udp_bind>
 8002be8:	4603      	mov	r3, r0
 8002bea:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8002bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4905      	ldr	r1, [pc, #20]	; (8002c0c <udp_echoserver_init+0x40>)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f014 f827 	bl	8016c4c <udp_recv>
      }
   }
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	0801daa8 	.word	0x0801daa8
 8002c0c:	08002c11 	.word	0x08002c11

08002c10 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8002c1e:	2207      	movs	r2, #7
 8002c20:	6839      	ldr	r1, [r7, #0]
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f013 ff7c 	bl	8016b20 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	68b8      	ldr	r0, [r7, #8]
 8002c2c:	f013 fd06 	bl	801663c <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8002c30:	68b8      	ldr	r0, [r7, #8]
 8002c32:	f013 ffe3 	bl	8016bfc <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f00d fd2c 	bl	8010694 <pbuf_free>
   
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d11f      	bne.n	8002c96 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002c6e:	e012      	b.n	8002c96 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d10d      	bne.n	8002c96 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002c80:	2100      	movs	r1, #0
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f005 fa80 	bl	8008188 <HAL_TIM_ReadCapturedValue>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002c8e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_TIM_IC_CaptureCallback+0x68>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	20000cd0 	.word	0x20000cd0
 8002ca8:	20000cc8 	.word	0x20000cc8
 8002cac:	20000ccc 	.word	0x20000ccc

08002cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb4:	480d      	ldr	r0, [pc, #52]	; (8002cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cb6:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cbc:	e002      	b.n	8002cc4 <LoopCopyDataInit>

08002cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc2:	3304      	adds	r3, #4

08002cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc8:	d3f9      	bcc.n	8002cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ccc:	4c0b      	ldr	r4, [pc, #44]	; (8002cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd0:	e001      	b.n	8002cd6 <LoopFillZerobss>

08002cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd4:	3204      	adds	r2, #4

08002cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd8:	d3fb      	bcc.n	8002cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cda:	f7ff fdcb 	bl	8002874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cde:	f016 fccf 	bl	8019680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ce2:	f7fe f8cb 	bl	8000e7c <main>
  bx  lr    
 8002ce6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ce8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002cf4:	0801dd14 	.word	0x0801dd14
  ldr r2, =_sbss
 8002cf8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002cfc:	2000dc08 	.word	0x2000dc08

08002d00 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d00:	e7fe      	b.n	8002d00 <CAN1_RX0_IRQHandler>

08002d02 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <LAN8742_RegisterBusIO+0x28>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <LAN8742_RegisterBusIO+0x28>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <LAN8742_RegisterBusIO+0x28>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e014      	b.n	8002d5a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d17c      	bne.n	8002e80 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e01c      	b.n	8002dda <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f107 0208 	add.w	r2, r7, #8
 8002da8:	2112      	movs	r1, #18
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	4798      	blx	r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	da03      	bge.n	8002dbc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002db4:	f06f 0304 	mvn.w	r3, #4
 8002db8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002dba:	e00b      	b.n	8002dd4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d105      	bne.n	8002dd4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
         break;
 8002dd2:	e005      	b.n	8002de0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b1f      	cmp	r3, #31
 8002dde:	d9df      	bls.n	8002da0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b1f      	cmp	r3, #31
 8002de6:	d902      	bls.n	8002dee <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002de8:	f06f 0302 	mvn.w	r3, #2
 8002dec:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d145      	bne.n	8002e80 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6810      	ldr	r0, [r2, #0]
 8002dfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e00:	2100      	movs	r1, #0
 8002e02:	4798      	blx	r3
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db37      	blt.n	8002e7a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6810      	ldr	r0, [r2, #0]
 8002e12:	f107 0208 	add.w	r2, r7, #8
 8002e16:	2100      	movs	r1, #0
 8002e18:	4798      	blx	r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db28      	blt.n	8002e72 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4798      	blx	r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002e2a:	e01c      	b.n	8002e66 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4798      	blx	r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e3e:	d80e      	bhi.n	8002e5e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6810      	ldr	r0, [r2, #0]
 8002e48:	f107 0208 	add.w	r2, r7, #8
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4798      	blx	r3
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da07      	bge.n	8002e66 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002e56:	f06f 0304 	mvn.w	r3, #4
 8002e5a:	613b      	str	r3, [r7, #16]
                 break;
 8002e5c:	e010      	b.n	8002e80 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002e5e:	f06f 0301 	mvn.w	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
               break;
 8002e64:	e00c      	b.n	8002e80 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1dd      	bne.n	8002e2c <LAN8742_Init+0xc6>
 8002e70:	e006      	b.n	8002e80 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002e72:	f06f 0304 	mvn.w	r3, #4
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	e002      	b.n	8002e80 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002e7a:	f06f 0303 	mvn.w	r3, #3
 8002e7e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d112      	bne.n	8002eac <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	4798      	blx	r3
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002e90:	bf00      	nop
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	4798      	blx	r3
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ea4:	d9f5      	bls.n	8002e92 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002eac:	693b      	ldr	r3, [r7, #16]
 }
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6810      	ldr	r0, [r2, #0]
 8002eca:	f107 020c 	add.w	r2, r7, #12
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4798      	blx	r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da02      	bge.n	8002ede <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002ed8:	f06f 0304 	mvn.w	r3, #4
 8002edc:	e06e      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6810      	ldr	r0, [r2, #0]
 8002ee6:	f107 020c 	add.w	r2, r7, #12
 8002eea:	2101      	movs	r1, #1
 8002eec:	4798      	blx	r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da02      	bge.n	8002efa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002ef4:	f06f 0304 	mvn.w	r3, #4
 8002ef8:	e060      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002f04:	2301      	movs	r3, #1
 8002f06:	e059      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6810      	ldr	r0, [r2, #0]
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	2100      	movs	r1, #0
 8002f16:	4798      	blx	r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da02      	bge.n	8002f24 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002f1e:	f06f 0304 	mvn.w	r3, #4
 8002f22:	e04b      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11b      	bne.n	8002f66 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d006      	beq.n	8002f46 <LAN8742_GetLinkState+0x90>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002f42:	2302      	movs	r3, #2
 8002f44:	e03a      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e033      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	e02c      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002f62:	2305      	movs	r3, #5
 8002f64:	e02a      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6810      	ldr	r0, [r2, #0]
 8002f6e:	f107 020c 	add.w	r2, r7, #12
 8002f72:	211f      	movs	r1, #31
 8002f74:	4798      	blx	r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da02      	bge.n	8002f82 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002f7c:	f06f 0304 	mvn.w	r3, #4
 8002f80:	e01c      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002f8c:	2306      	movs	r3, #6
 8002f8e:	e015      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 031c 	and.w	r3, r3, #28
 8002f96:	2b18      	cmp	r3, #24
 8002f98:	d101      	bne.n	8002f9e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e00e      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 031c 	and.w	r3, r3, #28
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d101      	bne.n	8002fac <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e007      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 031c 	and.w	r3, r3, #28
 8002fb2:	2b14      	cmp	r3, #20
 8002fb4:	d101      	bne.n	8002fba <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e000      	b.n	8002fbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002fba:	2305      	movs	r3, #5
    }				
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_Init+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_Init+0x40>)
 8002fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_Init+0x40>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_Init+0x40>)
 8002fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <HAL_Init+0x40>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fec:	2003      	movs	r0, #3
 8002fee:	f000 fd88 	bl	8003b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff2:	200f      	movs	r0, #15
 8002ff4:	f7ff fa54 	bl	80024a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff8:	f7fe ff2a 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023c00 	.word	0x40023c00

08003008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_IncTick+0x20>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_IncTick+0x24>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4413      	add	r3, r2
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_IncTick+0x24>)
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000144 	.word	0x20000144
 800302c:	20000cd4 	.word	0x20000cd4

08003030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return uwTick;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_GetTick+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000cd4 	.word	0x20000cd4

08003048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7ff ffee 	bl	8003030 <HAL_GetTick>
 8003054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d005      	beq.n	800306e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_Delay+0x44>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800306e:	bf00      	nop
 8003070:	f7ff ffde 	bl	8003030 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d8f7      	bhi.n	8003070 <HAL_Delay+0x28>
  {
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000144 	.word	0x20000144

08003090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e033      	b.n	800310e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe fefa 	bl	8001ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d118      	bne.n	8003100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030d6:	f023 0302 	bic.w	r3, r3, #2
 80030da:	f043 0202 	orr.w	r2, r3, #2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fb5a 	bl	800379c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
 80030fe:	e001      	b.n	8003104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Start_IT+0x1a>
 800312e:	2302      	movs	r3, #2
 8003130:	e0bd      	b.n	80032ae <HAL_ADC_Start_IT+0x196>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d018      	beq.n	800317a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003158:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_ADC_Start_IT+0x1a4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_ADC_Start_IT+0x1a8>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0c9a      	lsrs	r2, r3, #18
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800316c:	e002      	b.n	8003174 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3b01      	subs	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f9      	bne.n	800316e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 8085 	bne.w	8003294 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c8:	d106      	bne.n	80031d8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f023 0206 	bic.w	r2, r3, #6
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
 80031d6:	e002      	b.n	80031de <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e6:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <HAL_ADC_Start_IT+0x1ac>)
 80031e8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031f2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2b00      	cmp	r3, #0
 8003212:	d12a      	bne.n	800326a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <HAL_ADC_Start_IT+0x1b0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d015      	beq.n	800324a <HAL_ADC_Start_IT+0x132>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <HAL_ADC_Start_IT+0x1b4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d105      	bne.n	8003234 <HAL_ADC_Start_IT+0x11c>
 8003228:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_ADC_Start_IT+0x1ac>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <HAL_ADC_Start_IT+0x1b8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d136      	bne.n	80032ac <HAL_ADC_Start_IT+0x194>
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_ADC_Start_IT+0x1ac>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d130      	bne.n	80032ac <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d129      	bne.n	80032ac <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e020      	b.n	80032ac <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <HAL_ADC_Start_IT+0x1b0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d11b      	bne.n	80032ac <HAL_ADC_Start_IT+0x194>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d114      	bne.n	80032ac <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	e00b      	b.n	80032ac <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000013c 	.word	0x2000013c
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	40012300 	.word	0x40012300
 80032c8:	40012000 	.word	0x40012000
 80032cc:	40012100 	.word	0x40012100
 80032d0:	40012200 	.word	0x40012200

080032d4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d049      	beq.n	800339e <HAL_ADC_IRQHandler+0xca>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d046      	beq.n	800339e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d12b      	bne.n	800338e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	d127      	bne.n	800338e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003356:	2b00      	cmp	r3, #0
 8003358:	d119      	bne.n	800338e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0220 	bic.w	r2, r2, #32
 8003368:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fd2a 	bl	8000de8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0212 	mvn.w	r2, #18
 800339c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d057      	beq.n	8003464 <HAL_ADC_IRQHandler+0x190>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d054      	beq.n	8003464 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d139      	bne.n	8003454 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d12b      	bne.n	8003454 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003406:	2b00      	cmp	r3, #0
 8003408:	d124      	bne.n	8003454 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11d      	bne.n	8003454 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800341c:	2b00      	cmp	r3, #0
 800341e:	d119      	bne.n	8003454 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa9d 	bl	8003994 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 020c 	mvn.w	r2, #12
 8003462:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d017      	beq.n	80034aa <HAL_ADC_IRQHandler+0x1d6>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d014      	beq.n	80034aa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10d      	bne.n	80034aa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f837 	bl	800350e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0201 	mvn.w	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_ADC_IRQHandler+0x218>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f043 0202 	orr.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0220 	mvn.w	r2, #32
 80034da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f820 	bl	8003522 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0220 	mvn.w	r2, #32
 80034ea:	601a      	str	r2, [r3, #0]
  }
}
 80034ec:	bf00      	nop
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1c>
 8003550:	2302      	movs	r3, #2
 8003552:	e113      	b.n	800377c <HAL_ADC_ConfigChannel+0x244>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d925      	bls.n	80035b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	2207      	movs	r2, #7
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43da      	mvns	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	400a      	ands	r2, r1
 8003588:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68d9      	ldr	r1, [r3, #12]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	4618      	mov	r0, r3
 800359c:	4603      	mov	r3, r0
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4403      	add	r3, r0
 80035a2:	3b1e      	subs	r3, #30
 80035a4:	409a      	lsls	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e022      	b.n	80035f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6919      	ldr	r1, [r3, #16]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	2207      	movs	r2, #7
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6919      	ldr	r1, [r3, #16]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4403      	add	r3, r0
 80035ec:	409a      	lsls	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d824      	bhi.n	8003648 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	3b05      	subs	r3, #5
 8003610:	221f      	movs	r2, #31
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	400a      	ands	r2, r1
 800361e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	4618      	mov	r0, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	3b05      	subs	r3, #5
 800363a:	fa00 f203 	lsl.w	r2, r0, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	635a      	str	r2, [r3, #52]	; 0x34
 8003646:	e04c      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d824      	bhi.n	800369a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	3b23      	subs	r3, #35	; 0x23
 8003662:	221f      	movs	r2, #31
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43da      	mvns	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	400a      	ands	r2, r1
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	3b23      	subs	r3, #35	; 0x23
 800368c:	fa00 f203 	lsl.w	r2, r0, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
 8003698:	e023      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	3b41      	subs	r3, #65	; 0x41
 80036ac:	221f      	movs	r2, #31
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	3b41      	subs	r3, #65	; 0x41
 80036d6:	fa00 f203 	lsl.w	r2, r0, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_ADC_ConfigChannel+0x250>)
 80036e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a28      	ldr	r2, [pc, #160]	; (800378c <HAL_ADC_ConfigChannel+0x254>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10f      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x1d8>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b12      	cmp	r3, #18
 80036f6:	d10b      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_ADC_ConfigChannel+0x254>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d12b      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x23a>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_ADC_ConfigChannel+0x258>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <HAL_ADC_ConfigChannel+0x1f4>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b11      	cmp	r3, #17
 800372a:	d122      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HAL_ADC_ConfigChannel+0x258>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d111      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_ADC_ConfigChannel+0x25c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a11      	ldr	r2, [pc, #68]	; (8003798 <HAL_ADC_ConfigChannel+0x260>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	0c9a      	lsrs	r2, r3, #18
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003764:	e002      	b.n	800376c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	3b01      	subs	r3, #1
 800376a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f9      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40012300 	.word	0x40012300
 800378c:	40012000 	.word	0x40012000
 8003790:	10000012 	.word	0x10000012
 8003794:	2000013c 	.word	0x2000013c
 8003798:	431bde83 	.word	0x431bde83

0800379c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <ADC_Init+0x1f0>)
 80037a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	021a      	lsls	r2, r3, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	4a58      	ldr	r2, [pc, #352]	; (8003990 <ADC_Init+0x1f4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e00f      	b.n	800389a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003898:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0202 	bic.w	r2, r2, #2
 80038a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7e1b      	ldrb	r3, [r3, #24]
 80038b4:	005a      	lsls	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6859      	ldr	r1, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	3b01      	subs	r3, #1
 80038f4:	035a      	lsls	r2, r3, #13
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e007      	b.n	8003910 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	3b01      	subs	r3, #1
 800392c:	051a      	lsls	r2, r3, #20
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003952:	025a      	lsls	r2, r3, #9
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	029a      	lsls	r2, r3, #10
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40012300 	.word	0x40012300
 8003990:	0f000001 	.word	0x0f000001

08003994 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_GetPriorityGrouping+0x18>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 0307 	and.w	r3, r3, #7
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	db0b      	blt.n	8003a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	4907      	ldr	r1, [pc, #28]	; (8003a44 <__NVIC_EnableIRQ+0x38>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000e100 	.word	0xe000e100

08003a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db0a      	blt.n	8003a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	490c      	ldr	r1, [pc, #48]	; (8003a94 <__NVIC_SetPriority+0x4c>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a70:	e00a      	b.n	8003a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4908      	ldr	r1, [pc, #32]	; (8003a98 <__NVIC_SetPriority+0x50>)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	440b      	add	r3, r1
 8003a86:	761a      	strb	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f1c3 0307 	rsb	r3, r3, #7
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf28      	it	cs
 8003aba:	2304      	movcs	r3, #4
 8003abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d902      	bls.n	8003acc <NVIC_EncodePriority+0x30>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3b03      	subs	r3, #3
 8003aca:	e000      	b.n	8003ace <NVIC_EncodePriority+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	401a      	ands	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	4313      	orrs	r3, r2
         );
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ff4c 	bl	80039a8 <__NVIC_SetPriorityGrouping>
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2a:	f7ff ff61 	bl	80039f0 <__NVIC_GetPriorityGrouping>
 8003b2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f7ff ffb1 	bl	8003a9c <NVIC_EncodePriority>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff80 	bl	8003a48 <__NVIC_SetPriority>
}
 8003b48:	bf00      	nop
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff54 	bl	8003a0c <__NVIC_EnableIRQ>
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b7a:	f7ff fa59 	bl	8003030 <HAL_GetTick>
 8003b7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d008      	beq.n	8003b9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e052      	b.n	8003c44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0216 	bic.w	r2, r2, #22
 8003bac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <HAL_DMA_Abort+0x62>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0208 	bic.w	r2, r2, #8
 8003bdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bee:	e013      	b.n	8003c18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bf0:	f7ff fa1e 	bl	8003030 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d90c      	bls.n	8003c18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2203      	movs	r2, #3
 8003c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e015      	b.n	8003c44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e4      	bne.n	8003bf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	223f      	movs	r2, #63	; 0x3f
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00c      	b.n	8003c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06c      	b.n	8003d7c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2223      	movs	r2, #35	; 0x23
 8003cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f006 ff03 	bl	800aac0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_ETH_Init+0xf4>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	4a30      	ldr	r2, [pc, #192]	; (8003d84 <HAL_ETH_Init+0xf4>)
 8003cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cca:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <HAL_ETH_Init+0xf4>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_ETH_Init+0xf8>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <HAL_ETH_Init+0xf8>)
 8003cdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ce0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003ce2:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <HAL_ETH_Init+0xf8>)
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4927      	ldr	r1, [pc, #156]	; (8003d88 <HAL_ETH_Init+0xf8>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_ETH_Init+0xf8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0c:	f7ff f990 	bl	8003030 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d12:	e011      	b.n	8003d38 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d14:	f7ff f98c 	bl	8003030 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d22:	d909      	bls.n	8003d38 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2204      	movs	r2, #4
 8003d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	22e0      	movs	r2, #224	; 0xe0
 8003d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e021      	b.n	8003d7c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e4      	bne.n	8003d14 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 ff4a 	bl	8004be4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fff1 	bl	8004d38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f001 f847 	bl	8004dea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	461a      	mov	r2, r3
 8003d62:	2100      	movs	r1, #0
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 ffaf 	bl	8004cc8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2210      	movs	r2, #16
 8003d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40013800 	.word	0x40013800

08003d8c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	d17f      	bne.n	8003e9e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2223      	movs	r2, #35	; 0x23
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003dd0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003de4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2204      	movs	r2, #4
 8003dec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9f8 	bl	80041e4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f7ff f91b 	bl	8003048 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0204 	orr.w	r2, r2, #4
 8003e28:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7ff f908 	bl	8003048 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fd70 	bl	8004926 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e5c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e74:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8003e88:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8003e8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e90:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2223      	movs	r2, #35	; 0x23
 8003e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb6:	2b23      	cmp	r3, #35	; 0x23
 8003eb8:	d170      	bne.n	8003f9c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2223      	movs	r2, #35	; 0x23
 8003ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8003ed4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8003ed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003edc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ef4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	f023 0302 	bic.w	r3, r3, #2
 8003f08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f0c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0204 	bic.w	r2, r2, #4
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f26:	2001      	movs	r0, #1
 8003f28:	f7ff f88e 	bl	8003048 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fcf6 	bl	8004926 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0208 	bic.w	r2, r2, #8
 8003f48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f52:	2001      	movs	r0, #1
 8003f54:	f7ff f878 	bl	8003048 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e00e      	b.n	8003f84 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	3212      	adds	r2, #18
 8003f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f70:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	3301      	adds	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d9ed      	bls.n	8003f66 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2210      	movs	r2, #16
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e045      	b.n	8004056 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd0:	2b23      	cmp	r3, #35	; 0x23
 8003fd2:	d13f      	bne.n	8004054 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	6839      	ldr	r1, [r7, #0]
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 ff6f 	bl	8004ec4 <ETH_Prepare_Tx_Descriptors>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f043 0202 	orr.w	r2, r3, #2
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e02a      	b.n	8004056 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004000:	f3bf 8f4f 	dsb	sy
}
 8004004:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	2b03      	cmp	r3, #3
 8004016:	d904      	bls.n	8004022 <HAL_ETH_Transmit_IT+0x7c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	1f1a      	subs	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	461a      	mov	r2, r3
 800403e:	2304      	movs	r3, #4
 8004040:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b088      	sub	sp, #32
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0a8      	b.n	80041dc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004090:	2b23      	cmp	r3, #35	; 0x23
 8004092:	d001      	beq.n	8004098 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0a1      	b.n	80041dc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	3212      	adds	r2, #18
 80040a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ae:	f1c3 0304 	rsb	r3, r3, #4
 80040b2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040b4:	e06a      	b.n	800418c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_ETH_ReadData+0x88>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d040      	beq.n	8004168 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800411a:	3b04      	subs	r3, #4
 800411c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004142:	461a      	mov	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f006 fe9c 	bl	800ae84 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2200      	movs	r2, #0
 8004166:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d902      	bls.n	800417a <HAL_ETH_ReadData+0x11c>
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3b04      	subs	r3, #4
 8004178:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	3212      	adds	r2, #18
 8004180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004184:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	3301      	adds	r3, #1
 800418a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db06      	blt.n	80041a2 <HAL_ETH_ReadData+0x144>
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d202      	bcs.n	80041a2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d089      	beq.n	80040b6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f814 	bl	80041e4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d108      	bne.n	80041da <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	3212      	adds	r2, #18
 8004200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004204:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800420c:	e040      	b.n	8004290 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d112      	bne.n	800423c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004216:	f107 030c 	add.w	r3, r7, #12
 800421a:	4618      	mov	r0, r3
 800421c:	f006 fe02 	bl	800ae24 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	74fb      	strb	r3, [r7, #19]
 800422a:	e007      	b.n	800423c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	461a      	mov	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	461a      	mov	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d026      	beq.n	8004290 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <ETH_UpdateDescriptor+0xe4>)
 800424e:	605a      	str	r2, [r3, #4]
 8004250:	e003      	b.n	800425a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004258:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800425a:	f3bf 8f5f 	dmb	sy
}
 800425e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	3301      	adds	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d902      	bls.n	800427e <ETH_UpdateDescriptor+0x9a>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3b04      	subs	r3, #4
 800427c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	3212      	adds	r2, #18
 8004284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004288:	617b      	str	r3, [r7, #20]
      desccount--;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	3b01      	subs	r3, #1
 800428e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <ETH_UpdateDescriptor+0xb8>
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1b8      	bne.n	800420e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d00c      	beq.n	80042c0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80042c0:	bf00      	nop
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	80004600 	.word	0x80004600

080042cc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3318      	adds	r3, #24
 80042d8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042ea:	e03f      	b.n	800436c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	3304      	adds	r3, #4
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	3301      	adds	r3, #1
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004314:	7bbb      	ldrb	r3, [r7, #14]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d028      	beq.n	800436c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68d9      	ldr	r1, [r3, #12]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	440b      	add	r3, r1
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db1b      	blt.n	8004368 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3304      	adds	r3, #4
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	f006 fde1 	bl	800af04 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3304      	adds	r3, #4
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	2200      	movs	r2, #0
 800434e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	3301      	adds	r3, #1
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
 8004366:	e001      	b.n	800436c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_ETH_ReleaseTxPacket+0xac>
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1b9      	bne.n	80042ec <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d112      	bne.n	80043c4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d109      	bne.n	80043c4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_ETH_IRQHandler+0x178>)
 80043bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f006 f8e0 	bl	800a584 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d113      	bne.n	80043fe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10a      	bne.n	80043fe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	461a      	mov	r2, r3
 80043f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80043f6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f006 f8d3 	bl	800a5a4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	d14c      	bne.n	80044ac <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	d142      	bne.n	80044ac <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f043 0208 	orr.w	r2, r3, #8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004448:	d11a      	bne.n	8004480 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <HAL_ETH_IRQHandler+0x17c>)
 8004456:	4013      	ands	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004474:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	22e0      	movs	r2, #224	; 0xe0
 800447a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800447e:	e012      	b.n	80044a6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	f248 6380 	movw	r3, #34432	; 0x8680
 800448e:	4013      	ands	r3, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449e:	461a      	mov	r2, r3
 80044a0:	f248 6380 	movw	r3, #34432	; 0x8680
 80044a4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f006 f88c 	bl	800a5c4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d10e      	bne.n	80044d8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f81c 	bl	8004508 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <HAL_ETH_IRQHandler+0x180>)
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <HAL_ETH_IRQHandler+0x180>)
 80044e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044ea:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f815 	bl	800451c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	00010040 	.word	0x00010040
 8004500:	007e2000 	.word	0x007e2000
 8004504:	40013c00 	.word	0x40013c00

08004508 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 031c 	and.w	r3, r3, #28
 800454c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	02db      	lsls	r3, r3, #11
 8004552:	b29b      	uxth	r3, r3
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0302 	bic.w	r3, r3, #2
 800456e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004580:	f7fe fd56 	bl	8003030 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004586:	e00d      	b.n	80045a4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004588:	f7fe fd52 	bl	8003030 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d301      	bcc.n	800459c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e010      	b.n	80045be <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1ec      	bne.n	8004588 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 031c 	and.w	r3, r3, #28
 80045e2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	02db      	lsls	r3, r3, #11
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	019b      	lsls	r3, r3, #6
 80045f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004620:	f7fe fd06 	bl	8003030 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004626:	e00d      	b.n	8004644 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004628:	f7fe fd02 	bl	8003030 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d301      	bcc.n	800463c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e009      	b.n	8004650 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ec      	bne.n	8004628 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0d9      	b.n	8004820 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	2b00      	cmp	r3, #0
 8004784:	bf14      	ite	ne
 8004786:	2301      	movne	r3, #1
 8004788:	2300      	moveq	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e00b      	b.n	8004858 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004846:	2b10      	cmp	r3, #16
 8004848:	d105      	bne.n	8004856 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f88f 	bl	8004970 <ETH_SetMACConfig>

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 031c 	bic.w	r3, r3, #28
 8004876:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004878:	f002 f898 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 800487c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d908      	bls.n	8004898 <HAL_ETH_SetMDIOClockRange+0x38>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d804      	bhi.n	8004898 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e027      	b.n	80048e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d908      	bls.n	80048b2 <HAL_ETH_SetMDIOClockRange+0x52>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d204      	bcs.n	80048b2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f043 030c 	orr.w	r3, r3, #12
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e01a      	b.n	80048e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a12      	ldr	r2, [pc, #72]	; (8004900 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d303      	bcc.n	80048c2 <HAL_ETH_SetMDIOClockRange+0x62>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a11      	ldr	r2, [pc, #68]	; (8004904 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d911      	bls.n	80048e6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a0f      	ldr	r2, [pc, #60]	; (8004904 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d908      	bls.n	80048dc <HAL_ETH_SetMDIOClockRange+0x7c>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d804      	bhi.n	80048dc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e005      	b.n	80048e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f043 0310 	orr.w	r3, r3, #16
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e000      	b.n	80048e8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80048e6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	611a      	str	r2, [r3, #16]
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	01312cff 	.word	0x01312cff
 80048fc:	02160ebf 	.word	0x02160ebf
 8004900:	03938700 	.word	0x03938700
 8004904:	05f5e0ff 	.word	0x05f5e0ff
 8004908:	08f0d17f 	.word	0x08f0d17f

0800490c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004944:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004948:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004956:	2001      	movs	r0, #1
 8004958:	f7fe fb76 	bl	8003048 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004966:	6193      	str	r3, [r2, #24]
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4b51      	ldr	r3, [pc, #324]	; (8004acc <ETH_SetMACConfig+0x15c>)
 8004986:	4013      	ands	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	7c1b      	ldrb	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <ETH_SetMACConfig+0x28>
 8004992:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004996:	e000      	b.n	800499a <ETH_SetMACConfig+0x2a>
 8004998:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	7c5b      	ldrb	r3, [r3, #17]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <ETH_SetMACConfig+0x38>
 80049a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049a6:	e000      	b.n	80049aa <ETH_SetMACConfig+0x3a>
 80049a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80049b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	7fdb      	ldrb	r3, [r3, #31]
 80049b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80049b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	7f92      	ldrb	r2, [r2, #30]
 80049c4:	2a00      	cmp	r2, #0
 80049c6:	d102      	bne.n	80049ce <ETH_SetMACConfig+0x5e>
 80049c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049cc:	e000      	b.n	80049d0 <ETH_SetMACConfig+0x60>
 80049ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80049d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	7f1b      	ldrb	r3, [r3, #28]
 80049d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	791b      	ldrb	r3, [r3, #4]
 80049e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80049e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	d102      	bne.n	80049f8 <ETH_SetMACConfig+0x88>
 80049f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f6:	e000      	b.n	80049fa <ETH_SetMACConfig+0x8a>
 80049f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	7bdb      	ldrb	r3, [r3, #15]
 8004a00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004a02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004a08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004a12:	4313      	orrs	r3, r2
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f7fe fb0c 	bl	8003048 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004a46:	4013      	ands	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004a56:	2a00      	cmp	r2, #0
 8004a58:	d101      	bne.n	8004a5e <ETH_SetMACConfig+0xee>
 8004a5a:	2280      	movs	r2, #128	; 0x80
 8004a5c:	e000      	b.n	8004a60 <ETH_SetMACConfig+0xf0>
 8004a5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004a6e:	2a01      	cmp	r2, #1
 8004a70:	d101      	bne.n	8004a76 <ETH_SetMACConfig+0x106>
 8004a72:	2208      	movs	r2, #8
 8004a74:	e000      	b.n	8004a78 <ETH_SetMACConfig+0x108>
 8004a76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004a80:	2a01      	cmp	r2, #1
 8004a82:	d101      	bne.n	8004a88 <ETH_SetMACConfig+0x118>
 8004a84:	2204      	movs	r2, #4
 8004a86:	e000      	b.n	8004a8a <ETH_SetMACConfig+0x11a>
 8004a88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004a92:	2a01      	cmp	r2, #1
 8004a94:	d101      	bne.n	8004a9a <ETH_SetMACConfig+0x12a>
 8004a96:	2202      	movs	r2, #2
 8004a98:	e000      	b.n	8004a9c <ETH_SetMACConfig+0x12c>
 8004a9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	f7fe fac7 	bl	8003048 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	619a      	str	r2, [r3, #24]
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	ff20810f 	.word	0xff20810f

08004ad0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4b3d      	ldr	r3, [pc, #244]	; (8004be0 <ETH_SetDMAConfig+0x110>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	7b1b      	ldrb	r3, [r3, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <ETH_SetDMAConfig+0x2c>
 8004af6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004afa:	e000      	b.n	8004afe <ETH_SetDMAConfig+0x2e>
 8004afc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	7b5b      	ldrb	r3, [r3, #13]
 8004b02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	7f52      	ldrb	r2, [r2, #29]
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	d102      	bne.n	8004b14 <ETH_SetDMAConfig+0x44>
 8004b0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b12:	e000      	b.n	8004b16 <ETH_SetDMAConfig+0x46>
 8004b14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004b16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	7b9b      	ldrb	r3, [r3, #14]
 8004b1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	7f1b      	ldrb	r3, [r3, #28]
 8004b2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004b2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	7f9b      	ldrb	r3, [r3, #30]
 8004b32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b44:	4313      	orrs	r3, r2
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b54:	461a      	mov	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b66:	2001      	movs	r0, #1
 8004b68:	f7fe fa6e 	bl	8003048 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b74:	461a      	mov	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	791b      	ldrb	r3, [r3, #4]
 8004b7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ba2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ba8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bb6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7fe fa3f 	bl	8003048 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6013      	str	r3, [r2, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	f8de3f23 	.word	0xf8de3f23

08004be4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b0a6      	sub	sp, #152	; 0x98
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c20:	2300      	movs	r3, #0
 8004c22:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fe86 	bl	8004970 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c86:	2300      	movs	r3, #0
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c98:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ca4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004cb4:	f107 0308 	add.w	r3, r7, #8
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ff08 	bl	8004ad0 <ETH_SetDMAConfig>
}
 8004cc0:	bf00      	nop
 8004cc2:	3798      	adds	r7, #152	; 0x98
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3305      	adds	r3, #5
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	3204      	adds	r2, #4
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <ETH_MACAddressConfig+0x68>)
 8004cea:	4413      	add	r3, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3303      	adds	r3, #3
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	061a      	lsls	r2, r3, #24
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3301      	adds	r3, #1
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	7812      	ldrb	r2, [r2, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <ETH_MACAddressConfig+0x6c>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6013      	str	r3, [r2, #0]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40028040 	.word	0x40028040
 8004d34:	40028044 	.word	0x40028044

08004d38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e03e      	b.n	8004dc4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	440b      	add	r3, r1
 8004d56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2200      	movs	r2, #0
 8004d62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	3206      	adds	r2, #6
 8004d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d80c      	bhi.n	8004da8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68d9      	ldr	r1, [r3, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	440b      	add	r3, r1
 8004da0:	461a      	mov	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	e004      	b.n	8004db2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	461a      	mov	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d9bd      	bls.n	8004d46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ddc:	611a      	str	r2, [r3, #16]
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e046      	b.n	8004e86 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6919      	ldr	r1, [r3, #16]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	440b      	add	r3, r1
 8004e08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2200      	movs	r2, #0
 8004e26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004e3c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	3212      	adds	r2, #18
 8004e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d80c      	bhi.n	8004e76 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6919      	ldr	r1, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e004      	b.n	8004e80 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d9b5      	bls.n	8004df8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb6:	60da      	str	r2, [r3, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b08d      	sub	sp, #52	; 0x34
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3318      	adds	r3, #24
 8004ed4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f06:	d007      	beq.n	8004f18 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e103      	b.n	8005124 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	3301      	adds	r3, #1
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004f34:	f023 031f 	bic.w	r3, r3, #31
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	6852      	ldr	r2, [r2, #4]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004fa2:	f3bf 8f5f 	dmb	sy
}
 8004fa6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004fb4:	e084      	b.n	80050c0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e005      	b.n	8004fe2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d902      	bls.n	8004ff4 <ETH_Prepare_Tx_Descriptors+0x130>
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	3b04      	subs	r3, #4
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ffc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005016:	d007      	beq.n	8005028 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	3304      	adds	r3, #4
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d029      	beq.n	800507c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005034:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005036:	2300      	movs	r3, #0
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
 800503a:	e019      	b.n	8005070 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800503c:	f3bf 8f5f 	dmb	sy
}
 8005040:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	3301      	adds	r3, #1
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	2b03      	cmp	r3, #3
 8005058:	d902      	bls.n	8005060 <ETH_Prepare_Tx_Descriptors+0x19c>
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	3b04      	subs	r3, #4
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005068:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	3301      	adds	r3, #1
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	429a      	cmp	r2, r3
 8005076:	d3e1      	bcc.n	800503c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8005078:	2302      	movs	r3, #2
 800507a:	e053      	b.n	8005124 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	3301      	adds	r3, #1
 8005080:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800509a:	f023 031f 	bic.w	r3, r3, #31
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	6852      	ldr	r2, [r2, #4]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80050ae:	f3bf 8f5f 	dmb	sy
}
 80050b2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f af76 	bne.w	8004fb6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e005      	b.n	80050ea <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050fa:	6979      	ldr	r1, [r7, #20]
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	3304      	adds	r3, #4
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800510a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800510c:	b672      	cpsid	i
}
 800510e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4413      	add	r3, r2
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800511e:	b662      	cpsie	i
}
 8005120:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3734      	adds	r7, #52	; 0x34
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005130:	b480      	push	{r7}
 8005132:	b089      	sub	sp, #36	; 0x24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e177      	b.n	800543c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800514c:	2201      	movs	r2, #1
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4013      	ands	r3, r2
 800515e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	f040 8166 	bne.w	8005436 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d005      	beq.n	8005182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800517e:	2b02      	cmp	r3, #2
 8005180:	d130      	bne.n	80051e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	2203      	movs	r2, #3
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051b8:	2201      	movs	r2, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 0201 	and.w	r2, r3, #1
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d017      	beq.n	8005220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	2203      	movs	r2, #3
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d123      	bne.n	8005274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	08da      	lsrs	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3208      	adds	r2, #8
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	220f      	movs	r2, #15
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	08da      	lsrs	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3208      	adds	r2, #8
 800526e:	69b9      	ldr	r1, [r7, #24]
 8005270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	2203      	movs	r2, #3
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 0203 	and.w	r2, r3, #3
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80c0 	beq.w	8005436 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	4b66      	ldr	r3, [pc, #408]	; (8005454 <HAL_GPIO_Init+0x324>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	4a65      	ldr	r2, [pc, #404]	; (8005454 <HAL_GPIO_Init+0x324>)
 80052c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052c4:	6453      	str	r3, [r2, #68]	; 0x44
 80052c6:	4b63      	ldr	r3, [pc, #396]	; (8005454 <HAL_GPIO_Init+0x324>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052d2:	4a61      	ldr	r2, [pc, #388]	; (8005458 <HAL_GPIO_Init+0x328>)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	089b      	lsrs	r3, r3, #2
 80052d8:	3302      	adds	r3, #2
 80052da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	220f      	movs	r2, #15
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a58      	ldr	r2, [pc, #352]	; (800545c <HAL_GPIO_Init+0x32c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d037      	beq.n	800536e <HAL_GPIO_Init+0x23e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a57      	ldr	r2, [pc, #348]	; (8005460 <HAL_GPIO_Init+0x330>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d031      	beq.n	800536a <HAL_GPIO_Init+0x23a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a56      	ldr	r2, [pc, #344]	; (8005464 <HAL_GPIO_Init+0x334>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d02b      	beq.n	8005366 <HAL_GPIO_Init+0x236>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a55      	ldr	r2, [pc, #340]	; (8005468 <HAL_GPIO_Init+0x338>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d025      	beq.n	8005362 <HAL_GPIO_Init+0x232>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a54      	ldr	r2, [pc, #336]	; (800546c <HAL_GPIO_Init+0x33c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01f      	beq.n	800535e <HAL_GPIO_Init+0x22e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a53      	ldr	r2, [pc, #332]	; (8005470 <HAL_GPIO_Init+0x340>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d019      	beq.n	800535a <HAL_GPIO_Init+0x22a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a52      	ldr	r2, [pc, #328]	; (8005474 <HAL_GPIO_Init+0x344>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <HAL_GPIO_Init+0x226>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a51      	ldr	r2, [pc, #324]	; (8005478 <HAL_GPIO_Init+0x348>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00d      	beq.n	8005352 <HAL_GPIO_Init+0x222>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a50      	ldr	r2, [pc, #320]	; (800547c <HAL_GPIO_Init+0x34c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <HAL_GPIO_Init+0x21e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4f      	ldr	r2, [pc, #316]	; (8005480 <HAL_GPIO_Init+0x350>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_GPIO_Init+0x21a>
 8005346:	2309      	movs	r3, #9
 8005348:	e012      	b.n	8005370 <HAL_GPIO_Init+0x240>
 800534a:	230a      	movs	r3, #10
 800534c:	e010      	b.n	8005370 <HAL_GPIO_Init+0x240>
 800534e:	2308      	movs	r3, #8
 8005350:	e00e      	b.n	8005370 <HAL_GPIO_Init+0x240>
 8005352:	2307      	movs	r3, #7
 8005354:	e00c      	b.n	8005370 <HAL_GPIO_Init+0x240>
 8005356:	2306      	movs	r3, #6
 8005358:	e00a      	b.n	8005370 <HAL_GPIO_Init+0x240>
 800535a:	2305      	movs	r3, #5
 800535c:	e008      	b.n	8005370 <HAL_GPIO_Init+0x240>
 800535e:	2304      	movs	r3, #4
 8005360:	e006      	b.n	8005370 <HAL_GPIO_Init+0x240>
 8005362:	2303      	movs	r3, #3
 8005364:	e004      	b.n	8005370 <HAL_GPIO_Init+0x240>
 8005366:	2302      	movs	r3, #2
 8005368:	e002      	b.n	8005370 <HAL_GPIO_Init+0x240>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_GPIO_Init+0x240>
 800536e:	2300      	movs	r3, #0
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	f002 0203 	and.w	r2, r2, #3
 8005376:	0092      	lsls	r2, r2, #2
 8005378:	4093      	lsls	r3, r2
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005380:	4935      	ldr	r1, [pc, #212]	; (8005458 <HAL_GPIO_Init+0x328>)
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	3302      	adds	r3, #2
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800538e:	4b3d      	ldr	r3, [pc, #244]	; (8005484 <HAL_GPIO_Init+0x354>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	43db      	mvns	r3, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053b2:	4a34      	ldr	r2, [pc, #208]	; (8005484 <HAL_GPIO_Init+0x354>)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <HAL_GPIO_Init+0x354>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <HAL_GPIO_Init+0x354>)
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053e2:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_GPIO_Init+0x354>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4013      	ands	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005406:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <HAL_GPIO_Init+0x354>)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800540c:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <HAL_GPIO_Init+0x354>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005430:	4a14      	ldr	r2, [pc, #80]	; (8005484 <HAL_GPIO_Init+0x354>)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3301      	adds	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	f67f ae84 	bls.w	800514c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	3724      	adds	r7, #36	; 0x24
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800
 8005458:	40013800 	.word	0x40013800
 800545c:	40020000 	.word	0x40020000
 8005460:	40020400 	.word	0x40020400
 8005464:	40020800 	.word	0x40020800
 8005468:	40020c00 	.word	0x40020c00
 800546c:	40021000 	.word	0x40021000
 8005470:	40021400 	.word	0x40021400
 8005474:	40021800 	.word	0x40021800
 8005478:	40021c00 	.word	0x40021c00
 800547c:	40022000 	.word	0x40022000
 8005480:	40022400 	.word	0x40022400
 8005484:	40013c00 	.word	0x40013c00

08005488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	e001      	b.n	80054aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
 80054c4:	4613      	mov	r3, r2
 80054c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c8:	787b      	ldrb	r3, [r7, #1]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054d4:	e003      	b.n	80054de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	041a      	lsls	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fb fc2e 	bl	8000d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40013c00 	.word	0x40013c00

0800551c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e12b      	b.n	8005786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc fcfc 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2224      	movs	r2, #36	; 0x24
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800556e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800557e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005580:	f001 fa20 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8005584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4a81      	ldr	r2, [pc, #516]	; (8005790 <HAL_I2C_Init+0x274>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d807      	bhi.n	80055a0 <HAL_I2C_Init+0x84>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a80      	ldr	r2, [pc, #512]	; (8005794 <HAL_I2C_Init+0x278>)
 8005594:	4293      	cmp	r3, r2
 8005596:	bf94      	ite	ls
 8005598:	2301      	movls	r3, #1
 800559a:	2300      	movhi	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e006      	b.n	80055ae <HAL_I2C_Init+0x92>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a7d      	ldr	r2, [pc, #500]	; (8005798 <HAL_I2C_Init+0x27c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	bf94      	ite	ls
 80055a8:	2301      	movls	r3, #1
 80055aa:	2300      	movhi	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0e7      	b.n	8005786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a78      	ldr	r2, [pc, #480]	; (800579c <HAL_I2C_Init+0x280>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	0c9b      	lsrs	r3, r3, #18
 80055c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4a6a      	ldr	r2, [pc, #424]	; (8005790 <HAL_I2C_Init+0x274>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d802      	bhi.n	80055f0 <HAL_I2C_Init+0xd4>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	3301      	adds	r3, #1
 80055ee:	e009      	b.n	8005604 <HAL_I2C_Init+0xe8>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
 80055fa:	4a69      	ldr	r2, [pc, #420]	; (80057a0 <HAL_I2C_Init+0x284>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	099b      	lsrs	r3, r3, #6
 8005602:	3301      	adds	r3, #1
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	430b      	orrs	r3, r1
 800560a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	495c      	ldr	r1, [pc, #368]	; (8005790 <HAL_I2C_Init+0x274>)
 8005620:	428b      	cmp	r3, r1
 8005622:	d819      	bhi.n	8005658 <HAL_I2C_Init+0x13c>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e59      	subs	r1, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005638:	400b      	ands	r3, r1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_I2C_Init+0x138>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1e59      	subs	r1, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	fbb1 f3f3 	udiv	r3, r1, r3
 800564c:	3301      	adds	r3, #1
 800564e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005652:	e051      	b.n	80056f8 <HAL_I2C_Init+0x1dc>
 8005654:	2304      	movs	r3, #4
 8005656:	e04f      	b.n	80056f8 <HAL_I2C_Init+0x1dc>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d111      	bne.n	8005684 <HAL_I2C_Init+0x168>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e58      	subs	r0, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	440b      	add	r3, r1
 800566e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005672:	3301      	adds	r3, #1
 8005674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e012      	b.n	80056aa <HAL_I2C_Init+0x18e>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e58      	subs	r0, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	0099      	lsls	r1, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	fbb0 f3f3 	udiv	r3, r0, r3
 800569a:	3301      	adds	r3, #1
 800569c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Init+0x196>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e022      	b.n	80056f8 <HAL_I2C_Init+0x1dc>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10e      	bne.n	80056d8 <HAL_I2C_Init+0x1bc>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1e58      	subs	r0, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	440b      	add	r3, r1
 80056c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80056cc:	3301      	adds	r3, #1
 80056ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	e00f      	b.n	80056f8 <HAL_I2C_Init+0x1dc>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1e58      	subs	r0, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	0099      	lsls	r1, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ee:	3301      	adds	r3, #1
 80056f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	6809      	ldr	r1, [r1, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6911      	ldr	r1, [r2, #16]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	68d2      	ldr	r2, [r2, #12]
 8005732:	4311      	orrs	r1, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	430b      	orrs	r3, r1
 800573a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	000186a0 	.word	0x000186a0
 8005794:	001e847f 	.word	0x001e847f
 8005798:	003d08ff 	.word	0x003d08ff
 800579c:	431bde83 	.word	0x431bde83
 80057a0:	10624dd3 	.word	0x10624dd3

080057a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	461a      	mov	r2, r3
 80057b0:	460b      	mov	r3, r1
 80057b2:	817b      	strh	r3, [r7, #10]
 80057b4:	4613      	mov	r3, r2
 80057b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057b8:	f7fd fc3a 	bl	8003030 <HAL_GetTick>
 80057bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	f040 80e0 	bne.w	800598c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	2319      	movs	r3, #25
 80057d2:	2201      	movs	r2, #1
 80057d4:	4970      	ldr	r1, [pc, #448]	; (8005998 <HAL_I2C_Master_Transmit+0x1f4>)
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f964 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057e2:	2302      	movs	r3, #2
 80057e4:	e0d3      	b.n	800598e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_I2C_Master_Transmit+0x50>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e0cc      	b.n	800598e <HAL_I2C_Master_Transmit+0x1ea>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b01      	cmp	r3, #1
 8005808:	d007      	beq.n	800581a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2221      	movs	r2, #33	; 0x21
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2210      	movs	r2, #16
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	893a      	ldrh	r2, [r7, #8]
 800584a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a50      	ldr	r2, [pc, #320]	; (800599c <HAL_I2C_Master_Transmit+0x1f8>)
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800585c:	8979      	ldrh	r1, [r7, #10]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f89c 	bl	80059a0 <I2C_MasterRequestWrite>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e08d      	b.n	800598e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005888:	e066      	b.n	8005958 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	6a39      	ldr	r1, [r7, #32]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f9de 	bl	8005c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00d      	beq.n	80058b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d107      	bne.n	80058b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e06b      	b.n	800598e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d11b      	bne.n	800592c <HAL_I2C_Master_Transmit+0x188>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d017      	beq.n	800592c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	6a39      	ldr	r1, [r7, #32]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f9ce 	bl	8005cd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b04      	cmp	r3, #4
 8005942:	d107      	bne.n	8005954 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005952:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e01a      	b.n	800598e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	d194      	bne.n	800588a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	00100002 	.word	0x00100002
 800599c:	ffff0000 	.word	0xffff0000

080059a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	460b      	mov	r3, r1
 80059ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d006      	beq.n	80059ca <I2C_MasterRequestWrite+0x2a>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d003      	beq.n	80059ca <I2C_MasterRequestWrite+0x2a>
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059c8:	d108      	bne.n	80059dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e00b      	b.n	80059f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	2b12      	cmp	r3, #18
 80059e2:	d107      	bne.n	80059f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f84f 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00d      	beq.n	8005a28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1a:	d103      	bne.n	8005a24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e035      	b.n	8005a94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a30:	d108      	bne.n	8005a44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a32:	897b      	ldrh	r3, [r7, #10]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a40:	611a      	str	r2, [r3, #16]
 8005a42:	e01b      	b.n	8005a7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a44:	897b      	ldrh	r3, [r7, #10]
 8005a46:	11db      	asrs	r3, r3, #7
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f003 0306 	and.w	r3, r3, #6
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f063 030f 	orn	r3, r3, #15
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	490e      	ldr	r1, [pc, #56]	; (8005a9c <I2C_MasterRequestWrite+0xfc>)
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f875 	bl	8005b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e010      	b.n	8005a94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4907      	ldr	r1, [pc, #28]	; (8005aa0 <I2C_MasterRequestWrite+0x100>)
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f865 	bl	8005b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	00010008 	.word	0x00010008
 8005aa0:	00010002 	.word	0x00010002

08005aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab4:	e025      	b.n	8005b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d021      	beq.n	8005b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005abe:	f7fd fab7 	bl	8003030 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d302      	bcc.n	8005ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d116      	bne.n	8005b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e023      	b.n	8005b4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	0c1b      	lsrs	r3, r3, #16
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d10d      	bne.n	8005b28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	43da      	mvns	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4013      	ands	r3, r2
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	e00c      	b.n	8005b42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4013      	ands	r3, r2
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d0b6      	beq.n	8005ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b60:	e051      	b.n	8005c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b70:	d123      	bne.n	8005bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e046      	b.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d021      	beq.n	8005c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc2:	f7fd fa35 	bl	8003030 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d302      	bcc.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d116      	bne.n	8005c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e020      	b.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	0c1b      	lsrs	r3, r3, #16
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d10c      	bne.n	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	43da      	mvns	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	e00b      	b.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	43da      	mvns	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4013      	ands	r3, r2
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d18d      	bne.n	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c5c:	e02d      	b.n	8005cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f878 	bl	8005d54 <I2C_IsAcknowledgeFailed>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e02d      	b.n	8005cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d021      	beq.n	8005cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c76:	f7fd f9db 	bl	8003030 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d116      	bne.n	8005cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f043 0220 	orr.w	r2, r3, #32
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e007      	b.n	8005cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	d1ca      	bne.n	8005c5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cde:	e02d      	b.n	8005d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f837 	bl	8005d54 <I2C_IsAcknowledgeFailed>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e02d      	b.n	8005d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d021      	beq.n	8005d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf8:	f7fd f99a 	bl	8003030 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d116      	bne.n	8005d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e007      	b.n	8005d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d1ca      	bne.n	8005ce0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	d11b      	bne.n	8005da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	f043 0204 	orr.w	r2, r3, #4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d129      	bne.n	8005e1c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2224      	movs	r2, #36	; 0x24
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0201 	bic.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0210 	bic.w	r2, r2, #16
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d12a      	bne.n	8005e9a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2224      	movs	r2, #36	; 0x24
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005e64:	89fb      	ldrh	r3, [r7, #14]
 8005e66:	f023 030f 	bic.w	r3, r3, #15
 8005e6a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	89fa      	ldrh	r2, [r7, #14]
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e000      	b.n	8005e9c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eaa:	b08f      	sub	sp, #60	; 0x3c
 8005eac:	af0a      	add	r7, sp, #40	; 0x28
 8005eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e10f      	b.n	80060da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fc fa89 	bl	80023ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2203      	movs	r2, #3
 8005ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f003 ff4a 	bl	8009d92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	687e      	ldr	r6, [r7, #4]
 8005f06:	466d      	mov	r5, sp
 8005f08:	f106 0410 	add.w	r4, r6, #16
 8005f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f1c:	1d33      	adds	r3, r6, #4
 8005f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f20:	6838      	ldr	r0, [r7, #0]
 8005f22:	f003 fed5 	bl	8009cd0 <USB_CoreInit>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0d0      	b.n	80060da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f003 ff38 	bl	8009db4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]
 8005f48:	e04a      	b.n	8005fe0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	333d      	adds	r3, #61	; 0x3d
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f5e:	7bfa      	ldrb	r2, [r7, #15]
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	333c      	adds	r3, #60	; 0x3c
 8005f6e:	7bfa      	ldrb	r2, [r7, #15]
 8005f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	b298      	uxth	r0, r3
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	3344      	adds	r3, #68	; 0x44
 8005f86:	4602      	mov	r2, r0
 8005f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f8a:	7bfa      	ldrb	r2, [r7, #15]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3340      	adds	r3, #64	; 0x40
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3348      	adds	r3, #72	; 0x48
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fb2:	7bfa      	ldrb	r2, [r7, #15]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	334c      	adds	r3, #76	; 0x4c
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fc6:	7bfa      	ldrb	r2, [r7, #15]
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	3354      	adds	r3, #84	; 0x54
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	7bfa      	ldrb	r2, [r7, #15]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d3af      	bcc.n	8005f4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	e044      	b.n	800607a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006006:	7bfa      	ldrb	r2, [r7, #15]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800601c:	7bfa      	ldrb	r2, [r7, #15]
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006048:	7bfa      	ldrb	r2, [r7, #15]
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800605e:	7bfa      	ldrb	r2, [r7, #15]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	3301      	adds	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
 800607a:	7bfa      	ldrb	r2, [r7, #15]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d3b5      	bcc.n	8005ff0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	687e      	ldr	r6, [r7, #4]
 800608c:	466d      	mov	r5, sp
 800608e:	f106 0410 	add.w	r4, r6, #16
 8006092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800609a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800609e:	e885 0003 	stmia.w	r5, {r0, r1}
 80060a2:	1d33      	adds	r3, r6, #4
 80060a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060a6:	6838      	ldr	r0, [r7, #0]
 80060a8:	f003 fed0 	bl	8009e4c <USB_DevInit>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e00d      	b.n	80060da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f004 f89b 	bl	800a20e <USB_DevDisconnect>

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080060e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e267      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d075      	beq.n	80061ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006102:	4b88      	ldr	r3, [pc, #544]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b04      	cmp	r3, #4
 800610c:	d00c      	beq.n	8006128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610e:	4b85      	ldr	r3, [pc, #532]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006116:	2b08      	cmp	r3, #8
 8006118:	d112      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800611a:	4b82      	ldr	r3, [pc, #520]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006126:	d10b      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006128:	4b7e      	ldr	r3, [pc, #504]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05b      	beq.n	80061ec <HAL_RCC_OscConfig+0x108>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d157      	bne.n	80061ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e242      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006148:	d106      	bne.n	8006158 <HAL_RCC_OscConfig+0x74>
 800614a:	4b76      	ldr	r3, [pc, #472]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a75      	ldr	r2, [pc, #468]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e01d      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006160:	d10c      	bne.n	800617c <HAL_RCC_OscConfig+0x98>
 8006162:	4b70      	ldr	r3, [pc, #448]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a6f      	ldr	r2, [pc, #444]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	4b6d      	ldr	r3, [pc, #436]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6c      	ldr	r2, [pc, #432]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e00b      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 800617c:	4b69      	ldr	r3, [pc, #420]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a68      	ldr	r2, [pc, #416]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	4b66      	ldr	r3, [pc, #408]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a65      	ldr	r2, [pc, #404]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 800618e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d013      	beq.n	80061c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fc ff48 	bl	8003030 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a4:	f7fc ff44 	bl	8003030 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b64      	cmp	r3, #100	; 0x64
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e207      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b6:	4b5b      	ldr	r3, [pc, #364]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0xc0>
 80061c2:	e014      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fc ff34 	bl	8003030 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061cc:	f7fc ff30 	bl	8003030 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b64      	cmp	r3, #100	; 0x64
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e1f3      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061de:	4b51      	ldr	r3, [pc, #324]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0xe8>
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d063      	beq.n	80062c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061fa:	4b4a      	ldr	r3, [pc, #296]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006206:	4b47      	ldr	r3, [pc, #284]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800620e:	2b08      	cmp	r3, #8
 8006210:	d11c      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006212:	4b44      	ldr	r3, [pc, #272]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d116      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621e:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d001      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e1c7      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006236:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4937      	ldr	r1, [pc, #220]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006246:	4313      	orrs	r3, r2
 8006248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624a:	e03a      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d020      	beq.n	8006296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006254:	4b34      	ldr	r3, [pc, #208]	; (8006328 <HAL_RCC_OscConfig+0x244>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fc fee9 	bl	8003030 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006262:	f7fc fee5 	bl	8003030 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1a8      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006274:	4b2b      	ldr	r3, [pc, #172]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006280:	4b28      	ldr	r3, [pc, #160]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4925      	ldr	r1, [pc, #148]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 8006290:	4313      	orrs	r3, r2
 8006292:	600b      	str	r3, [r1, #0]
 8006294:	e015      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <HAL_RCC_OscConfig+0x244>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fc fec8 	bl	8003030 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a4:	f7fc fec4 	bl	8003030 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e187      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d036      	beq.n	800633c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <HAL_RCC_OscConfig+0x248>)
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fc fea8 	bl	8003030 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e4:	f7fc fea4 	bl	8003030 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e167      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCC_OscConfig+0x240>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x200>
 8006302:	e01b      	b.n	800633c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <HAL_RCC_OscConfig+0x248>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800630a:	f7fc fe91 	bl	8003030 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006310:	e00e      	b.n	8006330 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006312:	f7fc fe8d 	bl	8003030 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d907      	bls.n	8006330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e150      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
 8006324:	40023800 	.word	0x40023800
 8006328:	42470000 	.word	0x42470000
 800632c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006330:	4b88      	ldr	r3, [pc, #544]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1ea      	bne.n	8006312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8097 	beq.w	8006478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634e:	4b81      	ldr	r3, [pc, #516]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	4b7d      	ldr	r3, [pc, #500]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	4a7c      	ldr	r2, [pc, #496]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6413      	str	r3, [r2, #64]	; 0x40
 800636a:	4b7a      	ldr	r3, [pc, #488]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800637a:	4b77      	ldr	r3, [pc, #476]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d118      	bne.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006386:	4b74      	ldr	r3, [pc, #464]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a73      	ldr	r2, [pc, #460]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 800638c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006392:	f7fc fe4d 	bl	8003030 <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800639a:	f7fc fe49 	bl	8003030 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e10c      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ac:	4b6a      	ldr	r3, [pc, #424]	; (8006558 <HAL_RCC_OscConfig+0x474>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d106      	bne.n	80063ce <HAL_RCC_OscConfig+0x2ea>
 80063c0:	4b64      	ldr	r3, [pc, #400]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	4a63      	ldr	r2, [pc, #396]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6713      	str	r3, [r2, #112]	; 0x70
 80063cc:	e01c      	b.n	8006408 <HAL_RCC_OscConfig+0x324>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x30c>
 80063d6:	4b5f      	ldr	r3, [pc, #380]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4a5e      	ldr	r2, [pc, #376]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063dc:	f043 0304 	orr.w	r3, r3, #4
 80063e0:	6713      	str	r3, [r2, #112]	; 0x70
 80063e2:	4b5c      	ldr	r3, [pc, #368]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	4a5b      	ldr	r2, [pc, #364]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	6713      	str	r3, [r2, #112]	; 0x70
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0x324>
 80063f0:	4b58      	ldr	r3, [pc, #352]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	4a57      	ldr	r2, [pc, #348]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6713      	str	r3, [r2, #112]	; 0x70
 80063fc:	4b55      	ldr	r3, [pc, #340]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	4a54      	ldr	r2, [pc, #336]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006402:	f023 0304 	bic.w	r3, r3, #4
 8006406:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d015      	beq.n	800643c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fc fe0e 	bl	8003030 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006416:	e00a      	b.n	800642e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006418:	f7fc fe0a 	bl	8003030 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0cb      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642e:	4b49      	ldr	r3, [pc, #292]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0ee      	beq.n	8006418 <HAL_RCC_OscConfig+0x334>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643c:	f7fc fdf8 	bl	8003030 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006442:	e00a      	b.n	800645a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006444:	f7fc fdf4 	bl	8003030 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e0b5      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800645a:	4b3e      	ldr	r3, [pc, #248]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1ee      	bne.n	8006444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d105      	bne.n	8006478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800646c:	4b39      	ldr	r3, [pc, #228]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	4a38      	ldr	r2, [pc, #224]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006476:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80a1 	beq.w	80065c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006482:	4b34      	ldr	r3, [pc, #208]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b08      	cmp	r3, #8
 800648c:	d05c      	beq.n	8006548 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d141      	bne.n	800651a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006496:	4b31      	ldr	r3, [pc, #196]	; (800655c <HAL_RCC_OscConfig+0x478>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fc fdc8 	bl	8003030 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fc fdc4 	bl	8003030 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e087      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b6:	4b27      	ldr	r3, [pc, #156]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69da      	ldr	r2, [r3, #28]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	3b01      	subs	r3, #1
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	491b      	ldr	r1, [pc, #108]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <HAL_RCC_OscConfig+0x478>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fc fd9d 	bl	8003030 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fa:	f7fc fd99 	bl	8003030 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e05c      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x416>
 8006518:	e054      	b.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <HAL_RCC_OscConfig+0x478>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fc fd86 	bl	8003030 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006528:	f7fc fd82 	bl	8003030 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e045      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_OscConfig+0x470>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x444>
 8006546:	e03d      	b.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e038      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
 8006554:	40023800 	.word	0x40023800
 8006558:	40007000 	.word	0x40007000
 800655c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <HAL_RCC_OscConfig+0x4ec>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d028      	beq.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d121      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d11a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006590:	4013      	ands	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006598:	4293      	cmp	r3, r2
 800659a:	d111      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	3b01      	subs	r3, #1
 80065aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d107      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40023800 	.word	0x40023800

080065d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0cc      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065e8:	4b68      	ldr	r3, [pc, #416]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d90c      	bls.n	8006610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b65      	ldr	r3, [pc, #404]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b63      	ldr	r3, [pc, #396]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0b8      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d020      	beq.n	800665e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006628:	4b59      	ldr	r3, [pc, #356]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	4a58      	ldr	r2, [pc, #352]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006640:	4b53      	ldr	r3, [pc, #332]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4a52      	ldr	r2, [pc, #328]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800664a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800664c:	4b50      	ldr	r3, [pc, #320]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	494d      	ldr	r1, [pc, #308]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d044      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b47      	ldr	r3, [pc, #284]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d119      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e07f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d003      	beq.n	8006692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800668e:	2b03      	cmp	r3, #3
 8006690:	d107      	bne.n	80066a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006692:	4b3f      	ldr	r3, [pc, #252]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e06f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a2:	4b3b      	ldr	r3, [pc, #236]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e067      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066b2:	4b37      	ldr	r3, [pc, #220]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f023 0203 	bic.w	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4934      	ldr	r1, [pc, #208]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066c4:	f7fc fcb4 	bl	8003030 <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ca:	e00a      	b.n	80066e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066cc:	f7fc fcb0 	bl	8003030 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e04f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e2:	4b2b      	ldr	r3, [pc, #172]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 020c 	and.w	r2, r3, #12
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d1eb      	bne.n	80066cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066f4:	4b25      	ldr	r3, [pc, #148]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d20c      	bcs.n	800671c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b22      	ldr	r3, [pc, #136]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b20      	ldr	r3, [pc, #128]	; (800678c <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e032      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006728:	4b19      	ldr	r3, [pc, #100]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4916      	ldr	r1, [pc, #88]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	490e      	ldr	r1, [pc, #56]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	4313      	orrs	r3, r2
 8006758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800675a:	f000 f821 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 800675e:	4602      	mov	r2, r0
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	490a      	ldr	r1, [pc, #40]	; (8006794 <HAL_RCC_ClockConfig+0x1c0>)
 800676c:	5ccb      	ldrb	r3, [r1, r3]
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <HAL_RCC_ClockConfig+0x1c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fb fe90 	bl	80024a0 <HAL_InitTick>

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40023c00 	.word	0x40023c00
 8006790:	40023800 	.word	0x40023800
 8006794:	0801d974 	.word	0x0801d974
 8006798:	2000013c 	.word	0x2000013c
 800679c:	20000140 	.word	0x20000140

080067a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a4:	b094      	sub	sp, #80	; 0x50
 80067a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
 80067ac:	2300      	movs	r3, #0
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	2300      	movs	r3, #0
 80067b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b8:	4b79      	ldr	r3, [pc, #484]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 030c 	and.w	r3, r3, #12
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d00d      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x40>
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	f200 80e1 	bhi.w	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0x34>
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d003      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x3a>
 80067d2:	e0db      	b.n	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d4:	4b73      	ldr	r3, [pc, #460]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80067d8:	e0db      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067da:	4b73      	ldr	r3, [pc, #460]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80067dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067de:	e0d8      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e0:	4b6f      	ldr	r3, [pc, #444]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067ea:	4b6d      	ldr	r3, [pc, #436]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d063      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f6:	4b6a      	ldr	r3, [pc, #424]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	2200      	movs	r2, #0
 80067fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006800:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	633b      	str	r3, [r7, #48]	; 0x30
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
 800680e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f04f 0000 	mov.w	r0, #0
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	0159      	lsls	r1, r3, #5
 8006820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006824:	0150      	lsls	r0, r2, #5
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4621      	mov	r1, r4
 800682c:	1a51      	subs	r1, r2, r1
 800682e:	6139      	str	r1, [r7, #16]
 8006830:	4629      	mov	r1, r5
 8006832:	eb63 0301 	sbc.w	r3, r3, r1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006844:	4659      	mov	r1, fp
 8006846:	018b      	lsls	r3, r1, #6
 8006848:	4651      	mov	r1, sl
 800684a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800684e:	4651      	mov	r1, sl
 8006850:	018a      	lsls	r2, r1, #6
 8006852:	4651      	mov	r1, sl
 8006854:	ebb2 0801 	subs.w	r8, r2, r1
 8006858:	4659      	mov	r1, fp
 800685a:	eb63 0901 	sbc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	462b      	mov	r3, r5
 8006880:	eb49 0303 	adc.w	r3, r9, r3
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006892:	4629      	mov	r1, r5
 8006894:	024b      	lsls	r3, r1, #9
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800689c:	4621      	mov	r1, r4
 800689e:	024a      	lsls	r2, r1, #9
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a6:	2200      	movs	r2, #0
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068b0:	f7f9 fcf6 	bl	80002a0 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068bc:	e058      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068be:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	2200      	movs	r2, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	4611      	mov	r1, r2
 80068ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	2300      	movs	r3, #0
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
 80068d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	f04f 0000 	mov.w	r0, #0
 80068e0:	f04f 0100 	mov.w	r1, #0
 80068e4:	0159      	lsls	r1, r3, #5
 80068e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ea:	0150      	lsls	r0, r2, #5
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4641      	mov	r1, r8
 80068f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80068f6:	4649      	mov	r1, r9
 80068f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800690c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006910:	ebb2 040a 	subs.w	r4, r2, sl
 8006914:	eb63 050b 	sbc.w	r5, r3, fp
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	00eb      	lsls	r3, r5, #3
 8006922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006926:	00e2      	lsls	r2, r4, #3
 8006928:	4614      	mov	r4, r2
 800692a:	461d      	mov	r5, r3
 800692c:	4643      	mov	r3, r8
 800692e:	18e3      	adds	r3, r4, r3
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	464b      	mov	r3, r9
 8006934:	eb45 0303 	adc.w	r3, r5, r3
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006946:	4629      	mov	r1, r5
 8006948:	028b      	lsls	r3, r1, #10
 800694a:	4621      	mov	r1, r4
 800694c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006950:	4621      	mov	r1, r4
 8006952:	028a      	lsls	r2, r1, #10
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695a:	2200      	movs	r2, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	61fa      	str	r2, [r7, #28]
 8006960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006964:	f7f9 fc9c 	bl	80002a0 <__aeabi_uldivmod>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4613      	mov	r3, r2
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	3301      	adds	r3, #1
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800698a:	e002      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800698e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006994:	4618      	mov	r0, r3
 8006996:	3750      	adds	r7, #80	; 0x50
 8006998:	46bd      	mov	sp, r7
 800699a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800699e:	bf00      	nop
 80069a0:	40023800 	.word	0x40023800
 80069a4:	00f42400 	.word	0x00f42400
 80069a8:	007a1200 	.word	0x007a1200

080069ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	2000013c 	.word	0x2000013c

080069c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069c8:	f7ff fff0 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4903      	ldr	r1, [pc, #12]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	0801d984 	.word	0x0801d984

080069ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069f0:	f7ff ffdc 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f4:	4602      	mov	r2, r0
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	0b5b      	lsrs	r3, r3, #13
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	4903      	ldr	r1, [pc, #12]	; (8006a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a02:	5ccb      	ldrb	r3, [r1, r3]
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	0801d984 	.word	0x0801d984

08006a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	220f      	movs	r2, #15
 8006a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a24:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0203 	and.w	r2, r3, #3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a30:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a48:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <HAL_RCC_GetClockConfig+0x60>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 020f 	and.w	r2, r3, #15
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	601a      	str	r2, [r3, #0]
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40023800 	.word	0x40023800
 8006a74:	40023c00 	.word	0x40023c00

08006a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d075      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aac:	4b91      	ldr	r3, [pc, #580]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab2:	f7fc fabd 	bl	8003030 <HAL_GetTick>
 8006ab6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aba:	f7fc fab9 	bl	8003030 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e189      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006acc:	4b8a      	ldr	r3, [pc, #552]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	019a      	lsls	r2, r3, #6
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	071b      	lsls	r3, r3, #28
 8006af0:	4981      	ldr	r1, [pc, #516]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01f      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b04:	4b7c      	ldr	r3, [pc, #496]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0a:	0f1b      	lsrs	r3, r3, #28
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	019a      	lsls	r2, r3, #6
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	061b      	lsls	r3, r3, #24
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	071b      	lsls	r3, r3, #28
 8006b24:	4974      	ldr	r1, [pc, #464]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b2c:	4b72      	ldr	r3, [pc, #456]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b32:	f023 021f 	bic.w	r2, r3, #31
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	496e      	ldr	r1, [pc, #440]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	019a      	lsls	r2, r3, #6
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	061b      	lsls	r3, r3, #24
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	071b      	lsls	r3, r3, #28
 8006b64:	4964      	ldr	r1, [pc, #400]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b6c:	4b61      	ldr	r3, [pc, #388]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b72:	f7fc fa5d 	bl	8003030 <HAL_GetTick>
 8006b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b78:	e008      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b7a:	f7fc fa59 	bl	8003030 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e129      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b8c:	4b5a      	ldr	r3, [pc, #360]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f0      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d079      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bb0:	4b52      	ldr	r3, [pc, #328]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb6:	f7fc fa3b 	bl	8003030 <HAL_GetTick>
 8006bba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bbe:	f7fc fa37 	bl	8003030 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e107      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bd0:	4b49      	ldr	r3, [pc, #292]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bdc:	d0ef      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d020      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bea:	4b43      	ldr	r3, [pc, #268]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	0f1b      	lsrs	r3, r3, #28
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	019a      	lsls	r2, r3, #6
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	061b      	lsls	r3, r3, #24
 8006c04:	431a      	orrs	r2, r3
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	071b      	lsls	r3, r3, #28
 8006c0a:	493b      	ldr	r1, [pc, #236]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c12:	4b39      	ldr	r3, [pc, #228]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	4934      	ldr	r1, [pc, #208]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01e      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c38:	4b2f      	ldr	r3, [pc, #188]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3e:	0e1b      	lsrs	r3, r3, #24
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	019a      	lsls	r2, r3, #6
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	061b      	lsls	r3, r3, #24
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	071b      	lsls	r3, r3, #28
 8006c58:	4927      	ldr	r1, [pc, #156]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c60:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	4922      	ldr	r1, [pc, #136]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c76:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c7c:	f7fc f9d8 	bl	8003030 <HAL_GetTick>
 8006c80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c84:	f7fc f9d4 	bl	8003030 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e0a4      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c96:	4b18      	ldr	r3, [pc, #96]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca2:	d1ef      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 808b 	beq.w	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	4a0f      	ldr	r2, [pc, #60]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cda:	f7fc f9a9 	bl	8003030 <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ce0:	e010      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ce2:	f7fc f9a5 	bl	8003030 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d909      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e075      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006cf4:	42470068 	.word	0x42470068
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	42470070 	.word	0x42470070
 8006d00:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d04:	4b38      	ldr	r3, [pc, #224]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0e8      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d10:	4b36      	ldr	r3, [pc, #216]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02f      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d028      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d2e:	4b2f      	ldr	r3, [pc, #188]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d38:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d3e:	4b2c      	ldr	r3, [pc, #176]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d44:	4a29      	ldr	r2, [pc, #164]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d4a:	4b28      	ldr	r3, [pc, #160]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d114      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d56:	f7fc f96b 	bl	8003030 <HAL_GetTick>
 8006d5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5c:	e00a      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d5e:	f7fc f967 	bl	8003030 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e035      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d74:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0ee      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d8c:	d10d      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006d8e:	4b17      	ldr	r3, [pc, #92]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	4912      	ldr	r1, [pc, #72]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	608b      	str	r3, [r1, #8]
 8006da8:	e005      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	4a0f      	ldr	r2, [pc, #60]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006db4:	6093      	str	r3, [r2, #8]
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc2:	490a      	ldr	r1, [pc, #40]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006dda:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006ddc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40007000 	.word	0x40007000
 8006dec:	40023800 	.word	0x40023800
 8006df0:	42470e40 	.word	0x42470e40
 8006df4:	424711e0 	.word	0x424711e0

08006df8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e066      	b.n	8006edc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7f5b      	ldrb	r3, [r3, #29]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fb f8d6 	bl	8001fd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	22ca      	movs	r2, #202	; 0xca
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2253      	movs	r2, #83	; 0x53
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f998 	bl	8007170 <RTC_EnterInitMode>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d12c      	bne.n	8006ea4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6899      	ldr	r1, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68d2      	ldr	r2, [r2, #12]
 8006e84:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6919      	ldr	r1, [r3, #16]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	041a      	lsls	r2, r3, #16
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f99f 	bl	80071de <RTC_ExitInitMode>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d113      	bne.n	8006ed2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006eb8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699a      	ldr	r2, [r3, #24]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	22ff      	movs	r2, #255	; 0xff
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ee4:	b590      	push	{r4, r7, lr}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	7f1b      	ldrb	r3, [r3, #28]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_RTC_SetTime+0x1c>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e087      	b.n	8007010 <HAL_RTC_SetTime+0x12c>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d126      	bne.n	8006f60 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f97c 	bl	8007228 <RTC_ByteToBcd2>
 8006f30:	4603      	mov	r3, r0
 8006f32:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f975 	bl	8007228 <RTC_ByteToBcd2>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f42:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	789b      	ldrb	r3, [r3, #2]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 f96d 	bl	8007228 <RTC_ByteToBcd2>
 8006f4e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f50:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	78db      	ldrb	r3, [r3, #3]
 8006f58:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	e018      	b.n	8006f92 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f80:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	78db      	ldrb	r3, [r3, #3]
 8006f8c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	22ca      	movs	r2, #202	; 0xca
 8006f98:	625a      	str	r2, [r3, #36]	; 0x24
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2253      	movs	r2, #83	; 0x53
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 f8e4 	bl	8007170 <RTC_EnterInitMode>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006fac:	7cfb      	ldrb	r3, [r7, #19]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d120      	bne.n	8006ff4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006fbc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006fc0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fd0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6899      	ldr	r1, [r3, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f8f7 	bl	80071de <RTC_ExitInitMode>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006ff4:	7cfb      	ldrb	r3, [r7, #19]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	22ff      	movs	r2, #255	; 0xff
 8007006:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	771a      	strb	r2, [r3, #28]

  return status;
 800700e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007010:	4618      	mov	r0, r3
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	bd90      	pop	{r4, r7, pc}

08007018 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	7f1b      	ldrb	r3, [r3, #28]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_RTC_SetDate+0x1c>
 8007030:	2302      	movs	r3, #2
 8007032:	e071      	b.n	8007118 <HAL_RTC_SetDate+0x100>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2202      	movs	r2, #2
 800703e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10e      	bne.n	8007064 <HAL_RTC_SetDate+0x4c>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	f003 0310 	and.w	r3, r3, #16
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	f023 0310 	bic.w	r3, r3, #16
 800705a:	b2db      	uxtb	r3, r3
 800705c:	330a      	adds	r3, #10
 800705e:	b2da      	uxtb	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d11c      	bne.n	80070a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	78db      	ldrb	r3, [r3, #3]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f8da 	bl	8007228 <RTC_ByteToBcd2>
 8007074:	4603      	mov	r3, r0
 8007076:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	4618      	mov	r0, r3
 800707e:	f000 f8d3 	bl	8007228 <RTC_ByteToBcd2>
 8007082:	4603      	mov	r3, r0
 8007084:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007086:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	789b      	ldrb	r3, [r3, #2]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 f8cb 	bl	8007228 <RTC_ByteToBcd2>
 8007092:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007094:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e00e      	b.n	80070c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	78db      	ldrb	r3, [r3, #3]
 80070a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070b0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	22ca      	movs	r2, #202	; 0xca
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2253      	movs	r2, #83	; 0x53
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f84c 	bl	8007170 <RTC_EnterInitMode>
 80070d8:	4603      	mov	r3, r0
 80070da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80070dc:	7cfb      	ldrb	r3, [r7, #19]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10c      	bne.n	80070fc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f873 	bl	80071de <RTC_ExitInitMode>
 80070f8:	4603      	mov	r3, r0
 80070fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80070fc:	7cfb      	ldrb	r3, [r7, #19]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	22ff      	movs	r2, #255	; 0xff
 800710e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	771a      	strb	r2, [r3, #28]

  return status;
 8007116:	7cfb      	ldrb	r3, [r7, #19]
}
 8007118:	4618      	mov	r0, r3
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd90      	pop	{r4, r7, pc}

08007120 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800713a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800713c:	f7fb ff78 	bl	8003030 <HAL_GetTick>
 8007140:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007142:	e009      	b.n	8007158 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007144:	f7fb ff74 	bl	8003030 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007152:	d901      	bls.n	8007158 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e007      	b.n	8007168 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0ee      	beq.n	8007144 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d122      	bne.n	80071d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800719c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800719e:	f7fb ff47 	bl	8003030 <HAL_GetTick>
 80071a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80071a4:	e00c      	b.n	80071c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071a6:	f7fb ff43 	bl	8003030 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b4:	d904      	bls.n	80071c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2204      	movs	r2, #4
 80071ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <RTC_EnterInitMode+0x64>
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d1e8      	bne.n	80071a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff ff89 	bl	8007120 <HAL_RTC_WaitForSynchro>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2204      	movs	r2, #4
 8007218:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007236:	e005      	b.n	8007244 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	3301      	adds	r3, #1
 800723c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	3b0a      	subs	r3, #10
 8007242:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b09      	cmp	r3, #9
 8007248:	d8f6      	bhi.n	8007238 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	b2da      	uxtb	r2, r3
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	4313      	orrs	r3, r2
 8007254:	b2db      	uxtb	r3, r3
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e041      	b.n	80072f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fa ff41 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f000 ffd3 	bl	800824c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d001      	beq.n	8007318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e04e      	b.n	80073b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a23      	ldr	r2, [pc, #140]	; (80073c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d022      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007342:	d01d      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1f      	ldr	r2, [pc, #124]	; (80073c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d018      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1e      	ldr	r2, [pc, #120]	; (80073cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00e      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d009      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a18      	ldr	r2, [pc, #96]	; (80073dc <HAL_TIM_Base_Start_IT+0xdc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d111      	bne.n	80073a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b06      	cmp	r3, #6
 8007390:	d010      	beq.n	80073b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	e007      	b.n	80073b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	40000c00 	.word	0x40000c00
 80073d4:	40010400 	.word	0x40010400
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40001800 	.word	0x40001800

080073e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e041      	b.n	8007476 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fa fe0c 	bl	8002024 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f000 ff14 	bl	800824c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_TIM_PWM_Start+0x24>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	e022      	b.n	80074ea <HAL_TIM_PWM_Start+0x6a>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d109      	bne.n	80074be <HAL_TIM_PWM_Start+0x3e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	bf14      	ite	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	2300      	moveq	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	e015      	b.n	80074ea <HAL_TIM_PWM_Start+0x6a>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d109      	bne.n	80074d8 <HAL_TIM_PWM_Start+0x58>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	bf14      	ite	ne
 80074d0:	2301      	movne	r3, #1
 80074d2:	2300      	moveq	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	e008      	b.n	80074ea <HAL_TIM_PWM_Start+0x6a>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e07c      	b.n	80075ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <HAL_TIM_PWM_Start+0x82>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007500:	e013      	b.n	800752a <HAL_TIM_PWM_Start+0xaa>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b04      	cmp	r3, #4
 8007506:	d104      	bne.n	8007512 <HAL_TIM_PWM_Start+0x92>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007510:	e00b      	b.n	800752a <HAL_TIM_PWM_Start+0xaa>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b08      	cmp	r3, #8
 8007516:	d104      	bne.n	8007522 <HAL_TIM_PWM_Start+0xa2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007520:	e003      	b.n	800752a <HAL_TIM_PWM_Start+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2201      	movs	r2, #1
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fa9e 	bl	8008a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2d      	ldr	r2, [pc, #180]	; (80075f4 <HAL_TIM_PWM_Start+0x174>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIM_PWM_Start+0xcc>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2c      	ldr	r2, [pc, #176]	; (80075f8 <HAL_TIM_PWM_Start+0x178>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d101      	bne.n	8007550 <HAL_TIM_PWM_Start+0xd0>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_TIM_PWM_Start+0xd2>
 8007550:	2300      	movs	r3, #0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007564:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a22      	ldr	r2, [pc, #136]	; (80075f4 <HAL_TIM_PWM_Start+0x174>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d022      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x136>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007578:	d01d      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x136>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1f      	ldr	r2, [pc, #124]	; (80075fc <HAL_TIM_PWM_Start+0x17c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d018      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x136>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1d      	ldr	r2, [pc, #116]	; (8007600 <HAL_TIM_PWM_Start+0x180>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x136>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <HAL_TIM_PWM_Start+0x184>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x136>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a16      	ldr	r2, [pc, #88]	; (80075f8 <HAL_TIM_PWM_Start+0x178>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x136>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <HAL_TIM_PWM_Start+0x188>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x136>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a16      	ldr	r2, [pc, #88]	; (800760c <HAL_TIM_PWM_Start+0x18c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d111      	bne.n	80075da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0307 	and.w	r3, r3, #7
 80075c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b06      	cmp	r3, #6
 80075c6:	d010      	beq.n	80075ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0201 	orr.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d8:	e007      	b.n	80075ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0201 	orr.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40010400 	.word	0x40010400
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40000c00 	.word	0x40000c00
 8007608:	40014000 	.word	0x40014000
 800760c:	40001800 	.word	0x40001800

08007610 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d109      	bne.n	8007638 <HAL_TIM_PWM_Start_IT+0x28>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b01      	cmp	r3, #1
 800762e:	bf14      	ite	ne
 8007630:	2301      	movne	r3, #1
 8007632:	2300      	moveq	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	e022      	b.n	800767e <HAL_TIM_PWM_Start_IT+0x6e>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b04      	cmp	r3, #4
 800763c:	d109      	bne.n	8007652 <HAL_TIM_PWM_Start_IT+0x42>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b01      	cmp	r3, #1
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	e015      	b.n	800767e <HAL_TIM_PWM_Start_IT+0x6e>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b08      	cmp	r3, #8
 8007656:	d109      	bne.n	800766c <HAL_TIM_PWM_Start_IT+0x5c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	bf14      	ite	ne
 8007664:	2301      	movne	r3, #1
 8007666:	2300      	moveq	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	e008      	b.n	800767e <HAL_TIM_PWM_Start_IT+0x6e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	bf14      	ite	ne
 8007678:	2301      	movne	r3, #1
 800767a:	2300      	moveq	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e0c7      	b.n	8007816 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d104      	bne.n	8007696 <HAL_TIM_PWM_Start_IT+0x86>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007694:	e013      	b.n	80076be <HAL_TIM_PWM_Start_IT+0xae>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b04      	cmp	r3, #4
 800769a:	d104      	bne.n	80076a6 <HAL_TIM_PWM_Start_IT+0x96>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a4:	e00b      	b.n	80076be <HAL_TIM_PWM_Start_IT+0xae>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d104      	bne.n	80076b6 <HAL_TIM_PWM_Start_IT+0xa6>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076b4:	e003      	b.n	80076be <HAL_TIM_PWM_Start_IT+0xae>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2202      	movs	r2, #2
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b0c      	cmp	r3, #12
 80076c2:	d841      	bhi.n	8007748 <HAL_TIM_PWM_Start_IT+0x138>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_TIM_PWM_Start_IT+0xbc>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007749 	.word	0x08007749
 80076d4:	08007749 	.word	0x08007749
 80076d8:	08007749 	.word	0x08007749
 80076dc:	08007713 	.word	0x08007713
 80076e0:	08007749 	.word	0x08007749
 80076e4:	08007749 	.word	0x08007749
 80076e8:	08007749 	.word	0x08007749
 80076ec:	08007725 	.word	0x08007725
 80076f0:	08007749 	.word	0x08007749
 80076f4:	08007749 	.word	0x08007749
 80076f8:	08007749 	.word	0x08007749
 80076fc:	08007737 	.word	0x08007737
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0202 	orr.w	r2, r2, #2
 800770e:	60da      	str	r2, [r3, #12]
      break;
 8007710:	e01d      	b.n	800774e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0204 	orr.w	r2, r2, #4
 8007720:	60da      	str	r2, [r3, #12]
      break;
 8007722:	e014      	b.n	800774e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0208 	orr.w	r2, r2, #8
 8007732:	60da      	str	r2, [r3, #12]
      break;
 8007734:	e00b      	b.n	800774e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0210 	orr.w	r2, r2, #16
 8007744:	60da      	str	r2, [r3, #12]
      break;
 8007746:	e002      	b.n	800774e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
      break;
 800774c:	bf00      	nop
  }

  if (status == HAL_OK)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d15f      	bne.n	8007814 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2201      	movs	r2, #1
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f989 	bl	8008a74 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2e      	ldr	r2, [pc, #184]	; (8007820 <HAL_TIM_PWM_Start_IT+0x210>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d004      	beq.n	8007776 <HAL_TIM_PWM_Start_IT+0x166>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a2c      	ldr	r2, [pc, #176]	; (8007824 <HAL_TIM_PWM_Start_IT+0x214>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d101      	bne.n	800777a <HAL_TIM_PWM_Start_IT+0x16a>
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <HAL_TIM_PWM_Start_IT+0x16c>
 800777a:	2300      	movs	r3, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800778e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a22      	ldr	r2, [pc, #136]	; (8007820 <HAL_TIM_PWM_Start_IT+0x210>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d022      	beq.n	80077e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a2:	d01d      	beq.n	80077e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a1f      	ldr	r2, [pc, #124]	; (8007828 <HAL_TIM_PWM_Start_IT+0x218>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d018      	beq.n	80077e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <HAL_TIM_PWM_Start_IT+0x21c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d013      	beq.n	80077e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1c      	ldr	r2, [pc, #112]	; (8007830 <HAL_TIM_PWM_Start_IT+0x220>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00e      	beq.n	80077e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a17      	ldr	r2, [pc, #92]	; (8007824 <HAL_TIM_PWM_Start_IT+0x214>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d009      	beq.n	80077e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a18      	ldr	r2, [pc, #96]	; (8007834 <HAL_TIM_PWM_Start_IT+0x224>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d004      	beq.n	80077e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <HAL_TIM_PWM_Start_IT+0x228>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d111      	bne.n	8007804 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b06      	cmp	r3, #6
 80077f0:	d010      	beq.n	8007814 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0201 	orr.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007802:	e007      	b.n	8007814 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000
 8007824:	40010400 	.word	0x40010400
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40000c00 	.word	0x40000c00
 8007834:	40014000 	.word	0x40014000
 8007838:	40001800 	.word	0x40001800

0800783c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e041      	b.n	80078d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fa fc04 	bl	8002070 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f000 fce6 	bl	800824c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_IC_Start_IT+0x1e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	e013      	b.n	8007922 <HAL_TIM_IC_Start_IT+0x46>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d104      	bne.n	800790a <HAL_TIM_IC_Start_IT+0x2e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007906:	b2db      	uxtb	r3, r3
 8007908:	e00b      	b.n	8007922 <HAL_TIM_IC_Start_IT+0x46>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b08      	cmp	r3, #8
 800790e:	d104      	bne.n	800791a <HAL_TIM_IC_Start_IT+0x3e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007916:	b2db      	uxtb	r3, r3
 8007918:	e003      	b.n	8007922 <HAL_TIM_IC_Start_IT+0x46>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007920:	b2db      	uxtb	r3, r3
 8007922:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <HAL_TIM_IC_Start_IT+0x58>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007930:	b2db      	uxtb	r3, r3
 8007932:	e013      	b.n	800795c <HAL_TIM_IC_Start_IT+0x80>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b04      	cmp	r3, #4
 8007938:	d104      	bne.n	8007944 <HAL_TIM_IC_Start_IT+0x68>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007940:	b2db      	uxtb	r3, r3
 8007942:	e00b      	b.n	800795c <HAL_TIM_IC_Start_IT+0x80>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b08      	cmp	r3, #8
 8007948:	d104      	bne.n	8007954 <HAL_TIM_IC_Start_IT+0x78>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007950:	b2db      	uxtb	r3, r3
 8007952:	e003      	b.n	800795c <HAL_TIM_IC_Start_IT+0x80>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800795a:	b2db      	uxtb	r3, r3
 800795c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d102      	bne.n	800796a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007964:	7b7b      	ldrb	r3, [r7, #13]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d001      	beq.n	800796e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e0cc      	b.n	8007b08 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <HAL_TIM_IC_Start_IT+0xa2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800797c:	e013      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0xca>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b04      	cmp	r3, #4
 8007982:	d104      	bne.n	800798e <HAL_TIM_IC_Start_IT+0xb2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800798c:	e00b      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0xca>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b08      	cmp	r3, #8
 8007992:	d104      	bne.n	800799e <HAL_TIM_IC_Start_IT+0xc2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800799c:	e003      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0xca>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2202      	movs	r2, #2
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_IC_Start_IT+0xda>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b4:	e013      	b.n	80079de <HAL_TIM_IC_Start_IT+0x102>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_IC_Start_IT+0xea>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079c4:	e00b      	b.n	80079de <HAL_TIM_IC_Start_IT+0x102>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d104      	bne.n	80079d6 <HAL_TIM_IC_Start_IT+0xfa>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079d4:	e003      	b.n	80079de <HAL_TIM_IC_Start_IT+0x102>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d841      	bhi.n	8007a68 <HAL_TIM_IC_Start_IT+0x18c>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_TIM_IC_Start_IT+0x110>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a21 	.word	0x08007a21
 80079f0:	08007a69 	.word	0x08007a69
 80079f4:	08007a69 	.word	0x08007a69
 80079f8:	08007a69 	.word	0x08007a69
 80079fc:	08007a33 	.word	0x08007a33
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	08007a69 	.word	0x08007a69
 8007a08:	08007a69 	.word	0x08007a69
 8007a0c:	08007a45 	.word	0x08007a45
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	08007a69 	.word	0x08007a69
 8007a1c:	08007a57 	.word	0x08007a57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0202 	orr.w	r2, r2, #2
 8007a2e:	60da      	str	r2, [r3, #12]
      break;
 8007a30:	e01d      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0204 	orr.w	r2, r2, #4
 8007a40:	60da      	str	r2, [r3, #12]
      break;
 8007a42:	e014      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0208 	orr.w	r2, r2, #8
 8007a52:	60da      	str	r2, [r3, #12]
      break;
 8007a54:	e00b      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0210 	orr.w	r2, r2, #16
 8007a64:	60da      	str	r2, [r3, #12]
      break;
 8007a66:	e002      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d148      	bne.n	8007b06 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fff9 	bl	8008a74 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a22      	ldr	r2, [pc, #136]	; (8007b10 <HAL_TIM_IC_Start_IT+0x234>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d022      	beq.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a94:	d01d      	beq.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <HAL_TIM_IC_Start_IT+0x238>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d018      	beq.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <HAL_TIM_IC_Start_IT+0x23c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <HAL_TIM_IC_Start_IT+0x240>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00e      	beq.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <HAL_TIM_IC_Start_IT+0x244>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a18      	ldr	r2, [pc, #96]	; (8007b24 <HAL_TIM_IC_Start_IT+0x248>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d004      	beq.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a16      	ldr	r2, [pc, #88]	; (8007b28 <HAL_TIM_IC_Start_IT+0x24c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d111      	bne.n	8007af6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b06      	cmp	r3, #6
 8007ae2:	d010      	beq.n	8007b06 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af4:	e007      	b.n	8007b06 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0201 	orr.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	40010000 	.word	0x40010000
 8007b14:	40000400 	.word	0x40000400
 8007b18:	40000800 	.word	0x40000800
 8007b1c:	40000c00 	.word	0x40000c00
 8007b20:	40010400 	.word	0x40010400
 8007b24:	40014000 	.word	0x40014000
 8007b28:	40001800 	.word	0x40001800

08007b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d122      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d11b      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0202 	mvn.w	r2, #2
 8007b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fb f868 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fb4a 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fb51 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d122      	bne.n	8007bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d11b      	bne.n	8007bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0204 	mvn.w	r2, #4
 8007bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fb f83e 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8007bc8:	e005      	b.n	8007bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fb20 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fb27 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d122      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d11b      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f06f 0208 	mvn.w	r2, #8
 8007c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2204      	movs	r2, #4
 8007c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fb f814 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8007c1c:	e005      	b.n	8007c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 faf6 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fafd 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	d122      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d11b      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0210 	mvn.w	r2, #16
 8007c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fa ffea 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8007c70:	e005      	b.n	8007c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 facc 	bl	8008210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fad3 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10e      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d107      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0201 	mvn.w	r2, #1
 8007ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7f9 ff1c 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cba:	2b80      	cmp	r3, #128	; 0x80
 8007cbc:	d10e      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d107      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 ff78 	bl	8008bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d10e      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d107      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa98 	bl	8008238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d10e      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d107      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0220 	mvn.w	r2, #32
 8007d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 ff42 	bl	8008bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e088      	b.n	8007e6c <HAL_TIM_IC_ConfigChannel+0x130>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11b      	bne.n	8007da0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f000 fcb8 	bl	80086ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 020c 	bic.w	r2, r2, #12
 8007d8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6999      	ldr	r1, [r3, #24]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	619a      	str	r2, [r3, #24]
 8007d9e:	e060      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d11c      	bne.n	8007de0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6819      	ldr	r1, [r3, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f000 fd3c 	bl	8008832 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dc8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6999      	ldr	r1, [r3, #24]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	021a      	lsls	r2, r3, #8
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	619a      	str	r2, [r3, #24]
 8007dde:	e040      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d11b      	bne.n	8007e1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6819      	ldr	r1, [r3, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f000 fd89 	bl	800890c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 020c 	bic.w	r2, r2, #12
 8007e08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69d9      	ldr	r1, [r3, #28]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	61da      	str	r2, [r3, #28]
 8007e1c:	e021      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d11c      	bne.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6819      	ldr	r1, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f000 fda6 	bl	8008984 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69da      	ldr	r2, [r3, #28]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69d9      	ldr	r1, [r3, #28]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	61da      	str	r2, [r3, #28]
 8007e5c:	e001      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e0ae      	b.n	8007ff0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b0c      	cmp	r3, #12
 8007e9e:	f200 809f 	bhi.w	8007fe0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ea2:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007edd 	.word	0x08007edd
 8007eac:	08007fe1 	.word	0x08007fe1
 8007eb0:	08007fe1 	.word	0x08007fe1
 8007eb4:	08007fe1 	.word	0x08007fe1
 8007eb8:	08007f1d 	.word	0x08007f1d
 8007ebc:	08007fe1 	.word	0x08007fe1
 8007ec0:	08007fe1 	.word	0x08007fe1
 8007ec4:	08007fe1 	.word	0x08007fe1
 8007ec8:	08007f5f 	.word	0x08007f5f
 8007ecc:	08007fe1 	.word	0x08007fe1
 8007ed0:	08007fe1 	.word	0x08007fe1
 8007ed4:	08007fe1 	.word	0x08007fe1
 8007ed8:	08007f9f 	.word	0x08007f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fa52 	bl	800838c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0208 	orr.w	r2, r2, #8
 8007ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0204 	bic.w	r2, r2, #4
 8007f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6999      	ldr	r1, [r3, #24]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	619a      	str	r2, [r3, #24]
      break;
 8007f1a:	e064      	b.n	8007fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 faa2 	bl	800846c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6999      	ldr	r1, [r3, #24]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	021a      	lsls	r2, r3, #8
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	619a      	str	r2, [r3, #24]
      break;
 8007f5c:	e043      	b.n	8007fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 faf7 	bl	8008558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69da      	ldr	r2, [r3, #28]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0208 	orr.w	r2, r2, #8
 8007f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0204 	bic.w	r2, r2, #4
 8007f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69d9      	ldr	r1, [r3, #28]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	61da      	str	r2, [r3, #28]
      break;
 8007f9c:	e023      	b.n	8007fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fb4b 	bl	8008640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69d9      	ldr	r1, [r3, #28]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	021a      	lsls	r2, r3, #8
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	61da      	str	r2, [r3, #28]
      break;
 8007fde:	e002      	b.n	8007fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_TIM_ConfigClockSource+0x1c>
 8008010:	2302      	movs	r3, #2
 8008012:	e0b4      	b.n	800817e <HAL_TIM_ConfigClockSource+0x186>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800803a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804c:	d03e      	beq.n	80080cc <HAL_TIM_ConfigClockSource+0xd4>
 800804e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008052:	f200 8087 	bhi.w	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 8008056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805a:	f000 8086 	beq.w	800816a <HAL_TIM_ConfigClockSource+0x172>
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008062:	d87f      	bhi.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 8008064:	2b70      	cmp	r3, #112	; 0x70
 8008066:	d01a      	beq.n	800809e <HAL_TIM_ConfigClockSource+0xa6>
 8008068:	2b70      	cmp	r3, #112	; 0x70
 800806a:	d87b      	bhi.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 800806c:	2b60      	cmp	r3, #96	; 0x60
 800806e:	d050      	beq.n	8008112 <HAL_TIM_ConfigClockSource+0x11a>
 8008070:	2b60      	cmp	r3, #96	; 0x60
 8008072:	d877      	bhi.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 8008074:	2b50      	cmp	r3, #80	; 0x50
 8008076:	d03c      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0xfa>
 8008078:	2b50      	cmp	r3, #80	; 0x50
 800807a:	d873      	bhi.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 800807c:	2b40      	cmp	r3, #64	; 0x40
 800807e:	d058      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x13a>
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d86f      	bhi.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 8008084:	2b30      	cmp	r3, #48	; 0x30
 8008086:	d064      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x15a>
 8008088:	2b30      	cmp	r3, #48	; 0x30
 800808a:	d86b      	bhi.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 800808c:	2b20      	cmp	r3, #32
 800808e:	d060      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x15a>
 8008090:	2b20      	cmp	r3, #32
 8008092:	d867      	bhi.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d05c      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x15a>
 8008098:	2b10      	cmp	r3, #16
 800809a:	d05a      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x15a>
 800809c:	e062      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6899      	ldr	r1, [r3, #8]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f000 fcc1 	bl	8008a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	609a      	str	r2, [r3, #8]
      break;
 80080ca:	e04f      	b.n	800816c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	6899      	ldr	r1, [r3, #8]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f000 fcaa 	bl	8008a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ee:	609a      	str	r2, [r3, #8]
      break;
 80080f0:	e03c      	b.n	800816c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6859      	ldr	r1, [r3, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	461a      	mov	r2, r3
 8008100:	f000 fb68 	bl	80087d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2150      	movs	r1, #80	; 0x50
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fc77 	bl	80089fe <TIM_ITRx_SetConfig>
      break;
 8008110:	e02c      	b.n	800816c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6859      	ldr	r1, [r3, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	461a      	mov	r2, r3
 8008120:	f000 fbc4 	bl	80088ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2160      	movs	r1, #96	; 0x60
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fc67 	bl	80089fe <TIM_ITRx_SetConfig>
      break;
 8008130:	e01c      	b.n	800816c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	461a      	mov	r2, r3
 8008140:	f000 fb48 	bl	80087d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2140      	movs	r1, #64	; 0x40
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fc57 	bl	80089fe <TIM_ITRx_SetConfig>
      break;
 8008150:	e00c      	b.n	800816c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f000 fc4e 	bl	80089fe <TIM_ITRx_SetConfig>
      break;
 8008162:	e003      	b.n	800816c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	73fb      	strb	r3, [r7, #15]
      break;
 8008168:	e000      	b.n	800816c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800816a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b0c      	cmp	r3, #12
 800819a:	d831      	bhi.n	8008200 <HAL_TIM_ReadCapturedValue+0x78>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081d9 	.word	0x080081d9
 80081a8:	08008201 	.word	0x08008201
 80081ac:	08008201 	.word	0x08008201
 80081b0:	08008201 	.word	0x08008201
 80081b4:	080081e3 	.word	0x080081e3
 80081b8:	08008201 	.word	0x08008201
 80081bc:	08008201 	.word	0x08008201
 80081c0:	08008201 	.word	0x08008201
 80081c4:	080081ed 	.word	0x080081ed
 80081c8:	08008201 	.word	0x08008201
 80081cc:	08008201 	.word	0x08008201
 80081d0:	08008201 	.word	0x08008201
 80081d4:	080081f7 	.word	0x080081f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081de:	60fb      	str	r3, [r7, #12]

      break;
 80081e0:	e00f      	b.n	8008202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	60fb      	str	r3, [r7, #12]

      break;
 80081ea:	e00a      	b.n	8008202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	60fb      	str	r3, [r7, #12]

      break;
 80081f4:	e005      	b.n	8008202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	60fb      	str	r3, [r7, #12]

      break;
 80081fe:	e000      	b.n	8008202 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008200:	bf00      	nop
  }

  return tmpreg;
 8008202:	68fb      	ldr	r3, [r7, #12]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a40      	ldr	r2, [pc, #256]	; (8008360 <TIM_Base_SetConfig+0x114>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d013      	beq.n	800828c <TIM_Base_SetConfig+0x40>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d00f      	beq.n	800828c <TIM_Base_SetConfig+0x40>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a3d      	ldr	r2, [pc, #244]	; (8008364 <TIM_Base_SetConfig+0x118>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00b      	beq.n	800828c <TIM_Base_SetConfig+0x40>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a3c      	ldr	r2, [pc, #240]	; (8008368 <TIM_Base_SetConfig+0x11c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d007      	beq.n	800828c <TIM_Base_SetConfig+0x40>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a3b      	ldr	r2, [pc, #236]	; (800836c <TIM_Base_SetConfig+0x120>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d003      	beq.n	800828c <TIM_Base_SetConfig+0x40>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a3a      	ldr	r2, [pc, #232]	; (8008370 <TIM_Base_SetConfig+0x124>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d108      	bne.n	800829e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a2f      	ldr	r2, [pc, #188]	; (8008360 <TIM_Base_SetConfig+0x114>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d02b      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ac:	d027      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <TIM_Base_SetConfig+0x118>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d023      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <TIM_Base_SetConfig+0x11c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d01f      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a2a      	ldr	r2, [pc, #168]	; (800836c <TIM_Base_SetConfig+0x120>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01b      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a29      	ldr	r2, [pc, #164]	; (8008370 <TIM_Base_SetConfig+0x124>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d017      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a28      	ldr	r2, [pc, #160]	; (8008374 <TIM_Base_SetConfig+0x128>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a27      	ldr	r2, [pc, #156]	; (8008378 <TIM_Base_SetConfig+0x12c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00f      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a26      	ldr	r2, [pc, #152]	; (800837c <TIM_Base_SetConfig+0x130>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00b      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a25      	ldr	r2, [pc, #148]	; (8008380 <TIM_Base_SetConfig+0x134>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d007      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a24      	ldr	r2, [pc, #144]	; (8008384 <TIM_Base_SetConfig+0x138>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d003      	beq.n	80082fe <TIM_Base_SetConfig+0xb2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a23      	ldr	r2, [pc, #140]	; (8008388 <TIM_Base_SetConfig+0x13c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d108      	bne.n	8008310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a0a      	ldr	r2, [pc, #40]	; (8008360 <TIM_Base_SetConfig+0x114>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <TIM_Base_SetConfig+0xf8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a0c      	ldr	r2, [pc, #48]	; (8008370 <TIM_Base_SetConfig+0x124>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d103      	bne.n	800834c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	615a      	str	r2, [r3, #20]
}
 8008352:	bf00      	nop
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40010000 	.word	0x40010000
 8008364:	40000400 	.word	0x40000400
 8008368:	40000800 	.word	0x40000800
 800836c:	40000c00 	.word	0x40000c00
 8008370:	40010400 	.word	0x40010400
 8008374:	40014000 	.word	0x40014000
 8008378:	40014400 	.word	0x40014400
 800837c:	40014800 	.word	0x40014800
 8008380:	40001800 	.word	0x40001800
 8008384:	40001c00 	.word	0x40001c00
 8008388:	40002000 	.word	0x40002000

0800838c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f023 0201 	bic.w	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f023 0302 	bic.w	r3, r3, #2
 80083d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a20      	ldr	r2, [pc, #128]	; (8008464 <TIM_OC1_SetConfig+0xd8>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d003      	beq.n	80083f0 <TIM_OC1_SetConfig+0x64>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <TIM_OC1_SetConfig+0xdc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d10c      	bne.n	800840a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f023 0308 	bic.w	r3, r3, #8
 80083f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f023 0304 	bic.w	r3, r3, #4
 8008408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a15      	ldr	r2, [pc, #84]	; (8008464 <TIM_OC1_SetConfig+0xd8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_OC1_SetConfig+0x8e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <TIM_OC1_SetConfig+0xdc>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d111      	bne.n	800843e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	4313      	orrs	r3, r2
 8008432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	621a      	str	r2, [r3, #32]
}
 8008458:	bf00      	nop
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	40010000 	.word	0x40010000
 8008468:	40010400 	.word	0x40010400

0800846c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f023 0210 	bic.w	r2, r3, #16
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	021b      	lsls	r3, r3, #8
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f023 0320 	bic.w	r3, r3, #32
 80084b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a22      	ldr	r2, [pc, #136]	; (8008550 <TIM_OC2_SetConfig+0xe4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_OC2_SetConfig+0x68>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a21      	ldr	r2, [pc, #132]	; (8008554 <TIM_OC2_SetConfig+0xe8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d10d      	bne.n	80084f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a17      	ldr	r2, [pc, #92]	; (8008550 <TIM_OC2_SetConfig+0xe4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_OC2_SetConfig+0x94>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a16      	ldr	r2, [pc, #88]	; (8008554 <TIM_OC2_SetConfig+0xe8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d113      	bne.n	8008528 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800850e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	621a      	str	r2, [r3, #32]
}
 8008542:	bf00      	nop
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	40010000 	.word	0x40010000
 8008554:	40010400 	.word	0x40010400

08008558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a21      	ldr	r2, [pc, #132]	; (8008638 <TIM_OC3_SetConfig+0xe0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d003      	beq.n	80085be <TIM_OC3_SetConfig+0x66>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a20      	ldr	r2, [pc, #128]	; (800863c <TIM_OC3_SetConfig+0xe4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d10d      	bne.n	80085da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a16      	ldr	r2, [pc, #88]	; (8008638 <TIM_OC3_SetConfig+0xe0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d003      	beq.n	80085ea <TIM_OC3_SetConfig+0x92>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a15      	ldr	r2, [pc, #84]	; (800863c <TIM_OC3_SetConfig+0xe4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d113      	bne.n	8008612 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	4313      	orrs	r3, r2
 8008604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	621a      	str	r2, [r3, #32]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40010000 	.word	0x40010000
 800863c:	40010400 	.word	0x40010400

08008640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800868a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	031b      	lsls	r3, r3, #12
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a12      	ldr	r2, [pc, #72]	; (80086e4 <TIM_OC4_SetConfig+0xa4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d003      	beq.n	80086a8 <TIM_OC4_SetConfig+0x68>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a11      	ldr	r2, [pc, #68]	; (80086e8 <TIM_OC4_SetConfig+0xa8>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d109      	bne.n	80086bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	019b      	lsls	r3, r3, #6
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	621a      	str	r2, [r3, #32]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	40010000 	.word	0x40010000
 80086e8:	40010400 	.word	0x40010400

080086ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f023 0201 	bic.w	r2, r3, #1
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <TIM_TI1_SetConfig+0xcc>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d01b      	beq.n	8008752 <TIM_TI1_SetConfig+0x66>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008720:	d017      	beq.n	8008752 <TIM_TI1_SetConfig+0x66>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a25      	ldr	r2, [pc, #148]	; (80087bc <TIM_TI1_SetConfig+0xd0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d013      	beq.n	8008752 <TIM_TI1_SetConfig+0x66>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4a24      	ldr	r2, [pc, #144]	; (80087c0 <TIM_TI1_SetConfig+0xd4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d00f      	beq.n	8008752 <TIM_TI1_SetConfig+0x66>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4a23      	ldr	r2, [pc, #140]	; (80087c4 <TIM_TI1_SetConfig+0xd8>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00b      	beq.n	8008752 <TIM_TI1_SetConfig+0x66>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4a22      	ldr	r2, [pc, #136]	; (80087c8 <TIM_TI1_SetConfig+0xdc>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d007      	beq.n	8008752 <TIM_TI1_SetConfig+0x66>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4a21      	ldr	r2, [pc, #132]	; (80087cc <TIM_TI1_SetConfig+0xe0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d003      	beq.n	8008752 <TIM_TI1_SetConfig+0x66>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4a20      	ldr	r2, [pc, #128]	; (80087d0 <TIM_TI1_SetConfig+0xe4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d101      	bne.n	8008756 <TIM_TI1_SetConfig+0x6a>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <TIM_TI1_SetConfig+0x6c>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d008      	beq.n	800876e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0303 	bic.w	r3, r3, #3
 8008762:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4313      	orrs	r3, r2
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	e003      	b.n	8008776 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f043 0301 	orr.w	r3, r3, #1
 8008774:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800877c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	b2db      	uxtb	r3, r3
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f023 030a 	bic.w	r3, r3, #10
 8008790:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f003 030a 	and.w	r3, r3, #10
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	621a      	str	r2, [r3, #32]
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40010000 	.word	0x40010000
 80087bc:	40000400 	.word	0x40000400
 80087c0:	40000800 	.word	0x40000800
 80087c4:	40000c00 	.word	0x40000c00
 80087c8:	40010400 	.word	0x40010400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40001800 	.word	0x40001800

080087d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	f023 0201 	bic.w	r2, r3, #1
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f023 030a 	bic.w	r3, r3, #10
 8008810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4313      	orrs	r3, r2
 8008818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	621a      	str	r2, [r3, #32]
}
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008832:	b480      	push	{r7}
 8008834:	b087      	sub	sp, #28
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	f023 0210 	bic.w	r2, r3, #16
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800885e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	031b      	lsls	r3, r3, #12
 8008876:	b29b      	uxth	r3, r3
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008884:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	621a      	str	r2, [r3, #32]
}
 80088a0:	bf00      	nop
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	f023 0210 	bic.w	r2, r3, #16
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	031b      	lsls	r3, r3, #12
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	621a      	str	r2, [r3, #32]
}
 8008900:	bf00      	nop
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008948:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	b2db      	uxtb	r3, r3
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800895c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	621a      	str	r2, [r3, #32]
}
 8008978:	bf00      	nop
 800897a:	371c      	adds	r7, #28
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	031b      	lsls	r3, r3, #12
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80089d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	031b      	lsls	r3, r3, #12
 80089dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	621a      	str	r2, [r3, #32]
}
 80089f2:	bf00      	nop
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	f043 0307 	orr.w	r3, r3, #7
 8008a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	609a      	str	r2, [r3, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	021a      	lsls	r2, r3, #8
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	609a      	str	r2, [r3, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	371c      	adds	r7, #28
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 031f 	and.w	r3, r3, #31
 8008a86:	2201      	movs	r2, #1
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1a      	ldr	r2, [r3, #32]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	43db      	mvns	r3, r3
 8008a96:	401a      	ands	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1a      	ldr	r2, [r3, #32]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f003 031f 	and.w	r3, r3, #31
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008aac:	431a      	orrs	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	621a      	str	r2, [r3, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
	...

08008ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e05a      	b.n	8008b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a21      	ldr	r2, [pc, #132]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d022      	beq.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b24:	d01d      	beq.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1d      	ldr	r2, [pc, #116]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d018      	beq.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1b      	ldr	r2, [pc, #108]	; (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d013      	beq.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1a      	ldr	r2, [pc, #104]	; (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00e      	beq.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a18      	ldr	r2, [pc, #96]	; (8008bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d009      	beq.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a17      	ldr	r2, [pc, #92]	; (8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d004      	beq.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d10c      	bne.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	40000800 	.word	0x40000800
 8008ba8:	40000c00 	.word	0x40000c00
 8008bac:	40010400 	.word	0x40010400
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40001800 	.word	0x40001800

08008bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e03f      	b.n	8008c72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7f9 fb62 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2224      	movs	r2, #36	; 0x24
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fddf 	bl	80097e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b08a      	sub	sp, #40	; 0x28
 8008c7e:	af02      	add	r7, sp, #8
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	603b      	str	r3, [r7, #0]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d17c      	bne.n	8008d94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <HAL_UART_Transmit+0x2c>
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e075      	b.n	8008d96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_UART_Transmit+0x3e>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e06e      	b.n	8008d96 <HAL_UART_Transmit+0x11c>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2221      	movs	r2, #33	; 0x21
 8008cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cce:	f7fa f9af 	bl	8003030 <HAL_GetTick>
 8008cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	88fa      	ldrh	r2, [r7, #6]
 8008cd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce8:	d108      	bne.n	8008cfc <HAL_UART_Transmit+0x82>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	e003      	b.n	8008d04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d0c:	e02a      	b.n	8008d64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2200      	movs	r2, #0
 8008d16:	2180      	movs	r1, #128	; 0x80
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 fb1f 	bl	800935c <UART_WaitOnFlagUntilTimeout>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e036      	b.n	8008d96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10b      	bne.n	8008d46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	3302      	adds	r3, #2
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e007      	b.n	8008d56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	781a      	ldrb	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	3301      	adds	r3, #1
 8008d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1cf      	bne.n	8008d0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2200      	movs	r2, #0
 8008d76:	2140      	movs	r1, #64	; 0x40
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 faef 	bl	800935c <UART_WaitOnFlagUntilTimeout>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e006      	b.n	8008d96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	e000      	b.n	8008d96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d94:	2302      	movs	r3, #2
  }
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d11d      	bne.n	8008df4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <HAL_UART_Receive_IT+0x26>
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e016      	b.n	8008df6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_UART_Receive_IT+0x38>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e00f      	b.n	8008df6 <HAL_UART_Receive_IT+0x58>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	461a      	mov	r2, r3
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fb24 	bl	8009438 <UART_Start_Receive_IT>
 8008df0:	4603      	mov	r3, r0
 8008df2:	e000      	b.n	8008df6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b0ba      	sub	sp, #232	; 0xe8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10f      	bne.n	8008e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <HAL_UART_IRQHandler+0x66>
 8008e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fc07 	bl	8009672 <UART_Receive_IT>
      return;
 8008e64:	e256      	b.n	8009314 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80de 	beq.w	800902c <HAL_UART_IRQHandler+0x22c>
 8008e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 80d1 	beq.w	800902c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <HAL_UART_IRQHandler+0xae>
 8008e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f043 0201 	orr.w	r2, r3, #1
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb2:	f003 0304 	and.w	r3, r3, #4
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00b      	beq.n	8008ed2 <HAL_UART_IRQHandler+0xd2>
 8008eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	f043 0202 	orr.w	r2, r3, #2
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00b      	beq.n	8008ef6 <HAL_UART_IRQHandler+0xf6>
 8008ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	f043 0204 	orr.w	r2, r3, #4
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efa:	f003 0308 	and.w	r3, r3, #8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d011      	beq.n	8008f26 <HAL_UART_IRQHandler+0x126>
 8008f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f043 0208 	orr.w	r2, r3, #8
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 81ed 	beq.w	800930a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d008      	beq.n	8008f4e <HAL_UART_IRQHandler+0x14e>
 8008f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fb92 	bl	8009672 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b40      	cmp	r3, #64	; 0x40
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2301      	moveq	r3, #1
 8008f5e:	2300      	movne	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d103      	bne.n	8008f7a <HAL_UART_IRQHandler+0x17a>
 8008f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d04f      	beq.n	800901a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa9a 	bl	80094b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8a:	2b40      	cmp	r3, #64	; 0x40
 8008f8c:	d141      	bne.n	8009012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3314      	adds	r3, #20
 8008f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3314      	adds	r3, #20
 8008fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1d9      	bne.n	8008f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d013      	beq.n	800900a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe6:	4a7d      	ldr	r2, [pc, #500]	; (80091dc <HAL_UART_IRQHandler+0x3dc>)
 8008fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fa fe2c 	bl	8003c4c <HAL_DMA_Abort_IT>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d016      	beq.n	8009028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009008:	e00e      	b.n	8009028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f990 	bl	8009330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009010:	e00a      	b.n	8009028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f98c 	bl	8009330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	e006      	b.n	8009028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f988 	bl	8009330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009026:	e170      	b.n	800930a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009028:	bf00      	nop
    return;
 800902a:	e16e      	b.n	800930a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	2b01      	cmp	r3, #1
 8009032:	f040 814a 	bne.w	80092ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 8143 	beq.w	80092ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 813c 	beq.w	80092ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009052:	2300      	movs	r3, #0
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60bb      	str	r3, [r7, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	f040 80b4 	bne.w	80091e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8140 	beq.w	800930e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009096:	429a      	cmp	r2, r3
 8009098:	f080 8139 	bcs.w	800930e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ae:	f000 8088 	beq.w	80091c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	330c      	adds	r3, #12
 80090b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	330c      	adds	r3, #12
 80090da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80090de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1d9      	bne.n	80090b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3314      	adds	r3, #20
 8009104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800910e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3314      	adds	r3, #20
 800911e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800912a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e1      	bne.n	80090fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3314      	adds	r3, #20
 8009140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800914a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800914c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3314      	adds	r3, #20
 800915a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800915e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800916c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e3      	bne.n	800913a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	330c      	adds	r3, #12
 8009186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009192:	f023 0310 	bic.w	r3, r3, #16
 8009196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80091a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80091a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e3      	bne.n	8009180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fa fcd5 	bl	8003b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f8b6 	bl	8009344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091d8:	e099      	b.n	800930e <HAL_UART_IRQHandler+0x50e>
 80091da:	bf00      	nop
 80091dc:	0800957b 	.word	0x0800957b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 808b 	beq.w	8009312 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80091fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8086 	beq.w	8009312 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	330c      	adds	r3, #12
 800920c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800921c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	330c      	adds	r3, #12
 8009226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800922a:	647a      	str	r2, [r7, #68]	; 0x44
 800922c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e3      	bne.n	8009206 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3314      	adds	r3, #20
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	623b      	str	r3, [r7, #32]
   return(result);
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3314      	adds	r3, #20
 800925e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009262:	633a      	str	r2, [r7, #48]	; 0x30
 8009264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e3      	bne.n	800923e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	60fb      	str	r3, [r7, #12]
   return(result);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 0310 	bic.w	r3, r3, #16
 800929a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330c      	adds	r3, #12
 80092a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80092a8:	61fa      	str	r2, [r7, #28]
 80092aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	69b9      	ldr	r1, [r7, #24]
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	617b      	str	r3, [r7, #20]
   return(result);
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e3      	bne.n	8009284 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f83e 	bl	8009344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c8:	e023      	b.n	8009312 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <HAL_UART_IRQHandler+0x4ea>
 80092d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f95d 	bl	80095a2 <UART_Transmit_IT>
    return;
 80092e8:	e014      	b.n	8009314 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00e      	beq.n	8009314 <HAL_UART_IRQHandler+0x514>
 80092f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d008      	beq.n	8009314 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f99d 	bl	8009642 <UART_EndTransmit_IT>
    return;
 8009308:	e004      	b.n	8009314 <HAL_UART_IRQHandler+0x514>
    return;
 800930a:	bf00      	nop
 800930c:	e002      	b.n	8009314 <HAL_UART_IRQHandler+0x514>
      return;
 800930e:	bf00      	nop
 8009310:	e000      	b.n	8009314 <HAL_UART_IRQHandler+0x514>
      return;
 8009312:	bf00      	nop
  }
}
 8009314:	37e8      	adds	r7, #232	; 0xe8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop

0800931c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b090      	sub	sp, #64	; 0x40
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	4613      	mov	r3, r2
 800936a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800936c:	e050      	b.n	8009410 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800936e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009374:	d04c      	beq.n	8009410 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009378:	2b00      	cmp	r3, #0
 800937a:	d007      	beq.n	800938c <UART_WaitOnFlagUntilTimeout+0x30>
 800937c:	f7f9 fe58 	bl	8003030 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009388:	429a      	cmp	r2, r3
 800938a:	d241      	bcs.n	8009410 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	e853 3f00 	ldrex	r3, [r3]
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	330c      	adds	r3, #12
 80093aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093ac:	637a      	str	r2, [r7, #52]	; 0x34
 80093ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e5      	bne.n	800938c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3314      	adds	r3, #20
 80093c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	613b      	str	r3, [r7, #16]
   return(result);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f023 0301 	bic.w	r3, r3, #1
 80093d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3314      	adds	r3, #20
 80093de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093e0:	623a      	str	r2, [r7, #32]
 80093e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	69f9      	ldr	r1, [r7, #28]
 80093e6:	6a3a      	ldr	r2, [r7, #32]
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e5      	bne.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2220      	movs	r2, #32
 8009400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e00f      	b.n	8009430 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	4013      	ands	r3, r2
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	429a      	cmp	r2, r3
 800941e:	bf0c      	ite	eq
 8009420:	2301      	moveq	r3, #1
 8009422:	2300      	movne	r3, #0
 8009424:	b2db      	uxtb	r3, r3
 8009426:	461a      	mov	r2, r3
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	429a      	cmp	r2, r3
 800942c:	d09f      	beq.n	800936e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3740      	adds	r7, #64	; 0x40
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	88fa      	ldrh	r2, [r7, #6]
 8009456:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2222      	movs	r2, #34	; 0x22
 8009462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d007      	beq.n	8009486 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009484:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	695a      	ldr	r2, [r3, #20]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f042 0201 	orr.w	r2, r2, #1
 8009494:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68da      	ldr	r2, [r3, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f042 0220 	orr.w	r2, r2, #32
 80094a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b095      	sub	sp, #84	; 0x54
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	330c      	adds	r3, #12
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094dc:	643a      	str	r2, [r7, #64]	; 0x40
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e5      	bne.n	80094bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3314      	adds	r3, #20
 80094f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f023 0301 	bic.w	r3, r3, #1
 8009506:	64bb      	str	r3, [r7, #72]	; 0x48
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3314      	adds	r3, #20
 800950e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e5      	bne.n	80094f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	2b01      	cmp	r3, #1
 800952a:	d119      	bne.n	8009560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	330c      	adds	r3, #12
 8009532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	60bb      	str	r3, [r7, #8]
   return(result);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f023 0310 	bic.w	r3, r3, #16
 8009542:	647b      	str	r3, [r7, #68]	; 0x44
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800954c:	61ba      	str	r2, [r7, #24]
 800954e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6979      	ldr	r1, [r7, #20]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	613b      	str	r3, [r7, #16]
   return(result);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e5      	bne.n	800952c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800956e:	bf00      	nop
 8009570:	3754      	adds	r7, #84	; 0x54
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fecb 	bl	8009330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b21      	cmp	r3, #33	; 0x21
 80095b4:	d13e      	bne.n	8009634 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095be:	d114      	bne.n	80095ea <UART_Transmit_IT+0x48>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d110      	bne.n	80095ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	1c9a      	adds	r2, r3, #2
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	621a      	str	r2, [r3, #32]
 80095e8:	e008      	b.n	80095fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	1c59      	adds	r1, r3, #1
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6211      	str	r1, [r2, #32]
 80095f4:	781a      	ldrb	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009600:	b29b      	uxth	r3, r3
 8009602:	3b01      	subs	r3, #1
 8009604:	b29b      	uxth	r3, r3
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	4619      	mov	r1, r3
 800960a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10f      	bne.n	8009630 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800961e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800962e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	e000      	b.n	8009636 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009634:	2302      	movs	r3, #2
  }
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009658:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7ff fe5a 	bl	800931c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b08c      	sub	sp, #48	; 0x30
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b22      	cmp	r3, #34	; 0x22
 8009684:	f040 80ab 	bne.w	80097de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009690:	d117      	bne.n	80096c2 <UART_Receive_IT+0x50>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d113      	bne.n	80096c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ba:	1c9a      	adds	r2, r3, #2
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	629a      	str	r2, [r3, #40]	; 0x28
 80096c0:	e026      	b.n	8009710 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80096c8:	2300      	movs	r3, #0
 80096ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d4:	d007      	beq.n	80096e6 <UART_Receive_IT+0x74>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <UART_Receive_IT+0x82>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e008      	b.n	8009706 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009700:	b2da      	uxtb	r2, r3
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29b      	uxth	r3, r3
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	4619      	mov	r1, r3
 800971e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009720:	2b00      	cmp	r3, #0
 8009722:	d15a      	bne.n	80097da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0220 	bic.w	r2, r2, #32
 8009732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695a      	ldr	r2, [r3, #20]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0201 	bic.w	r2, r2, #1
 8009752:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009760:	2b01      	cmp	r3, #1
 8009762:	d135      	bne.n	80097d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	330c      	adds	r3, #12
 8009770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	e853 3f00 	ldrex	r3, [r3]
 8009778:	613b      	str	r3, [r7, #16]
   return(result);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f023 0310 	bic.w	r3, r3, #16
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	330c      	adds	r3, #12
 8009788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800978a:	623a      	str	r2, [r7, #32]
 800978c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978e:	69f9      	ldr	r1, [r7, #28]
 8009790:	6a3a      	ldr	r2, [r7, #32]
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	61bb      	str	r3, [r7, #24]
   return(result);
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e5      	bne.n	800976a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0310 	and.w	r3, r3, #16
 80097a8:	2b10      	cmp	r3, #16
 80097aa:	d10a      	bne.n	80097c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097ac:	2300      	movs	r3, #0
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff fdbb 	bl	8009344 <HAL_UARTEx_RxEventCallback>
 80097ce:	e002      	b.n	80097d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7f9 f861 	bl	8002898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e002      	b.n	80097e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	e000      	b.n	80097e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80097de:	2302      	movs	r3, #2
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3730      	adds	r7, #48	; 0x30
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097ec:	b0c0      	sub	sp, #256	; 0x100
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009804:	68d9      	ldr	r1, [r3, #12]
 8009806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	ea40 0301 	orr.w	r3, r0, r1
 8009810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	431a      	orrs	r2, r3
 8009820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	431a      	orrs	r2, r3
 8009828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	4313      	orrs	r3, r2
 8009830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009840:	f021 010c 	bic.w	r1, r1, #12
 8009844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800984e:	430b      	orrs	r3, r1
 8009850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800985e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009862:	6999      	ldr	r1, [r3, #24]
 8009864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	ea40 0301 	orr.w	r3, r0, r1
 800986e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	4b8f      	ldr	r3, [pc, #572]	; (8009ab4 <UART_SetConfig+0x2cc>)
 8009878:	429a      	cmp	r2, r3
 800987a:	d005      	beq.n	8009888 <UART_SetConfig+0xa0>
 800987c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b8d      	ldr	r3, [pc, #564]	; (8009ab8 <UART_SetConfig+0x2d0>)
 8009884:	429a      	cmp	r2, r3
 8009886:	d104      	bne.n	8009892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009888:	f7fd f8b0 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 800988c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009890:	e003      	b.n	800989a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009892:	f7fd f897 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8009896:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800989a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a4:	f040 810c 	bne.w	8009ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098ac:	2200      	movs	r2, #0
 80098ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80098b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80098ba:	4622      	mov	r2, r4
 80098bc:	462b      	mov	r3, r5
 80098be:	1891      	adds	r1, r2, r2
 80098c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80098c2:	415b      	adcs	r3, r3
 80098c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098ca:	4621      	mov	r1, r4
 80098cc:	eb12 0801 	adds.w	r8, r2, r1
 80098d0:	4629      	mov	r1, r5
 80098d2:	eb43 0901 	adc.w	r9, r3, r1
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	f04f 0300 	mov.w	r3, #0
 80098de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098ea:	4690      	mov	r8, r2
 80098ec:	4699      	mov	r9, r3
 80098ee:	4623      	mov	r3, r4
 80098f0:	eb18 0303 	adds.w	r3, r8, r3
 80098f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098f8:	462b      	mov	r3, r5
 80098fa:	eb49 0303 	adc.w	r3, r9, r3
 80098fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800990e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009916:	460b      	mov	r3, r1
 8009918:	18db      	adds	r3, r3, r3
 800991a:	653b      	str	r3, [r7, #80]	; 0x50
 800991c:	4613      	mov	r3, r2
 800991e:	eb42 0303 	adc.w	r3, r2, r3
 8009922:	657b      	str	r3, [r7, #84]	; 0x54
 8009924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800992c:	f7f6 fcb8 	bl	80002a0 <__aeabi_uldivmod>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4b61      	ldr	r3, [pc, #388]	; (8009abc <UART_SetConfig+0x2d4>)
 8009936:	fba3 2302 	umull	r2, r3, r3, r2
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	011c      	lsls	r4, r3, #4
 800993e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009942:	2200      	movs	r2, #0
 8009944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009948:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800994c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	1891      	adds	r1, r2, r2
 8009956:	64b9      	str	r1, [r7, #72]	; 0x48
 8009958:	415b      	adcs	r3, r3
 800995a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009960:	4641      	mov	r1, r8
 8009962:	eb12 0a01 	adds.w	sl, r2, r1
 8009966:	4649      	mov	r1, r9
 8009968:	eb43 0b01 	adc.w	fp, r3, r1
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800997c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009980:	4692      	mov	sl, r2
 8009982:	469b      	mov	fp, r3
 8009984:	4643      	mov	r3, r8
 8009986:	eb1a 0303 	adds.w	r3, sl, r3
 800998a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800998e:	464b      	mov	r3, r9
 8009990:	eb4b 0303 	adc.w	r3, fp, r3
 8009994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80099a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80099ac:	460b      	mov	r3, r1
 80099ae:	18db      	adds	r3, r3, r3
 80099b0:	643b      	str	r3, [r7, #64]	; 0x40
 80099b2:	4613      	mov	r3, r2
 80099b4:	eb42 0303 	adc.w	r3, r2, r3
 80099b8:	647b      	str	r3, [r7, #68]	; 0x44
 80099ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80099c2:	f7f6 fc6d 	bl	80002a0 <__aeabi_uldivmod>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	4b3b      	ldr	r3, [pc, #236]	; (8009abc <UART_SetConfig+0x2d4>)
 80099ce:	fba3 2301 	umull	r2, r3, r3, r1
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	2264      	movs	r2, #100	; 0x64
 80099d6:	fb02 f303 	mul.w	r3, r2, r3
 80099da:	1acb      	subs	r3, r1, r3
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80099e2:	4b36      	ldr	r3, [pc, #216]	; (8009abc <UART_SetConfig+0x2d4>)
 80099e4:	fba3 2302 	umull	r2, r3, r3, r2
 80099e8:	095b      	lsrs	r3, r3, #5
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099f0:	441c      	add	r4, r3
 80099f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	1891      	adds	r1, r2, r2
 8009a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a0c:	415b      	adcs	r3, r3
 8009a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a14:	4641      	mov	r1, r8
 8009a16:	1851      	adds	r1, r2, r1
 8009a18:	6339      	str	r1, [r7, #48]	; 0x30
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	414b      	adcs	r3, r1
 8009a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a20:	f04f 0200 	mov.w	r2, #0
 8009a24:	f04f 0300 	mov.w	r3, #0
 8009a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a2c:	4659      	mov	r1, fp
 8009a2e:	00cb      	lsls	r3, r1, #3
 8009a30:	4651      	mov	r1, sl
 8009a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a36:	4651      	mov	r1, sl
 8009a38:	00ca      	lsls	r2, r1, #3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4642      	mov	r2, r8
 8009a42:	189b      	adds	r3, r3, r2
 8009a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a48:	464b      	mov	r3, r9
 8009a4a:	460a      	mov	r2, r1
 8009a4c:	eb42 0303 	adc.w	r3, r2, r3
 8009a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a68:	460b      	mov	r3, r1
 8009a6a:	18db      	adds	r3, r3, r3
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a6e:	4613      	mov	r3, r2
 8009a70:	eb42 0303 	adc.w	r3, r2, r3
 8009a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009a7e:	f7f6 fc0f 	bl	80002a0 <__aeabi_uldivmod>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <UART_SetConfig+0x2d4>)
 8009a88:	fba3 1302 	umull	r1, r3, r3, r2
 8009a8c:	095b      	lsrs	r3, r3, #5
 8009a8e:	2164      	movs	r1, #100	; 0x64
 8009a90:	fb01 f303 	mul.w	r3, r1, r3
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	3332      	adds	r3, #50	; 0x32
 8009a9a:	4a08      	ldr	r2, [pc, #32]	; (8009abc <UART_SetConfig+0x2d4>)
 8009a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa0:	095b      	lsrs	r3, r3, #5
 8009aa2:	f003 0207 	and.w	r2, r3, #7
 8009aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4422      	add	r2, r4
 8009aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ab0:	e105      	b.n	8009cbe <UART_SetConfig+0x4d6>
 8009ab2:	bf00      	nop
 8009ab4:	40011000 	.word	0x40011000
 8009ab8:	40011400 	.word	0x40011400
 8009abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009aca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	464b      	mov	r3, r9
 8009ad6:	1891      	adds	r1, r2, r2
 8009ad8:	6239      	str	r1, [r7, #32]
 8009ada:	415b      	adcs	r3, r3
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	1854      	adds	r4, r2, r1
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	eb43 0501 	adc.w	r5, r3, r1
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	f04f 0300 	mov.w	r3, #0
 8009af4:	00eb      	lsls	r3, r5, #3
 8009af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009afa:	00e2      	lsls	r2, r4, #3
 8009afc:	4614      	mov	r4, r2
 8009afe:	461d      	mov	r5, r3
 8009b00:	4643      	mov	r3, r8
 8009b02:	18e3      	adds	r3, r4, r3
 8009b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b08:	464b      	mov	r3, r9
 8009b0a:	eb45 0303 	adc.w	r3, r5, r3
 8009b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b2e:	4629      	mov	r1, r5
 8009b30:	008b      	lsls	r3, r1, #2
 8009b32:	4621      	mov	r1, r4
 8009b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b38:	4621      	mov	r1, r4
 8009b3a:	008a      	lsls	r2, r1, #2
 8009b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b40:	f7f6 fbae 	bl	80002a0 <__aeabi_uldivmod>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4b60      	ldr	r3, [pc, #384]	; (8009ccc <UART_SetConfig+0x4e4>)
 8009b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b4e:	095b      	lsrs	r3, r3, #5
 8009b50:	011c      	lsls	r4, r3, #4
 8009b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009b64:	4642      	mov	r2, r8
 8009b66:	464b      	mov	r3, r9
 8009b68:	1891      	adds	r1, r2, r2
 8009b6a:	61b9      	str	r1, [r7, #24]
 8009b6c:	415b      	adcs	r3, r3
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b74:	4641      	mov	r1, r8
 8009b76:	1851      	adds	r1, r2, r1
 8009b78:	6139      	str	r1, [r7, #16]
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	414b      	adcs	r3, r1
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	f04f 0200 	mov.w	r2, #0
 8009b84:	f04f 0300 	mov.w	r3, #0
 8009b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	00cb      	lsls	r3, r1, #3
 8009b90:	4651      	mov	r1, sl
 8009b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b96:	4651      	mov	r1, sl
 8009b98:	00ca      	lsls	r2, r1, #3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ba8:	464b      	mov	r3, r9
 8009baa:	460a      	mov	r2, r1
 8009bac:	eb42 0303 	adc.w	r3, r2, r3
 8009bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009bc0:	f04f 0200 	mov.w	r2, #0
 8009bc4:	f04f 0300 	mov.w	r3, #0
 8009bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009bcc:	4649      	mov	r1, r9
 8009bce:	008b      	lsls	r3, r1, #2
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bd6:	4641      	mov	r1, r8
 8009bd8:	008a      	lsls	r2, r1, #2
 8009bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009bde:	f7f6 fb5f 	bl	80002a0 <__aeabi_uldivmod>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4b39      	ldr	r3, [pc, #228]	; (8009ccc <UART_SetConfig+0x4e4>)
 8009be8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	2164      	movs	r1, #100	; 0x64
 8009bf0:	fb01 f303 	mul.w	r3, r1, r3
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	3332      	adds	r3, #50	; 0x32
 8009bfa:	4a34      	ldr	r2, [pc, #208]	; (8009ccc <UART_SetConfig+0x4e4>)
 8009bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009c00:	095b      	lsrs	r3, r3, #5
 8009c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c06:	441c      	add	r4, r3
 8009c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c10:	677a      	str	r2, [r7, #116]	; 0x74
 8009c12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c16:	4642      	mov	r2, r8
 8009c18:	464b      	mov	r3, r9
 8009c1a:	1891      	adds	r1, r2, r2
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	415b      	adcs	r3, r3
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c26:	4641      	mov	r1, r8
 8009c28:	1851      	adds	r1, r2, r1
 8009c2a:	6039      	str	r1, [r7, #0]
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	414b      	adcs	r3, r1
 8009c30:	607b      	str	r3, [r7, #4]
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	f04f 0300 	mov.w	r3, #0
 8009c3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c3e:	4659      	mov	r1, fp
 8009c40:	00cb      	lsls	r3, r1, #3
 8009c42:	4651      	mov	r1, sl
 8009c44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c48:	4651      	mov	r1, sl
 8009c4a:	00ca      	lsls	r2, r1, #3
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	4603      	mov	r3, r0
 8009c52:	4642      	mov	r2, r8
 8009c54:	189b      	adds	r3, r3, r2
 8009c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c58:	464b      	mov	r3, r9
 8009c5a:	460a      	mov	r2, r1
 8009c5c:	eb42 0303 	adc.w	r3, r2, r3
 8009c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8009c6c:	667a      	str	r2, [r7, #100]	; 0x64
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	008b      	lsls	r3, r1, #2
 8009c7e:	4641      	mov	r1, r8
 8009c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c84:	4641      	mov	r1, r8
 8009c86:	008a      	lsls	r2, r1, #2
 8009c88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009c8c:	f7f6 fb08 	bl	80002a0 <__aeabi_uldivmod>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <UART_SetConfig+0x4e4>)
 8009c96:	fba3 1302 	umull	r1, r3, r3, r2
 8009c9a:	095b      	lsrs	r3, r3, #5
 8009c9c:	2164      	movs	r1, #100	; 0x64
 8009c9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	011b      	lsls	r3, r3, #4
 8009ca6:	3332      	adds	r3, #50	; 0x32
 8009ca8:	4a08      	ldr	r2, [pc, #32]	; (8009ccc <UART_SetConfig+0x4e4>)
 8009caa:	fba2 2303 	umull	r2, r3, r2, r3
 8009cae:	095b      	lsrs	r3, r3, #5
 8009cb0:	f003 020f 	and.w	r2, r3, #15
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4422      	add	r2, r4
 8009cbc:	609a      	str	r2, [r3, #8]
}
 8009cbe:	bf00      	nop
 8009cc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cca:	bf00      	nop
 8009ccc:	51eb851f 	.word	0x51eb851f

08009cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	f107 001c 	add.w	r0, r7, #28
 8009cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d122      	bne.n	8009d2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d105      	bne.n	8009d22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 faa2 	bl	800a26c <USB_CoreReset>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]
 8009d2c:	e01a      	b.n	8009d64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa96 	bl	800a26c <USB_CoreReset>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d106      	bne.n	8009d58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	639a      	str	r2, [r3, #56]	; 0x38
 8009d56:	e005      	b.n	8009d64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d10b      	bne.n	8009d82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f043 0206 	orr.w	r2, r3, #6
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f043 0220 	orr.w	r2, r3, #32
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d8e:	b004      	add	sp, #16
 8009d90:	4770      	bx	lr

08009d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f023 0201 	bic.w	r2, r3, #1
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d115      	bne.n	8009e02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009de2:	2001      	movs	r0, #1
 8009de4:	f7f9 f930 	bl	8003048 <HAL_Delay>
      ms++;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3301      	adds	r3, #1
 8009dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fa2e 	bl	800a250 <USB_GetMode>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d01e      	beq.n	8009e38 <USB_SetCurrentMode+0x84>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b31      	cmp	r3, #49	; 0x31
 8009dfe:	d9f0      	bls.n	8009de2 <USB_SetCurrentMode+0x2e>
 8009e00:	e01a      	b.n	8009e38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e02:	78fb      	ldrb	r3, [r7, #3]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d115      	bne.n	8009e34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e14:	2001      	movs	r0, #1
 8009e16:	f7f9 f917 	bl	8003048 <HAL_Delay>
      ms++;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fa15 	bl	800a250 <USB_GetMode>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <USB_SetCurrentMode+0x84>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b31      	cmp	r3, #49	; 0x31
 8009e30:	d9f0      	bls.n	8009e14 <USB_SetCurrentMode+0x60>
 8009e32:	e001      	b.n	8009e38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e005      	b.n	8009e44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b32      	cmp	r3, #50	; 0x32
 8009e3c:	d101      	bne.n	8009e42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b086      	sub	sp, #24
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e66:	2300      	movs	r3, #0
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	e009      	b.n	8009e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	3340      	adds	r3, #64	; 0x40
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	613b      	str	r3, [r7, #16]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2b0e      	cmp	r3, #14
 8009e84:	d9f2      	bls.n	8009e6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d11c      	bne.n	8009ec6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e9a:	f043 0302 	orr.w	r3, r3, #2
 8009e9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8009ec4:	e00b      	b.n	8009ede <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef8:	461a      	mov	r2, r3
 8009efa:	680b      	ldr	r3, [r1, #0]
 8009efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d10c      	bne.n	8009f1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f965 	bl	800a1dc <USB_SetDevSpeed>
 8009f12:	e008      	b.n	8009f26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f14:	2101      	movs	r1, #1
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f960 	bl	800a1dc <USB_SetDevSpeed>
 8009f1c:	e003      	b.n	8009f26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f1e:	2103      	movs	r1, #3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f95b 	bl	800a1dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f26:	2110      	movs	r1, #16
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f8f3 	bl	800a114 <USB_FlushTxFifo>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f91f 	bl	800a17c <USB_FlushRxFifo>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4e:	461a      	mov	r2, r3
 8009f50:	2300      	movs	r3, #0
 8009f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f66:	461a      	mov	r2, r3
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	e043      	b.n	8009ffa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f88:	d118      	bne.n	8009fbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	e013      	b.n	8009fce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	e008      	b.n	8009fce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc8:	461a      	mov	r2, r3
 8009fca:	2300      	movs	r3, #0
 8009fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2300      	movs	r3, #0
 8009fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fec:	461a      	mov	r2, r3
 8009fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	613b      	str	r3, [r7, #16]
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d3b7      	bcc.n	8009f72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a002:	2300      	movs	r3, #0
 800a004:	613b      	str	r3, [r7, #16]
 800a006:	e043      	b.n	800a090 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a01a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a01e:	d118      	bne.n	800a052 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10a      	bne.n	800a03c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a032:	461a      	mov	r2, r3
 800a034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	e013      	b.n	800a064 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a048:	461a      	mov	r2, r3
 800a04a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	e008      	b.n	800a064 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05e:	461a      	mov	r2, r3
 800a060:	2300      	movs	r3, #0
 800a062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a070:	461a      	mov	r2, r3
 800a072:	2300      	movs	r3, #0
 800a074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a082:	461a      	mov	r2, r3
 800a084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	3301      	adds	r3, #1
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	429a      	cmp	r2, r3
 800a096:	d3b7      	bcc.n	800a008 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a0b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d105      	bne.n	800a0cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	f043 0210 	orr.w	r2, r3, #16
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	4b0f      	ldr	r3, [pc, #60]	; (800a110 <USB_DevInit+0x2c4>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d005      	beq.n	800a0ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	f043 0208 	orr.w	r2, r3, #8
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d107      	bne.n	800a100 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0f8:	f043 0304 	orr.w	r3, r3, #4
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a10c:	b004      	add	sp, #16
 800a10e:	4770      	bx	lr
 800a110:	803c3800 	.word	0x803c3800

0800a114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3301      	adds	r3, #1
 800a126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4a13      	ldr	r2, [pc, #76]	; (800a178 <USB_FlushTxFifo+0x64>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d901      	bls.n	800a134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e01b      	b.n	800a16c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	daf2      	bge.n	800a122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	019b      	lsls	r3, r3, #6
 800a144:	f043 0220 	orr.w	r2, r3, #32
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	3301      	adds	r3, #1
 800a150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4a08      	ldr	r2, [pc, #32]	; (800a178 <USB_FlushTxFifo+0x64>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d901      	bls.n	800a15e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e006      	b.n	800a16c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b20      	cmp	r3, #32
 800a168:	d0f0      	beq.n	800a14c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	00030d40 	.word	0x00030d40

0800a17c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4a11      	ldr	r2, [pc, #68]	; (800a1d8 <USB_FlushRxFifo+0x5c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d901      	bls.n	800a19a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e018      	b.n	800a1cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	daf2      	bge.n	800a188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2210      	movs	r2, #16
 800a1aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4a08      	ldr	r2, [pc, #32]	; (800a1d8 <USB_FlushRxFifo+0x5c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d901      	bls.n	800a1be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e006      	b.n	800a1cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	f003 0310 	and.w	r3, r3, #16
 800a1c6:	2b10      	cmp	r3, #16
 800a1c8:	d0f0      	beq.n	800a1ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	00030d40 	.word	0x00030d40

0800a1dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a228:	f023 0303 	bic.w	r3, r3, #3
 800a22c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a23c:	f043 0302 	orr.w	r3, r3, #2
 800a240:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	f003 0301 	and.w	r3, r3, #1
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3301      	adds	r3, #1
 800a27c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4a13      	ldr	r2, [pc, #76]	; (800a2d0 <USB_CoreReset+0x64>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e01b      	b.n	800a2c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	daf2      	bge.n	800a278 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	f043 0201 	orr.w	r2, r3, #1
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <USB_CoreReset+0x64>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d901      	bls.n	800a2b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e006      	b.n	800a2c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d0f0      	beq.n	800a2a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	00030d40 	.word	0x00030d40

0800a2d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800a2da:	4b98      	ldr	r3, [pc, #608]	; (800a53c <MX_LWIP_Init+0x268>)
 800a2dc:	220a      	movs	r2, #10
 800a2de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 800a2e0:	4b96      	ldr	r3, [pc, #600]	; (800a53c <MX_LWIP_Init+0x268>)
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 15;
 800a2e6:	4b95      	ldr	r3, [pc, #596]	; (800a53c <MX_LWIP_Init+0x268>)
 800a2e8:	220f      	movs	r2, #15
 800a2ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 76;
 800a2ec:	4b93      	ldr	r3, [pc, #588]	; (800a53c <MX_LWIP_Init+0x268>)
 800a2ee:	224c      	movs	r2, #76	; 0x4c
 800a2f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a2f2:	4b93      	ldr	r3, [pc, #588]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a2f4:	22ff      	movs	r2, #255	; 0xff
 800a2f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a2f8:	4b91      	ldr	r3, [pc, #580]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a2fa:	22ff      	movs	r2, #255	; 0xff
 800a2fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a2fe:	4b90      	ldr	r3, [pc, #576]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a300:	22ff      	movs	r2, #255	; 0xff
 800a302:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a304:	4b8e      	ldr	r3, [pc, #568]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a306:	2200      	movs	r2, #0
 800a308:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a30a:	4b8e      	ldr	r3, [pc, #568]	; (800a544 <MX_LWIP_Init+0x270>)
 800a30c:	220a      	movs	r2, #10
 800a30e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 800a310:	4b8c      	ldr	r3, [pc, #560]	; (800a544 <MX_LWIP_Init+0x270>)
 800a312:	220a      	movs	r2, #10
 800a314:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 15;
 800a316:	4b8b      	ldr	r3, [pc, #556]	; (800a544 <MX_LWIP_Init+0x270>)
 800a318:	220f      	movs	r2, #15
 800a31a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 800a31c:	4b89      	ldr	r3, [pc, #548]	; (800a544 <MX_LWIP_Init+0x270>)
 800a31e:	22fe      	movs	r2, #254	; 0xfe
 800a320:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a322:	2100      	movs	r1, #0
 800a324:	2000      	movs	r0, #0
 800a326:	f004 fd79 	bl	800ee1c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a32a:	4b84      	ldr	r3, [pc, #528]	; (800a53c <MX_LWIP_Init+0x268>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	061a      	lsls	r2, r3, #24
 800a330:	4b82      	ldr	r3, [pc, #520]	; (800a53c <MX_LWIP_Init+0x268>)
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	041b      	lsls	r3, r3, #16
 800a336:	431a      	orrs	r2, r3
 800a338:	4b80      	ldr	r3, [pc, #512]	; (800a53c <MX_LWIP_Init+0x268>)
 800a33a:	789b      	ldrb	r3, [r3, #2]
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	4313      	orrs	r3, r2
 800a340:	4a7e      	ldr	r2, [pc, #504]	; (800a53c <MX_LWIP_Init+0x268>)
 800a342:	78d2      	ldrb	r2, [r2, #3]
 800a344:	4313      	orrs	r3, r2
 800a346:	061a      	lsls	r2, r3, #24
 800a348:	4b7c      	ldr	r3, [pc, #496]	; (800a53c <MX_LWIP_Init+0x268>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	0619      	lsls	r1, r3, #24
 800a34e:	4b7b      	ldr	r3, [pc, #492]	; (800a53c <MX_LWIP_Init+0x268>)
 800a350:	785b      	ldrb	r3, [r3, #1]
 800a352:	041b      	lsls	r3, r3, #16
 800a354:	4319      	orrs	r1, r3
 800a356:	4b79      	ldr	r3, [pc, #484]	; (800a53c <MX_LWIP_Init+0x268>)
 800a358:	789b      	ldrb	r3, [r3, #2]
 800a35a:	021b      	lsls	r3, r3, #8
 800a35c:	430b      	orrs	r3, r1
 800a35e:	4977      	ldr	r1, [pc, #476]	; (800a53c <MX_LWIP_Init+0x268>)
 800a360:	78c9      	ldrb	r1, [r1, #3]
 800a362:	430b      	orrs	r3, r1
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a36a:	431a      	orrs	r2, r3
 800a36c:	4b73      	ldr	r3, [pc, #460]	; (800a53c <MX_LWIP_Init+0x268>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	0619      	lsls	r1, r3, #24
 800a372:	4b72      	ldr	r3, [pc, #456]	; (800a53c <MX_LWIP_Init+0x268>)
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	041b      	lsls	r3, r3, #16
 800a378:	4319      	orrs	r1, r3
 800a37a:	4b70      	ldr	r3, [pc, #448]	; (800a53c <MX_LWIP_Init+0x268>)
 800a37c:	789b      	ldrb	r3, [r3, #2]
 800a37e:	021b      	lsls	r3, r3, #8
 800a380:	430b      	orrs	r3, r1
 800a382:	496e      	ldr	r1, [pc, #440]	; (800a53c <MX_LWIP_Init+0x268>)
 800a384:	78c9      	ldrb	r1, [r1, #3]
 800a386:	430b      	orrs	r3, r1
 800a388:	0a1b      	lsrs	r3, r3, #8
 800a38a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a38e:	431a      	orrs	r2, r3
 800a390:	4b6a      	ldr	r3, [pc, #424]	; (800a53c <MX_LWIP_Init+0x268>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	0619      	lsls	r1, r3, #24
 800a396:	4b69      	ldr	r3, [pc, #420]	; (800a53c <MX_LWIP_Init+0x268>)
 800a398:	785b      	ldrb	r3, [r3, #1]
 800a39a:	041b      	lsls	r3, r3, #16
 800a39c:	4319      	orrs	r1, r3
 800a39e:	4b67      	ldr	r3, [pc, #412]	; (800a53c <MX_LWIP_Init+0x268>)
 800a3a0:	789b      	ldrb	r3, [r3, #2]
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	430b      	orrs	r3, r1
 800a3a6:	4965      	ldr	r1, [pc, #404]	; (800a53c <MX_LWIP_Init+0x268>)
 800a3a8:	78c9      	ldrb	r1, [r1, #3]
 800a3aa:	430b      	orrs	r3, r1
 800a3ac:	0e1b      	lsrs	r3, r3, #24
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	4a65      	ldr	r2, [pc, #404]	; (800a548 <MX_LWIP_Init+0x274>)
 800a3b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a3b4:	4b62      	ldr	r3, [pc, #392]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	061a      	lsls	r2, r3, #24
 800a3ba:	4b61      	ldr	r3, [pc, #388]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	041b      	lsls	r3, r3, #16
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	4b5f      	ldr	r3, [pc, #380]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3c4:	789b      	ldrb	r3, [r3, #2]
 800a3c6:	021b      	lsls	r3, r3, #8
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	4a5d      	ldr	r2, [pc, #372]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3cc:	78d2      	ldrb	r2, [r2, #3]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	061a      	lsls	r2, r3, #24
 800a3d2:	4b5b      	ldr	r3, [pc, #364]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	0619      	lsls	r1, r3, #24
 800a3d8:	4b59      	ldr	r3, [pc, #356]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3da:	785b      	ldrb	r3, [r3, #1]
 800a3dc:	041b      	lsls	r3, r3, #16
 800a3de:	4319      	orrs	r1, r3
 800a3e0:	4b57      	ldr	r3, [pc, #348]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3e2:	789b      	ldrb	r3, [r3, #2]
 800a3e4:	021b      	lsls	r3, r3, #8
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	4955      	ldr	r1, [pc, #340]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3ea:	78c9      	ldrb	r1, [r1, #3]
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	4b52      	ldr	r3, [pc, #328]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	0619      	lsls	r1, r3, #24
 800a3fc:	4b50      	ldr	r3, [pc, #320]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	041b      	lsls	r3, r3, #16
 800a402:	4319      	orrs	r1, r3
 800a404:	4b4e      	ldr	r3, [pc, #312]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a406:	789b      	ldrb	r3, [r3, #2]
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	430b      	orrs	r3, r1
 800a40c:	494c      	ldr	r1, [pc, #304]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a40e:	78c9      	ldrb	r1, [r1, #3]
 800a410:	430b      	orrs	r3, r1
 800a412:	0a1b      	lsrs	r3, r3, #8
 800a414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a418:	431a      	orrs	r2, r3
 800a41a:	4b49      	ldr	r3, [pc, #292]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	0619      	lsls	r1, r3, #24
 800a420:	4b47      	ldr	r3, [pc, #284]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a422:	785b      	ldrb	r3, [r3, #1]
 800a424:	041b      	lsls	r3, r3, #16
 800a426:	4319      	orrs	r1, r3
 800a428:	4b45      	ldr	r3, [pc, #276]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a42a:	789b      	ldrb	r3, [r3, #2]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	430b      	orrs	r3, r1
 800a430:	4943      	ldr	r1, [pc, #268]	; (800a540 <MX_LWIP_Init+0x26c>)
 800a432:	78c9      	ldrb	r1, [r1, #3]
 800a434:	430b      	orrs	r3, r1
 800a436:	0e1b      	lsrs	r3, r3, #24
 800a438:	4313      	orrs	r3, r2
 800a43a:	4a44      	ldr	r2, [pc, #272]	; (800a54c <MX_LWIP_Init+0x278>)
 800a43c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a43e:	4b41      	ldr	r3, [pc, #260]	; (800a544 <MX_LWIP_Init+0x270>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	061a      	lsls	r2, r3, #24
 800a444:	4b3f      	ldr	r3, [pc, #252]	; (800a544 <MX_LWIP_Init+0x270>)
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	041b      	lsls	r3, r3, #16
 800a44a:	431a      	orrs	r2, r3
 800a44c:	4b3d      	ldr	r3, [pc, #244]	; (800a544 <MX_LWIP_Init+0x270>)
 800a44e:	789b      	ldrb	r3, [r3, #2]
 800a450:	021b      	lsls	r3, r3, #8
 800a452:	4313      	orrs	r3, r2
 800a454:	4a3b      	ldr	r2, [pc, #236]	; (800a544 <MX_LWIP_Init+0x270>)
 800a456:	78d2      	ldrb	r2, [r2, #3]
 800a458:	4313      	orrs	r3, r2
 800a45a:	061a      	lsls	r2, r3, #24
 800a45c:	4b39      	ldr	r3, [pc, #228]	; (800a544 <MX_LWIP_Init+0x270>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	0619      	lsls	r1, r3, #24
 800a462:	4b38      	ldr	r3, [pc, #224]	; (800a544 <MX_LWIP_Init+0x270>)
 800a464:	785b      	ldrb	r3, [r3, #1]
 800a466:	041b      	lsls	r3, r3, #16
 800a468:	4319      	orrs	r1, r3
 800a46a:	4b36      	ldr	r3, [pc, #216]	; (800a544 <MX_LWIP_Init+0x270>)
 800a46c:	789b      	ldrb	r3, [r3, #2]
 800a46e:	021b      	lsls	r3, r3, #8
 800a470:	430b      	orrs	r3, r1
 800a472:	4934      	ldr	r1, [pc, #208]	; (800a544 <MX_LWIP_Init+0x270>)
 800a474:	78c9      	ldrb	r1, [r1, #3]
 800a476:	430b      	orrs	r3, r1
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a47e:	431a      	orrs	r2, r3
 800a480:	4b30      	ldr	r3, [pc, #192]	; (800a544 <MX_LWIP_Init+0x270>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	0619      	lsls	r1, r3, #24
 800a486:	4b2f      	ldr	r3, [pc, #188]	; (800a544 <MX_LWIP_Init+0x270>)
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	041b      	lsls	r3, r3, #16
 800a48c:	4319      	orrs	r1, r3
 800a48e:	4b2d      	ldr	r3, [pc, #180]	; (800a544 <MX_LWIP_Init+0x270>)
 800a490:	789b      	ldrb	r3, [r3, #2]
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	430b      	orrs	r3, r1
 800a496:	492b      	ldr	r1, [pc, #172]	; (800a544 <MX_LWIP_Init+0x270>)
 800a498:	78c9      	ldrb	r1, [r1, #3]
 800a49a:	430b      	orrs	r3, r1
 800a49c:	0a1b      	lsrs	r3, r3, #8
 800a49e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	4b27      	ldr	r3, [pc, #156]	; (800a544 <MX_LWIP_Init+0x270>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	0619      	lsls	r1, r3, #24
 800a4aa:	4b26      	ldr	r3, [pc, #152]	; (800a544 <MX_LWIP_Init+0x270>)
 800a4ac:	785b      	ldrb	r3, [r3, #1]
 800a4ae:	041b      	lsls	r3, r3, #16
 800a4b0:	4319      	orrs	r1, r3
 800a4b2:	4b24      	ldr	r3, [pc, #144]	; (800a544 <MX_LWIP_Init+0x270>)
 800a4b4:	789b      	ldrb	r3, [r3, #2]
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	430b      	orrs	r3, r1
 800a4ba:	4922      	ldr	r1, [pc, #136]	; (800a544 <MX_LWIP_Init+0x270>)
 800a4bc:	78c9      	ldrb	r1, [r1, #3]
 800a4be:	430b      	orrs	r3, r1
 800a4c0:	0e1b      	lsrs	r3, r3, #24
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	4a22      	ldr	r2, [pc, #136]	; (800a550 <MX_LWIP_Init+0x27c>)
 800a4c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a4c8:	4b22      	ldr	r3, [pc, #136]	; (800a554 <MX_LWIP_Init+0x280>)
 800a4ca:	9302      	str	r3, [sp, #8]
 800a4cc:	4b22      	ldr	r3, [pc, #136]	; (800a558 <MX_LWIP_Init+0x284>)
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	4b1e      	ldr	r3, [pc, #120]	; (800a550 <MX_LWIP_Init+0x27c>)
 800a4d6:	4a1d      	ldr	r2, [pc, #116]	; (800a54c <MX_LWIP_Init+0x278>)
 800a4d8:	491b      	ldr	r1, [pc, #108]	; (800a548 <MX_LWIP_Init+0x274>)
 800a4da:	4820      	ldr	r0, [pc, #128]	; (800a55c <MX_LWIP_Init+0x288>)
 800a4dc:	f005 fa68 	bl	800f9b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a4e0:	481e      	ldr	r0, [pc, #120]	; (800a55c <MX_LWIP_Init+0x288>)
 800a4e2:	f005 fc17 	bl	800fd14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a4e6:	4b1d      	ldr	r3, [pc, #116]	; (800a55c <MX_LWIP_Init+0x288>)
 800a4e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4ec:	089b      	lsrs	r3, r3, #2
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a4f8:	4818      	ldr	r0, [pc, #96]	; (800a55c <MX_LWIP_Init+0x288>)
 800a4fa:	f005 fc1b 	bl	800fd34 <netif_set_up>
 800a4fe:	e002      	b.n	800a506 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a500:	4816      	ldr	r0, [pc, #88]	; (800a55c <MX_LWIP_Init+0x288>)
 800a502:	f005 fc83 	bl	800fe0c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a506:	4916      	ldr	r1, [pc, #88]	; (800a560 <MX_LWIP_Init+0x28c>)
 800a508:	4814      	ldr	r0, [pc, #80]	; (800a55c <MX_LWIP_Init+0x288>)
 800a50a:	f005 fd15 	bl	800ff38 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a50e:	2224      	movs	r2, #36	; 0x24
 800a510:	2100      	movs	r1, #0
 800a512:	4814      	ldr	r0, [pc, #80]	; (800a564 <MX_LWIP_Init+0x290>)
 800a514:	f00f f913 	bl	801973e <memset>
  attributes.name = "EthLink";
 800a518:	4b12      	ldr	r3, [pc, #72]	; (800a564 <MX_LWIP_Init+0x290>)
 800a51a:	4a13      	ldr	r2, [pc, #76]	; (800a568 <MX_LWIP_Init+0x294>)
 800a51c:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a51e:	4b11      	ldr	r3, [pc, #68]	; (800a564 <MX_LWIP_Init+0x290>)
 800a520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a524:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800a526:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <MX_LWIP_Init+0x290>)
 800a528:	2210      	movs	r2, #16
 800a52a:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800a52c:	4a0d      	ldr	r2, [pc, #52]	; (800a564 <MX_LWIP_Init+0x290>)
 800a52e:	490b      	ldr	r1, [pc, #44]	; (800a55c <MX_LWIP_Init+0x288>)
 800a530:	480e      	ldr	r0, [pc, #56]	; (800a56c <MX_LWIP_Init+0x298>)
 800a532:	f000 fd96 	bl	800b062 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a536:	bf00      	nop
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20000d18 	.word	0x20000d18
 800a540:	20000d1c 	.word	0x20000d1c
 800a544:	20000d20 	.word	0x20000d20
 800a548:	20000d0c 	.word	0x20000d0c
 800a54c:	20000d10 	.word	0x20000d10
 800a550:	20000d14 	.word	0x20000d14
 800a554:	0800ed59 	.word	0x0800ed59
 800a558:	0800aa15 	.word	0x0800aa15
 800a55c:	20000cd8 	.word	0x20000cd8
 800a560:	0800a571 	.word	0x0800a571
 800a564:	20000d24 	.word	0x20000d24
 800a568:	0801add0 	.word	0x0801add0
 800a56c:	0800ad09 	.word	0x0800ad09

0800a570 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a58c:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <HAL_ETH_RxCpltCallback+0x1c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4618      	mov	r0, r3
 800a592:	f000 fffd 	bl	800b590 <osSemaphoreRelease>
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20005814 	.word	0x20005814

0800a5a4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a5ac:	4b04      	ldr	r3, [pc, #16]	; (800a5c0 <HAL_ETH_TxCpltCallback+0x1c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 ffed 	bl	800b590 <osSemaphoreRelease>
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20005818 	.word	0x20005818

0800a5c4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fa f99d 	bl	800490c <HAL_ETH_GetDMAError>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d8:	2b80      	cmp	r3, #128	; 0x80
 800a5da:	d104      	bne.n	800a5e6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a5dc:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <HAL_ETH_ErrorCallback+0x2c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 ffd5 	bl	800b590 <osSemaphoreRelease>
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20005814 	.word	0x20005814

0800a5f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b0aa      	sub	sp, #168	; 0xa8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800a60e:	f107 0310 	add.w	r3, r7, #16
 800a612:	2264      	movs	r2, #100	; 0x64
 800a614:	2100      	movs	r1, #0
 800a616:	4618      	mov	r0, r3
 800a618:	f00f f891 	bl	801973e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a61c:	4b85      	ldr	r3, [pc, #532]	; (800a834 <low_level_init+0x240>)
 800a61e:	4a86      	ldr	r2, [pc, #536]	; (800a838 <low_level_init+0x244>)
 800a620:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a622:	2300      	movs	r3, #0
 800a624:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a626:	2380      	movs	r3, #128	; 0x80
 800a628:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a62a:	23e1      	movs	r3, #225	; 0xe1
 800a62c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a62e:	2300      	movs	r3, #0
 800a630:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a632:	2300      	movs	r3, #0
 800a634:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x76;
 800a636:	2376      	movs	r3, #118	; 0x76
 800a638:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a63a:	4a7e      	ldr	r2, [pc, #504]	; (800a834 <low_level_init+0x240>)
 800a63c:	f107 0308 	add.w	r3, r7, #8
 800a640:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a642:	4b7c      	ldr	r3, [pc, #496]	; (800a834 <low_level_init+0x240>)
 800a644:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a648:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a64a:	4b7a      	ldr	r3, [pc, #488]	; (800a834 <low_level_init+0x240>)
 800a64c:	4a7b      	ldr	r2, [pc, #492]	; (800a83c <low_level_init+0x248>)
 800a64e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a650:	4b78      	ldr	r3, [pc, #480]	; (800a834 <low_level_init+0x240>)
 800a652:	4a7b      	ldr	r2, [pc, #492]	; (800a840 <low_level_init+0x24c>)
 800a654:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a656:	4b77      	ldr	r3, [pc, #476]	; (800a834 <low_level_init+0x240>)
 800a658:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a65c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a65e:	4875      	ldr	r0, [pc, #468]	; (800a834 <low_level_init+0x240>)
 800a660:	f7f9 fb16 	bl	8003c90 <HAL_ETH_Init>
 800a664:	4603      	mov	r3, r0
 800a666:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a66a:	2238      	movs	r2, #56	; 0x38
 800a66c:	2100      	movs	r1, #0
 800a66e:	4875      	ldr	r0, [pc, #468]	; (800a844 <low_level_init+0x250>)
 800a670:	f00f f865 	bl	801973e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a674:	4b73      	ldr	r3, [pc, #460]	; (800a844 <low_level_init+0x250>)
 800a676:	2221      	movs	r2, #33	; 0x21
 800a678:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a67a:	4b72      	ldr	r3, [pc, #456]	; (800a844 <low_level_init+0x250>)
 800a67c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800a680:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a682:	4b70      	ldr	r3, [pc, #448]	; (800a844 <low_level_init+0x250>)
 800a684:	2200      	movs	r2, #0
 800a686:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a688:	486f      	ldr	r0, [pc, #444]	; (800a848 <low_level_init+0x254>)
 800a68a:	f005 f84b 	bl	800f724 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2206      	movs	r2, #6
 800a692:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a696:	4b67      	ldr	r3, [pc, #412]	; (800a834 <low_level_init+0x240>)
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	781a      	ldrb	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a6a2:	4b64      	ldr	r3, [pc, #400]	; (800a834 <low_level_init+0x240>)
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	785a      	ldrb	r2, [r3, #1]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a6ae:	4b61      	ldr	r3, [pc, #388]	; (800a834 <low_level_init+0x240>)
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	789a      	ldrb	r2, [r3, #2]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a6ba:	4b5e      	ldr	r3, [pc, #376]	; (800a834 <low_level_init+0x240>)
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	78da      	ldrb	r2, [r3, #3]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a6c6:	4b5b      	ldr	r3, [pc, #364]	; (800a834 <low_level_init+0x240>)
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	791a      	ldrb	r2, [r3, #4]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a6d2:	4b58      	ldr	r3, [pc, #352]	; (800a834 <low_level_init+0x240>)
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	795a      	ldrb	r2, [r3, #5]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a6e4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6ec:	f043 030a 	orr.w	r3, r3, #10
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	f000 fe6b 	bl	800b3d8 <osSemaphoreNew>
 800a702:	4603      	mov	r3, r0
 800a704:	4a51      	ldr	r2, [pc, #324]	; (800a84c <low_level_init+0x258>)
 800a706:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a708:	2200      	movs	r2, #0
 800a70a:	2101      	movs	r1, #1
 800a70c:	2001      	movs	r0, #1
 800a70e:	f000 fe63 	bl	800b3d8 <osSemaphoreNew>
 800a712:	4603      	mov	r3, r0
 800a714:	4a4e      	ldr	r2, [pc, #312]	; (800a850 <low_level_init+0x25c>)
 800a716:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a718:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a71c:	2224      	movs	r2, #36	; 0x24
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f00f f80c 	bl	801973e <memset>
  attributes.name = "EthIf";
 800a726:	4b4b      	ldr	r3, [pc, #300]	; (800a854 <low_level_init+0x260>)
 800a728:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a72a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800a72e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800a732:	2330      	movs	r3, #48	; 0x30
 800a734:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800a738:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a73c:	461a      	mov	r2, r3
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	4845      	ldr	r0, [pc, #276]	; (800a858 <low_level_init+0x264>)
 800a742:	f000 fc8e 	bl	800b062 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a746:	4945      	ldr	r1, [pc, #276]	; (800a85c <low_level_init+0x268>)
 800a748:	4845      	ldr	r0, [pc, #276]	; (800a860 <low_level_init+0x26c>)
 800a74a:	f7f8 fada 	bl	8002d02 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a74e:	4844      	ldr	r0, [pc, #272]	; (800a860 <low_level_init+0x26c>)
 800a750:	f7f8 fb09 	bl	8002d66 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a754:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d164      	bne.n	800a826 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a75c:	4840      	ldr	r0, [pc, #256]	; (800a860 <low_level_init+0x26c>)
 800a75e:	f7f8 fbaa 	bl	8002eb6 <LAN8742_GetLinkState>
 800a762:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	dc06      	bgt.n	800a77c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f005 fbb2 	bl	800fed8 <netif_set_link_down>
      netif_set_down(netif);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f005 fb49 	bl	800fe0c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a77a:	e056      	b.n	800a82a <low_level_init+0x236>
      switch (PHYLinkState)
 800a77c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a780:	3b02      	subs	r3, #2
 800a782:	2b03      	cmp	r3, #3
 800a784:	d82a      	bhi.n	800a7dc <low_level_init+0x1e8>
 800a786:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <low_level_init+0x198>)
 800a788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78c:	0800a79d 	.word	0x0800a79d
 800a790:	0800a7af 	.word	0x0800a7af
 800a794:	0800a7bf 	.word	0x0800a7bf
 800a798:	0800a7cf 	.word	0x0800a7cf
        duplex = ETH_FULLDUPLEX_MODE;
 800a79c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a7a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a7ac:	e01f      	b.n	800a7ee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a7b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a7bc:	e017      	b.n	800a7ee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a7be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a7cc:	e00f      	b.n	800a7ee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a7da:	e008      	b.n	800a7ee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a7dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a7e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a7ec:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a7ee:	f107 0310 	add.w	r3, r7, #16
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	480f      	ldr	r0, [pc, #60]	; (800a834 <low_level_init+0x240>)
 800a7f6:	f7f9 ff2f 	bl	8004658 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a7fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800a800:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a806:	f107 0310 	add.w	r3, r7, #16
 800a80a:	4619      	mov	r1, r3
 800a80c:	4809      	ldr	r0, [pc, #36]	; (800a834 <low_level_init+0x240>)
 800a80e:	f7fa f80d 	bl	800482c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a812:	4808      	ldr	r0, [pc, #32]	; (800a834 <low_level_init+0x240>)
 800a814:	f7f9 faba 	bl	8003d8c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f005 fa8b 	bl	800fd34 <netif_set_up>
    netif_set_link_up(netif);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f005 fb26 	bl	800fe70 <netif_set_link_up>
}
 800a824:	e001      	b.n	800a82a <low_level_init+0x236>
    Error_Handler();
 800a826:	f7f7 f985 	bl	8001b34 <Error_Handler>
}
 800a82a:	bf00      	nop
 800a82c:	37a8      	adds	r7, #168	; 0xa8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	2000581c 	.word	0x2000581c
 800a838:	40028000 	.word	0x40028000
 800a83c:	20005774 	.word	0x20005774
 800a840:	200056d4 	.word	0x200056d4
 800a844:	200058cc 	.word	0x200058cc
 800a848:	0801d98c 	.word	0x0801d98c
 800a84c:	20005814 	.word	0x20005814
 800a850:	20005818 	.word	0x20005818
 800a854:	0801add8 	.word	0x0801add8
 800a858:	0800a9c1 	.word	0x0800a9c1
 800a85c:	20000148 	.word	0x20000148
 800a860:	20005904 	.word	0x20005904

0800a864 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b092      	sub	sp, #72	; 0x48
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a87c:	f107 030c 	add.w	r3, r7, #12
 800a880:	2230      	movs	r2, #48	; 0x30
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f00e ff5a 	bl	801973e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a88a:	f107 030c 	add.w	r3, r7, #12
 800a88e:	2230      	movs	r2, #48	; 0x30
 800a890:	2100      	movs	r1, #0
 800a892:	4618      	mov	r0, r3
 800a894:	f00e ff53 	bl	801973e <memset>

  for(q = p; q != NULL; q = q->next)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	643b      	str	r3, [r7, #64]	; 0x40
 800a89c:	e045      	b.n	800a92a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d902      	bls.n	800a8aa <low_level_output+0x46>
      return ERR_IF;
 800a8a4:	f06f 030b 	mvn.w	r3, #11
 800a8a8:	e065      	b.n	800a976 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800a8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ac:	6859      	ldr	r1, [r3, #4]
 800a8ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	4413      	add	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	3348      	adds	r3, #72	; 0x48
 800a8ba:	443b      	add	r3, r7
 800a8bc:	3b3c      	subs	r3, #60	; 0x3c
 800a8be:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8c2:	895b      	ldrh	r3, [r3, #10]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	3348      	adds	r3, #72	; 0x48
 800a8d2:	443b      	add	r3, r7
 800a8d4:	3b38      	subs	r3, #56	; 0x38
 800a8d6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d011      	beq.n	800a902 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e0:	1e5a      	subs	r2, r3, #1
 800a8e2:	f107 000c 	add.w	r0, r7, #12
 800a8e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	440b      	add	r3, r1
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	18c1      	adds	r1, r0, r3
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	3348      	adds	r3, #72	; 0x48
 800a8fc:	443b      	add	r3, r7
 800a8fe:	3b34      	subs	r3, #52	; 0x34
 800a900:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a90a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a90c:	4613      	mov	r3, r2
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	3348      	adds	r3, #72	; 0x48
 800a916:	443b      	add	r3, r7
 800a918:	3b34      	subs	r3, #52	; 0x34
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a920:	3301      	adds	r3, #1
 800a922:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	643b      	str	r3, [r7, #64]	; 0x40
 800a92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1b6      	bne.n	800a89e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	891b      	ldrh	r3, [r3, #8]
 800a934:	461a      	mov	r2, r3
 800a936:	4b12      	ldr	r3, [pc, #72]	; (800a980 <low_level_output+0x11c>)
 800a938:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a93a:	4a11      	ldr	r2, [pc, #68]	; (800a980 <low_level_output+0x11c>)
 800a93c:	f107 030c 	add.w	r3, r7, #12
 800a940:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a942:	4a0f      	ldr	r2, [pc, #60]	; (800a980 <low_level_output+0x11c>)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800a948:	6838      	ldr	r0, [r7, #0]
 800a94a:	f005 ff49 	bl	80107e0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800a94e:	490c      	ldr	r1, [pc, #48]	; (800a980 <low_level_output+0x11c>)
 800a950:	480c      	ldr	r0, [pc, #48]	; (800a984 <low_level_output+0x120>)
 800a952:	f7f9 fb28 	bl	8003fa6 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800a956:	bf00      	nop
 800a958:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <low_level_output+0x124>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f04f 31ff 	mov.w	r1, #4294967295
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fdc3 	bl	800b4ec <osSemaphoreAcquire>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f5      	bne.n	800a958 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800a96c:	4805      	ldr	r0, [pc, #20]	; (800a984 <low_level_output+0x120>)
 800a96e:	f7f9 fcad 	bl	80042cc <HAL_ETH_ReleaseTxPacket>

  return errval;
 800a972:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a976:	4618      	mov	r0, r3
 800a978:	3748      	adds	r7, #72	; 0x48
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	200058cc 	.word	0x200058cc
 800a984:	2000581c 	.word	0x2000581c
 800a988:	20005818 	.word	0x20005818

0800a98c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a998:	4b07      	ldr	r3, [pc, #28]	; (800a9b8 <low_level_input+0x2c>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d105      	bne.n	800a9ac <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a9a0:	f107 030c 	add.w	r3, r7, #12
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4805      	ldr	r0, [pc, #20]	; (800a9bc <low_level_input+0x30>)
 800a9a8:	f7f9 fb59 	bl	800405e <HAL_ETH_ReadData>
  }

  return p;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200056d0 	.word	0x200056d0
 800a9bc:	2000581c 	.word	0x2000581c

0800a9c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a9d0:	4b0f      	ldr	r3, [pc, #60]	; (800aa10 <ethernetif_input+0x50>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fd87 	bl	800b4ec <osSemaphoreAcquire>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1f5      	bne.n	800a9d0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a9e4:	68b8      	ldr	r0, [r7, #8]
 800a9e6:	f7ff ffd1 	bl	800a98c <low_level_input>
 800a9ea:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00a      	beq.n	800aa08 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	68b9      	ldr	r1, [r7, #8]
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	4798      	blx	r3
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f005 fe46 	bl	8010694 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1ea      	bne.n	800a9e4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aa0e:	e7df      	b.n	800a9d0 <ethernetif_input+0x10>
 800aa10:	20005814 	.word	0x20005814

0800aa14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <ethernetif_init+0x1c>
 800aa22:	4b0e      	ldr	r3, [pc, #56]	; (800aa5c <ethernetif_init+0x48>)
 800aa24:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800aa28:	490d      	ldr	r1, [pc, #52]	; (800aa60 <ethernetif_init+0x4c>)
 800aa2a:	480e      	ldr	r0, [pc, #56]	; (800aa64 <ethernetif_init+0x50>)
 800aa2c:	f00e ff24 	bl	8019878 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2273      	movs	r2, #115	; 0x73
 800aa34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2274      	movs	r2, #116	; 0x74
 800aa3c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a09      	ldr	r2, [pc, #36]	; (800aa68 <ethernetif_init+0x54>)
 800aa44:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a08      	ldr	r2, [pc, #32]	; (800aa6c <ethernetif_init+0x58>)
 800aa4a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff fdd1 	bl	800a5f4 <low_level_init>

  return ERR_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	0801ade0 	.word	0x0801ade0
 800aa60:	0801adfc 	.word	0x0801adfc
 800aa64:	0801ae0c 	.word	0x0801ae0c
 800aa68:	080175b5 	.word	0x080175b5
 800aa6c:	0800a865 	.word	0x0800a865

0800aa70 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	4809      	ldr	r0, [pc, #36]	; (800aaa4 <pbuf_free_custom+0x34>)
 800aa80:	f004 ff40 	bl	800f904 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800aa84:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <pbuf_free_custom+0x38>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d107      	bne.n	800aa9c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <pbuf_free_custom+0x38>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800aa92:	4b06      	ldr	r3, [pc, #24]	; (800aaac <pbuf_free_custom+0x3c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fd7a 	bl	800b590 <osSemaphoreRelease>
  }
}
 800aa9c:	bf00      	nop
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	0801d98c 	.word	0x0801d98c
 800aaa8:	200056d0 	.word	0x200056d0
 800aaac:	20005814 	.word	0x20005814

0800aab0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aab4:	f7f8 fabc 	bl	8003030 <HAL_GetTick>
 800aab8:	4603      	mov	r3, r0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08e      	sub	sp, #56	; 0x38
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	605a      	str	r2, [r3, #4]
 800aad2:	609a      	str	r2, [r3, #8]
 800aad4:	60da      	str	r2, [r3, #12]
 800aad6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a5d      	ldr	r2, [pc, #372]	; (800ac54 <HAL_ETH_MspInit+0x194>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	f040 80b4 	bne.w	800ac4c <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800aae4:	2300      	movs	r3, #0
 800aae6:	623b      	str	r3, [r7, #32]
 800aae8:	4b5b      	ldr	r3, [pc, #364]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800aaea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaec:	4a5a      	ldr	r2, [pc, #360]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800aaee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aaf2:	6313      	str	r3, [r2, #48]	; 0x30
 800aaf4:	4b58      	ldr	r3, [pc, #352]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800aaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aafc:	623b      	str	r3, [r7, #32]
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	2300      	movs	r3, #0
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	4b54      	ldr	r3, [pc, #336]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab08:	4a53      	ldr	r2, [pc, #332]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab0e:	6313      	str	r3, [r2, #48]	; 0x30
 800ab10:	4b51      	ldr	r3, [pc, #324]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab18:	61fb      	str	r3, [r7, #28]
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	61bb      	str	r3, [r7, #24]
 800ab20:	4b4d      	ldr	r3, [pc, #308]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab24:	4a4c      	ldr	r2, [pc, #304]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab2a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab2c:	4b4a      	ldr	r3, [pc, #296]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab34:	61bb      	str	r3, [r7, #24]
 800ab36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab38:	2300      	movs	r3, #0
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	4b46      	ldr	r3, [pc, #280]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	4a45      	ldr	r2, [pc, #276]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab42:	f043 0304 	orr.w	r3, r3, #4
 800ab46:	6313      	str	r3, [r2, #48]	; 0x30
 800ab48:	4b43      	ldr	r3, [pc, #268]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	f003 0304 	and.w	r3, r3, #4
 800ab50:	617b      	str	r3, [r7, #20]
 800ab52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab54:	2300      	movs	r3, #0
 800ab56:	613b      	str	r3, [r7, #16]
 800ab58:	4b3f      	ldr	r3, [pc, #252]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	4a3e      	ldr	r2, [pc, #248]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	6313      	str	r3, [r2, #48]	; 0x30
 800ab64:	4b3c      	ldr	r3, [pc, #240]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	613b      	str	r3, [r7, #16]
 800ab6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	4b38      	ldr	r3, [pc, #224]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	4a37      	ldr	r2, [pc, #220]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab7a:	f043 0302 	orr.w	r3, r3, #2
 800ab7e:	6313      	str	r3, [r2, #48]	; 0x30
 800ab80:	4b35      	ldr	r3, [pc, #212]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	60fb      	str	r3, [r7, #12]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60bb      	str	r3, [r7, #8]
 800ab90:	4b31      	ldr	r3, [pc, #196]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab94:	4a30      	ldr	r2, [pc, #192]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab9a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab9c:	4b2e      	ldr	r3, [pc, #184]	; (800ac58 <HAL_ETH_MspInit+0x198>)
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba4:	60bb      	str	r3, [r7, #8]
 800aba6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800aba8:	2332      	movs	r3, #50	; 0x32
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abac:	2302      	movs	r3, #2
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abb4:	2303      	movs	r3, #3
 800abb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800abb8:	230b      	movs	r3, #11
 800abba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abc0:	4619      	mov	r1, r3
 800abc2:	4826      	ldr	r0, [pc, #152]	; (800ac5c <HAL_ETH_MspInit+0x19c>)
 800abc4:	f7fa fab4 	bl	8005130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800abc8:	2386      	movs	r3, #134	; 0x86
 800abca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abcc:	2302      	movs	r3, #2
 800abce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd0:	2300      	movs	r3, #0
 800abd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abd4:	2303      	movs	r3, #3
 800abd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800abd8:	230b      	movs	r3, #11
 800abda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abe0:	4619      	mov	r1, r3
 800abe2:	481f      	ldr	r0, [pc, #124]	; (800ac60 <HAL_ETH_MspInit+0x1a0>)
 800abe4:	f7fa faa4 	bl	8005130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800abe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abee:	2302      	movs	r3, #2
 800abf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abf6:	2303      	movs	r3, #3
 800abf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800abfa:	230b      	movs	r3, #11
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800abfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac02:	4619      	mov	r1, r3
 800ac04:	4817      	ldr	r0, [pc, #92]	; (800ac64 <HAL_ETH_MspInit+0x1a4>)
 800ac06:	f7fa fa93 	bl	8005130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ac0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ac0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac10:	2302      	movs	r3, #2
 800ac12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac1c:	230b      	movs	r3, #11
 800ac1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ac20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac24:	4619      	mov	r1, r3
 800ac26:	4810      	ldr	r0, [pc, #64]	; (800ac68 <HAL_ETH_MspInit+0x1a8>)
 800ac28:	f7fa fa82 	bl	8005130 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2105      	movs	r1, #5
 800ac30:	203d      	movs	r0, #61	; 0x3d
 800ac32:	f7f8 ff71 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ac36:	203d      	movs	r0, #61	; 0x3d
 800ac38:	f7f8 ff8a 	bl	8003b50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2105      	movs	r1, #5
 800ac40:	203e      	movs	r0, #62	; 0x3e
 800ac42:	f7f8 ff69 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800ac46:	203e      	movs	r0, #62	; 0x3e
 800ac48:	f7f8 ff82 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ac4c:	bf00      	nop
 800ac4e:	3738      	adds	r7, #56	; 0x38
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	40028000 	.word	0x40028000
 800ac58:	40023800 	.word	0x40023800
 800ac5c:	40020800 	.word	0x40020800
 800ac60:	40020000 	.word	0x40020000
 800ac64:	40020400 	.word	0x40020400
 800ac68:	40021800 	.word	0x40021800

0800ac6c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ac70:	4802      	ldr	r0, [pc, #8]	; (800ac7c <ETH_PHY_IO_Init+0x10>)
 800ac72:	f7f9 fdf5 	bl	8004860 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	2000581c 	.word	0x2000581c

0800ac80 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ac80:	b480      	push	{r7}
 800ac82:	af00      	add	r7, sp, #0
  return 0;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	68f9      	ldr	r1, [r7, #12]
 800aca2:	4807      	ldr	r0, [pc, #28]	; (800acc0 <ETH_PHY_IO_ReadReg+0x30>)
 800aca4:	f7f9 fc44 	bl	8004530 <HAL_ETH_ReadPHYRegister>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800acae:	f04f 33ff 	mov.w	r3, #4294967295
 800acb2:	e000      	b.n	800acb6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2000581c 	.word	0x2000581c

0800acc4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	68f9      	ldr	r1, [r7, #12]
 800acd6:	4807      	ldr	r0, [pc, #28]	; (800acf4 <ETH_PHY_IO_WriteReg+0x30>)
 800acd8:	f7f9 fc75 	bl	80045c6 <HAL_ETH_WritePHYRegister>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d002      	beq.n	800ace8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295
 800ace6:	e000      	b.n	800acea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	2000581c 	.word	0x2000581c

0800acf8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800acfc:	f7f8 f998 	bl	8003030 <HAL_GetTick>
 800ad00:	4603      	mov	r3, r0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b0a0      	sub	sp, #128	; 0x80
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ad10:	f107 0308 	add.w	r3, r7, #8
 800ad14:	2264      	movs	r2, #100	; 0x64
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f00e fd10 	bl	801973e <memset>
  int32_t PHYLinkState = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad26:	2300      	movs	r3, #0
 800ad28:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ad32:	483a      	ldr	r0, [pc, #232]	; (800ae1c <ethernet_link_thread+0x114>)
 800ad34:	f7f8 f8bf 	bl	8002eb6 <LAN8742_GetLinkState>
 800ad38:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ad3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad40:	089b      	lsrs	r3, r3, #2
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00c      	beq.n	800ad66 <ethernet_link_thread+0x5e>
 800ad4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	dc09      	bgt.n	800ad66 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ad52:	4833      	ldr	r0, [pc, #204]	; (800ae20 <ethernet_link_thread+0x118>)
 800ad54:	f7f9 f8a8 	bl	8003ea8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ad58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad5a:	f005 f857 	bl	800fe0c <netif_set_down>
    netif_set_link_down(netif);
 800ad5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad60:	f005 f8ba 	bl	800fed8 <netif_set_link_down>
 800ad64:	e055      	b.n	800ae12 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ad66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d14e      	bne.n	800ae12 <ethernet_link_thread+0x10a>
 800ad74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	dd4b      	ble.n	800ae12 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ad7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad7c:	3b02      	subs	r3, #2
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d82a      	bhi.n	800add8 <ethernet_link_thread+0xd0>
 800ad82:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <ethernet_link_thread+0x80>)
 800ad84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad88:	0800ad99 	.word	0x0800ad99
 800ad8c:	0800adab 	.word	0x0800adab
 800ad90:	0800adbb 	.word	0x0800adbb
 800ad94:	0800adcb 	.word	0x0800adcb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ad98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ad9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ada2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ada4:	2301      	movs	r3, #1
 800ada6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ada8:	e017      	b.n	800adda <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800adaa:	2300      	movs	r3, #0
 800adac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800adae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800adb2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800adb4:	2301      	movs	r3, #1
 800adb6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800adb8:	e00f      	b.n	800adda <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800adba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adbe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800adc0:	2300      	movs	r3, #0
 800adc2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800adc4:	2301      	movs	r3, #1
 800adc6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800adc8:	e007      	b.n	800adda <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800adca:	2300      	movs	r3, #0
 800adcc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800adce:	2300      	movs	r3, #0
 800add0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800add2:	2301      	movs	r3, #1
 800add4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800add6:	e000      	b.n	800adda <ethernet_link_thread+0xd2>
    default:
      break;
 800add8:	bf00      	nop
    }

    if(linkchanged)
 800adda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d018      	beq.n	800ae12 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ade0:	f107 0308 	add.w	r3, r7, #8
 800ade4:	4619      	mov	r1, r3
 800ade6:	480e      	ldr	r0, [pc, #56]	; (800ae20 <ethernet_link_thread+0x118>)
 800ade8:	f7f9 fc36 	bl	8004658 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800adec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adee:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800adf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adf2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4619      	mov	r1, r3
 800adfa:	4809      	ldr	r0, [pc, #36]	; (800ae20 <ethernet_link_thread+0x118>)
 800adfc:	f7f9 fd16 	bl	800482c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800ae00:	4807      	ldr	r0, [pc, #28]	; (800ae20 <ethernet_link_thread+0x118>)
 800ae02:	f7f8 ffc3 	bl	8003d8c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ae06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae08:	f004 ff94 	bl	800fd34 <netif_set_up>
      netif_set_link_up(netif);
 800ae0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae0e:	f005 f82f 	bl	800fe70 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ae12:	2064      	movs	r0, #100	; 0x64
 800ae14:	f000 f9b7 	bl	800b186 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ae18:	e78b      	b.n	800ad32 <ethernet_link_thread+0x2a>
 800ae1a:	bf00      	nop
 800ae1c:	20005904 	.word	0x20005904
 800ae20:	2000581c 	.word	0x2000581c

0800ae24 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ae2c:	4812      	ldr	r0, [pc, #72]	; (800ae78 <HAL_ETH_RxAllocateCallback+0x54>)
 800ae2e:	f004 fcf5 	bl	800f81c <memp_malloc_pool>
 800ae32:	60f8      	str	r0, [r7, #12]
  if (p)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d014      	beq.n	800ae64 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f103 0220 	add.w	r2, r3, #32
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4a0d      	ldr	r2, [pc, #52]	; (800ae7c <HAL_ETH_RxAllocateCallback+0x58>)
 800ae48:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ae52:	9201      	str	r2, [sp, #4]
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2241      	movs	r2, #65	; 0x41
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f005 fa5f 	bl	8010320 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ae62:	e005      	b.n	800ae70 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ae64:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <HAL_ETH_RxAllocateCallback+0x5c>)
 800ae66:	2201      	movs	r2, #1
 800ae68:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
}
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	0801d98c 	.word	0x0801d98c
 800ae7c:	0800aa71 	.word	0x0800aa71
 800ae80:	200056d0 	.word	0x200056d0

0800ae84 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b089      	sub	sp, #36	; 0x24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3b20      	subs	r3, #32
 800aea2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	2200      	movs	r2, #0
 800aea8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	2200      	movs	r2, #0
 800aeae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	887a      	ldrh	r2, [r7, #2]
 800aeb4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d103      	bne.n	800aec6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	e003      	b.n	800aece <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	69fa      	ldr	r2, [r7, #28]
 800aecc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	69fa      	ldr	r2, [r7, #28]
 800aed2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	61fb      	str	r3, [r7, #28]
 800aeda:	e009      	b.n	800aef0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	891a      	ldrh	r2, [r3, #8]
 800aee0:	887b      	ldrh	r3, [r7, #2]
 800aee2:	4413      	add	r3, r2
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1f2      	bne.n	800aedc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	3724      	adds	r7, #36	; 0x24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f005 fbc1 	bl	8010694 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <__NVIC_SetPriority>:
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	6039      	str	r1, [r7, #0]
 800af26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	db0a      	blt.n	800af46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	b2da      	uxtb	r2, r3
 800af34:	490c      	ldr	r1, [pc, #48]	; (800af68 <__NVIC_SetPriority+0x4c>)
 800af36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af3a:	0112      	lsls	r2, r2, #4
 800af3c:	b2d2      	uxtb	r2, r2
 800af3e:	440b      	add	r3, r1
 800af40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af44:	e00a      	b.n	800af5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	4908      	ldr	r1, [pc, #32]	; (800af6c <__NVIC_SetPriority+0x50>)
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	f003 030f 	and.w	r3, r3, #15
 800af52:	3b04      	subs	r3, #4
 800af54:	0112      	lsls	r2, r2, #4
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	440b      	add	r3, r1
 800af5a:	761a      	strb	r2, [r3, #24]
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	e000e100 	.word	0xe000e100
 800af6c:	e000ed00 	.word	0xe000ed00

0800af70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <SysTick_Handler+0x1c>)
 800af76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800af78:	f002 fc96 	bl	800d8a8 <xTaskGetSchedulerState>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d001      	beq.n	800af86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800af82:	f003 fb79 	bl	800e678 <xPortSysTickHandler>
  }
}
 800af86:	bf00      	nop
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	e000e010 	.word	0xe000e010

0800af90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800af94:	2100      	movs	r1, #0
 800af96:	f06f 0004 	mvn.w	r0, #4
 800af9a:	f7ff ffbf 	bl	800af1c <__NVIC_SetPriority>
#endif
}
 800af9e:	bf00      	nop
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afaa:	f3ef 8305 	mrs	r3, IPSR
 800afae:	603b      	str	r3, [r7, #0]
  return(result);
 800afb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800afb6:	f06f 0305 	mvn.w	r3, #5
 800afba:	607b      	str	r3, [r7, #4]
 800afbc:	e00c      	b.n	800afd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800afbe:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <osKernelInitialize+0x44>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d105      	bne.n	800afd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afc6:	4b08      	ldr	r3, [pc, #32]	; (800afe8 <osKernelInitialize+0x44>)
 800afc8:	2201      	movs	r2, #1
 800afca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800afcc:	2300      	movs	r3, #0
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	e002      	b.n	800afd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800afd2:	f04f 33ff 	mov.w	r3, #4294967295
 800afd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800afd8:	687b      	ldr	r3, [r7, #4]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20005924 	.word	0x20005924

0800afec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aff2:	f3ef 8305 	mrs	r3, IPSR
 800aff6:	603b      	str	r3, [r7, #0]
  return(result);
 800aff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <osKernelStart+0x1a>
    stat = osErrorISR;
 800affe:	f06f 0305 	mvn.w	r3, #5
 800b002:	607b      	str	r3, [r7, #4]
 800b004:	e010      	b.n	800b028 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <osKernelStart+0x48>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d109      	bne.n	800b022 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b00e:	f7ff ffbf 	bl	800af90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <osKernelStart+0x48>)
 800b014:	2202      	movs	r2, #2
 800b016:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b018:	f001 ffc8 	bl	800cfac <vTaskStartScheduler>
      stat = osOK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	e002      	b.n	800b028 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b022:	f04f 33ff 	mov.w	r3, #4294967295
 800b026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b028:	687b      	ldr	r3, [r7, #4]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20005924 	.word	0x20005924

0800b038 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b03e:	f3ef 8305 	mrs	r3, IPSR
 800b042:	603b      	str	r3, [r7, #0]
  return(result);
 800b044:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b04a:	f002 f8db 	bl	800d204 <xTaskGetTickCountFromISR>
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	e002      	b.n	800b058 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b052:	f002 f8c7 	bl	800d1e4 <xTaskGetTickCount>
 800b056:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b058:	687b      	ldr	r3, [r7, #4]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b062:	b580      	push	{r7, lr}
 800b064:	b08e      	sub	sp, #56	; 0x38
 800b066:	af04      	add	r7, sp, #16
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b072:	f3ef 8305 	mrs	r3, IPSR
 800b076:	617b      	str	r3, [r7, #20]
  return(result);
 800b078:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d17e      	bne.n	800b17c <osThreadNew+0x11a>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d07b      	beq.n	800b17c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b084:	2380      	movs	r3, #128	; 0x80
 800b086:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b088:	2318      	movs	r3, #24
 800b08a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b08c:	2300      	movs	r3, #0
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d045      	beq.n	800b128 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <osThreadNew+0x48>
        name = attr->name;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d008      	beq.n	800b0d0 <osThreadNew+0x6e>
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	2b38      	cmp	r3, #56	; 0x38
 800b0c2:	d805      	bhi.n	800b0d0 <osThreadNew+0x6e>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <osThreadNew+0x72>
        return (NULL);
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	e054      	b.n	800b17e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	089b      	lsrs	r3, r3, #2
 800b0e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00e      	beq.n	800b10a <osThreadNew+0xa8>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	2bbb      	cmp	r3, #187	; 0xbb
 800b0f2:	d90a      	bls.n	800b10a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d006      	beq.n	800b10a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <osThreadNew+0xa8>
        mem = 1;
 800b104:	2301      	movs	r3, #1
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	e010      	b.n	800b12c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10c      	bne.n	800b12c <osThreadNew+0xca>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d108      	bne.n	800b12c <osThreadNew+0xca>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d104      	bne.n	800b12c <osThreadNew+0xca>
          mem = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	e001      	b.n	800b12c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d110      	bne.n	800b154 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b13a:	9202      	str	r2, [sp, #8]
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	6a3a      	ldr	r2, [r7, #32]
 800b146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f001 fd43 	bl	800cbd4 <xTaskCreateStatic>
 800b14e:	4603      	mov	r3, r0
 800b150:	613b      	str	r3, [r7, #16]
 800b152:	e013      	b.n	800b17c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d110      	bne.n	800b17c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	f107 0310 	add.w	r3, r7, #16
 800b162:	9301      	str	r3, [sp, #4]
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f001 fd8e 	bl	800cc8e <xTaskCreate>
 800b172:	4603      	mov	r3, r0
 800b174:	2b01      	cmp	r3, #1
 800b176:	d001      	beq.n	800b17c <osThreadNew+0x11a>
            hTask = NULL;
 800b178:	2300      	movs	r3, #0
 800b17a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b17c:	693b      	ldr	r3, [r7, #16]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3728      	adds	r7, #40	; 0x28
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b18e:	f3ef 8305 	mrs	r3, IPSR
 800b192:	60bb      	str	r3, [r7, #8]
  return(result);
 800b194:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <osDelay+0x1c>
    stat = osErrorISR;
 800b19a:	f06f 0305 	mvn.w	r3, #5
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e007      	b.n	800b1b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 fec9 	bl	800cf44 <vTaskDelay>
    }
  }

  return (stat);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1c8:	f3ef 8305 	mrs	r3, IPSR
 800b1cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1ce:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d174      	bne.n	800b2be <osMutexNew+0x102>
    if (attr != NULL) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	61bb      	str	r3, [r7, #24]
 800b1e0:	e001      	b.n	800b1e6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <osMutexNew+0x3a>
      rmtx = 1U;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	e001      	b.n	800b1fa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	f003 0308 	and.w	r3, r3, #8
 800b200:	2b00      	cmp	r3, #0
 800b202:	d15c      	bne.n	800b2be <osMutexNew+0x102>
      mem = -1;
 800b204:	f04f 33ff 	mov.w	r3, #4294967295
 800b208:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d015      	beq.n	800b23c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d006      	beq.n	800b226 <osMutexNew+0x6a>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	2b4f      	cmp	r3, #79	; 0x4f
 800b21e:	d902      	bls.n	800b226 <osMutexNew+0x6a>
          mem = 1;
 800b220:	2301      	movs	r3, #1
 800b222:	613b      	str	r3, [r7, #16]
 800b224:	e00c      	b.n	800b240 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d108      	bne.n	800b240 <osMutexNew+0x84>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d104      	bne.n	800b240 <osMutexNew+0x84>
            mem = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	613b      	str	r3, [r7, #16]
 800b23a:	e001      	b.n	800b240 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d112      	bne.n	800b26c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d007      	beq.n	800b25c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	4619      	mov	r1, r3
 800b252:	2004      	movs	r0, #4
 800b254:	f000 fd69 	bl	800bd2a <xQueueCreateMutexStatic>
 800b258:	61f8      	str	r0, [r7, #28]
 800b25a:	e016      	b.n	800b28a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	4619      	mov	r1, r3
 800b262:	2001      	movs	r0, #1
 800b264:	f000 fd61 	bl	800bd2a <xQueueCreateMutexStatic>
 800b268:	61f8      	str	r0, [r7, #28]
 800b26a:	e00e      	b.n	800b28a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10b      	bne.n	800b28a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d004      	beq.n	800b282 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b278:	2004      	movs	r0, #4
 800b27a:	f000 fd3e 	bl	800bcfa <xQueueCreateMutex>
 800b27e:	61f8      	str	r0, [r7, #28]
 800b280:	e003      	b.n	800b28a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b282:	2001      	movs	r0, #1
 800b284:	f000 fd39 	bl	800bcfa <xQueueCreateMutex>
 800b288:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00c      	beq.n	800b2aa <osMutexNew+0xee>
        if (attr != NULL) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <osMutexNew+0xe2>
          name = attr->name;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	e001      	b.n	800b2a2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b2a2:	68f9      	ldr	r1, [r7, #12]
 800b2a4:	69f8      	ldr	r0, [r7, #28]
 800b2a6:	f001 fc0d 	bl	800cac4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d006      	beq.n	800b2be <osMutexNew+0x102>
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	f043 0301 	orr.w	r3, r3, #1
 800b2bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b2be:	69fb      	ldr	r3, [r7, #28]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3720      	adds	r7, #32
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f023 0301 	bic.w	r3, r3, #1
 800b2d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2e6:	f3ef 8305 	mrs	r3, IPSR
 800b2ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b2f2:	f06f 0305 	mvn.w	r3, #5
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e02c      	b.n	800b354 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d103      	bne.n	800b308 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b300:	f06f 0303 	mvn.w	r3, #3
 800b304:	617b      	str	r3, [r7, #20]
 800b306:	e025      	b.n	800b354 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d011      	beq.n	800b332 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6938      	ldr	r0, [r7, #16]
 800b312:	f000 fd59 	bl	800bdc8 <xQueueTakeMutexRecursive>
 800b316:	4603      	mov	r3, r0
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d01b      	beq.n	800b354 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b322:	f06f 0301 	mvn.w	r3, #1
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	e014      	b.n	800b354 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b32a:	f06f 0302 	mvn.w	r3, #2
 800b32e:	617b      	str	r3, [r7, #20]
 800b330:	e010      	b.n	800b354 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6938      	ldr	r0, [r7, #16]
 800b336:	f001 f8ed 	bl	800c514 <xQueueSemaphoreTake>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d009      	beq.n	800b354 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b346:	f06f 0301 	mvn.w	r3, #1
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	e002      	b.n	800b354 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b34e:	f06f 0302 	mvn.w	r3, #2
 800b352:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b354:	697b      	ldr	r3, [r7, #20]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b35e:	b580      	push	{r7, lr}
 800b360:	b086      	sub	sp, #24
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f023 0301 	bic.w	r3, r3, #1
 800b36c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f003 0301 	and.w	r3, r3, #1
 800b374:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b376:	2300      	movs	r3, #0
 800b378:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b37a:	f3ef 8305 	mrs	r3, IPSR
 800b37e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b380:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <osMutexRelease+0x30>
    stat = osErrorISR;
 800b386:	f06f 0305 	mvn.w	r3, #5
 800b38a:	617b      	str	r3, [r7, #20]
 800b38c:	e01f      	b.n	800b3ce <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d103      	bne.n	800b39c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b394:	f06f 0303 	mvn.w	r3, #3
 800b398:	617b      	str	r3, [r7, #20]
 800b39a:	e018      	b.n	800b3ce <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d009      	beq.n	800b3b6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b3a2:	6938      	ldr	r0, [r7, #16]
 800b3a4:	f000 fcdc 	bl	800bd60 <xQueueGiveMutexRecursive>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d00f      	beq.n	800b3ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800b3ae:	f06f 0302 	mvn.w	r3, #2
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	e00b      	b.n	800b3ce <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	6938      	ldr	r0, [r7, #16]
 800b3be:	f000 fda3 	bl	800bf08 <xQueueGenericSend>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d002      	beq.n	800b3ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800b3c8:	f06f 0302 	mvn.w	r3, #2
 800b3cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b3ce:	697b      	ldr	r3, [r7, #20]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b08a      	sub	sp, #40	; 0x28
 800b3dc:	af02      	add	r7, sp, #8
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e8:	f3ef 8305 	mrs	r3, IPSR
 800b3ec:	613b      	str	r3, [r7, #16]
  return(result);
 800b3ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d175      	bne.n	800b4e0 <osSemaphoreNew+0x108>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d072      	beq.n	800b4e0 <osSemaphoreNew+0x108>
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d86e      	bhi.n	800b4e0 <osSemaphoreNew+0x108>
    mem = -1;
 800b402:	f04f 33ff 	mov.w	r3, #4294967295
 800b406:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d015      	beq.n	800b43a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d006      	beq.n	800b424 <osSemaphoreNew+0x4c>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	2b4f      	cmp	r3, #79	; 0x4f
 800b41c:	d902      	bls.n	800b424 <osSemaphoreNew+0x4c>
        mem = 1;
 800b41e:	2301      	movs	r3, #1
 800b420:	61bb      	str	r3, [r7, #24]
 800b422:	e00c      	b.n	800b43e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d108      	bne.n	800b43e <osSemaphoreNew+0x66>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d104      	bne.n	800b43e <osSemaphoreNew+0x66>
          mem = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	61bb      	str	r3, [r7, #24]
 800b438:	e001      	b.n	800b43e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b444:	d04c      	beq.n	800b4e0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d128      	bne.n	800b49e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d10a      	bne.n	800b468 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	2203      	movs	r2, #3
 800b458:	9200      	str	r2, [sp, #0]
 800b45a:	2200      	movs	r2, #0
 800b45c:	2100      	movs	r1, #0
 800b45e:	2001      	movs	r0, #1
 800b460:	f000 fb5c 	bl	800bb1c <xQueueGenericCreateStatic>
 800b464:	61f8      	str	r0, [r7, #28]
 800b466:	e005      	b.n	800b474 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b468:	2203      	movs	r2, #3
 800b46a:	2100      	movs	r1, #0
 800b46c:	2001      	movs	r0, #1
 800b46e:	f000 fbcd 	bl	800bc0c <xQueueGenericCreate>
 800b472:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d022      	beq.n	800b4c0 <osSemaphoreNew+0xe8>
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01f      	beq.n	800b4c0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b480:	2300      	movs	r3, #0
 800b482:	2200      	movs	r2, #0
 800b484:	2100      	movs	r1, #0
 800b486:	69f8      	ldr	r0, [r7, #28]
 800b488:	f000 fd3e 	bl	800bf08 <xQueueGenericSend>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d016      	beq.n	800b4c0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b492:	69f8      	ldr	r0, [r7, #28]
 800b494:	f001 f9ca 	bl	800c82c <vQueueDelete>
            hSemaphore = NULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	61fb      	str	r3, [r7, #28]
 800b49c:	e010      	b.n	800b4c0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d108      	bne.n	800b4b6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	68b9      	ldr	r1, [r7, #8]
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 fcc1 	bl	800be34 <xQueueCreateCountingSemaphoreStatic>
 800b4b2:	61f8      	str	r0, [r7, #28]
 800b4b4:	e004      	b.n	800b4c0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 fcf2 	bl	800bea2 <xQueueCreateCountingSemaphore>
 800b4be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00c      	beq.n	800b4e0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d003      	beq.n	800b4d4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	617b      	str	r3, [r7, #20]
 800b4d2:	e001      	b.n	800b4d8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b4d8:	6979      	ldr	r1, [r7, #20]
 800b4da:	69f8      	ldr	r0, [r7, #28]
 800b4dc:	f001 faf2 	bl	800cac4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b4e0:	69fb      	ldr	r3, [r7, #28]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3720      	adds	r7, #32
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b504:	f06f 0303 	mvn.w	r3, #3
 800b508:	617b      	str	r3, [r7, #20]
 800b50a:	e039      	b.n	800b580 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b50c:	f3ef 8305 	mrs	r3, IPSR
 800b510:	60fb      	str	r3, [r7, #12]
  return(result);
 800b512:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b514:	2b00      	cmp	r3, #0
 800b516:	d022      	beq.n	800b55e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b51e:	f06f 0303 	mvn.w	r3, #3
 800b522:	617b      	str	r3, [r7, #20]
 800b524:	e02c      	b.n	800b580 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b526:	2300      	movs	r3, #0
 800b528:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b52a:	f107 0308 	add.w	r3, r7, #8
 800b52e:	461a      	mov	r2, r3
 800b530:	2100      	movs	r1, #0
 800b532:	6938      	ldr	r0, [r7, #16]
 800b534:	f001 f8fa 	bl	800c72c <xQueueReceiveFromISR>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d003      	beq.n	800b546 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b53e:	f06f 0302 	mvn.w	r3, #2
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	e01c      	b.n	800b580 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d019      	beq.n	800b580 <osSemaphoreAcquire+0x94>
 800b54c:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <osSemaphoreAcquire+0xa0>)
 800b54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	e010      	b.n	800b580 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6938      	ldr	r0, [r7, #16]
 800b562:	f000 ffd7 	bl	800c514 <xQueueSemaphoreTake>
 800b566:	4603      	mov	r3, r0
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d009      	beq.n	800b580 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b572:	f06f 0301 	mvn.w	r3, #1
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	e002      	b.n	800b580 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b57a:	f06f 0302 	mvn.w	r3, #2
 800b57e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b580:	697b      	ldr	r3, [r7, #20]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	e000ed04 	.word	0xe000ed04

0800b590 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d103      	bne.n	800b5ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b5a6:	f06f 0303 	mvn.w	r3, #3
 800b5aa:	617b      	str	r3, [r7, #20]
 800b5ac:	e02c      	b.n	800b608 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ae:	f3ef 8305 	mrs	r3, IPSR
 800b5b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d01a      	beq.n	800b5f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b5be:	f107 0308 	add.w	r3, r7, #8
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6938      	ldr	r0, [r7, #16]
 800b5c6:	f000 fe38 	bl	800c23a <xQueueGiveFromISR>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d003      	beq.n	800b5d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b5d0:	f06f 0302 	mvn.w	r3, #2
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	e017      	b.n	800b608 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d014      	beq.n	800b608 <osSemaphoreRelease+0x78>
 800b5de:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <osSemaphoreRelease+0x84>)
 800b5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	e00b      	b.n	800b608 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	6938      	ldr	r0, [r7, #16]
 800b5f8:	f000 fc86 	bl	800bf08 <xQueueGenericSend>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d002      	beq.n	800b608 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b602:	f06f 0302 	mvn.w	r3, #2
 800b606:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b608:	697b      	ldr	r3, [r7, #20]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b628:	f3ef 8305 	mrs	r3, IPSR
 800b62c:	613b      	str	r3, [r7, #16]
  return(result);
 800b62e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b630:	2b00      	cmp	r3, #0
 800b632:	d15f      	bne.n	800b6f4 <osMessageQueueNew+0xdc>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d05c      	beq.n	800b6f4 <osMessageQueueNew+0xdc>
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d059      	beq.n	800b6f4 <osMessageQueueNew+0xdc>
    mem = -1;
 800b640:	f04f 33ff 	mov.w	r3, #4294967295
 800b644:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d029      	beq.n	800b6a0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d012      	beq.n	800b67a <osMessageQueueNew+0x62>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	2b4f      	cmp	r3, #79	; 0x4f
 800b65a:	d90e      	bls.n	800b67a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00a      	beq.n	800b67a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	695a      	ldr	r2, [r3, #20]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	68b9      	ldr	r1, [r7, #8]
 800b66c:	fb01 f303 	mul.w	r3, r1, r3
 800b670:	429a      	cmp	r2, r3
 800b672:	d302      	bcc.n	800b67a <osMessageQueueNew+0x62>
        mem = 1;
 800b674:	2301      	movs	r3, #1
 800b676:	61bb      	str	r3, [r7, #24]
 800b678:	e014      	b.n	800b6a4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d110      	bne.n	800b6a4 <osMessageQueueNew+0x8c>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10c      	bne.n	800b6a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d108      	bne.n	800b6a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d104      	bne.n	800b6a4 <osMessageQueueNew+0x8c>
          mem = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	61bb      	str	r3, [r7, #24]
 800b69e:	e001      	b.n	800b6a4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d10b      	bne.n	800b6c2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	691a      	ldr	r2, [r3, #16]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	9100      	str	r1, [sp, #0]
 800b6b6:	68b9      	ldr	r1, [r7, #8]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f000 fa2f 	bl	800bb1c <xQueueGenericCreateStatic>
 800b6be:	61f8      	str	r0, [r7, #28]
 800b6c0:	e008      	b.n	800b6d4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d105      	bne.n	800b6d4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 fa9d 	bl	800bc0c <xQueueGenericCreate>
 800b6d2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	e001      	b.n	800b6ec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b6ec:	6979      	ldr	r1, [r7, #20]
 800b6ee:	69f8      	ldr	r0, [r7, #28]
 800b6f0:	f001 f9e8 	bl	800cac4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b6f4:	69fb      	ldr	r3, [r7, #28]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	603b      	str	r3, [r7, #0]
 800b70c:	4613      	mov	r3, r2
 800b70e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b718:	f3ef 8305 	mrs	r3, IPSR
 800b71c:	617b      	str	r3, [r7, #20]
  return(result);
 800b71e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b720:	2b00      	cmp	r3, #0
 800b722:	d028      	beq.n	800b776 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <osMessageQueuePut+0x36>
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <osMessageQueuePut+0x36>
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d003      	beq.n	800b73e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b736:	f06f 0303 	mvn.w	r3, #3
 800b73a:	61fb      	str	r3, [r7, #28]
 800b73c:	e038      	b.n	800b7b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b73e:	2300      	movs	r3, #0
 800b740:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b742:	f107 0210 	add.w	r2, r7, #16
 800b746:	2300      	movs	r3, #0
 800b748:	68b9      	ldr	r1, [r7, #8]
 800b74a:	69b8      	ldr	r0, [r7, #24]
 800b74c:	f000 fcda 	bl	800c104 <xQueueGenericSendFromISR>
 800b750:	4603      	mov	r3, r0
 800b752:	2b01      	cmp	r3, #1
 800b754:	d003      	beq.n	800b75e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b756:	f06f 0302 	mvn.w	r3, #2
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	e028      	b.n	800b7b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d025      	beq.n	800b7b0 <osMessageQueuePut+0xb0>
 800b764:	4b15      	ldr	r3, [pc, #84]	; (800b7bc <osMessageQueuePut+0xbc>)
 800b766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76a:	601a      	str	r2, [r3, #0]
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	e01c      	b.n	800b7b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <osMessageQueuePut+0x82>
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d103      	bne.n	800b78a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b782:	f06f 0303 	mvn.w	r3, #3
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	e012      	b.n	800b7b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b78a:	2300      	movs	r3, #0
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	68b9      	ldr	r1, [r7, #8]
 800b790:	69b8      	ldr	r0, [r7, #24]
 800b792:	f000 fbb9 	bl	800bf08 <xQueueGenericSend>
 800b796:	4603      	mov	r3, r0
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d009      	beq.n	800b7b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b7a2:	f06f 0301 	mvn.w	r3, #1
 800b7a6:	61fb      	str	r3, [r7, #28]
 800b7a8:	e002      	b.n	800b7b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b7aa:	f06f 0302 	mvn.w	r3, #2
 800b7ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b7b0:	69fb      	ldr	r3, [r7, #28]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3720      	adds	r7, #32
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	e000ed04 	.word	0xe000ed04

0800b7c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7d6:	f3ef 8305 	mrs	r3, IPSR
 800b7da:	617b      	str	r3, [r7, #20]
  return(result);
 800b7dc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d028      	beq.n	800b834 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d005      	beq.n	800b7f4 <osMessageQueueGet+0x34>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <osMessageQueueGet+0x34>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b7f4:	f06f 0303 	mvn.w	r3, #3
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	e037      	b.n	800b86c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b800:	f107 0310 	add.w	r3, r7, #16
 800b804:	461a      	mov	r2, r3
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	69b8      	ldr	r0, [r7, #24]
 800b80a:	f000 ff8f 	bl	800c72c <xQueueReceiveFromISR>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b01      	cmp	r3, #1
 800b812:	d003      	beq.n	800b81c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b814:	f06f 0302 	mvn.w	r3, #2
 800b818:	61fb      	str	r3, [r7, #28]
 800b81a:	e027      	b.n	800b86c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d024      	beq.n	800b86c <osMessageQueueGet+0xac>
 800b822:	4b15      	ldr	r3, [pc, #84]	; (800b878 <osMessageQueueGet+0xb8>)
 800b824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	e01b      	b.n	800b86c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <osMessageQueueGet+0x80>
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d103      	bne.n	800b848 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b840:	f06f 0303 	mvn.w	r3, #3
 800b844:	61fb      	str	r3, [r7, #28]
 800b846:	e011      	b.n	800b86c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	69b8      	ldr	r0, [r7, #24]
 800b84e:	f000 fd81 	bl	800c354 <xQueueReceive>
 800b852:	4603      	mov	r3, r0
 800b854:	2b01      	cmp	r3, #1
 800b856:	d009      	beq.n	800b86c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b85e:	f06f 0301 	mvn.w	r3, #1
 800b862:	61fb      	str	r3, [r7, #28]
 800b864:	e002      	b.n	800b86c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b866:	f06f 0302 	mvn.w	r3, #2
 800b86a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b86c:	69fb      	ldr	r3, [r7, #28]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3720      	adds	r7, #32
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	e000ed04 	.word	0xe000ed04

0800b87c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4a07      	ldr	r2, [pc, #28]	; (800b8a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b88c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	4a06      	ldr	r2, [pc, #24]	; (800b8ac <vApplicationGetIdleTaskMemory+0x30>)
 800b892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2280      	movs	r2, #128	; 0x80
 800b898:	601a      	str	r2, [r3, #0]
}
 800b89a:	bf00      	nop
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	20005928 	.word	0x20005928
 800b8ac:	200059e4 	.word	0x200059e4

0800b8b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4a07      	ldr	r2, [pc, #28]	; (800b8dc <vApplicationGetTimerTaskMemory+0x2c>)
 800b8c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	4a06      	ldr	r2, [pc, #24]	; (800b8e0 <vApplicationGetTimerTaskMemory+0x30>)
 800b8c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8ce:	601a      	str	r2, [r3, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	20005be4 	.word	0x20005be4
 800b8e0:	20005ca0 	.word	0x20005ca0

0800b8e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f103 0208 	add.w	r2, r3, #8
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f103 0208 	add.w	r2, r3, #8
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f103 0208 	add.w	r2, r3, #8
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b932:	bf00      	nop
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b93e:	b480      	push	{r7}
 800b940:	b085      	sub	sp, #20
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	689a      	ldr	r2, [r3, #8]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	601a      	str	r2, [r3, #0]
}
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b986:	b480      	push	{r7}
 800b988:	b085      	sub	sp, #20
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99c:	d103      	bne.n	800b9a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	e00c      	b.n	800b9c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	e002      	b.n	800b9b4 <vListInsert+0x2e>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d2f6      	bcs.n	800b9ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	601a      	str	r2, [r3, #0]
}
 800b9ec:	bf00      	nop
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	6892      	ldr	r2, [r2, #8]
 800ba0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	6852      	ldr	r2, [r2, #4]
 800ba18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d103      	bne.n	800ba2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1e5a      	subs	r2, r3, #1
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba76:	f002 fd6d 	bl	800e554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba86:	fb01 f303 	mul.w	r3, r1, r3
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa6:	3b01      	subs	r3, #1
 800baa8:	68f9      	ldr	r1, [r7, #12]
 800baaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baac:	fb01 f303 	mul.w	r3, r1, r3
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	22ff      	movs	r2, #255	; 0xff
 800baba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	22ff      	movs	r2, #255	; 0xff
 800bac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d114      	bne.n	800baf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d01a      	beq.n	800bb0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3310      	adds	r3, #16
 800bad8:	4618      	mov	r0, r3
 800bada:	f001 fd13 	bl	800d504 <xTaskRemoveFromEventList>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d012      	beq.n	800bb0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bae4:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <xQueueGenericReset+0xcc>)
 800bae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	e009      	b.n	800bb0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3310      	adds	r3, #16
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fef2 	bl	800b8e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3324      	adds	r3, #36	; 0x24
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff feed 	bl	800b8e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb0a:	f002 fd53 	bl	800e5b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb0e:	2301      	movs	r3, #1
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	; 0x38
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <xQueueGenericCreateStatic+0x52>
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <xQueueGenericCreateStatic+0x56>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e000      	b.n	800bb74 <xQueueGenericCreateStatic+0x58>
 800bb72:	2300      	movs	r3, #0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	623b      	str	r3, [r7, #32]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <xQueueGenericCreateStatic+0x7e>
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <xQueueGenericCreateStatic+0x82>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e000      	b.n	800bba0 <xQueueGenericCreateStatic+0x84>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	61fb      	str	r3, [r7, #28]
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbba:	2350      	movs	r3, #80	; 0x50
 800bbbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b50      	cmp	r3, #80	; 0x50
 800bbc2:	d00a      	beq.n	800bbda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	61bb      	str	r3, [r7, #24]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00d      	beq.n	800bc02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f83f 	bl	800bc80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3730      	adds	r7, #48	; 0x30
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10a      	bne.n	800bc36 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	613b      	str	r3, [r7, #16]
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	fb02 f303 	mul.w	r3, r2, r3
 800bc3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	3350      	adds	r3, #80	; 0x50
 800bc44:	4618      	mov	r0, r3
 800bc46:	f002 fda7 	bl	800e798 <pvPortMalloc>
 800bc4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d011      	beq.n	800bc76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	3350      	adds	r3, #80	; 0x50
 800bc5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc64:	79fa      	ldrb	r2, [r7, #7]
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 f805 	bl	800bc80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc76:	69bb      	ldr	r3, [r7, #24]
	}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3720      	adds	r7, #32
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d103      	bne.n	800bc9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	69ba      	ldr	r2, [r7, #24]
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	e002      	b.n	800bca2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcae:	2101      	movs	r1, #1
 800bcb0:	69b8      	ldr	r0, [r7, #24]
 800bcb2:	f7ff fecb 	bl	800ba4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	78fa      	ldrb	r2, [r7, #3]
 800bcba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b082      	sub	sp, #8
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00e      	beq.n	800bcf2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bce6:	2300      	movs	r3, #0
 800bce8:	2200      	movs	r2, #0
 800bcea:	2100      	movs	r1, #0
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f90b 	bl	800bf08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bcf2:	bf00      	nop
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b086      	sub	sp, #24
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	4603      	mov	r3, r0
 800bd02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd04:	2301      	movs	r3, #1
 800bd06:	617b      	str	r3, [r7, #20]
 800bd08:	2300      	movs	r3, #0
 800bd0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bd0c:	79fb      	ldrb	r3, [r7, #7]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	6939      	ldr	r1, [r7, #16]
 800bd12:	6978      	ldr	r0, [r7, #20]
 800bd14:	f7ff ff7a 	bl	800bc0c <xQueueGenericCreate>
 800bd18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff ffd3 	bl	800bcc6 <prvInitialiseMutex>

		return xNewQueue;
 800bd20:	68fb      	ldr	r3, [r7, #12]
	}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3718      	adds	r7, #24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b088      	sub	sp, #32
 800bd2e:	af02      	add	r7, sp, #8
 800bd30:	4603      	mov	r3, r0
 800bd32:	6039      	str	r1, [r7, #0]
 800bd34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd36:	2301      	movs	r3, #1
 800bd38:	617b      	str	r3, [r7, #20]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2200      	movs	r2, #0
 800bd46:	6939      	ldr	r1, [r7, #16]
 800bd48:	6978      	ldr	r0, [r7, #20]
 800bd4a:	f7ff fee7 	bl	800bb1c <xQueueGenericCreateStatic>
 800bd4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff ffb8 	bl	800bcc6 <prvInitialiseMutex>

		return xNewQueue;
 800bd56:	68fb      	ldr	r3, [r7, #12]
	}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bd60:	b590      	push	{r4, r7, lr}
 800bd62:	b087      	sub	sp, #28
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	60fb      	str	r3, [r7, #12]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	689c      	ldr	r4, [r3, #8]
 800bd8c:	f001 fd7c 	bl	800d888 <xTaskGetCurrentTaskHandle>
 800bd90:	4603      	mov	r3, r0
 800bd92:	429c      	cmp	r4, r3
 800bd94:	d111      	bne.n	800bdba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	1e5a      	subs	r2, r3, #1
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d105      	bne.n	800bdb4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2100      	movs	r1, #0
 800bdae:	6938      	ldr	r0, [r7, #16]
 800bdb0:	f000 f8aa 	bl	800bf08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	e001      	b.n	800bdbe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bdbe:	697b      	ldr	r3, [r7, #20]
	}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	371c      	adds	r7, #28
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd90      	pop	{r4, r7, pc}

0800bdc8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bdc8:	b590      	push	{r4, r7, lr}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60fb      	str	r3, [r7, #12]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	689c      	ldr	r4, [r3, #8]
 800bdf6:	f001 fd47 	bl	800d888 <xTaskGetCurrentTaskHandle>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	d107      	bne.n	800be10 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800be0a:	2301      	movs	r3, #1
 800be0c:	617b      	str	r3, [r7, #20]
 800be0e:	e00c      	b.n	800be2a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6938      	ldr	r0, [r7, #16]
 800be14:	f000 fb7e 	bl	800c514 <xQueueSemaphoreTake>
 800be18:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800be2a:	697b      	ldr	r3, [r7, #20]
	}
 800be2c:	4618      	mov	r0, r3
 800be2e:	371c      	adds	r7, #28
 800be30:	46bd      	mov	sp, r7
 800be32:	bd90      	pop	{r4, r7, pc}

0800be34 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800be34:	b580      	push	{r7, lr}
 800be36:	b08a      	sub	sp, #40	; 0x28
 800be38:	af02      	add	r7, sp, #8
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	61bb      	str	r3, [r7, #24]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	429a      	cmp	r2, r3
 800be62:	d90a      	bls.n	800be7a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	617b      	str	r3, [r7, #20]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be7a:	2302      	movs	r3, #2
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	2100      	movs	r1, #0
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f7ff fe49 	bl	800bb1c <xQueueGenericCreateStatic>
 800be8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800be98:	69fb      	ldr	r3, [r7, #28]
	}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3720      	adds	r7, #32
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b086      	sub	sp, #24
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	613b      	str	r3, [r7, #16]
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	429a      	cmp	r2, r3
 800bece:	d90a      	bls.n	800bee6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	60fb      	str	r3, [r7, #12]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bee6:	2202      	movs	r2, #2
 800bee8:	2100      	movs	r1, #0
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff fe8e 	bl	800bc0c <xQueueGenericCreate>
 800bef0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800befe:	697b      	ldr	r3, [r7, #20]
	}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3718      	adds	r7, #24
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08e      	sub	sp, #56	; 0x38
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf16:	2300      	movs	r3, #0
 800bf18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10a      	bne.n	800bf3a <xQueueGenericSend+0x32>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf36:	bf00      	nop
 800bf38:	e7fe      	b.n	800bf38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d103      	bne.n	800bf48 <xQueueGenericSend+0x40>
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <xQueueGenericSend+0x44>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e000      	b.n	800bf4e <xQueueGenericSend+0x46>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10a      	bne.n	800bf68 <xQueueGenericSend+0x60>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf64:	bf00      	nop
 800bf66:	e7fe      	b.n	800bf66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d103      	bne.n	800bf76 <xQueueGenericSend+0x6e>
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d101      	bne.n	800bf7a <xQueueGenericSend+0x72>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <xQueueGenericSend+0x74>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10a      	bne.n	800bf96 <xQueueGenericSend+0x8e>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	623b      	str	r3, [r7, #32]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf96:	f001 fc87 	bl	800d8a8 <xTaskGetSchedulerState>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d102      	bne.n	800bfa6 <xQueueGenericSend+0x9e>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <xQueueGenericSend+0xa2>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <xQueueGenericSend+0xa4>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	61fb      	str	r3, [r7, #28]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfc6:	f002 fac5 	bl	800e554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d302      	bcc.n	800bfdc <xQueueGenericSend+0xd4>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d129      	bne.n	800c030 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe2:	f000 fc5e 	bl	800c8a2 <prvCopyDataToQueue>
 800bfe6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d010      	beq.n	800c012 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	3324      	adds	r3, #36	; 0x24
 800bff4:	4618      	mov	r0, r3
 800bff6:	f001 fa85 	bl	800d504 <xTaskRemoveFromEventList>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d013      	beq.n	800c028 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c000:	4b3f      	ldr	r3, [pc, #252]	; (800c100 <xQueueGenericSend+0x1f8>)
 800c002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	e00a      	b.n	800c028 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d007      	beq.n	800c028 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c018:	4b39      	ldr	r3, [pc, #228]	; (800c100 <xQueueGenericSend+0x1f8>)
 800c01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c028:	f002 fac4 	bl	800e5b4 <vPortExitCritical>
				return pdPASS;
 800c02c:	2301      	movs	r3, #1
 800c02e:	e063      	b.n	800c0f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d103      	bne.n	800c03e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c036:	f002 fabd 	bl	800e5b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e05c      	b.n	800c0f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c044:	f107 0314 	add.w	r3, r7, #20
 800c048:	4618      	mov	r0, r3
 800c04a:	f001 fabf 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c04e:	2301      	movs	r3, #1
 800c050:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c052:	f002 faaf 	bl	800e5b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c056:	f001 f819 	bl	800d08c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c05a:	f002 fa7b 	bl	800e554 <vPortEnterCritical>
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c064:	b25b      	sxtb	r3, r3
 800c066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06a:	d103      	bne.n	800c074 <xQueueGenericSend+0x16c>
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c07a:	b25b      	sxtb	r3, r3
 800c07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c080:	d103      	bne.n	800c08a <xQueueGenericSend+0x182>
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	2200      	movs	r2, #0
 800c086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c08a:	f002 fa93 	bl	800e5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c08e:	1d3a      	adds	r2, r7, #4
 800c090:	f107 0314 	add.w	r3, r7, #20
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f001 faae 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d124      	bne.n	800c0ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0a4:	f000 fcf5 	bl	800ca92 <prvIsQueueFull>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d018      	beq.n	800c0e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	3310      	adds	r3, #16
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f001 f9d4 	bl	800d464 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0be:	f000 fc80 	bl	800c9c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0c2:	f000 fff1 	bl	800d0a8 <xTaskResumeAll>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f47f af7c 	bne.w	800bfc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0ce:	4b0c      	ldr	r3, [pc, #48]	; (800c100 <xQueueGenericSend+0x1f8>)
 800c0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	e772      	b.n	800bfc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0e2:	f000 fc6e 	bl	800c9c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0e6:	f000 ffdf 	bl	800d0a8 <xTaskResumeAll>
 800c0ea:	e76c      	b.n	800bfc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ee:	f000 fc68 	bl	800c9c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0f2:	f000 ffd9 	bl	800d0a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3738      	adds	r7, #56	; 0x38
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	e000ed04 	.word	0xe000ed04

0800c104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b090      	sub	sp, #64	; 0x40
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10a      	bne.n	800c132 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c12e:	bf00      	nop
 800c130:	e7fe      	b.n	800c130 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d103      	bne.n	800c140 <xQueueGenericSendFromISR+0x3c>
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d101      	bne.n	800c144 <xQueueGenericSendFromISR+0x40>
 800c140:	2301      	movs	r3, #1
 800c142:	e000      	b.n	800c146 <xQueueGenericSendFromISR+0x42>
 800c144:	2300      	movs	r3, #0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c15c:	bf00      	nop
 800c15e:	e7fe      	b.n	800c15e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b02      	cmp	r3, #2
 800c164:	d103      	bne.n	800c16e <xQueueGenericSendFromISR+0x6a>
 800c166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d101      	bne.n	800c172 <xQueueGenericSendFromISR+0x6e>
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <xQueueGenericSendFromISR+0x70>
 800c172:	2300      	movs	r3, #0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10a      	bne.n	800c18e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	623b      	str	r3, [r7, #32]
}
 800c18a:	bf00      	nop
 800c18c:	e7fe      	b.n	800c18c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c18e:	f002 fac3 	bl	800e718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c192:	f3ef 8211 	mrs	r2, BASEPRI
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	61fa      	str	r2, [r7, #28]
 800c1a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d302      	bcc.n	800c1c0 <xQueueGenericSendFromISR+0xbc>
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d12f      	bne.n	800c220 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1d6:	f000 fb64 	bl	800c8a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e2:	d112      	bne.n	800c20a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d016      	beq.n	800c21a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	3324      	adds	r3, #36	; 0x24
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f001 f987 	bl	800d504 <xTaskRemoveFromEventList>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00e      	beq.n	800c21a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00b      	beq.n	800c21a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	e007      	b.n	800c21a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c20a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c20e:	3301      	adds	r3, #1
 800c210:	b2db      	uxtb	r3, r3
 800c212:	b25a      	sxtb	r2, r3
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c21a:	2301      	movs	r3, #1
 800c21c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c21e:	e001      	b.n	800c224 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c220:	2300      	movs	r3, #0
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c226:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c22e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c232:	4618      	mov	r0, r3
 800c234:	3740      	adds	r7, #64	; 0x40
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b08e      	sub	sp, #56	; 0x38
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10a      	bne.n	800c264 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	623b      	str	r3, [r7, #32]
}
 800c260:	bf00      	nop
 800c262:	e7fe      	b.n	800c262 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00a      	beq.n	800c282 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	61fb      	str	r3, [r7, #28]
}
 800c27e:	bf00      	nop
 800c280:	e7fe      	b.n	800c280 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <xQueueGiveFromISR+0x58>
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <xQueueGiveFromISR+0x5c>
 800c292:	2301      	movs	r3, #1
 800c294:	e000      	b.n	800c298 <xQueueGiveFromISR+0x5e>
 800c296:	2300      	movs	r3, #0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10a      	bne.n	800c2b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	61bb      	str	r3, [r7, #24]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2b2:	f002 fa31 	bl	800e718 <vPortValidateInterruptPriority>
	__asm volatile
 800c2b6:	f3ef 8211 	mrs	r2, BASEPRI
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	617a      	str	r2, [r7, #20]
 800c2cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d22b      	bcs.n	800c33a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fc:	d112      	bne.n	800c324 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d016      	beq.n	800c334 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	3324      	adds	r3, #36	; 0x24
 800c30a:	4618      	mov	r0, r3
 800c30c:	f001 f8fa 	bl	800d504 <xTaskRemoveFromEventList>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00e      	beq.n	800c334 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00b      	beq.n	800c334 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2201      	movs	r2, #1
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	e007      	b.n	800c334 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c328:	3301      	adds	r3, #1
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	b25a      	sxtb	r2, r3
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c334:	2301      	movs	r3, #1
 800c336:	637b      	str	r3, [r7, #52]	; 0x34
 800c338:	e001      	b.n	800c33e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c33a:	2300      	movs	r3, #0
 800c33c:	637b      	str	r3, [r7, #52]	; 0x34
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f383 8811 	msr	BASEPRI, r3
}
 800c348:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3738      	adds	r7, #56	; 0x38
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08c      	sub	sp, #48	; 0x30
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c360:	2300      	movs	r3, #0
 800c362:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10a      	bne.n	800c384 <xQueueReceive+0x30>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	623b      	str	r3, [r7, #32]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d103      	bne.n	800c392 <xQueueReceive+0x3e>
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <xQueueReceive+0x42>
 800c392:	2301      	movs	r3, #1
 800c394:	e000      	b.n	800c398 <xQueueReceive+0x44>
 800c396:	2300      	movs	r3, #0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xQueueReceive+0x5e>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	61fb      	str	r3, [r7, #28]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3b2:	f001 fa79 	bl	800d8a8 <xTaskGetSchedulerState>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <xQueueReceive+0x6e>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <xQueueReceive+0x72>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e000      	b.n	800c3c8 <xQueueReceive+0x74>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10a      	bne.n	800c3e2 <xQueueReceive+0x8e>
	__asm volatile
 800c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	61bb      	str	r3, [r7, #24]
}
 800c3de:	bf00      	nop
 800c3e0:	e7fe      	b.n	800c3e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3e2:	f002 f8b7 	bl	800e554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d01f      	beq.n	800c432 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3f2:	68b9      	ldr	r1, [r7, #8]
 800c3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f6:	f000 fabe 	bl	800c976 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	1e5a      	subs	r2, r3, #1
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00f      	beq.n	800c42a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	3310      	adds	r3, #16
 800c40e:	4618      	mov	r0, r3
 800c410:	f001 f878 	bl	800d504 <xTaskRemoveFromEventList>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d007      	beq.n	800c42a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c41a:	4b3d      	ldr	r3, [pc, #244]	; (800c510 <xQueueReceive+0x1bc>)
 800c41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c42a:	f002 f8c3 	bl	800e5b4 <vPortExitCritical>
				return pdPASS;
 800c42e:	2301      	movs	r3, #1
 800c430:	e069      	b.n	800c506 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d103      	bne.n	800c440 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c438:	f002 f8bc 	bl	800e5b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e062      	b.n	800c506 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	2b00      	cmp	r3, #0
 800c444:	d106      	bne.n	800c454 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c446:	f107 0310 	add.w	r3, r7, #16
 800c44a:	4618      	mov	r0, r3
 800c44c:	f001 f8be 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c450:	2301      	movs	r3, #1
 800c452:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c454:	f002 f8ae 	bl	800e5b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c458:	f000 fe18 	bl	800d08c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c45c:	f002 f87a 	bl	800e554 <vPortEnterCritical>
 800c460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c466:	b25b      	sxtb	r3, r3
 800c468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46c:	d103      	bne.n	800c476 <xQueueReceive+0x122>
 800c46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c47c:	b25b      	sxtb	r3, r3
 800c47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c482:	d103      	bne.n	800c48c <xQueueReceive+0x138>
 800c484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c48c:	f002 f892 	bl	800e5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c490:	1d3a      	adds	r2, r7, #4
 800c492:	f107 0310 	add.w	r3, r7, #16
 800c496:	4611      	mov	r1, r2
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 f8ad 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d123      	bne.n	800c4ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4a6:	f000 fade 	bl	800ca66 <prvIsQueueEmpty>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d017      	beq.n	800c4e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	3324      	adds	r3, #36	; 0x24
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 ffd3 	bl	800d464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4c0:	f000 fa7f 	bl	800c9c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4c4:	f000 fdf0 	bl	800d0a8 <xTaskResumeAll>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d189      	bne.n	800c3e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4ce:	4b10      	ldr	r3, [pc, #64]	; (800c510 <xQueueReceive+0x1bc>)
 800c4d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	e780      	b.n	800c3e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e2:	f000 fa6e 	bl	800c9c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4e6:	f000 fddf 	bl	800d0a8 <xTaskResumeAll>
 800c4ea:	e77a      	b.n	800c3e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ee:	f000 fa68 	bl	800c9c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4f2:	f000 fdd9 	bl	800d0a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f8:	f000 fab5 	bl	800ca66 <prvIsQueueEmpty>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f43f af6f 	beq.w	800c3e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c506:	4618      	mov	r0, r3
 800c508:	3730      	adds	r7, #48	; 0x30
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08e      	sub	sp, #56	; 0x38
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c51e:	2300      	movs	r3, #0
 800c520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c526:	2300      	movs	r3, #0
 800c528:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10a      	bne.n	800c546 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	623b      	str	r3, [r7, #32]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00a      	beq.n	800c564 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	61fb      	str	r3, [r7, #28]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c564:	f001 f9a0 	bl	800d8a8 <xTaskGetSchedulerState>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d102      	bne.n	800c574 <xQueueSemaphoreTake+0x60>
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <xQueueSemaphoreTake+0x64>
 800c574:	2301      	movs	r3, #1
 800c576:	e000      	b.n	800c57a <xQueueSemaphoreTake+0x66>
 800c578:	2300      	movs	r3, #0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	61bb      	str	r3, [r7, #24]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c594:	f001 ffde 	bl	800e554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d024      	beq.n	800c5ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	1e5a      	subs	r2, r3, #1
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d104      	bne.n	800c5be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c5b4:	f001 faee 	bl	800db94 <pvTaskIncrementMutexHeldCount>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00f      	beq.n	800c5e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	3310      	adds	r3, #16
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f000 ff9a 	bl	800d504 <xTaskRemoveFromEventList>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d007      	beq.n	800c5e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5d6:	4b54      	ldr	r3, [pc, #336]	; (800c728 <xQueueSemaphoreTake+0x214>)
 800c5d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5e6:	f001 ffe5 	bl	800e5b4 <vPortExitCritical>
				return pdPASS;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e097      	b.n	800c71e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d111      	bne.n	800c618 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	617b      	str	r3, [r7, #20]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c610:	f001 ffd0 	bl	800e5b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c614:	2300      	movs	r3, #0
 800c616:	e082      	b.n	800c71e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c61e:	f107 030c 	add.w	r3, r7, #12
 800c622:	4618      	mov	r0, r3
 800c624:	f000 ffd2 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c628:	2301      	movs	r3, #1
 800c62a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c62c:	f001 ffc2 	bl	800e5b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c630:	f000 fd2c 	bl	800d08c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c634:	f001 ff8e 	bl	800e554 <vPortEnterCritical>
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c63e:	b25b      	sxtb	r3, r3
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d103      	bne.n	800c64e <xQueueSemaphoreTake+0x13a>
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c654:	b25b      	sxtb	r3, r3
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d103      	bne.n	800c664 <xQueueSemaphoreTake+0x150>
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c664:	f001 ffa6 	bl	800e5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c668:	463a      	mov	r2, r7
 800c66a:	f107 030c 	add.w	r3, r7, #12
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f000 ffc1 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d132      	bne.n	800c6e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c67c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c67e:	f000 f9f2 	bl	800ca66 <prvIsQueueEmpty>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d026      	beq.n	800c6d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d109      	bne.n	800c6a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c690:	f001 ff60 	bl	800e554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	4618      	mov	r0, r3
 800c69a:	f001 f923 	bl	800d8e4 <xTaskPriorityInherit>
 800c69e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c6a0:	f001 ff88 	bl	800e5b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	3324      	adds	r3, #36	; 0x24
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 fed9 	bl	800d464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6b4:	f000 f985 	bl	800c9c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6b8:	f000 fcf6 	bl	800d0a8 <xTaskResumeAll>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f47f af68 	bne.w	800c594 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c6c4:	4b18      	ldr	r3, [pc, #96]	; (800c728 <xQueueSemaphoreTake+0x214>)
 800c6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ca:	601a      	str	r2, [r3, #0]
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	e75e      	b.n	800c594 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6d8:	f000 f973 	bl	800c9c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6dc:	f000 fce4 	bl	800d0a8 <xTaskResumeAll>
 800c6e0:	e758      	b.n	800c594 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6e4:	f000 f96d 	bl	800c9c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6e8:	f000 fcde 	bl	800d0a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ee:	f000 f9ba 	bl	800ca66 <prvIsQueueEmpty>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f43f af4d 	beq.w	800c594 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00d      	beq.n	800c71c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c700:	f001 ff28 	bl	800e554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c706:	f000 f8b4 	bl	800c872 <prvGetDisinheritPriorityAfterTimeout>
 800c70a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c712:	4618      	mov	r0, r3
 800c714:	f001 f9bc 	bl	800da90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c718:	f001 ff4c 	bl	800e5b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c71c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3738      	adds	r7, #56	; 0x38
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	e000ed04 	.word	0xe000ed04

0800c72c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08e      	sub	sp, #56	; 0x38
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10a      	bne.n	800c758 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	623b      	str	r3, [r7, #32]
}
 800c754:	bf00      	nop
 800c756:	e7fe      	b.n	800c756 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d103      	bne.n	800c766 <xQueueReceiveFromISR+0x3a>
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <xQueueReceiveFromISR+0x3e>
 800c766:	2301      	movs	r3, #1
 800c768:	e000      	b.n	800c76c <xQueueReceiveFromISR+0x40>
 800c76a:	2300      	movs	r3, #0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10a      	bne.n	800c786 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	61fb      	str	r3, [r7, #28]
}
 800c782:	bf00      	nop
 800c784:	e7fe      	b.n	800c784 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c786:	f001 ffc7 	bl	800e718 <vPortValidateInterruptPriority>
	__asm volatile
 800c78a:	f3ef 8211 	mrs	r2, BASEPRI
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	61ba      	str	r2, [r7, #24]
 800c7a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c7a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d02f      	beq.n	800c812 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7bc:	68b9      	ldr	r1, [r7, #8]
 800c7be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7c0:	f000 f8d9 	bl	800c976 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	1e5a      	subs	r2, r3, #1
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d4:	d112      	bne.n	800c7fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d016      	beq.n	800c80c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	3310      	adds	r3, #16
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fe8e 	bl	800d504 <xTaskRemoveFromEventList>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00e      	beq.n	800c80c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00b      	beq.n	800c80c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	e007      	b.n	800c80c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c800:	3301      	adds	r3, #1
 800c802:	b2db      	uxtb	r3, r3
 800c804:	b25a      	sxtb	r2, r3
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c80c:	2301      	movs	r3, #1
 800c80e:	637b      	str	r3, [r7, #52]	; 0x34
 800c810:	e001      	b.n	800c816 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c812:	2300      	movs	r3, #0
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f383 8811 	msr	BASEPRI, r3
}
 800c820:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c824:	4618      	mov	r0, r3
 800c826:	3738      	adds	r7, #56	; 0x38
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <vQueueDelete+0x28>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	60bb      	str	r3, [r7, #8]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 f95f 	bl	800cb18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c860:	2b00      	cmp	r3, #0
 800c862:	d102      	bne.n	800c86a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f002 f863 	bl	800e930 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c86a:	bf00      	nop
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c872:	b480      	push	{r7}
 800c874:	b085      	sub	sp, #20
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d006      	beq.n	800c890 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c88c:	60fb      	str	r3, [r7, #12]
 800c88e:	e001      	b.n	800c894 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c890:	2300      	movs	r3, #0
 800c892:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c894:	68fb      	ldr	r3, [r7, #12]
	}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b086      	sub	sp, #24
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10d      	bne.n	800c8dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d14d      	bne.n	800c964 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f001 f871 	bl	800d9b4 <xTaskPriorityDisinherit>
 800c8d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	609a      	str	r2, [r3, #8]
 800c8da:	e043      	b.n	800c964 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d119      	bne.n	800c916 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6858      	ldr	r0, [r3, #4]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	f00c fefe 	bl	80196ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fa:	441a      	add	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d32b      	bcc.n	800c964 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	605a      	str	r2, [r3, #4]
 800c914:	e026      	b.n	800c964 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68d8      	ldr	r0, [r3, #12]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91e:	461a      	mov	r2, r3
 800c920:	68b9      	ldr	r1, [r7, #8]
 800c922:	f00c fee4 	bl	80196ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	68da      	ldr	r2, [r3, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	425b      	negs	r3, r3
 800c930:	441a      	add	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d207      	bcs.n	800c952 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	689a      	ldr	r2, [r3, #8]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	425b      	negs	r3, r3
 800c94c:	441a      	add	r2, r3
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b02      	cmp	r3, #2
 800c956:	d105      	bne.n	800c964 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d002      	beq.n	800c964 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	3b01      	subs	r3, #1
 800c962:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c96c:	697b      	ldr	r3, [r7, #20]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c984:	2b00      	cmp	r3, #0
 800c986:	d018      	beq.n	800c9ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	68da      	ldr	r2, [r3, #12]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c990:	441a      	add	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d303      	bcc.n	800c9aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68d9      	ldr	r1, [r3, #12]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	6838      	ldr	r0, [r7, #0]
 800c9b6:	f00c fe9a 	bl	80196ee <memcpy>
	}
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9ca:	f001 fdc3 	bl	800e554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9d6:	e011      	b.n	800c9fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d012      	beq.n	800ca06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	3324      	adds	r3, #36	; 0x24
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fd8d 	bl	800d504 <xTaskRemoveFromEventList>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9f0:	f000 fe64 	bl	800d6bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	dce9      	bgt.n	800c9d8 <prvUnlockQueue+0x16>
 800ca04:	e000      	b.n	800ca08 <prvUnlockQueue+0x46>
					break;
 800ca06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	22ff      	movs	r2, #255	; 0xff
 800ca0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca10:	f001 fdd0 	bl	800e5b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca14:	f001 fd9e 	bl	800e554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca20:	e011      	b.n	800ca46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d012      	beq.n	800ca50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3310      	adds	r3, #16
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fd68 	bl	800d504 <xTaskRemoveFromEventList>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca3a:	f000 fe3f 	bl	800d6bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dce9      	bgt.n	800ca22 <prvUnlockQueue+0x60>
 800ca4e:	e000      	b.n	800ca52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	22ff      	movs	r2, #255	; 0xff
 800ca56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca5a:	f001 fdab 	bl	800e5b4 <vPortExitCritical>
}
 800ca5e:	bf00      	nop
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca6e:	f001 fd71 	bl	800e554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	e001      	b.n	800ca84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca80:	2300      	movs	r3, #0
 800ca82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca84:	f001 fd96 	bl	800e5b4 <vPortExitCritical>

	return xReturn;
 800ca88:	68fb      	ldr	r3, [r7, #12]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca9a:	f001 fd5b 	bl	800e554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d102      	bne.n	800cab0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800caaa:	2301      	movs	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	e001      	b.n	800cab4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cab0:	2300      	movs	r3, #0
 800cab2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cab4:	f001 fd7e 	bl	800e5b4 <vPortExitCritical>

	return xReturn;
 800cab8:	68fb      	ldr	r3, [r7, #12]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cace:	2300      	movs	r3, #0
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	e014      	b.n	800cafe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cad4:	4a0f      	ldr	r2, [pc, #60]	; (800cb14 <vQueueAddToRegistry+0x50>)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10b      	bne.n	800caf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cae0:	490c      	ldr	r1, [pc, #48]	; (800cb14 <vQueueAddToRegistry+0x50>)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800caea:	4a0a      	ldr	r2, [pc, #40]	; (800cb14 <vQueueAddToRegistry+0x50>)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	4413      	add	r3, r2
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800caf6:	e006      	b.n	800cb06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3301      	adds	r3, #1
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b07      	cmp	r3, #7
 800cb02:	d9e7      	bls.n	800cad4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	200060a0 	.word	0x200060a0

0800cb18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb20:	2300      	movs	r3, #0
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	e016      	b.n	800cb54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb26:	4a10      	ldr	r2, [pc, #64]	; (800cb68 <vQueueUnregisterQueue+0x50>)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	4413      	add	r3, r2
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d10b      	bne.n	800cb4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb36:	4a0c      	ldr	r2, [pc, #48]	; (800cb68 <vQueueUnregisterQueue+0x50>)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb40:	4a09      	ldr	r2, [pc, #36]	; (800cb68 <vQueueUnregisterQueue+0x50>)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	00db      	lsls	r3, r3, #3
 800cb46:	4413      	add	r3, r2
 800cb48:	2200      	movs	r2, #0
 800cb4a:	605a      	str	r2, [r3, #4]
				break;
 800cb4c:	e006      	b.n	800cb5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3301      	adds	r3, #1
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b07      	cmp	r3, #7
 800cb58:	d9e5      	bls.n	800cb26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb5a:	bf00      	nop
 800cb5c:	bf00      	nop
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	200060a0 	.word	0x200060a0

0800cb6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb7c:	f001 fcea 	bl	800e554 <vPortEnterCritical>
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb86:	b25b      	sxtb	r3, r3
 800cb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8c:	d103      	bne.n	800cb96 <vQueueWaitForMessageRestricted+0x2a>
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb9c:	b25b      	sxtb	r3, r3
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba2:	d103      	bne.n	800cbac <vQueueWaitForMessageRestricted+0x40>
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbac:	f001 fd02 	bl	800e5b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d106      	bne.n	800cbc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	3324      	adds	r3, #36	; 0x24
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	68b9      	ldr	r1, [r7, #8]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fc73 	bl	800d4ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbc6:	6978      	ldr	r0, [r7, #20]
 800cbc8:	f7ff fefb 	bl	800c9c2 <prvUnlockQueue>
	}
 800cbcc:	bf00      	nop
 800cbce:	3718      	adds	r7, #24
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08e      	sub	sp, #56	; 0x38
 800cbd8:	af04      	add	r7, sp, #16
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10a      	bne.n	800cbfe <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	623b      	str	r3, [r7, #32]
}
 800cbfa:	bf00      	nop
 800cbfc:	e7fe      	b.n	800cbfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10a      	bne.n	800cc1a <xTaskCreateStatic+0x46>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	61fb      	str	r3, [r7, #28]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc1a:	23bc      	movs	r3, #188	; 0xbc
 800cc1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	2bbc      	cmp	r3, #188	; 0xbc
 800cc22:	d00a      	beq.n	800cc3a <xTaskCreateStatic+0x66>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	61bb      	str	r3, [r7, #24]
}
 800cc36:	bf00      	nop
 800cc38:	e7fe      	b.n	800cc38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d01e      	beq.n	800cc80 <xTaskCreateStatic+0xac>
 800cc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d01b      	beq.n	800cc80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	2202      	movs	r2, #2
 800cc56:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	9303      	str	r3, [sp, #12]
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	9302      	str	r3, [sp, #8]
 800cc62:	f107 0314 	add.w	r3, r7, #20
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	68b9      	ldr	r1, [r7, #8]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f000 f850 	bl	800cd18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc7a:	f000 f8f3 	bl	800ce64 <prvAddNewTaskToReadyList>
 800cc7e:	e001      	b.n	800cc84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc80:	2300      	movs	r3, #0
 800cc82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc84:	697b      	ldr	r3, [r7, #20]
	}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3728      	adds	r7, #40	; 0x28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b08c      	sub	sp, #48	; 0x30
 800cc92:	af04      	add	r7, sp, #16
 800cc94:	60f8      	str	r0, [r7, #12]
 800cc96:	60b9      	str	r1, [r7, #8]
 800cc98:	603b      	str	r3, [r7, #0]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc9e:	88fb      	ldrh	r3, [r7, #6]
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4618      	mov	r0, r3
 800cca4:	f001 fd78 	bl	800e798 <pvPortMalloc>
 800cca8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00e      	beq.n	800ccce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ccb0:	20bc      	movs	r0, #188	; 0xbc
 800ccb2:	f001 fd71 	bl	800e798 <pvPortMalloc>
 800ccb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d003      	beq.n	800ccc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	631a      	str	r2, [r3, #48]	; 0x30
 800ccc4:	e005      	b.n	800ccd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccc6:	6978      	ldr	r0, [r7, #20]
 800ccc8:	f001 fe32 	bl	800e930 <vPortFree>
 800cccc:	e001      	b.n	800ccd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d017      	beq.n	800cd08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cce0:	88fa      	ldrh	r2, [r7, #6]
 800cce2:	2300      	movs	r3, #0
 800cce4:	9303      	str	r3, [sp, #12]
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	9302      	str	r3, [sp, #8]
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	68b9      	ldr	r1, [r7, #8]
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f000 f80e 	bl	800cd18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccfc:	69f8      	ldr	r0, [r7, #28]
 800ccfe:	f000 f8b1 	bl	800ce64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd02:	2301      	movs	r3, #1
 800cd04:	61bb      	str	r3, [r7, #24]
 800cd06:	e002      	b.n	800cd0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd08:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd0e:	69bb      	ldr	r3, [r7, #24]
	}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3720      	adds	r7, #32
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	461a      	mov	r2, r3
 800cd30:	21a5      	movs	r1, #165	; 0xa5
 800cd32:	f00c fd04 	bl	801973e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd40:	3b01      	subs	r3, #1
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	f023 0307 	bic.w	r3, r3, #7
 800cd4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00a      	beq.n	800cd70 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	617b      	str	r3, [r7, #20]
}
 800cd6c:	bf00      	nop
 800cd6e:	e7fe      	b.n	800cd6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d01f      	beq.n	800cdb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd76:	2300      	movs	r3, #0
 800cd78:	61fb      	str	r3, [r7, #28]
 800cd7a:	e012      	b.n	800cda2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd7c:	68ba      	ldr	r2, [r7, #8]
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	4413      	add	r3, r2
 800cd82:	7819      	ldrb	r1, [r3, #0]
 800cd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	4413      	add	r3, r2
 800cd8a:	3334      	adds	r3, #52	; 0x34
 800cd8c:	460a      	mov	r2, r1
 800cd8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	4413      	add	r3, r2
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d006      	beq.n	800cdaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	2b0f      	cmp	r3, #15
 800cda6:	d9e9      	bls.n	800cd7c <prvInitialiseNewTask+0x64>
 800cda8:	e000      	b.n	800cdac <prvInitialiseNewTask+0x94>
			{
				break;
 800cdaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cdb4:	e003      	b.n	800cdbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	2b37      	cmp	r3, #55	; 0x37
 800cdc2:	d901      	bls.n	800cdc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdc4:	2337      	movs	r3, #55	; 0x37
 800cdc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	3304      	adds	r3, #4
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe fda0 	bl	800b924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	3318      	adds	r3, #24
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fe fd9b 	bl	800b924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce16:	3354      	adds	r3, #84	; 0x54
 800ce18:	2260      	movs	r2, #96	; 0x60
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f00c fc8e 	bl	801973e <memset>
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	4a0c      	ldr	r2, [pc, #48]	; (800ce58 <prvInitialiseNewTask+0x140>)
 800ce26:	659a      	str	r2, [r3, #88]	; 0x58
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	4a0c      	ldr	r2, [pc, #48]	; (800ce5c <prvInitialiseNewTask+0x144>)
 800ce2c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	4a0b      	ldr	r2, [pc, #44]	; (800ce60 <prvInitialiseNewTask+0x148>)
 800ce32:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	68f9      	ldr	r1, [r7, #12]
 800ce38:	69b8      	ldr	r0, [r7, #24]
 800ce3a:	f001 fa61 	bl	800e300 <pxPortInitialiseStack>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d002      	beq.n	800ce50 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce50:	bf00      	nop
 800ce52:	3720      	adds	r7, #32
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	0801dbdc 	.word	0x0801dbdc
 800ce5c:	0801dbfc 	.word	0x0801dbfc
 800ce60:	0801dbbc 	.word	0x0801dbbc

0800ce64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce6c:	f001 fb72 	bl	800e554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce70:	4b2d      	ldr	r3, [pc, #180]	; (800cf28 <prvAddNewTaskToReadyList+0xc4>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3301      	adds	r3, #1
 800ce76:	4a2c      	ldr	r2, [pc, #176]	; (800cf28 <prvAddNewTaskToReadyList+0xc4>)
 800ce78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce7a:	4b2c      	ldr	r3, [pc, #176]	; (800cf2c <prvAddNewTaskToReadyList+0xc8>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d109      	bne.n	800ce96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce82:	4a2a      	ldr	r2, [pc, #168]	; (800cf2c <prvAddNewTaskToReadyList+0xc8>)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce88:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <prvAddNewTaskToReadyList+0xc4>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d110      	bne.n	800ceb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce90:	f000 fc38 	bl	800d704 <prvInitialiseTaskLists>
 800ce94:	e00d      	b.n	800ceb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce96:	4b26      	ldr	r3, [pc, #152]	; (800cf30 <prvAddNewTaskToReadyList+0xcc>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d109      	bne.n	800ceb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce9e:	4b23      	ldr	r3, [pc, #140]	; (800cf2c <prvAddNewTaskToReadyList+0xc8>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d802      	bhi.n	800ceb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ceac:	4a1f      	ldr	r2, [pc, #124]	; (800cf2c <prvAddNewTaskToReadyList+0xc8>)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ceb2:	4b20      	ldr	r3, [pc, #128]	; (800cf34 <prvAddNewTaskToReadyList+0xd0>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	4a1e      	ldr	r2, [pc, #120]	; (800cf34 <prvAddNewTaskToReadyList+0xd0>)
 800ceba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cebc:	4b1d      	ldr	r3, [pc, #116]	; (800cf34 <prvAddNewTaskToReadyList+0xd0>)
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec8:	4b1b      	ldr	r3, [pc, #108]	; (800cf38 <prvAddNewTaskToReadyList+0xd4>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d903      	bls.n	800ced8 <prvAddNewTaskToReadyList+0x74>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	4a18      	ldr	r2, [pc, #96]	; (800cf38 <prvAddNewTaskToReadyList+0xd4>)
 800ced6:	6013      	str	r3, [r2, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cedc:	4613      	mov	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	4a15      	ldr	r2, [pc, #84]	; (800cf3c <prvAddNewTaskToReadyList+0xd8>)
 800cee6:	441a      	add	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4619      	mov	r1, r3
 800ceee:	4610      	mov	r0, r2
 800cef0:	f7fe fd25 	bl	800b93e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cef4:	f001 fb5e 	bl	800e5b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cef8:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <prvAddNewTaskToReadyList+0xcc>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00e      	beq.n	800cf1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf00:	4b0a      	ldr	r3, [pc, #40]	; (800cf2c <prvAddNewTaskToReadyList+0xc8>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d207      	bcs.n	800cf1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf0e:	4b0c      	ldr	r3, [pc, #48]	; (800cf40 <prvAddNewTaskToReadyList+0xdc>)
 800cf10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	200065b4 	.word	0x200065b4
 800cf2c:	200060e0 	.word	0x200060e0
 800cf30:	200065c0 	.word	0x200065c0
 800cf34:	200065d0 	.word	0x200065d0
 800cf38:	200065bc 	.word	0x200065bc
 800cf3c:	200060e4 	.word	0x200060e4
 800cf40:	e000ed04 	.word	0xe000ed04

0800cf44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d017      	beq.n	800cf86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf56:	4b13      	ldr	r3, [pc, #76]	; (800cfa4 <vTaskDelay+0x60>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00a      	beq.n	800cf74 <vTaskDelay+0x30>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	60bb      	str	r3, [r7, #8]
}
 800cf70:	bf00      	nop
 800cf72:	e7fe      	b.n	800cf72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf74:	f000 f88a 	bl	800d08c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf78:	2100      	movs	r1, #0
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fe1e 	bl	800dbbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf80:	f000 f892 	bl	800d0a8 <xTaskResumeAll>
 800cf84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d107      	bne.n	800cf9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf8c:	4b06      	ldr	r3, [pc, #24]	; (800cfa8 <vTaskDelay+0x64>)
 800cf8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf9c:	bf00      	nop
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	200065dc 	.word	0x200065dc
 800cfa8:	e000ed04 	.word	0xe000ed04

0800cfac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b08a      	sub	sp, #40	; 0x28
 800cfb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfba:	463a      	mov	r2, r7
 800cfbc:	1d39      	adds	r1, r7, #4
 800cfbe:	f107 0308 	add.w	r3, r7, #8
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fc5a 	bl	800b87c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfc8:	6839      	ldr	r1, [r7, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	9202      	str	r2, [sp, #8]
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	460a      	mov	r2, r1
 800cfda:	4924      	ldr	r1, [pc, #144]	; (800d06c <vTaskStartScheduler+0xc0>)
 800cfdc:	4824      	ldr	r0, [pc, #144]	; (800d070 <vTaskStartScheduler+0xc4>)
 800cfde:	f7ff fdf9 	bl	800cbd4 <xTaskCreateStatic>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	4a23      	ldr	r2, [pc, #140]	; (800d074 <vTaskStartScheduler+0xc8>)
 800cfe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfe8:	4b22      	ldr	r3, [pc, #136]	; (800d074 <vTaskStartScheduler+0xc8>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cff0:	2301      	movs	r3, #1
 800cff2:	617b      	str	r3, [r7, #20]
 800cff4:	e001      	b.n	800cffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cff6:	2300      	movs	r3, #0
 800cff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d102      	bne.n	800d006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d000:	f000 fe30 	bl	800dc64 <xTimerCreateTimerTask>
 800d004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d11b      	bne.n	800d044 <vTaskStartScheduler+0x98>
	__asm volatile
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	613b      	str	r3, [r7, #16]
}
 800d01e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d020:	4b15      	ldr	r3, [pc, #84]	; (800d078 <vTaskStartScheduler+0xcc>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3354      	adds	r3, #84	; 0x54
 800d026:	4a15      	ldr	r2, [pc, #84]	; (800d07c <vTaskStartScheduler+0xd0>)
 800d028:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d02a:	4b15      	ldr	r3, [pc, #84]	; (800d080 <vTaskStartScheduler+0xd4>)
 800d02c:	f04f 32ff 	mov.w	r2, #4294967295
 800d030:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d032:	4b14      	ldr	r3, [pc, #80]	; (800d084 <vTaskStartScheduler+0xd8>)
 800d034:	2201      	movs	r2, #1
 800d036:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d038:	4b13      	ldr	r3, [pc, #76]	; (800d088 <vTaskStartScheduler+0xdc>)
 800d03a:	2200      	movs	r2, #0
 800d03c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d03e:	f001 f9e7 	bl	800e410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d042:	e00e      	b.n	800d062 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04a:	d10a      	bne.n	800d062 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	60fb      	str	r3, [r7, #12]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <vTaskStartScheduler+0xb4>
}
 800d062:	bf00      	nop
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	0801ae34 	.word	0x0801ae34
 800d070:	0800d6d5 	.word	0x0800d6d5
 800d074:	200065d8 	.word	0x200065d8
 800d078:	200060e0 	.word	0x200060e0
 800d07c:	2000016c 	.word	0x2000016c
 800d080:	200065d4 	.word	0x200065d4
 800d084:	200065c0 	.word	0x200065c0
 800d088:	200065b8 	.word	0x200065b8

0800d08c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d08c:	b480      	push	{r7}
 800d08e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d090:	4b04      	ldr	r3, [pc, #16]	; (800d0a4 <vTaskSuspendAll+0x18>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3301      	adds	r3, #1
 800d096:	4a03      	ldr	r2, [pc, #12]	; (800d0a4 <vTaskSuspendAll+0x18>)
 800d098:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d09a:	bf00      	nop
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	200065dc 	.word	0x200065dc

0800d0a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0b6:	4b42      	ldr	r3, [pc, #264]	; (800d1c0 <xTaskResumeAll+0x118>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10a      	bne.n	800d0d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	603b      	str	r3, [r7, #0]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0d4:	f001 fa3e 	bl	800e554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0d8:	4b39      	ldr	r3, [pc, #228]	; (800d1c0 <xTaskResumeAll+0x118>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	4a38      	ldr	r2, [pc, #224]	; (800d1c0 <xTaskResumeAll+0x118>)
 800d0e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0e2:	4b37      	ldr	r3, [pc, #220]	; (800d1c0 <xTaskResumeAll+0x118>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d162      	bne.n	800d1b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0ea:	4b36      	ldr	r3, [pc, #216]	; (800d1c4 <xTaskResumeAll+0x11c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d05e      	beq.n	800d1b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0f2:	e02f      	b.n	800d154 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f4:	4b34      	ldr	r3, [pc, #208]	; (800d1c8 <xTaskResumeAll+0x120>)
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	3318      	adds	r3, #24
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe fc79 	bl	800b9f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3304      	adds	r3, #4
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fc74 	bl	800b9f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d114:	4b2d      	ldr	r3, [pc, #180]	; (800d1cc <xTaskResumeAll+0x124>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d903      	bls.n	800d124 <xTaskResumeAll+0x7c>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d120:	4a2a      	ldr	r2, [pc, #168]	; (800d1cc <xTaskResumeAll+0x124>)
 800d122:	6013      	str	r3, [r2, #0]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d128:	4613      	mov	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4a27      	ldr	r2, [pc, #156]	; (800d1d0 <xTaskResumeAll+0x128>)
 800d132:	441a      	add	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	3304      	adds	r3, #4
 800d138:	4619      	mov	r1, r3
 800d13a:	4610      	mov	r0, r2
 800d13c:	f7fe fbff 	bl	800b93e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d144:	4b23      	ldr	r3, [pc, #140]	; (800d1d4 <xTaskResumeAll+0x12c>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d302      	bcc.n	800d154 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d14e:	4b22      	ldr	r3, [pc, #136]	; (800d1d8 <xTaskResumeAll+0x130>)
 800d150:	2201      	movs	r2, #1
 800d152:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d154:	4b1c      	ldr	r3, [pc, #112]	; (800d1c8 <xTaskResumeAll+0x120>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1cb      	bne.n	800d0f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d001      	beq.n	800d166 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d162:	f000 fb71 	bl	800d848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d166:	4b1d      	ldr	r3, [pc, #116]	; (800d1dc <xTaskResumeAll+0x134>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d010      	beq.n	800d194 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d172:	f000 f859 	bl	800d228 <xTaskIncrementTick>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d17c:	4b16      	ldr	r3, [pc, #88]	; (800d1d8 <xTaskResumeAll+0x130>)
 800d17e:	2201      	movs	r2, #1
 800d180:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	3b01      	subs	r3, #1
 800d186:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1f1      	bne.n	800d172 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <xTaskResumeAll+0x134>)
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d194:	4b10      	ldr	r3, [pc, #64]	; (800d1d8 <xTaskResumeAll+0x130>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d009      	beq.n	800d1b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d19c:	2301      	movs	r3, #1
 800d19e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1a0:	4b0f      	ldr	r3, [pc, #60]	; (800d1e0 <xTaskResumeAll+0x138>)
 800d1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1b0:	f001 fa00 	bl	800e5b4 <vPortExitCritical>

	return xAlreadyYielded;
 800d1b4:	68bb      	ldr	r3, [r7, #8]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	200065dc 	.word	0x200065dc
 800d1c4:	200065b4 	.word	0x200065b4
 800d1c8:	20006574 	.word	0x20006574
 800d1cc:	200065bc 	.word	0x200065bc
 800d1d0:	200060e4 	.word	0x200060e4
 800d1d4:	200060e0 	.word	0x200060e0
 800d1d8:	200065c8 	.word	0x200065c8
 800d1dc:	200065c4 	.word	0x200065c4
 800d1e0:	e000ed04 	.word	0xe000ed04

0800d1e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1ea:	4b05      	ldr	r3, [pc, #20]	; (800d200 <xTaskGetTickCount+0x1c>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1f0:	687b      	ldr	r3, [r7, #4]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	200065b8 	.word	0x200065b8

0800d204 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d20a:	f001 fa85 	bl	800e718 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d20e:	2300      	movs	r3, #0
 800d210:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d212:	4b04      	ldr	r3, [pc, #16]	; (800d224 <xTaskGetTickCountFromISR+0x20>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d218:	683b      	ldr	r3, [r7, #0]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	200065b8 	.word	0x200065b8

0800d228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d232:	4b4f      	ldr	r3, [pc, #316]	; (800d370 <xTaskIncrementTick+0x148>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	f040 808f 	bne.w	800d35a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d23c:	4b4d      	ldr	r3, [pc, #308]	; (800d374 <xTaskIncrementTick+0x14c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3301      	adds	r3, #1
 800d242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d244:	4a4b      	ldr	r2, [pc, #300]	; (800d374 <xTaskIncrementTick+0x14c>)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d120      	bne.n	800d292 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d250:	4b49      	ldr	r3, [pc, #292]	; (800d378 <xTaskIncrementTick+0x150>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <xTaskIncrementTick+0x48>
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	603b      	str	r3, [r7, #0]
}
 800d26c:	bf00      	nop
 800d26e:	e7fe      	b.n	800d26e <xTaskIncrementTick+0x46>
 800d270:	4b41      	ldr	r3, [pc, #260]	; (800d378 <xTaskIncrementTick+0x150>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	4b41      	ldr	r3, [pc, #260]	; (800d37c <xTaskIncrementTick+0x154>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a3f      	ldr	r2, [pc, #252]	; (800d378 <xTaskIncrementTick+0x150>)
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	4a3f      	ldr	r2, [pc, #252]	; (800d37c <xTaskIncrementTick+0x154>)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6013      	str	r3, [r2, #0]
 800d284:	4b3e      	ldr	r3, [pc, #248]	; (800d380 <xTaskIncrementTick+0x158>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3301      	adds	r3, #1
 800d28a:	4a3d      	ldr	r2, [pc, #244]	; (800d380 <xTaskIncrementTick+0x158>)
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	f000 fadb 	bl	800d848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d292:	4b3c      	ldr	r3, [pc, #240]	; (800d384 <xTaskIncrementTick+0x15c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d349      	bcc.n	800d330 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d29c:	4b36      	ldr	r3, [pc, #216]	; (800d378 <xTaskIncrementTick+0x150>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d104      	bne.n	800d2b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2a6:	4b37      	ldr	r3, [pc, #220]	; (800d384 <xTaskIncrementTick+0x15c>)
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ac:	601a      	str	r2, [r3, #0]
					break;
 800d2ae:	e03f      	b.n	800d330 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2b0:	4b31      	ldr	r3, [pc, #196]	; (800d378 <xTaskIncrementTick+0x150>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d203      	bcs.n	800d2d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2c8:	4a2e      	ldr	r2, [pc, #184]	; (800d384 <xTaskIncrementTick+0x15c>)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2ce:	e02f      	b.n	800d330 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fe fb8f 	bl	800b9f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d004      	beq.n	800d2ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	3318      	adds	r3, #24
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fb86 	bl	800b9f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f0:	4b25      	ldr	r3, [pc, #148]	; (800d388 <xTaskIncrementTick+0x160>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d903      	bls.n	800d300 <xTaskIncrementTick+0xd8>
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	4a22      	ldr	r2, [pc, #136]	; (800d388 <xTaskIncrementTick+0x160>)
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4a1f      	ldr	r2, [pc, #124]	; (800d38c <xTaskIncrementTick+0x164>)
 800d30e:	441a      	add	r2, r3
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	3304      	adds	r3, #4
 800d314:	4619      	mov	r1, r3
 800d316:	4610      	mov	r0, r2
 800d318:	f7fe fb11 	bl	800b93e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d320:	4b1b      	ldr	r3, [pc, #108]	; (800d390 <xTaskIncrementTick+0x168>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d326:	429a      	cmp	r2, r3
 800d328:	d3b8      	bcc.n	800d29c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d32a:	2301      	movs	r3, #1
 800d32c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d32e:	e7b5      	b.n	800d29c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d330:	4b17      	ldr	r3, [pc, #92]	; (800d390 <xTaskIncrementTick+0x168>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d336:	4915      	ldr	r1, [pc, #84]	; (800d38c <xTaskIncrementTick+0x164>)
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	440b      	add	r3, r1
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d901      	bls.n	800d34c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d348:	2301      	movs	r3, #1
 800d34a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d34c:	4b11      	ldr	r3, [pc, #68]	; (800d394 <xTaskIncrementTick+0x16c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d007      	beq.n	800d364 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d354:	2301      	movs	r3, #1
 800d356:	617b      	str	r3, [r7, #20]
 800d358:	e004      	b.n	800d364 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d35a:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <xTaskIncrementTick+0x170>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3301      	adds	r3, #1
 800d360:	4a0d      	ldr	r2, [pc, #52]	; (800d398 <xTaskIncrementTick+0x170>)
 800d362:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d364:	697b      	ldr	r3, [r7, #20]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	200065dc 	.word	0x200065dc
 800d374:	200065b8 	.word	0x200065b8
 800d378:	2000656c 	.word	0x2000656c
 800d37c:	20006570 	.word	0x20006570
 800d380:	200065cc 	.word	0x200065cc
 800d384:	200065d4 	.word	0x200065d4
 800d388:	200065bc 	.word	0x200065bc
 800d38c:	200060e4 	.word	0x200060e4
 800d390:	200060e0 	.word	0x200060e0
 800d394:	200065c8 	.word	0x200065c8
 800d398:	200065c4 	.word	0x200065c4

0800d39c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3a2:	4b2a      	ldr	r3, [pc, #168]	; (800d44c <vTaskSwitchContext+0xb0>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3aa:	4b29      	ldr	r3, [pc, #164]	; (800d450 <vTaskSwitchContext+0xb4>)
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3b0:	e046      	b.n	800d440 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d3b2:	4b27      	ldr	r3, [pc, #156]	; (800d450 <vTaskSwitchContext+0xb4>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b8:	4b26      	ldr	r3, [pc, #152]	; (800d454 <vTaskSwitchContext+0xb8>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	e010      	b.n	800d3e2 <vTaskSwitchContext+0x46>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10a      	bne.n	800d3dc <vTaskSwitchContext+0x40>
	__asm volatile
 800d3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	607b      	str	r3, [r7, #4]
}
 800d3d8:	bf00      	nop
 800d3da:	e7fe      	b.n	800d3da <vTaskSwitchContext+0x3e>
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	60fb      	str	r3, [r7, #12]
 800d3e2:	491d      	ldr	r1, [pc, #116]	; (800d458 <vTaskSwitchContext+0xbc>)
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	4413      	add	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	440b      	add	r3, r1
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d0e4      	beq.n	800d3c0 <vTaskSwitchContext+0x24>
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4413      	add	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4a15      	ldr	r2, [pc, #84]	; (800d458 <vTaskSwitchContext+0xbc>)
 800d402:	4413      	add	r3, r2
 800d404:	60bb      	str	r3, [r7, #8]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	685a      	ldr	r2, [r3, #4]
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	605a      	str	r2, [r3, #4]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	685a      	ldr	r2, [r3, #4]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	3308      	adds	r3, #8
 800d418:	429a      	cmp	r2, r3
 800d41a:	d104      	bne.n	800d426 <vTaskSwitchContext+0x8a>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	685a      	ldr	r2, [r3, #4]
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	605a      	str	r2, [r3, #4]
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	4a0b      	ldr	r2, [pc, #44]	; (800d45c <vTaskSwitchContext+0xc0>)
 800d42e:	6013      	str	r3, [r2, #0]
 800d430:	4a08      	ldr	r2, [pc, #32]	; (800d454 <vTaskSwitchContext+0xb8>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d436:	4b09      	ldr	r3, [pc, #36]	; (800d45c <vTaskSwitchContext+0xc0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3354      	adds	r3, #84	; 0x54
 800d43c:	4a08      	ldr	r2, [pc, #32]	; (800d460 <vTaskSwitchContext+0xc4>)
 800d43e:	6013      	str	r3, [r2, #0]
}
 800d440:	bf00      	nop
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	200065dc 	.word	0x200065dc
 800d450:	200065c8 	.word	0x200065c8
 800d454:	200065bc 	.word	0x200065bc
 800d458:	200060e4 	.word	0x200060e4
 800d45c:	200060e0 	.word	0x200060e0
 800d460:	2000016c 	.word	0x2000016c

0800d464 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10a      	bne.n	800d48a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	60fb      	str	r3, [r7, #12]
}
 800d486:	bf00      	nop
 800d488:	e7fe      	b.n	800d488 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d48a:	4b07      	ldr	r3, [pc, #28]	; (800d4a8 <vTaskPlaceOnEventList+0x44>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3318      	adds	r3, #24
 800d490:	4619      	mov	r1, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7fe fa77 	bl	800b986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d498:	2101      	movs	r1, #1
 800d49a:	6838      	ldr	r0, [r7, #0]
 800d49c:	f000 fb8e 	bl	800dbbc <prvAddCurrentTaskToDelayedList>
}
 800d4a0:	bf00      	nop
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	200060e0 	.word	0x200060e0

0800d4ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10a      	bne.n	800d4d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	617b      	str	r3, [r7, #20]
}
 800d4d0:	bf00      	nop
 800d4d2:	e7fe      	b.n	800d4d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4d4:	4b0a      	ldr	r3, [pc, #40]	; (800d500 <vTaskPlaceOnEventListRestricted+0x54>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3318      	adds	r3, #24
 800d4da:	4619      	mov	r1, r3
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7fe fa2e 	bl	800b93e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4ee:	6879      	ldr	r1, [r7, #4]
 800d4f0:	68b8      	ldr	r0, [r7, #8]
 800d4f2:	f000 fb63 	bl	800dbbc <prvAddCurrentTaskToDelayedList>
	}
 800d4f6:	bf00      	nop
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	200060e0 	.word	0x200060e0

0800d504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10a      	bne.n	800d530 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60fb      	str	r3, [r7, #12]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	3318      	adds	r3, #24
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fa5f 	bl	800b9f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d53a:	4b1e      	ldr	r3, [pc, #120]	; (800d5b4 <xTaskRemoveFromEventList+0xb0>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d11d      	bne.n	800d57e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	3304      	adds	r3, #4
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fa56 	bl	800b9f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d550:	4b19      	ldr	r3, [pc, #100]	; (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d903      	bls.n	800d560 <xTaskRemoveFromEventList+0x5c>
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55c:	4a16      	ldr	r2, [pc, #88]	; (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d564:	4613      	mov	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4a13      	ldr	r2, [pc, #76]	; (800d5bc <xTaskRemoveFromEventList+0xb8>)
 800d56e:	441a      	add	r2, r3
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	3304      	adds	r3, #4
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fe f9e1 	bl	800b93e <vListInsertEnd>
 800d57c:	e005      	b.n	800d58a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	3318      	adds	r3, #24
 800d582:	4619      	mov	r1, r3
 800d584:	480e      	ldr	r0, [pc, #56]	; (800d5c0 <xTaskRemoveFromEventList+0xbc>)
 800d586:	f7fe f9da 	bl	800b93e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58e:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <xTaskRemoveFromEventList+0xc0>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	429a      	cmp	r2, r3
 800d596:	d905      	bls.n	800d5a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d598:	2301      	movs	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <xTaskRemoveFromEventList+0xc4>)
 800d59e:	2201      	movs	r2, #1
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	e001      	b.n	800d5a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5a8:	697b      	ldr	r3, [r7, #20]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	200065dc 	.word	0x200065dc
 800d5b8:	200065bc 	.word	0x200065bc
 800d5bc:	200060e4 	.word	0x200060e4
 800d5c0:	20006574 	.word	0x20006574
 800d5c4:	200060e0 	.word	0x200060e0
 800d5c8:	200065c8 	.word	0x200065c8

0800d5cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5d4:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <vTaskInternalSetTimeOutState+0x24>)
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5dc:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <vTaskInternalSetTimeOutState+0x28>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	605a      	str	r2, [r3, #4]
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	200065cc 	.word	0x200065cc
 800d5f4:	200065b8 	.word	0x200065b8

0800d5f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b088      	sub	sp, #32
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10a      	bne.n	800d61e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	613b      	str	r3, [r7, #16]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	60fb      	str	r3, [r7, #12]
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d63a:	f000 ff8b 	bl	800e554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d63e:	4b1d      	ldr	r3, [pc, #116]	; (800d6b4 <xTaskCheckForTimeOut+0xbc>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	69ba      	ldr	r2, [r7, #24]
 800d64a:	1ad3      	subs	r3, r2, r3
 800d64c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d656:	d102      	bne.n	800d65e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d658:	2300      	movs	r3, #0
 800d65a:	61fb      	str	r3, [r7, #28]
 800d65c:	e023      	b.n	800d6a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <xTaskCheckForTimeOut+0xc0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d007      	beq.n	800d67a <xTaskCheckForTimeOut+0x82>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	69ba      	ldr	r2, [r7, #24]
 800d670:	429a      	cmp	r2, r3
 800d672:	d302      	bcc.n	800d67a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d674:	2301      	movs	r3, #1
 800d676:	61fb      	str	r3, [r7, #28]
 800d678:	e015      	b.n	800d6a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	429a      	cmp	r2, r3
 800d682:	d20b      	bcs.n	800d69c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	1ad2      	subs	r2, r2, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff ff9b 	bl	800d5cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d696:	2300      	movs	r3, #0
 800d698:	61fb      	str	r3, [r7, #28]
 800d69a:	e004      	b.n	800d6a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d6a6:	f000 ff85 	bl	800e5b4 <vPortExitCritical>

	return xReturn;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	200065b8 	.word	0x200065b8
 800d6b8:	200065cc 	.word	0x200065cc

0800d6bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6c0:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <vTaskMissedYield+0x14>)
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	601a      	str	r2, [r3, #0]
}
 800d6c6:	bf00      	nop
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	200065c8 	.word	0x200065c8

0800d6d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d6dc:	f000 f852 	bl	800d784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6e0:	4b06      	ldr	r3, [pc, #24]	; (800d6fc <prvIdleTask+0x28>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d9f9      	bls.n	800d6dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d6e8:	4b05      	ldr	r3, [pc, #20]	; (800d700 <prvIdleTask+0x2c>)
 800d6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ee:	601a      	str	r2, [r3, #0]
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6f8:	e7f0      	b.n	800d6dc <prvIdleTask+0x8>
 800d6fa:	bf00      	nop
 800d6fc:	200060e4 	.word	0x200060e4
 800d700:	e000ed04 	.word	0xe000ed04

0800d704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d70a:	2300      	movs	r3, #0
 800d70c:	607b      	str	r3, [r7, #4]
 800d70e:	e00c      	b.n	800d72a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	4613      	mov	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4a12      	ldr	r2, [pc, #72]	; (800d764 <prvInitialiseTaskLists+0x60>)
 800d71c:	4413      	add	r3, r2
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe f8e0 	bl	800b8e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	3301      	adds	r3, #1
 800d728:	607b      	str	r3, [r7, #4]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b37      	cmp	r3, #55	; 0x37
 800d72e:	d9ef      	bls.n	800d710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d730:	480d      	ldr	r0, [pc, #52]	; (800d768 <prvInitialiseTaskLists+0x64>)
 800d732:	f7fe f8d7 	bl	800b8e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d736:	480d      	ldr	r0, [pc, #52]	; (800d76c <prvInitialiseTaskLists+0x68>)
 800d738:	f7fe f8d4 	bl	800b8e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d73c:	480c      	ldr	r0, [pc, #48]	; (800d770 <prvInitialiseTaskLists+0x6c>)
 800d73e:	f7fe f8d1 	bl	800b8e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d742:	480c      	ldr	r0, [pc, #48]	; (800d774 <prvInitialiseTaskLists+0x70>)
 800d744:	f7fe f8ce 	bl	800b8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d748:	480b      	ldr	r0, [pc, #44]	; (800d778 <prvInitialiseTaskLists+0x74>)
 800d74a:	f7fe f8cb 	bl	800b8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d74e:	4b0b      	ldr	r3, [pc, #44]	; (800d77c <prvInitialiseTaskLists+0x78>)
 800d750:	4a05      	ldr	r2, [pc, #20]	; (800d768 <prvInitialiseTaskLists+0x64>)
 800d752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d754:	4b0a      	ldr	r3, [pc, #40]	; (800d780 <prvInitialiseTaskLists+0x7c>)
 800d756:	4a05      	ldr	r2, [pc, #20]	; (800d76c <prvInitialiseTaskLists+0x68>)
 800d758:	601a      	str	r2, [r3, #0]
}
 800d75a:	bf00      	nop
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	200060e4 	.word	0x200060e4
 800d768:	20006544 	.word	0x20006544
 800d76c:	20006558 	.word	0x20006558
 800d770:	20006574 	.word	0x20006574
 800d774:	20006588 	.word	0x20006588
 800d778:	200065a0 	.word	0x200065a0
 800d77c:	2000656c 	.word	0x2000656c
 800d780:	20006570 	.word	0x20006570

0800d784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d78a:	e019      	b.n	800d7c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d78c:	f000 fee2 	bl	800e554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d790:	4b10      	ldr	r3, [pc, #64]	; (800d7d4 <prvCheckTasksWaitingTermination+0x50>)
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	3304      	adds	r3, #4
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe f92b 	bl	800b9f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7a2:	4b0d      	ldr	r3, [pc, #52]	; (800d7d8 <prvCheckTasksWaitingTermination+0x54>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	4a0b      	ldr	r2, [pc, #44]	; (800d7d8 <prvCheckTasksWaitingTermination+0x54>)
 800d7aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	; (800d7dc <prvCheckTasksWaitingTermination+0x58>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	4a0a      	ldr	r2, [pc, #40]	; (800d7dc <prvCheckTasksWaitingTermination+0x58>)
 800d7b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d7b6:	f000 fefd 	bl	800e5b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f810 	bl	800d7e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7c0:	4b06      	ldr	r3, [pc, #24]	; (800d7dc <prvCheckTasksWaitingTermination+0x58>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1e1      	bne.n	800d78c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	3708      	adds	r7, #8
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20006588 	.word	0x20006588
 800d7d8:	200065b4 	.word	0x200065b4
 800d7dc:	2000659c 	.word	0x2000659c

0800d7e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3354      	adds	r3, #84	; 0x54
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f00c f91d 	bl	8019a2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d108      	bne.n	800d80e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d800:	4618      	mov	r0, r3
 800d802:	f001 f895 	bl	800e930 <vPortFree>
				vPortFree( pxTCB );
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f001 f892 	bl	800e930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d80c:	e018      	b.n	800d840 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d814:	2b01      	cmp	r3, #1
 800d816:	d103      	bne.n	800d820 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f001 f889 	bl	800e930 <vPortFree>
	}
 800d81e:	e00f      	b.n	800d840 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d826:	2b02      	cmp	r3, #2
 800d828:	d00a      	beq.n	800d840 <prvDeleteTCB+0x60>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	60fb      	str	r3, [r7, #12]
}
 800d83c:	bf00      	nop
 800d83e:	e7fe      	b.n	800d83e <prvDeleteTCB+0x5e>
	}
 800d840:	bf00      	nop
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d84e:	4b0c      	ldr	r3, [pc, #48]	; (800d880 <prvResetNextTaskUnblockTime+0x38>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d104      	bne.n	800d862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d858:	4b0a      	ldr	r3, [pc, #40]	; (800d884 <prvResetNextTaskUnblockTime+0x3c>)
 800d85a:	f04f 32ff 	mov.w	r2, #4294967295
 800d85e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d860:	e008      	b.n	800d874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d862:	4b07      	ldr	r3, [pc, #28]	; (800d880 <prvResetNextTaskUnblockTime+0x38>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	4a04      	ldr	r2, [pc, #16]	; (800d884 <prvResetNextTaskUnblockTime+0x3c>)
 800d872:	6013      	str	r3, [r2, #0]
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	2000656c 	.word	0x2000656c
 800d884:	200065d4 	.word	0x200065d4

0800d888 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d88e:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <xTaskGetCurrentTaskHandle+0x1c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d894:	687b      	ldr	r3, [r7, #4]
	}
 800d896:	4618      	mov	r0, r3
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	200060e0 	.word	0x200060e0

0800d8a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d8ae:	4b0b      	ldr	r3, [pc, #44]	; (800d8dc <xTaskGetSchedulerState+0x34>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	607b      	str	r3, [r7, #4]
 800d8ba:	e008      	b.n	800d8ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8bc:	4b08      	ldr	r3, [pc, #32]	; (800d8e0 <xTaskGetSchedulerState+0x38>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d102      	bne.n	800d8ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	607b      	str	r3, [r7, #4]
 800d8c8:	e001      	b.n	800d8ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d8ce:	687b      	ldr	r3, [r7, #4]
	}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	200065c0 	.word	0x200065c0
 800d8e0:	200065dc 	.word	0x200065dc

0800d8e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d051      	beq.n	800d99e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8fe:	4b2a      	ldr	r3, [pc, #168]	; (800d9a8 <xTaskPriorityInherit+0xc4>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d904:	429a      	cmp	r2, r3
 800d906:	d241      	bcs.n	800d98c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	db06      	blt.n	800d91e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d910:	4b25      	ldr	r3, [pc, #148]	; (800d9a8 <xTaskPriorityInherit+0xc4>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d916:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	6959      	ldr	r1, [r3, #20]
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d926:	4613      	mov	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4413      	add	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4a1f      	ldr	r2, [pc, #124]	; (800d9ac <xTaskPriorityInherit+0xc8>)
 800d930:	4413      	add	r3, r2
 800d932:	4299      	cmp	r1, r3
 800d934:	d122      	bne.n	800d97c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	3304      	adds	r3, #4
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe f85c 	bl	800b9f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d940:	4b19      	ldr	r3, [pc, #100]	; (800d9a8 <xTaskPriorityInherit+0xc4>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94e:	4b18      	ldr	r3, [pc, #96]	; (800d9b0 <xTaskPriorityInherit+0xcc>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d903      	bls.n	800d95e <xTaskPriorityInherit+0x7a>
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95a:	4a15      	ldr	r2, [pc, #84]	; (800d9b0 <xTaskPriorityInherit+0xcc>)
 800d95c:	6013      	str	r3, [r2, #0]
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d962:	4613      	mov	r3, r2
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4413      	add	r3, r2
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4a10      	ldr	r2, [pc, #64]	; (800d9ac <xTaskPriorityInherit+0xc8>)
 800d96c:	441a      	add	r2, r3
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	3304      	adds	r3, #4
 800d972:	4619      	mov	r1, r3
 800d974:	4610      	mov	r0, r2
 800d976:	f7fd ffe2 	bl	800b93e <vListInsertEnd>
 800d97a:	e004      	b.n	800d986 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d97c:	4b0a      	ldr	r3, [pc, #40]	; (800d9a8 <xTaskPriorityInherit+0xc4>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d986:	2301      	movs	r3, #1
 800d988:	60fb      	str	r3, [r7, #12]
 800d98a:	e008      	b.n	800d99e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d990:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <xTaskPriorityInherit+0xc4>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	429a      	cmp	r2, r3
 800d998:	d201      	bcs.n	800d99e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d99a:	2301      	movs	r3, #1
 800d99c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d99e:	68fb      	ldr	r3, [r7, #12]
	}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	200060e0 	.word	0x200060e0
 800d9ac:	200060e4 	.word	0x200060e4
 800d9b0:	200065bc 	.word	0x200065bc

0800d9b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d056      	beq.n	800da78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9ca:	4b2e      	ldr	r3, [pc, #184]	; (800da84 <xTaskPriorityDisinherit+0xd0>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	693a      	ldr	r2, [r7, #16]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d00a      	beq.n	800d9ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	60fb      	str	r3, [r7, #12]
}
 800d9e6:	bf00      	nop
 800d9e8:	e7fe      	b.n	800d9e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10a      	bne.n	800da08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f6:	f383 8811 	msr	BASEPRI, r3
 800d9fa:	f3bf 8f6f 	isb	sy
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	60bb      	str	r3, [r7, #8]
}
 800da04:	bf00      	nop
 800da06:	e7fe      	b.n	800da06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da0c:	1e5a      	subs	r2, r3, #1
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d02c      	beq.n	800da78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da22:	2b00      	cmp	r3, #0
 800da24:	d128      	bne.n	800da78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	3304      	adds	r3, #4
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fd ffe4 	bl	800b9f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da48:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <xTaskPriorityDisinherit+0xd4>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d903      	bls.n	800da58 <xTaskPriorityDisinherit+0xa4>
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da54:	4a0c      	ldr	r2, [pc, #48]	; (800da88 <xTaskPriorityDisinherit+0xd4>)
 800da56:	6013      	str	r3, [r2, #0]
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da5c:	4613      	mov	r3, r2
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	4413      	add	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	4a09      	ldr	r2, [pc, #36]	; (800da8c <xTaskPriorityDisinherit+0xd8>)
 800da66:	441a      	add	r2, r3
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	3304      	adds	r3, #4
 800da6c:	4619      	mov	r1, r3
 800da6e:	4610      	mov	r0, r2
 800da70:	f7fd ff65 	bl	800b93e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da74:	2301      	movs	r3, #1
 800da76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da78:	697b      	ldr	r3, [r7, #20]
	}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3718      	adds	r7, #24
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	200060e0 	.word	0x200060e0
 800da88:	200065bc 	.word	0x200065bc
 800da8c:	200060e4 	.word	0x200060e4

0800da90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da90:	b580      	push	{r7, lr}
 800da92:	b088      	sub	sp, #32
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da9e:	2301      	movs	r3, #1
 800daa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d06a      	beq.n	800db7e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10a      	bne.n	800dac6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	60fb      	str	r3, [r7, #12]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daca:	683a      	ldr	r2, [r7, #0]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d902      	bls.n	800dad6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	61fb      	str	r3, [r7, #28]
 800dad4:	e002      	b.n	800dadc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dada:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae0:	69fa      	ldr	r2, [r7, #28]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d04b      	beq.n	800db7e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	429a      	cmp	r2, r3
 800daee:	d146      	bne.n	800db7e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800daf0:	4b25      	ldr	r3, [pc, #148]	; (800db88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	69ba      	ldr	r2, [r7, #24]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d10a      	bne.n	800db10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	60bb      	str	r3, [r7, #8]
}
 800db0c:	bf00      	nop
 800db0e:	e7fe      	b.n	800db0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	69fa      	ldr	r2, [r7, #28]
 800db1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	2b00      	cmp	r3, #0
 800db22:	db04      	blt.n	800db2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	6959      	ldr	r1, [r3, #20]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	4613      	mov	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4a13      	ldr	r2, [pc, #76]	; (800db8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800db3e:	4413      	add	r3, r2
 800db40:	4299      	cmp	r1, r3
 800db42:	d11c      	bne.n	800db7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	3304      	adds	r3, #4
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fd ff55 	bl	800b9f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db52:	4b0f      	ldr	r3, [pc, #60]	; (800db90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	429a      	cmp	r2, r3
 800db58:	d903      	bls.n	800db62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5e:	4a0c      	ldr	r2, [pc, #48]	; (800db90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db66:	4613      	mov	r3, r2
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	4413      	add	r3, r2
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	4a07      	ldr	r2, [pc, #28]	; (800db8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800db70:	441a      	add	r2, r3
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	3304      	adds	r3, #4
 800db76:	4619      	mov	r1, r3
 800db78:	4610      	mov	r0, r2
 800db7a:	f7fd fee0 	bl	800b93e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db7e:	bf00      	nop
 800db80:	3720      	adds	r7, #32
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	200060e0 	.word	0x200060e0
 800db8c:	200060e4 	.word	0x200060e4
 800db90:	200065bc 	.word	0x200065bc

0800db94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db94:	b480      	push	{r7}
 800db96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db98:	4b07      	ldr	r3, [pc, #28]	; (800dbb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d004      	beq.n	800dbaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dba0:	4b05      	ldr	r3, [pc, #20]	; (800dbb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dba6:	3201      	adds	r2, #1
 800dba8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dbaa:	4b03      	ldr	r3, [pc, #12]	; (800dbb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dbac:	681b      	ldr	r3, [r3, #0]
	}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	200060e0 	.word	0x200060e0

0800dbbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbc6:	4b21      	ldr	r3, [pc, #132]	; (800dc4c <prvAddCurrentTaskToDelayedList+0x90>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbcc:	4b20      	ldr	r3, [pc, #128]	; (800dc50 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fd ff10 	bl	800b9f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbde:	d10a      	bne.n	800dbf6 <prvAddCurrentTaskToDelayedList+0x3a>
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d007      	beq.n	800dbf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbe6:	4b1a      	ldr	r3, [pc, #104]	; (800dc50 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	3304      	adds	r3, #4
 800dbec:	4619      	mov	r1, r3
 800dbee:	4819      	ldr	r0, [pc, #100]	; (800dc54 <prvAddCurrentTaskToDelayedList+0x98>)
 800dbf0:	f7fd fea5 	bl	800b93e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbf4:	e026      	b.n	800dc44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbfe:	4b14      	ldr	r3, [pc, #80]	; (800dc50 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d209      	bcs.n	800dc22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc0e:	4b12      	ldr	r3, [pc, #72]	; (800dc58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	4b0f      	ldr	r3, [pc, #60]	; (800dc50 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3304      	adds	r3, #4
 800dc18:	4619      	mov	r1, r3
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	f7fd feb3 	bl	800b986 <vListInsert>
}
 800dc20:	e010      	b.n	800dc44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc22:	4b0e      	ldr	r3, [pc, #56]	; (800dc5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	4b0a      	ldr	r3, [pc, #40]	; (800dc50 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4610      	mov	r0, r2
 800dc30:	f7fd fea9 	bl	800b986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc34:	4b0a      	ldr	r3, [pc, #40]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d202      	bcs.n	800dc44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dc3e:	4a08      	ldr	r2, [pc, #32]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	6013      	str	r3, [r2, #0]
}
 800dc44:	bf00      	nop
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	200065b8 	.word	0x200065b8
 800dc50:	200060e0 	.word	0x200060e0
 800dc54:	200065a0 	.word	0x200065a0
 800dc58:	20006570 	.word	0x20006570
 800dc5c:	2000656c 	.word	0x2000656c
 800dc60:	200065d4 	.word	0x200065d4

0800dc64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08a      	sub	sp, #40	; 0x28
 800dc68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc6e:	f000 fb07 	bl	800e280 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc72:	4b1c      	ldr	r3, [pc, #112]	; (800dce4 <xTimerCreateTimerTask+0x80>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d021      	beq.n	800dcbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc82:	1d3a      	adds	r2, r7, #4
 800dc84:	f107 0108 	add.w	r1, r7, #8
 800dc88:	f107 030c 	add.w	r3, r7, #12
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fd fe0f 	bl	800b8b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	9202      	str	r2, [sp, #8]
 800dc9a:	9301      	str	r3, [sp, #4]
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	2300      	movs	r3, #0
 800dca2:	460a      	mov	r2, r1
 800dca4:	4910      	ldr	r1, [pc, #64]	; (800dce8 <xTimerCreateTimerTask+0x84>)
 800dca6:	4811      	ldr	r0, [pc, #68]	; (800dcec <xTimerCreateTimerTask+0x88>)
 800dca8:	f7fe ff94 	bl	800cbd4 <xTaskCreateStatic>
 800dcac:	4603      	mov	r3, r0
 800dcae:	4a10      	ldr	r2, [pc, #64]	; (800dcf0 <xTimerCreateTimerTask+0x8c>)
 800dcb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dcb2:	4b0f      	ldr	r3, [pc, #60]	; (800dcf0 <xTimerCreateTimerTask+0x8c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10a      	bne.n	800dcda <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	613b      	str	r3, [r7, #16]
}
 800dcd6:	bf00      	nop
 800dcd8:	e7fe      	b.n	800dcd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dcda:	697b      	ldr	r3, [r7, #20]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	20006610 	.word	0x20006610
 800dce8:	0801ae3c 	.word	0x0801ae3c
 800dcec:	0800de29 	.word	0x0800de29
 800dcf0:	20006614 	.word	0x20006614

0800dcf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08a      	sub	sp, #40	; 0x28
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd02:	2300      	movs	r3, #0
 800dd04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	623b      	str	r3, [r7, #32]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd22:	4b1a      	ldr	r3, [pc, #104]	; (800dd8c <xTimerGenericCommand+0x98>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d02a      	beq.n	800dd80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2b05      	cmp	r3, #5
 800dd3a:	dc18      	bgt.n	800dd6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd3c:	f7ff fdb4 	bl	800d8a8 <xTaskGetSchedulerState>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d109      	bne.n	800dd5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd46:	4b11      	ldr	r3, [pc, #68]	; (800dd8c <xTimerGenericCommand+0x98>)
 800dd48:	6818      	ldr	r0, [r3, #0]
 800dd4a:	f107 0110 	add.w	r1, r7, #16
 800dd4e:	2300      	movs	r3, #0
 800dd50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd52:	f7fe f8d9 	bl	800bf08 <xQueueGenericSend>
 800dd56:	6278      	str	r0, [r7, #36]	; 0x24
 800dd58:	e012      	b.n	800dd80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd5a:	4b0c      	ldr	r3, [pc, #48]	; (800dd8c <xTimerGenericCommand+0x98>)
 800dd5c:	6818      	ldr	r0, [r3, #0]
 800dd5e:	f107 0110 	add.w	r1, r7, #16
 800dd62:	2300      	movs	r3, #0
 800dd64:	2200      	movs	r2, #0
 800dd66:	f7fe f8cf 	bl	800bf08 <xQueueGenericSend>
 800dd6a:	6278      	str	r0, [r7, #36]	; 0x24
 800dd6c:	e008      	b.n	800dd80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd6e:	4b07      	ldr	r3, [pc, #28]	; (800dd8c <xTimerGenericCommand+0x98>)
 800dd70:	6818      	ldr	r0, [r3, #0]
 800dd72:	f107 0110 	add.w	r1, r7, #16
 800dd76:	2300      	movs	r3, #0
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	f7fe f9c3 	bl	800c104 <xQueueGenericSendFromISR>
 800dd7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3728      	adds	r7, #40	; 0x28
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20006610 	.word	0x20006610

0800dd90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b088      	sub	sp, #32
 800dd94:	af02      	add	r7, sp, #8
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd9a:	4b22      	ldr	r3, [pc, #136]	; (800de24 <prvProcessExpiredTimer+0x94>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	3304      	adds	r3, #4
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fd fe25 	bl	800b9f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddb4:	f003 0304 	and.w	r3, r3, #4
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d022      	beq.n	800de02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	699a      	ldr	r2, [r3, #24]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	18d1      	adds	r1, r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	683a      	ldr	r2, [r7, #0]
 800ddc8:	6978      	ldr	r0, [r7, #20]
 800ddca:	f000 f8d1 	bl	800df70 <prvInsertTimerInActiveList>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d01f      	beq.n	800de14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	2100      	movs	r1, #0
 800ddde:	6978      	ldr	r0, [r7, #20]
 800dde0:	f7ff ff88 	bl	800dcf4 <xTimerGenericCommand>
 800dde4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d113      	bne.n	800de14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	60fb      	str	r3, [r7, #12]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de08:	f023 0301 	bic.w	r3, r3, #1
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	6a1b      	ldr	r3, [r3, #32]
 800de18:	6978      	ldr	r0, [r7, #20]
 800de1a:	4798      	blx	r3
}
 800de1c:	bf00      	nop
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	20006608 	.word	0x20006608

0800de28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de30:	f107 0308 	add.w	r3, r7, #8
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f857 	bl	800dee8 <prvGetNextExpireTime>
 800de3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	4619      	mov	r1, r3
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 f803 	bl	800de4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de46:	f000 f8d5 	bl	800dff4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de4a:	e7f1      	b.n	800de30 <prvTimerTask+0x8>

0800de4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de56:	f7ff f919 	bl	800d08c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de5a:	f107 0308 	add.w	r3, r7, #8
 800de5e:	4618      	mov	r0, r3
 800de60:	f000 f866 	bl	800df30 <prvSampleTimeNow>
 800de64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d130      	bne.n	800dece <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10a      	bne.n	800de88 <prvProcessTimerOrBlockTask+0x3c>
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	429a      	cmp	r2, r3
 800de78:	d806      	bhi.n	800de88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de7a:	f7ff f915 	bl	800d0a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de7e:	68f9      	ldr	r1, [r7, #12]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7ff ff85 	bl	800dd90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de86:	e024      	b.n	800ded2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d008      	beq.n	800dea0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de8e:	4b13      	ldr	r3, [pc, #76]	; (800dedc <prvProcessTimerOrBlockTask+0x90>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <prvProcessTimerOrBlockTask+0x50>
 800de98:	2301      	movs	r3, #1
 800de9a:	e000      	b.n	800de9e <prvProcessTimerOrBlockTask+0x52>
 800de9c:	2300      	movs	r3, #0
 800de9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dea0:	4b0f      	ldr	r3, [pc, #60]	; (800dee0 <prvProcessTimerOrBlockTask+0x94>)
 800dea2:	6818      	ldr	r0, [r3, #0]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	1ad3      	subs	r3, r2, r3
 800deaa:	683a      	ldr	r2, [r7, #0]
 800deac:	4619      	mov	r1, r3
 800deae:	f7fe fe5d 	bl	800cb6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800deb2:	f7ff f8f9 	bl	800d0a8 <xTaskResumeAll>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10a      	bne.n	800ded2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800debc:	4b09      	ldr	r3, [pc, #36]	; (800dee4 <prvProcessTimerOrBlockTask+0x98>)
 800debe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	f3bf 8f6f 	isb	sy
}
 800decc:	e001      	b.n	800ded2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dece:	f7ff f8eb 	bl	800d0a8 <xTaskResumeAll>
}
 800ded2:	bf00      	nop
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	2000660c 	.word	0x2000660c
 800dee0:	20006610 	.word	0x20006610
 800dee4:	e000ed04 	.word	0xe000ed04

0800dee8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800def0:	4b0e      	ldr	r3, [pc, #56]	; (800df2c <prvGetNextExpireTime+0x44>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d101      	bne.n	800defe <prvGetNextExpireTime+0x16>
 800defa:	2201      	movs	r2, #1
 800defc:	e000      	b.n	800df00 <prvGetNextExpireTime+0x18>
 800defe:	2200      	movs	r2, #0
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d105      	bne.n	800df18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df0c:	4b07      	ldr	r3, [pc, #28]	; (800df2c <prvGetNextExpireTime+0x44>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	e001      	b.n	800df1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df1c:	68fb      	ldr	r3, [r7, #12]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3714      	adds	r7, #20
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	20006608 	.word	0x20006608

0800df30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df38:	f7ff f954 	bl	800d1e4 <xTaskGetTickCount>
 800df3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df3e:	4b0b      	ldr	r3, [pc, #44]	; (800df6c <prvSampleTimeNow+0x3c>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	429a      	cmp	r2, r3
 800df46:	d205      	bcs.n	800df54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df48:	f000 f936 	bl	800e1b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	601a      	str	r2, [r3, #0]
 800df52:	e002      	b.n	800df5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df5a:	4a04      	ldr	r2, [pc, #16]	; (800df6c <prvSampleTimeNow+0x3c>)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df60:	68fb      	ldr	r3, [r7, #12]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	20006618 	.word	0x20006618

0800df70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
 800df7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df7e:	2300      	movs	r3, #0
 800df80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	429a      	cmp	r2, r3
 800df94:	d812      	bhi.n	800dfbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	1ad2      	subs	r2, r2, r3
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d302      	bcc.n	800dfaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	e01b      	b.n	800dfe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dfaa:	4b10      	ldr	r3, [pc, #64]	; (800dfec <prvInsertTimerInActiveList+0x7c>)
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	f7fd fce6 	bl	800b986 <vListInsert>
 800dfba:	e012      	b.n	800dfe2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d206      	bcs.n	800dfd2 <prvInsertTimerInActiveList+0x62>
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d302      	bcc.n	800dfd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	617b      	str	r3, [r7, #20]
 800dfd0:	e007      	b.n	800dfe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfd2:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <prvInsertTimerInActiveList+0x80>)
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	3304      	adds	r3, #4
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4610      	mov	r0, r2
 800dfde:	f7fd fcd2 	bl	800b986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dfe2:	697b      	ldr	r3, [r7, #20]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	2000660c 	.word	0x2000660c
 800dff0:	20006608 	.word	0x20006608

0800dff4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08e      	sub	sp, #56	; 0x38
 800dff8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dffa:	e0ca      	b.n	800e192 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	da18      	bge.n	800e034 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e002:	1d3b      	adds	r3, r7, #4
 800e004:	3304      	adds	r3, #4
 800e006:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	61fb      	str	r3, [r7, #28]
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e02a:	6850      	ldr	r0, [r2, #4]
 800e02c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e02e:	6892      	ldr	r2, [r2, #8]
 800e030:	4611      	mov	r1, r2
 800e032:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f2c0 80aa 	blt.w	800e190 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	695b      	ldr	r3, [r3, #20]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d004      	beq.n	800e052 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	3304      	adds	r3, #4
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7fd fcd3 	bl	800b9f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e052:	463b      	mov	r3, r7
 800e054:	4618      	mov	r0, r3
 800e056:	f7ff ff6b 	bl	800df30 <prvSampleTimeNow>
 800e05a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b09      	cmp	r3, #9
 800e060:	f200 8097 	bhi.w	800e192 <prvProcessReceivedCommands+0x19e>
 800e064:	a201      	add	r2, pc, #4	; (adr r2, 800e06c <prvProcessReceivedCommands+0x78>)
 800e066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e06a:	bf00      	nop
 800e06c:	0800e095 	.word	0x0800e095
 800e070:	0800e095 	.word	0x0800e095
 800e074:	0800e095 	.word	0x0800e095
 800e078:	0800e109 	.word	0x0800e109
 800e07c:	0800e11d 	.word	0x0800e11d
 800e080:	0800e167 	.word	0x0800e167
 800e084:	0800e095 	.word	0x0800e095
 800e088:	0800e095 	.word	0x0800e095
 800e08c:	0800e109 	.word	0x0800e109
 800e090:	0800e11d 	.word	0x0800e11d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e09a:	f043 0301 	orr.w	r3, r3, #1
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	18d1      	adds	r1, r2, r3
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0b4:	f7ff ff5c 	bl	800df70 <prvInsertTimerInActiveList>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d069      	beq.n	800e192 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c0:	6a1b      	ldr	r3, [r3, #32]
 800e0c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d05e      	beq.n	800e192 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	441a      	add	r2, r3
 800e0dc:	2300      	movs	r3, #0
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0e6:	f7ff fe05 	bl	800dcf4 <xTimerGenericCommand>
 800e0ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d14f      	bne.n	800e192 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	61bb      	str	r3, [r7, #24]
}
 800e104:	bf00      	nop
 800e106:	e7fe      	b.n	800e106 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e10e:	f023 0301 	bic.w	r3, r3, #1
 800e112:	b2da      	uxtb	r2, r3
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e11a:	e03a      	b.n	800e192 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e122:	f043 0301 	orr.w	r3, r3, #1
 800e126:	b2da      	uxtb	r2, r3
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10a      	bne.n	800e152 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e140:	f383 8811 	msr	BASEPRI, r3
 800e144:	f3bf 8f6f 	isb	sy
 800e148:	f3bf 8f4f 	dsb	sy
 800e14c:	617b      	str	r3, [r7, #20]
}
 800e14e:	bf00      	nop
 800e150:	e7fe      	b.n	800e150 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e154:	699a      	ldr	r2, [r3, #24]
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	18d1      	adds	r1, r2, r3
 800e15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e160:	f7ff ff06 	bl	800df70 <prvInsertTimerInActiveList>
					break;
 800e164:	e015      	b.n	800e192 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e16c:	f003 0302 	and.w	r3, r3, #2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d103      	bne.n	800e17c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e176:	f000 fbdb 	bl	800e930 <vPortFree>
 800e17a:	e00a      	b.n	800e192 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e182:	f023 0301 	bic.w	r3, r3, #1
 800e186:	b2da      	uxtb	r2, r3
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e18e:	e000      	b.n	800e192 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e190:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e192:	4b08      	ldr	r3, [pc, #32]	; (800e1b4 <prvProcessReceivedCommands+0x1c0>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	1d39      	adds	r1, r7, #4
 800e198:	2200      	movs	r2, #0
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe f8da 	bl	800c354 <xQueueReceive>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f47f af2a 	bne.w	800dffc <prvProcessReceivedCommands+0x8>
	}
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	3730      	adds	r7, #48	; 0x30
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20006610 	.word	0x20006610

0800e1b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1be:	e048      	b.n	800e252 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1c0:	4b2d      	ldr	r3, [pc, #180]	; (800e278 <prvSwitchTimerLists+0xc0>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ca:	4b2b      	ldr	r3, [pc, #172]	; (800e278 <prvSwitchTimerLists+0xc0>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	3304      	adds	r3, #4
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fd fc0d 	bl	800b9f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1ec:	f003 0304 	and.w	r3, r3, #4
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d02e      	beq.n	800e252 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	699b      	ldr	r3, [r3, #24]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	429a      	cmp	r2, r3
 800e204:	d90e      	bls.n	800e224 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e212:	4b19      	ldr	r3, [pc, #100]	; (800e278 <prvSwitchTimerLists+0xc0>)
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3304      	adds	r3, #4
 800e21a:	4619      	mov	r1, r3
 800e21c:	4610      	mov	r0, r2
 800e21e:	f7fd fbb2 	bl	800b986 <vListInsert>
 800e222:	e016      	b.n	800e252 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e224:	2300      	movs	r3, #0
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	2300      	movs	r3, #0
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	2100      	movs	r1, #0
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f7ff fd60 	bl	800dcf4 <xTimerGenericCommand>
 800e234:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10a      	bne.n	800e252 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	603b      	str	r3, [r7, #0]
}
 800e24e:	bf00      	nop
 800e250:	e7fe      	b.n	800e250 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e252:	4b09      	ldr	r3, [pc, #36]	; (800e278 <prvSwitchTimerLists+0xc0>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1b1      	bne.n	800e1c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e25c:	4b06      	ldr	r3, [pc, #24]	; (800e278 <prvSwitchTimerLists+0xc0>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e262:	4b06      	ldr	r3, [pc, #24]	; (800e27c <prvSwitchTimerLists+0xc4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a04      	ldr	r2, [pc, #16]	; (800e278 <prvSwitchTimerLists+0xc0>)
 800e268:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e26a:	4a04      	ldr	r2, [pc, #16]	; (800e27c <prvSwitchTimerLists+0xc4>)
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	6013      	str	r3, [r2, #0]
}
 800e270:	bf00      	nop
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20006608 	.word	0x20006608
 800e27c:	2000660c 	.word	0x2000660c

0800e280 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e286:	f000 f965 	bl	800e554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e28a:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <prvCheckForValidListAndQueue+0x60>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d120      	bne.n	800e2d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e292:	4814      	ldr	r0, [pc, #80]	; (800e2e4 <prvCheckForValidListAndQueue+0x64>)
 800e294:	f7fd fb26 	bl	800b8e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e298:	4813      	ldr	r0, [pc, #76]	; (800e2e8 <prvCheckForValidListAndQueue+0x68>)
 800e29a:	f7fd fb23 	bl	800b8e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e29e:	4b13      	ldr	r3, [pc, #76]	; (800e2ec <prvCheckForValidListAndQueue+0x6c>)
 800e2a0:	4a10      	ldr	r2, [pc, #64]	; (800e2e4 <prvCheckForValidListAndQueue+0x64>)
 800e2a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2a4:	4b12      	ldr	r3, [pc, #72]	; (800e2f0 <prvCheckForValidListAndQueue+0x70>)
 800e2a6:	4a10      	ldr	r2, [pc, #64]	; (800e2e8 <prvCheckForValidListAndQueue+0x68>)
 800e2a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	4b11      	ldr	r3, [pc, #68]	; (800e2f4 <prvCheckForValidListAndQueue+0x74>)
 800e2b0:	4a11      	ldr	r2, [pc, #68]	; (800e2f8 <prvCheckForValidListAndQueue+0x78>)
 800e2b2:	2110      	movs	r1, #16
 800e2b4:	200a      	movs	r0, #10
 800e2b6:	f7fd fc31 	bl	800bb1c <xQueueGenericCreateStatic>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	4a08      	ldr	r2, [pc, #32]	; (800e2e0 <prvCheckForValidListAndQueue+0x60>)
 800e2be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e2c0:	4b07      	ldr	r3, [pc, #28]	; (800e2e0 <prvCheckForValidListAndQueue+0x60>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d005      	beq.n	800e2d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2c8:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <prvCheckForValidListAndQueue+0x60>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	490b      	ldr	r1, [pc, #44]	; (800e2fc <prvCheckForValidListAndQueue+0x7c>)
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fe fbf8 	bl	800cac4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2d4:	f000 f96e 	bl	800e5b4 <vPortExitCritical>
}
 800e2d8:	bf00      	nop
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	20006610 	.word	0x20006610
 800e2e4:	200065e0 	.word	0x200065e0
 800e2e8:	200065f4 	.word	0x200065f4
 800e2ec:	20006608 	.word	0x20006608
 800e2f0:	2000660c 	.word	0x2000660c
 800e2f4:	200066bc 	.word	0x200066bc
 800e2f8:	2000661c 	.word	0x2000661c
 800e2fc:	0801ae44 	.word	0x0801ae44

0800e300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	3b04      	subs	r3, #4
 800e310:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	3b04      	subs	r3, #4
 800e31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	f023 0201 	bic.w	r2, r3, #1
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3b04      	subs	r3, #4
 800e32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e330:	4a0c      	ldr	r2, [pc, #48]	; (800e364 <pxPortInitialiseStack+0x64>)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	3b14      	subs	r3, #20
 800e33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3b04      	subs	r3, #4
 800e346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f06f 0202 	mvn.w	r2, #2
 800e34e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	3b20      	subs	r3, #32
 800e354:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e356:	68fb      	ldr	r3, [r7, #12]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	0800e369 	.word	0x0800e369

0800e368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e36e:	2300      	movs	r3, #0
 800e370:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e372:	4b12      	ldr	r3, [pc, #72]	; (800e3bc <prvTaskExitError+0x54>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e37a:	d00a      	beq.n	800e392 <prvTaskExitError+0x2a>
	__asm volatile
 800e37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	60fb      	str	r3, [r7, #12]
}
 800e38e:	bf00      	nop
 800e390:	e7fe      	b.n	800e390 <prvTaskExitError+0x28>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	60bb      	str	r3, [r7, #8]
}
 800e3a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3a6:	bf00      	nop
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d0fc      	beq.n	800e3a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3ae:	bf00      	nop
 800e3b0:	bf00      	nop
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	2000015c 	.word	0x2000015c

0800e3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3c0:	4b07      	ldr	r3, [pc, #28]	; (800e3e0 <pxCurrentTCBConst2>)
 800e3c2:	6819      	ldr	r1, [r3, #0]
 800e3c4:	6808      	ldr	r0, [r1, #0]
 800e3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ca:	f380 8809 	msr	PSP, r0
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f04f 0000 	mov.w	r0, #0
 800e3d6:	f380 8811 	msr	BASEPRI, r0
 800e3da:	4770      	bx	lr
 800e3dc:	f3af 8000 	nop.w

0800e3e0 <pxCurrentTCBConst2>:
 800e3e0:	200060e0 	.word	0x200060e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e3e4:	bf00      	nop
 800e3e6:	bf00      	nop

0800e3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e3e8:	4808      	ldr	r0, [pc, #32]	; (800e40c <prvPortStartFirstTask+0x24>)
 800e3ea:	6800      	ldr	r0, [r0, #0]
 800e3ec:	6800      	ldr	r0, [r0, #0]
 800e3ee:	f380 8808 	msr	MSP, r0
 800e3f2:	f04f 0000 	mov.w	r0, #0
 800e3f6:	f380 8814 	msr	CONTROL, r0
 800e3fa:	b662      	cpsie	i
 800e3fc:	b661      	cpsie	f
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	df00      	svc	0
 800e408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e40a:	bf00      	nop
 800e40c:	e000ed08 	.word	0xe000ed08

0800e410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e416:	4b46      	ldr	r3, [pc, #280]	; (800e530 <xPortStartScheduler+0x120>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a46      	ldr	r2, [pc, #280]	; (800e534 <xPortStartScheduler+0x124>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d10a      	bne.n	800e436 <xPortStartScheduler+0x26>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	613b      	str	r3, [r7, #16]
}
 800e432:	bf00      	nop
 800e434:	e7fe      	b.n	800e434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e436:	4b3e      	ldr	r3, [pc, #248]	; (800e530 <xPortStartScheduler+0x120>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a3f      	ldr	r2, [pc, #252]	; (800e538 <xPortStartScheduler+0x128>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d10a      	bne.n	800e456 <xPortStartScheduler+0x46>
	__asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	60fb      	str	r3, [r7, #12]
}
 800e452:	bf00      	nop
 800e454:	e7fe      	b.n	800e454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e456:	4b39      	ldr	r3, [pc, #228]	; (800e53c <xPortStartScheduler+0x12c>)
 800e458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	22ff      	movs	r2, #255	; 0xff
 800e466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e470:	78fb      	ldrb	r3, [r7, #3]
 800e472:	b2db      	uxtb	r3, r3
 800e474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	4b31      	ldr	r3, [pc, #196]	; (800e540 <xPortStartScheduler+0x130>)
 800e47c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e47e:	4b31      	ldr	r3, [pc, #196]	; (800e544 <xPortStartScheduler+0x134>)
 800e480:	2207      	movs	r2, #7
 800e482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e484:	e009      	b.n	800e49a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e486:	4b2f      	ldr	r3, [pc, #188]	; (800e544 <xPortStartScheduler+0x134>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3b01      	subs	r3, #1
 800e48c:	4a2d      	ldr	r2, [pc, #180]	; (800e544 <xPortStartScheduler+0x134>)
 800e48e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e490:	78fb      	ldrb	r3, [r7, #3]
 800e492:	b2db      	uxtb	r3, r3
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	b2db      	uxtb	r3, r3
 800e498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e49a:	78fb      	ldrb	r3, [r7, #3]
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4a2:	2b80      	cmp	r3, #128	; 0x80
 800e4a4:	d0ef      	beq.n	800e486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4a6:	4b27      	ldr	r3, [pc, #156]	; (800e544 <xPortStartScheduler+0x134>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f1c3 0307 	rsb	r3, r3, #7
 800e4ae:	2b04      	cmp	r3, #4
 800e4b0:	d00a      	beq.n	800e4c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	60bb      	str	r3, [r7, #8]
}
 800e4c4:	bf00      	nop
 800e4c6:	e7fe      	b.n	800e4c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4c8:	4b1e      	ldr	r3, [pc, #120]	; (800e544 <xPortStartScheduler+0x134>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	021b      	lsls	r3, r3, #8
 800e4ce:	4a1d      	ldr	r2, [pc, #116]	; (800e544 <xPortStartScheduler+0x134>)
 800e4d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4d2:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <xPortStartScheduler+0x134>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4da:	4a1a      	ldr	r2, [pc, #104]	; (800e544 <xPortStartScheduler+0x134>)
 800e4dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4e6:	4b18      	ldr	r3, [pc, #96]	; (800e548 <xPortStartScheduler+0x138>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a17      	ldr	r2, [pc, #92]	; (800e548 <xPortStartScheduler+0x138>)
 800e4ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e4f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e4f2:	4b15      	ldr	r3, [pc, #84]	; (800e548 <xPortStartScheduler+0x138>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a14      	ldr	r2, [pc, #80]	; (800e548 <xPortStartScheduler+0x138>)
 800e4f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e4fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e4fe:	f000 f8dd 	bl	800e6bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e502:	4b12      	ldr	r3, [pc, #72]	; (800e54c <xPortStartScheduler+0x13c>)
 800e504:	2200      	movs	r2, #0
 800e506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e508:	f000 f8fc 	bl	800e704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e50c:	4b10      	ldr	r3, [pc, #64]	; (800e550 <xPortStartScheduler+0x140>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a0f      	ldr	r2, [pc, #60]	; (800e550 <xPortStartScheduler+0x140>)
 800e512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e518:	f7ff ff66 	bl	800e3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e51c:	f7fe ff3e 	bl	800d39c <vTaskSwitchContext>
	prvTaskExitError();
 800e520:	f7ff ff22 	bl	800e368 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	e000ed00 	.word	0xe000ed00
 800e534:	410fc271 	.word	0x410fc271
 800e538:	410fc270 	.word	0x410fc270
 800e53c:	e000e400 	.word	0xe000e400
 800e540:	2000670c 	.word	0x2000670c
 800e544:	20006710 	.word	0x20006710
 800e548:	e000ed20 	.word	0xe000ed20
 800e54c:	2000015c 	.word	0x2000015c
 800e550:	e000ef34 	.word	0xe000ef34

0800e554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
	__asm volatile
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	607b      	str	r3, [r7, #4]
}
 800e56c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e56e:	4b0f      	ldr	r3, [pc, #60]	; (800e5ac <vPortEnterCritical+0x58>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	4a0d      	ldr	r2, [pc, #52]	; (800e5ac <vPortEnterCritical+0x58>)
 800e576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e578:	4b0c      	ldr	r3, [pc, #48]	; (800e5ac <vPortEnterCritical+0x58>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d10f      	bne.n	800e5a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e580:	4b0b      	ldr	r3, [pc, #44]	; (800e5b0 <vPortEnterCritical+0x5c>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00a      	beq.n	800e5a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	603b      	str	r3, [r7, #0]
}
 800e59c:	bf00      	nop
 800e59e:	e7fe      	b.n	800e59e <vPortEnterCritical+0x4a>
	}
}
 800e5a0:	bf00      	nop
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	2000015c 	.word	0x2000015c
 800e5b0:	e000ed04 	.word	0xe000ed04

0800e5b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5ba:	4b12      	ldr	r3, [pc, #72]	; (800e604 <vPortExitCritical+0x50>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d10a      	bne.n	800e5d8 <vPortExitCritical+0x24>
	__asm volatile
 800e5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c6:	f383 8811 	msr	BASEPRI, r3
 800e5ca:	f3bf 8f6f 	isb	sy
 800e5ce:	f3bf 8f4f 	dsb	sy
 800e5d2:	607b      	str	r3, [r7, #4]
}
 800e5d4:	bf00      	nop
 800e5d6:	e7fe      	b.n	800e5d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5d8:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <vPortExitCritical+0x50>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	4a09      	ldr	r2, [pc, #36]	; (800e604 <vPortExitCritical+0x50>)
 800e5e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5e2:	4b08      	ldr	r3, [pc, #32]	; (800e604 <vPortExitCritical+0x50>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d105      	bne.n	800e5f6 <vPortExitCritical+0x42>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	f383 8811 	msr	BASEPRI, r3
}
 800e5f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e5f6:	bf00      	nop
 800e5f8:	370c      	adds	r7, #12
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	2000015c 	.word	0x2000015c
	...

0800e610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e610:	f3ef 8009 	mrs	r0, PSP
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	4b15      	ldr	r3, [pc, #84]	; (800e670 <pxCurrentTCBConst>)
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	f01e 0f10 	tst.w	lr, #16
 800e620:	bf08      	it	eq
 800e622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62a:	6010      	str	r0, [r2, #0]
 800e62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e630:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e634:	f380 8811 	msr	BASEPRI, r0
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f7fe feac 	bl	800d39c <vTaskSwitchContext>
 800e644:	f04f 0000 	mov.w	r0, #0
 800e648:	f380 8811 	msr	BASEPRI, r0
 800e64c:	bc09      	pop	{r0, r3}
 800e64e:	6819      	ldr	r1, [r3, #0]
 800e650:	6808      	ldr	r0, [r1, #0]
 800e652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e656:	f01e 0f10 	tst.w	lr, #16
 800e65a:	bf08      	it	eq
 800e65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e660:	f380 8809 	msr	PSP, r0
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	f3af 8000 	nop.w

0800e670 <pxCurrentTCBConst>:
 800e670:	200060e0 	.word	0x200060e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e674:	bf00      	nop
 800e676:	bf00      	nop

0800e678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	607b      	str	r3, [r7, #4]
}
 800e690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e692:	f7fe fdc9 	bl	800d228 <xTaskIncrementTick>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d003      	beq.n	800e6a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e69c:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <xPortSysTickHandler+0x40>)
 800e69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6a2:	601a      	str	r2, [r3, #0]
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	f383 8811 	msr	BASEPRI, r3
}
 800e6ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	e000ed04 	.word	0xe000ed04

0800e6bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6c0:	4b0b      	ldr	r3, [pc, #44]	; (800e6f0 <vPortSetupTimerInterrupt+0x34>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6c6:	4b0b      	ldr	r3, [pc, #44]	; (800e6f4 <vPortSetupTimerInterrupt+0x38>)
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6cc:	4b0a      	ldr	r3, [pc, #40]	; (800e6f8 <vPortSetupTimerInterrupt+0x3c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a0a      	ldr	r2, [pc, #40]	; (800e6fc <vPortSetupTimerInterrupt+0x40>)
 800e6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6d6:	099b      	lsrs	r3, r3, #6
 800e6d8:	4a09      	ldr	r2, [pc, #36]	; (800e700 <vPortSetupTimerInterrupt+0x44>)
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6de:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <vPortSetupTimerInterrupt+0x34>)
 800e6e0:	2207      	movs	r2, #7
 800e6e2:	601a      	str	r2, [r3, #0]
}
 800e6e4:	bf00      	nop
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	e000e010 	.word	0xe000e010
 800e6f4:	e000e018 	.word	0xe000e018
 800e6f8:	2000013c 	.word	0x2000013c
 800e6fc:	10624dd3 	.word	0x10624dd3
 800e700:	e000e014 	.word	0xe000e014

0800e704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e714 <vPortEnableVFP+0x10>
 800e708:	6801      	ldr	r1, [r0, #0]
 800e70a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e70e:	6001      	str	r1, [r0, #0]
 800e710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e712:	bf00      	nop
 800e714:	e000ed88 	.word	0xe000ed88

0800e718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e71e:	f3ef 8305 	mrs	r3, IPSR
 800e722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2b0f      	cmp	r3, #15
 800e728:	d914      	bls.n	800e754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e72a:	4a17      	ldr	r2, [pc, #92]	; (800e788 <vPortValidateInterruptPriority+0x70>)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	4413      	add	r3, r2
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e734:	4b15      	ldr	r3, [pc, #84]	; (800e78c <vPortValidateInterruptPriority+0x74>)
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	7afa      	ldrb	r2, [r7, #11]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d20a      	bcs.n	800e754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	607b      	str	r3, [r7, #4]
}
 800e750:	bf00      	nop
 800e752:	e7fe      	b.n	800e752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e754:	4b0e      	ldr	r3, [pc, #56]	; (800e790 <vPortValidateInterruptPriority+0x78>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e75c:	4b0d      	ldr	r3, [pc, #52]	; (800e794 <vPortValidateInterruptPriority+0x7c>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	429a      	cmp	r2, r3
 800e762:	d90a      	bls.n	800e77a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	603b      	str	r3, [r7, #0]
}
 800e776:	bf00      	nop
 800e778:	e7fe      	b.n	800e778 <vPortValidateInterruptPriority+0x60>
	}
 800e77a:	bf00      	nop
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	e000e3f0 	.word	0xe000e3f0
 800e78c:	2000670c 	.word	0x2000670c
 800e790:	e000ed0c 	.word	0xe000ed0c
 800e794:	20006710 	.word	0x20006710

0800e798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b08a      	sub	sp, #40	; 0x28
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7a4:	f7fe fc72 	bl	800d08c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7a8:	4b5b      	ldr	r3, [pc, #364]	; (800e918 <pvPortMalloc+0x180>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7b0:	f000 f920 	bl	800e9f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7b4:	4b59      	ldr	r3, [pc, #356]	; (800e91c <pvPortMalloc+0x184>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f040 8093 	bne.w	800e8e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d01d      	beq.n	800e804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e7c8:	2208      	movs	r2, #8
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f003 0307 	and.w	r3, r3, #7
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d014      	beq.n	800e804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f023 0307 	bic.w	r3, r3, #7
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00a      	beq.n	800e804 <pvPortMalloc+0x6c>
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f2:	f383 8811 	msr	BASEPRI, r3
 800e7f6:	f3bf 8f6f 	isb	sy
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	617b      	str	r3, [r7, #20]
}
 800e800:	bf00      	nop
 800e802:	e7fe      	b.n	800e802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d06e      	beq.n	800e8e8 <pvPortMalloc+0x150>
 800e80a:	4b45      	ldr	r3, [pc, #276]	; (800e920 <pvPortMalloc+0x188>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	429a      	cmp	r2, r3
 800e812:	d869      	bhi.n	800e8e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e814:	4b43      	ldr	r3, [pc, #268]	; (800e924 <pvPortMalloc+0x18c>)
 800e816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e818:	4b42      	ldr	r3, [pc, #264]	; (800e924 <pvPortMalloc+0x18c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e81e:	e004      	b.n	800e82a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	429a      	cmp	r2, r3
 800e832:	d903      	bls.n	800e83c <pvPortMalloc+0xa4>
 800e834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1f1      	bne.n	800e820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e83c:	4b36      	ldr	r3, [pc, #216]	; (800e918 <pvPortMalloc+0x180>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e842:	429a      	cmp	r2, r3
 800e844:	d050      	beq.n	800e8e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e846:	6a3b      	ldr	r3, [r7, #32]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2208      	movs	r2, #8
 800e84c:	4413      	add	r3, r2
 800e84e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	6a3b      	ldr	r3, [r7, #32]
 800e856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	1ad2      	subs	r2, r2, r3
 800e860:	2308      	movs	r3, #8
 800e862:	005b      	lsls	r3, r3, #1
 800e864:	429a      	cmp	r2, r3
 800e866:	d91f      	bls.n	800e8a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4413      	add	r3, r2
 800e86e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	f003 0307 	and.w	r3, r3, #7
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <pvPortMalloc+0xf8>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	613b      	str	r3, [r7, #16]
}
 800e88c:	bf00      	nop
 800e88e:	e7fe      	b.n	800e88e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	1ad2      	subs	r2, r2, r3
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8a2:	69b8      	ldr	r0, [r7, #24]
 800e8a4:	f000 f908 	bl	800eab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8a8:	4b1d      	ldr	r3, [pc, #116]	; (800e920 <pvPortMalloc+0x188>)
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	4a1b      	ldr	r2, [pc, #108]	; (800e920 <pvPortMalloc+0x188>)
 800e8b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8b6:	4b1a      	ldr	r3, [pc, #104]	; (800e920 <pvPortMalloc+0x188>)
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	4b1b      	ldr	r3, [pc, #108]	; (800e928 <pvPortMalloc+0x190>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d203      	bcs.n	800e8ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8c2:	4b17      	ldr	r3, [pc, #92]	; (800e920 <pvPortMalloc+0x188>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a18      	ldr	r2, [pc, #96]	; (800e928 <pvPortMalloc+0x190>)
 800e8c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	685a      	ldr	r2, [r3, #4]
 800e8ce:	4b13      	ldr	r3, [pc, #76]	; (800e91c <pvPortMalloc+0x184>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	431a      	orrs	r2, r3
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	2200      	movs	r2, #0
 800e8dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e8de:	4b13      	ldr	r3, [pc, #76]	; (800e92c <pvPortMalloc+0x194>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	4a11      	ldr	r2, [pc, #68]	; (800e92c <pvPortMalloc+0x194>)
 800e8e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8e8:	f7fe fbde 	bl	800d0a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	f003 0307 	and.w	r3, r3, #7
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00a      	beq.n	800e90c <pvPortMalloc+0x174>
	__asm volatile
 800e8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	60fb      	str	r3, [r7, #12]
}
 800e908:	bf00      	nop
 800e90a:	e7fe      	b.n	800e90a <pvPortMalloc+0x172>
	return pvReturn;
 800e90c:	69fb      	ldr	r3, [r7, #28]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3728      	adds	r7, #40	; 0x28
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	2000a31c 	.word	0x2000a31c
 800e91c:	2000a330 	.word	0x2000a330
 800e920:	2000a320 	.word	0x2000a320
 800e924:	2000a314 	.word	0x2000a314
 800e928:	2000a324 	.word	0x2000a324
 800e92c:	2000a328 	.word	0x2000a328

0800e930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b086      	sub	sp, #24
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d04d      	beq.n	800e9de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e942:	2308      	movs	r3, #8
 800e944:	425b      	negs	r3, r3
 800e946:	697a      	ldr	r2, [r7, #20]
 800e948:	4413      	add	r3, r2
 800e94a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	685a      	ldr	r2, [r3, #4]
 800e954:	4b24      	ldr	r3, [pc, #144]	; (800e9e8 <vPortFree+0xb8>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4013      	ands	r3, r2
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10a      	bne.n	800e974 <vPortFree+0x44>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	60fb      	str	r3, [r7, #12]
}
 800e970:	bf00      	nop
 800e972:	e7fe      	b.n	800e972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00a      	beq.n	800e992 <vPortFree+0x62>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	60bb      	str	r3, [r7, #8]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	685a      	ldr	r2, [r3, #4]
 800e996:	4b14      	ldr	r3, [pc, #80]	; (800e9e8 <vPortFree+0xb8>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4013      	ands	r3, r2
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d01e      	beq.n	800e9de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d11a      	bne.n	800e9de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	4b0e      	ldr	r3, [pc, #56]	; (800e9e8 <vPortFree+0xb8>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	43db      	mvns	r3, r3
 800e9b2:	401a      	ands	r2, r3
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9b8:	f7fe fb68 	bl	800d08c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	685a      	ldr	r2, [r3, #4]
 800e9c0:	4b0a      	ldr	r3, [pc, #40]	; (800e9ec <vPortFree+0xbc>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	4a09      	ldr	r2, [pc, #36]	; (800e9ec <vPortFree+0xbc>)
 800e9c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9ca:	6938      	ldr	r0, [r7, #16]
 800e9cc:	f000 f874 	bl	800eab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e9d0:	4b07      	ldr	r3, [pc, #28]	; (800e9f0 <vPortFree+0xc0>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	4a06      	ldr	r2, [pc, #24]	; (800e9f0 <vPortFree+0xc0>)
 800e9d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e9da:	f7fe fb65 	bl	800d0a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9de:	bf00      	nop
 800e9e0:	3718      	adds	r7, #24
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	2000a330 	.word	0x2000a330
 800e9ec:	2000a320 	.word	0x2000a320
 800e9f0:	2000a32c 	.word	0x2000a32c

0800e9f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e9fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e9fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea00:	4b27      	ldr	r3, [pc, #156]	; (800eaa0 <prvHeapInit+0xac>)
 800ea02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f003 0307 	and.w	r3, r3, #7
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00c      	beq.n	800ea28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	3307      	adds	r3, #7
 800ea12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f023 0307 	bic.w	r3, r3, #7
 800ea1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	4a1f      	ldr	r2, [pc, #124]	; (800eaa0 <prvHeapInit+0xac>)
 800ea24:	4413      	add	r3, r2
 800ea26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea2c:	4a1d      	ldr	r2, [pc, #116]	; (800eaa4 <prvHeapInit+0xb0>)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea32:	4b1c      	ldr	r3, [pc, #112]	; (800eaa4 <prvHeapInit+0xb0>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea40:	2208      	movs	r2, #8
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	1a9b      	subs	r3, r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f023 0307 	bic.w	r3, r3, #7
 800ea4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	4a15      	ldr	r2, [pc, #84]	; (800eaa8 <prvHeapInit+0xb4>)
 800ea54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea56:	4b14      	ldr	r3, [pc, #80]	; (800eaa8 <prvHeapInit+0xb4>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea5e:	4b12      	ldr	r3, [pc, #72]	; (800eaa8 <prvHeapInit+0xb4>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2200      	movs	r2, #0
 800ea64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea74:	4b0c      	ldr	r3, [pc, #48]	; (800eaa8 <prvHeapInit+0xb4>)
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	4a0a      	ldr	r2, [pc, #40]	; (800eaac <prvHeapInit+0xb8>)
 800ea82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	4a09      	ldr	r2, [pc, #36]	; (800eab0 <prvHeapInit+0xbc>)
 800ea8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea8c:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <prvHeapInit+0xc0>)
 800ea8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea92:	601a      	str	r2, [r3, #0]
}
 800ea94:	bf00      	nop
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	20006714 	.word	0x20006714
 800eaa4:	2000a314 	.word	0x2000a314
 800eaa8:	2000a31c 	.word	0x2000a31c
 800eaac:	2000a324 	.word	0x2000a324
 800eab0:	2000a320 	.word	0x2000a320
 800eab4:	2000a330 	.word	0x2000a330

0800eab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eac0:	4b28      	ldr	r3, [pc, #160]	; (800eb64 <prvInsertBlockIntoFreeList+0xac>)
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	e002      	b.n	800eacc <prvInsertBlockIntoFreeList+0x14>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	60fb      	str	r3, [r7, #12]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d8f7      	bhi.n	800eac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	4413      	add	r3, r2
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d108      	bne.n	800eafa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	685a      	ldr	r2, [r3, #4]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	441a      	add	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	441a      	add	r2, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d118      	bne.n	800eb40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	4b15      	ldr	r3, [pc, #84]	; (800eb68 <prvInsertBlockIntoFreeList+0xb0>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d00d      	beq.n	800eb36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	685a      	ldr	r2, [r3, #4]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	441a      	add	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	e008      	b.n	800eb48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb36:	4b0c      	ldr	r3, [pc, #48]	; (800eb68 <prvInsertBlockIntoFreeList+0xb0>)
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	601a      	str	r2, [r3, #0]
 800eb3e:	e003      	b.n	800eb48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d002      	beq.n	800eb56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb56:	bf00      	nop
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	2000a314 	.word	0x2000a314
 800eb68:	2000a31c 	.word	0x2000a31c

0800eb6c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800eb76:	f007 fb67 	bl	8016248 <sys_timeouts_sleeptime>
 800eb7a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d10b      	bne.n	800eb9c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800eb84:	4813      	ldr	r0, [pc, #76]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb86:	f00a fc36 	bl	80193f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	6839      	ldr	r1, [r7, #0]
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f00a fbbe 	bl	8019310 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800eb94:	480f      	ldr	r0, [pc, #60]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb96:	f00a fc1f 	bl	80193d8 <sys_mutex_lock>
    return;
 800eb9a:	e018      	b.n	800ebce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d102      	bne.n	800eba8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800eba2:	f007 fb17 	bl	80161d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eba6:	e7e6      	b.n	800eb76 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800eba8:	480a      	ldr	r0, [pc, #40]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ebaa:	f00a fc24 	bl	80193f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f00a fbac 	bl	8019310 <sys_arch_mbox_fetch>
 800ebb8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ebba:	4806      	ldr	r0, [pc, #24]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ebbc:	f00a fc0c 	bl	80193d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc6:	d102      	bne.n	800ebce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ebc8:	f007 fb04 	bl	80161d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ebcc:	e7d3      	b.n	800eb76 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	2000a340 	.word	0x2000a340

0800ebd8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ebe0:	4810      	ldr	r0, [pc, #64]	; (800ec24 <tcpip_thread+0x4c>)
 800ebe2:	f00a fbf9 	bl	80193d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ebe6:	4b10      	ldr	r3, [pc, #64]	; (800ec28 <tcpip_thread+0x50>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d005      	beq.n	800ebfa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ebee:	4b0e      	ldr	r3, [pc, #56]	; (800ec28 <tcpip_thread+0x50>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a0e      	ldr	r2, [pc, #56]	; (800ec2c <tcpip_thread+0x54>)
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ebfa:	f107 030c 	add.w	r3, r7, #12
 800ebfe:	4619      	mov	r1, r3
 800ec00:	480b      	ldr	r0, [pc, #44]	; (800ec30 <tcpip_thread+0x58>)
 800ec02:	f7ff ffb3 	bl	800eb6c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d106      	bne.n	800ec1a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ec0c:	4b09      	ldr	r3, [pc, #36]	; (800ec34 <tcpip_thread+0x5c>)
 800ec0e:	2291      	movs	r2, #145	; 0x91
 800ec10:	4909      	ldr	r1, [pc, #36]	; (800ec38 <tcpip_thread+0x60>)
 800ec12:	480a      	ldr	r0, [pc, #40]	; (800ec3c <tcpip_thread+0x64>)
 800ec14:	f00a fe30 	bl	8019878 <iprintf>
      continue;
 800ec18:	e003      	b.n	800ec22 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 f80f 	bl	800ec40 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ec22:	e7ea      	b.n	800ebfa <tcpip_thread+0x22>
 800ec24:	2000a340 	.word	0x2000a340
 800ec28:	2000a334 	.word	0x2000a334
 800ec2c:	2000a338 	.word	0x2000a338
 800ec30:	2000a33c 	.word	0x2000a33c
 800ec34:	0801ae4c 	.word	0x0801ae4c
 800ec38:	0801ae7c 	.word	0x0801ae7c
 800ec3c:	0801ae9c 	.word	0x0801ae9c

0800ec40 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d026      	beq.n	800ec9e <tcpip_thread_handle_msg+0x5e>
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	dc2b      	bgt.n	800ecac <tcpip_thread_handle_msg+0x6c>
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <tcpip_thread_handle_msg+0x1e>
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d015      	beq.n	800ec88 <tcpip_thread_handle_msg+0x48>
 800ec5c:	e026      	b.n	800ecac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	6850      	ldr	r0, [r2, #4]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	6892      	ldr	r2, [r2, #8]
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	4798      	blx	r3
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f001 fd0b 	bl	8010694 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	2009      	movs	r0, #9
 800ec82:	f000 fe63 	bl	800f94c <memp_free>
      break;
 800ec86:	e018      	b.n	800ecba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	6892      	ldr	r2, [r2, #8]
 800ec90:	4610      	mov	r0, r2
 800ec92:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	2008      	movs	r0, #8
 800ec98:	f000 fe58 	bl	800f94c <memp_free>
      break;
 800ec9c:	e00d      	b.n	800ecba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	6892      	ldr	r2, [r2, #8]
 800eca6:	4610      	mov	r0, r2
 800eca8:	4798      	blx	r3
      break;
 800ecaa:	e006      	b.n	800ecba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ecac:	4b05      	ldr	r3, [pc, #20]	; (800ecc4 <tcpip_thread_handle_msg+0x84>)
 800ecae:	22cf      	movs	r2, #207	; 0xcf
 800ecb0:	4905      	ldr	r1, [pc, #20]	; (800ecc8 <tcpip_thread_handle_msg+0x88>)
 800ecb2:	4806      	ldr	r0, [pc, #24]	; (800eccc <tcpip_thread_handle_msg+0x8c>)
 800ecb4:	f00a fde0 	bl	8019878 <iprintf>
      break;
 800ecb8:	bf00      	nop
  }
}
 800ecba:	bf00      	nop
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	0801ae4c 	.word	0x0801ae4c
 800ecc8:	0801ae7c 	.word	0x0801ae7c
 800eccc:	0801ae9c 	.word	0x0801ae9c

0800ecd0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ecdc:	481a      	ldr	r0, [pc, #104]	; (800ed48 <tcpip_inpkt+0x78>)
 800ecde:	f00a fb48 	bl	8019372 <sys_mbox_valid>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d105      	bne.n	800ecf4 <tcpip_inpkt+0x24>
 800ece8:	4b18      	ldr	r3, [pc, #96]	; (800ed4c <tcpip_inpkt+0x7c>)
 800ecea:	22fc      	movs	r2, #252	; 0xfc
 800ecec:	4918      	ldr	r1, [pc, #96]	; (800ed50 <tcpip_inpkt+0x80>)
 800ecee:	4819      	ldr	r0, [pc, #100]	; (800ed54 <tcpip_inpkt+0x84>)
 800ecf0:	f00a fdc2 	bl	8019878 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ecf4:	2009      	movs	r0, #9
 800ecf6:	f000 fdb3 	bl	800f860 <memp_malloc>
 800ecfa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d102      	bne.n	800ed08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ed02:	f04f 33ff 	mov.w	r3, #4294967295
 800ed06:	e01a      	b.n	800ed3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ed20:	6979      	ldr	r1, [r7, #20]
 800ed22:	4809      	ldr	r0, [pc, #36]	; (800ed48 <tcpip_inpkt+0x78>)
 800ed24:	f00a fada 	bl	80192dc <sys_mbox_trypost>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d006      	beq.n	800ed3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ed2e:	6979      	ldr	r1, [r7, #20]
 800ed30:	2009      	movs	r0, #9
 800ed32:	f000 fe0b 	bl	800f94c <memp_free>
    return ERR_MEM;
 800ed36:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3a:	e000      	b.n	800ed3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ed3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	2000a33c 	.word	0x2000a33c
 800ed4c:	0801ae4c 	.word	0x0801ae4c
 800ed50:	0801aec4 	.word	0x0801aec4
 800ed54:	0801ae9c 	.word	0x0801ae9c

0800ed58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed68:	f003 0318 	and.w	r3, r3, #24
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d006      	beq.n	800ed7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ed70:	4a08      	ldr	r2, [pc, #32]	; (800ed94 <tcpip_input+0x3c>)
 800ed72:	6839      	ldr	r1, [r7, #0]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff ffab 	bl	800ecd0 <tcpip_inpkt>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	e005      	b.n	800ed8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ed7e:	4a06      	ldr	r2, [pc, #24]	; (800ed98 <tcpip_input+0x40>)
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff ffa4 	bl	800ecd0 <tcpip_inpkt>
 800ed88:	4603      	mov	r3, r0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	080190fd 	.word	0x080190fd
 800ed98:	08018005 	.word	0x08018005

0800ed9c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800eda6:	4819      	ldr	r0, [pc, #100]	; (800ee0c <tcpip_try_callback+0x70>)
 800eda8:	f00a fae3 	bl	8019372 <sys_mbox_valid>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <tcpip_try_callback+0x24>
 800edb2:	4b17      	ldr	r3, [pc, #92]	; (800ee10 <tcpip_try_callback+0x74>)
 800edb4:	f240 125d 	movw	r2, #349	; 0x15d
 800edb8:	4916      	ldr	r1, [pc, #88]	; (800ee14 <tcpip_try_callback+0x78>)
 800edba:	4817      	ldr	r0, [pc, #92]	; (800ee18 <tcpip_try_callback+0x7c>)
 800edbc:	f00a fd5c 	bl	8019878 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800edc0:	2008      	movs	r0, #8
 800edc2:	f000 fd4d 	bl	800f860 <memp_malloc>
 800edc6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800edce:	f04f 33ff 	mov.w	r3, #4294967295
 800edd2:	e017      	b.n	800ee04 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2201      	movs	r2, #1
 800edd8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	4808      	ldr	r0, [pc, #32]	; (800ee0c <tcpip_try_callback+0x70>)
 800edea:	f00a fa77 	bl	80192dc <sys_mbox_trypost>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d006      	beq.n	800ee02 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800edf4:	68f9      	ldr	r1, [r7, #12]
 800edf6:	2008      	movs	r0, #8
 800edf8:	f000 fda8 	bl	800f94c <memp_free>
    return ERR_MEM;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ee00:	e000      	b.n	800ee04 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	2000a33c 	.word	0x2000a33c
 800ee10:	0801ae4c 	.word	0x0801ae4c
 800ee14:	0801aec4 	.word	0x0801aec4
 800ee18:	0801ae9c 	.word	0x0801ae9c

0800ee1c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af02      	add	r7, sp, #8
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ee26:	f000 f871 	bl	800ef0c <lwip_init>

  tcpip_init_done = initfunc;
 800ee2a:	4a17      	ldr	r2, [pc, #92]	; (800ee88 <tcpip_init+0x6c>)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ee30:	4a16      	ldr	r2, [pc, #88]	; (800ee8c <tcpip_init+0x70>)
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ee36:	2106      	movs	r1, #6
 800ee38:	4815      	ldr	r0, [pc, #84]	; (800ee90 <tcpip_init+0x74>)
 800ee3a:	f00a fa35 	bl	80192a8 <sys_mbox_new>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d006      	beq.n	800ee52 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ee44:	4b13      	ldr	r3, [pc, #76]	; (800ee94 <tcpip_init+0x78>)
 800ee46:	f240 2261 	movw	r2, #609	; 0x261
 800ee4a:	4913      	ldr	r1, [pc, #76]	; (800ee98 <tcpip_init+0x7c>)
 800ee4c:	4813      	ldr	r0, [pc, #76]	; (800ee9c <tcpip_init+0x80>)
 800ee4e:	f00a fd13 	bl	8019878 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ee52:	4813      	ldr	r0, [pc, #76]	; (800eea0 <tcpip_init+0x84>)
 800ee54:	f00a faaa 	bl	80193ac <sys_mutex_new>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d006      	beq.n	800ee6c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ee5e:	4b0d      	ldr	r3, [pc, #52]	; (800ee94 <tcpip_init+0x78>)
 800ee60:	f240 2265 	movw	r2, #613	; 0x265
 800ee64:	490f      	ldr	r1, [pc, #60]	; (800eea4 <tcpip_init+0x88>)
 800ee66:	480d      	ldr	r0, [pc, #52]	; (800ee9c <tcpip_init+0x80>)
 800ee68:	f00a fd06 	bl	8019878 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ee6c:	2318      	movs	r3, #24
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee74:	2200      	movs	r2, #0
 800ee76:	490c      	ldr	r1, [pc, #48]	; (800eea8 <tcpip_init+0x8c>)
 800ee78:	480c      	ldr	r0, [pc, #48]	; (800eeac <tcpip_init+0x90>)
 800ee7a:	f00a fac9 	bl	8019410 <sys_thread_new>
}
 800ee7e:	bf00      	nop
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	2000a334 	.word	0x2000a334
 800ee8c:	2000a338 	.word	0x2000a338
 800ee90:	2000a33c 	.word	0x2000a33c
 800ee94:	0801ae4c 	.word	0x0801ae4c
 800ee98:	0801aed4 	.word	0x0801aed4
 800ee9c:	0801ae9c 	.word	0x0801ae9c
 800eea0:	2000a340 	.word	0x2000a340
 800eea4:	0801aef8 	.word	0x0801aef8
 800eea8:	0800ebd9 	.word	0x0800ebd9
 800eeac:	0801af1c 	.word	0x0801af1c

0800eeb0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800eeba:	88fb      	ldrh	r3, [r7, #6]
 800eebc:	021b      	lsls	r3, r3, #8
 800eebe:	b21a      	sxth	r2, r3
 800eec0:	88fb      	ldrh	r3, [r7, #6]
 800eec2:	0a1b      	lsrs	r3, r3, #8
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	b21b      	sxth	r3, r3
 800eec8:	4313      	orrs	r3, r2
 800eeca:	b21b      	sxth	r3, r3
 800eecc:	b29b      	uxth	r3, r3
}
 800eece:	4618      	mov	r0, r3
 800eed0:	370c      	adds	r7, #12
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eeda:	b480      	push	{r7}
 800eedc:	b083      	sub	sp, #12
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	061a      	lsls	r2, r3, #24
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	021b      	lsls	r3, r3, #8
 800eeea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eeee:	431a      	orrs	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	0a1b      	lsrs	r3, r3, #8
 800eef4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eef8:	431a      	orrs	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	0e1b      	lsrs	r3, r3, #24
 800eefe:	4313      	orrs	r3, r2
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ef16:	f00a fa3d 	bl	8019394 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ef1a:	f000 f8d5 	bl	800f0c8 <mem_init>
  memp_init();
 800ef1e:	f000 fc31 	bl	800f784 <memp_init>
  pbuf_init();
  netif_init();
 800ef22:	f000 fd3d 	bl	800f9a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ef26:	f007 f9c7 	bl	80162b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ef2a:	f001 feef 	bl	8010d0c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ef2e:	f007 f909 	bl	8016144 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ef32:	bf00      	nop
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
	...

0800ef3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	4603      	mov	r3, r0
 800ef44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ef46:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <ptr_to_mem+0x20>)
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	88fb      	ldrh	r3, [r7, #6]
 800ef4c:	4413      	add	r3, r2
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	2000a9b0 	.word	0x2000a9b0

0800ef60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ef68:	4b05      	ldr	r3, [pc, #20]	; (800ef80 <mem_to_ptr+0x20>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	b29b      	uxth	r3, r3
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	370c      	adds	r7, #12
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	2000a9b0 	.word	0x2000a9b0

0800ef84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ef84:	b590      	push	{r4, r7, lr}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ef8c:	4b45      	ldr	r3, [pc, #276]	; (800f0a4 <plug_holes+0x120>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d206      	bcs.n	800efa4 <plug_holes+0x20>
 800ef96:	4b44      	ldr	r3, [pc, #272]	; (800f0a8 <plug_holes+0x124>)
 800ef98:	f240 12df 	movw	r2, #479	; 0x1df
 800ef9c:	4943      	ldr	r1, [pc, #268]	; (800f0ac <plug_holes+0x128>)
 800ef9e:	4844      	ldr	r0, [pc, #272]	; (800f0b0 <plug_holes+0x12c>)
 800efa0:	f00a fc6a 	bl	8019878 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800efa4:	4b43      	ldr	r3, [pc, #268]	; (800f0b4 <plug_holes+0x130>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d306      	bcc.n	800efbc <plug_holes+0x38>
 800efae:	4b3e      	ldr	r3, [pc, #248]	; (800f0a8 <plug_holes+0x124>)
 800efb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800efb4:	4940      	ldr	r1, [pc, #256]	; (800f0b8 <plug_holes+0x134>)
 800efb6:	483e      	ldr	r0, [pc, #248]	; (800f0b0 <plug_holes+0x12c>)
 800efb8:	f00a fc5e 	bl	8019878 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	791b      	ldrb	r3, [r3, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d006      	beq.n	800efd2 <plug_holes+0x4e>
 800efc4:	4b38      	ldr	r3, [pc, #224]	; (800f0a8 <plug_holes+0x124>)
 800efc6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800efca:	493c      	ldr	r1, [pc, #240]	; (800f0bc <plug_holes+0x138>)
 800efcc:	4838      	ldr	r0, [pc, #224]	; (800f0b0 <plug_holes+0x12c>)
 800efce:	f00a fc53 	bl	8019878 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800efda:	d906      	bls.n	800efea <plug_holes+0x66>
 800efdc:	4b32      	ldr	r3, [pc, #200]	; (800f0a8 <plug_holes+0x124>)
 800efde:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800efe2:	4937      	ldr	r1, [pc, #220]	; (800f0c0 <plug_holes+0x13c>)
 800efe4:	4832      	ldr	r0, [pc, #200]	; (800f0b0 <plug_holes+0x12c>)
 800efe6:	f00a fc47 	bl	8019878 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ffa4 	bl	800ef3c <ptr_to_mem>
 800eff4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	429a      	cmp	r2, r3
 800effc:	d024      	beq.n	800f048 <plug_holes+0xc4>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	791b      	ldrb	r3, [r3, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d120      	bne.n	800f048 <plug_holes+0xc4>
 800f006:	4b2b      	ldr	r3, [pc, #172]	; (800f0b4 <plug_holes+0x130>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d01b      	beq.n	800f048 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f010:	4b2c      	ldr	r3, [pc, #176]	; (800f0c4 <plug_holes+0x140>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	429a      	cmp	r2, r3
 800f018:	d102      	bne.n	800f020 <plug_holes+0x9c>
      lfree = mem;
 800f01a:	4a2a      	ldr	r2, [pc, #168]	; (800f0c4 <plug_holes+0x140>)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	881a      	ldrh	r2, [r3, #0]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f030:	d00a      	beq.n	800f048 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	4618      	mov	r0, r3
 800f038:	f7ff ff80 	bl	800ef3c <ptr_to_mem>
 800f03c:	4604      	mov	r4, r0
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7ff ff8e 	bl	800ef60 <mem_to_ptr>
 800f044:	4603      	mov	r3, r0
 800f046:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	885b      	ldrh	r3, [r3, #2]
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7ff ff75 	bl	800ef3c <ptr_to_mem>
 800f052:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d01f      	beq.n	800f09c <plug_holes+0x118>
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	791b      	ldrb	r3, [r3, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d11b      	bne.n	800f09c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f064:	4b17      	ldr	r3, [pc, #92]	; (800f0c4 <plug_holes+0x140>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d102      	bne.n	800f074 <plug_holes+0xf0>
      lfree = pmem;
 800f06e:	4a15      	ldr	r2, [pc, #84]	; (800f0c4 <plug_holes+0x140>)
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	881a      	ldrh	r2, [r3, #0]
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	881b      	ldrh	r3, [r3, #0]
 800f080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f084:	d00a      	beq.n	800f09c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7ff ff56 	bl	800ef3c <ptr_to_mem>
 800f090:	4604      	mov	r4, r0
 800f092:	68b8      	ldr	r0, [r7, #8]
 800f094:	f7ff ff64 	bl	800ef60 <mem_to_ptr>
 800f098:	4603      	mov	r3, r0
 800f09a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f09c:	bf00      	nop
 800f09e:	3714      	adds	r7, #20
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd90      	pop	{r4, r7, pc}
 800f0a4:	2000a9b0 	.word	0x2000a9b0
 800f0a8:	0801af2c 	.word	0x0801af2c
 800f0ac:	0801af5c 	.word	0x0801af5c
 800f0b0:	0801af74 	.word	0x0801af74
 800f0b4:	2000a9b4 	.word	0x2000a9b4
 800f0b8:	0801af9c 	.word	0x0801af9c
 800f0bc:	0801afb8 	.word	0x0801afb8
 800f0c0:	0801afd4 	.word	0x0801afd4
 800f0c4:	2000a9bc 	.word	0x2000a9bc

0800f0c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f0ce:	4b1f      	ldr	r3, [pc, #124]	; (800f14c <mem_init+0x84>)
 800f0d0:	3303      	adds	r3, #3
 800f0d2:	f023 0303 	bic.w	r3, r3, #3
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	4b1d      	ldr	r3, [pc, #116]	; (800f150 <mem_init+0x88>)
 800f0da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f0dc:	4b1c      	ldr	r3, [pc, #112]	; (800f150 <mem_init+0x88>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f0e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f0f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f0fa:	f7ff ff1f 	bl	800ef3c <ptr_to_mem>
 800f0fe:	4603      	mov	r3, r0
 800f100:	4a14      	ldr	r2, [pc, #80]	; (800f154 <mem_init+0x8c>)
 800f102:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f104:	4b13      	ldr	r3, [pc, #76]	; (800f154 <mem_init+0x8c>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2201      	movs	r2, #1
 800f10a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f10c:	4b11      	ldr	r3, [pc, #68]	; (800f154 <mem_init+0x8c>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f114:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f116:	4b0f      	ldr	r3, [pc, #60]	; (800f154 <mem_init+0x8c>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f11e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f120:	4b0b      	ldr	r3, [pc, #44]	; (800f150 <mem_init+0x88>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a0c      	ldr	r2, [pc, #48]	; (800f158 <mem_init+0x90>)
 800f126:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f128:	480c      	ldr	r0, [pc, #48]	; (800f15c <mem_init+0x94>)
 800f12a:	f00a f93f 	bl	80193ac <sys_mutex_new>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d006      	beq.n	800f142 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f134:	4b0a      	ldr	r3, [pc, #40]	; (800f160 <mem_init+0x98>)
 800f136:	f240 221f 	movw	r2, #543	; 0x21f
 800f13a:	490a      	ldr	r1, [pc, #40]	; (800f164 <mem_init+0x9c>)
 800f13c:	480a      	ldr	r0, [pc, #40]	; (800f168 <mem_init+0xa0>)
 800f13e:	f00a fb9b 	bl	8019878 <iprintf>
  }
}
 800f142:	bf00      	nop
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	2000a35c 	.word	0x2000a35c
 800f150:	2000a9b0 	.word	0x2000a9b0
 800f154:	2000a9b4 	.word	0x2000a9b4
 800f158:	2000a9bc 	.word	0x2000a9bc
 800f15c:	2000a9b8 	.word	0x2000a9b8
 800f160:	0801af2c 	.word	0x0801af2c
 800f164:	0801b000 	.word	0x0801b000
 800f168:	0801af74 	.word	0x0801af74

0800f16c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7ff fef3 	bl	800ef60 <mem_to_ptr>
 800f17a:	4603      	mov	r3, r0
 800f17c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	881b      	ldrh	r3, [r3, #0]
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff feda 	bl	800ef3c <ptr_to_mem>
 800f188:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	885b      	ldrh	r3, [r3, #2]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7ff fed4 	bl	800ef3c <ptr_to_mem>
 800f194:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f19e:	d818      	bhi.n	800f1d2 <mem_link_valid+0x66>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	885b      	ldrh	r3, [r3, #2]
 800f1a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1a8:	d813      	bhi.n	800f1d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f1ae:	8afa      	ldrh	r2, [r7, #22]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d004      	beq.n	800f1be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	881b      	ldrh	r3, [r3, #0]
 800f1b8:	8afa      	ldrh	r2, [r7, #22]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d109      	bne.n	800f1d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f1be:	4b08      	ldr	r3, [pc, #32]	; (800f1e0 <mem_link_valid+0x74>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f1c2:	693a      	ldr	r2, [r7, #16]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d006      	beq.n	800f1d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	885b      	ldrh	r3, [r3, #2]
 800f1cc:	8afa      	ldrh	r2, [r7, #22]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d001      	beq.n	800f1d6 <mem_link_valid+0x6a>
    return 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	e000      	b.n	800f1d8 <mem_link_valid+0x6c>
  }
  return 1;
 800f1d6:	2301      	movs	r3, #1
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3718      	adds	r7, #24
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	2000a9b4 	.word	0x2000a9b4

0800f1e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b088      	sub	sp, #32
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d070      	beq.n	800f2d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f003 0303 	and.w	r3, r3, #3
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00d      	beq.n	800f218 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f1fc:	4b37      	ldr	r3, [pc, #220]	; (800f2dc <mem_free+0xf8>)
 800f1fe:	f240 2273 	movw	r2, #627	; 0x273
 800f202:	4937      	ldr	r1, [pc, #220]	; (800f2e0 <mem_free+0xfc>)
 800f204:	4837      	ldr	r0, [pc, #220]	; (800f2e4 <mem_free+0x100>)
 800f206:	f00a fb37 	bl	8019878 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f20a:	f00a f921 	bl	8019450 <sys_arch_protect>
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f00a f92b 	bl	801946c <sys_arch_unprotect>
    return;
 800f216:	e05e      	b.n	800f2d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3b08      	subs	r3, #8
 800f21c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f21e:	4b32      	ldr	r3, [pc, #200]	; (800f2e8 <mem_free+0x104>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	69fa      	ldr	r2, [r7, #28]
 800f224:	429a      	cmp	r2, r3
 800f226:	d306      	bcc.n	800f236 <mem_free+0x52>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f103 020c 	add.w	r2, r3, #12
 800f22e:	4b2f      	ldr	r3, [pc, #188]	; (800f2ec <mem_free+0x108>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	429a      	cmp	r2, r3
 800f234:	d90d      	bls.n	800f252 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f236:	4b29      	ldr	r3, [pc, #164]	; (800f2dc <mem_free+0xf8>)
 800f238:	f240 227f 	movw	r2, #639	; 0x27f
 800f23c:	492c      	ldr	r1, [pc, #176]	; (800f2f0 <mem_free+0x10c>)
 800f23e:	4829      	ldr	r0, [pc, #164]	; (800f2e4 <mem_free+0x100>)
 800f240:	f00a fb1a 	bl	8019878 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f244:	f00a f904 	bl	8019450 <sys_arch_protect>
 800f248:	6138      	str	r0, [r7, #16]
 800f24a:	6938      	ldr	r0, [r7, #16]
 800f24c:	f00a f90e 	bl	801946c <sys_arch_unprotect>
    return;
 800f250:	e041      	b.n	800f2d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f252:	4828      	ldr	r0, [pc, #160]	; (800f2f4 <mem_free+0x110>)
 800f254:	f00a f8c0 	bl	80193d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	791b      	ldrb	r3, [r3, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d110      	bne.n	800f282 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f260:	4b1e      	ldr	r3, [pc, #120]	; (800f2dc <mem_free+0xf8>)
 800f262:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f266:	4924      	ldr	r1, [pc, #144]	; (800f2f8 <mem_free+0x114>)
 800f268:	481e      	ldr	r0, [pc, #120]	; (800f2e4 <mem_free+0x100>)
 800f26a:	f00a fb05 	bl	8019878 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f26e:	4821      	ldr	r0, [pc, #132]	; (800f2f4 <mem_free+0x110>)
 800f270:	f00a f8c1 	bl	80193f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f274:	f00a f8ec 	bl	8019450 <sys_arch_protect>
 800f278:	6178      	str	r0, [r7, #20]
 800f27a:	6978      	ldr	r0, [r7, #20]
 800f27c:	f00a f8f6 	bl	801946c <sys_arch_unprotect>
    return;
 800f280:	e029      	b.n	800f2d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f282:	69f8      	ldr	r0, [r7, #28]
 800f284:	f7ff ff72 	bl	800f16c <mem_link_valid>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d110      	bne.n	800f2b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f28e:	4b13      	ldr	r3, [pc, #76]	; (800f2dc <mem_free+0xf8>)
 800f290:	f240 2295 	movw	r2, #661	; 0x295
 800f294:	4919      	ldr	r1, [pc, #100]	; (800f2fc <mem_free+0x118>)
 800f296:	4813      	ldr	r0, [pc, #76]	; (800f2e4 <mem_free+0x100>)
 800f298:	f00a faee 	bl	8019878 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f29c:	4815      	ldr	r0, [pc, #84]	; (800f2f4 <mem_free+0x110>)
 800f29e:	f00a f8aa 	bl	80193f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f2a2:	f00a f8d5 	bl	8019450 <sys_arch_protect>
 800f2a6:	61b8      	str	r0, [r7, #24]
 800f2a8:	69b8      	ldr	r0, [r7, #24]
 800f2aa:	f00a f8df 	bl	801946c <sys_arch_unprotect>
    return;
 800f2ae:	e012      	b.n	800f2d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f2b6:	4b12      	ldr	r3, [pc, #72]	; (800f300 <mem_free+0x11c>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	69fa      	ldr	r2, [r7, #28]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d202      	bcs.n	800f2c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f2c0:	4a0f      	ldr	r2, [pc, #60]	; (800f300 <mem_free+0x11c>)
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f2c6:	69f8      	ldr	r0, [r7, #28]
 800f2c8:	f7ff fe5c 	bl	800ef84 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f2cc:	4809      	ldr	r0, [pc, #36]	; (800f2f4 <mem_free+0x110>)
 800f2ce:	f00a f892 	bl	80193f6 <sys_mutex_unlock>
 800f2d2:	e000      	b.n	800f2d6 <mem_free+0xf2>
    return;
 800f2d4:	bf00      	nop
}
 800f2d6:	3720      	adds	r7, #32
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	0801af2c 	.word	0x0801af2c
 800f2e0:	0801b01c 	.word	0x0801b01c
 800f2e4:	0801af74 	.word	0x0801af74
 800f2e8:	2000a9b0 	.word	0x2000a9b0
 800f2ec:	2000a9b4 	.word	0x2000a9b4
 800f2f0:	0801b040 	.word	0x0801b040
 800f2f4:	2000a9b8 	.word	0x2000a9b8
 800f2f8:	0801b05c 	.word	0x0801b05c
 800f2fc:	0801b084 	.word	0x0801b084
 800f300:	2000a9bc 	.word	0x2000a9bc

0800f304 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b088      	sub	sp, #32
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	460b      	mov	r3, r1
 800f30e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f310:	887b      	ldrh	r3, [r7, #2]
 800f312:	3303      	adds	r3, #3
 800f314:	b29b      	uxth	r3, r3
 800f316:	f023 0303 	bic.w	r3, r3, #3
 800f31a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f31c:	8bfb      	ldrh	r3, [r7, #30]
 800f31e:	2b0b      	cmp	r3, #11
 800f320:	d801      	bhi.n	800f326 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f322:	230c      	movs	r3, #12
 800f324:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f326:	8bfb      	ldrh	r3, [r7, #30]
 800f328:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f32c:	d803      	bhi.n	800f336 <mem_trim+0x32>
 800f32e:	8bfa      	ldrh	r2, [r7, #30]
 800f330:	887b      	ldrh	r3, [r7, #2]
 800f332:	429a      	cmp	r2, r3
 800f334:	d201      	bcs.n	800f33a <mem_trim+0x36>
    return NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	e0d8      	b.n	800f4ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f33a:	4b6e      	ldr	r3, [pc, #440]	; (800f4f4 <mem_trim+0x1f0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	429a      	cmp	r2, r3
 800f342:	d304      	bcc.n	800f34e <mem_trim+0x4a>
 800f344:	4b6c      	ldr	r3, [pc, #432]	; (800f4f8 <mem_trim+0x1f4>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d306      	bcc.n	800f35c <mem_trim+0x58>
 800f34e:	4b6b      	ldr	r3, [pc, #428]	; (800f4fc <mem_trim+0x1f8>)
 800f350:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f354:	496a      	ldr	r1, [pc, #424]	; (800f500 <mem_trim+0x1fc>)
 800f356:	486b      	ldr	r0, [pc, #428]	; (800f504 <mem_trim+0x200>)
 800f358:	f00a fa8e 	bl	8019878 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f35c:	4b65      	ldr	r3, [pc, #404]	; (800f4f4 <mem_trim+0x1f0>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	429a      	cmp	r2, r3
 800f364:	d304      	bcc.n	800f370 <mem_trim+0x6c>
 800f366:	4b64      	ldr	r3, [pc, #400]	; (800f4f8 <mem_trim+0x1f4>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d307      	bcc.n	800f380 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f370:	f00a f86e 	bl	8019450 <sys_arch_protect>
 800f374:	60b8      	str	r0, [r7, #8]
 800f376:	68b8      	ldr	r0, [r7, #8]
 800f378:	f00a f878 	bl	801946c <sys_arch_unprotect>
    return rmem;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	e0b5      	b.n	800f4ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	3b08      	subs	r3, #8
 800f384:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f386:	69b8      	ldr	r0, [r7, #24]
 800f388:	f7ff fdea 	bl	800ef60 <mem_to_ptr>
 800f38c:	4603      	mov	r3, r0
 800f38e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	881a      	ldrh	r2, [r3, #0]
 800f394:	8afb      	ldrh	r3, [r7, #22]
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	b29b      	uxth	r3, r3
 800f39a:	3b08      	subs	r3, #8
 800f39c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f39e:	8bfa      	ldrh	r2, [r7, #30]
 800f3a0:	8abb      	ldrh	r3, [r7, #20]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d906      	bls.n	800f3b4 <mem_trim+0xb0>
 800f3a6:	4b55      	ldr	r3, [pc, #340]	; (800f4fc <mem_trim+0x1f8>)
 800f3a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f3ac:	4956      	ldr	r1, [pc, #344]	; (800f508 <mem_trim+0x204>)
 800f3ae:	4855      	ldr	r0, [pc, #340]	; (800f504 <mem_trim+0x200>)
 800f3b0:	f00a fa62 	bl	8019878 <iprintf>
  if (newsize > size) {
 800f3b4:	8bfa      	ldrh	r2, [r7, #30]
 800f3b6:	8abb      	ldrh	r3, [r7, #20]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d901      	bls.n	800f3c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	e095      	b.n	800f4ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f3c0:	8bfa      	ldrh	r2, [r7, #30]
 800f3c2:	8abb      	ldrh	r3, [r7, #20]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d101      	bne.n	800f3cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	e08f      	b.n	800f4ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f3cc:	484f      	ldr	r0, [pc, #316]	; (800f50c <mem_trim+0x208>)
 800f3ce:	f00a f803 	bl	80193d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff fdb0 	bl	800ef3c <ptr_to_mem>
 800f3dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	791b      	ldrb	r3, [r3, #4]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d13f      	bne.n	800f466 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f3ee:	d106      	bne.n	800f3fe <mem_trim+0xfa>
 800f3f0:	4b42      	ldr	r3, [pc, #264]	; (800f4fc <mem_trim+0x1f8>)
 800f3f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f3f6:	4946      	ldr	r1, [pc, #280]	; (800f510 <mem_trim+0x20c>)
 800f3f8:	4842      	ldr	r0, [pc, #264]	; (800f504 <mem_trim+0x200>)
 800f3fa:	f00a fa3d 	bl	8019878 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f404:	8afa      	ldrh	r2, [r7, #22]
 800f406:	8bfb      	ldrh	r3, [r7, #30]
 800f408:	4413      	add	r3, r2
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	3308      	adds	r3, #8
 800f40e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f410:	4b40      	ldr	r3, [pc, #256]	; (800f514 <mem_trim+0x210>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	693a      	ldr	r2, [r7, #16]
 800f416:	429a      	cmp	r2, r3
 800f418:	d106      	bne.n	800f428 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f41a:	89fb      	ldrh	r3, [r7, #14]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff fd8d 	bl	800ef3c <ptr_to_mem>
 800f422:	4603      	mov	r3, r0
 800f424:	4a3b      	ldr	r2, [pc, #236]	; (800f514 <mem_trim+0x210>)
 800f426:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f428:	89fb      	ldrh	r3, [r7, #14]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7ff fd86 	bl	800ef3c <ptr_to_mem>
 800f430:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	2200      	movs	r2, #0
 800f436:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	89ba      	ldrh	r2, [r7, #12]
 800f43c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	8afa      	ldrh	r2, [r7, #22]
 800f442:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	89fa      	ldrh	r2, [r7, #14]
 800f448:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f452:	d047      	beq.n	800f4e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	4618      	mov	r0, r3
 800f45a:	f7ff fd6f 	bl	800ef3c <ptr_to_mem>
 800f45e:	4602      	mov	r2, r0
 800f460:	89fb      	ldrh	r3, [r7, #14]
 800f462:	8053      	strh	r3, [r2, #2]
 800f464:	e03e      	b.n	800f4e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f466:	8bfb      	ldrh	r3, [r7, #30]
 800f468:	f103 0214 	add.w	r2, r3, #20
 800f46c:	8abb      	ldrh	r3, [r7, #20]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d838      	bhi.n	800f4e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f472:	8afa      	ldrh	r2, [r7, #22]
 800f474:	8bfb      	ldrh	r3, [r7, #30]
 800f476:	4413      	add	r3, r2
 800f478:	b29b      	uxth	r3, r3
 800f47a:	3308      	adds	r3, #8
 800f47c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f47e:	69bb      	ldr	r3, [r7, #24]
 800f480:	881b      	ldrh	r3, [r3, #0]
 800f482:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f486:	d106      	bne.n	800f496 <mem_trim+0x192>
 800f488:	4b1c      	ldr	r3, [pc, #112]	; (800f4fc <mem_trim+0x1f8>)
 800f48a:	f240 3216 	movw	r2, #790	; 0x316
 800f48e:	4920      	ldr	r1, [pc, #128]	; (800f510 <mem_trim+0x20c>)
 800f490:	481c      	ldr	r0, [pc, #112]	; (800f504 <mem_trim+0x200>)
 800f492:	f00a f9f1 	bl	8019878 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f496:	89fb      	ldrh	r3, [r7, #14]
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff fd4f 	bl	800ef3c <ptr_to_mem>
 800f49e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f4a0:	4b1c      	ldr	r3, [pc, #112]	; (800f514 <mem_trim+0x210>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	693a      	ldr	r2, [r7, #16]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d202      	bcs.n	800f4b0 <mem_trim+0x1ac>
      lfree = mem2;
 800f4aa:	4a1a      	ldr	r2, [pc, #104]	; (800f514 <mem_trim+0x210>)
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	881a      	ldrh	r2, [r3, #0]
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	8afa      	ldrh	r2, [r7, #22]
 800f4c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	89fa      	ldrh	r2, [r7, #14]
 800f4c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	881b      	ldrh	r3, [r3, #0]
 800f4ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f4d2:	d007      	beq.n	800f4e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	881b      	ldrh	r3, [r3, #0]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7ff fd2f 	bl	800ef3c <ptr_to_mem>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	89fb      	ldrh	r3, [r7, #14]
 800f4e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f4e4:	4809      	ldr	r0, [pc, #36]	; (800f50c <mem_trim+0x208>)
 800f4e6:	f009 ff86 	bl	80193f6 <sys_mutex_unlock>
  return rmem;
 800f4ea:	687b      	ldr	r3, [r7, #4]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3720      	adds	r7, #32
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	2000a9b0 	.word	0x2000a9b0
 800f4f8:	2000a9b4 	.word	0x2000a9b4
 800f4fc:	0801af2c 	.word	0x0801af2c
 800f500:	0801b0b8 	.word	0x0801b0b8
 800f504:	0801af74 	.word	0x0801af74
 800f508:	0801b0d0 	.word	0x0801b0d0
 800f50c:	2000a9b8 	.word	0x2000a9b8
 800f510:	0801b0f0 	.word	0x0801b0f0
 800f514:	2000a9bc 	.word	0x2000a9bc

0800f518 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b088      	sub	sp, #32
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	4603      	mov	r3, r0
 800f520:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f522:	88fb      	ldrh	r3, [r7, #6]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <mem_malloc+0x14>
    return NULL;
 800f528:	2300      	movs	r3, #0
 800f52a:	e0e2      	b.n	800f6f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f52c:	88fb      	ldrh	r3, [r7, #6]
 800f52e:	3303      	adds	r3, #3
 800f530:	b29b      	uxth	r3, r3
 800f532:	f023 0303 	bic.w	r3, r3, #3
 800f536:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f538:	8bbb      	ldrh	r3, [r7, #28]
 800f53a:	2b0b      	cmp	r3, #11
 800f53c:	d801      	bhi.n	800f542 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f53e:	230c      	movs	r3, #12
 800f540:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f542:	8bbb      	ldrh	r3, [r7, #28]
 800f544:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f548:	d803      	bhi.n	800f552 <mem_malloc+0x3a>
 800f54a:	8bba      	ldrh	r2, [r7, #28]
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d201      	bcs.n	800f556 <mem_malloc+0x3e>
    return NULL;
 800f552:	2300      	movs	r3, #0
 800f554:	e0cd      	b.n	800f6f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f556:	4869      	ldr	r0, [pc, #420]	; (800f6fc <mem_malloc+0x1e4>)
 800f558:	f009 ff3e 	bl	80193d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f55c:	4b68      	ldr	r3, [pc, #416]	; (800f700 <mem_malloc+0x1e8>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff fcfd 	bl	800ef60 <mem_to_ptr>
 800f566:	4603      	mov	r3, r0
 800f568:	83fb      	strh	r3, [r7, #30]
 800f56a:	e0b7      	b.n	800f6dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f56c:	8bfb      	ldrh	r3, [r7, #30]
 800f56e:	4618      	mov	r0, r3
 800f570:	f7ff fce4 	bl	800ef3c <ptr_to_mem>
 800f574:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	791b      	ldrb	r3, [r3, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f040 80a7 	bne.w	800f6ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	461a      	mov	r2, r3
 800f586:	8bfb      	ldrh	r3, [r7, #30]
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	f1a3 0208 	sub.w	r2, r3, #8
 800f58e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f590:	429a      	cmp	r2, r3
 800f592:	f0c0 809c 	bcc.w	800f6ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	881b      	ldrh	r3, [r3, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	8bfb      	ldrh	r3, [r7, #30]
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	f1a3 0208 	sub.w	r2, r3, #8
 800f5a4:	8bbb      	ldrh	r3, [r7, #28]
 800f5a6:	3314      	adds	r3, #20
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d333      	bcc.n	800f614 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f5ac:	8bfa      	ldrh	r2, [r7, #30]
 800f5ae:	8bbb      	ldrh	r3, [r7, #28]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	3308      	adds	r3, #8
 800f5b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f5b8:	8a7b      	ldrh	r3, [r7, #18]
 800f5ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5be:	d106      	bne.n	800f5ce <mem_malloc+0xb6>
 800f5c0:	4b50      	ldr	r3, [pc, #320]	; (800f704 <mem_malloc+0x1ec>)
 800f5c2:	f240 3287 	movw	r2, #903	; 0x387
 800f5c6:	4950      	ldr	r1, [pc, #320]	; (800f708 <mem_malloc+0x1f0>)
 800f5c8:	4850      	ldr	r0, [pc, #320]	; (800f70c <mem_malloc+0x1f4>)
 800f5ca:	f00a f955 	bl	8019878 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f5ce:	8a7b      	ldrh	r3, [r7, #18]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fcb3 	bl	800ef3c <ptr_to_mem>
 800f5d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	881a      	ldrh	r2, [r3, #0]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	8bfa      	ldrh	r2, [r7, #30]
 800f5ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	8a7a      	ldrh	r2, [r7, #18]
 800f5f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f600:	d00b      	beq.n	800f61a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	4618      	mov	r0, r3
 800f608:	f7ff fc98 	bl	800ef3c <ptr_to_mem>
 800f60c:	4602      	mov	r2, r0
 800f60e:	8a7b      	ldrh	r3, [r7, #18]
 800f610:	8053      	strh	r3, [r2, #2]
 800f612:	e002      	b.n	800f61a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	2201      	movs	r2, #1
 800f618:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f61a:	4b39      	ldr	r3, [pc, #228]	; (800f700 <mem_malloc+0x1e8>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	697a      	ldr	r2, [r7, #20]
 800f620:	429a      	cmp	r2, r3
 800f622:	d127      	bne.n	800f674 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f624:	4b36      	ldr	r3, [pc, #216]	; (800f700 <mem_malloc+0x1e8>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f62a:	e005      	b.n	800f638 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	4618      	mov	r0, r3
 800f632:	f7ff fc83 	bl	800ef3c <ptr_to_mem>
 800f636:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f638:	69bb      	ldr	r3, [r7, #24]
 800f63a:	791b      	ldrb	r3, [r3, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d004      	beq.n	800f64a <mem_malloc+0x132>
 800f640:	4b33      	ldr	r3, [pc, #204]	; (800f710 <mem_malloc+0x1f8>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	429a      	cmp	r2, r3
 800f648:	d1f0      	bne.n	800f62c <mem_malloc+0x114>
          }
          lfree = cur;
 800f64a:	4a2d      	ldr	r2, [pc, #180]	; (800f700 <mem_malloc+0x1e8>)
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f650:	4b2b      	ldr	r3, [pc, #172]	; (800f700 <mem_malloc+0x1e8>)
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	4b2e      	ldr	r3, [pc, #184]	; (800f710 <mem_malloc+0x1f8>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d00b      	beq.n	800f674 <mem_malloc+0x15c>
 800f65c:	4b28      	ldr	r3, [pc, #160]	; (800f700 <mem_malloc+0x1e8>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	791b      	ldrb	r3, [r3, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d006      	beq.n	800f674 <mem_malloc+0x15c>
 800f666:	4b27      	ldr	r3, [pc, #156]	; (800f704 <mem_malloc+0x1ec>)
 800f668:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f66c:	4929      	ldr	r1, [pc, #164]	; (800f714 <mem_malloc+0x1fc>)
 800f66e:	4827      	ldr	r0, [pc, #156]	; (800f70c <mem_malloc+0x1f4>)
 800f670:	f00a f902 	bl	8019878 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f674:	4821      	ldr	r0, [pc, #132]	; (800f6fc <mem_malloc+0x1e4>)
 800f676:	f009 febe 	bl	80193f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f67a:	8bba      	ldrh	r2, [r7, #28]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	4413      	add	r3, r2
 800f680:	3308      	adds	r3, #8
 800f682:	4a23      	ldr	r2, [pc, #140]	; (800f710 <mem_malloc+0x1f8>)
 800f684:	6812      	ldr	r2, [r2, #0]
 800f686:	4293      	cmp	r3, r2
 800f688:	d906      	bls.n	800f698 <mem_malloc+0x180>
 800f68a:	4b1e      	ldr	r3, [pc, #120]	; (800f704 <mem_malloc+0x1ec>)
 800f68c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f690:	4921      	ldr	r1, [pc, #132]	; (800f718 <mem_malloc+0x200>)
 800f692:	481e      	ldr	r0, [pc, #120]	; (800f70c <mem_malloc+0x1f4>)
 800f694:	f00a f8f0 	bl	8019878 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	f003 0303 	and.w	r3, r3, #3
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d006      	beq.n	800f6b0 <mem_malloc+0x198>
 800f6a2:	4b18      	ldr	r3, [pc, #96]	; (800f704 <mem_malloc+0x1ec>)
 800f6a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f6a8:	491c      	ldr	r1, [pc, #112]	; (800f71c <mem_malloc+0x204>)
 800f6aa:	4818      	ldr	r0, [pc, #96]	; (800f70c <mem_malloc+0x1f4>)
 800f6ac:	f00a f8e4 	bl	8019878 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	f003 0303 	and.w	r3, r3, #3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d006      	beq.n	800f6c8 <mem_malloc+0x1b0>
 800f6ba:	4b12      	ldr	r3, [pc, #72]	; (800f704 <mem_malloc+0x1ec>)
 800f6bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f6c0:	4917      	ldr	r1, [pc, #92]	; (800f720 <mem_malloc+0x208>)
 800f6c2:	4812      	ldr	r0, [pc, #72]	; (800f70c <mem_malloc+0x1f4>)
 800f6c4:	f00a f8d8 	bl	8019878 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	3308      	adds	r3, #8
 800f6cc:	e011      	b.n	800f6f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f6ce:	8bfb      	ldrh	r3, [r7, #30]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7ff fc33 	bl	800ef3c <ptr_to_mem>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	881b      	ldrh	r3, [r3, #0]
 800f6da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f6dc:	8bfa      	ldrh	r2, [r7, #30]
 800f6de:	8bbb      	ldrh	r3, [r7, #28]
 800f6e0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	f4ff af41 	bcc.w	800f56c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f6ea:	4804      	ldr	r0, [pc, #16]	; (800f6fc <mem_malloc+0x1e4>)
 800f6ec:	f009 fe83 	bl	80193f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3720      	adds	r7, #32
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	2000a9b8 	.word	0x2000a9b8
 800f700:	2000a9bc 	.word	0x2000a9bc
 800f704:	0801af2c 	.word	0x0801af2c
 800f708:	0801b0f0 	.word	0x0801b0f0
 800f70c:	0801af74 	.word	0x0801af74
 800f710:	2000a9b4 	.word	0x2000a9b4
 800f714:	0801b104 	.word	0x0801b104
 800f718:	0801b120 	.word	0x0801b120
 800f71c:	0801b150 	.word	0x0801b150
 800f720:	0801b180 	.word	0x0801b180

0800f724 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	2200      	movs	r2, #0
 800f732:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	3303      	adds	r3, #3
 800f73a:	f023 0303 	bic.w	r3, r3, #3
 800f73e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f740:	2300      	movs	r3, #0
 800f742:	60fb      	str	r3, [r7, #12]
 800f744:	e011      	b.n	800f76a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	461a      	mov	r2, r3
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	4413      	add	r3, r2
 800f762:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3301      	adds	r3, #1
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	885b      	ldrh	r3, [r3, #2]
 800f76e:	461a      	mov	r2, r3
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	4293      	cmp	r3, r2
 800f774:	dbe7      	blt.n	800f746 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f776:	bf00      	nop
 800f778:	bf00      	nop
 800f77a:	3714      	adds	r7, #20
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f78a:	2300      	movs	r3, #0
 800f78c:	80fb      	strh	r3, [r7, #6]
 800f78e:	e009      	b.n	800f7a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f790:	88fb      	ldrh	r3, [r7, #6]
 800f792:	4a08      	ldr	r2, [pc, #32]	; (800f7b4 <memp_init+0x30>)
 800f794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f798:	4618      	mov	r0, r3
 800f79a:	f7ff ffc3 	bl	800f724 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f79e:	88fb      	ldrh	r3, [r7, #6]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	80fb      	strh	r3, [r7, #6]
 800f7a4:	88fb      	ldrh	r3, [r7, #6]
 800f7a6:	2b0c      	cmp	r3, #12
 800f7a8:	d9f2      	bls.n	800f790 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f7aa:	bf00      	nop
 800f7ac:	bf00      	nop
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	0801da34 	.word	0x0801da34

0800f7b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f7c0:	f009 fe46 	bl	8019450 <sys_arch_protect>
 800f7c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d015      	beq.n	800f800 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	6812      	ldr	r2, [r2, #0]
 800f7dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	f003 0303 	and.w	r3, r3, #3
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d006      	beq.n	800f7f6 <do_memp_malloc_pool+0x3e>
 800f7e8:	4b09      	ldr	r3, [pc, #36]	; (800f810 <do_memp_malloc_pool+0x58>)
 800f7ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f7ee:	4909      	ldr	r1, [pc, #36]	; (800f814 <do_memp_malloc_pool+0x5c>)
 800f7f0:	4809      	ldr	r0, [pc, #36]	; (800f818 <do_memp_malloc_pool+0x60>)
 800f7f2:	f00a f841 	bl	8019878 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f009 fe38 	bl	801946c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	e003      	b.n	800f808 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f009 fe33 	bl	801946c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	0801b1a4 	.word	0x0801b1a4
 800f814:	0801b1d4 	.word	0x0801b1d4
 800f818:	0801b1f8 	.word	0x0801b1f8

0800f81c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d106      	bne.n	800f838 <memp_malloc_pool+0x1c>
 800f82a:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <memp_malloc_pool+0x38>)
 800f82c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f830:	4909      	ldr	r1, [pc, #36]	; (800f858 <memp_malloc_pool+0x3c>)
 800f832:	480a      	ldr	r0, [pc, #40]	; (800f85c <memp_malloc_pool+0x40>)
 800f834:	f00a f820 	bl	8019878 <iprintf>
  if (desc == NULL) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d101      	bne.n	800f842 <memp_malloc_pool+0x26>
    return NULL;
 800f83e:	2300      	movs	r3, #0
 800f840:	e003      	b.n	800f84a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7ff ffb8 	bl	800f7b8 <do_memp_malloc_pool>
 800f848:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	0801b1a4 	.word	0x0801b1a4
 800f858:	0801b220 	.word	0x0801b220
 800f85c:	0801b1f8 	.word	0x0801b1f8

0800f860 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	4603      	mov	r3, r0
 800f868:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f86a:	79fb      	ldrb	r3, [r7, #7]
 800f86c:	2b0c      	cmp	r3, #12
 800f86e:	d908      	bls.n	800f882 <memp_malloc+0x22>
 800f870:	4b0a      	ldr	r3, [pc, #40]	; (800f89c <memp_malloc+0x3c>)
 800f872:	f240 1257 	movw	r2, #343	; 0x157
 800f876:	490a      	ldr	r1, [pc, #40]	; (800f8a0 <memp_malloc+0x40>)
 800f878:	480a      	ldr	r0, [pc, #40]	; (800f8a4 <memp_malloc+0x44>)
 800f87a:	f009 fffd 	bl	8019878 <iprintf>
 800f87e:	2300      	movs	r3, #0
 800f880:	e008      	b.n	800f894 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f882:	79fb      	ldrb	r3, [r7, #7]
 800f884:	4a08      	ldr	r2, [pc, #32]	; (800f8a8 <memp_malloc+0x48>)
 800f886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7ff ff94 	bl	800f7b8 <do_memp_malloc_pool>
 800f890:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f892:	68fb      	ldr	r3, [r7, #12]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	0801b1a4 	.word	0x0801b1a4
 800f8a0:	0801b234 	.word	0x0801b234
 800f8a4:	0801b1f8 	.word	0x0801b1f8
 800f8a8:	0801da34 	.word	0x0801da34

0800f8ac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	f003 0303 	and.w	r3, r3, #3
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d006      	beq.n	800f8ce <do_memp_free_pool+0x22>
 800f8c0:	4b0d      	ldr	r3, [pc, #52]	; (800f8f8 <do_memp_free_pool+0x4c>)
 800f8c2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f8c6:	490d      	ldr	r1, [pc, #52]	; (800f8fc <do_memp_free_pool+0x50>)
 800f8c8:	480d      	ldr	r0, [pc, #52]	; (800f900 <do_memp_free_pool+0x54>)
 800f8ca:	f009 ffd5 	bl	8019878 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f8d2:	f009 fdbd 	bl	8019450 <sys_arch_protect>
 800f8d6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f8ea:	68b8      	ldr	r0, [r7, #8]
 800f8ec:	f009 fdbe 	bl	801946c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f8f0:	bf00      	nop
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	0801b1a4 	.word	0x0801b1a4
 800f8fc:	0801b254 	.word	0x0801b254
 800f900:	0801b1f8 	.word	0x0801b1f8

0800f904 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d106      	bne.n	800f922 <memp_free_pool+0x1e>
 800f914:	4b0a      	ldr	r3, [pc, #40]	; (800f940 <memp_free_pool+0x3c>)
 800f916:	f240 1295 	movw	r2, #405	; 0x195
 800f91a:	490a      	ldr	r1, [pc, #40]	; (800f944 <memp_free_pool+0x40>)
 800f91c:	480a      	ldr	r0, [pc, #40]	; (800f948 <memp_free_pool+0x44>)
 800f91e:	f009 ffab 	bl	8019878 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d007      	beq.n	800f938 <memp_free_pool+0x34>
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d004      	beq.n	800f938 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f92e:	6839      	ldr	r1, [r7, #0]
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff ffbb 	bl	800f8ac <do_memp_free_pool>
 800f936:	e000      	b.n	800f93a <memp_free_pool+0x36>
    return;
 800f938:	bf00      	nop
}
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	0801b1a4 	.word	0x0801b1a4
 800f944:	0801b220 	.word	0x0801b220
 800f948:	0801b1f8 	.word	0x0801b1f8

0800f94c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	6039      	str	r1, [r7, #0]
 800f956:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	2b0c      	cmp	r3, #12
 800f95c:	d907      	bls.n	800f96e <memp_free+0x22>
 800f95e:	4b0c      	ldr	r3, [pc, #48]	; (800f990 <memp_free+0x44>)
 800f960:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f964:	490b      	ldr	r1, [pc, #44]	; (800f994 <memp_free+0x48>)
 800f966:	480c      	ldr	r0, [pc, #48]	; (800f998 <memp_free+0x4c>)
 800f968:	f009 ff86 	bl	8019878 <iprintf>
 800f96c:	e00c      	b.n	800f988 <memp_free+0x3c>

  if (mem == NULL) {
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d008      	beq.n	800f986 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	4a09      	ldr	r2, [pc, #36]	; (800f99c <memp_free+0x50>)
 800f978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f97c:	6839      	ldr	r1, [r7, #0]
 800f97e:	4618      	mov	r0, r3
 800f980:	f7ff ff94 	bl	800f8ac <do_memp_free_pool>
 800f984:	e000      	b.n	800f988 <memp_free+0x3c>
    return;
 800f986:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	0801b1a4 	.word	0x0801b1a4
 800f994:	0801b274 	.word	0x0801b274
 800f998:	0801b1f8 	.word	0x0801b1f8
 800f99c:	0801da34 	.word	0x0801da34

0800f9a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f9a4:	bf00      	nop
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
	...

0800f9b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b086      	sub	sp, #24
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
 800f9bc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d108      	bne.n	800f9d6 <netif_add+0x26>
 800f9c4:	4b57      	ldr	r3, [pc, #348]	; (800fb24 <netif_add+0x174>)
 800f9c6:	f240 1227 	movw	r2, #295	; 0x127
 800f9ca:	4957      	ldr	r1, [pc, #348]	; (800fb28 <netif_add+0x178>)
 800f9cc:	4857      	ldr	r0, [pc, #348]	; (800fb2c <netif_add+0x17c>)
 800f9ce:	f009 ff53 	bl	8019878 <iprintf>
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	e0a2      	b.n	800fb1c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d108      	bne.n	800f9ee <netif_add+0x3e>
 800f9dc:	4b51      	ldr	r3, [pc, #324]	; (800fb24 <netif_add+0x174>)
 800f9de:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f9e2:	4953      	ldr	r1, [pc, #332]	; (800fb30 <netif_add+0x180>)
 800f9e4:	4851      	ldr	r0, [pc, #324]	; (800fb2c <netif_add+0x17c>)
 800f9e6:	f009 ff47 	bl	8019878 <iprintf>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e096      	b.n	800fb1c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f9f4:	4b4f      	ldr	r3, [pc, #316]	; (800fb34 <netif_add+0x184>)
 800f9f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d101      	bne.n	800fa02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f9fe:	4b4d      	ldr	r3, [pc, #308]	; (800fb34 <netif_add+0x184>)
 800fa00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d101      	bne.n	800fa0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fa08:	4b4a      	ldr	r3, [pc, #296]	; (800fb34 <netif_add+0x184>)
 800fa0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2200      	movs	r2, #0
 800fa16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	4a45      	ldr	r2, [pc, #276]	; (800fb38 <netif_add+0x188>)
 800fa22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2200      	movs	r2, #0
 800fa28:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2200      	movs	r2, #0
 800fa36:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6a3a      	ldr	r2, [r7, #32]
 800fa3c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fa3e:	4b3f      	ldr	r3, [pc, #252]	; (800fb3c <netif_add+0x18c>)
 800fa40:	781a      	ldrb	r2, [r3, #0]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa4c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	68b9      	ldr	r1, [r7, #8]
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f000 f913 	bl	800fc80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	4798      	blx	r3
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <netif_add+0xba>
    return NULL;
 800fa66:	2300      	movs	r3, #0
 800fa68:	e058      	b.n	800fb1c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa70:	2bff      	cmp	r3, #255	; 0xff
 800fa72:	d103      	bne.n	800fa7c <netif_add+0xcc>
        netif->num = 0;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fa80:	4b2f      	ldr	r3, [pc, #188]	; (800fb40 <netif_add+0x190>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	617b      	str	r3, [r7, #20]
 800fa86:	e02b      	b.n	800fae0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d106      	bne.n	800fa9e <netif_add+0xee>
 800fa90:	4b24      	ldr	r3, [pc, #144]	; (800fb24 <netif_add+0x174>)
 800fa92:	f240 128b 	movw	r2, #395	; 0x18b
 800fa96:	492b      	ldr	r1, [pc, #172]	; (800fb44 <netif_add+0x194>)
 800fa98:	4824      	ldr	r0, [pc, #144]	; (800fb2c <netif_add+0x17c>)
 800fa9a:	f009 feed 	bl	8019878 <iprintf>
        num_netifs++;
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	3301      	adds	r3, #1
 800faa2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	2bff      	cmp	r3, #255	; 0xff
 800faa8:	dd06      	ble.n	800fab8 <netif_add+0x108>
 800faaa:	4b1e      	ldr	r3, [pc, #120]	; (800fb24 <netif_add+0x174>)
 800faac:	f240 128d 	movw	r2, #397	; 0x18d
 800fab0:	4925      	ldr	r1, [pc, #148]	; (800fb48 <netif_add+0x198>)
 800fab2:	481e      	ldr	r0, [pc, #120]	; (800fb2c <netif_add+0x17c>)
 800fab4:	f009 fee0 	bl	8019878 <iprintf>
        if (netif2->num == netif->num) {
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d108      	bne.n	800fada <netif_add+0x12a>
          netif->num++;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800face:	3301      	adds	r3, #1
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800fad8:	e005      	b.n	800fae6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	617b      	str	r3, [r7, #20]
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d1d0      	bne.n	800fa88 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1be      	bne.n	800fa6a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800faf2:	2bfe      	cmp	r3, #254	; 0xfe
 800faf4:	d103      	bne.n	800fafe <netif_add+0x14e>
    netif_num = 0;
 800faf6:	4b11      	ldr	r3, [pc, #68]	; (800fb3c <netif_add+0x18c>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	e006      	b.n	800fb0c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb04:	3301      	adds	r3, #1
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	4b0c      	ldr	r3, [pc, #48]	; (800fb3c <netif_add+0x18c>)
 800fb0a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fb0c:	4b0c      	ldr	r3, [pc, #48]	; (800fb40 <netif_add+0x190>)
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fb14:	4a0a      	ldr	r2, [pc, #40]	; (800fb40 <netif_add+0x190>)
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3718      	adds	r7, #24
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	0801b290 	.word	0x0801b290
 800fb28:	0801b324 	.word	0x0801b324
 800fb2c:	0801b2e0 	.word	0x0801b2e0
 800fb30:	0801b340 	.word	0x0801b340
 800fb34:	0801daa8 	.word	0x0801daa8
 800fb38:	0800ff5b 	.word	0x0800ff5b
 800fb3c:	2000da94 	.word	0x2000da94
 800fb40:	2000da8c 	.word	0x2000da8c
 800fb44:	0801b364 	.word	0x0801b364
 800fb48:	0801b378 	.word	0x0801b378

0800fb4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fb56:	6839      	ldr	r1, [r7, #0]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f002 fc1f 	bl	801239c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f007 f8ab 	bl	8016cbc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fb66:	bf00      	nop
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
	...

0800fb70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d106      	bne.n	800fb90 <netif_do_set_ipaddr+0x20>
 800fb82:	4b1d      	ldr	r3, [pc, #116]	; (800fbf8 <netif_do_set_ipaddr+0x88>)
 800fb84:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fb88:	491c      	ldr	r1, [pc, #112]	; (800fbfc <netif_do_set_ipaddr+0x8c>)
 800fb8a:	481d      	ldr	r0, [pc, #116]	; (800fc00 <netif_do_set_ipaddr+0x90>)
 800fb8c:	f009 fe74 	bl	8019878 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d106      	bne.n	800fba4 <netif_do_set_ipaddr+0x34>
 800fb96:	4b18      	ldr	r3, [pc, #96]	; (800fbf8 <netif_do_set_ipaddr+0x88>)
 800fb98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fb9c:	4917      	ldr	r1, [pc, #92]	; (800fbfc <netif_do_set_ipaddr+0x8c>)
 800fb9e:	4818      	ldr	r0, [pc, #96]	; (800fc00 <netif_do_set_ipaddr+0x90>)
 800fba0:	f009 fe6a 	bl	8019878 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	3304      	adds	r3, #4
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d01c      	beq.n	800fbec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	3304      	adds	r3, #4
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fbc2:	f107 0314 	add.w	r3, r7, #20
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7ff ffbf 	bl	800fb4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d002      	beq.n	800fbda <netif_do_set_ipaddr+0x6a>
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	e000      	b.n	800fbdc <netif_do_set_ipaddr+0x6c>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fbe0:	2101      	movs	r1, #1
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	f000 f8d2 	bl	800fd8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e000      	b.n	800fbee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3718      	adds	r7, #24
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	0801b290 	.word	0x0801b290
 800fbfc:	0801b3a8 	.word	0x0801b3a8
 800fc00:	0801b2e0 	.word	0x0801b2e0

0800fc04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3308      	adds	r3, #8
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d00a      	beq.n	800fc34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d002      	beq.n	800fc2a <netif_do_set_netmask+0x26>
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	e000      	b.n	800fc2c <netif_do_set_netmask+0x28>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fc30:	2301      	movs	r3, #1
 800fc32:	e000      	b.n	800fc36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr

0800fc42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fc42:	b480      	push	{r7}
 800fc44:	b085      	sub	sp, #20
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	60f8      	str	r0, [r7, #12]
 800fc4a:	60b9      	str	r1, [r7, #8]
 800fc4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	330c      	adds	r3, #12
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d00a      	beq.n	800fc72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <netif_do_set_gw+0x26>
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	e000      	b.n	800fc6a <netif_do_set_gw+0x28>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e000      	b.n	800fc74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fc72:	2300      	movs	r3, #0
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3714      	adds	r7, #20
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b088      	sub	sp, #32
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
 800fc8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fc92:	2300      	movs	r3, #0
 800fc94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d101      	bne.n	800fca0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fc9c:	4b1c      	ldr	r3, [pc, #112]	; (800fd10 <netif_set_addr+0x90>)
 800fc9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d101      	bne.n	800fcaa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fca6:	4b1a      	ldr	r3, [pc, #104]	; (800fd10 <netif_set_addr+0x90>)
 800fca8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d101      	bne.n	800fcb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fcb0:	4b17      	ldr	r3, [pc, #92]	; (800fd10 <netif_set_addr+0x90>)
 800fcb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d003      	beq.n	800fcc2 <netif_set_addr+0x42>
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d101      	bne.n	800fcc6 <netif_set_addr+0x46>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	e000      	b.n	800fcc8 <netif_set_addr+0x48>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d006      	beq.n	800fcde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fcd0:	f107 0310 	add.w	r3, r7, #16
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	68b9      	ldr	r1, [r7, #8]
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f7ff ff49 	bl	800fb70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fcde:	69fa      	ldr	r2, [r7, #28]
 800fce0:	6879      	ldr	r1, [r7, #4]
 800fce2:	68f8      	ldr	r0, [r7, #12]
 800fce4:	f7ff ff8e 	bl	800fc04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fce8:	69ba      	ldr	r2, [r7, #24]
 800fcea:	6839      	ldr	r1, [r7, #0]
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f7ff ffa8 	bl	800fc42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d106      	bne.n	800fd06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fcf8:	f107 0310 	add.w	r3, r7, #16
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	68b9      	ldr	r1, [r7, #8]
 800fd00:	68f8      	ldr	r0, [r7, #12]
 800fd02:	f7ff ff35 	bl	800fb70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fd06:	bf00      	nop
 800fd08:	3720      	adds	r7, #32
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	0801daa8 	.word	0x0801daa8

0800fd14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fd1c:	4a04      	ldr	r2, [pc, #16]	; (800fd30 <netif_set_default+0x1c>)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fd22:	bf00      	nop
 800fd24:	370c      	adds	r7, #12
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	2000da90 	.word	0x2000da90

0800fd34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d107      	bne.n	800fd52 <netif_set_up+0x1e>
 800fd42:	4b0f      	ldr	r3, [pc, #60]	; (800fd80 <netif_set_up+0x4c>)
 800fd44:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fd48:	490e      	ldr	r1, [pc, #56]	; (800fd84 <netif_set_up+0x50>)
 800fd4a:	480f      	ldr	r0, [pc, #60]	; (800fd88 <netif_set_up+0x54>)
 800fd4c:	f009 fd94 	bl	8019878 <iprintf>
 800fd50:	e013      	b.n	800fd7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd58:	f003 0301 	and.w	r3, r3, #1
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d10c      	bne.n	800fd7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd66:	f043 0301 	orr.w	r3, r3, #1
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fd72:	2103      	movs	r1, #3
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f809 	bl	800fd8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	0801b290 	.word	0x0801b290
 800fd84:	0801b418 	.word	0x0801b418
 800fd88:	0801b2e0 	.word	0x0801b2e0

0800fd8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	460b      	mov	r3, r1
 800fd96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d106      	bne.n	800fdac <netif_issue_reports+0x20>
 800fd9e:	4b18      	ldr	r3, [pc, #96]	; (800fe00 <netif_issue_reports+0x74>)
 800fda0:	f240 326d 	movw	r2, #877	; 0x36d
 800fda4:	4917      	ldr	r1, [pc, #92]	; (800fe04 <netif_issue_reports+0x78>)
 800fda6:	4818      	ldr	r0, [pc, #96]	; (800fe08 <netif_issue_reports+0x7c>)
 800fda8:	f009 fd66 	bl	8019878 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdb2:	f003 0304 	and.w	r3, r3, #4
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d01e      	beq.n	800fdf8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d017      	beq.n	800fdf8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fdc8:	78fb      	ldrb	r3, [r7, #3]
 800fdca:	f003 0301 	and.w	r3, r3, #1
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d013      	beq.n	800fdfa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	3304      	adds	r3, #4
 800fdd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d00e      	beq.n	800fdfa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fde2:	f003 0308 	and.w	r3, r3, #8
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d007      	beq.n	800fdfa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	3304      	adds	r3, #4
 800fdee:	4619      	mov	r1, r3
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f007 fecd 	bl	8017b90 <etharp_request>
 800fdf6:	e000      	b.n	800fdfa <netif_issue_reports+0x6e>
    return;
 800fdf8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	0801b290 	.word	0x0801b290
 800fe04:	0801b434 	.word	0x0801b434
 800fe08:	0801b2e0 	.word	0x0801b2e0

0800fe0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d107      	bne.n	800fe2a <netif_set_down+0x1e>
 800fe1a:	4b12      	ldr	r3, [pc, #72]	; (800fe64 <netif_set_down+0x58>)
 800fe1c:	f240 329b 	movw	r2, #923	; 0x39b
 800fe20:	4911      	ldr	r1, [pc, #68]	; (800fe68 <netif_set_down+0x5c>)
 800fe22:	4812      	ldr	r0, [pc, #72]	; (800fe6c <netif_set_down+0x60>)
 800fe24:	f009 fd28 	bl	8019878 <iprintf>
 800fe28:	e019      	b.n	800fe5e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe30:	f003 0301 	and.w	r3, r3, #1
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d012      	beq.n	800fe5e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe3e:	f023 0301 	bic.w	r3, r3, #1
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe50:	f003 0308 	and.w	r3, r3, #8
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d002      	beq.n	800fe5e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f007 fa57 	bl	801730c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	0801b290 	.word	0x0801b290
 800fe68:	0801b458 	.word	0x0801b458
 800fe6c:	0801b2e0 	.word	0x0801b2e0

0800fe70 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d107      	bne.n	800fe8e <netif_set_link_up+0x1e>
 800fe7e:	4b13      	ldr	r3, [pc, #76]	; (800fecc <netif_set_link_up+0x5c>)
 800fe80:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fe84:	4912      	ldr	r1, [pc, #72]	; (800fed0 <netif_set_link_up+0x60>)
 800fe86:	4813      	ldr	r0, [pc, #76]	; (800fed4 <netif_set_link_up+0x64>)
 800fe88:	f009 fcf6 	bl	8019878 <iprintf>
 800fe8c:	e01b      	b.n	800fec6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe94:	f003 0304 	and.w	r3, r3, #4
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d114      	bne.n	800fec6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fea2:	f043 0304 	orr.w	r3, r3, #4
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800feae:	2103      	movs	r1, #3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7ff ff6b 	bl	800fd8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	69db      	ldr	r3, [r3, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d003      	beq.n	800fec6 <netif_set_link_up+0x56>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	0801b290 	.word	0x0801b290
 800fed0:	0801b478 	.word	0x0801b478
 800fed4:	0801b2e0 	.word	0x0801b2e0

0800fed8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d107      	bne.n	800fef6 <netif_set_link_down+0x1e>
 800fee6:	4b11      	ldr	r3, [pc, #68]	; (800ff2c <netif_set_link_down+0x54>)
 800fee8:	f240 4206 	movw	r2, #1030	; 0x406
 800feec:	4910      	ldr	r1, [pc, #64]	; (800ff30 <netif_set_link_down+0x58>)
 800feee:	4811      	ldr	r0, [pc, #68]	; (800ff34 <netif_set_link_down+0x5c>)
 800fef0:	f009 fcc2 	bl	8019878 <iprintf>
 800fef4:	e017      	b.n	800ff26 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fefc:	f003 0304 	and.w	r3, r3, #4
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d010      	beq.n	800ff26 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff0a:	f023 0304 	bic.w	r3, r3, #4
 800ff0e:	b2da      	uxtb	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	69db      	ldr	r3, [r3, #28]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d003      	beq.n	800ff26 <netif_set_link_down+0x4e>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	69db      	ldr	r3, [r3, #28]
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	0801b290 	.word	0x0801b290
 800ff30:	0801b49c 	.word	0x0801b49c
 800ff34:	0801b2e0 	.word	0x0801b2e0

0800ff38 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d002      	beq.n	800ff4e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	61da      	str	r2, [r3, #28]
  }
}
 800ff4e:	bf00      	nop
 800ff50:	370c      	adds	r7, #12
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr

0800ff5a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	60f8      	str	r0, [r7, #12]
 800ff62:	60b9      	str	r1, [r7, #8]
 800ff64:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ff66:	f06f 030b 	mvn.w	r3, #11
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3714      	adds	r7, #20
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
	...

0800ff78 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d013      	beq.n	800ffb0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ff88:	4b0d      	ldr	r3, [pc, #52]	; (800ffc0 <netif_get_by_index+0x48>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60fb      	str	r3, [r7, #12]
 800ff8e:	e00c      	b.n	800ffaa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff96:	3301      	adds	r3, #1
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	79fa      	ldrb	r2, [r7, #7]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d101      	bne.n	800ffa4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	e006      	b.n	800ffb2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	60fb      	str	r3, [r7, #12]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d1ef      	bne.n	800ff90 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	2000da8c 	.word	0x2000da8c

0800ffc4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ffca:	f009 fa41 	bl	8019450 <sys_arch_protect>
 800ffce:	6038      	str	r0, [r7, #0]
 800ffd0:	4b0d      	ldr	r3, [pc, #52]	; (8010008 <pbuf_free_ooseq+0x44>)
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	701a      	strb	r2, [r3, #0]
 800ffd6:	6838      	ldr	r0, [r7, #0]
 800ffd8:	f009 fa48 	bl	801946c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ffdc:	4b0b      	ldr	r3, [pc, #44]	; (801000c <pbuf_free_ooseq+0x48>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	607b      	str	r3, [r7, #4]
 800ffe2:	e00a      	b.n	800fffa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d003      	beq.n	800fff4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f002 fa13 	bl	8012418 <tcp_free_ooseq>
      return;
 800fff2:	e005      	b.n	8010000 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	607b      	str	r3, [r7, #4]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d1f1      	bne.n	800ffe4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	2000da95 	.word	0x2000da95
 801000c:	2000daa4 	.word	0x2000daa4

08010010 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010018:	f7ff ffd4 	bl	800ffc4 <pbuf_free_ooseq>
}
 801001c:	bf00      	nop
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801002a:	f009 fa11 	bl	8019450 <sys_arch_protect>
 801002e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010030:	4b0f      	ldr	r3, [pc, #60]	; (8010070 <pbuf_pool_is_empty+0x4c>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010036:	4b0e      	ldr	r3, [pc, #56]	; (8010070 <pbuf_pool_is_empty+0x4c>)
 8010038:	2201      	movs	r2, #1
 801003a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f009 fa15 	bl	801946c <sys_arch_unprotect>

  if (!queued) {
 8010042:	78fb      	ldrb	r3, [r7, #3]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10f      	bne.n	8010068 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010048:	2100      	movs	r1, #0
 801004a:	480a      	ldr	r0, [pc, #40]	; (8010074 <pbuf_pool_is_empty+0x50>)
 801004c:	f7fe fea6 	bl	800ed9c <tcpip_try_callback>
 8010050:	4603      	mov	r3, r0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d008      	beq.n	8010068 <pbuf_pool_is_empty+0x44>
 8010056:	f009 f9fb 	bl	8019450 <sys_arch_protect>
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	4b04      	ldr	r3, [pc, #16]	; (8010070 <pbuf_pool_is_empty+0x4c>)
 801005e:	2200      	movs	r2, #0
 8010060:	701a      	strb	r2, [r3, #0]
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f009 fa02 	bl	801946c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010068:	bf00      	nop
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	2000da95 	.word	0x2000da95
 8010074:	08010011 	.word	0x08010011

08010078 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	4611      	mov	r1, r2
 8010084:	461a      	mov	r2, r3
 8010086:	460b      	mov	r3, r1
 8010088:	80fb      	strh	r3, [r7, #6]
 801008a:	4613      	mov	r3, r2
 801008c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2200      	movs	r2, #0
 8010092:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	88fa      	ldrh	r2, [r7, #6]
 801009e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	88ba      	ldrh	r2, [r7, #4]
 80100a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80100a6:	8b3b      	ldrh	r3, [r7, #24]
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	7f3a      	ldrb	r2, [r7, #28]
 80100b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2201      	movs	r2, #1
 80100b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2200      	movs	r2, #0
 80100be:	73da      	strb	r2, [r3, #15]
}
 80100c0:	bf00      	nop
 80100c2:	3714      	adds	r7, #20
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b08c      	sub	sp, #48	; 0x30
 80100d0:	af02      	add	r7, sp, #8
 80100d2:	4603      	mov	r3, r0
 80100d4:	71fb      	strb	r3, [r7, #7]
 80100d6:	460b      	mov	r3, r1
 80100d8:	80bb      	strh	r3, [r7, #4]
 80100da:	4613      	mov	r3, r2
 80100dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80100de:	79fb      	ldrb	r3, [r7, #7]
 80100e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80100e2:	887b      	ldrh	r3, [r7, #2]
 80100e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80100e8:	d07f      	beq.n	80101ea <pbuf_alloc+0x11e>
 80100ea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80100ee:	f300 80c8 	bgt.w	8010282 <pbuf_alloc+0x1b6>
 80100f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80100f6:	d010      	beq.n	801011a <pbuf_alloc+0x4e>
 80100f8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80100fc:	f300 80c1 	bgt.w	8010282 <pbuf_alloc+0x1b6>
 8010100:	2b01      	cmp	r3, #1
 8010102:	d002      	beq.n	801010a <pbuf_alloc+0x3e>
 8010104:	2b41      	cmp	r3, #65	; 0x41
 8010106:	f040 80bc 	bne.w	8010282 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801010a:	887a      	ldrh	r2, [r7, #2]
 801010c:	88bb      	ldrh	r3, [r7, #4]
 801010e:	4619      	mov	r1, r3
 8010110:	2000      	movs	r0, #0
 8010112:	f000 f8d1 	bl	80102b8 <pbuf_alloc_reference>
 8010116:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010118:	e0bd      	b.n	8010296 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801011a:	2300      	movs	r3, #0
 801011c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801011e:	2300      	movs	r3, #0
 8010120:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010122:	88bb      	ldrh	r3, [r7, #4]
 8010124:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010126:	200c      	movs	r0, #12
 8010128:	f7ff fb9a 	bl	800f860 <memp_malloc>
 801012c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d109      	bne.n	8010148 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010134:	f7ff ff76 	bl	8010024 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <pbuf_alloc+0x78>
            pbuf_free(p);
 801013e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010140:	f000 faa8 	bl	8010694 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010144:	2300      	movs	r3, #0
 8010146:	e0a7      	b.n	8010298 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801014a:	3303      	adds	r3, #3
 801014c:	b29b      	uxth	r3, r3
 801014e:	f023 0303 	bic.w	r3, r3, #3
 8010152:	b29b      	uxth	r3, r3
 8010154:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010158:	b29b      	uxth	r3, r3
 801015a:	8b7a      	ldrh	r2, [r7, #26]
 801015c:	4293      	cmp	r3, r2
 801015e:	bf28      	it	cs
 8010160:	4613      	movcs	r3, r2
 8010162:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010166:	3310      	adds	r3, #16
 8010168:	693a      	ldr	r2, [r7, #16]
 801016a:	4413      	add	r3, r2
 801016c:	3303      	adds	r3, #3
 801016e:	f023 0303 	bic.w	r3, r3, #3
 8010172:	4618      	mov	r0, r3
 8010174:	89f9      	ldrh	r1, [r7, #14]
 8010176:	8b7a      	ldrh	r2, [r7, #26]
 8010178:	2300      	movs	r3, #0
 801017a:	9301      	str	r3, [sp, #4]
 801017c:	887b      	ldrh	r3, [r7, #2]
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	460b      	mov	r3, r1
 8010182:	4601      	mov	r1, r0
 8010184:	6938      	ldr	r0, [r7, #16]
 8010186:	f7ff ff77 	bl	8010078 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	f003 0303 	and.w	r3, r3, #3
 8010192:	2b00      	cmp	r3, #0
 8010194:	d006      	beq.n	80101a4 <pbuf_alloc+0xd8>
 8010196:	4b42      	ldr	r3, [pc, #264]	; (80102a0 <pbuf_alloc+0x1d4>)
 8010198:	f44f 7280 	mov.w	r2, #256	; 0x100
 801019c:	4941      	ldr	r1, [pc, #260]	; (80102a4 <pbuf_alloc+0x1d8>)
 801019e:	4842      	ldr	r0, [pc, #264]	; (80102a8 <pbuf_alloc+0x1dc>)
 80101a0:	f009 fb6a 	bl	8019878 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80101a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101a6:	3303      	adds	r3, #3
 80101a8:	f023 0303 	bic.w	r3, r3, #3
 80101ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80101b0:	d106      	bne.n	80101c0 <pbuf_alloc+0xf4>
 80101b2:	4b3b      	ldr	r3, [pc, #236]	; (80102a0 <pbuf_alloc+0x1d4>)
 80101b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80101b8:	493c      	ldr	r1, [pc, #240]	; (80102ac <pbuf_alloc+0x1e0>)
 80101ba:	483b      	ldr	r0, [pc, #236]	; (80102a8 <pbuf_alloc+0x1dc>)
 80101bc:	f009 fb5c 	bl	8019878 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d102      	bne.n	80101cc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	627b      	str	r3, [r7, #36]	; 0x24
 80101ca:	e002      	b.n	80101d2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	693a      	ldr	r2, [r7, #16]
 80101d0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80101d6:	8b7a      	ldrh	r2, [r7, #26]
 80101d8:	89fb      	ldrh	r3, [r7, #14]
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80101e2:	8b7b      	ldrh	r3, [r7, #26]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d19e      	bne.n	8010126 <pbuf_alloc+0x5a>
      break;
 80101e8:	e055      	b.n	8010296 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80101ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101ec:	3303      	adds	r3, #3
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	f023 0303 	bic.w	r3, r3, #3
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	88bb      	ldrh	r3, [r7, #4]
 80101f8:	3303      	adds	r3, #3
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	f023 0303 	bic.w	r3, r3, #3
 8010200:	b29b      	uxth	r3, r3
 8010202:	4413      	add	r3, r2
 8010204:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010206:	8b3b      	ldrh	r3, [r7, #24]
 8010208:	3310      	adds	r3, #16
 801020a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801020c:	8b3a      	ldrh	r2, [r7, #24]
 801020e:	88bb      	ldrh	r3, [r7, #4]
 8010210:	3303      	adds	r3, #3
 8010212:	f023 0303 	bic.w	r3, r3, #3
 8010216:	429a      	cmp	r2, r3
 8010218:	d306      	bcc.n	8010228 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801021a:	8afa      	ldrh	r2, [r7, #22]
 801021c:	88bb      	ldrh	r3, [r7, #4]
 801021e:	3303      	adds	r3, #3
 8010220:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010224:	429a      	cmp	r2, r3
 8010226:	d201      	bcs.n	801022c <pbuf_alloc+0x160>
        return NULL;
 8010228:	2300      	movs	r3, #0
 801022a:	e035      	b.n	8010298 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801022c:	8afb      	ldrh	r3, [r7, #22]
 801022e:	4618      	mov	r0, r3
 8010230:	f7ff f972 	bl	800f518 <mem_malloc>
 8010234:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	2b00      	cmp	r3, #0
 801023a:	d101      	bne.n	8010240 <pbuf_alloc+0x174>
        return NULL;
 801023c:	2300      	movs	r3, #0
 801023e:	e02b      	b.n	8010298 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010242:	3310      	adds	r3, #16
 8010244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010246:	4413      	add	r3, r2
 8010248:	3303      	adds	r3, #3
 801024a:	f023 0303 	bic.w	r3, r3, #3
 801024e:	4618      	mov	r0, r3
 8010250:	88b9      	ldrh	r1, [r7, #4]
 8010252:	88ba      	ldrh	r2, [r7, #4]
 8010254:	2300      	movs	r3, #0
 8010256:	9301      	str	r3, [sp, #4]
 8010258:	887b      	ldrh	r3, [r7, #2]
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	460b      	mov	r3, r1
 801025e:	4601      	mov	r1, r0
 8010260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010262:	f7ff ff09 	bl	8010078 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	f003 0303 	and.w	r3, r3, #3
 801026e:	2b00      	cmp	r3, #0
 8010270:	d010      	beq.n	8010294 <pbuf_alloc+0x1c8>
 8010272:	4b0b      	ldr	r3, [pc, #44]	; (80102a0 <pbuf_alloc+0x1d4>)
 8010274:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010278:	490d      	ldr	r1, [pc, #52]	; (80102b0 <pbuf_alloc+0x1e4>)
 801027a:	480b      	ldr	r0, [pc, #44]	; (80102a8 <pbuf_alloc+0x1dc>)
 801027c:	f009 fafc 	bl	8019878 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010280:	e008      	b.n	8010294 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010282:	4b07      	ldr	r3, [pc, #28]	; (80102a0 <pbuf_alloc+0x1d4>)
 8010284:	f240 1227 	movw	r2, #295	; 0x127
 8010288:	490a      	ldr	r1, [pc, #40]	; (80102b4 <pbuf_alloc+0x1e8>)
 801028a:	4807      	ldr	r0, [pc, #28]	; (80102a8 <pbuf_alloc+0x1dc>)
 801028c:	f009 faf4 	bl	8019878 <iprintf>
      return NULL;
 8010290:	2300      	movs	r3, #0
 8010292:	e001      	b.n	8010298 <pbuf_alloc+0x1cc>
      break;
 8010294:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010298:	4618      	mov	r0, r3
 801029a:	3728      	adds	r7, #40	; 0x28
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	0801b4c0 	.word	0x0801b4c0
 80102a4:	0801b4f0 	.word	0x0801b4f0
 80102a8:	0801b520 	.word	0x0801b520
 80102ac:	0801b548 	.word	0x0801b548
 80102b0:	0801b57c 	.word	0x0801b57c
 80102b4:	0801b5a8 	.word	0x0801b5a8

080102b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b086      	sub	sp, #24
 80102bc:	af02      	add	r7, sp, #8
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	460b      	mov	r3, r1
 80102c2:	807b      	strh	r3, [r7, #2]
 80102c4:	4613      	mov	r3, r2
 80102c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80102c8:	883b      	ldrh	r3, [r7, #0]
 80102ca:	2b41      	cmp	r3, #65	; 0x41
 80102cc:	d009      	beq.n	80102e2 <pbuf_alloc_reference+0x2a>
 80102ce:	883b      	ldrh	r3, [r7, #0]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d006      	beq.n	80102e2 <pbuf_alloc_reference+0x2a>
 80102d4:	4b0f      	ldr	r3, [pc, #60]	; (8010314 <pbuf_alloc_reference+0x5c>)
 80102d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80102da:	490f      	ldr	r1, [pc, #60]	; (8010318 <pbuf_alloc_reference+0x60>)
 80102dc:	480f      	ldr	r0, [pc, #60]	; (801031c <pbuf_alloc_reference+0x64>)
 80102de:	f009 facb 	bl	8019878 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80102e2:	200b      	movs	r0, #11
 80102e4:	f7ff fabc 	bl	800f860 <memp_malloc>
 80102e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d101      	bne.n	80102f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	e00b      	b.n	801030c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80102f4:	8879      	ldrh	r1, [r7, #2]
 80102f6:	887a      	ldrh	r2, [r7, #2]
 80102f8:	2300      	movs	r3, #0
 80102fa:	9301      	str	r3, [sp, #4]
 80102fc:	883b      	ldrh	r3, [r7, #0]
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	460b      	mov	r3, r1
 8010302:	6879      	ldr	r1, [r7, #4]
 8010304:	68f8      	ldr	r0, [r7, #12]
 8010306:	f7ff feb7 	bl	8010078 <pbuf_init_alloced_pbuf>
  return p;
 801030a:	68fb      	ldr	r3, [r7, #12]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	0801b4c0 	.word	0x0801b4c0
 8010318:	0801b5c4 	.word	0x0801b5c4
 801031c:	0801b520 	.word	0x0801b520

08010320 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b088      	sub	sp, #32
 8010324:	af02      	add	r7, sp, #8
 8010326:	607b      	str	r3, [r7, #4]
 8010328:	4603      	mov	r3, r0
 801032a:	73fb      	strb	r3, [r7, #15]
 801032c:	460b      	mov	r3, r1
 801032e:	81bb      	strh	r3, [r7, #12]
 8010330:	4613      	mov	r3, r2
 8010332:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010334:	7bfb      	ldrb	r3, [r7, #15]
 8010336:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010338:	8a7b      	ldrh	r3, [r7, #18]
 801033a:	3303      	adds	r3, #3
 801033c:	f023 0203 	bic.w	r2, r3, #3
 8010340:	89bb      	ldrh	r3, [r7, #12]
 8010342:	441a      	add	r2, r3
 8010344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010346:	429a      	cmp	r2, r3
 8010348:	d901      	bls.n	801034e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801034a:	2300      	movs	r3, #0
 801034c:	e018      	b.n	8010380 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801034e:	6a3b      	ldr	r3, [r7, #32]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d007      	beq.n	8010364 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010354:	8a7b      	ldrh	r3, [r7, #18]
 8010356:	3303      	adds	r3, #3
 8010358:	f023 0303 	bic.w	r3, r3, #3
 801035c:	6a3a      	ldr	r2, [r7, #32]
 801035e:	4413      	add	r3, r2
 8010360:	617b      	str	r3, [r7, #20]
 8010362:	e001      	b.n	8010368 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010364:	2300      	movs	r3, #0
 8010366:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	89b9      	ldrh	r1, [r7, #12]
 801036c:	89ba      	ldrh	r2, [r7, #12]
 801036e:	2302      	movs	r3, #2
 8010370:	9301      	str	r3, [sp, #4]
 8010372:	897b      	ldrh	r3, [r7, #10]
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	460b      	mov	r3, r1
 8010378:	6979      	ldr	r1, [r7, #20]
 801037a:	f7ff fe7d 	bl	8010078 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801037e:	687b      	ldr	r3, [r7, #4]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3718      	adds	r7, #24
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	460b      	mov	r3, r1
 8010392:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d106      	bne.n	80103a8 <pbuf_realloc+0x20>
 801039a:	4b3a      	ldr	r3, [pc, #232]	; (8010484 <pbuf_realloc+0xfc>)
 801039c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80103a0:	4939      	ldr	r1, [pc, #228]	; (8010488 <pbuf_realloc+0x100>)
 80103a2:	483a      	ldr	r0, [pc, #232]	; (801048c <pbuf_realloc+0x104>)
 80103a4:	f009 fa68 	bl	8019878 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	891b      	ldrh	r3, [r3, #8]
 80103ac:	887a      	ldrh	r2, [r7, #2]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d263      	bcs.n	801047a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	891a      	ldrh	r2, [r3, #8]
 80103b6:	887b      	ldrh	r3, [r7, #2]
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80103bc:	887b      	ldrh	r3, [r7, #2]
 80103be:	817b      	strh	r3, [r7, #10]
  q = p;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80103c4:	e018      	b.n	80103f8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	895b      	ldrh	r3, [r3, #10]
 80103ca:	897a      	ldrh	r2, [r7, #10]
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	891a      	ldrh	r2, [r3, #8]
 80103d4:	893b      	ldrh	r3, [r7, #8]
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	b29a      	uxth	r2, r3
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d106      	bne.n	80103f8 <pbuf_realloc+0x70>
 80103ea:	4b26      	ldr	r3, [pc, #152]	; (8010484 <pbuf_realloc+0xfc>)
 80103ec:	f240 12af 	movw	r2, #431	; 0x1af
 80103f0:	4927      	ldr	r1, [pc, #156]	; (8010490 <pbuf_realloc+0x108>)
 80103f2:	4826      	ldr	r0, [pc, #152]	; (801048c <pbuf_realloc+0x104>)
 80103f4:	f009 fa40 	bl	8019878 <iprintf>
  while (rem_len > q->len) {
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	895b      	ldrh	r3, [r3, #10]
 80103fc:	897a      	ldrh	r2, [r7, #10]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d8e1      	bhi.n	80103c6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	7b1b      	ldrb	r3, [r3, #12]
 8010406:	f003 030f 	and.w	r3, r3, #15
 801040a:	2b00      	cmp	r3, #0
 801040c:	d121      	bne.n	8010452 <pbuf_realloc+0xca>
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	895b      	ldrh	r3, [r3, #10]
 8010412:	897a      	ldrh	r2, [r7, #10]
 8010414:	429a      	cmp	r2, r3
 8010416:	d01c      	beq.n	8010452 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	7b5b      	ldrb	r3, [r3, #13]
 801041c:	f003 0302 	and.w	r3, r3, #2
 8010420:	2b00      	cmp	r3, #0
 8010422:	d116      	bne.n	8010452 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	685a      	ldr	r2, [r3, #4]
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	1ad3      	subs	r3, r2, r3
 801042c:	b29a      	uxth	r2, r3
 801042e:	897b      	ldrh	r3, [r7, #10]
 8010430:	4413      	add	r3, r2
 8010432:	b29b      	uxth	r3, r3
 8010434:	4619      	mov	r1, r3
 8010436:	68f8      	ldr	r0, [r7, #12]
 8010438:	f7fe ff64 	bl	800f304 <mem_trim>
 801043c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d106      	bne.n	8010452 <pbuf_realloc+0xca>
 8010444:	4b0f      	ldr	r3, [pc, #60]	; (8010484 <pbuf_realloc+0xfc>)
 8010446:	f240 12bd 	movw	r2, #445	; 0x1bd
 801044a:	4912      	ldr	r1, [pc, #72]	; (8010494 <pbuf_realloc+0x10c>)
 801044c:	480f      	ldr	r0, [pc, #60]	; (801048c <pbuf_realloc+0x104>)
 801044e:	f009 fa13 	bl	8019878 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	897a      	ldrh	r2, [r7, #10]
 8010456:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	895a      	ldrh	r2, [r3, #10]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d004      	beq.n	8010472 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4618      	mov	r0, r3
 801046e:	f000 f911 	bl	8010694 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2200      	movs	r2, #0
 8010476:	601a      	str	r2, [r3, #0]
 8010478:	e000      	b.n	801047c <pbuf_realloc+0xf4>
    return;
 801047a:	bf00      	nop

}
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	0801b4c0 	.word	0x0801b4c0
 8010488:	0801b5d8 	.word	0x0801b5d8
 801048c:	0801b520 	.word	0x0801b520
 8010490:	0801b5f0 	.word	0x0801b5f0
 8010494:	0801b608 	.word	0x0801b608

08010498 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b086      	sub	sp, #24
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	4613      	mov	r3, r2
 80104a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d106      	bne.n	80104ba <pbuf_add_header_impl+0x22>
 80104ac:	4b2b      	ldr	r3, [pc, #172]	; (801055c <pbuf_add_header_impl+0xc4>)
 80104ae:	f240 12df 	movw	r2, #479	; 0x1df
 80104b2:	492b      	ldr	r1, [pc, #172]	; (8010560 <pbuf_add_header_impl+0xc8>)
 80104b4:	482b      	ldr	r0, [pc, #172]	; (8010564 <pbuf_add_header_impl+0xcc>)
 80104b6:	f009 f9df 	bl	8019878 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d003      	beq.n	80104c8 <pbuf_add_header_impl+0x30>
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104c6:	d301      	bcc.n	80104cc <pbuf_add_header_impl+0x34>
    return 1;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e043      	b.n	8010554 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d101      	bne.n	80104d6 <pbuf_add_header_impl+0x3e>
    return 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	e03e      	b.n	8010554 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	891a      	ldrh	r2, [r3, #8]
 80104de:	8a7b      	ldrh	r3, [r7, #18]
 80104e0:	4413      	add	r3, r2
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	8a7a      	ldrh	r2, [r7, #18]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d901      	bls.n	80104ee <pbuf_add_header_impl+0x56>
    return 1;
 80104ea:	2301      	movs	r3, #1
 80104ec:	e032      	b.n	8010554 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	7b1b      	ldrb	r3, [r3, #12]
 80104f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80104f4:	8a3b      	ldrh	r3, [r7, #16]
 80104f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00c      	beq.n	8010518 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	685a      	ldr	r2, [r3, #4]
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	425b      	negs	r3, r3
 8010506:	4413      	add	r3, r2
 8010508:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	3310      	adds	r3, #16
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	429a      	cmp	r2, r3
 8010512:	d20d      	bcs.n	8010530 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010514:	2301      	movs	r3, #1
 8010516:	e01d      	b.n	8010554 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010518:	79fb      	ldrb	r3, [r7, #7]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d006      	beq.n	801052c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	685a      	ldr	r2, [r3, #4]
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	425b      	negs	r3, r3
 8010526:	4413      	add	r3, r2
 8010528:	617b      	str	r3, [r7, #20]
 801052a:	e001      	b.n	8010530 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801052c:	2301      	movs	r3, #1
 801052e:	e011      	b.n	8010554 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	895a      	ldrh	r2, [r3, #10]
 801053a:	8a7b      	ldrh	r3, [r7, #18]
 801053c:	4413      	add	r3, r2
 801053e:	b29a      	uxth	r2, r3
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	891a      	ldrh	r2, [r3, #8]
 8010548:	8a7b      	ldrh	r3, [r7, #18]
 801054a:	4413      	add	r3, r2
 801054c:	b29a      	uxth	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	811a      	strh	r2, [r3, #8]


  return 0;
 8010552:	2300      	movs	r3, #0
}
 8010554:	4618      	mov	r0, r3
 8010556:	3718      	adds	r7, #24
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	0801b4c0 	.word	0x0801b4c0
 8010560:	0801b624 	.word	0x0801b624
 8010564:	0801b520 	.word	0x0801b520

08010568 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010572:	2200      	movs	r2, #0
 8010574:	6839      	ldr	r1, [r7, #0]
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff ff8e 	bl	8010498 <pbuf_add_header_impl>
 801057c:	4603      	mov	r3, r0
}
 801057e:	4618      	mov	r0, r3
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
	...

08010588 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <pbuf_remove_header+0x1e>
 8010598:	4b20      	ldr	r3, [pc, #128]	; (801061c <pbuf_remove_header+0x94>)
 801059a:	f240 224b 	movw	r2, #587	; 0x24b
 801059e:	4920      	ldr	r1, [pc, #128]	; (8010620 <pbuf_remove_header+0x98>)
 80105a0:	4820      	ldr	r0, [pc, #128]	; (8010624 <pbuf_remove_header+0x9c>)
 80105a2:	f009 f969 	bl	8019878 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d003      	beq.n	80105b4 <pbuf_remove_header+0x2c>
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105b2:	d301      	bcc.n	80105b8 <pbuf_remove_header+0x30>
    return 1;
 80105b4:	2301      	movs	r3, #1
 80105b6:	e02c      	b.n	8010612 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d101      	bne.n	80105c2 <pbuf_remove_header+0x3a>
    return 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	e027      	b.n	8010612 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	895b      	ldrh	r3, [r3, #10]
 80105ca:	89fa      	ldrh	r2, [r7, #14]
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d908      	bls.n	80105e2 <pbuf_remove_header+0x5a>
 80105d0:	4b12      	ldr	r3, [pc, #72]	; (801061c <pbuf_remove_header+0x94>)
 80105d2:	f240 2255 	movw	r2, #597	; 0x255
 80105d6:	4914      	ldr	r1, [pc, #80]	; (8010628 <pbuf_remove_header+0xa0>)
 80105d8:	4812      	ldr	r0, [pc, #72]	; (8010624 <pbuf_remove_header+0x9c>)
 80105da:	f009 f94d 	bl	8019878 <iprintf>
 80105de:	2301      	movs	r3, #1
 80105e0:	e017      	b.n	8010612 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	685a      	ldr	r2, [r3, #4]
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	441a      	add	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	895a      	ldrh	r2, [r3, #10]
 80105f8:	89fb      	ldrh	r3, [r7, #14]
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	b29a      	uxth	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	891a      	ldrh	r2, [r3, #8]
 8010606:	89fb      	ldrh	r3, [r7, #14]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	b29a      	uxth	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010610:	2300      	movs	r3, #0
}
 8010612:	4618      	mov	r0, r3
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	0801b4c0 	.word	0x0801b4c0
 8010620:	0801b624 	.word	0x0801b624
 8010624:	0801b520 	.word	0x0801b520
 8010628:	0801b630 	.word	0x0801b630

0801062c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	460b      	mov	r3, r1
 8010636:	807b      	strh	r3, [r7, #2]
 8010638:	4613      	mov	r3, r2
 801063a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801063c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010640:	2b00      	cmp	r3, #0
 8010642:	da08      	bge.n	8010656 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010644:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010648:	425b      	negs	r3, r3
 801064a:	4619      	mov	r1, r3
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f7ff ff9b 	bl	8010588 <pbuf_remove_header>
 8010652:	4603      	mov	r3, r0
 8010654:	e007      	b.n	8010666 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010656:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801065a:	787a      	ldrb	r2, [r7, #1]
 801065c:	4619      	mov	r1, r3
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7ff ff1a 	bl	8010498 <pbuf_add_header_impl>
 8010664:	4603      	mov	r3, r0
  }
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801067a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801067e:	2201      	movs	r2, #1
 8010680:	4619      	mov	r1, r3
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f7ff ffd2 	bl	801062c <pbuf_header_impl>
 8010688:	4603      	mov	r3, r0
}
 801068a:	4618      	mov	r0, r3
 801068c:	3708      	adds	r7, #8
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
	...

08010694 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b088      	sub	sp, #32
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d10b      	bne.n	80106ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d106      	bne.n	80106b6 <pbuf_free+0x22>
 80106a8:	4b3b      	ldr	r3, [pc, #236]	; (8010798 <pbuf_free+0x104>)
 80106aa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80106ae:	493b      	ldr	r1, [pc, #236]	; (801079c <pbuf_free+0x108>)
 80106b0:	483b      	ldr	r0, [pc, #236]	; (80107a0 <pbuf_free+0x10c>)
 80106b2:	f009 f8e1 	bl	8019878 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80106b6:	2300      	movs	r3, #0
 80106b8:	e069      	b.n	801078e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80106be:	e062      	b.n	8010786 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80106c0:	f008 fec6 	bl	8019450 <sys_arch_protect>
 80106c4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	7b9b      	ldrb	r3, [r3, #14]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d106      	bne.n	80106dc <pbuf_free+0x48>
 80106ce:	4b32      	ldr	r3, [pc, #200]	; (8010798 <pbuf_free+0x104>)
 80106d0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80106d4:	4933      	ldr	r1, [pc, #204]	; (80107a4 <pbuf_free+0x110>)
 80106d6:	4832      	ldr	r0, [pc, #200]	; (80107a0 <pbuf_free+0x10c>)
 80106d8:	f009 f8ce 	bl	8019878 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	7b9b      	ldrb	r3, [r3, #14]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	739a      	strb	r2, [r3, #14]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	7b9b      	ldrb	r3, [r3, #14]
 80106ec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80106ee:	69b8      	ldr	r0, [r7, #24]
 80106f0:	f008 febc 	bl	801946c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80106f4:	7dfb      	ldrb	r3, [r7, #23]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d143      	bne.n	8010782 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	7b1b      	ldrb	r3, [r3, #12]
 8010704:	f003 030f 	and.w	r3, r3, #15
 8010708:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	7b5b      	ldrb	r3, [r3, #13]
 801070e:	f003 0302 	and.w	r3, r3, #2
 8010712:	2b00      	cmp	r3, #0
 8010714:	d011      	beq.n	801073a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	691b      	ldr	r3, [r3, #16]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d106      	bne.n	8010730 <pbuf_free+0x9c>
 8010722:	4b1d      	ldr	r3, [pc, #116]	; (8010798 <pbuf_free+0x104>)
 8010724:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010728:	491f      	ldr	r1, [pc, #124]	; (80107a8 <pbuf_free+0x114>)
 801072a:	481d      	ldr	r0, [pc, #116]	; (80107a0 <pbuf_free+0x10c>)
 801072c:	f009 f8a4 	bl	8019878 <iprintf>
        pc->custom_free_function(p);
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	691b      	ldr	r3, [r3, #16]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	4798      	blx	r3
 8010738:	e01d      	b.n	8010776 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	2b02      	cmp	r3, #2
 801073e:	d104      	bne.n	801074a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010740:	6879      	ldr	r1, [r7, #4]
 8010742:	200c      	movs	r0, #12
 8010744:	f7ff f902 	bl	800f94c <memp_free>
 8010748:	e015      	b.n	8010776 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801074a:	7bfb      	ldrb	r3, [r7, #15]
 801074c:	2b01      	cmp	r3, #1
 801074e:	d104      	bne.n	801075a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010750:	6879      	ldr	r1, [r7, #4]
 8010752:	200b      	movs	r0, #11
 8010754:	f7ff f8fa 	bl	800f94c <memp_free>
 8010758:	e00d      	b.n	8010776 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801075a:	7bfb      	ldrb	r3, [r7, #15]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d103      	bne.n	8010768 <pbuf_free+0xd4>
          mem_free(p);
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7fe fd3f 	bl	800f1e4 <mem_free>
 8010766:	e006      	b.n	8010776 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010768:	4b0b      	ldr	r3, [pc, #44]	; (8010798 <pbuf_free+0x104>)
 801076a:	f240 320f 	movw	r2, #783	; 0x30f
 801076e:	490f      	ldr	r1, [pc, #60]	; (80107ac <pbuf_free+0x118>)
 8010770:	480b      	ldr	r0, [pc, #44]	; (80107a0 <pbuf_free+0x10c>)
 8010772:	f009 f881 	bl	8019878 <iprintf>
        }
      }
      count++;
 8010776:	7ffb      	ldrb	r3, [r7, #31]
 8010778:	3301      	adds	r3, #1
 801077a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	607b      	str	r3, [r7, #4]
 8010780:	e001      	b.n	8010786 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010782:	2300      	movs	r3, #0
 8010784:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d199      	bne.n	80106c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801078c:	7ffb      	ldrb	r3, [r7, #31]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3720      	adds	r7, #32
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	0801b4c0 	.word	0x0801b4c0
 801079c:	0801b624 	.word	0x0801b624
 80107a0:	0801b520 	.word	0x0801b520
 80107a4:	0801b650 	.word	0x0801b650
 80107a8:	0801b668 	.word	0x0801b668
 80107ac:	0801b68c 	.word	0x0801b68c

080107b0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b085      	sub	sp, #20
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80107b8:	2300      	movs	r3, #0
 80107ba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80107bc:	e005      	b.n	80107ca <pbuf_clen+0x1a>
    ++len;
 80107be:	89fb      	ldrh	r3, [r7, #14]
 80107c0:	3301      	adds	r3, #1
 80107c2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1f6      	bne.n	80107be <pbuf_clen+0xe>
  }
  return len;
 80107d0:	89fb      	ldrh	r3, [r7, #14]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
	...

080107e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d016      	beq.n	801081c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80107ee:	f008 fe2f 	bl	8019450 <sys_arch_protect>
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	7b9b      	ldrb	r3, [r3, #14]
 80107f8:	3301      	adds	r3, #1
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	739a      	strb	r2, [r3, #14]
 8010800:	68f8      	ldr	r0, [r7, #12]
 8010802:	f008 fe33 	bl	801946c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	7b9b      	ldrb	r3, [r3, #14]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d106      	bne.n	801081c <pbuf_ref+0x3c>
 801080e:	4b05      	ldr	r3, [pc, #20]	; (8010824 <pbuf_ref+0x44>)
 8010810:	f240 3242 	movw	r2, #834	; 0x342
 8010814:	4904      	ldr	r1, [pc, #16]	; (8010828 <pbuf_ref+0x48>)
 8010816:	4805      	ldr	r0, [pc, #20]	; (801082c <pbuf_ref+0x4c>)
 8010818:	f009 f82e 	bl	8019878 <iprintf>
  }
}
 801081c:	bf00      	nop
 801081e:	3710      	adds	r7, #16
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	0801b4c0 	.word	0x0801b4c0
 8010828:	0801b6a0 	.word	0x0801b6a0
 801082c:	0801b520 	.word	0x0801b520

08010830 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <pbuf_cat+0x16>
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d107      	bne.n	8010856 <pbuf_cat+0x26>
 8010846:	4b20      	ldr	r3, [pc, #128]	; (80108c8 <pbuf_cat+0x98>)
 8010848:	f240 3259 	movw	r2, #857	; 0x359
 801084c:	491f      	ldr	r1, [pc, #124]	; (80108cc <pbuf_cat+0x9c>)
 801084e:	4820      	ldr	r0, [pc, #128]	; (80108d0 <pbuf_cat+0xa0>)
 8010850:	f009 f812 	bl	8019878 <iprintf>
 8010854:	e034      	b.n	80108c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	60fb      	str	r3, [r7, #12]
 801085a:	e00a      	b.n	8010872 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	891a      	ldrh	r2, [r3, #8]
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	891b      	ldrh	r3, [r3, #8]
 8010864:	4413      	add	r3, r2
 8010866:	b29a      	uxth	r2, r3
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	60fb      	str	r3, [r7, #12]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1f0      	bne.n	801085c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	891a      	ldrh	r2, [r3, #8]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	895b      	ldrh	r3, [r3, #10]
 8010882:	429a      	cmp	r2, r3
 8010884:	d006      	beq.n	8010894 <pbuf_cat+0x64>
 8010886:	4b10      	ldr	r3, [pc, #64]	; (80108c8 <pbuf_cat+0x98>)
 8010888:	f240 3262 	movw	r2, #866	; 0x362
 801088c:	4911      	ldr	r1, [pc, #68]	; (80108d4 <pbuf_cat+0xa4>)
 801088e:	4810      	ldr	r0, [pc, #64]	; (80108d0 <pbuf_cat+0xa0>)
 8010890:	f008 fff2 	bl	8019878 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d006      	beq.n	80108aa <pbuf_cat+0x7a>
 801089c:	4b0a      	ldr	r3, [pc, #40]	; (80108c8 <pbuf_cat+0x98>)
 801089e:	f240 3263 	movw	r2, #867	; 0x363
 80108a2:	490d      	ldr	r1, [pc, #52]	; (80108d8 <pbuf_cat+0xa8>)
 80108a4:	480a      	ldr	r0, [pc, #40]	; (80108d0 <pbuf_cat+0xa0>)
 80108a6:	f008 ffe7 	bl	8019878 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	891a      	ldrh	r2, [r3, #8]
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	891b      	ldrh	r3, [r3, #8]
 80108b2:	4413      	add	r3, r2
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	683a      	ldr	r2, [r7, #0]
 80108be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	0801b4c0 	.word	0x0801b4c0
 80108cc:	0801b6b4 	.word	0x0801b6b4
 80108d0:	0801b520 	.word	0x0801b520
 80108d4:	0801b6ec 	.word	0x0801b6ec
 80108d8:	0801b71c 	.word	0x0801b71c

080108dc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80108e6:	6839      	ldr	r1, [r7, #0]
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff ffa1 	bl	8010830 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80108ee:	6838      	ldr	r0, [r7, #0]
 80108f0:	f7ff ff76 	bl	80107e0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80108f4:	bf00      	nop
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b086      	sub	sp, #24
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010906:	2300      	movs	r3, #0
 8010908:	617b      	str	r3, [r7, #20]
 801090a:	2300      	movs	r3, #0
 801090c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d008      	beq.n	8010926 <pbuf_copy+0x2a>
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d005      	beq.n	8010926 <pbuf_copy+0x2a>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	891a      	ldrh	r2, [r3, #8]
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	891b      	ldrh	r3, [r3, #8]
 8010922:	429a      	cmp	r2, r3
 8010924:	d209      	bcs.n	801093a <pbuf_copy+0x3e>
 8010926:	4b57      	ldr	r3, [pc, #348]	; (8010a84 <pbuf_copy+0x188>)
 8010928:	f240 32c9 	movw	r2, #969	; 0x3c9
 801092c:	4956      	ldr	r1, [pc, #344]	; (8010a88 <pbuf_copy+0x18c>)
 801092e:	4857      	ldr	r0, [pc, #348]	; (8010a8c <pbuf_copy+0x190>)
 8010930:	f008 ffa2 	bl	8019878 <iprintf>
 8010934:	f06f 030f 	mvn.w	r3, #15
 8010938:	e09f      	b.n	8010a7a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	895b      	ldrh	r3, [r3, #10]
 801093e:	461a      	mov	r2, r3
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	1ad2      	subs	r2, r2, r3
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	895b      	ldrh	r3, [r3, #10]
 8010948:	4619      	mov	r1, r3
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	1acb      	subs	r3, r1, r3
 801094e:	429a      	cmp	r2, r3
 8010950:	d306      	bcc.n	8010960 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	895b      	ldrh	r3, [r3, #10]
 8010956:	461a      	mov	r2, r3
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	60fb      	str	r3, [r7, #12]
 801095e:	e005      	b.n	801096c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	895b      	ldrh	r3, [r3, #10]
 8010964:	461a      	mov	r2, r3
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	18d0      	adds	r0, r2, r3
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	685a      	ldr	r2, [r3, #4]
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	4413      	add	r3, r2
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	4619      	mov	r1, r3
 8010980:	f008 feb5 	bl	80196ee <memcpy>
    offset_to += len;
 8010984:	697a      	ldr	r2, [r7, #20]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	4413      	add	r3, r2
 801098a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801098c:	693a      	ldr	r2, [r7, #16]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	4413      	add	r3, r2
 8010992:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	895b      	ldrh	r3, [r3, #10]
 8010998:	461a      	mov	r2, r3
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	4293      	cmp	r3, r2
 801099e:	d906      	bls.n	80109ae <pbuf_copy+0xb2>
 80109a0:	4b38      	ldr	r3, [pc, #224]	; (8010a84 <pbuf_copy+0x188>)
 80109a2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80109a6:	493a      	ldr	r1, [pc, #232]	; (8010a90 <pbuf_copy+0x194>)
 80109a8:	4838      	ldr	r0, [pc, #224]	; (8010a8c <pbuf_copy+0x190>)
 80109aa:	f008 ff65 	bl	8019878 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	895b      	ldrh	r3, [r3, #10]
 80109b2:	461a      	mov	r2, r3
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d906      	bls.n	80109c8 <pbuf_copy+0xcc>
 80109ba:	4b32      	ldr	r3, [pc, #200]	; (8010a84 <pbuf_copy+0x188>)
 80109bc:	f240 32da 	movw	r2, #986	; 0x3da
 80109c0:	4934      	ldr	r1, [pc, #208]	; (8010a94 <pbuf_copy+0x198>)
 80109c2:	4832      	ldr	r0, [pc, #200]	; (8010a8c <pbuf_copy+0x190>)
 80109c4:	f008 ff58 	bl	8019878 <iprintf>
    if (offset_from >= p_from->len) {
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	895b      	ldrh	r3, [r3, #10]
 80109cc:	461a      	mov	r2, r3
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	4293      	cmp	r3, r2
 80109d2:	d304      	bcc.n	80109de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80109d4:	2300      	movs	r3, #0
 80109d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	895b      	ldrh	r3, [r3, #10]
 80109e2:	461a      	mov	r2, r3
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d114      	bne.n	8010a14 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80109ea:	2300      	movs	r3, #0
 80109ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d10c      	bne.n	8010a14 <pbuf_copy+0x118>
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d009      	beq.n	8010a14 <pbuf_copy+0x118>
 8010a00:	4b20      	ldr	r3, [pc, #128]	; (8010a84 <pbuf_copy+0x188>)
 8010a02:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010a06:	4924      	ldr	r1, [pc, #144]	; (8010a98 <pbuf_copy+0x19c>)
 8010a08:	4820      	ldr	r0, [pc, #128]	; (8010a8c <pbuf_copy+0x190>)
 8010a0a:	f008 ff35 	bl	8019878 <iprintf>
 8010a0e:	f06f 030f 	mvn.w	r3, #15
 8010a12:	e032      	b.n	8010a7a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d013      	beq.n	8010a42 <pbuf_copy+0x146>
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	895a      	ldrh	r2, [r3, #10]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	891b      	ldrh	r3, [r3, #8]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d10d      	bne.n	8010a42 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d009      	beq.n	8010a42 <pbuf_copy+0x146>
 8010a2e:	4b15      	ldr	r3, [pc, #84]	; (8010a84 <pbuf_copy+0x188>)
 8010a30:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010a34:	4919      	ldr	r1, [pc, #100]	; (8010a9c <pbuf_copy+0x1a0>)
 8010a36:	4815      	ldr	r0, [pc, #84]	; (8010a8c <pbuf_copy+0x190>)
 8010a38:	f008 ff1e 	bl	8019878 <iprintf>
 8010a3c:	f06f 0305 	mvn.w	r3, #5
 8010a40:	e01b      	b.n	8010a7a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d013      	beq.n	8010a70 <pbuf_copy+0x174>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	895a      	ldrh	r2, [r3, #10]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	891b      	ldrh	r3, [r3, #8]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d10d      	bne.n	8010a70 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d009      	beq.n	8010a70 <pbuf_copy+0x174>
 8010a5c:	4b09      	ldr	r3, [pc, #36]	; (8010a84 <pbuf_copy+0x188>)
 8010a5e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010a62:	490e      	ldr	r1, [pc, #56]	; (8010a9c <pbuf_copy+0x1a0>)
 8010a64:	4809      	ldr	r0, [pc, #36]	; (8010a8c <pbuf_copy+0x190>)
 8010a66:	f008 ff07 	bl	8019878 <iprintf>
 8010a6a:	f06f 0305 	mvn.w	r3, #5
 8010a6e:	e004      	b.n	8010a7a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f47f af61 	bne.w	801093a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	0801b4c0 	.word	0x0801b4c0
 8010a88:	0801b768 	.word	0x0801b768
 8010a8c:	0801b520 	.word	0x0801b520
 8010a90:	0801b798 	.word	0x0801b798
 8010a94:	0801b7b0 	.word	0x0801b7b0
 8010a98:	0801b7cc 	.word	0x0801b7cc
 8010a9c:	0801b7dc 	.word	0x0801b7dc

08010aa0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b088      	sub	sp, #32
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	4611      	mov	r1, r2
 8010aac:	461a      	mov	r2, r3
 8010aae:	460b      	mov	r3, r1
 8010ab0:	80fb      	strh	r3, [r7, #6]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010aba:	2300      	movs	r3, #0
 8010abc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d108      	bne.n	8010ad6 <pbuf_copy_partial+0x36>
 8010ac4:	4b2b      	ldr	r3, [pc, #172]	; (8010b74 <pbuf_copy_partial+0xd4>)
 8010ac6:	f240 420a 	movw	r2, #1034	; 0x40a
 8010aca:	492b      	ldr	r1, [pc, #172]	; (8010b78 <pbuf_copy_partial+0xd8>)
 8010acc:	482b      	ldr	r0, [pc, #172]	; (8010b7c <pbuf_copy_partial+0xdc>)
 8010ace:	f008 fed3 	bl	8019878 <iprintf>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	e04a      	b.n	8010b6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d108      	bne.n	8010aee <pbuf_copy_partial+0x4e>
 8010adc:	4b25      	ldr	r3, [pc, #148]	; (8010b74 <pbuf_copy_partial+0xd4>)
 8010ade:	f240 420b 	movw	r2, #1035	; 0x40b
 8010ae2:	4927      	ldr	r1, [pc, #156]	; (8010b80 <pbuf_copy_partial+0xe0>)
 8010ae4:	4825      	ldr	r0, [pc, #148]	; (8010b7c <pbuf_copy_partial+0xdc>)
 8010ae6:	f008 fec7 	bl	8019878 <iprintf>
 8010aea:	2300      	movs	r3, #0
 8010aec:	e03e      	b.n	8010b6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	61fb      	str	r3, [r7, #28]
 8010af2:	e034      	b.n	8010b5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010af4:	88bb      	ldrh	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00a      	beq.n	8010b10 <pbuf_copy_partial+0x70>
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	895b      	ldrh	r3, [r3, #10]
 8010afe:	88ba      	ldrh	r2, [r7, #4]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d305      	bcc.n	8010b10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	895b      	ldrh	r3, [r3, #10]
 8010b08:	88ba      	ldrh	r2, [r7, #4]
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	80bb      	strh	r3, [r7, #4]
 8010b0e:	e023      	b.n	8010b58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	895a      	ldrh	r2, [r3, #10]
 8010b14:	88bb      	ldrh	r3, [r7, #4]
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010b1a:	8b3a      	ldrh	r2, [r7, #24]
 8010b1c:	88fb      	ldrh	r3, [r7, #6]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d901      	bls.n	8010b26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010b22:	88fb      	ldrh	r3, [r7, #6]
 8010b24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010b26:	8b7b      	ldrh	r3, [r7, #26]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	18d0      	adds	r0, r2, r3
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	685a      	ldr	r2, [r3, #4]
 8010b30:	88bb      	ldrh	r3, [r7, #4]
 8010b32:	4413      	add	r3, r2
 8010b34:	8b3a      	ldrh	r2, [r7, #24]
 8010b36:	4619      	mov	r1, r3
 8010b38:	f008 fdd9 	bl	80196ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010b3c:	8afa      	ldrh	r2, [r7, #22]
 8010b3e:	8b3b      	ldrh	r3, [r7, #24]
 8010b40:	4413      	add	r3, r2
 8010b42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010b44:	8b7a      	ldrh	r2, [r7, #26]
 8010b46:	8b3b      	ldrh	r3, [r7, #24]
 8010b48:	4413      	add	r3, r2
 8010b4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010b4c:	88fa      	ldrh	r2, [r7, #6]
 8010b4e:	8b3b      	ldrh	r3, [r7, #24]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010b54:	2300      	movs	r3, #0
 8010b56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	61fb      	str	r3, [r7, #28]
 8010b5e:	88fb      	ldrh	r3, [r7, #6]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <pbuf_copy_partial+0xca>
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d1c4      	bne.n	8010af4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010b6a:	8afb      	ldrh	r3, [r7, #22]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3720      	adds	r7, #32
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	0801b4c0 	.word	0x0801b4c0
 8010b78:	0801b808 	.word	0x0801b808
 8010b7c:	0801b520 	.word	0x0801b520
 8010b80:	0801b828 	.word	0x0801b828

08010b84 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b088      	sub	sp, #32
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	4613      	mov	r3, r2
 8010b90:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8010b92:	88fb      	ldrh	r3, [r7, #6]
 8010b94:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d109      	bne.n	8010bb4 <pbuf_take+0x30>
 8010ba0:	4b3a      	ldr	r3, [pc, #232]	; (8010c8c <pbuf_take+0x108>)
 8010ba2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8010ba6:	493a      	ldr	r1, [pc, #232]	; (8010c90 <pbuf_take+0x10c>)
 8010ba8:	483a      	ldr	r0, [pc, #232]	; (8010c94 <pbuf_take+0x110>)
 8010baa:	f008 fe65 	bl	8019878 <iprintf>
 8010bae:	f06f 030f 	mvn.w	r3, #15
 8010bb2:	e067      	b.n	8010c84 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d109      	bne.n	8010bce <pbuf_take+0x4a>
 8010bba:	4b34      	ldr	r3, [pc, #208]	; (8010c8c <pbuf_take+0x108>)
 8010bbc:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8010bc0:	4935      	ldr	r1, [pc, #212]	; (8010c98 <pbuf_take+0x114>)
 8010bc2:	4834      	ldr	r0, [pc, #208]	; (8010c94 <pbuf_take+0x110>)
 8010bc4:	f008 fe58 	bl	8019878 <iprintf>
 8010bc8:	f06f 030f 	mvn.w	r3, #15
 8010bcc:	e05a      	b.n	8010c84 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	891b      	ldrh	r3, [r3, #8]
 8010bd2:	88fa      	ldrh	r2, [r7, #6]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d909      	bls.n	8010bec <pbuf_take+0x68>
 8010bd8:	4b2c      	ldr	r3, [pc, #176]	; (8010c8c <pbuf_take+0x108>)
 8010bda:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8010bde:	492f      	ldr	r1, [pc, #188]	; (8010c9c <pbuf_take+0x118>)
 8010be0:	482c      	ldr	r0, [pc, #176]	; (8010c94 <pbuf_take+0x110>)
 8010be2:	f008 fe49 	bl	8019878 <iprintf>
 8010be6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bea:	e04b      	b.n	8010c84 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d007      	beq.n	8010c02 <pbuf_take+0x7e>
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d004      	beq.n	8010c02 <pbuf_take+0x7e>
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	891b      	ldrh	r3, [r3, #8]
 8010bfc:	88fa      	ldrh	r2, [r7, #6]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d902      	bls.n	8010c08 <pbuf_take+0x84>
    return ERR_ARG;
 8010c02:	f06f 030f 	mvn.w	r3, #15
 8010c06:	e03d      	b.n	8010c84 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	61fb      	str	r3, [r7, #28]
 8010c0c:	e028      	b.n	8010c60 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d106      	bne.n	8010c22 <pbuf_take+0x9e>
 8010c14:	4b1d      	ldr	r3, [pc, #116]	; (8010c8c <pbuf_take+0x108>)
 8010c16:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010c1a:	4921      	ldr	r1, [pc, #132]	; (8010ca0 <pbuf_take+0x11c>)
 8010c1c:	481d      	ldr	r0, [pc, #116]	; (8010c94 <pbuf_take+0x110>)
 8010c1e:	f008 fe2b 	bl	8019878 <iprintf>
    buf_copy_len = total_copy_len;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	895b      	ldrh	r3, [r3, #10]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d902      	bls.n	8010c38 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	895b      	ldrh	r3, [r3, #10]
 8010c36:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	6858      	ldr	r0, [r3, #4]
 8010c3c:	68ba      	ldr	r2, [r7, #8]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	4413      	add	r3, r2
 8010c42:	69ba      	ldr	r2, [r7, #24]
 8010c44:	4619      	mov	r1, r3
 8010c46:	f008 fd52 	bl	80196ee <memcpy>
    total_copy_len -= buf_copy_len;
 8010c4a:	697a      	ldr	r2, [r7, #20]
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8010c52:	693a      	ldr	r2, [r7, #16]
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	4413      	add	r3, r2
 8010c58:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	61fb      	str	r3, [r7, #28]
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1d3      	bne.n	8010c0e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d103      	bne.n	8010c74 <pbuf_take+0xf0>
 8010c6c:	88fb      	ldrh	r3, [r7, #6]
 8010c6e:	693a      	ldr	r2, [r7, #16]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d006      	beq.n	8010c82 <pbuf_take+0xfe>
 8010c74:	4b05      	ldr	r3, [pc, #20]	; (8010c8c <pbuf_take+0x108>)
 8010c76:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8010c7a:	490a      	ldr	r1, [pc, #40]	; (8010ca4 <pbuf_take+0x120>)
 8010c7c:	4805      	ldr	r0, [pc, #20]	; (8010c94 <pbuf_take+0x110>)
 8010c7e:	f008 fdfb 	bl	8019878 <iprintf>
  return ERR_OK;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3720      	adds	r7, #32
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	0801b4c0 	.word	0x0801b4c0
 8010c90:	0801b898 	.word	0x0801b898
 8010c94:	0801b520 	.word	0x0801b520
 8010c98:	0801b8b0 	.word	0x0801b8b0
 8010c9c:	0801b8cc 	.word	0x0801b8cc
 8010ca0:	0801b8ec 	.word	0x0801b8ec
 8010ca4:	0801b904 	.word	0x0801b904

08010ca8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	4603      	mov	r3, r0
 8010cb0:	603a      	str	r2, [r7, #0]
 8010cb2:	71fb      	strb	r3, [r7, #7]
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	8919      	ldrh	r1, [r3, #8]
 8010cbc:	88ba      	ldrh	r2, [r7, #4]
 8010cbe:	79fb      	ldrb	r3, [r7, #7]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ff fa03 	bl	80100cc <pbuf_alloc>
 8010cc6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <pbuf_clone+0x2a>
    return NULL;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e011      	b.n	8010cf6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010cd2:	6839      	ldr	r1, [r7, #0]
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f7ff fe11 	bl	80108fc <pbuf_copy>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010cde:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d006      	beq.n	8010cf4 <pbuf_clone+0x4c>
 8010ce6:	4b06      	ldr	r3, [pc, #24]	; (8010d00 <pbuf_clone+0x58>)
 8010ce8:	f240 5224 	movw	r2, #1316	; 0x524
 8010cec:	4905      	ldr	r1, [pc, #20]	; (8010d04 <pbuf_clone+0x5c>)
 8010cee:	4806      	ldr	r0, [pc, #24]	; (8010d08 <pbuf_clone+0x60>)
 8010cf0:	f008 fdc2 	bl	8019878 <iprintf>
  return q;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3710      	adds	r7, #16
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	0801b4c0 	.word	0x0801b4c0
 8010d04:	0801b934 	.word	0x0801b934
 8010d08:	0801b520 	.word	0x0801b520

08010d0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d10:	f008 fe40 	bl	8019994 <rand>
 8010d14:	4603      	mov	r3, r0
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	4b01      	ldr	r3, [pc, #4]	; (8010d2c <tcp_init+0x20>)
 8010d26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010d28:	bf00      	nop
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	20000160 	.word	0x20000160

08010d30 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	7d1b      	ldrb	r3, [r3, #20]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d105      	bne.n	8010d4c <tcp_free+0x1c>
 8010d40:	4b06      	ldr	r3, [pc, #24]	; (8010d5c <tcp_free+0x2c>)
 8010d42:	22d4      	movs	r2, #212	; 0xd4
 8010d44:	4906      	ldr	r1, [pc, #24]	; (8010d60 <tcp_free+0x30>)
 8010d46:	4807      	ldr	r0, [pc, #28]	; (8010d64 <tcp_free+0x34>)
 8010d48:	f008 fd96 	bl	8019878 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010d4c:	6879      	ldr	r1, [r7, #4]
 8010d4e:	2001      	movs	r0, #1
 8010d50:	f7fe fdfc 	bl	800f94c <memp_free>
}
 8010d54:	bf00      	nop
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	0801b9c0 	.word	0x0801b9c0
 8010d60:	0801b9f0 	.word	0x0801b9f0
 8010d64:	0801ba04 	.word	0x0801ba04

08010d68 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b082      	sub	sp, #8
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	7d1b      	ldrb	r3, [r3, #20]
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	d105      	bne.n	8010d84 <tcp_free_listen+0x1c>
 8010d78:	4b06      	ldr	r3, [pc, #24]	; (8010d94 <tcp_free_listen+0x2c>)
 8010d7a:	22df      	movs	r2, #223	; 0xdf
 8010d7c:	4906      	ldr	r1, [pc, #24]	; (8010d98 <tcp_free_listen+0x30>)
 8010d7e:	4807      	ldr	r0, [pc, #28]	; (8010d9c <tcp_free_listen+0x34>)
 8010d80:	f008 fd7a 	bl	8019878 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	2002      	movs	r0, #2
 8010d88:	f7fe fde0 	bl	800f94c <memp_free>
}
 8010d8c:	bf00      	nop
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	0801b9c0 	.word	0x0801b9c0
 8010d98:	0801ba2c 	.word	0x0801ba2c
 8010d9c:	0801ba04 	.word	0x0801ba04

08010da0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010da4:	f000 fea2 	bl	8011aec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010da8:	4b07      	ldr	r3, [pc, #28]	; (8010dc8 <tcp_tmr+0x28>)
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	3301      	adds	r3, #1
 8010dae:	b2da      	uxtb	r2, r3
 8010db0:	4b05      	ldr	r3, [pc, #20]	; (8010dc8 <tcp_tmr+0x28>)
 8010db2:	701a      	strb	r2, [r3, #0]
 8010db4:	4b04      	ldr	r3, [pc, #16]	; (8010dc8 <tcp_tmr+0x28>)
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	f003 0301 	and.w	r3, r3, #1
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d001      	beq.n	8010dc4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010dc0:	f000 fb54 	bl	801146c <tcp_slowtmr>
  }
}
 8010dc4:	bf00      	nop
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	2000daad 	.word	0x2000daad

08010dcc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d105      	bne.n	8010de8 <tcp_remove_listener+0x1c>
 8010ddc:	4b0d      	ldr	r3, [pc, #52]	; (8010e14 <tcp_remove_listener+0x48>)
 8010dde:	22ff      	movs	r2, #255	; 0xff
 8010de0:	490d      	ldr	r1, [pc, #52]	; (8010e18 <tcp_remove_listener+0x4c>)
 8010de2:	480e      	ldr	r0, [pc, #56]	; (8010e1c <tcp_remove_listener+0x50>)
 8010de4:	f008 fd48 	bl	8019878 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	60fb      	str	r3, [r7, #12]
 8010dec:	e00a      	b.n	8010e04 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d102      	bne.n	8010dfe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1f1      	bne.n	8010dee <tcp_remove_listener+0x22>
    }
  }
}
 8010e0a:	bf00      	nop
 8010e0c:	bf00      	nop
 8010e0e:	3710      	adds	r7, #16
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	0801b9c0 	.word	0x0801b9c0
 8010e18:	0801ba48 	.word	0x0801ba48
 8010e1c:	0801ba04 	.word	0x0801ba04

08010e20 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d106      	bne.n	8010e3c <tcp_listen_closed+0x1c>
 8010e2e:	4b14      	ldr	r3, [pc, #80]	; (8010e80 <tcp_listen_closed+0x60>)
 8010e30:	f240 1211 	movw	r2, #273	; 0x111
 8010e34:	4913      	ldr	r1, [pc, #76]	; (8010e84 <tcp_listen_closed+0x64>)
 8010e36:	4814      	ldr	r0, [pc, #80]	; (8010e88 <tcp_listen_closed+0x68>)
 8010e38:	f008 fd1e 	bl	8019878 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d006      	beq.n	8010e52 <tcp_listen_closed+0x32>
 8010e44:	4b0e      	ldr	r3, [pc, #56]	; (8010e80 <tcp_listen_closed+0x60>)
 8010e46:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010e4a:	4910      	ldr	r1, [pc, #64]	; (8010e8c <tcp_listen_closed+0x6c>)
 8010e4c:	480e      	ldr	r0, [pc, #56]	; (8010e88 <tcp_listen_closed+0x68>)
 8010e4e:	f008 fd13 	bl	8019878 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e52:	2301      	movs	r3, #1
 8010e54:	60fb      	str	r3, [r7, #12]
 8010e56:	e00b      	b.n	8010e70 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010e58:	4a0d      	ldr	r2, [pc, #52]	; (8010e90 <tcp_listen_closed+0x70>)
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	6879      	ldr	r1, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff ffb1 	bl	8010dcc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	60fb      	str	r3, [r7, #12]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2b03      	cmp	r3, #3
 8010e74:	d9f0      	bls.n	8010e58 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010e76:	bf00      	nop
 8010e78:	bf00      	nop
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	0801b9c0 	.word	0x0801b9c0
 8010e84:	0801ba70 	.word	0x0801ba70
 8010e88:	0801ba04 	.word	0x0801ba04
 8010e8c:	0801ba7c 	.word	0x0801ba7c
 8010e90:	0801da80 	.word	0x0801da80

08010e94 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010e94:	b5b0      	push	{r4, r5, r7, lr}
 8010e96:	b088      	sub	sp, #32
 8010e98:	af04      	add	r7, sp, #16
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <tcp_close_shutdown+0x20>
 8010ea6:	4b63      	ldr	r3, [pc, #396]	; (8011034 <tcp_close_shutdown+0x1a0>)
 8010ea8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010eac:	4962      	ldr	r1, [pc, #392]	; (8011038 <tcp_close_shutdown+0x1a4>)
 8010eae:	4863      	ldr	r0, [pc, #396]	; (801103c <tcp_close_shutdown+0x1a8>)
 8010eb0:	f008 fce2 	bl	8019878 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010eb4:	78fb      	ldrb	r3, [r7, #3]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d066      	beq.n	8010f88 <tcp_close_shutdown+0xf4>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	7d1b      	ldrb	r3, [r3, #20]
 8010ebe:	2b04      	cmp	r3, #4
 8010ec0:	d003      	beq.n	8010eca <tcp_close_shutdown+0x36>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	7d1b      	ldrb	r3, [r3, #20]
 8010ec6:	2b07      	cmp	r3, #7
 8010ec8:	d15e      	bne.n	8010f88 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d104      	bne.n	8010edc <tcp_close_shutdown+0x48>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ed6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010eda:	d055      	beq.n	8010f88 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	8b5b      	ldrh	r3, [r3, #26]
 8010ee0:	f003 0310 	and.w	r3, r3, #16
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d106      	bne.n	8010ef6 <tcp_close_shutdown+0x62>
 8010ee8:	4b52      	ldr	r3, [pc, #328]	; (8011034 <tcp_close_shutdown+0x1a0>)
 8010eea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010eee:	4954      	ldr	r1, [pc, #336]	; (8011040 <tcp_close_shutdown+0x1ac>)
 8010ef0:	4852      	ldr	r0, [pc, #328]	; (801103c <tcp_close_shutdown+0x1a8>)
 8010ef2:	f008 fcc1 	bl	8019878 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010efe:	687d      	ldr	r5, [r7, #4]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	3304      	adds	r3, #4
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	8ad2      	ldrh	r2, [r2, #22]
 8010f08:	6879      	ldr	r1, [r7, #4]
 8010f0a:	8b09      	ldrh	r1, [r1, #24]
 8010f0c:	9102      	str	r1, [sp, #8]
 8010f0e:	9201      	str	r2, [sp, #4]
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	462b      	mov	r3, r5
 8010f14:	4622      	mov	r2, r4
 8010f16:	4601      	mov	r1, r0
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f004 fe91 	bl	8015c40 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f001 f8c6 	bl	80120b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010f24:	4b47      	ldr	r3, [pc, #284]	; (8011044 <tcp_close_shutdown+0x1b0>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d105      	bne.n	8010f3a <tcp_close_shutdown+0xa6>
 8010f2e:	4b45      	ldr	r3, [pc, #276]	; (8011044 <tcp_close_shutdown+0x1b0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	4a43      	ldr	r2, [pc, #268]	; (8011044 <tcp_close_shutdown+0x1b0>)
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	e013      	b.n	8010f62 <tcp_close_shutdown+0xce>
 8010f3a:	4b42      	ldr	r3, [pc, #264]	; (8011044 <tcp_close_shutdown+0x1b0>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	60fb      	str	r3, [r7, #12]
 8010f40:	e00c      	b.n	8010f5c <tcp_close_shutdown+0xc8>
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d104      	bne.n	8010f56 <tcp_close_shutdown+0xc2>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	68da      	ldr	r2, [r3, #12]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	60da      	str	r2, [r3, #12]
 8010f54:	e005      	b.n	8010f62 <tcp_close_shutdown+0xce>
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	68db      	ldr	r3, [r3, #12]
 8010f5a:	60fb      	str	r3, [r7, #12]
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1ef      	bne.n	8010f42 <tcp_close_shutdown+0xae>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2200      	movs	r2, #0
 8010f66:	60da      	str	r2, [r3, #12]
 8010f68:	4b37      	ldr	r3, [pc, #220]	; (8011048 <tcp_close_shutdown+0x1b4>)
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010f6e:	4b37      	ldr	r3, [pc, #220]	; (801104c <tcp_close_shutdown+0x1b8>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d102      	bne.n	8010f7e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010f78:	f003 fd5e 	bl	8014a38 <tcp_trigger_input_pcb_close>
 8010f7c:	e002      	b.n	8010f84 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f7ff fed6 	bl	8010d30 <tcp_free>
      }
      return ERR_OK;
 8010f84:	2300      	movs	r3, #0
 8010f86:	e050      	b.n	801102a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	7d1b      	ldrb	r3, [r3, #20]
 8010f8c:	2b02      	cmp	r3, #2
 8010f8e:	d03b      	beq.n	8011008 <tcp_close_shutdown+0x174>
 8010f90:	2b02      	cmp	r3, #2
 8010f92:	dc44      	bgt.n	801101e <tcp_close_shutdown+0x18a>
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <tcp_close_shutdown+0x10a>
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d02a      	beq.n	8010ff2 <tcp_close_shutdown+0x15e>
 8010f9c:	e03f      	b.n	801101e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	8adb      	ldrh	r3, [r3, #22]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d021      	beq.n	8010fea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010fa6:	4b2a      	ldr	r3, [pc, #168]	; (8011050 <tcp_close_shutdown+0x1bc>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d105      	bne.n	8010fbc <tcp_close_shutdown+0x128>
 8010fb0:	4b27      	ldr	r3, [pc, #156]	; (8011050 <tcp_close_shutdown+0x1bc>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	4a26      	ldr	r2, [pc, #152]	; (8011050 <tcp_close_shutdown+0x1bc>)
 8010fb8:	6013      	str	r3, [r2, #0]
 8010fba:	e013      	b.n	8010fe4 <tcp_close_shutdown+0x150>
 8010fbc:	4b24      	ldr	r3, [pc, #144]	; (8011050 <tcp_close_shutdown+0x1bc>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	60bb      	str	r3, [r7, #8]
 8010fc2:	e00c      	b.n	8010fde <tcp_close_shutdown+0x14a>
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d104      	bne.n	8010fd8 <tcp_close_shutdown+0x144>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	68da      	ldr	r2, [r3, #12]
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	60da      	str	r2, [r3, #12]
 8010fd6:	e005      	b.n	8010fe4 <tcp_close_shutdown+0x150>
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	60bb      	str	r3, [r7, #8]
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1ef      	bne.n	8010fc4 <tcp_close_shutdown+0x130>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7ff fea0 	bl	8010d30 <tcp_free>
      break;
 8010ff0:	e01a      	b.n	8011028 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f7ff ff14 	bl	8010e20 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010ff8:	6879      	ldr	r1, [r7, #4]
 8010ffa:	4816      	ldr	r0, [pc, #88]	; (8011054 <tcp_close_shutdown+0x1c0>)
 8010ffc:	f001 f8a8 	bl	8012150 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff feb1 	bl	8010d68 <tcp_free_listen>
      break;
 8011006:	e00f      	b.n	8011028 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011008:	6879      	ldr	r1, [r7, #4]
 801100a:	480e      	ldr	r0, [pc, #56]	; (8011044 <tcp_close_shutdown+0x1b0>)
 801100c:	f001 f8a0 	bl	8012150 <tcp_pcb_remove>
 8011010:	4b0d      	ldr	r3, [pc, #52]	; (8011048 <tcp_close_shutdown+0x1b4>)
 8011012:	2201      	movs	r2, #1
 8011014:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fe8a 	bl	8010d30 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801101c:	e004      	b.n	8011028 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 f81a 	bl	8011058 <tcp_close_shutdown_fin>
 8011024:	4603      	mov	r3, r0
 8011026:	e000      	b.n	801102a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bdb0      	pop	{r4, r5, r7, pc}
 8011032:	bf00      	nop
 8011034:	0801b9c0 	.word	0x0801b9c0
 8011038:	0801ba94 	.word	0x0801ba94
 801103c:	0801ba04 	.word	0x0801ba04
 8011040:	0801bab4 	.word	0x0801bab4
 8011044:	2000daa4 	.word	0x2000daa4
 8011048:	2000daac 	.word	0x2000daac
 801104c:	2000dae4 	.word	0x2000dae4
 8011050:	2000da9c 	.word	0x2000da9c
 8011054:	2000daa0 	.word	0x2000daa0

08011058 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <tcp_close_shutdown_fin+0x1c>
 8011066:	4b2e      	ldr	r3, [pc, #184]	; (8011120 <tcp_close_shutdown_fin+0xc8>)
 8011068:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801106c:	492d      	ldr	r1, [pc, #180]	; (8011124 <tcp_close_shutdown_fin+0xcc>)
 801106e:	482e      	ldr	r0, [pc, #184]	; (8011128 <tcp_close_shutdown_fin+0xd0>)
 8011070:	f008 fc02 	bl	8019878 <iprintf>

  switch (pcb->state) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	7d1b      	ldrb	r3, [r3, #20]
 8011078:	2b07      	cmp	r3, #7
 801107a:	d020      	beq.n	80110be <tcp_close_shutdown_fin+0x66>
 801107c:	2b07      	cmp	r3, #7
 801107e:	dc2b      	bgt.n	80110d8 <tcp_close_shutdown_fin+0x80>
 8011080:	2b03      	cmp	r3, #3
 8011082:	d002      	beq.n	801108a <tcp_close_shutdown_fin+0x32>
 8011084:	2b04      	cmp	r3, #4
 8011086:	d00d      	beq.n	80110a4 <tcp_close_shutdown_fin+0x4c>
 8011088:	e026      	b.n	80110d8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f003 fee6 	bl	8014e5c <tcp_send_fin>
 8011090:	4603      	mov	r3, r0
 8011092:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d11f      	bne.n	80110dc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2205      	movs	r2, #5
 80110a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110a2:	e01b      	b.n	80110dc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f003 fed9 	bl	8014e5c <tcp_send_fin>
 80110aa:	4603      	mov	r3, r0
 80110ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80110ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d114      	bne.n	80110e0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2205      	movs	r2, #5
 80110ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110bc:	e010      	b.n	80110e0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f003 fecc 	bl	8014e5c <tcp_send_fin>
 80110c4:	4603      	mov	r3, r0
 80110c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80110c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d109      	bne.n	80110e4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2209      	movs	r2, #9
 80110d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110d6:	e005      	b.n	80110e4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80110d8:	2300      	movs	r3, #0
 80110da:	e01c      	b.n	8011116 <tcp_close_shutdown_fin+0xbe>
      break;
 80110dc:	bf00      	nop
 80110de:	e002      	b.n	80110e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80110e0:	bf00      	nop
 80110e2:	e000      	b.n	80110e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80110e4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80110e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d103      	bne.n	80110f6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f003 fff2 	bl	80150d8 <tcp_output>
 80110f4:	e00d      	b.n	8011112 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80110f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fe:	d108      	bne.n	8011112 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	8b5b      	ldrh	r3, [r3, #26]
 8011104:	f043 0308 	orr.w	r3, r3, #8
 8011108:	b29a      	uxth	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801110e:	2300      	movs	r3, #0
 8011110:	e001      	b.n	8011116 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011112:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	0801b9c0 	.word	0x0801b9c0
 8011124:	0801ba70 	.word	0x0801ba70
 8011128:	0801ba04 	.word	0x0801ba04

0801112c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d109      	bne.n	801114e <tcp_close+0x22>
 801113a:	4b0f      	ldr	r3, [pc, #60]	; (8011178 <tcp_close+0x4c>)
 801113c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011140:	490e      	ldr	r1, [pc, #56]	; (801117c <tcp_close+0x50>)
 8011142:	480f      	ldr	r0, [pc, #60]	; (8011180 <tcp_close+0x54>)
 8011144:	f008 fb98 	bl	8019878 <iprintf>
 8011148:	f06f 030f 	mvn.w	r3, #15
 801114c:	e00f      	b.n	801116e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	7d1b      	ldrb	r3, [r3, #20]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d006      	beq.n	8011164 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	8b5b      	ldrh	r3, [r3, #26]
 801115a:	f043 0310 	orr.w	r3, r3, #16
 801115e:	b29a      	uxth	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011164:	2101      	movs	r1, #1
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f7ff fe94 	bl	8010e94 <tcp_close_shutdown>
 801116c:	4603      	mov	r3, r0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	0801b9c0 	.word	0x0801b9c0
 801117c:	0801bad0 	.word	0x0801bad0
 8011180:	0801ba04 	.word	0x0801ba04

08011184 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b08e      	sub	sp, #56	; 0x38
 8011188:	af04      	add	r7, sp, #16
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d107      	bne.n	80111a4 <tcp_abandon+0x20>
 8011194:	4b52      	ldr	r3, [pc, #328]	; (80112e0 <tcp_abandon+0x15c>)
 8011196:	f240 223d 	movw	r2, #573	; 0x23d
 801119a:	4952      	ldr	r1, [pc, #328]	; (80112e4 <tcp_abandon+0x160>)
 801119c:	4852      	ldr	r0, [pc, #328]	; (80112e8 <tcp_abandon+0x164>)
 801119e:	f008 fb6b 	bl	8019878 <iprintf>
 80111a2:	e099      	b.n	80112d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	7d1b      	ldrb	r3, [r3, #20]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d106      	bne.n	80111ba <tcp_abandon+0x36>
 80111ac:	4b4c      	ldr	r3, [pc, #304]	; (80112e0 <tcp_abandon+0x15c>)
 80111ae:	f44f 7210 	mov.w	r2, #576	; 0x240
 80111b2:	494e      	ldr	r1, [pc, #312]	; (80112ec <tcp_abandon+0x168>)
 80111b4:	484c      	ldr	r0, [pc, #304]	; (80112e8 <tcp_abandon+0x164>)
 80111b6:	f008 fb5f 	bl	8019878 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	7d1b      	ldrb	r3, [r3, #20]
 80111be:	2b0a      	cmp	r3, #10
 80111c0:	d107      	bne.n	80111d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80111c2:	6879      	ldr	r1, [r7, #4]
 80111c4:	484a      	ldr	r0, [pc, #296]	; (80112f0 <tcp_abandon+0x16c>)
 80111c6:	f000 ffc3 	bl	8012150 <tcp_pcb_remove>
    tcp_free(pcb);
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f7ff fdb0 	bl	8010d30 <tcp_free>
 80111d0:	e082      	b.n	80112d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	691b      	ldr	r3, [r3, #16]
 80111f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	7d1b      	ldrb	r3, [r3, #20]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d126      	bne.n	801124a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	8adb      	ldrh	r3, [r3, #22]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d02e      	beq.n	8011262 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011204:	4b3b      	ldr	r3, [pc, #236]	; (80112f4 <tcp_abandon+0x170>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	429a      	cmp	r2, r3
 801120c:	d105      	bne.n	801121a <tcp_abandon+0x96>
 801120e:	4b39      	ldr	r3, [pc, #228]	; (80112f4 <tcp_abandon+0x170>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	4a37      	ldr	r2, [pc, #220]	; (80112f4 <tcp_abandon+0x170>)
 8011216:	6013      	str	r3, [r2, #0]
 8011218:	e013      	b.n	8011242 <tcp_abandon+0xbe>
 801121a:	4b36      	ldr	r3, [pc, #216]	; (80112f4 <tcp_abandon+0x170>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	61fb      	str	r3, [r7, #28]
 8011220:	e00c      	b.n	801123c <tcp_abandon+0xb8>
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	429a      	cmp	r2, r3
 801122a:	d104      	bne.n	8011236 <tcp_abandon+0xb2>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	68da      	ldr	r2, [r3, #12]
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	60da      	str	r2, [r3, #12]
 8011234:	e005      	b.n	8011242 <tcp_abandon+0xbe>
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	61fb      	str	r3, [r7, #28]
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d1ef      	bne.n	8011222 <tcp_abandon+0x9e>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	60da      	str	r2, [r3, #12]
 8011248:	e00b      	b.n	8011262 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	8adb      	ldrh	r3, [r3, #22]
 8011252:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	4828      	ldr	r0, [pc, #160]	; (80112f8 <tcp_abandon+0x174>)
 8011258:	f000 ff7a 	bl	8012150 <tcp_pcb_remove>
 801125c:	4b27      	ldr	r3, [pc, #156]	; (80112fc <tcp_abandon+0x178>)
 801125e:	2201      	movs	r2, #1
 8011260:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011266:	2b00      	cmp	r3, #0
 8011268:	d004      	beq.n	8011274 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801126e:	4618      	mov	r0, r3
 8011270:	f000 fd1c 	bl	8011cac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011278:	2b00      	cmp	r3, #0
 801127a:	d004      	beq.n	8011286 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011280:	4618      	mov	r0, r3
 8011282:	f000 fd13 	bl	8011cac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801128a:	2b00      	cmp	r3, #0
 801128c:	d004      	beq.n	8011298 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011292:	4618      	mov	r0, r3
 8011294:	f000 fd0a 	bl	8011cac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00e      	beq.n	80112bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801129e:	6879      	ldr	r1, [r7, #4]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	3304      	adds	r3, #4
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	8b12      	ldrh	r2, [r2, #24]
 80112a8:	9202      	str	r2, [sp, #8]
 80112aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80112ac:	9201      	str	r2, [sp, #4]
 80112ae:	9300      	str	r3, [sp, #0]
 80112b0:	460b      	mov	r3, r1
 80112b2:	697a      	ldr	r2, [r7, #20]
 80112b4:	69b9      	ldr	r1, [r7, #24]
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f004 fcc2 	bl	8015c40 <tcp_rst>
    }
    last_state = pcb->state;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	7d1b      	ldrb	r3, [r3, #20]
 80112c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f7ff fd34 	bl	8010d30 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d004      	beq.n	80112d8 <tcp_abandon+0x154>
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	f06f 010c 	mvn.w	r1, #12
 80112d4:	68f8      	ldr	r0, [r7, #12]
 80112d6:	4798      	blx	r3
  }
}
 80112d8:	3728      	adds	r7, #40	; 0x28
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	bf00      	nop
 80112e0:	0801b9c0 	.word	0x0801b9c0
 80112e4:	0801bb04 	.word	0x0801bb04
 80112e8:	0801ba04 	.word	0x0801ba04
 80112ec:	0801bb20 	.word	0x0801bb20
 80112f0:	2000daa8 	.word	0x2000daa8
 80112f4:	2000da9c 	.word	0x2000da9c
 80112f8:	2000daa4 	.word	0x2000daa4
 80112fc:	2000daac 	.word	0x2000daac

08011300 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011308:	2101      	movs	r1, #1
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7ff ff3a 	bl	8011184 <tcp_abandon>
}
 8011310:	bf00      	nop
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d106      	bne.n	8011334 <tcp_update_rcv_ann_wnd+0x1c>
 8011326:	4b25      	ldr	r3, [pc, #148]	; (80113bc <tcp_update_rcv_ann_wnd+0xa4>)
 8011328:	f240 32a6 	movw	r2, #934	; 0x3a6
 801132c:	4924      	ldr	r1, [pc, #144]	; (80113c0 <tcp_update_rcv_ann_wnd+0xa8>)
 801132e:	4825      	ldr	r0, [pc, #148]	; (80113c4 <tcp_update_rcv_ann_wnd+0xac>)
 8011330:	f008 faa2 	bl	8019878 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801133c:	4413      	add	r3, r2
 801133e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011348:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801134c:	bf28      	it	cs
 801134e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011352:	b292      	uxth	r2, r2
 8011354:	4413      	add	r3, r2
 8011356:	68fa      	ldr	r2, [r7, #12]
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	2b00      	cmp	r3, #0
 801135c:	db08      	blt.n	8011370 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	1ad3      	subs	r3, r2, r3
 801136e:	e020      	b.n	80113b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011378:	1ad3      	subs	r3, r2, r3
 801137a:	2b00      	cmp	r3, #0
 801137c:	dd03      	ble.n	8011386 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2200      	movs	r2, #0
 8011382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011384:	e014      	b.n	80113b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011398:	d306      	bcc.n	80113a8 <tcp_update_rcv_ann_wnd+0x90>
 801139a:	4b08      	ldr	r3, [pc, #32]	; (80113bc <tcp_update_rcv_ann_wnd+0xa4>)
 801139c:	f240 32b6 	movw	r2, #950	; 0x3b6
 80113a0:	4909      	ldr	r1, [pc, #36]	; (80113c8 <tcp_update_rcv_ann_wnd+0xb0>)
 80113a2:	4808      	ldr	r0, [pc, #32]	; (80113c4 <tcp_update_rcv_ann_wnd+0xac>)
 80113a4:	f008 fa68 	bl	8019878 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80113b0:	2300      	movs	r3, #0
  }
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	0801b9c0 	.word	0x0801b9c0
 80113c0:	0801bc1c 	.word	0x0801bc1c
 80113c4:	0801ba04 	.word	0x0801ba04
 80113c8:	0801bc40 	.word	0x0801bc40

080113cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	460b      	mov	r3, r1
 80113d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d107      	bne.n	80113ee <tcp_recved+0x22>
 80113de:	4b1f      	ldr	r3, [pc, #124]	; (801145c <tcp_recved+0x90>)
 80113e0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80113e4:	491e      	ldr	r1, [pc, #120]	; (8011460 <tcp_recved+0x94>)
 80113e6:	481f      	ldr	r0, [pc, #124]	; (8011464 <tcp_recved+0x98>)
 80113e8:	f008 fa46 	bl	8019878 <iprintf>
 80113ec:	e032      	b.n	8011454 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	7d1b      	ldrb	r3, [r3, #20]
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d106      	bne.n	8011404 <tcp_recved+0x38>
 80113f6:	4b19      	ldr	r3, [pc, #100]	; (801145c <tcp_recved+0x90>)
 80113f8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80113fc:	491a      	ldr	r1, [pc, #104]	; (8011468 <tcp_recved+0x9c>)
 80113fe:	4819      	ldr	r0, [pc, #100]	; (8011464 <tcp_recved+0x98>)
 8011400:	f008 fa3a 	bl	8019878 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011408:	887b      	ldrh	r3, [r7, #2]
 801140a:	4413      	add	r3, r2
 801140c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801140e:	89fb      	ldrh	r3, [r7, #14]
 8011410:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011414:	d804      	bhi.n	8011420 <tcp_recved+0x54>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801141a:	89fa      	ldrh	r2, [r7, #14]
 801141c:	429a      	cmp	r2, r3
 801141e:	d204      	bcs.n	801142a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011426:	851a      	strh	r2, [r3, #40]	; 0x28
 8011428:	e002      	b.n	8011430 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	89fa      	ldrh	r2, [r7, #14]
 801142e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f7ff ff71 	bl	8011318 <tcp_update_rcv_ann_wnd>
 8011436:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801143e:	d309      	bcc.n	8011454 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	8b5b      	ldrh	r3, [r3, #26]
 8011444:	f043 0302 	orr.w	r3, r3, #2
 8011448:	b29a      	uxth	r2, r3
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f003 fe42 	bl	80150d8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	0801b9c0 	.word	0x0801b9c0
 8011460:	0801bc5c 	.word	0x0801bc5c
 8011464:	0801ba04 	.word	0x0801ba04
 8011468:	0801bc74 	.word	0x0801bc74

0801146c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801146c:	b5b0      	push	{r4, r5, r7, lr}
 801146e:	b090      	sub	sp, #64	; 0x40
 8011470:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011472:	2300      	movs	r3, #0
 8011474:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011478:	4b94      	ldr	r3, [pc, #592]	; (80116cc <tcp_slowtmr+0x260>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	3301      	adds	r3, #1
 801147e:	4a93      	ldr	r2, [pc, #588]	; (80116cc <tcp_slowtmr+0x260>)
 8011480:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011482:	4b93      	ldr	r3, [pc, #588]	; (80116d0 <tcp_slowtmr+0x264>)
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	3301      	adds	r3, #1
 8011488:	b2da      	uxtb	r2, r3
 801148a:	4b91      	ldr	r3, [pc, #580]	; (80116d0 <tcp_slowtmr+0x264>)
 801148c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801148e:	2300      	movs	r3, #0
 8011490:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011492:	4b90      	ldr	r3, [pc, #576]	; (80116d4 <tcp_slowtmr+0x268>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011498:	e29f      	b.n	80119da <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149c:	7d1b      	ldrb	r3, [r3, #20]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d106      	bne.n	80114b0 <tcp_slowtmr+0x44>
 80114a2:	4b8d      	ldr	r3, [pc, #564]	; (80116d8 <tcp_slowtmr+0x26c>)
 80114a4:	f240 42be 	movw	r2, #1214	; 0x4be
 80114a8:	498c      	ldr	r1, [pc, #560]	; (80116dc <tcp_slowtmr+0x270>)
 80114aa:	488d      	ldr	r0, [pc, #564]	; (80116e0 <tcp_slowtmr+0x274>)
 80114ac:	f008 f9e4 	bl	8019878 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80114b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b2:	7d1b      	ldrb	r3, [r3, #20]
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d106      	bne.n	80114c6 <tcp_slowtmr+0x5a>
 80114b8:	4b87      	ldr	r3, [pc, #540]	; (80116d8 <tcp_slowtmr+0x26c>)
 80114ba:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80114be:	4989      	ldr	r1, [pc, #548]	; (80116e4 <tcp_slowtmr+0x278>)
 80114c0:	4887      	ldr	r0, [pc, #540]	; (80116e0 <tcp_slowtmr+0x274>)
 80114c2:	f008 f9d9 	bl	8019878 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80114c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c8:	7d1b      	ldrb	r3, [r3, #20]
 80114ca:	2b0a      	cmp	r3, #10
 80114cc:	d106      	bne.n	80114dc <tcp_slowtmr+0x70>
 80114ce:	4b82      	ldr	r3, [pc, #520]	; (80116d8 <tcp_slowtmr+0x26c>)
 80114d0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80114d4:	4984      	ldr	r1, [pc, #528]	; (80116e8 <tcp_slowtmr+0x27c>)
 80114d6:	4882      	ldr	r0, [pc, #520]	; (80116e0 <tcp_slowtmr+0x274>)
 80114d8:	f008 f9ce 	bl	8019878 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80114dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114de:	7f9a      	ldrb	r2, [r3, #30]
 80114e0:	4b7b      	ldr	r3, [pc, #492]	; (80116d0 <tcp_slowtmr+0x264>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d105      	bne.n	80114f4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80114e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80114ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80114f2:	e272      	b.n	80119da <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80114f4:	4b76      	ldr	r3, [pc, #472]	; (80116d0 <tcp_slowtmr+0x264>)
 80114f6:	781a      	ldrb	r2, [r3, #0]
 80114f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80114fc:	2300      	movs	r3, #0
 80114fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011502:	2300      	movs	r3, #0
 8011504:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	7d1b      	ldrb	r3, [r3, #20]
 801150c:	2b02      	cmp	r3, #2
 801150e:	d10a      	bne.n	8011526 <tcp_slowtmr+0xba>
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011516:	2b05      	cmp	r3, #5
 8011518:	d905      	bls.n	8011526 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801151a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801151e:	3301      	adds	r3, #1
 8011520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011524:	e11e      	b.n	8011764 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801152c:	2b0b      	cmp	r3, #11
 801152e:	d905      	bls.n	801153c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011534:	3301      	adds	r3, #1
 8011536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801153a:	e113      	b.n	8011764 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011542:	2b00      	cmp	r3, #0
 8011544:	d075      	beq.n	8011632 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154a:	2b00      	cmp	r3, #0
 801154c:	d006      	beq.n	801155c <tcp_slowtmr+0xf0>
 801154e:	4b62      	ldr	r3, [pc, #392]	; (80116d8 <tcp_slowtmr+0x26c>)
 8011550:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011554:	4965      	ldr	r1, [pc, #404]	; (80116ec <tcp_slowtmr+0x280>)
 8011556:	4862      	ldr	r0, [pc, #392]	; (80116e0 <tcp_slowtmr+0x274>)
 8011558:	f008 f98e 	bl	8019878 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011560:	2b00      	cmp	r3, #0
 8011562:	d106      	bne.n	8011572 <tcp_slowtmr+0x106>
 8011564:	4b5c      	ldr	r3, [pc, #368]	; (80116d8 <tcp_slowtmr+0x26c>)
 8011566:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801156a:	4961      	ldr	r1, [pc, #388]	; (80116f0 <tcp_slowtmr+0x284>)
 801156c:	485c      	ldr	r0, [pc, #368]	; (80116e0 <tcp_slowtmr+0x274>)
 801156e:	f008 f983 	bl	8019878 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011574:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011578:	2b0b      	cmp	r3, #11
 801157a:	d905      	bls.n	8011588 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801157c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011580:	3301      	adds	r3, #1
 8011582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011586:	e0ed      	b.n	8011764 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801158e:	3b01      	subs	r3, #1
 8011590:	4a58      	ldr	r2, [pc, #352]	; (80116f4 <tcp_slowtmr+0x288>)
 8011592:	5cd3      	ldrb	r3, [r2, r3]
 8011594:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011598:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801159c:	7c7a      	ldrb	r2, [r7, #17]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d907      	bls.n	80115b2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80115a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80115a8:	3301      	adds	r3, #1
 80115aa:	b2da      	uxtb	r2, r3
 80115ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80115b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80115b8:	7c7a      	ldrb	r2, [r7, #17]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	f200 80d2 	bhi.w	8011764 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80115c0:	2301      	movs	r3, #1
 80115c2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80115c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d108      	bne.n	80115e0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80115ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115d0:	f004 fc2a 	bl	8015e28 <tcp_zero_window_probe>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d014      	beq.n	8011604 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80115da:	2300      	movs	r3, #0
 80115dc:	623b      	str	r3, [r7, #32]
 80115de:	e011      	b.n	8011604 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80115e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115e6:	4619      	mov	r1, r3
 80115e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115ea:	f003 faef 	bl	8014bcc <tcp_split_unsent_seg>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d107      	bne.n	8011604 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80115f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115f6:	f003 fd6f 	bl	80150d8 <tcp_output>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d101      	bne.n	8011604 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011600:	2300      	movs	r3, #0
 8011602:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011604:	6a3b      	ldr	r3, [r7, #32]
 8011606:	2b00      	cmp	r3, #0
 8011608:	f000 80ac 	beq.w	8011764 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160e:	2200      	movs	r2, #0
 8011610:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011616:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801161a:	2b06      	cmp	r3, #6
 801161c:	f200 80a2 	bhi.w	8011764 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011626:	3301      	adds	r3, #1
 8011628:	b2da      	uxtb	r2, r3
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011630:	e098      	b.n	8011764 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011634:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011638:	2b00      	cmp	r3, #0
 801163a:	db0f      	blt.n	801165c <tcp_slowtmr+0x1f0>
 801163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011642:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011646:	4293      	cmp	r3, r2
 8011648:	d008      	beq.n	801165c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011650:	b29b      	uxth	r3, r3
 8011652:	3301      	adds	r3, #1
 8011654:	b29b      	uxth	r3, r3
 8011656:	b21a      	sxth	r2, r3
 8011658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011664:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011668:	429a      	cmp	r2, r3
 801166a:	db7b      	blt.n	8011764 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801166c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801166e:	f004 f825 	bl	80156bc <tcp_rexmit_rto_prepare>
 8011672:	4603      	mov	r3, r0
 8011674:	2b00      	cmp	r3, #0
 8011676:	d007      	beq.n	8011688 <tcp_slowtmr+0x21c>
 8011678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801167c:	2b00      	cmp	r3, #0
 801167e:	d171      	bne.n	8011764 <tcp_slowtmr+0x2f8>
 8011680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011684:	2b00      	cmp	r3, #0
 8011686:	d06d      	beq.n	8011764 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	7d1b      	ldrb	r3, [r3, #20]
 801168c:	2b02      	cmp	r3, #2
 801168e:	d03a      	beq.n	8011706 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011696:	2b0c      	cmp	r3, #12
 8011698:	bf28      	it	cs
 801169a:	230c      	movcs	r3, #12
 801169c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80116a4:	10db      	asrs	r3, r3, #3
 80116a6:	b21b      	sxth	r3, r3
 80116a8:	461a      	mov	r2, r3
 80116aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80116b0:	4413      	add	r3, r2
 80116b2:	7efa      	ldrb	r2, [r7, #27]
 80116b4:	4910      	ldr	r1, [pc, #64]	; (80116f8 <tcp_slowtmr+0x28c>)
 80116b6:	5c8a      	ldrb	r2, [r1, r2]
 80116b8:	4093      	lsls	r3, r2
 80116ba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80116c2:	4293      	cmp	r3, r2
 80116c4:	dc1a      	bgt.n	80116fc <tcp_slowtmr+0x290>
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	b21a      	sxth	r2, r3
 80116ca:	e019      	b.n	8011700 <tcp_slowtmr+0x294>
 80116cc:	2000da98 	.word	0x2000da98
 80116d0:	2000daae 	.word	0x2000daae
 80116d4:	2000daa4 	.word	0x2000daa4
 80116d8:	0801b9c0 	.word	0x0801b9c0
 80116dc:	0801bd04 	.word	0x0801bd04
 80116e0:	0801ba04 	.word	0x0801ba04
 80116e4:	0801bd30 	.word	0x0801bd30
 80116e8:	0801bd5c 	.word	0x0801bd5c
 80116ec:	0801bd8c 	.word	0x0801bd8c
 80116f0:	0801bdc0 	.word	0x0801bdc0
 80116f4:	0801da78 	.word	0x0801da78
 80116f8:	0801da68 	.word	0x0801da68
 80116fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011702:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011708:	2200      	movs	r2, #0
 801170a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011714:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011718:	4293      	cmp	r3, r2
 801171a:	bf28      	it	cs
 801171c:	4613      	movcs	r3, r2
 801171e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011720:	8a7b      	ldrh	r3, [r7, #18]
 8011722:	085b      	lsrs	r3, r3, #1
 8011724:	b29a      	uxth	r2, r3
 8011726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011728:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011736:	005b      	lsls	r3, r3, #1
 8011738:	b29b      	uxth	r3, r3
 801173a:	429a      	cmp	r2, r3
 801173c:	d206      	bcs.n	801174c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011742:	005b      	lsls	r3, r3, #1
 8011744:	b29a      	uxth	r2, r3
 8011746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011748:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011752:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011758:	2200      	movs	r2, #0
 801175a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801175e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011760:	f004 f81c 	bl	801579c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011766:	7d1b      	ldrb	r3, [r3, #20]
 8011768:	2b06      	cmp	r3, #6
 801176a:	d111      	bne.n	8011790 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176e:	8b5b      	ldrh	r3, [r3, #26]
 8011770:	f003 0310 	and.w	r3, r3, #16
 8011774:	2b00      	cmp	r3, #0
 8011776:	d00b      	beq.n	8011790 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011778:	4b9d      	ldr	r3, [pc, #628]	; (80119f0 <tcp_slowtmr+0x584>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177e:	6a1b      	ldr	r3, [r3, #32]
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	2b28      	cmp	r3, #40	; 0x28
 8011784:	d904      	bls.n	8011790 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801178a:	3301      	adds	r3, #1
 801178c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011792:	7a5b      	ldrb	r3, [r3, #9]
 8011794:	f003 0308 	and.w	r3, r3, #8
 8011798:	2b00      	cmp	r3, #0
 801179a:	d04c      	beq.n	8011836 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80117a0:	2b04      	cmp	r3, #4
 80117a2:	d003      	beq.n	80117ac <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80117a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80117a8:	2b07      	cmp	r3, #7
 80117aa:	d144      	bne.n	8011836 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117ac:	4b90      	ldr	r3, [pc, #576]	; (80119f0 <tcp_slowtmr+0x584>)
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b2:	6a1b      	ldr	r3, [r3, #32]
 80117b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80117bc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80117c0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80117c4:	498b      	ldr	r1, [pc, #556]	; (80119f4 <tcp_slowtmr+0x588>)
 80117c6:	fba1 1303 	umull	r1, r3, r1, r3
 80117ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d90a      	bls.n	80117e6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80117d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117d4:	3301      	adds	r3, #1
 80117d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80117da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80117de:	3301      	adds	r3, #1
 80117e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80117e4:	e027      	b.n	8011836 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117e6:	4b82      	ldr	r3, [pc, #520]	; (80119f0 <tcp_slowtmr+0x584>)
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80117f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80117f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80117fc:	4618      	mov	r0, r3
 80117fe:	4b7e      	ldr	r3, [pc, #504]	; (80119f8 <tcp_slowtmr+0x58c>)
 8011800:	fb00 f303 	mul.w	r3, r0, r3
 8011804:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011806:	497b      	ldr	r1, [pc, #492]	; (80119f4 <tcp_slowtmr+0x588>)
 8011808:	fba1 1303 	umull	r1, r3, r1, r3
 801180c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801180e:	429a      	cmp	r2, r3
 8011810:	d911      	bls.n	8011836 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011814:	f004 fac8 	bl	8015da8 <tcp_keepalive>
 8011818:	4603      	mov	r3, r0
 801181a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801181e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011822:	2b00      	cmp	r3, #0
 8011824:	d107      	bne.n	8011836 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011828:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801182c:	3301      	adds	r3, #1
 801182e:	b2da      	uxtb	r2, r3
 8011830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011832:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801183a:	2b00      	cmp	r3, #0
 801183c:	d011      	beq.n	8011862 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801183e:	4b6c      	ldr	r3, [pc, #432]	; (80119f0 <tcp_slowtmr+0x584>)
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011844:	6a1b      	ldr	r3, [r3, #32]
 8011846:	1ad2      	subs	r2, r2, r3
 8011848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801184e:	4619      	mov	r1, r3
 8011850:	460b      	mov	r3, r1
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	440b      	add	r3, r1
 8011856:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011858:	429a      	cmp	r2, r3
 801185a:	d302      	bcc.n	8011862 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801185c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801185e:	f000 fddb 	bl	8012418 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011864:	7d1b      	ldrb	r3, [r3, #20]
 8011866:	2b03      	cmp	r3, #3
 8011868:	d10b      	bne.n	8011882 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801186a:	4b61      	ldr	r3, [pc, #388]	; (80119f0 <tcp_slowtmr+0x584>)
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011870:	6a1b      	ldr	r3, [r3, #32]
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	2b28      	cmp	r3, #40	; 0x28
 8011876:	d904      	bls.n	8011882 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801187c:	3301      	adds	r3, #1
 801187e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011884:	7d1b      	ldrb	r3, [r3, #20]
 8011886:	2b09      	cmp	r3, #9
 8011888:	d10b      	bne.n	80118a2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801188a:	4b59      	ldr	r3, [pc, #356]	; (80119f0 <tcp_slowtmr+0x584>)
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011890:	6a1b      	ldr	r3, [r3, #32]
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	2bf0      	cmp	r3, #240	; 0xf0
 8011896:	d904      	bls.n	80118a2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801189c:	3301      	adds	r3, #1
 801189e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80118a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d060      	beq.n	801196c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80118aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80118b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118b4:	f000 fbfc 	bl	80120b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80118b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d010      	beq.n	80118e0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80118be:	4b4f      	ldr	r3, [pc, #316]	; (80119fc <tcp_slowtmr+0x590>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d106      	bne.n	80118d6 <tcp_slowtmr+0x46a>
 80118c8:	4b4d      	ldr	r3, [pc, #308]	; (8011a00 <tcp_slowtmr+0x594>)
 80118ca:	f240 526d 	movw	r2, #1389	; 0x56d
 80118ce:	494d      	ldr	r1, [pc, #308]	; (8011a04 <tcp_slowtmr+0x598>)
 80118d0:	484d      	ldr	r0, [pc, #308]	; (8011a08 <tcp_slowtmr+0x59c>)
 80118d2:	f007 ffd1 	bl	8019878 <iprintf>
        prev->next = pcb->next;
 80118d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d8:	68da      	ldr	r2, [r3, #12]
 80118da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118dc:	60da      	str	r2, [r3, #12]
 80118de:	e00f      	b.n	8011900 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80118e0:	4b46      	ldr	r3, [pc, #280]	; (80119fc <tcp_slowtmr+0x590>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d006      	beq.n	80118f8 <tcp_slowtmr+0x48c>
 80118ea:	4b45      	ldr	r3, [pc, #276]	; (8011a00 <tcp_slowtmr+0x594>)
 80118ec:	f240 5271 	movw	r2, #1393	; 0x571
 80118f0:	4946      	ldr	r1, [pc, #280]	; (8011a0c <tcp_slowtmr+0x5a0>)
 80118f2:	4845      	ldr	r0, [pc, #276]	; (8011a08 <tcp_slowtmr+0x59c>)
 80118f4:	f007 ffc0 	bl	8019878 <iprintf>
        tcp_active_pcbs = pcb->next;
 80118f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	4a3f      	ldr	r2, [pc, #252]	; (80119fc <tcp_slowtmr+0x590>)
 80118fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011904:	2b00      	cmp	r3, #0
 8011906:	d013      	beq.n	8011930 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011910:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011914:	3304      	adds	r3, #4
 8011916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011918:	8ad2      	ldrh	r2, [r2, #22]
 801191a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801191c:	8b09      	ldrh	r1, [r1, #24]
 801191e:	9102      	str	r1, [sp, #8]
 8011920:	9201      	str	r2, [sp, #4]
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	462b      	mov	r3, r5
 8011926:	4622      	mov	r2, r4
 8011928:	4601      	mov	r1, r0
 801192a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801192c:	f004 f988 	bl	8015c40 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011932:	691b      	ldr	r3, [r3, #16]
 8011934:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011938:	7d1b      	ldrb	r3, [r3, #20]
 801193a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011946:	6838      	ldr	r0, [r7, #0]
 8011948:	f7ff f9f2 	bl	8010d30 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801194c:	4b30      	ldr	r3, [pc, #192]	; (8011a10 <tcp_slowtmr+0x5a4>)
 801194e:	2200      	movs	r2, #0
 8011950:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d004      	beq.n	8011962 <tcp_slowtmr+0x4f6>
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f06f 010c 	mvn.w	r1, #12
 801195e:	68b8      	ldr	r0, [r7, #8]
 8011960:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011962:	4b2b      	ldr	r3, [pc, #172]	; (8011a10 <tcp_slowtmr+0x5a4>)
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d037      	beq.n	80119da <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801196a:	e590      	b.n	801148e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011978:	7f1b      	ldrb	r3, [r3, #28]
 801197a:	3301      	adds	r3, #1
 801197c:	b2da      	uxtb	r2, r3
 801197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011980:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011984:	7f1a      	ldrb	r2, [r3, #28]
 8011986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011988:	7f5b      	ldrb	r3, [r3, #29]
 801198a:	429a      	cmp	r2, r3
 801198c:	d325      	bcc.n	80119da <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011990:	2200      	movs	r2, #0
 8011992:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011994:	4b1e      	ldr	r3, [pc, #120]	; (8011a10 <tcp_slowtmr+0x5a4>)
 8011996:	2200      	movs	r2, #0
 8011998:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00b      	beq.n	80119bc <tcp_slowtmr+0x550>
 80119a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119ac:	6912      	ldr	r2, [r2, #16]
 80119ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119b0:	4610      	mov	r0, r2
 80119b2:	4798      	blx	r3
 80119b4:	4603      	mov	r3, r0
 80119b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80119ba:	e002      	b.n	80119c2 <tcp_slowtmr+0x556>
 80119bc:	2300      	movs	r3, #0
 80119be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80119c2:	4b13      	ldr	r3, [pc, #76]	; (8011a10 <tcp_slowtmr+0x5a4>)
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d000      	beq.n	80119cc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80119ca:	e560      	b.n	801148e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80119cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d102      	bne.n	80119da <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80119d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119d6:	f003 fb7f 	bl	80150d8 <tcp_output>
  while (pcb != NULL) {
 80119da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f47f ad5c 	bne.w	801149a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80119e6:	4b0b      	ldr	r3, [pc, #44]	; (8011a14 <tcp_slowtmr+0x5a8>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80119ec:	e067      	b.n	8011abe <tcp_slowtmr+0x652>
 80119ee:	bf00      	nop
 80119f0:	2000da98 	.word	0x2000da98
 80119f4:	10624dd3 	.word	0x10624dd3
 80119f8:	000124f8 	.word	0x000124f8
 80119fc:	2000daa4 	.word	0x2000daa4
 8011a00:	0801b9c0 	.word	0x0801b9c0
 8011a04:	0801bdf8 	.word	0x0801bdf8
 8011a08:	0801ba04 	.word	0x0801ba04
 8011a0c:	0801be24 	.word	0x0801be24
 8011a10:	2000daac 	.word	0x2000daac
 8011a14:	2000daa8 	.word	0x2000daa8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1a:	7d1b      	ldrb	r3, [r3, #20]
 8011a1c:	2b0a      	cmp	r3, #10
 8011a1e:	d006      	beq.n	8011a2e <tcp_slowtmr+0x5c2>
 8011a20:	4b2b      	ldr	r3, [pc, #172]	; (8011ad0 <tcp_slowtmr+0x664>)
 8011a22:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011a26:	492b      	ldr	r1, [pc, #172]	; (8011ad4 <tcp_slowtmr+0x668>)
 8011a28:	482b      	ldr	r0, [pc, #172]	; (8011ad8 <tcp_slowtmr+0x66c>)
 8011a2a:	f007 ff25 	bl	8019878 <iprintf>
    pcb_remove = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011a34:	4b29      	ldr	r3, [pc, #164]	; (8011adc <tcp_slowtmr+0x670>)
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3a:	6a1b      	ldr	r3, [r3, #32]
 8011a3c:	1ad3      	subs	r3, r2, r3
 8011a3e:	2bf0      	cmp	r3, #240	; 0xf0
 8011a40:	d904      	bls.n	8011a4c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a46:	3301      	adds	r3, #1
 8011a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d02f      	beq.n	8011ab4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a56:	f000 fb2b 	bl	80120b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d010      	beq.n	8011a82 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011a60:	4b1f      	ldr	r3, [pc, #124]	; (8011ae0 <tcp_slowtmr+0x674>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d106      	bne.n	8011a78 <tcp_slowtmr+0x60c>
 8011a6a:	4b19      	ldr	r3, [pc, #100]	; (8011ad0 <tcp_slowtmr+0x664>)
 8011a6c:	f240 52af 	movw	r2, #1455	; 0x5af
 8011a70:	491c      	ldr	r1, [pc, #112]	; (8011ae4 <tcp_slowtmr+0x678>)
 8011a72:	4819      	ldr	r0, [pc, #100]	; (8011ad8 <tcp_slowtmr+0x66c>)
 8011a74:	f007 ff00 	bl	8019878 <iprintf>
        prev->next = pcb->next;
 8011a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7a:	68da      	ldr	r2, [r3, #12]
 8011a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7e:	60da      	str	r2, [r3, #12]
 8011a80:	e00f      	b.n	8011aa2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011a82:	4b17      	ldr	r3, [pc, #92]	; (8011ae0 <tcp_slowtmr+0x674>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d006      	beq.n	8011a9a <tcp_slowtmr+0x62e>
 8011a8c:	4b10      	ldr	r3, [pc, #64]	; (8011ad0 <tcp_slowtmr+0x664>)
 8011a8e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011a92:	4915      	ldr	r1, [pc, #84]	; (8011ae8 <tcp_slowtmr+0x67c>)
 8011a94:	4810      	ldr	r0, [pc, #64]	; (8011ad8 <tcp_slowtmr+0x66c>)
 8011a96:	f007 feef 	bl	8019878 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	4a10      	ldr	r2, [pc, #64]	; (8011ae0 <tcp_slowtmr+0x674>)
 8011aa0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011aac:	69f8      	ldr	r0, [r7, #28]
 8011aae:	f7ff f93f 	bl	8010d30 <tcp_free>
 8011ab2:	e004      	b.n	8011abe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d1a9      	bne.n	8011a18 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011ac4:	bf00      	nop
 8011ac6:	bf00      	nop
 8011ac8:	3730      	adds	r7, #48	; 0x30
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bdb0      	pop	{r4, r5, r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	0801b9c0 	.word	0x0801b9c0
 8011ad4:	0801be50 	.word	0x0801be50
 8011ad8:	0801ba04 	.word	0x0801ba04
 8011adc:	2000da98 	.word	0x2000da98
 8011ae0:	2000daa8 	.word	0x2000daa8
 8011ae4:	0801be80 	.word	0x0801be80
 8011ae8:	0801bea8 	.word	0x0801bea8

08011aec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011af2:	4b2d      	ldr	r3, [pc, #180]	; (8011ba8 <tcp_fasttmr+0xbc>)
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	3301      	adds	r3, #1
 8011af8:	b2da      	uxtb	r2, r3
 8011afa:	4b2b      	ldr	r3, [pc, #172]	; (8011ba8 <tcp_fasttmr+0xbc>)
 8011afc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011afe:	4b2b      	ldr	r3, [pc, #172]	; (8011bac <tcp_fasttmr+0xc0>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011b04:	e048      	b.n	8011b98 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	7f9a      	ldrb	r2, [r3, #30]
 8011b0a:	4b27      	ldr	r3, [pc, #156]	; (8011ba8 <tcp_fasttmr+0xbc>)
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d03f      	beq.n	8011b92 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011b12:	4b25      	ldr	r3, [pc, #148]	; (8011ba8 <tcp_fasttmr+0xbc>)
 8011b14:	781a      	ldrb	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	8b5b      	ldrh	r3, [r3, #26]
 8011b1e:	f003 0301 	and.w	r3, r3, #1
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d010      	beq.n	8011b48 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8b5b      	ldrh	r3, [r3, #26]
 8011b2a:	f043 0302 	orr.w	r3, r3, #2
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f003 facf 	bl	80150d8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	8b5b      	ldrh	r3, [r3, #26]
 8011b3e:	f023 0303 	bic.w	r3, r3, #3
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	8b5b      	ldrh	r3, [r3, #26]
 8011b4c:	f003 0308 	and.w	r3, r3, #8
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d009      	beq.n	8011b68 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	8b5b      	ldrh	r3, [r3, #26]
 8011b58:	f023 0308 	bic.w	r3, r3, #8
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f7ff fa78 	bl	8011058 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	68db      	ldr	r3, [r3, #12]
 8011b6c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d00a      	beq.n	8011b8c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011b76:	4b0e      	ldr	r3, [pc, #56]	; (8011bb0 <tcp_fasttmr+0xc4>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f000 f819 	bl	8011bb4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011b82:	4b0b      	ldr	r3, [pc, #44]	; (8011bb0 <tcp_fasttmr+0xc4>)
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d000      	beq.n	8011b8c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011b8a:	e7b8      	b.n	8011afe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	607b      	str	r3, [r7, #4]
 8011b90:	e002      	b.n	8011b98 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1b3      	bne.n	8011b06 <tcp_fasttmr+0x1a>
    }
  }
}
 8011b9e:	bf00      	nop
 8011ba0:	bf00      	nop
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	2000daae 	.word	0x2000daae
 8011bac:	2000daa4 	.word	0x2000daa4
 8011bb0:	2000daac 	.word	0x2000daac

08011bb4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011bb4:	b590      	push	{r4, r7, lr}
 8011bb6:	b085      	sub	sp, #20
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d109      	bne.n	8011bd6 <tcp_process_refused_data+0x22>
 8011bc2:	4b37      	ldr	r3, [pc, #220]	; (8011ca0 <tcp_process_refused_data+0xec>)
 8011bc4:	f240 6209 	movw	r2, #1545	; 0x609
 8011bc8:	4936      	ldr	r1, [pc, #216]	; (8011ca4 <tcp_process_refused_data+0xf0>)
 8011bca:	4837      	ldr	r0, [pc, #220]	; (8011ca8 <tcp_process_refused_data+0xf4>)
 8011bcc:	f007 fe54 	bl	8019878 <iprintf>
 8011bd0:	f06f 030f 	mvn.w	r3, #15
 8011bd4:	e060      	b.n	8011c98 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011bda:	7b5b      	ldrb	r3, [r3, #13]
 8011bdc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011be2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00b      	beq.n	8011c0c <tcp_process_refused_data+0x58>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6918      	ldr	r0, [r3, #16]
 8011bfe:	2300      	movs	r3, #0
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	6879      	ldr	r1, [r7, #4]
 8011c04:	47a0      	blx	r4
 8011c06:	4603      	mov	r3, r0
 8011c08:	73fb      	strb	r3, [r7, #15]
 8011c0a:	e007      	b.n	8011c1c <tcp_process_refused_data+0x68>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	68ba      	ldr	r2, [r7, #8]
 8011c10:	6879      	ldr	r1, [r7, #4]
 8011c12:	2000      	movs	r0, #0
 8011c14:	f000 f8a4 	bl	8011d60 <tcp_recv_null>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d12a      	bne.n	8011c7a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011c24:	7bbb      	ldrb	r3, [r7, #14]
 8011c26:	f003 0320 	and.w	r3, r3, #32
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d033      	beq.n	8011c96 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011c36:	d005      	beq.n	8011c44 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	b29a      	uxth	r2, r3
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d00b      	beq.n	8011c66 <tcp_process_refused_data+0xb2>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6918      	ldr	r0, [r3, #16]
 8011c58:	2300      	movs	r3, #0
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	6879      	ldr	r1, [r7, #4]
 8011c5e:	47a0      	blx	r4
 8011c60:	4603      	mov	r3, r0
 8011c62:	73fb      	strb	r3, [r7, #15]
 8011c64:	e001      	b.n	8011c6a <tcp_process_refused_data+0xb6>
 8011c66:	2300      	movs	r3, #0
 8011c68:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c6e:	f113 0f0d 	cmn.w	r3, #13
 8011c72:	d110      	bne.n	8011c96 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011c74:	f06f 030c 	mvn.w	r3, #12
 8011c78:	e00e      	b.n	8011c98 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c7e:	f113 0f0d 	cmn.w	r3, #13
 8011c82:	d102      	bne.n	8011c8a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011c84:	f06f 030c 	mvn.w	r3, #12
 8011c88:	e006      	b.n	8011c98 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	68ba      	ldr	r2, [r7, #8]
 8011c8e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011c90:	f06f 0304 	mvn.w	r3, #4
 8011c94:	e000      	b.n	8011c98 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011c96:	2300      	movs	r3, #0
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3714      	adds	r7, #20
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd90      	pop	{r4, r7, pc}
 8011ca0:	0801b9c0 	.word	0x0801b9c0
 8011ca4:	0801bed0 	.word	0x0801bed0
 8011ca8:	0801ba04 	.word	0x0801ba04

08011cac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011cb4:	e007      	b.n	8011cc6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 f80a 	bl	8011cd6 <tcp_seg_free>
    seg = next;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d1f4      	bne.n	8011cb6 <tcp_segs_free+0xa>
  }
}
 8011ccc:	bf00      	nop
 8011cce:	bf00      	nop
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}

08011cd6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011cd6:	b580      	push	{r7, lr}
 8011cd8:	b082      	sub	sp, #8
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d00c      	beq.n	8011cfe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d004      	beq.n	8011cf6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7fe fccf 	bl	8010694 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011cf6:	6879      	ldr	r1, [r7, #4]
 8011cf8:	2003      	movs	r0, #3
 8011cfa:	f7fd fe27 	bl	800f94c <memp_free>
  }
}
 8011cfe:	bf00      	nop
 8011d00:	3708      	adds	r7, #8
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
	...

08011d08 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d106      	bne.n	8011d24 <tcp_seg_copy+0x1c>
 8011d16:	4b0f      	ldr	r3, [pc, #60]	; (8011d54 <tcp_seg_copy+0x4c>)
 8011d18:	f240 6282 	movw	r2, #1666	; 0x682
 8011d1c:	490e      	ldr	r1, [pc, #56]	; (8011d58 <tcp_seg_copy+0x50>)
 8011d1e:	480f      	ldr	r0, [pc, #60]	; (8011d5c <tcp_seg_copy+0x54>)
 8011d20:	f007 fdaa 	bl	8019878 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011d24:	2003      	movs	r0, #3
 8011d26:	f7fd fd9b 	bl	800f860 <memp_malloc>
 8011d2a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d101      	bne.n	8011d36 <tcp_seg_copy+0x2e>
    return NULL;
 8011d32:	2300      	movs	r3, #0
 8011d34:	e00a      	b.n	8011d4c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011d36:	2210      	movs	r2, #16
 8011d38:	6879      	ldr	r1, [r7, #4]
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f007 fcd7 	bl	80196ee <memcpy>
  pbuf_ref(cseg->p);
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7fe fd4b 	bl	80107e0 <pbuf_ref>
  return cseg;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3710      	adds	r7, #16
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	0801b9c0 	.word	0x0801b9c0
 8011d58:	0801bf14 	.word	0x0801bf14
 8011d5c:	0801ba04 	.word	0x0801ba04

08011d60 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
 8011d6c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d109      	bne.n	8011d88 <tcp_recv_null+0x28>
 8011d74:	4b12      	ldr	r3, [pc, #72]	; (8011dc0 <tcp_recv_null+0x60>)
 8011d76:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011d7a:	4912      	ldr	r1, [pc, #72]	; (8011dc4 <tcp_recv_null+0x64>)
 8011d7c:	4812      	ldr	r0, [pc, #72]	; (8011dc8 <tcp_recv_null+0x68>)
 8011d7e:	f007 fd7b 	bl	8019878 <iprintf>
 8011d82:	f06f 030f 	mvn.w	r3, #15
 8011d86:	e016      	b.n	8011db6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d009      	beq.n	8011da2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	891b      	ldrh	r3, [r3, #8]
 8011d92:	4619      	mov	r1, r3
 8011d94:	68b8      	ldr	r0, [r7, #8]
 8011d96:	f7ff fb19 	bl	80113cc <tcp_recved>
    pbuf_free(p);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7fe fc7a 	bl	8010694 <pbuf_free>
 8011da0:	e008      	b.n	8011db4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d104      	bne.n	8011db4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011daa:	68b8      	ldr	r0, [r7, #8]
 8011dac:	f7ff f9be 	bl	801112c <tcp_close>
 8011db0:	4603      	mov	r3, r0
 8011db2:	e000      	b.n	8011db6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	0801b9c0 	.word	0x0801b9c0
 8011dc4:	0801bf30 	.word	0x0801bf30
 8011dc8:	0801ba04 	.word	0x0801ba04

08011dcc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b086      	sub	sp, #24
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	db01      	blt.n	8011de2 <tcp_kill_prio+0x16>
 8011dde:	79fb      	ldrb	r3, [r7, #7]
 8011de0:	e000      	b.n	8011de4 <tcp_kill_prio+0x18>
 8011de2:	237f      	movs	r3, #127	; 0x7f
 8011de4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011de6:	7afb      	ldrb	r3, [r7, #11]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d034      	beq.n	8011e56 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011dec:	7afb      	ldrb	r3, [r7, #11]
 8011dee:	3b01      	subs	r3, #1
 8011df0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011df6:	2300      	movs	r3, #0
 8011df8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dfa:	4b19      	ldr	r3, [pc, #100]	; (8011e60 <tcp_kill_prio+0x94>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	617b      	str	r3, [r7, #20]
 8011e00:	e01f      	b.n	8011e42 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	7d5b      	ldrb	r3, [r3, #21]
 8011e06:	7afa      	ldrb	r2, [r7, #11]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d80c      	bhi.n	8011e26 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011e10:	7afa      	ldrb	r2, [r7, #11]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d112      	bne.n	8011e3c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011e16:	4b13      	ldr	r3, [pc, #76]	; (8011e64 <tcp_kill_prio+0x98>)
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	6a1b      	ldr	r3, [r3, #32]
 8011e1e:	1ad3      	subs	r3, r2, r3
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d80a      	bhi.n	8011e3c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011e26:	4b0f      	ldr	r3, [pc, #60]	; (8011e64 <tcp_kill_prio+0x98>)
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	6a1b      	ldr	r3, [r3, #32]
 8011e2e:	1ad3      	subs	r3, r2, r3
 8011e30:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	7d5b      	ldrb	r3, [r3, #21]
 8011e3a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	617b      	str	r3, [r7, #20]
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1dc      	bne.n	8011e02 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d004      	beq.n	8011e58 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011e4e:	6938      	ldr	r0, [r7, #16]
 8011e50:	f7ff fa56 	bl	8011300 <tcp_abort>
 8011e54:	e000      	b.n	8011e58 <tcp_kill_prio+0x8c>
    return;
 8011e56:	bf00      	nop
  }
}
 8011e58:	3718      	adds	r7, #24
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	2000daa4 	.word	0x2000daa4
 8011e64:	2000da98 	.word	0x2000da98

08011e68 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b086      	sub	sp, #24
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	4603      	mov	r3, r0
 8011e70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011e72:	79fb      	ldrb	r3, [r7, #7]
 8011e74:	2b08      	cmp	r3, #8
 8011e76:	d009      	beq.n	8011e8c <tcp_kill_state+0x24>
 8011e78:	79fb      	ldrb	r3, [r7, #7]
 8011e7a:	2b09      	cmp	r3, #9
 8011e7c:	d006      	beq.n	8011e8c <tcp_kill_state+0x24>
 8011e7e:	4b1a      	ldr	r3, [pc, #104]	; (8011ee8 <tcp_kill_state+0x80>)
 8011e80:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011e84:	4919      	ldr	r1, [pc, #100]	; (8011eec <tcp_kill_state+0x84>)
 8011e86:	481a      	ldr	r0, [pc, #104]	; (8011ef0 <tcp_kill_state+0x88>)
 8011e88:	f007 fcf6 	bl	8019878 <iprintf>

  inactivity = 0;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011e90:	2300      	movs	r3, #0
 8011e92:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e94:	4b17      	ldr	r3, [pc, #92]	; (8011ef4 <tcp_kill_state+0x8c>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	617b      	str	r3, [r7, #20]
 8011e9a:	e017      	b.n	8011ecc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	7d1b      	ldrb	r3, [r3, #20]
 8011ea0:	79fa      	ldrb	r2, [r7, #7]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d10f      	bne.n	8011ec6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011ea6:	4b14      	ldr	r3, [pc, #80]	; (8011ef8 <tcp_kill_state+0x90>)
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	6a1b      	ldr	r3, [r3, #32]
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d807      	bhi.n	8011ec6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011eb6:	4b10      	ldr	r3, [pc, #64]	; (8011ef8 <tcp_kill_state+0x90>)
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	6a1b      	ldr	r3, [r3, #32]
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	68db      	ldr	r3, [r3, #12]
 8011eca:	617b      	str	r3, [r7, #20]
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1e4      	bne.n	8011e9c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d003      	beq.n	8011ee0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011ed8:	2100      	movs	r1, #0
 8011eda:	6938      	ldr	r0, [r7, #16]
 8011edc:	f7ff f952 	bl	8011184 <tcp_abandon>
  }
}
 8011ee0:	bf00      	nop
 8011ee2:	3718      	adds	r7, #24
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	0801b9c0 	.word	0x0801b9c0
 8011eec:	0801bf4c 	.word	0x0801bf4c
 8011ef0:	0801ba04 	.word	0x0801ba04
 8011ef4:	2000daa4 	.word	0x2000daa4
 8011ef8:	2000da98 	.word	0x2000da98

08011efc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011f02:	2300      	movs	r3, #0
 8011f04:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011f06:	2300      	movs	r3, #0
 8011f08:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f0a:	4b12      	ldr	r3, [pc, #72]	; (8011f54 <tcp_kill_timewait+0x58>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	60fb      	str	r3, [r7, #12]
 8011f10:	e012      	b.n	8011f38 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011f12:	4b11      	ldr	r3, [pc, #68]	; (8011f58 <tcp_kill_timewait+0x5c>)
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	6a1b      	ldr	r3, [r3, #32]
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	687a      	ldr	r2, [r7, #4]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d807      	bhi.n	8011f32 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011f22:	4b0d      	ldr	r3, [pc, #52]	; (8011f58 <tcp_kill_timewait+0x5c>)
 8011f24:	681a      	ldr	r2, [r3, #0]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	6a1b      	ldr	r3, [r3, #32]
 8011f2a:	1ad3      	subs	r3, r2, r3
 8011f2c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	60fb      	str	r3, [r7, #12]
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e9      	bne.n	8011f12 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011f44:	68b8      	ldr	r0, [r7, #8]
 8011f46:	f7ff f9db 	bl	8011300 <tcp_abort>
  }
}
 8011f4a:	bf00      	nop
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	2000daa8 	.word	0x2000daa8
 8011f58:	2000da98 	.word	0x2000da98

08011f5c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011f62:	4b10      	ldr	r3, [pc, #64]	; (8011fa4 <tcp_handle_closepend+0x48>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f68:	e014      	b.n	8011f94 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	8b5b      	ldrh	r3, [r3, #26]
 8011f74:	f003 0308 	and.w	r3, r3, #8
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d009      	beq.n	8011f90 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	8b5b      	ldrh	r3, [r3, #26]
 8011f80:	f023 0308 	bic.w	r3, r3, #8
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7ff f864 	bl	8011058 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d1e7      	bne.n	8011f6a <tcp_handle_closepend+0xe>
  }
}
 8011f9a:	bf00      	nop
 8011f9c:	bf00      	nop
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	2000daa4 	.word	0x2000daa4

08011fa8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	4603      	mov	r3, r0
 8011fb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	f7fd fc54 	bl	800f860 <memp_malloc>
 8011fb8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d126      	bne.n	801200e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011fc0:	f7ff ffcc 	bl	8011f5c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011fc4:	f7ff ff9a 	bl	8011efc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fc8:	2001      	movs	r0, #1
 8011fca:	f7fd fc49 	bl	800f860 <memp_malloc>
 8011fce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d11b      	bne.n	801200e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011fd6:	2009      	movs	r0, #9
 8011fd8:	f7ff ff46 	bl	8011e68 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fdc:	2001      	movs	r0, #1
 8011fde:	f7fd fc3f 	bl	800f860 <memp_malloc>
 8011fe2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d111      	bne.n	801200e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011fea:	2008      	movs	r0, #8
 8011fec:	f7ff ff3c 	bl	8011e68 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ff0:	2001      	movs	r0, #1
 8011ff2:	f7fd fc35 	bl	800f860 <memp_malloc>
 8011ff6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d107      	bne.n	801200e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011ffe:	79fb      	ldrb	r3, [r7, #7]
 8012000:	4618      	mov	r0, r3
 8012002:	f7ff fee3 	bl	8011dcc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012006:	2001      	movs	r0, #1
 8012008:	f7fd fc2a 	bl	800f860 <memp_malloc>
 801200c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d03f      	beq.n	8012094 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012014:	229c      	movs	r2, #156	; 0x9c
 8012016:	2100      	movs	r1, #0
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f007 fb90 	bl	801973e <memset>
    pcb->prio = prio;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	79fa      	ldrb	r2, [r7, #7]
 8012022:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801202a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012034:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	22ff      	movs	r2, #255	; 0xff
 8012042:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f44f 7206 	mov.w	r2, #536	; 0x218
 801204a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2206      	movs	r2, #6
 8012050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2206      	movs	r2, #6
 8012058:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012060:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2201      	movs	r2, #1
 8012066:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801206a:	4b0d      	ldr	r3, [pc, #52]	; (80120a0 <tcp_alloc+0xf8>)
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012072:	4b0c      	ldr	r3, [pc, #48]	; (80120a4 <tcp_alloc+0xfc>)
 8012074:	781a      	ldrb	r2, [r3, #0]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012080:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	4a08      	ldr	r2, [pc, #32]	; (80120a8 <tcp_alloc+0x100>)
 8012088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4a07      	ldr	r2, [pc, #28]	; (80120ac <tcp_alloc+0x104>)
 8012090:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012094:	68fb      	ldr	r3, [r7, #12]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3710      	adds	r7, #16
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	2000da98 	.word	0x2000da98
 80120a4:	2000daae 	.word	0x2000daae
 80120a8:	08011d61 	.word	0x08011d61
 80120ac:	006ddd00 	.word	0x006ddd00

080120b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d107      	bne.n	80120ce <tcp_pcb_purge+0x1e>
 80120be:	4b21      	ldr	r3, [pc, #132]	; (8012144 <tcp_pcb_purge+0x94>)
 80120c0:	f640 0251 	movw	r2, #2129	; 0x851
 80120c4:	4920      	ldr	r1, [pc, #128]	; (8012148 <tcp_pcb_purge+0x98>)
 80120c6:	4821      	ldr	r0, [pc, #132]	; (801214c <tcp_pcb_purge+0x9c>)
 80120c8:	f007 fbd6 	bl	8019878 <iprintf>
 80120cc:	e037      	b.n	801213e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	7d1b      	ldrb	r3, [r3, #20]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d033      	beq.n	801213e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80120da:	2b0a      	cmp	r3, #10
 80120dc:	d02f      	beq.n	801213e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d02b      	beq.n	801213e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d007      	beq.n	80120fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fe face 	bl	8010694 <pbuf_free>
      pcb->refused_data = NULL;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2200      	movs	r2, #0
 80120fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012102:	2b00      	cmp	r3, #0
 8012104:	d002      	beq.n	801210c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f000 f986 	bl	8012418 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012112:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012118:	4618      	mov	r0, r3
 801211a:	f7ff fdc7 	bl	8011cac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012122:	4618      	mov	r0, r3
 8012124:	f7ff fdc2 	bl	8011cac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2200      	movs	r2, #0
 801212c:	66da      	str	r2, [r3, #108]	; 0x6c
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	0801b9c0 	.word	0x0801b9c0
 8012148:	0801c00c 	.word	0x0801c00c
 801214c:	0801ba04 	.word	0x0801ba04

08012150 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d106      	bne.n	801216e <tcp_pcb_remove+0x1e>
 8012160:	4b3e      	ldr	r3, [pc, #248]	; (801225c <tcp_pcb_remove+0x10c>)
 8012162:	f640 0283 	movw	r2, #2179	; 0x883
 8012166:	493e      	ldr	r1, [pc, #248]	; (8012260 <tcp_pcb_remove+0x110>)
 8012168:	483e      	ldr	r0, [pc, #248]	; (8012264 <tcp_pcb_remove+0x114>)
 801216a:	f007 fb85 	bl	8019878 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d106      	bne.n	8012182 <tcp_pcb_remove+0x32>
 8012174:	4b39      	ldr	r3, [pc, #228]	; (801225c <tcp_pcb_remove+0x10c>)
 8012176:	f640 0284 	movw	r2, #2180	; 0x884
 801217a:	493b      	ldr	r1, [pc, #236]	; (8012268 <tcp_pcb_remove+0x118>)
 801217c:	4839      	ldr	r0, [pc, #228]	; (8012264 <tcp_pcb_remove+0x114>)
 801217e:	f007 fb7b 	bl	8019878 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	683a      	ldr	r2, [r7, #0]
 8012188:	429a      	cmp	r2, r3
 801218a:	d105      	bne.n	8012198 <tcp_pcb_remove+0x48>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	68da      	ldr	r2, [r3, #12]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	601a      	str	r2, [r3, #0]
 8012196:	e013      	b.n	80121c0 <tcp_pcb_remove+0x70>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	60fb      	str	r3, [r7, #12]
 801219e:	e00c      	b.n	80121ba <tcp_pcb_remove+0x6a>
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	68db      	ldr	r3, [r3, #12]
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d104      	bne.n	80121b4 <tcp_pcb_remove+0x64>
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	68da      	ldr	r2, [r3, #12]
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	60da      	str	r2, [r3, #12]
 80121b2:	e005      	b.n	80121c0 <tcp_pcb_remove+0x70>
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	60fb      	str	r3, [r7, #12]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1ef      	bne.n	80121a0 <tcp_pcb_remove+0x50>
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	2200      	movs	r2, #0
 80121c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80121c6:	6838      	ldr	r0, [r7, #0]
 80121c8:	f7ff ff72 	bl	80120b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	7d1b      	ldrb	r3, [r3, #20]
 80121d0:	2b0a      	cmp	r3, #10
 80121d2:	d013      	beq.n	80121fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d00f      	beq.n	80121fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	8b5b      	ldrh	r3, [r3, #26]
 80121e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d009      	beq.n	80121fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	8b5b      	ldrh	r3, [r3, #26]
 80121ec:	f043 0302 	orr.w	r3, r3, #2
 80121f0:	b29a      	uxth	r2, r3
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80121f6:	6838      	ldr	r0, [r7, #0]
 80121f8:	f002 ff6e 	bl	80150d8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	7d1b      	ldrb	r3, [r3, #20]
 8012200:	2b01      	cmp	r3, #1
 8012202:	d020      	beq.n	8012246 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012208:	2b00      	cmp	r3, #0
 801220a:	d006      	beq.n	801221a <tcp_pcb_remove+0xca>
 801220c:	4b13      	ldr	r3, [pc, #76]	; (801225c <tcp_pcb_remove+0x10c>)
 801220e:	f640 0293 	movw	r2, #2195	; 0x893
 8012212:	4916      	ldr	r1, [pc, #88]	; (801226c <tcp_pcb_remove+0x11c>)
 8012214:	4813      	ldr	r0, [pc, #76]	; (8012264 <tcp_pcb_remove+0x114>)
 8012216:	f007 fb2f 	bl	8019878 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801221e:	2b00      	cmp	r3, #0
 8012220:	d006      	beq.n	8012230 <tcp_pcb_remove+0xe0>
 8012222:	4b0e      	ldr	r3, [pc, #56]	; (801225c <tcp_pcb_remove+0x10c>)
 8012224:	f640 0294 	movw	r2, #2196	; 0x894
 8012228:	4911      	ldr	r1, [pc, #68]	; (8012270 <tcp_pcb_remove+0x120>)
 801222a:	480e      	ldr	r0, [pc, #56]	; (8012264 <tcp_pcb_remove+0x114>)
 801222c:	f007 fb24 	bl	8019878 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012234:	2b00      	cmp	r3, #0
 8012236:	d006      	beq.n	8012246 <tcp_pcb_remove+0xf6>
 8012238:	4b08      	ldr	r3, [pc, #32]	; (801225c <tcp_pcb_remove+0x10c>)
 801223a:	f640 0296 	movw	r2, #2198	; 0x896
 801223e:	490d      	ldr	r1, [pc, #52]	; (8012274 <tcp_pcb_remove+0x124>)
 8012240:	4808      	ldr	r0, [pc, #32]	; (8012264 <tcp_pcb_remove+0x114>)
 8012242:	f007 fb19 	bl	8019878 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	2200      	movs	r2, #0
 801224a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	2200      	movs	r2, #0
 8012250:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012252:	bf00      	nop
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	0801b9c0 	.word	0x0801b9c0
 8012260:	0801c028 	.word	0x0801c028
 8012264:	0801ba04 	.word	0x0801ba04
 8012268:	0801c044 	.word	0x0801c044
 801226c:	0801c064 	.word	0x0801c064
 8012270:	0801c07c 	.word	0x0801c07c
 8012274:	0801c098 	.word	0x0801c098

08012278 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d106      	bne.n	8012294 <tcp_next_iss+0x1c>
 8012286:	4b0a      	ldr	r3, [pc, #40]	; (80122b0 <tcp_next_iss+0x38>)
 8012288:	f640 02af 	movw	r2, #2223	; 0x8af
 801228c:	4909      	ldr	r1, [pc, #36]	; (80122b4 <tcp_next_iss+0x3c>)
 801228e:	480a      	ldr	r0, [pc, #40]	; (80122b8 <tcp_next_iss+0x40>)
 8012290:	f007 faf2 	bl	8019878 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012294:	4b09      	ldr	r3, [pc, #36]	; (80122bc <tcp_next_iss+0x44>)
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	4b09      	ldr	r3, [pc, #36]	; (80122c0 <tcp_next_iss+0x48>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4413      	add	r3, r2
 801229e:	4a07      	ldr	r2, [pc, #28]	; (80122bc <tcp_next_iss+0x44>)
 80122a0:	6013      	str	r3, [r2, #0]
  return iss;
 80122a2:	4b06      	ldr	r3, [pc, #24]	; (80122bc <tcp_next_iss+0x44>)
 80122a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	0801b9c0 	.word	0x0801b9c0
 80122b4:	0801c0b0 	.word	0x0801c0b0
 80122b8:	0801ba04 	.word	0x0801ba04
 80122bc:	20000164 	.word	0x20000164
 80122c0:	2000da98 	.word	0x2000da98

080122c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b086      	sub	sp, #24
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	4603      	mov	r3, r0
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	607a      	str	r2, [r7, #4]
 80122d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d106      	bne.n	80122e6 <tcp_eff_send_mss_netif+0x22>
 80122d8:	4b14      	ldr	r3, [pc, #80]	; (801232c <tcp_eff_send_mss_netif+0x68>)
 80122da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80122de:	4914      	ldr	r1, [pc, #80]	; (8012330 <tcp_eff_send_mss_netif+0x6c>)
 80122e0:	4814      	ldr	r0, [pc, #80]	; (8012334 <tcp_eff_send_mss_netif+0x70>)
 80122e2:	f007 fac9 	bl	8019878 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d101      	bne.n	80122f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80122ec:	89fb      	ldrh	r3, [r7, #14]
 80122ee:	e019      	b.n	8012324 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80122f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80122f6:	8afb      	ldrh	r3, [r7, #22]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d012      	beq.n	8012322 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80122fc:	2328      	movs	r3, #40	; 0x28
 80122fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012300:	8afa      	ldrh	r2, [r7, #22]
 8012302:	8abb      	ldrh	r3, [r7, #20]
 8012304:	429a      	cmp	r2, r3
 8012306:	d904      	bls.n	8012312 <tcp_eff_send_mss_netif+0x4e>
 8012308:	8afa      	ldrh	r2, [r7, #22]
 801230a:	8abb      	ldrh	r3, [r7, #20]
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	b29b      	uxth	r3, r3
 8012310:	e000      	b.n	8012314 <tcp_eff_send_mss_netif+0x50>
 8012312:	2300      	movs	r3, #0
 8012314:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012316:	8a7a      	ldrh	r2, [r7, #18]
 8012318:	89fb      	ldrh	r3, [r7, #14]
 801231a:	4293      	cmp	r3, r2
 801231c:	bf28      	it	cs
 801231e:	4613      	movcs	r3, r2
 8012320:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012322:	89fb      	ldrh	r3, [r7, #14]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3718      	adds	r7, #24
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	0801b9c0 	.word	0x0801b9c0
 8012330:	0801c0cc 	.word	0x0801c0cc
 8012334:	0801ba04 	.word	0x0801ba04

08012338 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d119      	bne.n	8012380 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801234c:	4b10      	ldr	r3, [pc, #64]	; (8012390 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801234e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012352:	4910      	ldr	r1, [pc, #64]	; (8012394 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012354:	4810      	ldr	r0, [pc, #64]	; (8012398 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012356:	f007 fa8f 	bl	8019878 <iprintf>

  while (pcb != NULL) {
 801235a:	e011      	b.n	8012380 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	429a      	cmp	r2, r3
 8012366:	d108      	bne.n	801237a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f7fe ffc6 	bl	8011300 <tcp_abort>
      pcb = next;
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	60fb      	str	r3, [r7, #12]
 8012378:	e002      	b.n	8012380 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1ea      	bne.n	801235c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012386:	bf00      	nop
 8012388:	bf00      	nop
 801238a:	3710      	adds	r7, #16
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}
 8012390:	0801b9c0 	.word	0x0801b9c0
 8012394:	0801c0f4 	.word	0x0801c0f4
 8012398:	0801ba04 	.word	0x0801ba04

0801239c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d02a      	beq.n	8012402 <tcp_netif_ip_addr_changed+0x66>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d026      	beq.n	8012402 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80123b4:	4b15      	ldr	r3, [pc, #84]	; (801240c <tcp_netif_ip_addr_changed+0x70>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4619      	mov	r1, r3
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f7ff ffbc 	bl	8012338 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80123c0:	4b13      	ldr	r3, [pc, #76]	; (8012410 <tcp_netif_ip_addr_changed+0x74>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	4619      	mov	r1, r3
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7ff ffb6 	bl	8012338 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d017      	beq.n	8012402 <tcp_netif_ip_addr_changed+0x66>
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d013      	beq.n	8012402 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80123da:	4b0e      	ldr	r3, [pc, #56]	; (8012414 <tcp_netif_ip_addr_changed+0x78>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	60fb      	str	r3, [r7, #12]
 80123e0:	e00c      	b.n	80123fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d103      	bne.n	80123f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	60fb      	str	r3, [r7, #12]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1ef      	bne.n	80123e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012402:	bf00      	nop
 8012404:	3710      	adds	r7, #16
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	2000daa4 	.word	0x2000daa4
 8012410:	2000da9c 	.word	0x2000da9c
 8012414:	2000daa0 	.word	0x2000daa0

08012418 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012424:	2b00      	cmp	r3, #0
 8012426:	d007      	beq.n	8012438 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801242c:	4618      	mov	r0, r3
 801242e:	f7ff fc3d 	bl	8011cac <tcp_segs_free>
    pcb->ooseq = NULL;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012438:	bf00      	nop
 801243a:	3708      	adds	r7, #8
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012440:	b590      	push	{r4, r7, lr}
 8012442:	b08d      	sub	sp, #52	; 0x34
 8012444:	af04      	add	r7, sp, #16
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d105      	bne.n	801245c <tcp_input+0x1c>
 8012450:	4b9b      	ldr	r3, [pc, #620]	; (80126c0 <tcp_input+0x280>)
 8012452:	2283      	movs	r2, #131	; 0x83
 8012454:	499b      	ldr	r1, [pc, #620]	; (80126c4 <tcp_input+0x284>)
 8012456:	489c      	ldr	r0, [pc, #624]	; (80126c8 <tcp_input+0x288>)
 8012458:	f007 fa0e 	bl	8019878 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	4a9a      	ldr	r2, [pc, #616]	; (80126cc <tcp_input+0x28c>)
 8012462:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	895b      	ldrh	r3, [r3, #10]
 8012468:	2b13      	cmp	r3, #19
 801246a:	f240 83d1 	bls.w	8012c10 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801246e:	4b98      	ldr	r3, [pc, #608]	; (80126d0 <tcp_input+0x290>)
 8012470:	695b      	ldr	r3, [r3, #20]
 8012472:	4a97      	ldr	r2, [pc, #604]	; (80126d0 <tcp_input+0x290>)
 8012474:	6812      	ldr	r2, [r2, #0]
 8012476:	4611      	mov	r1, r2
 8012478:	4618      	mov	r0, r3
 801247a:	f005 ffbf 	bl	80183fc <ip4_addr_isbroadcast_u32>
 801247e:	4603      	mov	r3, r0
 8012480:	2b00      	cmp	r3, #0
 8012482:	f040 83c7 	bne.w	8012c14 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012486:	4b92      	ldr	r3, [pc, #584]	; (80126d0 <tcp_input+0x290>)
 8012488:	695b      	ldr	r3, [r3, #20]
 801248a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801248e:	2be0      	cmp	r3, #224	; 0xe0
 8012490:	f000 83c0 	beq.w	8012c14 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012494:	4b8d      	ldr	r3, [pc, #564]	; (80126cc <tcp_input+0x28c>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	899b      	ldrh	r3, [r3, #12]
 801249a:	b29b      	uxth	r3, r3
 801249c:	4618      	mov	r0, r3
 801249e:	f7fc fd07 	bl	800eeb0 <lwip_htons>
 80124a2:	4603      	mov	r3, r0
 80124a4:	0b1b      	lsrs	r3, r3, #12
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80124ae:	7cbb      	ldrb	r3, [r7, #18]
 80124b0:	2b13      	cmp	r3, #19
 80124b2:	f240 83b1 	bls.w	8012c18 <tcp_input+0x7d8>
 80124b6:	7cbb      	ldrb	r3, [r7, #18]
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	891b      	ldrh	r3, [r3, #8]
 80124be:	429a      	cmp	r2, r3
 80124c0:	f200 83aa 	bhi.w	8012c18 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80124c4:	7cbb      	ldrb	r3, [r7, #18]
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	3b14      	subs	r3, #20
 80124ca:	b29a      	uxth	r2, r3
 80124cc:	4b81      	ldr	r3, [pc, #516]	; (80126d4 <tcp_input+0x294>)
 80124ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80124d0:	4b81      	ldr	r3, [pc, #516]	; (80126d8 <tcp_input+0x298>)
 80124d2:	2200      	movs	r2, #0
 80124d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	895a      	ldrh	r2, [r3, #10]
 80124da:	7cbb      	ldrb	r3, [r7, #18]
 80124dc:	b29b      	uxth	r3, r3
 80124de:	429a      	cmp	r2, r3
 80124e0:	d309      	bcc.n	80124f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80124e2:	4b7c      	ldr	r3, [pc, #496]	; (80126d4 <tcp_input+0x294>)
 80124e4:	881a      	ldrh	r2, [r3, #0]
 80124e6:	4b7d      	ldr	r3, [pc, #500]	; (80126dc <tcp_input+0x29c>)
 80124e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80124ea:	7cbb      	ldrb	r3, [r7, #18]
 80124ec:	4619      	mov	r1, r3
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7fe f84a 	bl	8010588 <pbuf_remove_header>
 80124f4:	e04e      	b.n	8012594 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d105      	bne.n	801250a <tcp_input+0xca>
 80124fe:	4b70      	ldr	r3, [pc, #448]	; (80126c0 <tcp_input+0x280>)
 8012500:	22c2      	movs	r2, #194	; 0xc2
 8012502:	4977      	ldr	r1, [pc, #476]	; (80126e0 <tcp_input+0x2a0>)
 8012504:	4870      	ldr	r0, [pc, #448]	; (80126c8 <tcp_input+0x288>)
 8012506:	f007 f9b7 	bl	8019878 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801250a:	2114      	movs	r1, #20
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7fe f83b 	bl	8010588 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	895a      	ldrh	r2, [r3, #10]
 8012516:	4b71      	ldr	r3, [pc, #452]	; (80126dc <tcp_input+0x29c>)
 8012518:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801251a:	4b6e      	ldr	r3, [pc, #440]	; (80126d4 <tcp_input+0x294>)
 801251c:	881a      	ldrh	r2, [r3, #0]
 801251e:	4b6f      	ldr	r3, [pc, #444]	; (80126dc <tcp_input+0x29c>)
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	1ad3      	subs	r3, r2, r3
 8012524:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012526:	4b6d      	ldr	r3, [pc, #436]	; (80126dc <tcp_input+0x29c>)
 8012528:	881b      	ldrh	r3, [r3, #0]
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7fe f82b 	bl	8010588 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	895b      	ldrh	r3, [r3, #10]
 8012538:	8a3a      	ldrh	r2, [r7, #16]
 801253a:	429a      	cmp	r2, r3
 801253c:	f200 836e 	bhi.w	8012c1c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	4a64      	ldr	r2, [pc, #400]	; (80126d8 <tcp_input+0x298>)
 8012548:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	8a3a      	ldrh	r2, [r7, #16]
 8012550:	4611      	mov	r1, r2
 8012552:	4618      	mov	r0, r3
 8012554:	f7fe f818 	bl	8010588 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	891a      	ldrh	r2, [r3, #8]
 801255c:	8a3b      	ldrh	r3, [r7, #16]
 801255e:	1ad3      	subs	r3, r2, r3
 8012560:	b29a      	uxth	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	895b      	ldrh	r3, [r3, #10]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d005      	beq.n	801257a <tcp_input+0x13a>
 801256e:	4b54      	ldr	r3, [pc, #336]	; (80126c0 <tcp_input+0x280>)
 8012570:	22df      	movs	r2, #223	; 0xdf
 8012572:	495c      	ldr	r1, [pc, #368]	; (80126e4 <tcp_input+0x2a4>)
 8012574:	4854      	ldr	r0, [pc, #336]	; (80126c8 <tcp_input+0x288>)
 8012576:	f007 f97f 	bl	8019878 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	891a      	ldrh	r2, [r3, #8]
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	891b      	ldrh	r3, [r3, #8]
 8012584:	429a      	cmp	r2, r3
 8012586:	d005      	beq.n	8012594 <tcp_input+0x154>
 8012588:	4b4d      	ldr	r3, [pc, #308]	; (80126c0 <tcp_input+0x280>)
 801258a:	22e0      	movs	r2, #224	; 0xe0
 801258c:	4956      	ldr	r1, [pc, #344]	; (80126e8 <tcp_input+0x2a8>)
 801258e:	484e      	ldr	r0, [pc, #312]	; (80126c8 <tcp_input+0x288>)
 8012590:	f007 f972 	bl	8019878 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012594:	4b4d      	ldr	r3, [pc, #308]	; (80126cc <tcp_input+0x28c>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	881b      	ldrh	r3, [r3, #0]
 801259a:	b29b      	uxth	r3, r3
 801259c:	4a4b      	ldr	r2, [pc, #300]	; (80126cc <tcp_input+0x28c>)
 801259e:	6814      	ldr	r4, [r2, #0]
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fc fc85 	bl	800eeb0 <lwip_htons>
 80125a6:	4603      	mov	r3, r0
 80125a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80125aa:	4b48      	ldr	r3, [pc, #288]	; (80126cc <tcp_input+0x28c>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	885b      	ldrh	r3, [r3, #2]
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	4a46      	ldr	r2, [pc, #280]	; (80126cc <tcp_input+0x28c>)
 80125b4:	6814      	ldr	r4, [r2, #0]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7fc fc7a 	bl	800eeb0 <lwip_htons>
 80125bc:	4603      	mov	r3, r0
 80125be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80125c0:	4b42      	ldr	r3, [pc, #264]	; (80126cc <tcp_input+0x28c>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	4a41      	ldr	r2, [pc, #260]	; (80126cc <tcp_input+0x28c>)
 80125c8:	6814      	ldr	r4, [r2, #0]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fc fc85 	bl	800eeda <lwip_htonl>
 80125d0:	4603      	mov	r3, r0
 80125d2:	6063      	str	r3, [r4, #4]
 80125d4:	6863      	ldr	r3, [r4, #4]
 80125d6:	4a45      	ldr	r2, [pc, #276]	; (80126ec <tcp_input+0x2ac>)
 80125d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80125da:	4b3c      	ldr	r3, [pc, #240]	; (80126cc <tcp_input+0x28c>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	4a3a      	ldr	r2, [pc, #232]	; (80126cc <tcp_input+0x28c>)
 80125e2:	6814      	ldr	r4, [r2, #0]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7fc fc78 	bl	800eeda <lwip_htonl>
 80125ea:	4603      	mov	r3, r0
 80125ec:	60a3      	str	r3, [r4, #8]
 80125ee:	68a3      	ldr	r3, [r4, #8]
 80125f0:	4a3f      	ldr	r2, [pc, #252]	; (80126f0 <tcp_input+0x2b0>)
 80125f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80125f4:	4b35      	ldr	r3, [pc, #212]	; (80126cc <tcp_input+0x28c>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	89db      	ldrh	r3, [r3, #14]
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	4a33      	ldr	r2, [pc, #204]	; (80126cc <tcp_input+0x28c>)
 80125fe:	6814      	ldr	r4, [r2, #0]
 8012600:	4618      	mov	r0, r3
 8012602:	f7fc fc55 	bl	800eeb0 <lwip_htons>
 8012606:	4603      	mov	r3, r0
 8012608:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801260a:	4b30      	ldr	r3, [pc, #192]	; (80126cc <tcp_input+0x28c>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	899b      	ldrh	r3, [r3, #12]
 8012610:	b29b      	uxth	r3, r3
 8012612:	4618      	mov	r0, r3
 8012614:	f7fc fc4c 	bl	800eeb0 <lwip_htons>
 8012618:	4603      	mov	r3, r0
 801261a:	b2db      	uxtb	r3, r3
 801261c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012620:	b2da      	uxtb	r2, r3
 8012622:	4b34      	ldr	r3, [pc, #208]	; (80126f4 <tcp_input+0x2b4>)
 8012624:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	891a      	ldrh	r2, [r3, #8]
 801262a:	4b33      	ldr	r3, [pc, #204]	; (80126f8 <tcp_input+0x2b8>)
 801262c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801262e:	4b31      	ldr	r3, [pc, #196]	; (80126f4 <tcp_input+0x2b4>)
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	f003 0303 	and.w	r3, r3, #3
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00c      	beq.n	8012654 <tcp_input+0x214>
    tcplen++;
 801263a:	4b2f      	ldr	r3, [pc, #188]	; (80126f8 <tcp_input+0x2b8>)
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	3301      	adds	r3, #1
 8012640:	b29a      	uxth	r2, r3
 8012642:	4b2d      	ldr	r3, [pc, #180]	; (80126f8 <tcp_input+0x2b8>)
 8012644:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	891a      	ldrh	r2, [r3, #8]
 801264a:	4b2b      	ldr	r3, [pc, #172]	; (80126f8 <tcp_input+0x2b8>)
 801264c:	881b      	ldrh	r3, [r3, #0]
 801264e:	429a      	cmp	r2, r3
 8012650:	f200 82e6 	bhi.w	8012c20 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012654:	2300      	movs	r3, #0
 8012656:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012658:	4b28      	ldr	r3, [pc, #160]	; (80126fc <tcp_input+0x2bc>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	61fb      	str	r3, [r7, #28]
 801265e:	e09d      	b.n	801279c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	7d1b      	ldrb	r3, [r3, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d105      	bne.n	8012674 <tcp_input+0x234>
 8012668:	4b15      	ldr	r3, [pc, #84]	; (80126c0 <tcp_input+0x280>)
 801266a:	22fb      	movs	r2, #251	; 0xfb
 801266c:	4924      	ldr	r1, [pc, #144]	; (8012700 <tcp_input+0x2c0>)
 801266e:	4816      	ldr	r0, [pc, #88]	; (80126c8 <tcp_input+0x288>)
 8012670:	f007 f902 	bl	8019878 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	7d1b      	ldrb	r3, [r3, #20]
 8012678:	2b0a      	cmp	r3, #10
 801267a:	d105      	bne.n	8012688 <tcp_input+0x248>
 801267c:	4b10      	ldr	r3, [pc, #64]	; (80126c0 <tcp_input+0x280>)
 801267e:	22fc      	movs	r2, #252	; 0xfc
 8012680:	4920      	ldr	r1, [pc, #128]	; (8012704 <tcp_input+0x2c4>)
 8012682:	4811      	ldr	r0, [pc, #68]	; (80126c8 <tcp_input+0x288>)
 8012684:	f007 f8f8 	bl	8019878 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012688:	69fb      	ldr	r3, [r7, #28]
 801268a:	7d1b      	ldrb	r3, [r3, #20]
 801268c:	2b01      	cmp	r3, #1
 801268e:	d105      	bne.n	801269c <tcp_input+0x25c>
 8012690:	4b0b      	ldr	r3, [pc, #44]	; (80126c0 <tcp_input+0x280>)
 8012692:	22fd      	movs	r2, #253	; 0xfd
 8012694:	491c      	ldr	r1, [pc, #112]	; (8012708 <tcp_input+0x2c8>)
 8012696:	480c      	ldr	r0, [pc, #48]	; (80126c8 <tcp_input+0x288>)
 8012698:	f007 f8ee 	bl	8019878 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	7a1b      	ldrb	r3, [r3, #8]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d033      	beq.n	801270c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	7a1a      	ldrb	r2, [r3, #8]
 80126a8:	4b09      	ldr	r3, [pc, #36]	; (80126d0 <tcp_input+0x290>)
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80126b0:	3301      	adds	r3, #1
 80126b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d029      	beq.n	801270c <tcp_input+0x2cc>
      prev = pcb;
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	61bb      	str	r3, [r7, #24]
      continue;
 80126bc:	e06b      	b.n	8012796 <tcp_input+0x356>
 80126be:	bf00      	nop
 80126c0:	0801c128 	.word	0x0801c128
 80126c4:	0801c15c 	.word	0x0801c15c
 80126c8:	0801c174 	.word	0x0801c174
 80126cc:	2000dac0 	.word	0x2000dac0
 80126d0:	2000a344 	.word	0x2000a344
 80126d4:	2000dac4 	.word	0x2000dac4
 80126d8:	2000dac8 	.word	0x2000dac8
 80126dc:	2000dac6 	.word	0x2000dac6
 80126e0:	0801c19c 	.word	0x0801c19c
 80126e4:	0801c1ac 	.word	0x0801c1ac
 80126e8:	0801c1b8 	.word	0x0801c1b8
 80126ec:	2000dad0 	.word	0x2000dad0
 80126f0:	2000dad4 	.word	0x2000dad4
 80126f4:	2000dadc 	.word	0x2000dadc
 80126f8:	2000dada 	.word	0x2000dada
 80126fc:	2000daa4 	.word	0x2000daa4
 8012700:	0801c1d8 	.word	0x0801c1d8
 8012704:	0801c200 	.word	0x0801c200
 8012708:	0801c22c 	.word	0x0801c22c
    }

    if (pcb->remote_port == tcphdr->src &&
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	8b1a      	ldrh	r2, [r3, #24]
 8012710:	4b72      	ldr	r3, [pc, #456]	; (80128dc <tcp_input+0x49c>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	b29b      	uxth	r3, r3
 8012718:	429a      	cmp	r2, r3
 801271a:	d13a      	bne.n	8012792 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	8ada      	ldrh	r2, [r3, #22]
 8012720:	4b6e      	ldr	r3, [pc, #440]	; (80128dc <tcp_input+0x49c>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	885b      	ldrh	r3, [r3, #2]
 8012726:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012728:	429a      	cmp	r2, r3
 801272a:	d132      	bne.n	8012792 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	685a      	ldr	r2, [r3, #4]
 8012730:	4b6b      	ldr	r3, [pc, #428]	; (80128e0 <tcp_input+0x4a0>)
 8012732:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012734:	429a      	cmp	r2, r3
 8012736:	d12c      	bne.n	8012792 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	4b68      	ldr	r3, [pc, #416]	; (80128e0 <tcp_input+0x4a0>)
 801273e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012740:	429a      	cmp	r2, r3
 8012742:	d126      	bne.n	8012792 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	69fa      	ldr	r2, [r7, #28]
 801274a:	429a      	cmp	r2, r3
 801274c:	d106      	bne.n	801275c <tcp_input+0x31c>
 801274e:	4b65      	ldr	r3, [pc, #404]	; (80128e4 <tcp_input+0x4a4>)
 8012750:	f240 120d 	movw	r2, #269	; 0x10d
 8012754:	4964      	ldr	r1, [pc, #400]	; (80128e8 <tcp_input+0x4a8>)
 8012756:	4865      	ldr	r0, [pc, #404]	; (80128ec <tcp_input+0x4ac>)
 8012758:	f007 f88e 	bl	8019878 <iprintf>
      if (prev != NULL) {
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00a      	beq.n	8012778 <tcp_input+0x338>
        prev->next = pcb->next;
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	68da      	ldr	r2, [r3, #12]
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801276a:	4b61      	ldr	r3, [pc, #388]	; (80128f0 <tcp_input+0x4b0>)
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	69fb      	ldr	r3, [r7, #28]
 8012770:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012772:	4a5f      	ldr	r2, [pc, #380]	; (80128f0 <tcp_input+0x4b0>)
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	69fa      	ldr	r2, [r7, #28]
 801277e:	429a      	cmp	r2, r3
 8012780:	d111      	bne.n	80127a6 <tcp_input+0x366>
 8012782:	4b58      	ldr	r3, [pc, #352]	; (80128e4 <tcp_input+0x4a4>)
 8012784:	f240 1215 	movw	r2, #277	; 0x115
 8012788:	495a      	ldr	r1, [pc, #360]	; (80128f4 <tcp_input+0x4b4>)
 801278a:	4858      	ldr	r0, [pc, #352]	; (80128ec <tcp_input+0x4ac>)
 801278c:	f007 f874 	bl	8019878 <iprintf>
      break;
 8012790:	e009      	b.n	80127a6 <tcp_input+0x366>
    }
    prev = pcb;
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	61fb      	str	r3, [r7, #28]
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f47f af5e 	bne.w	8012660 <tcp_input+0x220>
 80127a4:	e000      	b.n	80127a8 <tcp_input+0x368>
      break;
 80127a6:	bf00      	nop
  }

  if (pcb == NULL) {
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	f040 80aa 	bne.w	8012904 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80127b0:	4b51      	ldr	r3, [pc, #324]	; (80128f8 <tcp_input+0x4b8>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	61fb      	str	r3, [r7, #28]
 80127b6:	e03f      	b.n	8012838 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	7d1b      	ldrb	r3, [r3, #20]
 80127bc:	2b0a      	cmp	r3, #10
 80127be:	d006      	beq.n	80127ce <tcp_input+0x38e>
 80127c0:	4b48      	ldr	r3, [pc, #288]	; (80128e4 <tcp_input+0x4a4>)
 80127c2:	f240 121f 	movw	r2, #287	; 0x11f
 80127c6:	494d      	ldr	r1, [pc, #308]	; (80128fc <tcp_input+0x4bc>)
 80127c8:	4848      	ldr	r0, [pc, #288]	; (80128ec <tcp_input+0x4ac>)
 80127ca:	f007 f855 	bl	8019878 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	7a1b      	ldrb	r3, [r3, #8]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d009      	beq.n	80127ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	7a1a      	ldrb	r2, [r3, #8]
 80127da:	4b41      	ldr	r3, [pc, #260]	; (80128e0 <tcp_input+0x4a0>)
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80127e2:	3301      	adds	r3, #1
 80127e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d122      	bne.n	8012830 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	8b1a      	ldrh	r2, [r3, #24]
 80127ee:	4b3b      	ldr	r3, [pc, #236]	; (80128dc <tcp_input+0x49c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	881b      	ldrh	r3, [r3, #0]
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d11b      	bne.n	8012832 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	8ada      	ldrh	r2, [r3, #22]
 80127fe:	4b37      	ldr	r3, [pc, #220]	; (80128dc <tcp_input+0x49c>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	885b      	ldrh	r3, [r3, #2]
 8012804:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012806:	429a      	cmp	r2, r3
 8012808:	d113      	bne.n	8012832 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	685a      	ldr	r2, [r3, #4]
 801280e:	4b34      	ldr	r3, [pc, #208]	; (80128e0 <tcp_input+0x4a0>)
 8012810:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012812:	429a      	cmp	r2, r3
 8012814:	d10d      	bne.n	8012832 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	4b31      	ldr	r3, [pc, #196]	; (80128e0 <tcp_input+0x4a0>)
 801281c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801281e:	429a      	cmp	r2, r3
 8012820:	d107      	bne.n	8012832 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012822:	69f8      	ldr	r0, [r7, #28]
 8012824:	f000 fb56 	bl	8012ed4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7fd ff33 	bl	8010694 <pbuf_free>
        return;
 801282e:	e1fd      	b.n	8012c2c <tcp_input+0x7ec>
        continue;
 8012830:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	68db      	ldr	r3, [r3, #12]
 8012836:	61fb      	str	r3, [r7, #28]
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1bc      	bne.n	80127b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801283e:	2300      	movs	r3, #0
 8012840:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012842:	4b2f      	ldr	r3, [pc, #188]	; (8012900 <tcp_input+0x4c0>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	617b      	str	r3, [r7, #20]
 8012848:	e02a      	b.n	80128a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	7a1b      	ldrb	r3, [r3, #8]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00c      	beq.n	801286c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	7a1a      	ldrb	r2, [r3, #8]
 8012856:	4b22      	ldr	r3, [pc, #136]	; (80128e0 <tcp_input+0x4a0>)
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801285e:	3301      	adds	r3, #1
 8012860:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012862:	429a      	cmp	r2, r3
 8012864:	d002      	beq.n	801286c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	61bb      	str	r3, [r7, #24]
        continue;
 801286a:	e016      	b.n	801289a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	8ada      	ldrh	r2, [r3, #22]
 8012870:	4b1a      	ldr	r3, [pc, #104]	; (80128dc <tcp_input+0x49c>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	885b      	ldrh	r3, [r3, #2]
 8012876:	b29b      	uxth	r3, r3
 8012878:	429a      	cmp	r2, r3
 801287a:	d10c      	bne.n	8012896 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	4b17      	ldr	r3, [pc, #92]	; (80128e0 <tcp_input+0x4a0>)
 8012882:	695b      	ldr	r3, [r3, #20]
 8012884:	429a      	cmp	r2, r3
 8012886:	d00f      	beq.n	80128a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00d      	beq.n	80128aa <tcp_input+0x46a>
 801288e:	697b      	ldr	r3, [r7, #20]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d009      	beq.n	80128aa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	68db      	ldr	r3, [r3, #12]
 801289e:	617b      	str	r3, [r7, #20]
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d1d1      	bne.n	801284a <tcp_input+0x40a>
 80128a6:	e000      	b.n	80128aa <tcp_input+0x46a>
            break;
 80128a8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d029      	beq.n	8012904 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00a      	beq.n	80128cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	68da      	ldr	r2, [r3, #12]
 80128ba:	69bb      	ldr	r3, [r7, #24]
 80128bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80128be:	4b10      	ldr	r3, [pc, #64]	; (8012900 <tcp_input+0x4c0>)
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80128c6:	4a0e      	ldr	r2, [pc, #56]	; (8012900 <tcp_input+0x4c0>)
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80128cc:	6978      	ldr	r0, [r7, #20]
 80128ce:	f000 fa03 	bl	8012cd8 <tcp_listen_input>
      }
      pbuf_free(p);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f7fd fede 	bl	8010694 <pbuf_free>
      return;
 80128d8:	e1a8      	b.n	8012c2c <tcp_input+0x7ec>
 80128da:	bf00      	nop
 80128dc:	2000dac0 	.word	0x2000dac0
 80128e0:	2000a344 	.word	0x2000a344
 80128e4:	0801c128 	.word	0x0801c128
 80128e8:	0801c254 	.word	0x0801c254
 80128ec:	0801c174 	.word	0x0801c174
 80128f0:	2000daa4 	.word	0x2000daa4
 80128f4:	0801c280 	.word	0x0801c280
 80128f8:	2000daa8 	.word	0x2000daa8
 80128fc:	0801c2ac 	.word	0x0801c2ac
 8012900:	2000daa0 	.word	0x2000daa0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	2b00      	cmp	r3, #0
 8012908:	f000 8158 	beq.w	8012bbc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801290c:	4b95      	ldr	r3, [pc, #596]	; (8012b64 <tcp_input+0x724>)
 801290e:	2200      	movs	r2, #0
 8012910:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	891a      	ldrh	r2, [r3, #8]
 8012916:	4b93      	ldr	r3, [pc, #588]	; (8012b64 <tcp_input+0x724>)
 8012918:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801291a:	4a92      	ldr	r2, [pc, #584]	; (8012b64 <tcp_input+0x724>)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012920:	4b91      	ldr	r3, [pc, #580]	; (8012b68 <tcp_input+0x728>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	4a8f      	ldr	r2, [pc, #572]	; (8012b64 <tcp_input+0x724>)
 8012926:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012928:	4b90      	ldr	r3, [pc, #576]	; (8012b6c <tcp_input+0x72c>)
 801292a:	2200      	movs	r2, #0
 801292c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801292e:	4b90      	ldr	r3, [pc, #576]	; (8012b70 <tcp_input+0x730>)
 8012930:	2200      	movs	r2, #0
 8012932:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012934:	4b8f      	ldr	r3, [pc, #572]	; (8012b74 <tcp_input+0x734>)
 8012936:	2200      	movs	r2, #0
 8012938:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801293a:	4b8f      	ldr	r3, [pc, #572]	; (8012b78 <tcp_input+0x738>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	f003 0308 	and.w	r3, r3, #8
 8012942:	2b00      	cmp	r3, #0
 8012944:	d006      	beq.n	8012954 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	7b5b      	ldrb	r3, [r3, #13]
 801294a:	f043 0301 	orr.w	r3, r3, #1
 801294e:	b2da      	uxtb	r2, r3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012958:	2b00      	cmp	r3, #0
 801295a:	d017      	beq.n	801298c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801295c:	69f8      	ldr	r0, [r7, #28]
 801295e:	f7ff f929 	bl	8011bb4 <tcp_process_refused_data>
 8012962:	4603      	mov	r3, r0
 8012964:	f113 0f0d 	cmn.w	r3, #13
 8012968:	d007      	beq.n	801297a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801296e:	2b00      	cmp	r3, #0
 8012970:	d00c      	beq.n	801298c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012972:	4b82      	ldr	r3, [pc, #520]	; (8012b7c <tcp_input+0x73c>)
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d008      	beq.n	801298c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801297e:	2b00      	cmp	r3, #0
 8012980:	f040 80e3 	bne.w	8012b4a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012984:	69f8      	ldr	r0, [r7, #28]
 8012986:	f003 f9ad 	bl	8015ce4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801298a:	e0de      	b.n	8012b4a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801298c:	4a7c      	ldr	r2, [pc, #496]	; (8012b80 <tcp_input+0x740>)
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012992:	69f8      	ldr	r0, [r7, #28]
 8012994:	f000 fb18 	bl	8012fc8 <tcp_process>
 8012998:	4603      	mov	r3, r0
 801299a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801299c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129a0:	f113 0f0d 	cmn.w	r3, #13
 80129a4:	f000 80d3 	beq.w	8012b4e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80129a8:	4b71      	ldr	r3, [pc, #452]	; (8012b70 <tcp_input+0x730>)
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	f003 0308 	and.w	r3, r3, #8
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d015      	beq.n	80129e0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d008      	beq.n	80129d0 <tcp_input+0x590>
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129c4:	69fa      	ldr	r2, [r7, #28]
 80129c6:	6912      	ldr	r2, [r2, #16]
 80129c8:	f06f 010d 	mvn.w	r1, #13
 80129cc:	4610      	mov	r0, r2
 80129ce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80129d0:	69f9      	ldr	r1, [r7, #28]
 80129d2:	486c      	ldr	r0, [pc, #432]	; (8012b84 <tcp_input+0x744>)
 80129d4:	f7ff fbbc 	bl	8012150 <tcp_pcb_remove>
        tcp_free(pcb);
 80129d8:	69f8      	ldr	r0, [r7, #28]
 80129da:	f7fe f9a9 	bl	8010d30 <tcp_free>
 80129de:	e0da      	b.n	8012b96 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80129e0:	2300      	movs	r3, #0
 80129e2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80129e4:	4b63      	ldr	r3, [pc, #396]	; (8012b74 <tcp_input+0x734>)
 80129e6:	881b      	ldrh	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d01d      	beq.n	8012a28 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80129ec:	4b61      	ldr	r3, [pc, #388]	; (8012b74 <tcp_input+0x734>)
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d00a      	beq.n	8012a12 <tcp_input+0x5d2>
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a02:	69fa      	ldr	r2, [r7, #28]
 8012a04:	6910      	ldr	r0, [r2, #16]
 8012a06:	89fa      	ldrh	r2, [r7, #14]
 8012a08:	69f9      	ldr	r1, [r7, #28]
 8012a0a:	4798      	blx	r3
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	74fb      	strb	r3, [r7, #19]
 8012a10:	e001      	b.n	8012a16 <tcp_input+0x5d6>
 8012a12:	2300      	movs	r3, #0
 8012a14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012a16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a1a:	f113 0f0d 	cmn.w	r3, #13
 8012a1e:	f000 8098 	beq.w	8012b52 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012a22:	4b54      	ldr	r3, [pc, #336]	; (8012b74 <tcp_input+0x734>)
 8012a24:	2200      	movs	r2, #0
 8012a26:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012a28:	69f8      	ldr	r0, [r7, #28]
 8012a2a:	f000 f915 	bl	8012c58 <tcp_input_delayed_close>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f040 8090 	bne.w	8012b56 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012a36:	4b4d      	ldr	r3, [pc, #308]	; (8012b6c <tcp_input+0x72c>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d041      	beq.n	8012ac2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d006      	beq.n	8012a54 <tcp_input+0x614>
 8012a46:	4b50      	ldr	r3, [pc, #320]	; (8012b88 <tcp_input+0x748>)
 8012a48:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a4c:	494f      	ldr	r1, [pc, #316]	; (8012b8c <tcp_input+0x74c>)
 8012a4e:	4850      	ldr	r0, [pc, #320]	; (8012b90 <tcp_input+0x750>)
 8012a50:	f006 ff12 	bl	8019878 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	8b5b      	ldrh	r3, [r3, #26]
 8012a58:	f003 0310 	and.w	r3, r3, #16
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d008      	beq.n	8012a72 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012a60:	4b42      	ldr	r3, [pc, #264]	; (8012b6c <tcp_input+0x72c>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fd fe15 	bl	8010694 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012a6a:	69f8      	ldr	r0, [r7, #28]
 8012a6c:	f7fe fc48 	bl	8011300 <tcp_abort>
            goto aborted;
 8012a70:	e091      	b.n	8012b96 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012a72:	69fb      	ldr	r3, [r7, #28]
 8012a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d00c      	beq.n	8012a96 <tcp_input+0x656>
 8012a7c:	69fb      	ldr	r3, [r7, #28]
 8012a7e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	6918      	ldr	r0, [r3, #16]
 8012a86:	4b39      	ldr	r3, [pc, #228]	; (8012b6c <tcp_input+0x72c>)
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	69f9      	ldr	r1, [r7, #28]
 8012a8e:	47a0      	blx	r4
 8012a90:	4603      	mov	r3, r0
 8012a92:	74fb      	strb	r3, [r7, #19]
 8012a94:	e008      	b.n	8012aa8 <tcp_input+0x668>
 8012a96:	4b35      	ldr	r3, [pc, #212]	; (8012b6c <tcp_input+0x72c>)
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	69f9      	ldr	r1, [r7, #28]
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	f7ff f95e 	bl	8011d60 <tcp_recv_null>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012aa8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012aac:	f113 0f0d 	cmn.w	r3, #13
 8012ab0:	d053      	beq.n	8012b5a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012ab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d003      	beq.n	8012ac2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012aba:	4b2c      	ldr	r3, [pc, #176]	; (8012b6c <tcp_input+0x72c>)
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	69fb      	ldr	r3, [r7, #28]
 8012ac0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012ac2:	4b2b      	ldr	r3, [pc, #172]	; (8012b70 <tcp_input+0x730>)
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	f003 0320 	and.w	r3, r3, #32
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d030      	beq.n	8012b30 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d009      	beq.n	8012aea <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ada:	7b5a      	ldrb	r2, [r3, #13]
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ae0:	f042 0220 	orr.w	r2, r2, #32
 8012ae4:	b2d2      	uxtb	r2, r2
 8012ae6:	735a      	strb	r2, [r3, #13]
 8012ae8:	e022      	b.n	8012b30 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012aee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012af2:	d005      	beq.n	8012b00 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012af8:	3301      	adds	r3, #1
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	69fb      	ldr	r3, [r7, #28]
 8012afe:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d00b      	beq.n	8012b22 <tcp_input+0x6e2>
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	6918      	ldr	r0, [r3, #16]
 8012b14:	2300      	movs	r3, #0
 8012b16:	2200      	movs	r2, #0
 8012b18:	69f9      	ldr	r1, [r7, #28]
 8012b1a:	47a0      	blx	r4
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	74fb      	strb	r3, [r7, #19]
 8012b20:	e001      	b.n	8012b26 <tcp_input+0x6e6>
 8012b22:	2300      	movs	r3, #0
 8012b24:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012b26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b2a:	f113 0f0d 	cmn.w	r3, #13
 8012b2e:	d016      	beq.n	8012b5e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012b30:	4b13      	ldr	r3, [pc, #76]	; (8012b80 <tcp_input+0x740>)
 8012b32:	2200      	movs	r2, #0
 8012b34:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012b36:	69f8      	ldr	r0, [r7, #28]
 8012b38:	f000 f88e 	bl	8012c58 <tcp_input_delayed_close>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d128      	bne.n	8012b94 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012b42:	69f8      	ldr	r0, [r7, #28]
 8012b44:	f002 fac8 	bl	80150d8 <tcp_output>
 8012b48:	e025      	b.n	8012b96 <tcp_input+0x756>
        goto aborted;
 8012b4a:	bf00      	nop
 8012b4c:	e023      	b.n	8012b96 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012b4e:	bf00      	nop
 8012b50:	e021      	b.n	8012b96 <tcp_input+0x756>
              goto aborted;
 8012b52:	bf00      	nop
 8012b54:	e01f      	b.n	8012b96 <tcp_input+0x756>
          goto aborted;
 8012b56:	bf00      	nop
 8012b58:	e01d      	b.n	8012b96 <tcp_input+0x756>
            goto aborted;
 8012b5a:	bf00      	nop
 8012b5c:	e01b      	b.n	8012b96 <tcp_input+0x756>
              goto aborted;
 8012b5e:	bf00      	nop
 8012b60:	e019      	b.n	8012b96 <tcp_input+0x756>
 8012b62:	bf00      	nop
 8012b64:	2000dab0 	.word	0x2000dab0
 8012b68:	2000dac0 	.word	0x2000dac0
 8012b6c:	2000dae0 	.word	0x2000dae0
 8012b70:	2000dadd 	.word	0x2000dadd
 8012b74:	2000dad8 	.word	0x2000dad8
 8012b78:	2000dadc 	.word	0x2000dadc
 8012b7c:	2000dada 	.word	0x2000dada
 8012b80:	2000dae4 	.word	0x2000dae4
 8012b84:	2000daa4 	.word	0x2000daa4
 8012b88:	0801c128 	.word	0x0801c128
 8012b8c:	0801c2dc 	.word	0x0801c2dc
 8012b90:	0801c174 	.word	0x0801c174
          goto aborted;
 8012b94:	bf00      	nop
    tcp_input_pcb = NULL;
 8012b96:	4b27      	ldr	r3, [pc, #156]	; (8012c34 <tcp_input+0x7f4>)
 8012b98:	2200      	movs	r2, #0
 8012b9a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012b9c:	4b26      	ldr	r3, [pc, #152]	; (8012c38 <tcp_input+0x7f8>)
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012ba2:	4b26      	ldr	r3, [pc, #152]	; (8012c3c <tcp_input+0x7fc>)
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d03f      	beq.n	8012c2a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012baa:	4b24      	ldr	r3, [pc, #144]	; (8012c3c <tcp_input+0x7fc>)
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7fd fd70 	bl	8010694 <pbuf_free>
      inseg.p = NULL;
 8012bb4:	4b21      	ldr	r3, [pc, #132]	; (8012c3c <tcp_input+0x7fc>)
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012bba:	e036      	b.n	8012c2a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012bbc:	4b20      	ldr	r3, [pc, #128]	; (8012c40 <tcp_input+0x800>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	899b      	ldrh	r3, [r3, #12]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fc f973 	bl	800eeb0 <lwip_htons>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	f003 0304 	and.w	r3, r3, #4
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d118      	bne.n	8012c08 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bd6:	4b1b      	ldr	r3, [pc, #108]	; (8012c44 <tcp_input+0x804>)
 8012bd8:	6819      	ldr	r1, [r3, #0]
 8012bda:	4b1b      	ldr	r3, [pc, #108]	; (8012c48 <tcp_input+0x808>)
 8012bdc:	881b      	ldrh	r3, [r3, #0]
 8012bde:	461a      	mov	r2, r3
 8012be0:	4b1a      	ldr	r3, [pc, #104]	; (8012c4c <tcp_input+0x80c>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012be6:	4b16      	ldr	r3, [pc, #88]	; (8012c40 <tcp_input+0x800>)
 8012be8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bea:	885b      	ldrh	r3, [r3, #2]
 8012bec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bee:	4a14      	ldr	r2, [pc, #80]	; (8012c40 <tcp_input+0x800>)
 8012bf0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bf2:	8812      	ldrh	r2, [r2, #0]
 8012bf4:	b292      	uxth	r2, r2
 8012bf6:	9202      	str	r2, [sp, #8]
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	4b15      	ldr	r3, [pc, #84]	; (8012c50 <tcp_input+0x810>)
 8012bfc:	9300      	str	r3, [sp, #0]
 8012bfe:	4b15      	ldr	r3, [pc, #84]	; (8012c54 <tcp_input+0x814>)
 8012c00:	4602      	mov	r2, r0
 8012c02:	2000      	movs	r0, #0
 8012c04:	f003 f81c 	bl	8015c40 <tcp_rst>
    pbuf_free(p);
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f7fd fd43 	bl	8010694 <pbuf_free>
  return;
 8012c0e:	e00c      	b.n	8012c2a <tcp_input+0x7ea>
    goto dropped;
 8012c10:	bf00      	nop
 8012c12:	e006      	b.n	8012c22 <tcp_input+0x7e2>
    goto dropped;
 8012c14:	bf00      	nop
 8012c16:	e004      	b.n	8012c22 <tcp_input+0x7e2>
    goto dropped;
 8012c18:	bf00      	nop
 8012c1a:	e002      	b.n	8012c22 <tcp_input+0x7e2>
      goto dropped;
 8012c1c:	bf00      	nop
 8012c1e:	e000      	b.n	8012c22 <tcp_input+0x7e2>
      goto dropped;
 8012c20:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7fd fd36 	bl	8010694 <pbuf_free>
 8012c28:	e000      	b.n	8012c2c <tcp_input+0x7ec>
  return;
 8012c2a:	bf00      	nop
}
 8012c2c:	3724      	adds	r7, #36	; 0x24
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd90      	pop	{r4, r7, pc}
 8012c32:	bf00      	nop
 8012c34:	2000dae4 	.word	0x2000dae4
 8012c38:	2000dae0 	.word	0x2000dae0
 8012c3c:	2000dab0 	.word	0x2000dab0
 8012c40:	2000dac0 	.word	0x2000dac0
 8012c44:	2000dad4 	.word	0x2000dad4
 8012c48:	2000dada 	.word	0x2000dada
 8012c4c:	2000dad0 	.word	0x2000dad0
 8012c50:	2000a354 	.word	0x2000a354
 8012c54:	2000a358 	.word	0x2000a358

08012c58 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d106      	bne.n	8012c74 <tcp_input_delayed_close+0x1c>
 8012c66:	4b17      	ldr	r3, [pc, #92]	; (8012cc4 <tcp_input_delayed_close+0x6c>)
 8012c68:	f240 225a 	movw	r2, #602	; 0x25a
 8012c6c:	4916      	ldr	r1, [pc, #88]	; (8012cc8 <tcp_input_delayed_close+0x70>)
 8012c6e:	4817      	ldr	r0, [pc, #92]	; (8012ccc <tcp_input_delayed_close+0x74>)
 8012c70:	f006 fe02 	bl	8019878 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012c74:	4b16      	ldr	r3, [pc, #88]	; (8012cd0 <tcp_input_delayed_close+0x78>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	f003 0310 	and.w	r3, r3, #16
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d01c      	beq.n	8012cba <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	8b5b      	ldrh	r3, [r3, #26]
 8012c84:	f003 0310 	and.w	r3, r3, #16
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d10d      	bne.n	8012ca8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d008      	beq.n	8012ca8 <tcp_input_delayed_close+0x50>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	6912      	ldr	r2, [r2, #16]
 8012ca0:	f06f 010e 	mvn.w	r1, #14
 8012ca4:	4610      	mov	r0, r2
 8012ca6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012ca8:	6879      	ldr	r1, [r7, #4]
 8012caa:	480a      	ldr	r0, [pc, #40]	; (8012cd4 <tcp_input_delayed_close+0x7c>)
 8012cac:	f7ff fa50 	bl	8012150 <tcp_pcb_remove>
    tcp_free(pcb);
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7fe f83d 	bl	8010d30 <tcp_free>
    return 1;
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	e000      	b.n	8012cbc <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012cba:	2300      	movs	r3, #0
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	0801c128 	.word	0x0801c128
 8012cc8:	0801c2f8 	.word	0x0801c2f8
 8012ccc:	0801c174 	.word	0x0801c174
 8012cd0:	2000dadd 	.word	0x2000dadd
 8012cd4:	2000daa4 	.word	0x2000daa4

08012cd8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012cd8:	b590      	push	{r4, r7, lr}
 8012cda:	b08b      	sub	sp, #44	; 0x2c
 8012cdc:	af04      	add	r7, sp, #16
 8012cde:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012ce0:	4b6f      	ldr	r3, [pc, #444]	; (8012ea0 <tcp_listen_input+0x1c8>)
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	f003 0304 	and.w	r3, r3, #4
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f040 80d2 	bne.w	8012e92 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d106      	bne.n	8012d02 <tcp_listen_input+0x2a>
 8012cf4:	4b6b      	ldr	r3, [pc, #428]	; (8012ea4 <tcp_listen_input+0x1cc>)
 8012cf6:	f240 2281 	movw	r2, #641	; 0x281
 8012cfa:	496b      	ldr	r1, [pc, #428]	; (8012ea8 <tcp_listen_input+0x1d0>)
 8012cfc:	486b      	ldr	r0, [pc, #428]	; (8012eac <tcp_listen_input+0x1d4>)
 8012cfe:	f006 fdbb 	bl	8019878 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012d02:	4b67      	ldr	r3, [pc, #412]	; (8012ea0 <tcp_listen_input+0x1c8>)
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	f003 0310 	and.w	r3, r3, #16
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d019      	beq.n	8012d42 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d0e:	4b68      	ldr	r3, [pc, #416]	; (8012eb0 <tcp_listen_input+0x1d8>)
 8012d10:	6819      	ldr	r1, [r3, #0]
 8012d12:	4b68      	ldr	r3, [pc, #416]	; (8012eb4 <tcp_listen_input+0x1dc>)
 8012d14:	881b      	ldrh	r3, [r3, #0]
 8012d16:	461a      	mov	r2, r3
 8012d18:	4b67      	ldr	r3, [pc, #412]	; (8012eb8 <tcp_listen_input+0x1e0>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d1e:	4b67      	ldr	r3, [pc, #412]	; (8012ebc <tcp_listen_input+0x1e4>)
 8012d20:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d22:	885b      	ldrh	r3, [r3, #2]
 8012d24:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d26:	4a65      	ldr	r2, [pc, #404]	; (8012ebc <tcp_listen_input+0x1e4>)
 8012d28:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d2a:	8812      	ldrh	r2, [r2, #0]
 8012d2c:	b292      	uxth	r2, r2
 8012d2e:	9202      	str	r2, [sp, #8]
 8012d30:	9301      	str	r3, [sp, #4]
 8012d32:	4b63      	ldr	r3, [pc, #396]	; (8012ec0 <tcp_listen_input+0x1e8>)
 8012d34:	9300      	str	r3, [sp, #0]
 8012d36:	4b63      	ldr	r3, [pc, #396]	; (8012ec4 <tcp_listen_input+0x1ec>)
 8012d38:	4602      	mov	r2, r0
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f002 ff80 	bl	8015c40 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012d40:	e0a9      	b.n	8012e96 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012d42:	4b57      	ldr	r3, [pc, #348]	; (8012ea0 <tcp_listen_input+0x1c8>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	f003 0302 	and.w	r3, r3, #2
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	f000 80a3 	beq.w	8012e96 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	7d5b      	ldrb	r3, [r3, #21]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ff f927 	bl	8011fa8 <tcp_alloc>
 8012d5a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d111      	bne.n	8012d86 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	699b      	ldr	r3, [r3, #24]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00a      	beq.n	8012d80 <tcp_listen_input+0xa8>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	699b      	ldr	r3, [r3, #24]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	6910      	ldr	r0, [r2, #16]
 8012d72:	f04f 32ff 	mov.w	r2, #4294967295
 8012d76:	2100      	movs	r1, #0
 8012d78:	4798      	blx	r3
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	73bb      	strb	r3, [r7, #14]
      return;
 8012d7e:	e08b      	b.n	8012e98 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012d80:	23f0      	movs	r3, #240	; 0xf0
 8012d82:	73bb      	strb	r3, [r7, #14]
      return;
 8012d84:	e088      	b.n	8012e98 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012d86:	4b50      	ldr	r3, [pc, #320]	; (8012ec8 <tcp_listen_input+0x1f0>)
 8012d88:	695a      	ldr	r2, [r3, #20]
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012d8e:	4b4e      	ldr	r3, [pc, #312]	; (8012ec8 <tcp_listen_input+0x1f0>)
 8012d90:	691a      	ldr	r2, [r3, #16]
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8ada      	ldrh	r2, [r3, #22]
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012d9e:	4b47      	ldr	r3, [pc, #284]	; (8012ebc <tcp_listen_input+0x1e4>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	881b      	ldrh	r3, [r3, #0]
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	697b      	ldr	r3, [r7, #20]
 8012da8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	2203      	movs	r2, #3
 8012dae:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012db0:	4b41      	ldr	r3, [pc, #260]	; (8012eb8 <tcp_listen_input+0x1e0>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	1c5a      	adds	r2, r3, #1
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012dc2:	6978      	ldr	r0, [r7, #20]
 8012dc4:	f7ff fa58 	bl	8012278 <tcp_next_iss>
 8012dc8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	693a      	ldr	r2, [r7, #16]
 8012dce:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	693a      	ldr	r2, [r7, #16]
 8012dd4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	693a      	ldr	r2, [r7, #16]
 8012dda:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	693a      	ldr	r2, [r7, #16]
 8012de0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012de2:	4b35      	ldr	r3, [pc, #212]	; (8012eb8 <tcp_listen_input+0x1e0>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	1e5a      	subs	r2, r3, #1
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	691a      	ldr	r2, [r3, #16]
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	7a5b      	ldrb	r3, [r3, #9]
 8012dfe:	f003 030c 	and.w	r3, r3, #12
 8012e02:	b2da      	uxtb	r2, r3
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	7a1a      	ldrb	r2, [r3, #8]
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012e10:	4b2e      	ldr	r3, [pc, #184]	; (8012ecc <tcp_listen_input+0x1f4>)
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	60da      	str	r2, [r3, #12]
 8012e18:	4a2c      	ldr	r2, [pc, #176]	; (8012ecc <tcp_listen_input+0x1f4>)
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	6013      	str	r3, [r2, #0]
 8012e1e:	f003 f8d1 	bl	8015fc4 <tcp_timer_needed>
 8012e22:	4b2b      	ldr	r3, [pc, #172]	; (8012ed0 <tcp_listen_input+0x1f8>)
 8012e24:	2201      	movs	r2, #1
 8012e26:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012e28:	6978      	ldr	r0, [r7, #20]
 8012e2a:	f001 fd8f 	bl	801494c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012e2e:	4b23      	ldr	r3, [pc, #140]	; (8012ebc <tcp_listen_input+0x1e4>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	89db      	ldrh	r3, [r3, #14]
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	3304      	adds	r3, #4
 8012e50:	4618      	mov	r0, r3
 8012e52:	f005 f83d 	bl	8017ed0 <ip4_route>
 8012e56:	4601      	mov	r1, r0
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	3304      	adds	r3, #4
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f7ff fa30 	bl	80122c4 <tcp_eff_send_mss_netif>
 8012e64:	4603      	mov	r3, r0
 8012e66:	461a      	mov	r2, r3
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012e6c:	2112      	movs	r1, #18
 8012e6e:	6978      	ldr	r0, [r7, #20]
 8012e70:	f002 f844 	bl	8014efc <tcp_enqueue_flags>
 8012e74:	4603      	mov	r3, r0
 8012e76:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d004      	beq.n	8012e8a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012e80:	2100      	movs	r1, #0
 8012e82:	6978      	ldr	r0, [r7, #20]
 8012e84:	f7fe f97e 	bl	8011184 <tcp_abandon>
      return;
 8012e88:	e006      	b.n	8012e98 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012e8a:	6978      	ldr	r0, [r7, #20]
 8012e8c:	f002 f924 	bl	80150d8 <tcp_output>
  return;
 8012e90:	e001      	b.n	8012e96 <tcp_listen_input+0x1be>
    return;
 8012e92:	bf00      	nop
 8012e94:	e000      	b.n	8012e98 <tcp_listen_input+0x1c0>
  return;
 8012e96:	bf00      	nop
}
 8012e98:	371c      	adds	r7, #28
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd90      	pop	{r4, r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	2000dadc 	.word	0x2000dadc
 8012ea4:	0801c128 	.word	0x0801c128
 8012ea8:	0801c320 	.word	0x0801c320
 8012eac:	0801c174 	.word	0x0801c174
 8012eb0:	2000dad4 	.word	0x2000dad4
 8012eb4:	2000dada 	.word	0x2000dada
 8012eb8:	2000dad0 	.word	0x2000dad0
 8012ebc:	2000dac0 	.word	0x2000dac0
 8012ec0:	2000a354 	.word	0x2000a354
 8012ec4:	2000a358 	.word	0x2000a358
 8012ec8:	2000a344 	.word	0x2000a344
 8012ecc:	2000daa4 	.word	0x2000daa4
 8012ed0:	2000daac 	.word	0x2000daac

08012ed4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b086      	sub	sp, #24
 8012ed8:	af04      	add	r7, sp, #16
 8012eda:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012edc:	4b2f      	ldr	r3, [pc, #188]	; (8012f9c <tcp_timewait_input+0xc8>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	f003 0304 	and.w	r3, r3, #4
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d153      	bne.n	8012f90 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d106      	bne.n	8012efc <tcp_timewait_input+0x28>
 8012eee:	4b2c      	ldr	r3, [pc, #176]	; (8012fa0 <tcp_timewait_input+0xcc>)
 8012ef0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012ef4:	492b      	ldr	r1, [pc, #172]	; (8012fa4 <tcp_timewait_input+0xd0>)
 8012ef6:	482c      	ldr	r0, [pc, #176]	; (8012fa8 <tcp_timewait_input+0xd4>)
 8012ef8:	f006 fcbe 	bl	8019878 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012efc:	4b27      	ldr	r3, [pc, #156]	; (8012f9c <tcp_timewait_input+0xc8>)
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	f003 0302 	and.w	r3, r3, #2
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d02a      	beq.n	8012f5e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012f08:	4b28      	ldr	r3, [pc, #160]	; (8012fac <tcp_timewait_input+0xd8>)
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f10:	1ad3      	subs	r3, r2, r3
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	db2d      	blt.n	8012f72 <tcp_timewait_input+0x9e>
 8012f16:	4b25      	ldr	r3, [pc, #148]	; (8012fac <tcp_timewait_input+0xd8>)
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f1e:	6879      	ldr	r1, [r7, #4]
 8012f20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f22:	440b      	add	r3, r1
 8012f24:	1ad3      	subs	r3, r2, r3
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	dc23      	bgt.n	8012f72 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f2a:	4b21      	ldr	r3, [pc, #132]	; (8012fb0 <tcp_timewait_input+0xdc>)
 8012f2c:	6819      	ldr	r1, [r3, #0]
 8012f2e:	4b21      	ldr	r3, [pc, #132]	; (8012fb4 <tcp_timewait_input+0xe0>)
 8012f30:	881b      	ldrh	r3, [r3, #0]
 8012f32:	461a      	mov	r2, r3
 8012f34:	4b1d      	ldr	r3, [pc, #116]	; (8012fac <tcp_timewait_input+0xd8>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f3a:	4b1f      	ldr	r3, [pc, #124]	; (8012fb8 <tcp_timewait_input+0xe4>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f3e:	885b      	ldrh	r3, [r3, #2]
 8012f40:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f42:	4a1d      	ldr	r2, [pc, #116]	; (8012fb8 <tcp_timewait_input+0xe4>)
 8012f44:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f46:	8812      	ldrh	r2, [r2, #0]
 8012f48:	b292      	uxth	r2, r2
 8012f4a:	9202      	str	r2, [sp, #8]
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	4b1b      	ldr	r3, [pc, #108]	; (8012fbc <tcp_timewait_input+0xe8>)
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	4b1b      	ldr	r3, [pc, #108]	; (8012fc0 <tcp_timewait_input+0xec>)
 8012f54:	4602      	mov	r2, r0
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f002 fe72 	bl	8015c40 <tcp_rst>
      return;
 8012f5c:	e01b      	b.n	8012f96 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012f5e:	4b0f      	ldr	r3, [pc, #60]	; (8012f9c <tcp_timewait_input+0xc8>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	f003 0301 	and.w	r3, r3, #1
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d003      	beq.n	8012f72 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012f6a:	4b16      	ldr	r3, [pc, #88]	; (8012fc4 <tcp_timewait_input+0xf0>)
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012f72:	4b10      	ldr	r3, [pc, #64]	; (8012fb4 <tcp_timewait_input+0xe0>)
 8012f74:	881b      	ldrh	r3, [r3, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00c      	beq.n	8012f94 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	8b5b      	ldrh	r3, [r3, #26]
 8012f7e:	f043 0302 	orr.w	r3, r3, #2
 8012f82:	b29a      	uxth	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f002 f8a5 	bl	80150d8 <tcp_output>
  }
  return;
 8012f8e:	e001      	b.n	8012f94 <tcp_timewait_input+0xc0>
    return;
 8012f90:	bf00      	nop
 8012f92:	e000      	b.n	8012f96 <tcp_timewait_input+0xc2>
  return;
 8012f94:	bf00      	nop
}
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	2000dadc 	.word	0x2000dadc
 8012fa0:	0801c128 	.word	0x0801c128
 8012fa4:	0801c340 	.word	0x0801c340
 8012fa8:	0801c174 	.word	0x0801c174
 8012fac:	2000dad0 	.word	0x2000dad0
 8012fb0:	2000dad4 	.word	0x2000dad4
 8012fb4:	2000dada 	.word	0x2000dada
 8012fb8:	2000dac0 	.word	0x2000dac0
 8012fbc:	2000a354 	.word	0x2000a354
 8012fc0:	2000a358 	.word	0x2000a358
 8012fc4:	2000da98 	.word	0x2000da98

08012fc8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012fc8:	b590      	push	{r4, r7, lr}
 8012fca:	b08d      	sub	sp, #52	; 0x34
 8012fcc:	af04      	add	r7, sp, #16
 8012fce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d106      	bne.n	8012fec <tcp_process+0x24>
 8012fde:	4b9d      	ldr	r3, [pc, #628]	; (8013254 <tcp_process+0x28c>)
 8012fe0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012fe4:	499c      	ldr	r1, [pc, #624]	; (8013258 <tcp_process+0x290>)
 8012fe6:	489d      	ldr	r0, [pc, #628]	; (801325c <tcp_process+0x294>)
 8012fe8:	f006 fc46 	bl	8019878 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012fec:	4b9c      	ldr	r3, [pc, #624]	; (8013260 <tcp_process+0x298>)
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	f003 0304 	and.w	r3, r3, #4
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d04e      	beq.n	8013096 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	7d1b      	ldrb	r3, [r3, #20]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d108      	bne.n	8013012 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013004:	4b97      	ldr	r3, [pc, #604]	; (8013264 <tcp_process+0x29c>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	429a      	cmp	r2, r3
 801300a:	d123      	bne.n	8013054 <tcp_process+0x8c>
        acceptable = 1;
 801300c:	2301      	movs	r3, #1
 801300e:	76fb      	strb	r3, [r7, #27]
 8013010:	e020      	b.n	8013054 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013016:	4b94      	ldr	r3, [pc, #592]	; (8013268 <tcp_process+0x2a0>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	429a      	cmp	r2, r3
 801301c:	d102      	bne.n	8013024 <tcp_process+0x5c>
        acceptable = 1;
 801301e:	2301      	movs	r3, #1
 8013020:	76fb      	strb	r3, [r7, #27]
 8013022:	e017      	b.n	8013054 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013024:	4b90      	ldr	r3, [pc, #576]	; (8013268 <tcp_process+0x2a0>)
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801302c:	1ad3      	subs	r3, r2, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	db10      	blt.n	8013054 <tcp_process+0x8c>
 8013032:	4b8d      	ldr	r3, [pc, #564]	; (8013268 <tcp_process+0x2a0>)
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801303a:	6879      	ldr	r1, [r7, #4]
 801303c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801303e:	440b      	add	r3, r1
 8013040:	1ad3      	subs	r3, r2, r3
 8013042:	2b00      	cmp	r3, #0
 8013044:	dc06      	bgt.n	8013054 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	8b5b      	ldrh	r3, [r3, #26]
 801304a:	f043 0302 	orr.w	r3, r3, #2
 801304e:	b29a      	uxth	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013054:	7efb      	ldrb	r3, [r7, #27]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d01b      	beq.n	8013092 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	7d1b      	ldrb	r3, [r3, #20]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d106      	bne.n	8013070 <tcp_process+0xa8>
 8013062:	4b7c      	ldr	r3, [pc, #496]	; (8013254 <tcp_process+0x28c>)
 8013064:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013068:	4980      	ldr	r1, [pc, #512]	; (801326c <tcp_process+0x2a4>)
 801306a:	487c      	ldr	r0, [pc, #496]	; (801325c <tcp_process+0x294>)
 801306c:	f006 fc04 	bl	8019878 <iprintf>
      recv_flags |= TF_RESET;
 8013070:	4b7f      	ldr	r3, [pc, #508]	; (8013270 <tcp_process+0x2a8>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f043 0308 	orr.w	r3, r3, #8
 8013078:	b2da      	uxtb	r2, r3
 801307a:	4b7d      	ldr	r3, [pc, #500]	; (8013270 <tcp_process+0x2a8>)
 801307c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	8b5b      	ldrh	r3, [r3, #26]
 8013082:	f023 0301 	bic.w	r3, r3, #1
 8013086:	b29a      	uxth	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801308c:	f06f 030d 	mvn.w	r3, #13
 8013090:	e37a      	b.n	8013788 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013092:	2300      	movs	r3, #0
 8013094:	e378      	b.n	8013788 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013096:	4b72      	ldr	r3, [pc, #456]	; (8013260 <tcp_process+0x298>)
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	f003 0302 	and.w	r3, r3, #2
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d010      	beq.n	80130c4 <tcp_process+0xfc>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	7d1b      	ldrb	r3, [r3, #20]
 80130a6:	2b02      	cmp	r3, #2
 80130a8:	d00c      	beq.n	80130c4 <tcp_process+0xfc>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	7d1b      	ldrb	r3, [r3, #20]
 80130ae:	2b03      	cmp	r3, #3
 80130b0:	d008      	beq.n	80130c4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	8b5b      	ldrh	r3, [r3, #26]
 80130b6:	f043 0302 	orr.w	r3, r3, #2
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80130c0:	2300      	movs	r3, #0
 80130c2:	e361      	b.n	8013788 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	8b5b      	ldrh	r3, [r3, #26]
 80130c8:	f003 0310 	and.w	r3, r3, #16
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d103      	bne.n	80130d8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80130d0:	4b68      	ldr	r3, [pc, #416]	; (8013274 <tcp_process+0x2ac>)
 80130d2:	681a      	ldr	r2, [r3, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f001 fc2f 	bl	801494c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	7d1b      	ldrb	r3, [r3, #20]
 80130f2:	3b02      	subs	r3, #2
 80130f4:	2b07      	cmp	r3, #7
 80130f6:	f200 8337 	bhi.w	8013768 <tcp_process+0x7a0>
 80130fa:	a201      	add	r2, pc, #4	; (adr r2, 8013100 <tcp_process+0x138>)
 80130fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013100:	08013121 	.word	0x08013121
 8013104:	08013351 	.word	0x08013351
 8013108:	080134c9 	.word	0x080134c9
 801310c:	080134f3 	.word	0x080134f3
 8013110:	08013617 	.word	0x08013617
 8013114:	080134c9 	.word	0x080134c9
 8013118:	080136a3 	.word	0x080136a3
 801311c:	08013733 	.word	0x08013733
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013120:	4b4f      	ldr	r3, [pc, #316]	; (8013260 <tcp_process+0x298>)
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	f003 0310 	and.w	r3, r3, #16
 8013128:	2b00      	cmp	r3, #0
 801312a:	f000 80e4 	beq.w	80132f6 <tcp_process+0x32e>
 801312e:	4b4c      	ldr	r3, [pc, #304]	; (8013260 <tcp_process+0x298>)
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	f003 0302 	and.w	r3, r3, #2
 8013136:	2b00      	cmp	r3, #0
 8013138:	f000 80dd 	beq.w	80132f6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013140:	1c5a      	adds	r2, r3, #1
 8013142:	4b48      	ldr	r3, [pc, #288]	; (8013264 <tcp_process+0x29c>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	f040 80d5 	bne.w	80132f6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801314c:	4b46      	ldr	r3, [pc, #280]	; (8013268 <tcp_process+0x2a0>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	1c5a      	adds	r2, r3, #1
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801315e:	4b41      	ldr	r3, [pc, #260]	; (8013264 <tcp_process+0x29c>)
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013166:	4b44      	ldr	r3, [pc, #272]	; (8013278 <tcp_process+0x2b0>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	89db      	ldrh	r3, [r3, #14]
 801316c:	b29a      	uxth	r2, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013180:	4b39      	ldr	r3, [pc, #228]	; (8013268 <tcp_process+0x2a0>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	1e5a      	subs	r2, r3, #1
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2204      	movs	r2, #4
 801318e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	3304      	adds	r3, #4
 8013198:	4618      	mov	r0, r3
 801319a:	f004 fe99 	bl	8017ed0 <ip4_route>
 801319e:	4601      	mov	r1, r0
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	3304      	adds	r3, #4
 80131a4:	461a      	mov	r2, r3
 80131a6:	4620      	mov	r0, r4
 80131a8:	f7ff f88c 	bl	80122c4 <tcp_eff_send_mss_netif>
 80131ac:	4603      	mov	r3, r0
 80131ae:	461a      	mov	r2, r3
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131b8:	009a      	lsls	r2, r3, #2
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131be:	005b      	lsls	r3, r3, #1
 80131c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80131c4:	428b      	cmp	r3, r1
 80131c6:	bf38      	it	cc
 80131c8:	460b      	movcc	r3, r1
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d204      	bcs.n	80131d8 <tcp_process+0x210>
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131d2:	009b      	lsls	r3, r3, #2
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	e00d      	b.n	80131f4 <tcp_process+0x22c>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131dc:	005b      	lsls	r3, r3, #1
 80131de:	f241 121c 	movw	r2, #4380	; 0x111c
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d904      	bls.n	80131f0 <tcp_process+0x228>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131ea:	005b      	lsls	r3, r3, #1
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	e001      	b.n	80131f4 <tcp_process+0x22c>
 80131f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013200:	2b00      	cmp	r3, #0
 8013202:	d106      	bne.n	8013212 <tcp_process+0x24a>
 8013204:	4b13      	ldr	r3, [pc, #76]	; (8013254 <tcp_process+0x28c>)
 8013206:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801320a:	491c      	ldr	r1, [pc, #112]	; (801327c <tcp_process+0x2b4>)
 801320c:	4813      	ldr	r0, [pc, #76]	; (801325c <tcp_process+0x294>)
 801320e:	f006 fb33 	bl	8019878 <iprintf>
        --pcb->snd_queuelen;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013218:	3b01      	subs	r3, #1
 801321a:	b29a      	uxth	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013226:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d12a      	bne.n	8013284 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013232:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d106      	bne.n	8013248 <tcp_process+0x280>
 801323a:	4b06      	ldr	r3, [pc, #24]	; (8013254 <tcp_process+0x28c>)
 801323c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013240:	490f      	ldr	r1, [pc, #60]	; (8013280 <tcp_process+0x2b8>)
 8013242:	4806      	ldr	r0, [pc, #24]	; (801325c <tcp_process+0x294>)
 8013244:	f006 fb18 	bl	8019878 <iprintf>
          pcb->unsent = rseg->next;
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	66da      	str	r2, [r3, #108]	; 0x6c
 8013250:	e01c      	b.n	801328c <tcp_process+0x2c4>
 8013252:	bf00      	nop
 8013254:	0801c128 	.word	0x0801c128
 8013258:	0801c360 	.word	0x0801c360
 801325c:	0801c174 	.word	0x0801c174
 8013260:	2000dadc 	.word	0x2000dadc
 8013264:	2000dad4 	.word	0x2000dad4
 8013268:	2000dad0 	.word	0x2000dad0
 801326c:	0801c37c 	.word	0x0801c37c
 8013270:	2000dadd 	.word	0x2000dadd
 8013274:	2000da98 	.word	0x2000da98
 8013278:	2000dac0 	.word	0x2000dac0
 801327c:	0801c39c 	.word	0x0801c39c
 8013280:	0801c3b4 	.word	0x0801c3b4
        } else {
          pcb->unacked = rseg->next;
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801328c:	69f8      	ldr	r0, [r7, #28]
 801328e:	f7fe fd22 	bl	8011cd6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013296:	2b00      	cmp	r3, #0
 8013298:	d104      	bne.n	80132a4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132a0:	861a      	strh	r2, [r3, #48]	; 0x30
 80132a2:	e006      	b.n	80132b2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d00a      	beq.n	80132d2 <tcp_process+0x30a>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	6910      	ldr	r0, [r2, #16]
 80132c6:	2200      	movs	r2, #0
 80132c8:	6879      	ldr	r1, [r7, #4]
 80132ca:	4798      	blx	r3
 80132cc:	4603      	mov	r3, r0
 80132ce:	76bb      	strb	r3, [r7, #26]
 80132d0:	e001      	b.n	80132d6 <tcp_process+0x30e>
 80132d2:	2300      	movs	r3, #0
 80132d4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80132d6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80132da:	f113 0f0d 	cmn.w	r3, #13
 80132de:	d102      	bne.n	80132e6 <tcp_process+0x31e>
          return ERR_ABRT;
 80132e0:	f06f 030c 	mvn.w	r3, #12
 80132e4:	e250      	b.n	8013788 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	8b5b      	ldrh	r3, [r3, #26]
 80132ea:	f043 0302 	orr.w	r3, r3, #2
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80132f4:	e23a      	b.n	801376c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80132f6:	4b98      	ldr	r3, [pc, #608]	; (8013558 <tcp_process+0x590>)
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	f003 0310 	and.w	r3, r3, #16
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f000 8234 	beq.w	801376c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013304:	4b95      	ldr	r3, [pc, #596]	; (801355c <tcp_process+0x594>)
 8013306:	6819      	ldr	r1, [r3, #0]
 8013308:	4b95      	ldr	r3, [pc, #596]	; (8013560 <tcp_process+0x598>)
 801330a:	881b      	ldrh	r3, [r3, #0]
 801330c:	461a      	mov	r2, r3
 801330e:	4b95      	ldr	r3, [pc, #596]	; (8013564 <tcp_process+0x59c>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013314:	4b94      	ldr	r3, [pc, #592]	; (8013568 <tcp_process+0x5a0>)
 8013316:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013318:	885b      	ldrh	r3, [r3, #2]
 801331a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801331c:	4a92      	ldr	r2, [pc, #584]	; (8013568 <tcp_process+0x5a0>)
 801331e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013320:	8812      	ldrh	r2, [r2, #0]
 8013322:	b292      	uxth	r2, r2
 8013324:	9202      	str	r2, [sp, #8]
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	4b90      	ldr	r3, [pc, #576]	; (801356c <tcp_process+0x5a4>)
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	4b90      	ldr	r3, [pc, #576]	; (8013570 <tcp_process+0x5a8>)
 801332e:	4602      	mov	r2, r0
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f002 fc85 	bl	8015c40 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801333c:	2b05      	cmp	r3, #5
 801333e:	f200 8215 	bhi.w	801376c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2200      	movs	r2, #0
 8013346:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f002 fa4f 	bl	80157ec <tcp_rexmit_rto>
      break;
 801334e:	e20d      	b.n	801376c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013350:	4b81      	ldr	r3, [pc, #516]	; (8013558 <tcp_process+0x590>)
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	f003 0310 	and.w	r3, r3, #16
 8013358:	2b00      	cmp	r3, #0
 801335a:	f000 80a1 	beq.w	80134a0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801335e:	4b7f      	ldr	r3, [pc, #508]	; (801355c <tcp_process+0x594>)
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013366:	1ad3      	subs	r3, r2, r3
 8013368:	3b01      	subs	r3, #1
 801336a:	2b00      	cmp	r3, #0
 801336c:	db7e      	blt.n	801346c <tcp_process+0x4a4>
 801336e:	4b7b      	ldr	r3, [pc, #492]	; (801355c <tcp_process+0x594>)
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	2b00      	cmp	r3, #0
 801337a:	dc77      	bgt.n	801346c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2204      	movs	r2, #4
 8013380:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013386:	2b00      	cmp	r3, #0
 8013388:	d102      	bne.n	8013390 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801338a:	23fa      	movs	r3, #250	; 0xfa
 801338c:	76bb      	strb	r3, [r7, #26]
 801338e:	e01d      	b.n	80133cc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013394:	699b      	ldr	r3, [r3, #24]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d106      	bne.n	80133a8 <tcp_process+0x3e0>
 801339a:	4b76      	ldr	r3, [pc, #472]	; (8013574 <tcp_process+0x5ac>)
 801339c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80133a0:	4975      	ldr	r1, [pc, #468]	; (8013578 <tcp_process+0x5b0>)
 80133a2:	4876      	ldr	r0, [pc, #472]	; (801357c <tcp_process+0x5b4>)
 80133a4:	f006 fa68 	bl	8019878 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133ac:	699b      	ldr	r3, [r3, #24]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d00a      	beq.n	80133c8 <tcp_process+0x400>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133b6:	699b      	ldr	r3, [r3, #24]
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	6910      	ldr	r0, [r2, #16]
 80133bc:	2200      	movs	r2, #0
 80133be:	6879      	ldr	r1, [r7, #4]
 80133c0:	4798      	blx	r3
 80133c2:	4603      	mov	r3, r0
 80133c4:	76bb      	strb	r3, [r7, #26]
 80133c6:	e001      	b.n	80133cc <tcp_process+0x404>
 80133c8:	23f0      	movs	r3, #240	; 0xf0
 80133ca:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80133cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d00a      	beq.n	80133ea <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80133d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80133d8:	f113 0f0d 	cmn.w	r3, #13
 80133dc:	d002      	beq.n	80133e4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7fd ff8e 	bl	8011300 <tcp_abort>
            }
            return ERR_ABRT;
 80133e4:	f06f 030c 	mvn.w	r3, #12
 80133e8:	e1ce      	b.n	8013788 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 fae0 	bl	80139b0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80133f0:	4b63      	ldr	r3, [pc, #396]	; (8013580 <tcp_process+0x5b8>)
 80133f2:	881b      	ldrh	r3, [r3, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d005      	beq.n	8013404 <tcp_process+0x43c>
            recv_acked--;
 80133f8:	4b61      	ldr	r3, [pc, #388]	; (8013580 <tcp_process+0x5b8>)
 80133fa:	881b      	ldrh	r3, [r3, #0]
 80133fc:	3b01      	subs	r3, #1
 80133fe:	b29a      	uxth	r2, r3
 8013400:	4b5f      	ldr	r3, [pc, #380]	; (8013580 <tcp_process+0x5b8>)
 8013402:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013408:	009a      	lsls	r2, r3, #2
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801340e:	005b      	lsls	r3, r3, #1
 8013410:	f241 111c 	movw	r1, #4380	; 0x111c
 8013414:	428b      	cmp	r3, r1
 8013416:	bf38      	it	cc
 8013418:	460b      	movcc	r3, r1
 801341a:	429a      	cmp	r2, r3
 801341c:	d204      	bcs.n	8013428 <tcp_process+0x460>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	b29b      	uxth	r3, r3
 8013426:	e00d      	b.n	8013444 <tcp_process+0x47c>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801342c:	005b      	lsls	r3, r3, #1
 801342e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013432:	4293      	cmp	r3, r2
 8013434:	d904      	bls.n	8013440 <tcp_process+0x478>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801343a:	005b      	lsls	r3, r3, #1
 801343c:	b29b      	uxth	r3, r3
 801343e:	e001      	b.n	8013444 <tcp_process+0x47c>
 8013440:	f241 131c 	movw	r3, #4380	; 0x111c
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801344a:	4b4e      	ldr	r3, [pc, #312]	; (8013584 <tcp_process+0x5bc>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	f003 0320 	and.w	r3, r3, #32
 8013452:	2b00      	cmp	r3, #0
 8013454:	d037      	beq.n	80134c6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	8b5b      	ldrh	r3, [r3, #26]
 801345a:	f043 0302 	orr.w	r3, r3, #2
 801345e:	b29a      	uxth	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2207      	movs	r2, #7
 8013468:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801346a:	e02c      	b.n	80134c6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801346c:	4b3b      	ldr	r3, [pc, #236]	; (801355c <tcp_process+0x594>)
 801346e:	6819      	ldr	r1, [r3, #0]
 8013470:	4b3b      	ldr	r3, [pc, #236]	; (8013560 <tcp_process+0x598>)
 8013472:	881b      	ldrh	r3, [r3, #0]
 8013474:	461a      	mov	r2, r3
 8013476:	4b3b      	ldr	r3, [pc, #236]	; (8013564 <tcp_process+0x59c>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801347c:	4b3a      	ldr	r3, [pc, #232]	; (8013568 <tcp_process+0x5a0>)
 801347e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013480:	885b      	ldrh	r3, [r3, #2]
 8013482:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013484:	4a38      	ldr	r2, [pc, #224]	; (8013568 <tcp_process+0x5a0>)
 8013486:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013488:	8812      	ldrh	r2, [r2, #0]
 801348a:	b292      	uxth	r2, r2
 801348c:	9202      	str	r2, [sp, #8]
 801348e:	9301      	str	r3, [sp, #4]
 8013490:	4b36      	ldr	r3, [pc, #216]	; (801356c <tcp_process+0x5a4>)
 8013492:	9300      	str	r3, [sp, #0]
 8013494:	4b36      	ldr	r3, [pc, #216]	; (8013570 <tcp_process+0x5a8>)
 8013496:	4602      	mov	r2, r0
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f002 fbd1 	bl	8015c40 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801349e:	e167      	b.n	8013770 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80134a0:	4b2d      	ldr	r3, [pc, #180]	; (8013558 <tcp_process+0x590>)
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	f003 0302 	and.w	r3, r3, #2
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f000 8161 	beq.w	8013770 <tcp_process+0x7a8>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b2:	1e5a      	subs	r2, r3, #1
 80134b4:	4b2b      	ldr	r3, [pc, #172]	; (8013564 <tcp_process+0x59c>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	f040 8159 	bne.w	8013770 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f002 f9b6 	bl	8015830 <tcp_rexmit>
      break;
 80134c4:	e154      	b.n	8013770 <tcp_process+0x7a8>
 80134c6:	e153      	b.n	8013770 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f000 fa71 	bl	80139b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80134ce:	4b2d      	ldr	r3, [pc, #180]	; (8013584 <tcp_process+0x5bc>)
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	f003 0320 	and.w	r3, r3, #32
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	f000 814c 	beq.w	8013774 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	8b5b      	ldrh	r3, [r3, #26]
 80134e0:	f043 0302 	orr.w	r3, r3, #2
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2207      	movs	r2, #7
 80134ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80134f0:	e140      	b.n	8013774 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f000 fa5c 	bl	80139b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80134f8:	4b22      	ldr	r3, [pc, #136]	; (8013584 <tcp_process+0x5bc>)
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	f003 0320 	and.w	r3, r3, #32
 8013500:	2b00      	cmp	r3, #0
 8013502:	d071      	beq.n	80135e8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013504:	4b14      	ldr	r3, [pc, #80]	; (8013558 <tcp_process+0x590>)
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	f003 0310 	and.w	r3, r3, #16
 801350c:	2b00      	cmp	r3, #0
 801350e:	d060      	beq.n	80135d2 <tcp_process+0x60a>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013514:	4b11      	ldr	r3, [pc, #68]	; (801355c <tcp_process+0x594>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	429a      	cmp	r2, r3
 801351a:	d15a      	bne.n	80135d2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013520:	2b00      	cmp	r3, #0
 8013522:	d156      	bne.n	80135d2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	8b5b      	ldrh	r3, [r3, #26]
 8013528:	f043 0302 	orr.w	r3, r3, #2
 801352c:	b29a      	uxth	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7fe fdbc 	bl	80120b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013538:	4b13      	ldr	r3, [pc, #76]	; (8013588 <tcp_process+0x5c0>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	429a      	cmp	r2, r3
 8013540:	d105      	bne.n	801354e <tcp_process+0x586>
 8013542:	4b11      	ldr	r3, [pc, #68]	; (8013588 <tcp_process+0x5c0>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	4a0f      	ldr	r2, [pc, #60]	; (8013588 <tcp_process+0x5c0>)
 801354a:	6013      	str	r3, [r2, #0]
 801354c:	e02e      	b.n	80135ac <tcp_process+0x5e4>
 801354e:	4b0e      	ldr	r3, [pc, #56]	; (8013588 <tcp_process+0x5c0>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	617b      	str	r3, [r7, #20]
 8013554:	e027      	b.n	80135a6 <tcp_process+0x5de>
 8013556:	bf00      	nop
 8013558:	2000dadc 	.word	0x2000dadc
 801355c:	2000dad4 	.word	0x2000dad4
 8013560:	2000dada 	.word	0x2000dada
 8013564:	2000dad0 	.word	0x2000dad0
 8013568:	2000dac0 	.word	0x2000dac0
 801356c:	2000a354 	.word	0x2000a354
 8013570:	2000a358 	.word	0x2000a358
 8013574:	0801c128 	.word	0x0801c128
 8013578:	0801c3c8 	.word	0x0801c3c8
 801357c:	0801c174 	.word	0x0801c174
 8013580:	2000dad8 	.word	0x2000dad8
 8013584:	2000dadd 	.word	0x2000dadd
 8013588:	2000daa4 	.word	0x2000daa4
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	429a      	cmp	r2, r3
 8013594:	d104      	bne.n	80135a0 <tcp_process+0x5d8>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	68da      	ldr	r2, [r3, #12]
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	60da      	str	r2, [r3, #12]
 801359e:	e005      	b.n	80135ac <tcp_process+0x5e4>
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	617b      	str	r3, [r7, #20]
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d1ef      	bne.n	801358c <tcp_process+0x5c4>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2200      	movs	r2, #0
 80135b0:	60da      	str	r2, [r3, #12]
 80135b2:	4b77      	ldr	r3, [pc, #476]	; (8013790 <tcp_process+0x7c8>)
 80135b4:	2201      	movs	r2, #1
 80135b6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	220a      	movs	r2, #10
 80135bc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80135be:	4b75      	ldr	r3, [pc, #468]	; (8013794 <tcp_process+0x7cc>)
 80135c0:	681a      	ldr	r2, [r3, #0]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	60da      	str	r2, [r3, #12]
 80135c6:	4a73      	ldr	r2, [pc, #460]	; (8013794 <tcp_process+0x7cc>)
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6013      	str	r3, [r2, #0]
 80135cc:	f002 fcfa 	bl	8015fc4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80135d0:	e0d2      	b.n	8013778 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	8b5b      	ldrh	r3, [r3, #26]
 80135d6:	f043 0302 	orr.w	r3, r3, #2
 80135da:	b29a      	uxth	r2, r3
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2208      	movs	r2, #8
 80135e4:	751a      	strb	r2, [r3, #20]
      break;
 80135e6:	e0c7      	b.n	8013778 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135e8:	4b6b      	ldr	r3, [pc, #428]	; (8013798 <tcp_process+0x7d0>)
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	f003 0310 	and.w	r3, r3, #16
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	f000 80c1 	beq.w	8013778 <tcp_process+0x7b0>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135fa:	4b68      	ldr	r3, [pc, #416]	; (801379c <tcp_process+0x7d4>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	429a      	cmp	r2, r3
 8013600:	f040 80ba 	bne.w	8013778 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013608:	2b00      	cmp	r3, #0
 801360a:	f040 80b5 	bne.w	8013778 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2206      	movs	r2, #6
 8013612:	751a      	strb	r2, [r3, #20]
      break;
 8013614:	e0b0      	b.n	8013778 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f000 f9ca 	bl	80139b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801361c:	4b60      	ldr	r3, [pc, #384]	; (80137a0 <tcp_process+0x7d8>)
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	f003 0320 	and.w	r3, r3, #32
 8013624:	2b00      	cmp	r3, #0
 8013626:	f000 80a9 	beq.w	801377c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	8b5b      	ldrh	r3, [r3, #26]
 801362e:	f043 0302 	orr.w	r3, r3, #2
 8013632:	b29a      	uxth	r2, r3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f7fe fd39 	bl	80120b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801363e:	4b59      	ldr	r3, [pc, #356]	; (80137a4 <tcp_process+0x7dc>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	429a      	cmp	r2, r3
 8013646:	d105      	bne.n	8013654 <tcp_process+0x68c>
 8013648:	4b56      	ldr	r3, [pc, #344]	; (80137a4 <tcp_process+0x7dc>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	4a55      	ldr	r2, [pc, #340]	; (80137a4 <tcp_process+0x7dc>)
 8013650:	6013      	str	r3, [r2, #0]
 8013652:	e013      	b.n	801367c <tcp_process+0x6b4>
 8013654:	4b53      	ldr	r3, [pc, #332]	; (80137a4 <tcp_process+0x7dc>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	613b      	str	r3, [r7, #16]
 801365a:	e00c      	b.n	8013676 <tcp_process+0x6ae>
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	68db      	ldr	r3, [r3, #12]
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	429a      	cmp	r2, r3
 8013664:	d104      	bne.n	8013670 <tcp_process+0x6a8>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	68da      	ldr	r2, [r3, #12]
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	60da      	str	r2, [r3, #12]
 801366e:	e005      	b.n	801367c <tcp_process+0x6b4>
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	613b      	str	r3, [r7, #16]
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d1ef      	bne.n	801365c <tcp_process+0x694>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2200      	movs	r2, #0
 8013680:	60da      	str	r2, [r3, #12]
 8013682:	4b43      	ldr	r3, [pc, #268]	; (8013790 <tcp_process+0x7c8>)
 8013684:	2201      	movs	r2, #1
 8013686:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	220a      	movs	r2, #10
 801368c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801368e:	4b41      	ldr	r3, [pc, #260]	; (8013794 <tcp_process+0x7cc>)
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	60da      	str	r2, [r3, #12]
 8013696:	4a3f      	ldr	r2, [pc, #252]	; (8013794 <tcp_process+0x7cc>)
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6013      	str	r3, [r2, #0]
 801369c:	f002 fc92 	bl	8015fc4 <tcp_timer_needed>
      }
      break;
 80136a0:	e06c      	b.n	801377c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f000 f984 	bl	80139b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80136a8:	4b3b      	ldr	r3, [pc, #236]	; (8013798 <tcp_process+0x7d0>)
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	f003 0310 	and.w	r3, r3, #16
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d065      	beq.n	8013780 <tcp_process+0x7b8>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80136b8:	4b38      	ldr	r3, [pc, #224]	; (801379c <tcp_process+0x7d4>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d15f      	bne.n	8013780 <tcp_process+0x7b8>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d15b      	bne.n	8013780 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f7fe fcf1 	bl	80120b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80136ce:	4b35      	ldr	r3, [pc, #212]	; (80137a4 <tcp_process+0x7dc>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d105      	bne.n	80136e4 <tcp_process+0x71c>
 80136d8:	4b32      	ldr	r3, [pc, #200]	; (80137a4 <tcp_process+0x7dc>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	4a31      	ldr	r2, [pc, #196]	; (80137a4 <tcp_process+0x7dc>)
 80136e0:	6013      	str	r3, [r2, #0]
 80136e2:	e013      	b.n	801370c <tcp_process+0x744>
 80136e4:	4b2f      	ldr	r3, [pc, #188]	; (80137a4 <tcp_process+0x7dc>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	60fb      	str	r3, [r7, #12]
 80136ea:	e00c      	b.n	8013706 <tcp_process+0x73e>
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d104      	bne.n	8013700 <tcp_process+0x738>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	68da      	ldr	r2, [r3, #12]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	60da      	str	r2, [r3, #12]
 80136fe:	e005      	b.n	801370c <tcp_process+0x744>
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	68db      	ldr	r3, [r3, #12]
 8013704:	60fb      	str	r3, [r7, #12]
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d1ef      	bne.n	80136ec <tcp_process+0x724>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2200      	movs	r2, #0
 8013710:	60da      	str	r2, [r3, #12]
 8013712:	4b1f      	ldr	r3, [pc, #124]	; (8013790 <tcp_process+0x7c8>)
 8013714:	2201      	movs	r2, #1
 8013716:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	220a      	movs	r2, #10
 801371c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801371e:	4b1d      	ldr	r3, [pc, #116]	; (8013794 <tcp_process+0x7cc>)
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	60da      	str	r2, [r3, #12]
 8013726:	4a1b      	ldr	r2, [pc, #108]	; (8013794 <tcp_process+0x7cc>)
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6013      	str	r3, [r2, #0]
 801372c:	f002 fc4a 	bl	8015fc4 <tcp_timer_needed>
      }
      break;
 8013730:	e026      	b.n	8013780 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f000 f93c 	bl	80139b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013738:	4b17      	ldr	r3, [pc, #92]	; (8013798 <tcp_process+0x7d0>)
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	f003 0310 	and.w	r3, r3, #16
 8013740:	2b00      	cmp	r3, #0
 8013742:	d01f      	beq.n	8013784 <tcp_process+0x7bc>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013748:	4b14      	ldr	r3, [pc, #80]	; (801379c <tcp_process+0x7d4>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	429a      	cmp	r2, r3
 801374e:	d119      	bne.n	8013784 <tcp_process+0x7bc>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013754:	2b00      	cmp	r3, #0
 8013756:	d115      	bne.n	8013784 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013758:	4b11      	ldr	r3, [pc, #68]	; (80137a0 <tcp_process+0x7d8>)
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	f043 0310 	orr.w	r3, r3, #16
 8013760:	b2da      	uxtb	r2, r3
 8013762:	4b0f      	ldr	r3, [pc, #60]	; (80137a0 <tcp_process+0x7d8>)
 8013764:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013766:	e00d      	b.n	8013784 <tcp_process+0x7bc>
    default:
      break;
 8013768:	bf00      	nop
 801376a:	e00c      	b.n	8013786 <tcp_process+0x7be>
      break;
 801376c:	bf00      	nop
 801376e:	e00a      	b.n	8013786 <tcp_process+0x7be>
      break;
 8013770:	bf00      	nop
 8013772:	e008      	b.n	8013786 <tcp_process+0x7be>
      break;
 8013774:	bf00      	nop
 8013776:	e006      	b.n	8013786 <tcp_process+0x7be>
      break;
 8013778:	bf00      	nop
 801377a:	e004      	b.n	8013786 <tcp_process+0x7be>
      break;
 801377c:	bf00      	nop
 801377e:	e002      	b.n	8013786 <tcp_process+0x7be>
      break;
 8013780:	bf00      	nop
 8013782:	e000      	b.n	8013786 <tcp_process+0x7be>
      break;
 8013784:	bf00      	nop
  }
  return ERR_OK;
 8013786:	2300      	movs	r3, #0
}
 8013788:	4618      	mov	r0, r3
 801378a:	3724      	adds	r7, #36	; 0x24
 801378c:	46bd      	mov	sp, r7
 801378e:	bd90      	pop	{r4, r7, pc}
 8013790:	2000daac 	.word	0x2000daac
 8013794:	2000daa8 	.word	0x2000daa8
 8013798:	2000dadc 	.word	0x2000dadc
 801379c:	2000dad4 	.word	0x2000dad4
 80137a0:	2000dadd 	.word	0x2000dadd
 80137a4:	2000daa4 	.word	0x2000daa4

080137a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80137a8:	b590      	push	{r4, r7, lr}
 80137aa:	b085      	sub	sp, #20
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d106      	bne.n	80137c6 <tcp_oos_insert_segment+0x1e>
 80137b8:	4b3b      	ldr	r3, [pc, #236]	; (80138a8 <tcp_oos_insert_segment+0x100>)
 80137ba:	f240 421f 	movw	r2, #1055	; 0x41f
 80137be:	493b      	ldr	r1, [pc, #236]	; (80138ac <tcp_oos_insert_segment+0x104>)
 80137c0:	483b      	ldr	r0, [pc, #236]	; (80138b0 <tcp_oos_insert_segment+0x108>)
 80137c2:	f006 f859 	bl	8019878 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	899b      	ldrh	r3, [r3, #12]
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fb fb6e 	bl	800eeb0 <lwip_htons>
 80137d4:	4603      	mov	r3, r0
 80137d6:	b2db      	uxtb	r3, r3
 80137d8:	f003 0301 	and.w	r3, r3, #1
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d028      	beq.n	8013832 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80137e0:	6838      	ldr	r0, [r7, #0]
 80137e2:	f7fe fa63 	bl	8011cac <tcp_segs_free>
    next = NULL;
 80137e6:	2300      	movs	r3, #0
 80137e8:	603b      	str	r3, [r7, #0]
 80137ea:	e056      	b.n	801389a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	899b      	ldrh	r3, [r3, #12]
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7fb fb5b 	bl	800eeb0 <lwip_htons>
 80137fa:	4603      	mov	r3, r0
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	f003 0301 	and.w	r3, r3, #1
 8013802:	2b00      	cmp	r3, #0
 8013804:	d00d      	beq.n	8013822 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	899b      	ldrh	r3, [r3, #12]
 801380c:	b29c      	uxth	r4, r3
 801380e:	2001      	movs	r0, #1
 8013810:	f7fb fb4e 	bl	800eeb0 <lwip_htons>
 8013814:	4603      	mov	r3, r0
 8013816:	461a      	mov	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	4322      	orrs	r2, r4
 801381e:	b292      	uxth	r2, r2
 8013820:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	f7fe fa52 	bl	8011cd6 <tcp_seg_free>
    while (next &&
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d00e      	beq.n	8013856 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	891b      	ldrh	r3, [r3, #8]
 801383c:	461a      	mov	r2, r3
 801383e:	4b1d      	ldr	r3, [pc, #116]	; (80138b4 <tcp_oos_insert_segment+0x10c>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	441a      	add	r2, r3
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	6839      	ldr	r1, [r7, #0]
 801384c:	8909      	ldrh	r1, [r1, #8]
 801384e:	440b      	add	r3, r1
 8013850:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013852:	2b00      	cmp	r3, #0
 8013854:	daca      	bge.n	80137ec <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d01e      	beq.n	801389a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	891b      	ldrh	r3, [r3, #8]
 8013860:	461a      	mov	r2, r3
 8013862:	4b14      	ldr	r3, [pc, #80]	; (80138b4 <tcp_oos_insert_segment+0x10c>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	441a      	add	r2, r3
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013870:	2b00      	cmp	r3, #0
 8013872:	dd12      	ble.n	801389a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	b29a      	uxth	r2, r3
 801387c:	4b0d      	ldr	r3, [pc, #52]	; (80138b4 <tcp_oos_insert_segment+0x10c>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	b29b      	uxth	r3, r3
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	b29a      	uxth	r2, r3
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685a      	ldr	r2, [r3, #4]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	891b      	ldrh	r3, [r3, #8]
 8013892:	4619      	mov	r1, r3
 8013894:	4610      	mov	r0, r2
 8013896:	f7fc fd77 	bl	8010388 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	683a      	ldr	r2, [r7, #0]
 801389e:	601a      	str	r2, [r3, #0]
}
 80138a0:	bf00      	nop
 80138a2:	3714      	adds	r7, #20
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd90      	pop	{r4, r7, pc}
 80138a8:	0801c128 	.word	0x0801c128
 80138ac:	0801c3e8 	.word	0x0801c3e8
 80138b0:	0801c174 	.word	0x0801c174
 80138b4:	2000dad0 	.word	0x2000dad0

080138b8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80138b8:	b5b0      	push	{r4, r5, r7, lr}
 80138ba:	b086      	sub	sp, #24
 80138bc:	af00      	add	r7, sp, #0
 80138be:	60f8      	str	r0, [r7, #12]
 80138c0:	60b9      	str	r1, [r7, #8]
 80138c2:	607a      	str	r2, [r7, #4]
 80138c4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80138c6:	e03e      	b.n	8013946 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7fc ff6a 	bl	80107b0 <pbuf_clen>
 80138dc:	4603      	mov	r3, r0
 80138de:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138e6:	8a7a      	ldrh	r2, [r7, #18]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d906      	bls.n	80138fa <tcp_free_acked_segments+0x42>
 80138ec:	4b2a      	ldr	r3, [pc, #168]	; (8013998 <tcp_free_acked_segments+0xe0>)
 80138ee:	f240 4257 	movw	r2, #1111	; 0x457
 80138f2:	492a      	ldr	r1, [pc, #168]	; (801399c <tcp_free_acked_segments+0xe4>)
 80138f4:	482a      	ldr	r0, [pc, #168]	; (80139a0 <tcp_free_acked_segments+0xe8>)
 80138f6:	f005 ffbf 	bl	8019878 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013900:	8a7b      	ldrh	r3, [r7, #18]
 8013902:	1ad3      	subs	r3, r2, r3
 8013904:	b29a      	uxth	r2, r3
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	891a      	ldrh	r2, [r3, #8]
 8013910:	4b24      	ldr	r3, [pc, #144]	; (80139a4 <tcp_free_acked_segments+0xec>)
 8013912:	881b      	ldrh	r3, [r3, #0]
 8013914:	4413      	add	r3, r2
 8013916:	b29a      	uxth	r2, r3
 8013918:	4b22      	ldr	r3, [pc, #136]	; (80139a4 <tcp_free_acked_segments+0xec>)
 801391a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801391c:	6978      	ldr	r0, [r7, #20]
 801391e:	f7fe f9da 	bl	8011cd6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00c      	beq.n	8013946 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d109      	bne.n	8013946 <tcp_free_acked_segments+0x8e>
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d106      	bne.n	8013946 <tcp_free_acked_segments+0x8e>
 8013938:	4b17      	ldr	r3, [pc, #92]	; (8013998 <tcp_free_acked_segments+0xe0>)
 801393a:	f240 4261 	movw	r2, #1121	; 0x461
 801393e:	491a      	ldr	r1, [pc, #104]	; (80139a8 <tcp_free_acked_segments+0xf0>)
 8013940:	4817      	ldr	r0, [pc, #92]	; (80139a0 <tcp_free_acked_segments+0xe8>)
 8013942:	f005 ff99 	bl	8019878 <iprintf>
  while (seg_list != NULL &&
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d020      	beq.n	801398e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	4618      	mov	r0, r3
 8013954:	f7fb fac1 	bl	800eeda <lwip_htonl>
 8013958:	4604      	mov	r4, r0
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	891b      	ldrh	r3, [r3, #8]
 801395e:	461d      	mov	r5, r3
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	899b      	ldrh	r3, [r3, #12]
 8013966:	b29b      	uxth	r3, r3
 8013968:	4618      	mov	r0, r3
 801396a:	f7fb faa1 	bl	800eeb0 <lwip_htons>
 801396e:	4603      	mov	r3, r0
 8013970:	b2db      	uxtb	r3, r3
 8013972:	f003 0303 	and.w	r3, r3, #3
 8013976:	2b00      	cmp	r3, #0
 8013978:	d001      	beq.n	801397e <tcp_free_acked_segments+0xc6>
 801397a:	2301      	movs	r3, #1
 801397c:	e000      	b.n	8013980 <tcp_free_acked_segments+0xc8>
 801397e:	2300      	movs	r3, #0
 8013980:	442b      	add	r3, r5
 8013982:	18e2      	adds	r2, r4, r3
 8013984:	4b09      	ldr	r3, [pc, #36]	; (80139ac <tcp_free_acked_segments+0xf4>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801398a:	2b00      	cmp	r3, #0
 801398c:	dd9c      	ble.n	80138c8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801398e:	68bb      	ldr	r3, [r7, #8]
}
 8013990:	4618      	mov	r0, r3
 8013992:	3718      	adds	r7, #24
 8013994:	46bd      	mov	sp, r7
 8013996:	bdb0      	pop	{r4, r5, r7, pc}
 8013998:	0801c128 	.word	0x0801c128
 801399c:	0801c410 	.word	0x0801c410
 80139a0:	0801c174 	.word	0x0801c174
 80139a4:	2000dad8 	.word	0x2000dad8
 80139a8:	0801c438 	.word	0x0801c438
 80139ac:	2000dad4 	.word	0x2000dad4

080139b0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80139b0:	b5b0      	push	{r4, r5, r7, lr}
 80139b2:	b094      	sub	sp, #80	; 0x50
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80139b8:	2300      	movs	r3, #0
 80139ba:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d106      	bne.n	80139d0 <tcp_receive+0x20>
 80139c2:	4b91      	ldr	r3, [pc, #580]	; (8013c08 <tcp_receive+0x258>)
 80139c4:	f240 427b 	movw	r2, #1147	; 0x47b
 80139c8:	4990      	ldr	r1, [pc, #576]	; (8013c0c <tcp_receive+0x25c>)
 80139ca:	4891      	ldr	r0, [pc, #580]	; (8013c10 <tcp_receive+0x260>)
 80139cc:	f005 ff54 	bl	8019878 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	7d1b      	ldrb	r3, [r3, #20]
 80139d4:	2b03      	cmp	r3, #3
 80139d6:	d806      	bhi.n	80139e6 <tcp_receive+0x36>
 80139d8:	4b8b      	ldr	r3, [pc, #556]	; (8013c08 <tcp_receive+0x258>)
 80139da:	f240 427c 	movw	r2, #1148	; 0x47c
 80139de:	498d      	ldr	r1, [pc, #564]	; (8013c14 <tcp_receive+0x264>)
 80139e0:	488b      	ldr	r0, [pc, #556]	; (8013c10 <tcp_receive+0x260>)
 80139e2:	f005 ff49 	bl	8019878 <iprintf>

  if (flags & TCP_ACK) {
 80139e6:	4b8c      	ldr	r3, [pc, #560]	; (8013c18 <tcp_receive+0x268>)
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	f003 0310 	and.w	r3, r3, #16
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f000 8264 	beq.w	8013ebc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80139fa:	461a      	mov	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a00:	4413      	add	r3, r2
 8013a02:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a08:	4b84      	ldr	r3, [pc, #528]	; (8013c1c <tcp_receive+0x26c>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	1ad3      	subs	r3, r2, r3
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	db1b      	blt.n	8013a4a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a16:	4b81      	ldr	r3, [pc, #516]	; (8013c1c <tcp_receive+0x26c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d106      	bne.n	8013a2c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013a22:	4b7f      	ldr	r3, [pc, #508]	; (8013c20 <tcp_receive+0x270>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	db0e      	blt.n	8013a4a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013a30:	4b7b      	ldr	r3, [pc, #492]	; (8013c20 <tcp_receive+0x270>)
 8013a32:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d125      	bne.n	8013a84 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013a38:	4b7a      	ldr	r3, [pc, #488]	; (8013c24 <tcp_receive+0x274>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	89db      	ldrh	r3, [r3, #14]
 8013a3e:	b29a      	uxth	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d91c      	bls.n	8013a84 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013a4a:	4b76      	ldr	r3, [pc, #472]	; (8013c24 <tcp_receive+0x274>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	89db      	ldrh	r3, [r3, #14]
 8013a50:	b29a      	uxth	r2, r3
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d205      	bcs.n	8013a74 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013a74:	4b69      	ldr	r3, [pc, #420]	; (8013c1c <tcp_receive+0x26c>)
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013a7c:	4b68      	ldr	r3, [pc, #416]	; (8013c20 <tcp_receive+0x270>)
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013a84:	4b66      	ldr	r3, [pc, #408]	; (8013c20 <tcp_receive+0x270>)
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a8c:	1ad3      	subs	r3, r2, r3
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	dc58      	bgt.n	8013b44 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013a92:	4b65      	ldr	r3, [pc, #404]	; (8013c28 <tcp_receive+0x278>)
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d14b      	bne.n	8013b32 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013aa4:	4413      	add	r3, r2
 8013aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d142      	bne.n	8013b32 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	db3d      	blt.n	8013b32 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013aba:	4b59      	ldr	r3, [pc, #356]	; (8013c20 <tcp_receive+0x270>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d137      	bne.n	8013b32 <tcp_receive+0x182>
              found_dupack = 1;
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013acc:	2bff      	cmp	r3, #255	; 0xff
 8013ace:	d007      	beq.n	8013ae0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	b2da      	uxtb	r2, r3
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013ae6:	2b03      	cmp	r3, #3
 8013ae8:	d91b      	bls.n	8013b22 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013af4:	4413      	add	r3, r2
 8013af6:	b29a      	uxth	r2, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d30a      	bcc.n	8013b18 <tcp_receive+0x168>
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b0c:	4413      	add	r3, r2
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013b16:	e004      	b.n	8013b22 <tcp_receive+0x172>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013b28:	2b02      	cmp	r3, #2
 8013b2a:	d902      	bls.n	8013b32 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f001 feeb 	bl	8015908 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	f040 8161 	bne.w	8013dfc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013b42:	e15b      	b.n	8013dfc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013b44:	4b36      	ldr	r3, [pc, #216]	; (8013c20 <tcp_receive+0x270>)
 8013b46:	681a      	ldr	r2, [r3, #0]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b4c:	1ad3      	subs	r3, r2, r3
 8013b4e:	3b01      	subs	r3, #1
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f2c0 814e 	blt.w	8013df2 <tcp_receive+0x442>
 8013b56:	4b32      	ldr	r3, [pc, #200]	; (8013c20 <tcp_receive+0x270>)
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b5e:	1ad3      	subs	r3, r2, r3
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f300 8146 	bgt.w	8013df2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8b5b      	ldrh	r3, [r3, #26]
 8013b6a:	f003 0304 	and.w	r3, r3, #4
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d010      	beq.n	8013b94 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	8b5b      	ldrh	r3, [r3, #26]
 8013b76:	f023 0304 	bic.w	r3, r3, #4
 8013b7a:	b29a      	uxth	r2, r3
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2200      	movs	r2, #0
 8013b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ba2:	10db      	asrs	r3, r3, #3
 8013ba4:	b21b      	sxth	r3, r3
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013bae:	b29b      	uxth	r3, r3
 8013bb0:	4413      	add	r3, r2
 8013bb2:	b29b      	uxth	r3, r3
 8013bb4:	b21a      	sxth	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013bbc:	4b18      	ldr	r3, [pc, #96]	; (8013c20 <tcp_receive+0x270>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	b29a      	uxth	r2, r3
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	1ad3      	subs	r3, r2, r3
 8013bca:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013bd4:	4b12      	ldr	r3, [pc, #72]	; (8013c20 <tcp_receive+0x270>)
 8013bd6:	681a      	ldr	r2, [r3, #0]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	7d1b      	ldrb	r3, [r3, #20]
 8013be0:	2b03      	cmp	r3, #3
 8013be2:	f240 8097 	bls.w	8013d14 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d245      	bcs.n	8013c82 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	8b5b      	ldrh	r3, [r3, #26]
 8013bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d014      	beq.n	8013c2c <tcp_receive+0x27c>
 8013c02:	2301      	movs	r3, #1
 8013c04:	e013      	b.n	8013c2e <tcp_receive+0x27e>
 8013c06:	bf00      	nop
 8013c08:	0801c128 	.word	0x0801c128
 8013c0c:	0801c458 	.word	0x0801c458
 8013c10:	0801c174 	.word	0x0801c174
 8013c14:	0801c474 	.word	0x0801c474
 8013c18:	2000dadc 	.word	0x2000dadc
 8013c1c:	2000dad0 	.word	0x2000dad0
 8013c20:	2000dad4 	.word	0x2000dad4
 8013c24:	2000dac0 	.word	0x2000dac0
 8013c28:	2000dada 	.word	0x2000dada
 8013c2c:	2302      	movs	r3, #2
 8013c2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013c32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c3c:	fb12 f303 	smulbb	r3, r2, r3
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013c44:	4293      	cmp	r3, r2
 8013c46:	bf28      	it	cs
 8013c48:	4613      	movcs	r3, r2
 8013c4a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013c52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c54:	4413      	add	r3, r2
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d309      	bcc.n	8013c76 <tcp_receive+0x2c6>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013c68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c6a:	4413      	add	r3, r2
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013c74:	e04e      	b.n	8013d14 <tcp_receive+0x364>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013c80:	e048      	b.n	8013d14 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013c88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013c8a:	4413      	add	r3, r2
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d309      	bcc.n	8013cac <tcp_receive+0x2fc>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ca0:	4413      	add	r3, r2
 8013ca2:	b29a      	uxth	r2, r3
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013caa:	e004      	b.n	8013cb6 <tcp_receive+0x306>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d326      	bcc.n	8013d14 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cd2:	1ad3      	subs	r3, r2, r3
 8013cd4:	b29a      	uxth	r2, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ce6:	4413      	add	r3, r2
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d30a      	bcc.n	8013d0a <tcp_receive+0x35a>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cfe:	4413      	add	r3, r2
 8013d00:	b29a      	uxth	r2, r3
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d08:	e004      	b.n	8013d14 <tcp_receive+0x364>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d1c:	4a98      	ldr	r2, [pc, #608]	; (8013f80 <tcp_receive+0x5d0>)
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f7ff fdca 	bl	80138b8 <tcp_free_acked_segments>
 8013d24:	4602      	mov	r2, r0
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d32:	4a94      	ldr	r2, [pc, #592]	; (8013f84 <tcp_receive+0x5d4>)
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7ff fdbf 	bl	80138b8 <tcp_free_acked_segments>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d104      	bne.n	8013d52 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d4e:	861a      	strh	r2, [r3, #48]	; 0x30
 8013d50:	e002      	b.n	8013d58 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2200      	movs	r2, #0
 8013d56:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d103      	bne.n	8013d6e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013d74:	4b84      	ldr	r3, [pc, #528]	; (8013f88 <tcp_receive+0x5d8>)
 8013d76:	881b      	ldrh	r3, [r3, #0]
 8013d78:	4413      	add	r3, r2
 8013d7a:	b29a      	uxth	r2, r3
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	8b5b      	ldrh	r3, [r3, #26]
 8013d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d035      	beq.n	8013dfa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d118      	bne.n	8013dc8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00c      	beq.n	8013db8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013da6:	68db      	ldr	r3, [r3, #12]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fb f895 	bl	800eeda <lwip_htonl>
 8013db0:	4603      	mov	r3, r0
 8013db2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	dc20      	bgt.n	8013dfa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	8b5b      	ldrh	r3, [r3, #26]
 8013dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013dc6:	e018      	b.n	8013dfa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7fb f880 	bl	800eeda <lwip_htonl>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	1ae3      	subs	r3, r4, r3
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	dc0b      	bgt.n	8013dfa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	8b5b      	ldrh	r3, [r3, #26]
 8013de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013df0:	e003      	b.n	8013dfa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f001 ff76 	bl	8015ce4 <tcp_send_empty_ack>
 8013df8:	e000      	b.n	8013dfc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013dfa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d05b      	beq.n	8013ebc <tcp_receive+0x50c>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e08:	4b60      	ldr	r3, [pc, #384]	; (8013f8c <tcp_receive+0x5dc>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	1ad3      	subs	r3, r2, r3
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	da54      	bge.n	8013ebc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013e12:	4b5f      	ldr	r3, [pc, #380]	; (8013f90 <tcp_receive+0x5e0>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	1ad3      	subs	r3, r2, r3
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013e26:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e30:	10db      	asrs	r3, r3, #3
 8013e32:	b21b      	sxth	r3, r3
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	1ad3      	subs	r3, r2, r3
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013e4a:	4413      	add	r3, r2
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	b21a      	sxth	r2, r3
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013e54:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	da05      	bge.n	8013e68 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013e60:	425b      	negs	r3, r3
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013e68:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e72:	109b      	asrs	r3, r3, #2
 8013e74:	b21b      	sxth	r3, r3
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	1ad3      	subs	r3, r2, r3
 8013e7a:	b29b      	uxth	r3, r3
 8013e7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e86:	b29a      	uxth	r2, r3
 8013e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013e8c:	4413      	add	r3, r2
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	b21a      	sxth	r2, r3
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e9c:	10db      	asrs	r3, r3, #3
 8013e9e:	b21b      	sxth	r3, r3
 8013ea0:	b29a      	uxth	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	4413      	add	r3, r2
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	b21a      	sxth	r2, r3
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013ebc:	4b35      	ldr	r3, [pc, #212]	; (8013f94 <tcp_receive+0x5e4>)
 8013ebe:	881b      	ldrh	r3, [r3, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f000 84e2 	beq.w	801488a <tcp_receive+0xeda>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	7d1b      	ldrb	r3, [r3, #20]
 8013eca:	2b06      	cmp	r3, #6
 8013ecc:	f200 84dd 	bhi.w	801488a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ed4:	4b30      	ldr	r3, [pc, #192]	; (8013f98 <tcp_receive+0x5e8>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	1ad3      	subs	r3, r2, r3
 8013eda:	3b01      	subs	r3, #1
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	f2c0 808f 	blt.w	8014000 <tcp_receive+0x650>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ee6:	4b2b      	ldr	r3, [pc, #172]	; (8013f94 <tcp_receive+0x5e4>)
 8013ee8:	881b      	ldrh	r3, [r3, #0]
 8013eea:	4619      	mov	r1, r3
 8013eec:	4b2a      	ldr	r3, [pc, #168]	; (8013f98 <tcp_receive+0x5e8>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	440b      	add	r3, r1
 8013ef2:	1ad3      	subs	r3, r2, r3
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	f300 8082 	bgt.w	8014000 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013efc:	4b27      	ldr	r3, [pc, #156]	; (8013f9c <tcp_receive+0x5ec>)
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f06:	4b24      	ldr	r3, [pc, #144]	; (8013f98 <tcp_receive+0x5e8>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	1ad3      	subs	r3, r2, r3
 8013f0c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013f0e:	4b23      	ldr	r3, [pc, #140]	; (8013f9c <tcp_receive+0x5ec>)
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d106      	bne.n	8013f24 <tcp_receive+0x574>
 8013f16:	4b22      	ldr	r3, [pc, #136]	; (8013fa0 <tcp_receive+0x5f0>)
 8013f18:	f240 5294 	movw	r2, #1428	; 0x594
 8013f1c:	4921      	ldr	r1, [pc, #132]	; (8013fa4 <tcp_receive+0x5f4>)
 8013f1e:	4822      	ldr	r0, [pc, #136]	; (8013fa8 <tcp_receive+0x5f8>)
 8013f20:	f005 fcaa 	bl	8019878 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013f2a:	4293      	cmp	r3, r2
 8013f2c:	d906      	bls.n	8013f3c <tcp_receive+0x58c>
 8013f2e:	4b1c      	ldr	r3, [pc, #112]	; (8013fa0 <tcp_receive+0x5f0>)
 8013f30:	f240 5295 	movw	r2, #1429	; 0x595
 8013f34:	491d      	ldr	r1, [pc, #116]	; (8013fac <tcp_receive+0x5fc>)
 8013f36:	481c      	ldr	r0, [pc, #112]	; (8013fa8 <tcp_receive+0x5f8>)
 8013f38:	f005 fc9e 	bl	8019878 <iprintf>
      off = (u16_t)off32;
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013f42:	4b16      	ldr	r3, [pc, #88]	; (8013f9c <tcp_receive+0x5ec>)
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	891b      	ldrh	r3, [r3, #8]
 8013f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d906      	bls.n	8013f5e <tcp_receive+0x5ae>
 8013f50:	4b13      	ldr	r3, [pc, #76]	; (8013fa0 <tcp_receive+0x5f0>)
 8013f52:	f240 5297 	movw	r2, #1431	; 0x597
 8013f56:	4916      	ldr	r1, [pc, #88]	; (8013fb0 <tcp_receive+0x600>)
 8013f58:	4813      	ldr	r0, [pc, #76]	; (8013fa8 <tcp_receive+0x5f8>)
 8013f5a:	f005 fc8d 	bl	8019878 <iprintf>
      inseg.len -= off;
 8013f5e:	4b0f      	ldr	r3, [pc, #60]	; (8013f9c <tcp_receive+0x5ec>)
 8013f60:	891a      	ldrh	r2, [r3, #8]
 8013f62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f66:	1ad3      	subs	r3, r2, r3
 8013f68:	b29a      	uxth	r2, r3
 8013f6a:	4b0c      	ldr	r3, [pc, #48]	; (8013f9c <tcp_receive+0x5ec>)
 8013f6c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013f6e:	4b0b      	ldr	r3, [pc, #44]	; (8013f9c <tcp_receive+0x5ec>)
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	891a      	ldrh	r2, [r3, #8]
 8013f74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013f7c:	e02a      	b.n	8013fd4 <tcp_receive+0x624>
 8013f7e:	bf00      	nop
 8013f80:	0801c490 	.word	0x0801c490
 8013f84:	0801c498 	.word	0x0801c498
 8013f88:	2000dad8 	.word	0x2000dad8
 8013f8c:	2000dad4 	.word	0x2000dad4
 8013f90:	2000da98 	.word	0x2000da98
 8013f94:	2000dada 	.word	0x2000dada
 8013f98:	2000dad0 	.word	0x2000dad0
 8013f9c:	2000dab0 	.word	0x2000dab0
 8013fa0:	0801c128 	.word	0x0801c128
 8013fa4:	0801c4a0 	.word	0x0801c4a0
 8013fa8:	0801c174 	.word	0x0801c174
 8013fac:	0801c4b0 	.word	0x0801c4b0
 8013fb0:	0801c4c0 	.word	0x0801c4c0
        off -= p->len;
 8013fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fb6:	895b      	ldrh	r3, [r3, #10]
 8013fb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013fbc:	1ad3      	subs	r3, r2, r3
 8013fbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013fc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fca:	2200      	movs	r2, #0
 8013fcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fd6:	895b      	ldrh	r3, [r3, #10]
 8013fd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d8e9      	bhi.n	8013fb4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013fe0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013fe8:	f7fc face 	bl	8010588 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ff0:	4a91      	ldr	r2, [pc, #580]	; (8014238 <tcp_receive+0x888>)
 8013ff2:	6013      	str	r3, [r2, #0]
 8013ff4:	4b91      	ldr	r3, [pc, #580]	; (801423c <tcp_receive+0x88c>)
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	4a8f      	ldr	r2, [pc, #572]	; (8014238 <tcp_receive+0x888>)
 8013ffa:	6812      	ldr	r2, [r2, #0]
 8013ffc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013ffe:	e00d      	b.n	801401c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014000:	4b8d      	ldr	r3, [pc, #564]	; (8014238 <tcp_receive+0x888>)
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014008:	1ad3      	subs	r3, r2, r3
 801400a:	2b00      	cmp	r3, #0
 801400c:	da06      	bge.n	801401c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	8b5b      	ldrh	r3, [r3, #26]
 8014012:	f043 0302 	orr.w	r3, r3, #2
 8014016:	b29a      	uxth	r2, r3
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801401c:	4b86      	ldr	r3, [pc, #536]	; (8014238 <tcp_receive+0x888>)
 801401e:	681a      	ldr	r2, [r3, #0]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014024:	1ad3      	subs	r3, r2, r3
 8014026:	2b00      	cmp	r3, #0
 8014028:	f2c0 842a 	blt.w	8014880 <tcp_receive+0xed0>
 801402c:	4b82      	ldr	r3, [pc, #520]	; (8014238 <tcp_receive+0x888>)
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014034:	6879      	ldr	r1, [r7, #4]
 8014036:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014038:	440b      	add	r3, r1
 801403a:	1ad3      	subs	r3, r2, r3
 801403c:	3301      	adds	r3, #1
 801403e:	2b00      	cmp	r3, #0
 8014040:	f300 841e 	bgt.w	8014880 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014048:	4b7b      	ldr	r3, [pc, #492]	; (8014238 <tcp_receive+0x888>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	429a      	cmp	r2, r3
 801404e:	f040 829a 	bne.w	8014586 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014052:	4b7a      	ldr	r3, [pc, #488]	; (801423c <tcp_receive+0x88c>)
 8014054:	891c      	ldrh	r4, [r3, #8]
 8014056:	4b79      	ldr	r3, [pc, #484]	; (801423c <tcp_receive+0x88c>)
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	899b      	ldrh	r3, [r3, #12]
 801405c:	b29b      	uxth	r3, r3
 801405e:	4618      	mov	r0, r3
 8014060:	f7fa ff26 	bl	800eeb0 <lwip_htons>
 8014064:	4603      	mov	r3, r0
 8014066:	b2db      	uxtb	r3, r3
 8014068:	f003 0303 	and.w	r3, r3, #3
 801406c:	2b00      	cmp	r3, #0
 801406e:	d001      	beq.n	8014074 <tcp_receive+0x6c4>
 8014070:	2301      	movs	r3, #1
 8014072:	e000      	b.n	8014076 <tcp_receive+0x6c6>
 8014074:	2300      	movs	r3, #0
 8014076:	4423      	add	r3, r4
 8014078:	b29a      	uxth	r2, r3
 801407a:	4b71      	ldr	r3, [pc, #452]	; (8014240 <tcp_receive+0x890>)
 801407c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014082:	4b6f      	ldr	r3, [pc, #444]	; (8014240 <tcp_receive+0x890>)
 8014084:	881b      	ldrh	r3, [r3, #0]
 8014086:	429a      	cmp	r2, r3
 8014088:	d275      	bcs.n	8014176 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801408a:	4b6c      	ldr	r3, [pc, #432]	; (801423c <tcp_receive+0x88c>)
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	899b      	ldrh	r3, [r3, #12]
 8014090:	b29b      	uxth	r3, r3
 8014092:	4618      	mov	r0, r3
 8014094:	f7fa ff0c 	bl	800eeb0 <lwip_htons>
 8014098:	4603      	mov	r3, r0
 801409a:	b2db      	uxtb	r3, r3
 801409c:	f003 0301 	and.w	r3, r3, #1
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d01f      	beq.n	80140e4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80140a4:	4b65      	ldr	r3, [pc, #404]	; (801423c <tcp_receive+0x88c>)
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	899b      	ldrh	r3, [r3, #12]
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	b21b      	sxth	r3, r3
 80140ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80140b2:	b21c      	sxth	r4, r3
 80140b4:	4b61      	ldr	r3, [pc, #388]	; (801423c <tcp_receive+0x88c>)
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	899b      	ldrh	r3, [r3, #12]
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fa fef7 	bl	800eeb0 <lwip_htons>
 80140c2:	4603      	mov	r3, r0
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80140cc:	b29b      	uxth	r3, r3
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7fa feee 	bl	800eeb0 <lwip_htons>
 80140d4:	4603      	mov	r3, r0
 80140d6:	b21b      	sxth	r3, r3
 80140d8:	4323      	orrs	r3, r4
 80140da:	b21a      	sxth	r2, r3
 80140dc:	4b57      	ldr	r3, [pc, #348]	; (801423c <tcp_receive+0x88c>)
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	b292      	uxth	r2, r2
 80140e2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80140e8:	4b54      	ldr	r3, [pc, #336]	; (801423c <tcp_receive+0x88c>)
 80140ea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80140ec:	4b53      	ldr	r3, [pc, #332]	; (801423c <tcp_receive+0x88c>)
 80140ee:	68db      	ldr	r3, [r3, #12]
 80140f0:	899b      	ldrh	r3, [r3, #12]
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7fa fedb 	bl	800eeb0 <lwip_htons>
 80140fa:	4603      	mov	r3, r0
 80140fc:	b2db      	uxtb	r3, r3
 80140fe:	f003 0302 	and.w	r3, r3, #2
 8014102:	2b00      	cmp	r3, #0
 8014104:	d005      	beq.n	8014112 <tcp_receive+0x762>
            inseg.len -= 1;
 8014106:	4b4d      	ldr	r3, [pc, #308]	; (801423c <tcp_receive+0x88c>)
 8014108:	891b      	ldrh	r3, [r3, #8]
 801410a:	3b01      	subs	r3, #1
 801410c:	b29a      	uxth	r2, r3
 801410e:	4b4b      	ldr	r3, [pc, #300]	; (801423c <tcp_receive+0x88c>)
 8014110:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014112:	4b4a      	ldr	r3, [pc, #296]	; (801423c <tcp_receive+0x88c>)
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	4a49      	ldr	r2, [pc, #292]	; (801423c <tcp_receive+0x88c>)
 8014118:	8912      	ldrh	r2, [r2, #8]
 801411a:	4611      	mov	r1, r2
 801411c:	4618      	mov	r0, r3
 801411e:	f7fc f933 	bl	8010388 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014122:	4b46      	ldr	r3, [pc, #280]	; (801423c <tcp_receive+0x88c>)
 8014124:	891c      	ldrh	r4, [r3, #8]
 8014126:	4b45      	ldr	r3, [pc, #276]	; (801423c <tcp_receive+0x88c>)
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	899b      	ldrh	r3, [r3, #12]
 801412c:	b29b      	uxth	r3, r3
 801412e:	4618      	mov	r0, r3
 8014130:	f7fa febe 	bl	800eeb0 <lwip_htons>
 8014134:	4603      	mov	r3, r0
 8014136:	b2db      	uxtb	r3, r3
 8014138:	f003 0303 	and.w	r3, r3, #3
 801413c:	2b00      	cmp	r3, #0
 801413e:	d001      	beq.n	8014144 <tcp_receive+0x794>
 8014140:	2301      	movs	r3, #1
 8014142:	e000      	b.n	8014146 <tcp_receive+0x796>
 8014144:	2300      	movs	r3, #0
 8014146:	4423      	add	r3, r4
 8014148:	b29a      	uxth	r2, r3
 801414a:	4b3d      	ldr	r3, [pc, #244]	; (8014240 <tcp_receive+0x890>)
 801414c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801414e:	4b3c      	ldr	r3, [pc, #240]	; (8014240 <tcp_receive+0x890>)
 8014150:	881b      	ldrh	r3, [r3, #0]
 8014152:	461a      	mov	r2, r3
 8014154:	4b38      	ldr	r3, [pc, #224]	; (8014238 <tcp_receive+0x888>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	441a      	add	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801415e:	6879      	ldr	r1, [r7, #4]
 8014160:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014162:	440b      	add	r3, r1
 8014164:	429a      	cmp	r2, r3
 8014166:	d006      	beq.n	8014176 <tcp_receive+0x7c6>
 8014168:	4b36      	ldr	r3, [pc, #216]	; (8014244 <tcp_receive+0x894>)
 801416a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801416e:	4936      	ldr	r1, [pc, #216]	; (8014248 <tcp_receive+0x898>)
 8014170:	4836      	ldr	r0, [pc, #216]	; (801424c <tcp_receive+0x89c>)
 8014172:	f005 fb81 	bl	8019878 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801417a:	2b00      	cmp	r3, #0
 801417c:	f000 80e7 	beq.w	801434e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014180:	4b2e      	ldr	r3, [pc, #184]	; (801423c <tcp_receive+0x88c>)
 8014182:	68db      	ldr	r3, [r3, #12]
 8014184:	899b      	ldrh	r3, [r3, #12]
 8014186:	b29b      	uxth	r3, r3
 8014188:	4618      	mov	r0, r3
 801418a:	f7fa fe91 	bl	800eeb0 <lwip_htons>
 801418e:	4603      	mov	r3, r0
 8014190:	b2db      	uxtb	r3, r3
 8014192:	f003 0301 	and.w	r3, r3, #1
 8014196:	2b00      	cmp	r3, #0
 8014198:	d010      	beq.n	80141bc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801419a:	e00a      	b.n	80141b2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141a0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80141ac:	68f8      	ldr	r0, [r7, #12]
 80141ae:	f7fd fd92 	bl	8011cd6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d1f0      	bne.n	801419c <tcp_receive+0x7ec>
 80141ba:	e0c8      	b.n	801434e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80141c2:	e052      	b.n	801426a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80141c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	899b      	ldrh	r3, [r3, #12]
 80141ca:	b29b      	uxth	r3, r3
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7fa fe6f 	bl	800eeb0 <lwip_htons>
 80141d2:	4603      	mov	r3, r0
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	f003 0301 	and.w	r3, r3, #1
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d03d      	beq.n	801425a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80141de:	4b17      	ldr	r3, [pc, #92]	; (801423c <tcp_receive+0x88c>)
 80141e0:	68db      	ldr	r3, [r3, #12]
 80141e2:	899b      	ldrh	r3, [r3, #12]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7fa fe62 	bl	800eeb0 <lwip_htons>
 80141ec:	4603      	mov	r3, r0
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d130      	bne.n	801425a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80141f8:	4b10      	ldr	r3, [pc, #64]	; (801423c <tcp_receive+0x88c>)
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	899b      	ldrh	r3, [r3, #12]
 80141fe:	b29c      	uxth	r4, r3
 8014200:	2001      	movs	r0, #1
 8014202:	f7fa fe55 	bl	800eeb0 <lwip_htons>
 8014206:	4603      	mov	r3, r0
 8014208:	461a      	mov	r2, r3
 801420a:	4b0c      	ldr	r3, [pc, #48]	; (801423c <tcp_receive+0x88c>)
 801420c:	68db      	ldr	r3, [r3, #12]
 801420e:	4322      	orrs	r2, r4
 8014210:	b292      	uxth	r2, r2
 8014212:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014214:	4b09      	ldr	r3, [pc, #36]	; (801423c <tcp_receive+0x88c>)
 8014216:	891c      	ldrh	r4, [r3, #8]
 8014218:	4b08      	ldr	r3, [pc, #32]	; (801423c <tcp_receive+0x88c>)
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	899b      	ldrh	r3, [r3, #12]
 801421e:	b29b      	uxth	r3, r3
 8014220:	4618      	mov	r0, r3
 8014222:	f7fa fe45 	bl	800eeb0 <lwip_htons>
 8014226:	4603      	mov	r3, r0
 8014228:	b2db      	uxtb	r3, r3
 801422a:	f003 0303 	and.w	r3, r3, #3
 801422e:	2b00      	cmp	r3, #0
 8014230:	d00e      	beq.n	8014250 <tcp_receive+0x8a0>
 8014232:	2301      	movs	r3, #1
 8014234:	e00d      	b.n	8014252 <tcp_receive+0x8a2>
 8014236:	bf00      	nop
 8014238:	2000dad0 	.word	0x2000dad0
 801423c:	2000dab0 	.word	0x2000dab0
 8014240:	2000dada 	.word	0x2000dada
 8014244:	0801c128 	.word	0x0801c128
 8014248:	0801c4d0 	.word	0x0801c4d0
 801424c:	0801c174 	.word	0x0801c174
 8014250:	2300      	movs	r3, #0
 8014252:	4423      	add	r3, r4
 8014254:	b29a      	uxth	r2, r3
 8014256:	4b98      	ldr	r3, [pc, #608]	; (80144b8 <tcp_receive+0xb08>)
 8014258:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801425c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014264:	6938      	ldr	r0, [r7, #16]
 8014266:	f7fd fd36 	bl	8011cd6 <tcp_seg_free>
            while (next &&
 801426a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801426c:	2b00      	cmp	r3, #0
 801426e:	d00e      	beq.n	801428e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014270:	4b91      	ldr	r3, [pc, #580]	; (80144b8 <tcp_receive+0xb08>)
 8014272:	881b      	ldrh	r3, [r3, #0]
 8014274:	461a      	mov	r2, r3
 8014276:	4b91      	ldr	r3, [pc, #580]	; (80144bc <tcp_receive+0xb0c>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	441a      	add	r2, r3
 801427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	685b      	ldr	r3, [r3, #4]
 8014282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014284:	8909      	ldrh	r1, [r1, #8]
 8014286:	440b      	add	r3, r1
 8014288:	1ad3      	subs	r3, r2, r3
            while (next &&
 801428a:	2b00      	cmp	r3, #0
 801428c:	da9a      	bge.n	80141c4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014290:	2b00      	cmp	r3, #0
 8014292:	d059      	beq.n	8014348 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014294:	4b88      	ldr	r3, [pc, #544]	; (80144b8 <tcp_receive+0xb08>)
 8014296:	881b      	ldrh	r3, [r3, #0]
 8014298:	461a      	mov	r2, r3
 801429a:	4b88      	ldr	r3, [pc, #544]	; (80144bc <tcp_receive+0xb0c>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	441a      	add	r2, r3
 80142a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142a2:	68db      	ldr	r3, [r3, #12]
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	dd4d      	ble.n	8014348 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80142ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	685b      	ldr	r3, [r3, #4]
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	4b81      	ldr	r3, [pc, #516]	; (80144bc <tcp_receive+0xb0c>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	1ad3      	subs	r3, r2, r3
 80142bc:	b29a      	uxth	r2, r3
 80142be:	4b80      	ldr	r3, [pc, #512]	; (80144c0 <tcp_receive+0xb10>)
 80142c0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80142c2:	4b7f      	ldr	r3, [pc, #508]	; (80144c0 <tcp_receive+0xb10>)
 80142c4:	68db      	ldr	r3, [r3, #12]
 80142c6:	899b      	ldrh	r3, [r3, #12]
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7fa fdf0 	bl	800eeb0 <lwip_htons>
 80142d0:	4603      	mov	r3, r0
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	f003 0302 	and.w	r3, r3, #2
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d005      	beq.n	80142e8 <tcp_receive+0x938>
                inseg.len -= 1;
 80142dc:	4b78      	ldr	r3, [pc, #480]	; (80144c0 <tcp_receive+0xb10>)
 80142de:	891b      	ldrh	r3, [r3, #8]
 80142e0:	3b01      	subs	r3, #1
 80142e2:	b29a      	uxth	r2, r3
 80142e4:	4b76      	ldr	r3, [pc, #472]	; (80144c0 <tcp_receive+0xb10>)
 80142e6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80142e8:	4b75      	ldr	r3, [pc, #468]	; (80144c0 <tcp_receive+0xb10>)
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	4a74      	ldr	r2, [pc, #464]	; (80144c0 <tcp_receive+0xb10>)
 80142ee:	8912      	ldrh	r2, [r2, #8]
 80142f0:	4611      	mov	r1, r2
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fc f848 	bl	8010388 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80142f8:	4b71      	ldr	r3, [pc, #452]	; (80144c0 <tcp_receive+0xb10>)
 80142fa:	891c      	ldrh	r4, [r3, #8]
 80142fc:	4b70      	ldr	r3, [pc, #448]	; (80144c0 <tcp_receive+0xb10>)
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	899b      	ldrh	r3, [r3, #12]
 8014302:	b29b      	uxth	r3, r3
 8014304:	4618      	mov	r0, r3
 8014306:	f7fa fdd3 	bl	800eeb0 <lwip_htons>
 801430a:	4603      	mov	r3, r0
 801430c:	b2db      	uxtb	r3, r3
 801430e:	f003 0303 	and.w	r3, r3, #3
 8014312:	2b00      	cmp	r3, #0
 8014314:	d001      	beq.n	801431a <tcp_receive+0x96a>
 8014316:	2301      	movs	r3, #1
 8014318:	e000      	b.n	801431c <tcp_receive+0x96c>
 801431a:	2300      	movs	r3, #0
 801431c:	4423      	add	r3, r4
 801431e:	b29a      	uxth	r2, r3
 8014320:	4b65      	ldr	r3, [pc, #404]	; (80144b8 <tcp_receive+0xb08>)
 8014322:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014324:	4b64      	ldr	r3, [pc, #400]	; (80144b8 <tcp_receive+0xb08>)
 8014326:	881b      	ldrh	r3, [r3, #0]
 8014328:	461a      	mov	r2, r3
 801432a:	4b64      	ldr	r3, [pc, #400]	; (80144bc <tcp_receive+0xb0c>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	441a      	add	r2, r3
 8014330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014332:	68db      	ldr	r3, [r3, #12]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	429a      	cmp	r2, r3
 8014338:	d006      	beq.n	8014348 <tcp_receive+0x998>
 801433a:	4b62      	ldr	r3, [pc, #392]	; (80144c4 <tcp_receive+0xb14>)
 801433c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014340:	4961      	ldr	r1, [pc, #388]	; (80144c8 <tcp_receive+0xb18>)
 8014342:	4862      	ldr	r0, [pc, #392]	; (80144cc <tcp_receive+0xb1c>)
 8014344:	f005 fa98 	bl	8019878 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801434c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801434e:	4b5a      	ldr	r3, [pc, #360]	; (80144b8 <tcp_receive+0xb08>)
 8014350:	881b      	ldrh	r3, [r3, #0]
 8014352:	461a      	mov	r2, r3
 8014354:	4b59      	ldr	r3, [pc, #356]	; (80144bc <tcp_receive+0xb0c>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	441a      	add	r2, r3
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014362:	4b55      	ldr	r3, [pc, #340]	; (80144b8 <tcp_receive+0xb08>)
 8014364:	881b      	ldrh	r3, [r3, #0]
 8014366:	429a      	cmp	r2, r3
 8014368:	d206      	bcs.n	8014378 <tcp_receive+0x9c8>
 801436a:	4b56      	ldr	r3, [pc, #344]	; (80144c4 <tcp_receive+0xb14>)
 801436c:	f240 6207 	movw	r2, #1543	; 0x607
 8014370:	4957      	ldr	r1, [pc, #348]	; (80144d0 <tcp_receive+0xb20>)
 8014372:	4856      	ldr	r0, [pc, #344]	; (80144cc <tcp_receive+0xb1c>)
 8014374:	f005 fa80 	bl	8019878 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801437c:	4b4e      	ldr	r3, [pc, #312]	; (80144b8 <tcp_receive+0xb08>)
 801437e:	881b      	ldrh	r3, [r3, #0]
 8014380:	1ad3      	subs	r3, r2, r3
 8014382:	b29a      	uxth	r2, r3
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f7fc ffc5 	bl	8011318 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801438e:	4b4c      	ldr	r3, [pc, #304]	; (80144c0 <tcp_receive+0xb10>)
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	891b      	ldrh	r3, [r3, #8]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d006      	beq.n	80143a6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014398:	4b49      	ldr	r3, [pc, #292]	; (80144c0 <tcp_receive+0xb10>)
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	4a4d      	ldr	r2, [pc, #308]	; (80144d4 <tcp_receive+0xb24>)
 801439e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80143a0:	4b47      	ldr	r3, [pc, #284]	; (80144c0 <tcp_receive+0xb10>)
 80143a2:	2200      	movs	r2, #0
 80143a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80143a6:	4b46      	ldr	r3, [pc, #280]	; (80144c0 <tcp_receive+0xb10>)
 80143a8:	68db      	ldr	r3, [r3, #12]
 80143aa:	899b      	ldrh	r3, [r3, #12]
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7fa fd7e 	bl	800eeb0 <lwip_htons>
 80143b4:	4603      	mov	r3, r0
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	f003 0301 	and.w	r3, r3, #1
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f000 80b8 	beq.w	8014532 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80143c2:	4b45      	ldr	r3, [pc, #276]	; (80144d8 <tcp_receive+0xb28>)
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	f043 0320 	orr.w	r3, r3, #32
 80143ca:	b2da      	uxtb	r2, r3
 80143cc:	4b42      	ldr	r3, [pc, #264]	; (80144d8 <tcp_receive+0xb28>)
 80143ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80143d0:	e0af      	b.n	8014532 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	4a36      	ldr	r2, [pc, #216]	; (80144bc <tcp_receive+0xb0c>)
 80143e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	891b      	ldrh	r3, [r3, #8]
 80143e8:	461c      	mov	r4, r3
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	68db      	ldr	r3, [r3, #12]
 80143ee:	899b      	ldrh	r3, [r3, #12]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fa fd5c 	bl	800eeb0 <lwip_htons>
 80143f8:	4603      	mov	r3, r0
 80143fa:	b2db      	uxtb	r3, r3
 80143fc:	f003 0303 	and.w	r3, r3, #3
 8014400:	2b00      	cmp	r3, #0
 8014402:	d001      	beq.n	8014408 <tcp_receive+0xa58>
 8014404:	2301      	movs	r3, #1
 8014406:	e000      	b.n	801440a <tcp_receive+0xa5a>
 8014408:	2300      	movs	r3, #0
 801440a:	191a      	adds	r2, r3, r4
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014410:	441a      	add	r2, r3
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801441a:	461c      	mov	r4, r3
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	891b      	ldrh	r3, [r3, #8]
 8014420:	461d      	mov	r5, r3
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	68db      	ldr	r3, [r3, #12]
 8014426:	899b      	ldrh	r3, [r3, #12]
 8014428:	b29b      	uxth	r3, r3
 801442a:	4618      	mov	r0, r3
 801442c:	f7fa fd40 	bl	800eeb0 <lwip_htons>
 8014430:	4603      	mov	r3, r0
 8014432:	b2db      	uxtb	r3, r3
 8014434:	f003 0303 	and.w	r3, r3, #3
 8014438:	2b00      	cmp	r3, #0
 801443a:	d001      	beq.n	8014440 <tcp_receive+0xa90>
 801443c:	2301      	movs	r3, #1
 801443e:	e000      	b.n	8014442 <tcp_receive+0xa92>
 8014440:	2300      	movs	r3, #0
 8014442:	442b      	add	r3, r5
 8014444:	429c      	cmp	r4, r3
 8014446:	d206      	bcs.n	8014456 <tcp_receive+0xaa6>
 8014448:	4b1e      	ldr	r3, [pc, #120]	; (80144c4 <tcp_receive+0xb14>)
 801444a:	f240 622b 	movw	r2, #1579	; 0x62b
 801444e:	4923      	ldr	r1, [pc, #140]	; (80144dc <tcp_receive+0xb2c>)
 8014450:	481e      	ldr	r0, [pc, #120]	; (80144cc <tcp_receive+0xb1c>)
 8014452:	f005 fa11 	bl	8019878 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	891b      	ldrh	r3, [r3, #8]
 801445a:	461c      	mov	r4, r3
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	68db      	ldr	r3, [r3, #12]
 8014460:	899b      	ldrh	r3, [r3, #12]
 8014462:	b29b      	uxth	r3, r3
 8014464:	4618      	mov	r0, r3
 8014466:	f7fa fd23 	bl	800eeb0 <lwip_htons>
 801446a:	4603      	mov	r3, r0
 801446c:	b2db      	uxtb	r3, r3
 801446e:	f003 0303 	and.w	r3, r3, #3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d001      	beq.n	801447a <tcp_receive+0xaca>
 8014476:	2301      	movs	r3, #1
 8014478:	e000      	b.n	801447c <tcp_receive+0xacc>
 801447a:	2300      	movs	r3, #0
 801447c:	1919      	adds	r1, r3, r4
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014482:	b28b      	uxth	r3, r1
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	b29a      	uxth	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7fc ff43 	bl	8011318 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	685b      	ldr	r3, [r3, #4]
 8014496:	891b      	ldrh	r3, [r3, #8]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d028      	beq.n	80144ee <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801449c:	4b0d      	ldr	r3, [pc, #52]	; (80144d4 <tcp_receive+0xb24>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d01d      	beq.n	80144e0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80144a4:	4b0b      	ldr	r3, [pc, #44]	; (80144d4 <tcp_receive+0xb24>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	4619      	mov	r1, r3
 80144ae:	4610      	mov	r0, r2
 80144b0:	f7fc f9be 	bl	8010830 <pbuf_cat>
 80144b4:	e018      	b.n	80144e8 <tcp_receive+0xb38>
 80144b6:	bf00      	nop
 80144b8:	2000dada 	.word	0x2000dada
 80144bc:	2000dad0 	.word	0x2000dad0
 80144c0:	2000dab0 	.word	0x2000dab0
 80144c4:	0801c128 	.word	0x0801c128
 80144c8:	0801c508 	.word	0x0801c508
 80144cc:	0801c174 	.word	0x0801c174
 80144d0:	0801c544 	.word	0x0801c544
 80144d4:	2000dae0 	.word	0x2000dae0
 80144d8:	2000dadd 	.word	0x2000dadd
 80144dc:	0801c564 	.word	0x0801c564
            } else {
              recv_data = cseg->p;
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	685b      	ldr	r3, [r3, #4]
 80144e4:	4a70      	ldr	r2, [pc, #448]	; (80146a8 <tcp_receive+0xcf8>)
 80144e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	2200      	movs	r2, #0
 80144ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	68db      	ldr	r3, [r3, #12]
 80144f2:	899b      	ldrh	r3, [r3, #12]
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7fa fcda 	bl	800eeb0 <lwip_htons>
 80144fc:	4603      	mov	r3, r0
 80144fe:	b2db      	uxtb	r3, r3
 8014500:	f003 0301 	and.w	r3, r3, #1
 8014504:	2b00      	cmp	r3, #0
 8014506:	d00d      	beq.n	8014524 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014508:	4b68      	ldr	r3, [pc, #416]	; (80146ac <tcp_receive+0xcfc>)
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	f043 0320 	orr.w	r3, r3, #32
 8014510:	b2da      	uxtb	r2, r3
 8014512:	4b66      	ldr	r3, [pc, #408]	; (80146ac <tcp_receive+0xcfc>)
 8014514:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	7d1b      	ldrb	r3, [r3, #20]
 801451a:	2b04      	cmp	r3, #4
 801451c:	d102      	bne.n	8014524 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2207      	movs	r2, #7
 8014522:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801452c:	68b8      	ldr	r0, [r7, #8]
 801452e:	f7fd fbd2 	bl	8011cd6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014536:	2b00      	cmp	r3, #0
 8014538:	d008      	beq.n	801454c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	685a      	ldr	r2, [r3, #4]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014546:	429a      	cmp	r2, r3
 8014548:	f43f af43 	beq.w	80143d2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	8b5b      	ldrh	r3, [r3, #26]
 8014550:	f003 0301 	and.w	r3, r3, #1
 8014554:	2b00      	cmp	r3, #0
 8014556:	d00e      	beq.n	8014576 <tcp_receive+0xbc6>
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	8b5b      	ldrh	r3, [r3, #26]
 801455c:	f023 0301 	bic.w	r3, r3, #1
 8014560:	b29a      	uxth	r2, r3
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	835a      	strh	r2, [r3, #26]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	8b5b      	ldrh	r3, [r3, #26]
 801456a:	f043 0302 	orr.w	r3, r3, #2
 801456e:	b29a      	uxth	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014574:	e188      	b.n	8014888 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	8b5b      	ldrh	r3, [r3, #26]
 801457a:	f043 0301 	orr.w	r3, r3, #1
 801457e:	b29a      	uxth	r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014584:	e180      	b.n	8014888 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801458a:	2b00      	cmp	r3, #0
 801458c:	d106      	bne.n	801459c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801458e:	4848      	ldr	r0, [pc, #288]	; (80146b0 <tcp_receive+0xd00>)
 8014590:	f7fd fbba 	bl	8011d08 <tcp_seg_copy>
 8014594:	4602      	mov	r2, r0
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	675a      	str	r2, [r3, #116]	; 0x74
 801459a:	e16d      	b.n	8014878 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801459c:	2300      	movs	r3, #0
 801459e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80145a6:	e157      	b.n	8014858 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80145a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	685a      	ldr	r2, [r3, #4]
 80145ae:	4b41      	ldr	r3, [pc, #260]	; (80146b4 <tcp_receive+0xd04>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d11d      	bne.n	80145f2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80145b6:	4b3e      	ldr	r3, [pc, #248]	; (80146b0 <tcp_receive+0xd00>)
 80145b8:	891a      	ldrh	r2, [r3, #8]
 80145ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145bc:	891b      	ldrh	r3, [r3, #8]
 80145be:	429a      	cmp	r2, r3
 80145c0:	f240 814f 	bls.w	8014862 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80145c4:	483a      	ldr	r0, [pc, #232]	; (80146b0 <tcp_receive+0xd00>)
 80145c6:	f7fd fb9f 	bl	8011d08 <tcp_seg_copy>
 80145ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	f000 8149 	beq.w	8014866 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80145d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d003      	beq.n	80145e2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80145da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145dc:	697a      	ldr	r2, [r7, #20]
 80145de:	601a      	str	r2, [r3, #0]
 80145e0:	e002      	b.n	80145e8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	697a      	ldr	r2, [r7, #20]
 80145e6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80145e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145ea:	6978      	ldr	r0, [r7, #20]
 80145ec:	f7ff f8dc 	bl	80137a8 <tcp_oos_insert_segment>
                }
                break;
 80145f0:	e139      	b.n	8014866 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80145f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d117      	bne.n	8014628 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80145f8:	4b2e      	ldr	r3, [pc, #184]	; (80146b4 <tcp_receive+0xd04>)
 80145fa:	681a      	ldr	r2, [r3, #0]
 80145fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	2b00      	cmp	r3, #0
 8014606:	da57      	bge.n	80146b8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014608:	4829      	ldr	r0, [pc, #164]	; (80146b0 <tcp_receive+0xd00>)
 801460a:	f7fd fb7d 	bl	8011d08 <tcp_seg_copy>
 801460e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 8129 	beq.w	801486a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	69ba      	ldr	r2, [r7, #24]
 801461c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801461e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014620:	69b8      	ldr	r0, [r7, #24]
 8014622:	f7ff f8c1 	bl	80137a8 <tcp_oos_insert_segment>
                  }
                  break;
 8014626:	e120      	b.n	801486a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014628:	4b22      	ldr	r3, [pc, #136]	; (80146b4 <tcp_receive+0xd04>)
 801462a:	681a      	ldr	r2, [r3, #0]
 801462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	685b      	ldr	r3, [r3, #4]
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	3b01      	subs	r3, #1
 8014636:	2b00      	cmp	r3, #0
 8014638:	db3e      	blt.n	80146b8 <tcp_receive+0xd08>
 801463a:	4b1e      	ldr	r3, [pc, #120]	; (80146b4 <tcp_receive+0xd04>)
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014640:	68db      	ldr	r3, [r3, #12]
 8014642:	685b      	ldr	r3, [r3, #4]
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	3301      	adds	r3, #1
 8014648:	2b00      	cmp	r3, #0
 801464a:	dc35      	bgt.n	80146b8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801464c:	4818      	ldr	r0, [pc, #96]	; (80146b0 <tcp_receive+0xd00>)
 801464e:	f7fd fb5b 	bl	8011d08 <tcp_seg_copy>
 8014652:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014654:	69fb      	ldr	r3, [r7, #28]
 8014656:	2b00      	cmp	r3, #0
 8014658:	f000 8109 	beq.w	801486e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014664:	8912      	ldrh	r2, [r2, #8]
 8014666:	441a      	add	r2, r3
 8014668:	4b12      	ldr	r3, [pc, #72]	; (80146b4 <tcp_receive+0xd04>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	2b00      	cmp	r3, #0
 8014670:	dd12      	ble.n	8014698 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014672:	4b10      	ldr	r3, [pc, #64]	; (80146b4 <tcp_receive+0xd04>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	b29a      	uxth	r2, r3
 8014678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	b29b      	uxth	r3, r3
 8014680:	1ad3      	subs	r3, r2, r3
 8014682:	b29a      	uxth	r2, r3
 8014684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014686:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468a:	685a      	ldr	r2, [r3, #4]
 801468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468e:	891b      	ldrh	r3, [r3, #8]
 8014690:	4619      	mov	r1, r3
 8014692:	4610      	mov	r0, r2
 8014694:	f7fb fe78 	bl	8010388 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801469a:	69fa      	ldr	r2, [r7, #28]
 801469c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801469e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80146a0:	69f8      	ldr	r0, [r7, #28]
 80146a2:	f7ff f881 	bl	80137a8 <tcp_oos_insert_segment>
                  }
                  break;
 80146a6:	e0e2      	b.n	801486e <tcp_receive+0xebe>
 80146a8:	2000dae0 	.word	0x2000dae0
 80146ac:	2000dadd 	.word	0x2000dadd
 80146b0:	2000dab0 	.word	0x2000dab0
 80146b4:	2000dad0 	.word	0x2000dad0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80146b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80146bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	f040 80c6 	bne.w	8014852 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80146c6:	4b80      	ldr	r3, [pc, #512]	; (80148c8 <tcp_receive+0xf18>)
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146cc:	68db      	ldr	r3, [r3, #12]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	f340 80bd 	ble.w	8014852 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80146d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	899b      	ldrh	r3, [r3, #12]
 80146de:	b29b      	uxth	r3, r3
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fa fbe5 	bl	800eeb0 <lwip_htons>
 80146e6:	4603      	mov	r3, r0
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	f003 0301 	and.w	r3, r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f040 80bf 	bne.w	8014872 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80146f4:	4875      	ldr	r0, [pc, #468]	; (80148cc <tcp_receive+0xf1c>)
 80146f6:	f7fd fb07 	bl	8011d08 <tcp_seg_copy>
 80146fa:	4602      	mov	r2, r0
 80146fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	f000 80b6 	beq.w	8014876 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014712:	8912      	ldrh	r2, [r2, #8]
 8014714:	441a      	add	r2, r3
 8014716:	4b6c      	ldr	r3, [pc, #432]	; (80148c8 <tcp_receive+0xf18>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	2b00      	cmp	r3, #0
 801471e:	dd12      	ble.n	8014746 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014720:	4b69      	ldr	r3, [pc, #420]	; (80148c8 <tcp_receive+0xf18>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	b29a      	uxth	r2, r3
 8014726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	685b      	ldr	r3, [r3, #4]
 801472c:	b29b      	uxth	r3, r3
 801472e:	1ad3      	subs	r3, r2, r3
 8014730:	b29a      	uxth	r2, r3
 8014732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014734:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014738:	685a      	ldr	r2, [r3, #4]
 801473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473c:	891b      	ldrh	r3, [r3, #8]
 801473e:	4619      	mov	r1, r3
 8014740:	4610      	mov	r0, r2
 8014742:	f7fb fe21 	bl	8010388 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014746:	4b62      	ldr	r3, [pc, #392]	; (80148d0 <tcp_receive+0xf20>)
 8014748:	881b      	ldrh	r3, [r3, #0]
 801474a:	461a      	mov	r2, r3
 801474c:	4b5e      	ldr	r3, [pc, #376]	; (80148c8 <tcp_receive+0xf18>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	441a      	add	r2, r3
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014756:	6879      	ldr	r1, [r7, #4]
 8014758:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801475a:	440b      	add	r3, r1
 801475c:	1ad3      	subs	r3, r2, r3
 801475e:	2b00      	cmp	r3, #0
 8014760:	f340 8089 	ble.w	8014876 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	68db      	ldr	r3, [r3, #12]
 801476a:	899b      	ldrh	r3, [r3, #12]
 801476c:	b29b      	uxth	r3, r3
 801476e:	4618      	mov	r0, r3
 8014770:	f7fa fb9e 	bl	800eeb0 <lwip_htons>
 8014774:	4603      	mov	r3, r0
 8014776:	b2db      	uxtb	r3, r3
 8014778:	f003 0301 	and.w	r3, r3, #1
 801477c:	2b00      	cmp	r3, #0
 801477e:	d022      	beq.n	80147c6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	899b      	ldrh	r3, [r3, #12]
 8014788:	b29b      	uxth	r3, r3
 801478a:	b21b      	sxth	r3, r3
 801478c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014790:	b21c      	sxth	r4, r3
 8014792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	899b      	ldrh	r3, [r3, #12]
 801479a:	b29b      	uxth	r3, r3
 801479c:	4618      	mov	r0, r3
 801479e:	f7fa fb87 	bl	800eeb0 <lwip_htons>
 80147a2:	4603      	mov	r3, r0
 80147a4:	b2db      	uxtb	r3, r3
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fa fb7e 	bl	800eeb0 <lwip_htons>
 80147b4:	4603      	mov	r3, r0
 80147b6:	b21b      	sxth	r3, r3
 80147b8:	4323      	orrs	r3, r4
 80147ba:	b21a      	sxth	r2, r3
 80147bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	68db      	ldr	r3, [r3, #12]
 80147c2:	b292      	uxth	r2, r2
 80147c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147ca:	b29a      	uxth	r2, r3
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147d0:	4413      	add	r3, r2
 80147d2:	b299      	uxth	r1, r3
 80147d4:	4b3c      	ldr	r3, [pc, #240]	; (80148c8 <tcp_receive+0xf18>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	b29a      	uxth	r2, r3
 80147da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	1a8a      	subs	r2, r1, r2
 80147e0:	b292      	uxth	r2, r2
 80147e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80147e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	685a      	ldr	r2, [r3, #4]
 80147ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	891b      	ldrh	r3, [r3, #8]
 80147f0:	4619      	mov	r1, r3
 80147f2:	4610      	mov	r0, r2
 80147f4:	f7fb fdc8 	bl	8010388 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80147f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	891c      	ldrh	r4, [r3, #8]
 80147fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	899b      	ldrh	r3, [r3, #12]
 8014806:	b29b      	uxth	r3, r3
 8014808:	4618      	mov	r0, r3
 801480a:	f7fa fb51 	bl	800eeb0 <lwip_htons>
 801480e:	4603      	mov	r3, r0
 8014810:	b2db      	uxtb	r3, r3
 8014812:	f003 0303 	and.w	r3, r3, #3
 8014816:	2b00      	cmp	r3, #0
 8014818:	d001      	beq.n	801481e <tcp_receive+0xe6e>
 801481a:	2301      	movs	r3, #1
 801481c:	e000      	b.n	8014820 <tcp_receive+0xe70>
 801481e:	2300      	movs	r3, #0
 8014820:	4423      	add	r3, r4
 8014822:	b29a      	uxth	r2, r3
 8014824:	4b2a      	ldr	r3, [pc, #168]	; (80148d0 <tcp_receive+0xf20>)
 8014826:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014828:	4b29      	ldr	r3, [pc, #164]	; (80148d0 <tcp_receive+0xf20>)
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	461a      	mov	r2, r3
 801482e:	4b26      	ldr	r3, [pc, #152]	; (80148c8 <tcp_receive+0xf18>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	441a      	add	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014838:	6879      	ldr	r1, [r7, #4]
 801483a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801483c:	440b      	add	r3, r1
 801483e:	429a      	cmp	r2, r3
 8014840:	d019      	beq.n	8014876 <tcp_receive+0xec6>
 8014842:	4b24      	ldr	r3, [pc, #144]	; (80148d4 <tcp_receive+0xf24>)
 8014844:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014848:	4923      	ldr	r1, [pc, #140]	; (80148d8 <tcp_receive+0xf28>)
 801484a:	4824      	ldr	r0, [pc, #144]	; (80148dc <tcp_receive+0xf2c>)
 801484c:	f005 f814 	bl	8019878 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014850:	e011      	b.n	8014876 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	63bb      	str	r3, [r7, #56]	; 0x38
 8014858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485a:	2b00      	cmp	r3, #0
 801485c:	f47f aea4 	bne.w	80145a8 <tcp_receive+0xbf8>
 8014860:	e00a      	b.n	8014878 <tcp_receive+0xec8>
                break;
 8014862:	bf00      	nop
 8014864:	e008      	b.n	8014878 <tcp_receive+0xec8>
                break;
 8014866:	bf00      	nop
 8014868:	e006      	b.n	8014878 <tcp_receive+0xec8>
                  break;
 801486a:	bf00      	nop
 801486c:	e004      	b.n	8014878 <tcp_receive+0xec8>
                  break;
 801486e:	bf00      	nop
 8014870:	e002      	b.n	8014878 <tcp_receive+0xec8>
                  break;
 8014872:	bf00      	nop
 8014874:	e000      	b.n	8014878 <tcp_receive+0xec8>
                break;
 8014876:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f001 fa33 	bl	8015ce4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801487e:	e003      	b.n	8014888 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f001 fa2f 	bl	8015ce4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014886:	e01a      	b.n	80148be <tcp_receive+0xf0e>
 8014888:	e019      	b.n	80148be <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801488a:	4b0f      	ldr	r3, [pc, #60]	; (80148c8 <tcp_receive+0xf18>)
 801488c:	681a      	ldr	r2, [r3, #0]
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014892:	1ad3      	subs	r3, r2, r3
 8014894:	2b00      	cmp	r3, #0
 8014896:	db0a      	blt.n	80148ae <tcp_receive+0xefe>
 8014898:	4b0b      	ldr	r3, [pc, #44]	; (80148c8 <tcp_receive+0xf18>)
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80148a4:	440b      	add	r3, r1
 80148a6:	1ad3      	subs	r3, r2, r3
 80148a8:	3301      	adds	r3, #1
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	dd07      	ble.n	80148be <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	8b5b      	ldrh	r3, [r3, #26]
 80148b2:	f043 0302 	orr.w	r3, r3, #2
 80148b6:	b29a      	uxth	r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80148bc:	e7ff      	b.n	80148be <tcp_receive+0xf0e>
 80148be:	bf00      	nop
 80148c0:	3750      	adds	r7, #80	; 0x50
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bdb0      	pop	{r4, r5, r7, pc}
 80148c6:	bf00      	nop
 80148c8:	2000dad0 	.word	0x2000dad0
 80148cc:	2000dab0 	.word	0x2000dab0
 80148d0:	2000dada 	.word	0x2000dada
 80148d4:	0801c128 	.word	0x0801c128
 80148d8:	0801c4d0 	.word	0x0801c4d0
 80148dc:	0801c174 	.word	0x0801c174

080148e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80148e6:	4b15      	ldr	r3, [pc, #84]	; (801493c <tcp_get_next_optbyte+0x5c>)
 80148e8:	881b      	ldrh	r3, [r3, #0]
 80148ea:	1c5a      	adds	r2, r3, #1
 80148ec:	b291      	uxth	r1, r2
 80148ee:	4a13      	ldr	r2, [pc, #76]	; (801493c <tcp_get_next_optbyte+0x5c>)
 80148f0:	8011      	strh	r1, [r2, #0]
 80148f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80148f4:	4b12      	ldr	r3, [pc, #72]	; (8014940 <tcp_get_next_optbyte+0x60>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d004      	beq.n	8014906 <tcp_get_next_optbyte+0x26>
 80148fc:	4b11      	ldr	r3, [pc, #68]	; (8014944 <tcp_get_next_optbyte+0x64>)
 80148fe:	881b      	ldrh	r3, [r3, #0]
 8014900:	88fa      	ldrh	r2, [r7, #6]
 8014902:	429a      	cmp	r2, r3
 8014904:	d208      	bcs.n	8014918 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014906:	4b10      	ldr	r3, [pc, #64]	; (8014948 <tcp_get_next_optbyte+0x68>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	3314      	adds	r3, #20
 801490c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801490e:	88fb      	ldrh	r3, [r7, #6]
 8014910:	683a      	ldr	r2, [r7, #0]
 8014912:	4413      	add	r3, r2
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	e00b      	b.n	8014930 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014918:	88fb      	ldrh	r3, [r7, #6]
 801491a:	b2da      	uxtb	r2, r3
 801491c:	4b09      	ldr	r3, [pc, #36]	; (8014944 <tcp_get_next_optbyte+0x64>)
 801491e:	881b      	ldrh	r3, [r3, #0]
 8014920:	b2db      	uxtb	r3, r3
 8014922:	1ad3      	subs	r3, r2, r3
 8014924:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014926:	4b06      	ldr	r3, [pc, #24]	; (8014940 <tcp_get_next_optbyte+0x60>)
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	797b      	ldrb	r3, [r7, #5]
 801492c:	4413      	add	r3, r2
 801492e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014930:	4618      	mov	r0, r3
 8014932:	370c      	adds	r7, #12
 8014934:	46bd      	mov	sp, r7
 8014936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493a:	4770      	bx	lr
 801493c:	2000dacc 	.word	0x2000dacc
 8014940:	2000dac8 	.word	0x2000dac8
 8014944:	2000dac6 	.word	0x2000dac6
 8014948:	2000dac0 	.word	0x2000dac0

0801494c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d106      	bne.n	8014968 <tcp_parseopt+0x1c>
 801495a:	4b32      	ldr	r3, [pc, #200]	; (8014a24 <tcp_parseopt+0xd8>)
 801495c:	f240 727d 	movw	r2, #1917	; 0x77d
 8014960:	4931      	ldr	r1, [pc, #196]	; (8014a28 <tcp_parseopt+0xdc>)
 8014962:	4832      	ldr	r0, [pc, #200]	; (8014a2c <tcp_parseopt+0xe0>)
 8014964:	f004 ff88 	bl	8019878 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014968:	4b31      	ldr	r3, [pc, #196]	; (8014a30 <tcp_parseopt+0xe4>)
 801496a:	881b      	ldrh	r3, [r3, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d055      	beq.n	8014a1c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014970:	4b30      	ldr	r3, [pc, #192]	; (8014a34 <tcp_parseopt+0xe8>)
 8014972:	2200      	movs	r2, #0
 8014974:	801a      	strh	r2, [r3, #0]
 8014976:	e045      	b.n	8014a04 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014978:	f7ff ffb2 	bl	80148e0 <tcp_get_next_optbyte>
 801497c:	4603      	mov	r3, r0
 801497e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014980:	7bfb      	ldrb	r3, [r7, #15]
 8014982:	2b02      	cmp	r3, #2
 8014984:	d006      	beq.n	8014994 <tcp_parseopt+0x48>
 8014986:	2b02      	cmp	r3, #2
 8014988:	dc2b      	bgt.n	80149e2 <tcp_parseopt+0x96>
 801498a:	2b00      	cmp	r3, #0
 801498c:	d041      	beq.n	8014a12 <tcp_parseopt+0xc6>
 801498e:	2b01      	cmp	r3, #1
 8014990:	d127      	bne.n	80149e2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014992:	e037      	b.n	8014a04 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014994:	f7ff ffa4 	bl	80148e0 <tcp_get_next_optbyte>
 8014998:	4603      	mov	r3, r0
 801499a:	2b04      	cmp	r3, #4
 801499c:	d13b      	bne.n	8014a16 <tcp_parseopt+0xca>
 801499e:	4b25      	ldr	r3, [pc, #148]	; (8014a34 <tcp_parseopt+0xe8>)
 80149a0:	881b      	ldrh	r3, [r3, #0]
 80149a2:	3301      	adds	r3, #1
 80149a4:	4a22      	ldr	r2, [pc, #136]	; (8014a30 <tcp_parseopt+0xe4>)
 80149a6:	8812      	ldrh	r2, [r2, #0]
 80149a8:	4293      	cmp	r3, r2
 80149aa:	da34      	bge.n	8014a16 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80149ac:	f7ff ff98 	bl	80148e0 <tcp_get_next_optbyte>
 80149b0:	4603      	mov	r3, r0
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	021b      	lsls	r3, r3, #8
 80149b6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80149b8:	f7ff ff92 	bl	80148e0 <tcp_get_next_optbyte>
 80149bc:	4603      	mov	r3, r0
 80149be:	b29a      	uxth	r2, r3
 80149c0:	89bb      	ldrh	r3, [r7, #12]
 80149c2:	4313      	orrs	r3, r2
 80149c4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80149c6:	89bb      	ldrh	r3, [r7, #12]
 80149c8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80149cc:	d804      	bhi.n	80149d8 <tcp_parseopt+0x8c>
 80149ce:	89bb      	ldrh	r3, [r7, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d001      	beq.n	80149d8 <tcp_parseopt+0x8c>
 80149d4:	89ba      	ldrh	r2, [r7, #12]
 80149d6:	e001      	b.n	80149dc <tcp_parseopt+0x90>
 80149d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80149e0:	e010      	b.n	8014a04 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80149e2:	f7ff ff7d 	bl	80148e0 <tcp_get_next_optbyte>
 80149e6:	4603      	mov	r3, r0
 80149e8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80149ea:	7afb      	ldrb	r3, [r7, #11]
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	d914      	bls.n	8014a1a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80149f0:	7afb      	ldrb	r3, [r7, #11]
 80149f2:	b29a      	uxth	r2, r3
 80149f4:	4b0f      	ldr	r3, [pc, #60]	; (8014a34 <tcp_parseopt+0xe8>)
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	4413      	add	r3, r2
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	3b02      	subs	r3, #2
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	4b0c      	ldr	r3, [pc, #48]	; (8014a34 <tcp_parseopt+0xe8>)
 8014a02:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014a04:	4b0b      	ldr	r3, [pc, #44]	; (8014a34 <tcp_parseopt+0xe8>)
 8014a06:	881a      	ldrh	r2, [r3, #0]
 8014a08:	4b09      	ldr	r3, [pc, #36]	; (8014a30 <tcp_parseopt+0xe4>)
 8014a0a:	881b      	ldrh	r3, [r3, #0]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d3b3      	bcc.n	8014978 <tcp_parseopt+0x2c>
 8014a10:	e004      	b.n	8014a1c <tcp_parseopt+0xd0>
          return;
 8014a12:	bf00      	nop
 8014a14:	e002      	b.n	8014a1c <tcp_parseopt+0xd0>
            return;
 8014a16:	bf00      	nop
 8014a18:	e000      	b.n	8014a1c <tcp_parseopt+0xd0>
            return;
 8014a1a:	bf00      	nop
      }
    }
  }
}
 8014a1c:	3710      	adds	r7, #16
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	bf00      	nop
 8014a24:	0801c128 	.word	0x0801c128
 8014a28:	0801c58c 	.word	0x0801c58c
 8014a2c:	0801c174 	.word	0x0801c174
 8014a30:	2000dac4 	.word	0x2000dac4
 8014a34:	2000dacc 	.word	0x2000dacc

08014a38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014a38:	b480      	push	{r7}
 8014a3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014a3c:	4b05      	ldr	r3, [pc, #20]	; (8014a54 <tcp_trigger_input_pcb_close+0x1c>)
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	f043 0310 	orr.w	r3, r3, #16
 8014a44:	b2da      	uxtb	r2, r3
 8014a46:	4b03      	ldr	r3, [pc, #12]	; (8014a54 <tcp_trigger_input_pcb_close+0x1c>)
 8014a48:	701a      	strb	r2, [r3, #0]
}
 8014a4a:	bf00      	nop
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a52:	4770      	bx	lr
 8014a54:	2000dadd 	.word	0x2000dadd

08014a58 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b084      	sub	sp, #16
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d00a      	beq.n	8014a80 <tcp_route+0x28>
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	7a1b      	ldrb	r3, [r3, #8]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d006      	beq.n	8014a80 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	7a1b      	ldrb	r3, [r3, #8]
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7fb fa7e 	bl	800ff78 <netif_get_by_index>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	e003      	b.n	8014a88 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f003 fa25 	bl	8017ed0 <ip4_route>
 8014a86:	4603      	mov	r3, r0
  }
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3710      	adds	r7, #16
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}

08014a90 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014a90:	b590      	push	{r4, r7, lr}
 8014a92:	b087      	sub	sp, #28
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	603b      	str	r3, [r7, #0]
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d105      	bne.n	8014ab2 <tcp_create_segment+0x22>
 8014aa6:	4b44      	ldr	r3, [pc, #272]	; (8014bb8 <tcp_create_segment+0x128>)
 8014aa8:	22a3      	movs	r2, #163	; 0xa3
 8014aaa:	4944      	ldr	r1, [pc, #272]	; (8014bbc <tcp_create_segment+0x12c>)
 8014aac:	4844      	ldr	r0, [pc, #272]	; (8014bc0 <tcp_create_segment+0x130>)
 8014aae:	f004 fee3 	bl	8019878 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d105      	bne.n	8014ac4 <tcp_create_segment+0x34>
 8014ab8:	4b3f      	ldr	r3, [pc, #252]	; (8014bb8 <tcp_create_segment+0x128>)
 8014aba:	22a4      	movs	r2, #164	; 0xa4
 8014abc:	4941      	ldr	r1, [pc, #260]	; (8014bc4 <tcp_create_segment+0x134>)
 8014abe:	4840      	ldr	r0, [pc, #256]	; (8014bc0 <tcp_create_segment+0x130>)
 8014ac0:	f004 feda 	bl	8019878 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014ac4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	f003 0304 	and.w	r3, r3, #4
 8014ad0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014ad2:	2003      	movs	r0, #3
 8014ad4:	f7fa fec4 	bl	800f860 <memp_malloc>
 8014ad8:	6138      	str	r0, [r7, #16]
 8014ada:	693b      	ldr	r3, [r7, #16]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d104      	bne.n	8014aea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014ae0:	68b8      	ldr	r0, [r7, #8]
 8014ae2:	f7fb fdd7 	bl	8010694 <pbuf_free>
    return NULL;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	e061      	b.n	8014bae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014af0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	2200      	movs	r2, #0
 8014af6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	68ba      	ldr	r2, [r7, #8]
 8014afc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	891a      	ldrh	r2, [r3, #8]
 8014b02:	7dfb      	ldrb	r3, [r7, #23]
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d205      	bcs.n	8014b16 <tcp_create_segment+0x86>
 8014b0a:	4b2b      	ldr	r3, [pc, #172]	; (8014bb8 <tcp_create_segment+0x128>)
 8014b0c:	22b0      	movs	r2, #176	; 0xb0
 8014b0e:	492e      	ldr	r1, [pc, #184]	; (8014bc8 <tcp_create_segment+0x138>)
 8014b10:	482b      	ldr	r0, [pc, #172]	; (8014bc0 <tcp_create_segment+0x130>)
 8014b12:	f004 feb1 	bl	8019878 <iprintf>
  seg->len = p->tot_len - optlen;
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	891a      	ldrh	r2, [r3, #8]
 8014b1a:	7dfb      	ldrb	r3, [r7, #23]
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	1ad3      	subs	r3, r2, r3
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014b26:	2114      	movs	r1, #20
 8014b28:	68b8      	ldr	r0, [r7, #8]
 8014b2a:	f7fb fd1d 	bl	8010568 <pbuf_add_header>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d004      	beq.n	8014b3e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014b34:	6938      	ldr	r0, [r7, #16]
 8014b36:	f7fd f8ce 	bl	8011cd6 <tcp_seg_free>
    return NULL;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	e037      	b.n	8014bae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014b3e:	693b      	ldr	r3, [r7, #16]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	685a      	ldr	r2, [r3, #4]
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	8ada      	ldrh	r2, [r3, #22]
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	68dc      	ldr	r4, [r3, #12]
 8014b50:	4610      	mov	r0, r2
 8014b52:	f7fa f9ad 	bl	800eeb0 <lwip_htons>
 8014b56:	4603      	mov	r3, r0
 8014b58:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	8b1a      	ldrh	r2, [r3, #24]
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	68dc      	ldr	r4, [r3, #12]
 8014b62:	4610      	mov	r0, r2
 8014b64:	f7fa f9a4 	bl	800eeb0 <lwip_htons>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014b6c:	693b      	ldr	r3, [r7, #16]
 8014b6e:	68dc      	ldr	r4, [r3, #12]
 8014b70:	6838      	ldr	r0, [r7, #0]
 8014b72:	f7fa f9b2 	bl	800eeda <lwip_htonl>
 8014b76:	4603      	mov	r3, r0
 8014b78:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014b7a:	7dfb      	ldrb	r3, [r7, #23]
 8014b7c:	089b      	lsrs	r3, r3, #2
 8014b7e:	b2db      	uxtb	r3, r3
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	3305      	adds	r3, #5
 8014b84:	b29b      	uxth	r3, r3
 8014b86:	031b      	lsls	r3, r3, #12
 8014b88:	b29a      	uxth	r2, r3
 8014b8a:	79fb      	ldrb	r3, [r7, #7]
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	68dc      	ldr	r4, [r3, #12]
 8014b96:	4610      	mov	r0, r2
 8014b98:	f7fa f98a 	bl	800eeb0 <lwip_htons>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	749a      	strb	r2, [r3, #18]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	74da      	strb	r2, [r3, #19]
  return seg;
 8014bac:	693b      	ldr	r3, [r7, #16]
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	371c      	adds	r7, #28
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd90      	pop	{r4, r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	0801c5a8 	.word	0x0801c5a8
 8014bbc:	0801c5dc 	.word	0x0801c5dc
 8014bc0:	0801c5fc 	.word	0x0801c5fc
 8014bc4:	0801c624 	.word	0x0801c624
 8014bc8:	0801c648 	.word	0x0801c648

08014bcc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014bcc:	b590      	push	{r4, r7, lr}
 8014bce:	b08b      	sub	sp, #44	; 0x2c
 8014bd0:	af02      	add	r7, sp, #8
 8014bd2:	6078      	str	r0, [r7, #4]
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	61fb      	str	r3, [r7, #28]
 8014bdc:	2300      	movs	r3, #0
 8014bde:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014be0:	2300      	movs	r3, #0
 8014be2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d106      	bne.n	8014bf8 <tcp_split_unsent_seg+0x2c>
 8014bea:	4b95      	ldr	r3, [pc, #596]	; (8014e40 <tcp_split_unsent_seg+0x274>)
 8014bec:	f240 324b 	movw	r2, #843	; 0x34b
 8014bf0:	4994      	ldr	r1, [pc, #592]	; (8014e44 <tcp_split_unsent_seg+0x278>)
 8014bf2:	4895      	ldr	r0, [pc, #596]	; (8014e48 <tcp_split_unsent_seg+0x27c>)
 8014bf4:	f004 fe40 	bl	8019878 <iprintf>

  useg = pcb->unsent;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bfc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d102      	bne.n	8014c0a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014c04:	f04f 33ff 	mov.w	r3, #4294967295
 8014c08:	e116      	b.n	8014e38 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014c0a:	887b      	ldrh	r3, [r7, #2]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d109      	bne.n	8014c24 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014c10:	4b8b      	ldr	r3, [pc, #556]	; (8014e40 <tcp_split_unsent_seg+0x274>)
 8014c12:	f240 3253 	movw	r2, #851	; 0x353
 8014c16:	498d      	ldr	r1, [pc, #564]	; (8014e4c <tcp_split_unsent_seg+0x280>)
 8014c18:	488b      	ldr	r0, [pc, #556]	; (8014e48 <tcp_split_unsent_seg+0x27c>)
 8014c1a:	f004 fe2d 	bl	8019878 <iprintf>
    return ERR_VAL;
 8014c1e:	f06f 0305 	mvn.w	r3, #5
 8014c22:	e109      	b.n	8014e38 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	891b      	ldrh	r3, [r3, #8]
 8014c28:	887a      	ldrh	r2, [r7, #2]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d301      	bcc.n	8014c32 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014c2e:	2300      	movs	r3, #0
 8014c30:	e102      	b.n	8014e38 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c36:	887a      	ldrh	r2, [r7, #2]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d906      	bls.n	8014c4a <tcp_split_unsent_seg+0x7e>
 8014c3c:	4b80      	ldr	r3, [pc, #512]	; (8014e40 <tcp_split_unsent_seg+0x274>)
 8014c3e:	f240 325b 	movw	r2, #859	; 0x35b
 8014c42:	4983      	ldr	r1, [pc, #524]	; (8014e50 <tcp_split_unsent_seg+0x284>)
 8014c44:	4880      	ldr	r0, [pc, #512]	; (8014e48 <tcp_split_unsent_seg+0x27c>)
 8014c46:	f004 fe17 	bl	8019878 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	891b      	ldrh	r3, [r3, #8]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d106      	bne.n	8014c60 <tcp_split_unsent_seg+0x94>
 8014c52:	4b7b      	ldr	r3, [pc, #492]	; (8014e40 <tcp_split_unsent_seg+0x274>)
 8014c54:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014c58:	497e      	ldr	r1, [pc, #504]	; (8014e54 <tcp_split_unsent_seg+0x288>)
 8014c5a:	487b      	ldr	r0, [pc, #492]	; (8014e48 <tcp_split_unsent_seg+0x27c>)
 8014c5c:	f004 fe0c 	bl	8019878 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	7a9b      	ldrb	r3, [r3, #10]
 8014c64:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014c66:	7bfb      	ldrb	r3, [r7, #15]
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	f003 0304 	and.w	r3, r3, #4
 8014c70:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	891a      	ldrh	r2, [r3, #8]
 8014c76:	887b      	ldrh	r3, [r7, #2]
 8014c78:	1ad3      	subs	r3, r2, r3
 8014c7a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014c7c:	7bbb      	ldrb	r3, [r7, #14]
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	89bb      	ldrh	r3, [r7, #12]
 8014c82:	4413      	add	r3, r2
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	2036      	movs	r0, #54	; 0x36
 8014c8e:	f7fb fa1d 	bl	80100cc <pbuf_alloc>
 8014c92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c94:	693b      	ldr	r3, [r7, #16]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f000 80b7 	beq.w	8014e0a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	891a      	ldrh	r2, [r3, #8]
 8014ca2:	697b      	ldr	r3, [r7, #20]
 8014ca4:	891b      	ldrh	r3, [r3, #8]
 8014ca6:	1ad3      	subs	r3, r2, r3
 8014ca8:	b29a      	uxth	r2, r3
 8014caa:	887b      	ldrh	r3, [r7, #2]
 8014cac:	4413      	add	r3, r2
 8014cae:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	6858      	ldr	r0, [r3, #4]
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	685a      	ldr	r2, [r3, #4]
 8014cb8:	7bbb      	ldrb	r3, [r7, #14]
 8014cba:	18d1      	adds	r1, r2, r3
 8014cbc:	897b      	ldrh	r3, [r7, #10]
 8014cbe:	89ba      	ldrh	r2, [r7, #12]
 8014cc0:	f7fb feee 	bl	8010aa0 <pbuf_copy_partial>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	89bb      	ldrh	r3, [r7, #12]
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	f040 809f 	bne.w	8014e0e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	68db      	ldr	r3, [r3, #12]
 8014cd4:	899b      	ldrh	r3, [r3, #12]
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7fa f8e9 	bl	800eeb0 <lwip_htons>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014ce6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014ce8:	2300      	movs	r3, #0
 8014cea:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014cec:	7efb      	ldrb	r3, [r7, #27]
 8014cee:	f003 0308 	and.w	r3, r3, #8
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d007      	beq.n	8014d06 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014cf6:	7efb      	ldrb	r3, [r7, #27]
 8014cf8:	f023 0308 	bic.w	r3, r3, #8
 8014cfc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014cfe:	7ebb      	ldrb	r3, [r7, #26]
 8014d00:	f043 0308 	orr.w	r3, r3, #8
 8014d04:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014d06:	7efb      	ldrb	r3, [r7, #27]
 8014d08:	f003 0301 	and.w	r3, r3, #1
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d007      	beq.n	8014d20 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014d10:	7efb      	ldrb	r3, [r7, #27]
 8014d12:	f023 0301 	bic.w	r3, r3, #1
 8014d16:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014d18:	7ebb      	ldrb	r3, [r7, #26]
 8014d1a:	f043 0301 	orr.w	r3, r3, #1
 8014d1e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	68db      	ldr	r3, [r3, #12]
 8014d24:	685b      	ldr	r3, [r3, #4]
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7fa f8d7 	bl	800eeda <lwip_htonl>
 8014d2c:	4602      	mov	r2, r0
 8014d2e:	887b      	ldrh	r3, [r7, #2]
 8014d30:	18d1      	adds	r1, r2, r3
 8014d32:	7eba      	ldrb	r2, [r7, #26]
 8014d34:	7bfb      	ldrb	r3, [r7, #15]
 8014d36:	9300      	str	r3, [sp, #0]
 8014d38:	460b      	mov	r3, r1
 8014d3a:	6939      	ldr	r1, [r7, #16]
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7ff fea7 	bl	8014a90 <tcp_create_segment>
 8014d42:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014d44:	69fb      	ldr	r3, [r7, #28]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d063      	beq.n	8014e12 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014d4a:	697b      	ldr	r3, [r7, #20]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fb fd2e 	bl	80107b0 <pbuf_clen>
 8014d54:	4603      	mov	r3, r0
 8014d56:	461a      	mov	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d5e:	1a9b      	subs	r3, r3, r2
 8014d60:	b29a      	uxth	r2, r3
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	6858      	ldr	r0, [r3, #4]
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	685b      	ldr	r3, [r3, #4]
 8014d70:	891a      	ldrh	r2, [r3, #8]
 8014d72:	89bb      	ldrh	r3, [r7, #12]
 8014d74:	1ad3      	subs	r3, r2, r3
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	4619      	mov	r1, r3
 8014d7a:	f7fb fb05 	bl	8010388 <pbuf_realloc>
  useg->len -= remainder;
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	891a      	ldrh	r2, [r3, #8]
 8014d82:	89bb      	ldrh	r3, [r7, #12]
 8014d84:	1ad3      	subs	r3, r2, r3
 8014d86:	b29a      	uxth	r2, r3
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	899b      	ldrh	r3, [r3, #12]
 8014d92:	b29c      	uxth	r4, r3
 8014d94:	7efb      	ldrb	r3, [r7, #27]
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7fa f889 	bl	800eeb0 <lwip_htons>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	461a      	mov	r2, r3
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	68db      	ldr	r3, [r3, #12]
 8014da6:	4322      	orrs	r2, r4
 8014da8:	b292      	uxth	r2, r2
 8014daa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7fb fcfd 	bl	80107b0 <pbuf_clen>
 8014db6:	4603      	mov	r3, r0
 8014db8:	461a      	mov	r2, r3
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014dc0:	4413      	add	r3, r2
 8014dc2:	b29a      	uxth	r2, r3
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7fb fcee 	bl	80107b0 <pbuf_clen>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014dde:	4413      	add	r3, r2
 8014de0:	b29a      	uxth	r2, r3
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	69fb      	ldr	r3, [r7, #28]
 8014dee:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	69fa      	ldr	r2, [r7, #28]
 8014df4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014df6:	69fb      	ldr	r3, [r7, #28]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d103      	bne.n	8014e06 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2200      	movs	r2, #0
 8014e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014e06:	2300      	movs	r3, #0
 8014e08:	e016      	b.n	8014e38 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014e0a:	bf00      	nop
 8014e0c:	e002      	b.n	8014e14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014e0e:	bf00      	nop
 8014e10:	e000      	b.n	8014e14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014e12:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014e14:	69fb      	ldr	r3, [r7, #28]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d006      	beq.n	8014e28 <tcp_split_unsent_seg+0x25c>
 8014e1a:	4b09      	ldr	r3, [pc, #36]	; (8014e40 <tcp_split_unsent_seg+0x274>)
 8014e1c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014e20:	490d      	ldr	r1, [pc, #52]	; (8014e58 <tcp_split_unsent_seg+0x28c>)
 8014e22:	4809      	ldr	r0, [pc, #36]	; (8014e48 <tcp_split_unsent_seg+0x27c>)
 8014e24:	f004 fd28 	bl	8019878 <iprintf>
  if (p != NULL) {
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d002      	beq.n	8014e34 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014e2e:	6938      	ldr	r0, [r7, #16]
 8014e30:	f7fb fc30 	bl	8010694 <pbuf_free>
  }

  return ERR_MEM;
 8014e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3724      	adds	r7, #36	; 0x24
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd90      	pop	{r4, r7, pc}
 8014e40:	0801c5a8 	.word	0x0801c5a8
 8014e44:	0801c93c 	.word	0x0801c93c
 8014e48:	0801c5fc 	.word	0x0801c5fc
 8014e4c:	0801c960 	.word	0x0801c960
 8014e50:	0801c984 	.word	0x0801c984
 8014e54:	0801c994 	.word	0x0801c994
 8014e58:	0801c9a4 	.word	0x0801c9a4

08014e5c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014e5c:	b590      	push	{r4, r7, lr}
 8014e5e:	b085      	sub	sp, #20
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d106      	bne.n	8014e78 <tcp_send_fin+0x1c>
 8014e6a:	4b21      	ldr	r3, [pc, #132]	; (8014ef0 <tcp_send_fin+0x94>)
 8014e6c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014e70:	4920      	ldr	r1, [pc, #128]	; (8014ef4 <tcp_send_fin+0x98>)
 8014e72:	4821      	ldr	r0, [pc, #132]	; (8014ef8 <tcp_send_fin+0x9c>)
 8014e74:	f004 fd00 	bl	8019878 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d02e      	beq.n	8014ede <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e84:	60fb      	str	r3, [r7, #12]
 8014e86:	e002      	b.n	8014e8e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d1f8      	bne.n	8014e88 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	68db      	ldr	r3, [r3, #12]
 8014e9a:	899b      	ldrh	r3, [r3, #12]
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7fa f806 	bl	800eeb0 <lwip_htons>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	b2db      	uxtb	r3, r3
 8014ea8:	f003 0307 	and.w	r3, r3, #7
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d116      	bne.n	8014ede <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	68db      	ldr	r3, [r3, #12]
 8014eb4:	899b      	ldrh	r3, [r3, #12]
 8014eb6:	b29c      	uxth	r4, r3
 8014eb8:	2001      	movs	r0, #1
 8014eba:	f7f9 fff9 	bl	800eeb0 <lwip_htons>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	68db      	ldr	r3, [r3, #12]
 8014ec6:	4322      	orrs	r2, r4
 8014ec8:	b292      	uxth	r2, r2
 8014eca:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	8b5b      	ldrh	r3, [r3, #26]
 8014ed0:	f043 0320 	orr.w	r3, r3, #32
 8014ed4:	b29a      	uxth	r2, r3
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014eda:	2300      	movs	r3, #0
 8014edc:	e004      	b.n	8014ee8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014ede:	2101      	movs	r1, #1
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f000 f80b 	bl	8014efc <tcp_enqueue_flags>
 8014ee6:	4603      	mov	r3, r0
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3714      	adds	r7, #20
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd90      	pop	{r4, r7, pc}
 8014ef0:	0801c5a8 	.word	0x0801c5a8
 8014ef4:	0801c9b0 	.word	0x0801c9b0
 8014ef8:	0801c5fc 	.word	0x0801c5fc

08014efc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b08a      	sub	sp, #40	; 0x28
 8014f00:	af02      	add	r7, sp, #8
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	460b      	mov	r3, r1
 8014f06:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014f10:	78fb      	ldrb	r3, [r7, #3]
 8014f12:	f003 0303 	and.w	r3, r3, #3
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d106      	bne.n	8014f28 <tcp_enqueue_flags+0x2c>
 8014f1a:	4b67      	ldr	r3, [pc, #412]	; (80150b8 <tcp_enqueue_flags+0x1bc>)
 8014f1c:	f240 4211 	movw	r2, #1041	; 0x411
 8014f20:	4966      	ldr	r1, [pc, #408]	; (80150bc <tcp_enqueue_flags+0x1c0>)
 8014f22:	4867      	ldr	r0, [pc, #412]	; (80150c0 <tcp_enqueue_flags+0x1c4>)
 8014f24:	f004 fca8 	bl	8019878 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d106      	bne.n	8014f3c <tcp_enqueue_flags+0x40>
 8014f2e:	4b62      	ldr	r3, [pc, #392]	; (80150b8 <tcp_enqueue_flags+0x1bc>)
 8014f30:	f240 4213 	movw	r2, #1043	; 0x413
 8014f34:	4963      	ldr	r1, [pc, #396]	; (80150c4 <tcp_enqueue_flags+0x1c8>)
 8014f36:	4862      	ldr	r0, [pc, #392]	; (80150c0 <tcp_enqueue_flags+0x1c4>)
 8014f38:	f004 fc9e 	bl	8019878 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014f3c:	78fb      	ldrb	r3, [r7, #3]
 8014f3e:	f003 0302 	and.w	r3, r3, #2
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d001      	beq.n	8014f4a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014f46:	2301      	movs	r3, #1
 8014f48:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014f4a:	7ffb      	ldrb	r3, [r7, #31]
 8014f4c:	009b      	lsls	r3, r3, #2
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	f003 0304 	and.w	r3, r3, #4
 8014f54:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014f56:	7dfb      	ldrb	r3, [r7, #23]
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f5e:	4619      	mov	r1, r3
 8014f60:	2036      	movs	r0, #54	; 0x36
 8014f62:	f7fb f8b3 	bl	80100cc <pbuf_alloc>
 8014f66:	6138      	str	r0, [r7, #16]
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d109      	bne.n	8014f82 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	8b5b      	ldrh	r3, [r3, #26]
 8014f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f80:	e095      	b.n	80150ae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	895a      	ldrh	r2, [r3, #10]
 8014f86:	7dfb      	ldrb	r3, [r7, #23]
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d206      	bcs.n	8014f9c <tcp_enqueue_flags+0xa0>
 8014f8e:	4b4a      	ldr	r3, [pc, #296]	; (80150b8 <tcp_enqueue_flags+0x1bc>)
 8014f90:	f240 4239 	movw	r2, #1081	; 0x439
 8014f94:	494c      	ldr	r1, [pc, #304]	; (80150c8 <tcp_enqueue_flags+0x1cc>)
 8014f96:	484a      	ldr	r0, [pc, #296]	; (80150c0 <tcp_enqueue_flags+0x1c4>)
 8014f98:	f004 fc6e 	bl	8019878 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014fa0:	78fa      	ldrb	r2, [r7, #3]
 8014fa2:	7ffb      	ldrb	r3, [r7, #31]
 8014fa4:	9300      	str	r3, [sp, #0]
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	6939      	ldr	r1, [r7, #16]
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f7ff fd70 	bl	8014a90 <tcp_create_segment>
 8014fb0:	60f8      	str	r0, [r7, #12]
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d109      	bne.n	8014fcc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	8b5b      	ldrh	r3, [r3, #26]
 8014fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8014fca:	e070      	b.n	80150ae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	68db      	ldr	r3, [r3, #12]
 8014fd0:	f003 0303 	and.w	r3, r3, #3
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d006      	beq.n	8014fe6 <tcp_enqueue_flags+0xea>
 8014fd8:	4b37      	ldr	r3, [pc, #220]	; (80150b8 <tcp_enqueue_flags+0x1bc>)
 8014fda:	f240 4242 	movw	r2, #1090	; 0x442
 8014fde:	493b      	ldr	r1, [pc, #236]	; (80150cc <tcp_enqueue_flags+0x1d0>)
 8014fe0:	4837      	ldr	r0, [pc, #220]	; (80150c0 <tcp_enqueue_flags+0x1c4>)
 8014fe2:	f004 fc49 	bl	8019878 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	891b      	ldrh	r3, [r3, #8]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d006      	beq.n	8014ffc <tcp_enqueue_flags+0x100>
 8014fee:	4b32      	ldr	r3, [pc, #200]	; (80150b8 <tcp_enqueue_flags+0x1bc>)
 8014ff0:	f240 4243 	movw	r2, #1091	; 0x443
 8014ff4:	4936      	ldr	r1, [pc, #216]	; (80150d0 <tcp_enqueue_flags+0x1d4>)
 8014ff6:	4832      	ldr	r0, [pc, #200]	; (80150c0 <tcp_enqueue_flags+0x1c4>)
 8014ff8:	f004 fc3e 	bl	8019878 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015000:	2b00      	cmp	r3, #0
 8015002:	d103      	bne.n	801500c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	66da      	str	r2, [r3, #108]	; 0x6c
 801500a:	e00d      	b.n	8015028 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015010:	61bb      	str	r3, [r7, #24]
 8015012:	e002      	b.n	801501a <tcp_enqueue_flags+0x11e>
 8015014:	69bb      	ldr	r3, [r7, #24]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	61bb      	str	r3, [r7, #24]
 801501a:	69bb      	ldr	r3, [r7, #24]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d1f8      	bne.n	8015014 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015022:	69bb      	ldr	r3, [r7, #24]
 8015024:	68fa      	ldr	r2, [r7, #12]
 8015026:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2200      	movs	r2, #0
 801502c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015030:	78fb      	ldrb	r3, [r7, #3]
 8015032:	f003 0302 	and.w	r3, r3, #2
 8015036:	2b00      	cmp	r3, #0
 8015038:	d104      	bne.n	8015044 <tcp_enqueue_flags+0x148>
 801503a:	78fb      	ldrb	r3, [r7, #3]
 801503c:	f003 0301 	and.w	r3, r3, #1
 8015040:	2b00      	cmp	r3, #0
 8015042:	d004      	beq.n	801504e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015048:	1c5a      	adds	r2, r3, #1
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801504e:	78fb      	ldrb	r3, [r7, #3]
 8015050:	f003 0301 	and.w	r3, r3, #1
 8015054:	2b00      	cmp	r3, #0
 8015056:	d006      	beq.n	8015066 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	8b5b      	ldrh	r3, [r3, #26]
 801505c:	f043 0320 	orr.w	r3, r3, #32
 8015060:	b29a      	uxth	r2, r3
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	4618      	mov	r0, r3
 801506c:	f7fb fba0 	bl	80107b0 <pbuf_clen>
 8015070:	4603      	mov	r3, r0
 8015072:	461a      	mov	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801507a:	4413      	add	r3, r2
 801507c:	b29a      	uxth	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801508a:	2b00      	cmp	r3, #0
 801508c:	d00e      	beq.n	80150ac <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015092:	2b00      	cmp	r3, #0
 8015094:	d10a      	bne.n	80150ac <tcp_enqueue_flags+0x1b0>
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801509a:	2b00      	cmp	r3, #0
 801509c:	d106      	bne.n	80150ac <tcp_enqueue_flags+0x1b0>
 801509e:	4b06      	ldr	r3, [pc, #24]	; (80150b8 <tcp_enqueue_flags+0x1bc>)
 80150a0:	f240 4265 	movw	r2, #1125	; 0x465
 80150a4:	490b      	ldr	r1, [pc, #44]	; (80150d4 <tcp_enqueue_flags+0x1d8>)
 80150a6:	4806      	ldr	r0, [pc, #24]	; (80150c0 <tcp_enqueue_flags+0x1c4>)
 80150a8:	f004 fbe6 	bl	8019878 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80150ac:	2300      	movs	r3, #0
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3720      	adds	r7, #32
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	0801c5a8 	.word	0x0801c5a8
 80150bc:	0801c9cc 	.word	0x0801c9cc
 80150c0:	0801c5fc 	.word	0x0801c5fc
 80150c4:	0801ca24 	.word	0x0801ca24
 80150c8:	0801ca44 	.word	0x0801ca44
 80150cc:	0801ca80 	.word	0x0801ca80
 80150d0:	0801ca98 	.word	0x0801ca98
 80150d4:	0801cac4 	.word	0x0801cac4

080150d8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80150d8:	b5b0      	push	{r4, r5, r7, lr}
 80150da:	b08a      	sub	sp, #40	; 0x28
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d106      	bne.n	80150f4 <tcp_output+0x1c>
 80150e6:	4b8a      	ldr	r3, [pc, #552]	; (8015310 <tcp_output+0x238>)
 80150e8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80150ec:	4989      	ldr	r1, [pc, #548]	; (8015314 <tcp_output+0x23c>)
 80150ee:	488a      	ldr	r0, [pc, #552]	; (8015318 <tcp_output+0x240>)
 80150f0:	f004 fbc2 	bl	8019878 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	7d1b      	ldrb	r3, [r3, #20]
 80150f8:	2b01      	cmp	r3, #1
 80150fa:	d106      	bne.n	801510a <tcp_output+0x32>
 80150fc:	4b84      	ldr	r3, [pc, #528]	; (8015310 <tcp_output+0x238>)
 80150fe:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015102:	4986      	ldr	r1, [pc, #536]	; (801531c <tcp_output+0x244>)
 8015104:	4884      	ldr	r0, [pc, #528]	; (8015318 <tcp_output+0x240>)
 8015106:	f004 fbb7 	bl	8019878 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801510a:	4b85      	ldr	r3, [pc, #532]	; (8015320 <tcp_output+0x248>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	429a      	cmp	r2, r3
 8015112:	d101      	bne.n	8015118 <tcp_output+0x40>
    return ERR_OK;
 8015114:	2300      	movs	r3, #0
 8015116:	e1ce      	b.n	80154b6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015124:	4293      	cmp	r3, r2
 8015126:	bf28      	it	cs
 8015128:	4613      	movcs	r3, r2
 801512a:	b29b      	uxth	r3, r3
 801512c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015132:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015136:	2b00      	cmp	r3, #0
 8015138:	d10b      	bne.n	8015152 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	8b5b      	ldrh	r3, [r3, #26]
 801513e:	f003 0302 	and.w	r3, r3, #2
 8015142:	2b00      	cmp	r3, #0
 8015144:	f000 81aa 	beq.w	801549c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f000 fdcb 	bl	8015ce4 <tcp_send_empty_ack>
 801514e:	4603      	mov	r3, r0
 8015150:	e1b1      	b.n	80154b6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015152:	6879      	ldr	r1, [r7, #4]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	3304      	adds	r3, #4
 8015158:	461a      	mov	r2, r3
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f7ff fc7c 	bl	8014a58 <tcp_route>
 8015160:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d102      	bne.n	801516e <tcp_output+0x96>
    return ERR_RTE;
 8015168:	f06f 0303 	mvn.w	r3, #3
 801516c:	e1a3      	b.n	80154b6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d003      	beq.n	801517c <tcp_output+0xa4>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d111      	bne.n	80151a0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d002      	beq.n	8015188 <tcp_output+0xb0>
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	3304      	adds	r3, #4
 8015186:	e000      	b.n	801518a <tcp_output+0xb2>
 8015188:	2300      	movs	r3, #0
 801518a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d102      	bne.n	8015198 <tcp_output+0xc0>
      return ERR_RTE;
 8015192:	f06f 0303 	mvn.w	r3, #3
 8015196:	e18e      	b.n	80154b6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80151a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a2:	68db      	ldr	r3, [r3, #12]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7f9 fe97 	bl	800eeda <lwip_htonl>
 80151ac:	4602      	mov	r2, r0
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151b2:	1ad3      	subs	r3, r2, r3
 80151b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151b6:	8912      	ldrh	r2, [r2, #8]
 80151b8:	4413      	add	r3, r2
 80151ba:	69ba      	ldr	r2, [r7, #24]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d227      	bcs.n	8015210 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80151c6:	461a      	mov	r2, r3
 80151c8:	69bb      	ldr	r3, [r7, #24]
 80151ca:	4293      	cmp	r3, r2
 80151cc:	d114      	bne.n	80151f8 <tcp_output+0x120>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d110      	bne.n	80151f8 <tcp_output+0x120>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d10b      	bne.n	80151f8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2200      	movs	r2, #0
 80151e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2201      	movs	r2, #1
 80151ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2200      	movs	r2, #0
 80151f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	8b5b      	ldrh	r3, [r3, #26]
 80151fc:	f003 0302 	and.w	r3, r3, #2
 8015200:	2b00      	cmp	r3, #0
 8015202:	f000 814d 	beq.w	80154a0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f000 fd6c 	bl	8015ce4 <tcp_send_empty_ack>
 801520c:	4603      	mov	r3, r0
 801520e:	e152      	b.n	80154b6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801521c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801521e:	6a3b      	ldr	r3, [r7, #32]
 8015220:	2b00      	cmp	r3, #0
 8015222:	f000 811c 	beq.w	801545e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015226:	e002      	b.n	801522e <tcp_output+0x156>
 8015228:	6a3b      	ldr	r3, [r7, #32]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	623b      	str	r3, [r7, #32]
 801522e:	6a3b      	ldr	r3, [r7, #32]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d1f8      	bne.n	8015228 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015236:	e112      	b.n	801545e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	899b      	ldrh	r3, [r3, #12]
 801523e:	b29b      	uxth	r3, r3
 8015240:	4618      	mov	r0, r3
 8015242:	f7f9 fe35 	bl	800eeb0 <lwip_htons>
 8015246:	4603      	mov	r3, r0
 8015248:	b2db      	uxtb	r3, r3
 801524a:	f003 0304 	and.w	r3, r3, #4
 801524e:	2b00      	cmp	r3, #0
 8015250:	d006      	beq.n	8015260 <tcp_output+0x188>
 8015252:	4b2f      	ldr	r3, [pc, #188]	; (8015310 <tcp_output+0x238>)
 8015254:	f240 5236 	movw	r2, #1334	; 0x536
 8015258:	4932      	ldr	r1, [pc, #200]	; (8015324 <tcp_output+0x24c>)
 801525a:	482f      	ldr	r0, [pc, #188]	; (8015318 <tcp_output+0x240>)
 801525c:	f004 fb0c 	bl	8019878 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015264:	2b00      	cmp	r3, #0
 8015266:	d01f      	beq.n	80152a8 <tcp_output+0x1d0>
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	8b5b      	ldrh	r3, [r3, #26]
 801526c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015270:	2b00      	cmp	r3, #0
 8015272:	d119      	bne.n	80152a8 <tcp_output+0x1d0>
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015278:	2b00      	cmp	r3, #0
 801527a:	d00b      	beq.n	8015294 <tcp_output+0x1bc>
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d110      	bne.n	80152a8 <tcp_output+0x1d0>
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801528a:	891a      	ldrh	r2, [r3, #8]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015290:	429a      	cmp	r2, r3
 8015292:	d209      	bcs.n	80152a8 <tcp_output+0x1d0>
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801529a:	2b00      	cmp	r3, #0
 801529c:	d004      	beq.n	80152a8 <tcp_output+0x1d0>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152a4:	2b08      	cmp	r3, #8
 80152a6:	d901      	bls.n	80152ac <tcp_output+0x1d4>
 80152a8:	2301      	movs	r3, #1
 80152aa:	e000      	b.n	80152ae <tcp_output+0x1d6>
 80152ac:	2300      	movs	r3, #0
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d106      	bne.n	80152c0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	8b5b      	ldrh	r3, [r3, #26]
 80152b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f000 80e4 	beq.w	8015488 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	7d1b      	ldrb	r3, [r3, #20]
 80152c4:	2b02      	cmp	r3, #2
 80152c6:	d00d      	beq.n	80152e4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80152c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ca:	68db      	ldr	r3, [r3, #12]
 80152cc:	899b      	ldrh	r3, [r3, #12]
 80152ce:	b29c      	uxth	r4, r3
 80152d0:	2010      	movs	r0, #16
 80152d2:	f7f9 fded 	bl	800eeb0 <lwip_htons>
 80152d6:	4603      	mov	r3, r0
 80152d8:	461a      	mov	r2, r3
 80152da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	4322      	orrs	r2, r4
 80152e0:	b292      	uxth	r2, r2
 80152e2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80152e4:	697a      	ldr	r2, [r7, #20]
 80152e6:	6879      	ldr	r1, [r7, #4]
 80152e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152ea:	f000 f909 	bl	8015500 <tcp_output_segment>
 80152ee:	4603      	mov	r3, r0
 80152f0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80152f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d016      	beq.n	8015328 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	8b5b      	ldrh	r3, [r3, #26]
 80152fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015302:	b29a      	uxth	r2, r3
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	835a      	strh	r2, [r3, #26]
      return err;
 8015308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801530c:	e0d3      	b.n	80154b6 <tcp_output+0x3de>
 801530e:	bf00      	nop
 8015310:	0801c5a8 	.word	0x0801c5a8
 8015314:	0801caec 	.word	0x0801caec
 8015318:	0801c5fc 	.word	0x0801c5fc
 801531c:	0801cb04 	.word	0x0801cb04
 8015320:	2000dae4 	.word	0x2000dae4
 8015324:	0801cb2c 	.word	0x0801cb2c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	7d1b      	ldrb	r3, [r3, #20]
 8015334:	2b02      	cmp	r3, #2
 8015336:	d006      	beq.n	8015346 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	8b5b      	ldrh	r3, [r3, #26]
 801533c:	f023 0303 	bic.w	r3, r3, #3
 8015340:	b29a      	uxth	r2, r3
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015348:	68db      	ldr	r3, [r3, #12]
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	4618      	mov	r0, r3
 801534e:	f7f9 fdc4 	bl	800eeda <lwip_htonl>
 8015352:	4604      	mov	r4, r0
 8015354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015356:	891b      	ldrh	r3, [r3, #8]
 8015358:	461d      	mov	r5, r3
 801535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535c:	68db      	ldr	r3, [r3, #12]
 801535e:	899b      	ldrh	r3, [r3, #12]
 8015360:	b29b      	uxth	r3, r3
 8015362:	4618      	mov	r0, r3
 8015364:	f7f9 fda4 	bl	800eeb0 <lwip_htons>
 8015368:	4603      	mov	r3, r0
 801536a:	b2db      	uxtb	r3, r3
 801536c:	f003 0303 	and.w	r3, r3, #3
 8015370:	2b00      	cmp	r3, #0
 8015372:	d001      	beq.n	8015378 <tcp_output+0x2a0>
 8015374:	2301      	movs	r3, #1
 8015376:	e000      	b.n	801537a <tcp_output+0x2a2>
 8015378:	2300      	movs	r3, #0
 801537a:	442b      	add	r3, r5
 801537c:	4423      	add	r3, r4
 801537e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	1ad3      	subs	r3, r2, r3
 8015388:	2b00      	cmp	r3, #0
 801538a:	da02      	bge.n	8015392 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	68ba      	ldr	r2, [r7, #8]
 8015390:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015394:	891b      	ldrh	r3, [r3, #8]
 8015396:	461c      	mov	r4, r3
 8015398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539a:	68db      	ldr	r3, [r3, #12]
 801539c:	899b      	ldrh	r3, [r3, #12]
 801539e:	b29b      	uxth	r3, r3
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7f9 fd85 	bl	800eeb0 <lwip_htons>
 80153a6:	4603      	mov	r3, r0
 80153a8:	b2db      	uxtb	r3, r3
 80153aa:	f003 0303 	and.w	r3, r3, #3
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d001      	beq.n	80153b6 <tcp_output+0x2de>
 80153b2:	2301      	movs	r3, #1
 80153b4:	e000      	b.n	80153b8 <tcp_output+0x2e0>
 80153b6:	2300      	movs	r3, #0
 80153b8:	4423      	add	r3, r4
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d049      	beq.n	8015452 <tcp_output+0x37a>
      seg->next = NULL;
 80153be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c0:	2200      	movs	r2, #0
 80153c2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d105      	bne.n	80153d8 <tcp_output+0x300>
        pcb->unacked = seg;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153d0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80153d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d4:	623b      	str	r3, [r7, #32]
 80153d6:	e03f      	b.n	8015458 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80153d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153da:	68db      	ldr	r3, [r3, #12]
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	4618      	mov	r0, r3
 80153e0:	f7f9 fd7b 	bl	800eeda <lwip_htonl>
 80153e4:	4604      	mov	r4, r0
 80153e6:	6a3b      	ldr	r3, [r7, #32]
 80153e8:	68db      	ldr	r3, [r3, #12]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7f9 fd74 	bl	800eeda <lwip_htonl>
 80153f2:	4603      	mov	r3, r0
 80153f4:	1ae3      	subs	r3, r4, r3
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	da24      	bge.n	8015444 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	3370      	adds	r3, #112	; 0x70
 80153fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015400:	e002      	b.n	8015408 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015402:	69fb      	ldr	r3, [r7, #28]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d011      	beq.n	8015434 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015410:	69fb      	ldr	r3, [r7, #28]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68db      	ldr	r3, [r3, #12]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	4618      	mov	r0, r3
 801541a:	f7f9 fd5e 	bl	800eeda <lwip_htonl>
 801541e:	4604      	mov	r4, r0
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	68db      	ldr	r3, [r3, #12]
 8015424:	685b      	ldr	r3, [r3, #4]
 8015426:	4618      	mov	r0, r3
 8015428:	f7f9 fd57 	bl	800eeda <lwip_htonl>
 801542c:	4603      	mov	r3, r0
 801542e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015430:	2b00      	cmp	r3, #0
 8015432:	dbe6      	blt.n	8015402 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801543a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015440:	601a      	str	r2, [r3, #0]
 8015442:	e009      	b.n	8015458 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015444:	6a3b      	ldr	r3, [r7, #32]
 8015446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015448:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801544a:	6a3b      	ldr	r3, [r7, #32]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	623b      	str	r3, [r7, #32]
 8015450:	e002      	b.n	8015458 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015452:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015454:	f7fc fc3f 	bl	8011cd6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801545c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015460:	2b00      	cmp	r3, #0
 8015462:	d012      	beq.n	801548a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015466:	68db      	ldr	r3, [r3, #12]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	4618      	mov	r0, r3
 801546c:	f7f9 fd35 	bl	800eeda <lwip_htonl>
 8015470:	4602      	mov	r2, r0
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801547a:	8912      	ldrh	r2, [r2, #8]
 801547c:	4413      	add	r3, r2
  while (seg != NULL &&
 801547e:	69ba      	ldr	r2, [r7, #24]
 8015480:	429a      	cmp	r2, r3
 8015482:	f4bf aed9 	bcs.w	8015238 <tcp_output+0x160>
 8015486:	e000      	b.n	801548a <tcp_output+0x3b2>
      break;
 8015488:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801548e:	2b00      	cmp	r3, #0
 8015490:	d108      	bne.n	80154a4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2200      	movs	r2, #0
 8015496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801549a:	e004      	b.n	80154a6 <tcp_output+0x3ce>
    goto output_done;
 801549c:	bf00      	nop
 801549e:	e002      	b.n	80154a6 <tcp_output+0x3ce>
    goto output_done;
 80154a0:	bf00      	nop
 80154a2:	e000      	b.n	80154a6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80154a4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	8b5b      	ldrh	r3, [r3, #26]
 80154aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80154ae:	b29a      	uxth	r2, r3
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3728      	adds	r7, #40	; 0x28
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bdb0      	pop	{r4, r5, r7, pc}
 80154be:	bf00      	nop

080154c0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d106      	bne.n	80154dc <tcp_output_segment_busy+0x1c>
 80154ce:	4b09      	ldr	r3, [pc, #36]	; (80154f4 <tcp_output_segment_busy+0x34>)
 80154d0:	f240 529a 	movw	r2, #1434	; 0x59a
 80154d4:	4908      	ldr	r1, [pc, #32]	; (80154f8 <tcp_output_segment_busy+0x38>)
 80154d6:	4809      	ldr	r0, [pc, #36]	; (80154fc <tcp_output_segment_busy+0x3c>)
 80154d8:	f004 f9ce 	bl	8019878 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	685b      	ldr	r3, [r3, #4]
 80154e0:	7b9b      	ldrb	r3, [r3, #14]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d001      	beq.n	80154ea <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80154e6:	2301      	movs	r3, #1
 80154e8:	e000      	b.n	80154ec <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80154ea:	2300      	movs	r3, #0
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3708      	adds	r7, #8
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	0801c5a8 	.word	0x0801c5a8
 80154f8:	0801cb44 	.word	0x0801cb44
 80154fc:	0801c5fc 	.word	0x0801c5fc

08015500 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015500:	b5b0      	push	{r4, r5, r7, lr}
 8015502:	b08c      	sub	sp, #48	; 0x30
 8015504:	af04      	add	r7, sp, #16
 8015506:	60f8      	str	r0, [r7, #12]
 8015508:	60b9      	str	r1, [r7, #8]
 801550a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d106      	bne.n	8015520 <tcp_output_segment+0x20>
 8015512:	4b63      	ldr	r3, [pc, #396]	; (80156a0 <tcp_output_segment+0x1a0>)
 8015514:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015518:	4962      	ldr	r1, [pc, #392]	; (80156a4 <tcp_output_segment+0x1a4>)
 801551a:	4863      	ldr	r0, [pc, #396]	; (80156a8 <tcp_output_segment+0x1a8>)
 801551c:	f004 f9ac 	bl	8019878 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d106      	bne.n	8015534 <tcp_output_segment+0x34>
 8015526:	4b5e      	ldr	r3, [pc, #376]	; (80156a0 <tcp_output_segment+0x1a0>)
 8015528:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801552c:	495f      	ldr	r1, [pc, #380]	; (80156ac <tcp_output_segment+0x1ac>)
 801552e:	485e      	ldr	r0, [pc, #376]	; (80156a8 <tcp_output_segment+0x1a8>)
 8015530:	f004 f9a2 	bl	8019878 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d106      	bne.n	8015548 <tcp_output_segment+0x48>
 801553a:	4b59      	ldr	r3, [pc, #356]	; (80156a0 <tcp_output_segment+0x1a0>)
 801553c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015540:	495b      	ldr	r1, [pc, #364]	; (80156b0 <tcp_output_segment+0x1b0>)
 8015542:	4859      	ldr	r0, [pc, #356]	; (80156a8 <tcp_output_segment+0x1a8>)
 8015544:	f004 f998 	bl	8019878 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015548:	68f8      	ldr	r0, [r7, #12]
 801554a:	f7ff ffb9 	bl	80154c0 <tcp_output_segment_busy>
 801554e:	4603      	mov	r3, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	d001      	beq.n	8015558 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015554:	2300      	movs	r3, #0
 8015556:	e09f      	b.n	8015698 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	68dc      	ldr	r4, [r3, #12]
 8015560:	4610      	mov	r0, r2
 8015562:	f7f9 fcba 	bl	800eeda <lwip_htonl>
 8015566:	4603      	mov	r3, r0
 8015568:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	68dc      	ldr	r4, [r3, #12]
 8015572:	4610      	mov	r0, r2
 8015574:	f7f9 fc9c 	bl	800eeb0 <lwip_htons>
 8015578:	4603      	mov	r3, r0
 801557a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015580:	68ba      	ldr	r2, [r7, #8]
 8015582:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015584:	441a      	add	r2, r3
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	3314      	adds	r3, #20
 8015590:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	7a9b      	ldrb	r3, [r3, #10]
 8015596:	f003 0301 	and.w	r3, r3, #1
 801559a:	2b00      	cmp	r3, #0
 801559c:	d015      	beq.n	80155ca <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	3304      	adds	r3, #4
 80155a2:	461a      	mov	r2, r3
 80155a4:	6879      	ldr	r1, [r7, #4]
 80155a6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80155aa:	f7fc fe8b 	bl	80122c4 <tcp_eff_send_mss_netif>
 80155ae:	4603      	mov	r3, r0
 80155b0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80155b2:	8b7b      	ldrh	r3, [r7, #26]
 80155b4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7f9 fc8e 	bl	800eeda <lwip_htonl>
 80155be:	4602      	mov	r2, r0
 80155c0:	69fb      	ldr	r3, [r7, #28]
 80155c2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80155c4:	69fb      	ldr	r3, [r7, #28]
 80155c6:	3304      	adds	r3, #4
 80155c8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	da02      	bge.n	80155da <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	2200      	movs	r2, #0
 80155d8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d10c      	bne.n	80155fc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80155e2:	4b34      	ldr	r3, [pc, #208]	; (80156b4 <tcp_output_segment+0x1b4>)
 80155e4:	681a      	ldr	r2, [r3, #0]
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7f9 fc72 	bl	800eeda <lwip_htonl>
 80155f6:	4602      	mov	r2, r0
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	68da      	ldr	r2, [r3, #12]
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	685b      	ldr	r3, [r3, #4]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	1ad3      	subs	r3, r2, r3
 8015608:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	8959      	ldrh	r1, [r3, #10]
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	8b3a      	ldrh	r2, [r7, #24]
 8015616:	1a8a      	subs	r2, r1, r2
 8015618:	b292      	uxth	r2, r2
 801561a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	8919      	ldrh	r1, [r3, #8]
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	8b3a      	ldrh	r2, [r7, #24]
 8015628:	1a8a      	subs	r2, r1, r2
 801562a:	b292      	uxth	r2, r2
 801562c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	685b      	ldr	r3, [r3, #4]
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	68d2      	ldr	r2, [r2, #12]
 8015636:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	68db      	ldr	r3, [r3, #12]
 801563c:	2200      	movs	r2, #0
 801563e:	741a      	strb	r2, [r3, #16]
 8015640:	2200      	movs	r2, #0
 8015642:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	f103 0214 	add.w	r2, r3, #20
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	7a9b      	ldrb	r3, [r3, #10]
 8015650:	009b      	lsls	r3, r3, #2
 8015652:	f003 0304 	and.w	r3, r3, #4
 8015656:	4413      	add	r3, r2
 8015658:	69fa      	ldr	r2, [r7, #28]
 801565a:	429a      	cmp	r2, r3
 801565c:	d006      	beq.n	801566c <tcp_output_segment+0x16c>
 801565e:	4b10      	ldr	r3, [pc, #64]	; (80156a0 <tcp_output_segment+0x1a0>)
 8015660:	f240 621c 	movw	r2, #1564	; 0x61c
 8015664:	4914      	ldr	r1, [pc, #80]	; (80156b8 <tcp_output_segment+0x1b8>)
 8015666:	4810      	ldr	r0, [pc, #64]	; (80156a8 <tcp_output_segment+0x1a8>)
 8015668:	f004 f906 	bl	8019878 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	6858      	ldr	r0, [r3, #4]
 8015670:	68b9      	ldr	r1, [r7, #8]
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	1d1c      	adds	r4, r3, #4
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	7add      	ldrb	r5, [r3, #11]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	7a9b      	ldrb	r3, [r3, #10]
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	9202      	str	r2, [sp, #8]
 8015682:	2206      	movs	r2, #6
 8015684:	9201      	str	r2, [sp, #4]
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	462b      	mov	r3, r5
 801568a:	4622      	mov	r2, r4
 801568c:	f002 fdde 	bl	801824c <ip4_output_if>
 8015690:	4603      	mov	r3, r0
 8015692:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015698:	4618      	mov	r0, r3
 801569a:	3720      	adds	r7, #32
 801569c:	46bd      	mov	sp, r7
 801569e:	bdb0      	pop	{r4, r5, r7, pc}
 80156a0:	0801c5a8 	.word	0x0801c5a8
 80156a4:	0801cb6c 	.word	0x0801cb6c
 80156a8:	0801c5fc 	.word	0x0801c5fc
 80156ac:	0801cb8c 	.word	0x0801cb8c
 80156b0:	0801cbac 	.word	0x0801cbac
 80156b4:	2000da98 	.word	0x2000da98
 80156b8:	0801cbd0 	.word	0x0801cbd0

080156bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80156bc:	b5b0      	push	{r4, r5, r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d106      	bne.n	80156d8 <tcp_rexmit_rto_prepare+0x1c>
 80156ca:	4b31      	ldr	r3, [pc, #196]	; (8015790 <tcp_rexmit_rto_prepare+0xd4>)
 80156cc:	f240 6263 	movw	r2, #1635	; 0x663
 80156d0:	4930      	ldr	r1, [pc, #192]	; (8015794 <tcp_rexmit_rto_prepare+0xd8>)
 80156d2:	4831      	ldr	r0, [pc, #196]	; (8015798 <tcp_rexmit_rto_prepare+0xdc>)
 80156d4:	f004 f8d0 	bl	8019878 <iprintf>

  if (pcb->unacked == NULL) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d102      	bne.n	80156e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80156e0:	f06f 0305 	mvn.w	r3, #5
 80156e4:	e050      	b.n	8015788 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156ea:	60fb      	str	r3, [r7, #12]
 80156ec:	e00b      	b.n	8015706 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80156ee:	68f8      	ldr	r0, [r7, #12]
 80156f0:	f7ff fee6 	bl	80154c0 <tcp_output_segment_busy>
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d002      	beq.n	8015700 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80156fa:	f06f 0305 	mvn.w	r3, #5
 80156fe:	e043      	b.n	8015788 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	60fb      	str	r3, [r7, #12]
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d1ef      	bne.n	80156ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801570e:	68f8      	ldr	r0, [r7, #12]
 8015710:	f7ff fed6 	bl	80154c0 <tcp_output_segment_busy>
 8015714:	4603      	mov	r3, r0
 8015716:	2b00      	cmp	r3, #0
 8015718:	d002      	beq.n	8015720 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801571a:	f06f 0305 	mvn.w	r3, #5
 801571e:	e033      	b.n	8015788 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	8b5b      	ldrh	r3, [r3, #26]
 801573a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801573e:	b29a      	uxth	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	68db      	ldr	r3, [r3, #12]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	4618      	mov	r0, r3
 801574c:	f7f9 fbc5 	bl	800eeda <lwip_htonl>
 8015750:	4604      	mov	r4, r0
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	891b      	ldrh	r3, [r3, #8]
 8015756:	461d      	mov	r5, r3
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	899b      	ldrh	r3, [r3, #12]
 801575e:	b29b      	uxth	r3, r3
 8015760:	4618      	mov	r0, r3
 8015762:	f7f9 fba5 	bl	800eeb0 <lwip_htons>
 8015766:	4603      	mov	r3, r0
 8015768:	b2db      	uxtb	r3, r3
 801576a:	f003 0303 	and.w	r3, r3, #3
 801576e:	2b00      	cmp	r3, #0
 8015770:	d001      	beq.n	8015776 <tcp_rexmit_rto_prepare+0xba>
 8015772:	2301      	movs	r3, #1
 8015774:	e000      	b.n	8015778 <tcp_rexmit_rto_prepare+0xbc>
 8015776:	2300      	movs	r3, #0
 8015778:	442b      	add	r3, r5
 801577a:	18e2      	adds	r2, r4, r3
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2200      	movs	r2, #0
 8015784:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015786:	2300      	movs	r3, #0
}
 8015788:	4618      	mov	r0, r3
 801578a:	3710      	adds	r7, #16
 801578c:	46bd      	mov	sp, r7
 801578e:	bdb0      	pop	{r4, r5, r7, pc}
 8015790:	0801c5a8 	.word	0x0801c5a8
 8015794:	0801cbe4 	.word	0x0801cbe4
 8015798:	0801c5fc 	.word	0x0801c5fc

0801579c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d106      	bne.n	80157b8 <tcp_rexmit_rto_commit+0x1c>
 80157aa:	4b0d      	ldr	r3, [pc, #52]	; (80157e0 <tcp_rexmit_rto_commit+0x44>)
 80157ac:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80157b0:	490c      	ldr	r1, [pc, #48]	; (80157e4 <tcp_rexmit_rto_commit+0x48>)
 80157b2:	480d      	ldr	r0, [pc, #52]	; (80157e8 <tcp_rexmit_rto_commit+0x4c>)
 80157b4:	f004 f860 	bl	8019878 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80157be:	2bff      	cmp	r3, #255	; 0xff
 80157c0:	d007      	beq.n	80157d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80157c8:	3301      	adds	r3, #1
 80157ca:	b2da      	uxtb	r2, r3
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f7ff fc80 	bl	80150d8 <tcp_output>
}
 80157d8:	bf00      	nop
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	0801c5a8 	.word	0x0801c5a8
 80157e4:	0801cc08 	.word	0x0801cc08
 80157e8:	0801c5fc 	.word	0x0801c5fc

080157ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d106      	bne.n	8015808 <tcp_rexmit_rto+0x1c>
 80157fa:	4b0a      	ldr	r3, [pc, #40]	; (8015824 <tcp_rexmit_rto+0x38>)
 80157fc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015800:	4909      	ldr	r1, [pc, #36]	; (8015828 <tcp_rexmit_rto+0x3c>)
 8015802:	480a      	ldr	r0, [pc, #40]	; (801582c <tcp_rexmit_rto+0x40>)
 8015804:	f004 f838 	bl	8019878 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f7ff ff57 	bl	80156bc <tcp_rexmit_rto_prepare>
 801580e:	4603      	mov	r3, r0
 8015810:	2b00      	cmp	r3, #0
 8015812:	d102      	bne.n	801581a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f7ff ffc1 	bl	801579c <tcp_rexmit_rto_commit>
  }
}
 801581a:	bf00      	nop
 801581c:	3708      	adds	r7, #8
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	0801c5a8 	.word	0x0801c5a8
 8015828:	0801cc2c 	.word	0x0801cc2c
 801582c:	0801c5fc 	.word	0x0801c5fc

08015830 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015830:	b590      	push	{r4, r7, lr}
 8015832:	b085      	sub	sp, #20
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d106      	bne.n	801584c <tcp_rexmit+0x1c>
 801583e:	4b2f      	ldr	r3, [pc, #188]	; (80158fc <tcp_rexmit+0xcc>)
 8015840:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015844:	492e      	ldr	r1, [pc, #184]	; (8015900 <tcp_rexmit+0xd0>)
 8015846:	482f      	ldr	r0, [pc, #188]	; (8015904 <tcp_rexmit+0xd4>)
 8015848:	f004 f816 	bl	8019878 <iprintf>

  if (pcb->unacked == NULL) {
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015850:	2b00      	cmp	r3, #0
 8015852:	d102      	bne.n	801585a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015854:	f06f 0305 	mvn.w	r3, #5
 8015858:	e04c      	b.n	80158f4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801585e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015860:	68b8      	ldr	r0, [r7, #8]
 8015862:	f7ff fe2d 	bl	80154c0 <tcp_output_segment_busy>
 8015866:	4603      	mov	r3, r0
 8015868:	2b00      	cmp	r3, #0
 801586a:	d002      	beq.n	8015872 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801586c:	f06f 0305 	mvn.w	r3, #5
 8015870:	e040      	b.n	80158f4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	681a      	ldr	r2, [r3, #0]
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	336c      	adds	r3, #108	; 0x6c
 801587e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015880:	e002      	b.n	8015888 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d011      	beq.n	80158b4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	68db      	ldr	r3, [r3, #12]
 8015896:	685b      	ldr	r3, [r3, #4]
 8015898:	4618      	mov	r0, r3
 801589a:	f7f9 fb1e 	bl	800eeda <lwip_htonl>
 801589e:	4604      	mov	r4, r0
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	68db      	ldr	r3, [r3, #12]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7f9 fb17 	bl	800eeda <lwip_htonl>
 80158ac:	4603      	mov	r3, r0
 80158ae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	dbe6      	blt.n	8015882 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	68ba      	ldr	r2, [r7, #8]
 80158c0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d103      	bne.n	80158d2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2200      	movs	r2, #0
 80158ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80158d8:	2bff      	cmp	r3, #255	; 0xff
 80158da:	d007      	beq.n	80158ec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80158e2:	3301      	adds	r3, #1
 80158e4:	b2da      	uxtb	r2, r3
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2200      	movs	r2, #0
 80158f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80158f2:	2300      	movs	r3, #0
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3714      	adds	r7, #20
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd90      	pop	{r4, r7, pc}
 80158fc:	0801c5a8 	.word	0x0801c5a8
 8015900:	0801cc48 	.word	0x0801cc48
 8015904:	0801c5fc 	.word	0x0801c5fc

08015908 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d106      	bne.n	8015924 <tcp_rexmit_fast+0x1c>
 8015916:	4b2a      	ldr	r3, [pc, #168]	; (80159c0 <tcp_rexmit_fast+0xb8>)
 8015918:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801591c:	4929      	ldr	r1, [pc, #164]	; (80159c4 <tcp_rexmit_fast+0xbc>)
 801591e:	482a      	ldr	r0, [pc, #168]	; (80159c8 <tcp_rexmit_fast+0xc0>)
 8015920:	f003 ffaa 	bl	8019878 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015928:	2b00      	cmp	r3, #0
 801592a:	d044      	beq.n	80159b6 <tcp_rexmit_fast+0xae>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	8b5b      	ldrh	r3, [r3, #26]
 8015930:	f003 0304 	and.w	r3, r3, #4
 8015934:	2b00      	cmp	r3, #0
 8015936:	d13e      	bne.n	80159b6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f7ff ff79 	bl	8015830 <tcp_rexmit>
 801593e:	4603      	mov	r3, r0
 8015940:	2b00      	cmp	r3, #0
 8015942:	d138      	bne.n	80159b6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015950:	4293      	cmp	r3, r2
 8015952:	bf28      	it	cs
 8015954:	4613      	movcs	r3, r2
 8015956:	b29b      	uxth	r3, r3
 8015958:	0fda      	lsrs	r2, r3, #31
 801595a:	4413      	add	r3, r2
 801595c:	105b      	asrs	r3, r3, #1
 801595e:	b29a      	uxth	r2, r3
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801596c:	461a      	mov	r2, r3
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015972:	005b      	lsls	r3, r3, #1
 8015974:	429a      	cmp	r2, r3
 8015976:	d206      	bcs.n	8015986 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	b29a      	uxth	r2, r3
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015990:	4619      	mov	r1, r3
 8015992:	0049      	lsls	r1, r1, #1
 8015994:	440b      	add	r3, r1
 8015996:	b29b      	uxth	r3, r3
 8015998:	4413      	add	r3, r2
 801599a:	b29a      	uxth	r2, r3
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	8b5b      	ldrh	r3, [r3, #26]
 80159a6:	f043 0304 	orr.w	r3, r3, #4
 80159aa:	b29a      	uxth	r2, r3
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	2200      	movs	r2, #0
 80159b4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80159b6:	bf00      	nop
 80159b8:	3708      	adds	r7, #8
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bd80      	pop	{r7, pc}
 80159be:	bf00      	nop
 80159c0:	0801c5a8 	.word	0x0801c5a8
 80159c4:	0801cc60 	.word	0x0801cc60
 80159c8:	0801c5fc 	.word	0x0801c5fc

080159cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b086      	sub	sp, #24
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	607b      	str	r3, [r7, #4]
 80159d6:	460b      	mov	r3, r1
 80159d8:	817b      	strh	r3, [r7, #10]
 80159da:	4613      	mov	r3, r2
 80159dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80159de:	897a      	ldrh	r2, [r7, #10]
 80159e0:	893b      	ldrh	r3, [r7, #8]
 80159e2:	4413      	add	r3, r2
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	3314      	adds	r3, #20
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80159ee:	4619      	mov	r1, r3
 80159f0:	2022      	movs	r0, #34	; 0x22
 80159f2:	f7fa fb6b 	bl	80100cc <pbuf_alloc>
 80159f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d04d      	beq.n	8015a9a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80159fe:	897b      	ldrh	r3, [r7, #10]
 8015a00:	3313      	adds	r3, #19
 8015a02:	697a      	ldr	r2, [r7, #20]
 8015a04:	8952      	ldrh	r2, [r2, #10]
 8015a06:	4293      	cmp	r3, r2
 8015a08:	db06      	blt.n	8015a18 <tcp_output_alloc_header_common+0x4c>
 8015a0a:	4b26      	ldr	r3, [pc, #152]	; (8015aa4 <tcp_output_alloc_header_common+0xd8>)
 8015a0c:	f240 7223 	movw	r2, #1827	; 0x723
 8015a10:	4925      	ldr	r1, [pc, #148]	; (8015aa8 <tcp_output_alloc_header_common+0xdc>)
 8015a12:	4826      	ldr	r0, [pc, #152]	; (8015aac <tcp_output_alloc_header_common+0xe0>)
 8015a14:	f003 ff30 	bl	8019878 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015a1e:	8c3b      	ldrh	r3, [r7, #32]
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f9 fa45 	bl	800eeb0 <lwip_htons>
 8015a26:	4603      	mov	r3, r0
 8015a28:	461a      	mov	r2, r3
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7f9 fa3d 	bl	800eeb0 <lwip_htons>
 8015a36:	4603      	mov	r3, r0
 8015a38:	461a      	mov	r2, r3
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	f7f9 fa48 	bl	800eeda <lwip_htonl>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015a50:	897b      	ldrh	r3, [r7, #10]
 8015a52:	089b      	lsrs	r3, r3, #2
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	3305      	adds	r3, #5
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	031b      	lsls	r3, r3, #12
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	4313      	orrs	r3, r2
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7f9 fa21 	bl	800eeb0 <lwip_htons>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	461a      	mov	r2, r3
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015a76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f7f9 fa19 	bl	800eeb0 <lwip_htons>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	461a      	mov	r2, r3
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	741a      	strb	r2, [r3, #16]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015a90:	693b      	ldr	r3, [r7, #16]
 8015a92:	2200      	movs	r2, #0
 8015a94:	749a      	strb	r2, [r3, #18]
 8015a96:	2200      	movs	r2, #0
 8015a98:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015a9a:	697b      	ldr	r3, [r7, #20]
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3718      	adds	r7, #24
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	0801c5a8 	.word	0x0801c5a8
 8015aa8:	0801cc80 	.word	0x0801cc80
 8015aac:	0801c5fc 	.word	0x0801c5fc

08015ab0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015ab0:	b5b0      	push	{r4, r5, r7, lr}
 8015ab2:	b08a      	sub	sp, #40	; 0x28
 8015ab4:	af04      	add	r7, sp, #16
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	607b      	str	r3, [r7, #4]
 8015aba:	460b      	mov	r3, r1
 8015abc:	817b      	strh	r3, [r7, #10]
 8015abe:	4613      	mov	r3, r2
 8015ac0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d106      	bne.n	8015ad6 <tcp_output_alloc_header+0x26>
 8015ac8:	4b15      	ldr	r3, [pc, #84]	; (8015b20 <tcp_output_alloc_header+0x70>)
 8015aca:	f240 7242 	movw	r2, #1858	; 0x742
 8015ace:	4915      	ldr	r1, [pc, #84]	; (8015b24 <tcp_output_alloc_header+0x74>)
 8015ad0:	4815      	ldr	r0, [pc, #84]	; (8015b28 <tcp_output_alloc_header+0x78>)
 8015ad2:	f003 fed1 	bl	8019878 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	8adb      	ldrh	r3, [r3, #22]
 8015ade:	68fa      	ldr	r2, [r7, #12]
 8015ae0:	8b12      	ldrh	r2, [r2, #24]
 8015ae2:	68f9      	ldr	r1, [r7, #12]
 8015ae4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015ae6:	893d      	ldrh	r5, [r7, #8]
 8015ae8:	897c      	ldrh	r4, [r7, #10]
 8015aea:	9103      	str	r1, [sp, #12]
 8015aec:	2110      	movs	r1, #16
 8015aee:	9102      	str	r1, [sp, #8]
 8015af0:	9201      	str	r2, [sp, #4]
 8015af2:	9300      	str	r3, [sp, #0]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	462a      	mov	r2, r5
 8015af8:	4621      	mov	r1, r4
 8015afa:	f7ff ff67 	bl	80159cc <tcp_output_alloc_header_common>
 8015afe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d006      	beq.n	8015b14 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0a:	68fa      	ldr	r2, [r7, #12]
 8015b0c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015b0e:	441a      	add	r2, r3
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015b14:	697b      	ldr	r3, [r7, #20]
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3718      	adds	r7, #24
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	0801c5a8 	.word	0x0801c5a8
 8015b24:	0801ccb0 	.word	0x0801ccb0
 8015b28:	0801c5fc 	.word	0x0801c5fc

08015b2c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b088      	sub	sp, #32
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	4611      	mov	r1, r2
 8015b38:	461a      	mov	r2, r3
 8015b3a:	460b      	mov	r3, r1
 8015b3c:	71fb      	strb	r3, [r7, #7]
 8015b3e:	4613      	mov	r3, r2
 8015b40:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d106      	bne.n	8015b5a <tcp_output_fill_options+0x2e>
 8015b4c:	4b13      	ldr	r3, [pc, #76]	; (8015b9c <tcp_output_fill_options+0x70>)
 8015b4e:	f240 7256 	movw	r2, #1878	; 0x756
 8015b52:	4913      	ldr	r1, [pc, #76]	; (8015ba0 <tcp_output_fill_options+0x74>)
 8015b54:	4813      	ldr	r0, [pc, #76]	; (8015ba4 <tcp_output_fill_options+0x78>)
 8015b56:	f003 fe8f 	bl	8019878 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015b60:	69bb      	ldr	r3, [r7, #24]
 8015b62:	3314      	adds	r3, #20
 8015b64:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	f103 0214 	add.w	r2, r3, #20
 8015b6c:	8bfb      	ldrh	r3, [r7, #30]
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	4619      	mov	r1, r3
 8015b72:	79fb      	ldrb	r3, [r7, #7]
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	f003 0304 	and.w	r3, r3, #4
 8015b7a:	440b      	add	r3, r1
 8015b7c:	4413      	add	r3, r2
 8015b7e:	697a      	ldr	r2, [r7, #20]
 8015b80:	429a      	cmp	r2, r3
 8015b82:	d006      	beq.n	8015b92 <tcp_output_fill_options+0x66>
 8015b84:	4b05      	ldr	r3, [pc, #20]	; (8015b9c <tcp_output_fill_options+0x70>)
 8015b86:	f240 7275 	movw	r2, #1909	; 0x775
 8015b8a:	4907      	ldr	r1, [pc, #28]	; (8015ba8 <tcp_output_fill_options+0x7c>)
 8015b8c:	4805      	ldr	r0, [pc, #20]	; (8015ba4 <tcp_output_fill_options+0x78>)
 8015b8e:	f003 fe73 	bl	8019878 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015b92:	bf00      	nop
 8015b94:	3720      	adds	r7, #32
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	0801c5a8 	.word	0x0801c5a8
 8015ba0:	0801ccd8 	.word	0x0801ccd8
 8015ba4:	0801c5fc 	.word	0x0801c5fc
 8015ba8:	0801cbd0 	.word	0x0801cbd0

08015bac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08a      	sub	sp, #40	; 0x28
 8015bb0:	af04      	add	r7, sp, #16
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d106      	bne.n	8015bce <tcp_output_control_segment+0x22>
 8015bc0:	4b1c      	ldr	r3, [pc, #112]	; (8015c34 <tcp_output_control_segment+0x88>)
 8015bc2:	f240 7287 	movw	r2, #1927	; 0x787
 8015bc6:	491c      	ldr	r1, [pc, #112]	; (8015c38 <tcp_output_control_segment+0x8c>)
 8015bc8:	481c      	ldr	r0, [pc, #112]	; (8015c3c <tcp_output_control_segment+0x90>)
 8015bca:	f003 fe55 	bl	8019878 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015bce:	683a      	ldr	r2, [r7, #0]
 8015bd0:	6879      	ldr	r1, [r7, #4]
 8015bd2:	68f8      	ldr	r0, [r7, #12]
 8015bd4:	f7fe ff40 	bl	8014a58 <tcp_route>
 8015bd8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015bda:	693b      	ldr	r3, [r7, #16]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d102      	bne.n	8015be6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015be0:	23fc      	movs	r3, #252	; 0xfc
 8015be2:	75fb      	strb	r3, [r7, #23]
 8015be4:	e01c      	b.n	8015c20 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d006      	beq.n	8015bfa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	7adb      	ldrb	r3, [r3, #11]
 8015bf0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	7a9b      	ldrb	r3, [r3, #10]
 8015bf6:	757b      	strb	r3, [r7, #21]
 8015bf8:	e003      	b.n	8015c02 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015bfa:	23ff      	movs	r3, #255	; 0xff
 8015bfc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015c02:	7dba      	ldrb	r2, [r7, #22]
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	9302      	str	r3, [sp, #8]
 8015c08:	2306      	movs	r3, #6
 8015c0a:	9301      	str	r3, [sp, #4]
 8015c0c:	7d7b      	ldrb	r3, [r7, #21]
 8015c0e:	9300      	str	r3, [sp, #0]
 8015c10:	4613      	mov	r3, r2
 8015c12:	683a      	ldr	r2, [r7, #0]
 8015c14:	6879      	ldr	r1, [r7, #4]
 8015c16:	68b8      	ldr	r0, [r7, #8]
 8015c18:	f002 fb18 	bl	801824c <ip4_output_if>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015c20:	68b8      	ldr	r0, [r7, #8]
 8015c22:	f7fa fd37 	bl	8010694 <pbuf_free>
  return err;
 8015c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	3718      	adds	r7, #24
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bd80      	pop	{r7, pc}
 8015c32:	bf00      	nop
 8015c34:	0801c5a8 	.word	0x0801c5a8
 8015c38:	0801cd00 	.word	0x0801cd00
 8015c3c:	0801c5fc 	.word	0x0801c5fc

08015c40 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015c40:	b590      	push	{r4, r7, lr}
 8015c42:	b08b      	sub	sp, #44	; 0x2c
 8015c44:	af04      	add	r7, sp, #16
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
 8015c4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d106      	bne.n	8015c62 <tcp_rst+0x22>
 8015c54:	4b1f      	ldr	r3, [pc, #124]	; (8015cd4 <tcp_rst+0x94>)
 8015c56:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015c5a:	491f      	ldr	r1, [pc, #124]	; (8015cd8 <tcp_rst+0x98>)
 8015c5c:	481f      	ldr	r0, [pc, #124]	; (8015cdc <tcp_rst+0x9c>)
 8015c5e:	f003 fe0b 	bl	8019878 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d106      	bne.n	8015c76 <tcp_rst+0x36>
 8015c68:	4b1a      	ldr	r3, [pc, #104]	; (8015cd4 <tcp_rst+0x94>)
 8015c6a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015c6e:	491c      	ldr	r1, [pc, #112]	; (8015ce0 <tcp_rst+0xa0>)
 8015c70:	481a      	ldr	r0, [pc, #104]	; (8015cdc <tcp_rst+0x9c>)
 8015c72:	f003 fe01 	bl	8019878 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c76:	2300      	movs	r3, #0
 8015c78:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015c7a:	f246 0308 	movw	r3, #24584	; 0x6008
 8015c7e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015c80:	7dfb      	ldrb	r3, [r7, #23]
 8015c82:	b29c      	uxth	r4, r3
 8015c84:	68b8      	ldr	r0, [r7, #8]
 8015c86:	f7f9 f928 	bl	800eeda <lwip_htonl>
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	8abb      	ldrh	r3, [r7, #20]
 8015c8e:	9303      	str	r3, [sp, #12]
 8015c90:	2314      	movs	r3, #20
 8015c92:	9302      	str	r3, [sp, #8]
 8015c94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015c96:	9301      	str	r3, [sp, #4]
 8015c98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015c9a:	9300      	str	r3, [sp, #0]
 8015c9c:	4613      	mov	r3, r2
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	4621      	mov	r1, r4
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f7ff fe92 	bl	80159cc <tcp_output_alloc_header_common>
 8015ca8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00c      	beq.n	8015cca <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015cb0:	7dfb      	ldrb	r3, [r7, #23]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	6939      	ldr	r1, [r7, #16]
 8015cb6:	68f8      	ldr	r0, [r7, #12]
 8015cb8:	f7ff ff38 	bl	8015b2c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cbe:	683a      	ldr	r2, [r7, #0]
 8015cc0:	6939      	ldr	r1, [r7, #16]
 8015cc2:	68f8      	ldr	r0, [r7, #12]
 8015cc4:	f7ff ff72 	bl	8015bac <tcp_output_control_segment>
 8015cc8:	e000      	b.n	8015ccc <tcp_rst+0x8c>
    return;
 8015cca:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015ccc:	371c      	adds	r7, #28
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd90      	pop	{r4, r7, pc}
 8015cd2:	bf00      	nop
 8015cd4:	0801c5a8 	.word	0x0801c5a8
 8015cd8:	0801cd2c 	.word	0x0801cd2c
 8015cdc:	0801c5fc 	.word	0x0801c5fc
 8015ce0:	0801cd48 	.word	0x0801cd48

08015ce4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015ce4:	b590      	push	{r4, r7, lr}
 8015ce6:	b087      	sub	sp, #28
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015cec:	2300      	movs	r3, #0
 8015cee:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d106      	bne.n	8015d08 <tcp_send_empty_ack+0x24>
 8015cfa:	4b28      	ldr	r3, [pc, #160]	; (8015d9c <tcp_send_empty_ack+0xb8>)
 8015cfc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015d00:	4927      	ldr	r1, [pc, #156]	; (8015da0 <tcp_send_empty_ack+0xbc>)
 8015d02:	4828      	ldr	r0, [pc, #160]	; (8015da4 <tcp_send_empty_ack+0xc0>)
 8015d04:	f003 fdb8 	bl	8019878 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d08:	7dfb      	ldrb	r3, [r7, #23]
 8015d0a:	009b      	lsls	r3, r3, #2
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	f003 0304 	and.w	r3, r3, #4
 8015d12:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015d14:	7d7b      	ldrb	r3, [r7, #21]
 8015d16:	b29c      	uxth	r4, r3
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7f9 f8dc 	bl	800eeda <lwip_htonl>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2200      	movs	r2, #0
 8015d26:	4621      	mov	r1, r4
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f7ff fec1 	bl	8015ab0 <tcp_output_alloc_header>
 8015d2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d109      	bne.n	8015d4a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	8b5b      	ldrh	r3, [r3, #26]
 8015d3a:	f043 0303 	orr.w	r3, r3, #3
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015d44:	f06f 0301 	mvn.w	r3, #1
 8015d48:	e023      	b.n	8015d92 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015d4a:	7dbb      	ldrb	r3, [r7, #22]
 8015d4c:	7dfa      	ldrb	r2, [r7, #23]
 8015d4e:	6939      	ldr	r1, [r7, #16]
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7ff feeb 	bl	8015b2c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015d56:	687a      	ldr	r2, [r7, #4]
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	3304      	adds	r3, #4
 8015d5c:	6939      	ldr	r1, [r7, #16]
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f7ff ff24 	bl	8015bac <tcp_output_control_segment>
 8015d64:	4603      	mov	r3, r0
 8015d66:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d007      	beq.n	8015d80 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	8b5b      	ldrh	r3, [r3, #26]
 8015d74:	f043 0303 	orr.w	r3, r3, #3
 8015d78:	b29a      	uxth	r2, r3
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	835a      	strh	r2, [r3, #26]
 8015d7e:	e006      	b.n	8015d8e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	8b5b      	ldrh	r3, [r3, #26]
 8015d84:	f023 0303 	bic.w	r3, r3, #3
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	371c      	adds	r7, #28
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd90      	pop	{r4, r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	0801c5a8 	.word	0x0801c5a8
 8015da0:	0801cd64 	.word	0x0801cd64
 8015da4:	0801c5fc 	.word	0x0801c5fc

08015da8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015da8:	b590      	push	{r4, r7, lr}
 8015daa:	b087      	sub	sp, #28
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015db0:	2300      	movs	r3, #0
 8015db2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d106      	bne.n	8015dc8 <tcp_keepalive+0x20>
 8015dba:	4b18      	ldr	r3, [pc, #96]	; (8015e1c <tcp_keepalive+0x74>)
 8015dbc:	f640 0224 	movw	r2, #2084	; 0x824
 8015dc0:	4917      	ldr	r1, [pc, #92]	; (8015e20 <tcp_keepalive+0x78>)
 8015dc2:	4818      	ldr	r0, [pc, #96]	; (8015e24 <tcp_keepalive+0x7c>)
 8015dc4:	f003 fd58 	bl	8019878 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015dc8:	7dfb      	ldrb	r3, [r7, #23]
 8015dca:	b29c      	uxth	r4, r3
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dd0:	3b01      	subs	r3, #1
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7f9 f881 	bl	800eeda <lwip_htonl>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	2200      	movs	r2, #0
 8015ddc:	4621      	mov	r1, r4
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f7ff fe66 	bl	8015ab0 <tcp_output_alloc_header>
 8015de4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d102      	bne.n	8015df2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295
 8015df0:	e010      	b.n	8015e14 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015df2:	7dfb      	ldrb	r3, [r7, #23]
 8015df4:	2200      	movs	r2, #0
 8015df6:	6939      	ldr	r1, [r7, #16]
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f7ff fe97 	bl	8015b2c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	3304      	adds	r3, #4
 8015e04:	6939      	ldr	r1, [r7, #16]
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f7ff fed0 	bl	8015bac <tcp_output_control_segment>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	371c      	adds	r7, #28
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd90      	pop	{r4, r7, pc}
 8015e1c:	0801c5a8 	.word	0x0801c5a8
 8015e20:	0801cd84 	.word	0x0801cd84
 8015e24:	0801c5fc 	.word	0x0801c5fc

08015e28 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015e28:	b590      	push	{r4, r7, lr}
 8015e2a:	b08b      	sub	sp, #44	; 0x2c
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015e30:	2300      	movs	r3, #0
 8015e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d106      	bne.n	8015e4a <tcp_zero_window_probe+0x22>
 8015e3c:	4b4c      	ldr	r3, [pc, #304]	; (8015f70 <tcp_zero_window_probe+0x148>)
 8015e3e:	f640 024f 	movw	r2, #2127	; 0x84f
 8015e42:	494c      	ldr	r1, [pc, #304]	; (8015f74 <tcp_zero_window_probe+0x14c>)
 8015e44:	484c      	ldr	r0, [pc, #304]	; (8015f78 <tcp_zero_window_probe+0x150>)
 8015e46:	f003 fd17 	bl	8019878 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e4e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015e50:	6a3b      	ldr	r3, [r7, #32]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d101      	bne.n	8015e5a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015e56:	2300      	movs	r3, #0
 8015e58:	e086      	b.n	8015f68 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015e60:	2bff      	cmp	r3, #255	; 0xff
 8015e62:	d007      	beq.n	8015e74 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	b2da      	uxtb	r2, r3
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015e74:	6a3b      	ldr	r3, [r7, #32]
 8015e76:	68db      	ldr	r3, [r3, #12]
 8015e78:	899b      	ldrh	r3, [r3, #12]
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7f9 f817 	bl	800eeb0 <lwip_htons>
 8015e82:	4603      	mov	r3, r0
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	f003 0301 	and.w	r3, r3, #1
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d005      	beq.n	8015e9a <tcp_zero_window_probe+0x72>
 8015e8e:	6a3b      	ldr	r3, [r7, #32]
 8015e90:	891b      	ldrh	r3, [r3, #8]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d101      	bne.n	8015e9a <tcp_zero_window_probe+0x72>
 8015e96:	2301      	movs	r3, #1
 8015e98:	e000      	b.n	8015e9c <tcp_zero_window_probe+0x74>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015e9e:	7ffb      	ldrb	r3, [r7, #31]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	bf0c      	ite	eq
 8015ea4:	2301      	moveq	r3, #1
 8015ea6:	2300      	movne	r3, #0
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eb0:	b299      	uxth	r1, r3
 8015eb2:	6a3b      	ldr	r3, [r7, #32]
 8015eb4:	68db      	ldr	r3, [r3, #12]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	8bba      	ldrh	r2, [r7, #28]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f7ff fdf8 	bl	8015ab0 <tcp_output_alloc_header>
 8015ec0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d102      	bne.n	8015ece <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8015ecc:	e04c      	b.n	8015f68 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015ece:	69bb      	ldr	r3, [r7, #24]
 8015ed0:	685b      	ldr	r3, [r3, #4]
 8015ed2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015ed4:	7ffb      	ldrb	r3, [r7, #31]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d011      	beq.n	8015efe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	899b      	ldrh	r3, [r3, #12]
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	b21b      	sxth	r3, r3
 8015ee2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015ee6:	b21c      	sxth	r4, r3
 8015ee8:	2011      	movs	r0, #17
 8015eea:	f7f8 ffe1 	bl	800eeb0 <lwip_htons>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	b21b      	sxth	r3, r3
 8015ef2:	4323      	orrs	r3, r4
 8015ef4:	b21b      	sxth	r3, r3
 8015ef6:	b29a      	uxth	r2, r3
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	819a      	strh	r2, [r3, #12]
 8015efc:	e010      	b.n	8015f20 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015efe:	69bb      	ldr	r3, [r7, #24]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	3314      	adds	r3, #20
 8015f04:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015f06:	6a3b      	ldr	r3, [r7, #32]
 8015f08:	6858      	ldr	r0, [r3, #4]
 8015f0a:	6a3b      	ldr	r3, [r7, #32]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	891a      	ldrh	r2, [r3, #8]
 8015f10:	6a3b      	ldr	r3, [r7, #32]
 8015f12:	891b      	ldrh	r3, [r3, #8]
 8015f14:	1ad3      	subs	r3, r2, r3
 8015f16:	b29b      	uxth	r3, r3
 8015f18:	2201      	movs	r2, #1
 8015f1a:	6939      	ldr	r1, [r7, #16]
 8015f1c:	f7fa fdc0 	bl	8010aa0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015f20:	6a3b      	ldr	r3, [r7, #32]
 8015f22:	68db      	ldr	r3, [r3, #12]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7f8 ffd7 	bl	800eeda <lwip_htonl>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	3301      	adds	r3, #1
 8015f30:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	1ad3      	subs	r3, r2, r3
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	da02      	bge.n	8015f44 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	68fa      	ldr	r2, [r7, #12]
 8015f42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f48:	2200      	movs	r2, #0
 8015f4a:	69b9      	ldr	r1, [r7, #24]
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7ff fded 	bl	8015b2c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	3304      	adds	r3, #4
 8015f58:	69b9      	ldr	r1, [r7, #24]
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7ff fe26 	bl	8015bac <tcp_output_control_segment>
 8015f60:	4603      	mov	r3, r0
 8015f62:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015f64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	372c      	adds	r7, #44	; 0x2c
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd90      	pop	{r4, r7, pc}
 8015f70:	0801c5a8 	.word	0x0801c5a8
 8015f74:	0801cda0 	.word	0x0801cda0
 8015f78:	0801c5fc 	.word	0x0801c5fc

08015f7c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b082      	sub	sp, #8
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015f84:	f7fa ff0c 	bl	8010da0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015f88:	4b0a      	ldr	r3, [pc, #40]	; (8015fb4 <tcpip_tcp_timer+0x38>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d103      	bne.n	8015f98 <tcpip_tcp_timer+0x1c>
 8015f90:	4b09      	ldr	r3, [pc, #36]	; (8015fb8 <tcpip_tcp_timer+0x3c>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d005      	beq.n	8015fa4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015f98:	2200      	movs	r2, #0
 8015f9a:	4908      	ldr	r1, [pc, #32]	; (8015fbc <tcpip_tcp_timer+0x40>)
 8015f9c:	20fa      	movs	r0, #250	; 0xfa
 8015f9e:	f000 f8f3 	bl	8016188 <sys_timeout>
 8015fa2:	e003      	b.n	8015fac <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015fa4:	4b06      	ldr	r3, [pc, #24]	; (8015fc0 <tcpip_tcp_timer+0x44>)
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	601a      	str	r2, [r3, #0]
  }
}
 8015faa:	bf00      	nop
 8015fac:	bf00      	nop
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}
 8015fb4:	2000daa4 	.word	0x2000daa4
 8015fb8:	2000daa8 	.word	0x2000daa8
 8015fbc:	08015f7d 	.word	0x08015f7d
 8015fc0:	2000daf0 	.word	0x2000daf0

08015fc4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015fc8:	4b0a      	ldr	r3, [pc, #40]	; (8015ff4 <tcp_timer_needed+0x30>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d10f      	bne.n	8015ff0 <tcp_timer_needed+0x2c>
 8015fd0:	4b09      	ldr	r3, [pc, #36]	; (8015ff8 <tcp_timer_needed+0x34>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d103      	bne.n	8015fe0 <tcp_timer_needed+0x1c>
 8015fd8:	4b08      	ldr	r3, [pc, #32]	; (8015ffc <tcp_timer_needed+0x38>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d007      	beq.n	8015ff0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015fe0:	4b04      	ldr	r3, [pc, #16]	; (8015ff4 <tcp_timer_needed+0x30>)
 8015fe2:	2201      	movs	r2, #1
 8015fe4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	4905      	ldr	r1, [pc, #20]	; (8016000 <tcp_timer_needed+0x3c>)
 8015fea:	20fa      	movs	r0, #250	; 0xfa
 8015fec:	f000 f8cc 	bl	8016188 <sys_timeout>
  }
}
 8015ff0:	bf00      	nop
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	2000daf0 	.word	0x2000daf0
 8015ff8:	2000daa4 	.word	0x2000daa4
 8015ffc:	2000daa8 	.word	0x2000daa8
 8016000:	08015f7d 	.word	0x08015f7d

08016004 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b086      	sub	sp, #24
 8016008:	af00      	add	r7, sp, #0
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	60b9      	str	r1, [r7, #8]
 801600e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016010:	200a      	movs	r0, #10
 8016012:	f7f9 fc25 	bl	800f860 <memp_malloc>
 8016016:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d109      	bne.n	8016032 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d151      	bne.n	80160c8 <sys_timeout_abs+0xc4>
 8016024:	4b2a      	ldr	r3, [pc, #168]	; (80160d0 <sys_timeout_abs+0xcc>)
 8016026:	22be      	movs	r2, #190	; 0xbe
 8016028:	492a      	ldr	r1, [pc, #168]	; (80160d4 <sys_timeout_abs+0xd0>)
 801602a:	482b      	ldr	r0, [pc, #172]	; (80160d8 <sys_timeout_abs+0xd4>)
 801602c:	f003 fc24 	bl	8019878 <iprintf>
    return;
 8016030:	e04a      	b.n	80160c8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	2200      	movs	r2, #0
 8016036:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	68ba      	ldr	r2, [r7, #8]
 801603c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	687a      	ldr	r2, [r7, #4]
 8016042:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	68fa      	ldr	r2, [r7, #12]
 8016048:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801604a:	4b24      	ldr	r3, [pc, #144]	; (80160dc <sys_timeout_abs+0xd8>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d103      	bne.n	801605a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016052:	4a22      	ldr	r2, [pc, #136]	; (80160dc <sys_timeout_abs+0xd8>)
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	6013      	str	r3, [r2, #0]
    return;
 8016058:	e037      	b.n	80160ca <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	685a      	ldr	r2, [r3, #4]
 801605e:	4b1f      	ldr	r3, [pc, #124]	; (80160dc <sys_timeout_abs+0xd8>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	1ad3      	subs	r3, r2, r3
 8016066:	0fdb      	lsrs	r3, r3, #31
 8016068:	f003 0301 	and.w	r3, r3, #1
 801606c:	b2db      	uxtb	r3, r3
 801606e:	2b00      	cmp	r3, #0
 8016070:	d007      	beq.n	8016082 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016072:	4b1a      	ldr	r3, [pc, #104]	; (80160dc <sys_timeout_abs+0xd8>)
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801607a:	4a18      	ldr	r2, [pc, #96]	; (80160dc <sys_timeout_abs+0xd8>)
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	6013      	str	r3, [r2, #0]
 8016080:	e023      	b.n	80160ca <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016082:	4b16      	ldr	r3, [pc, #88]	; (80160dc <sys_timeout_abs+0xd8>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	617b      	str	r3, [r7, #20]
 8016088:	e01a      	b.n	80160c0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d00b      	beq.n	80160aa <sys_timeout_abs+0xa6>
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	685a      	ldr	r2, [r3, #4]
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	1ad3      	subs	r3, r2, r3
 801609e:	0fdb      	lsrs	r3, r3, #31
 80160a0:	f003 0301 	and.w	r3, r3, #1
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d007      	beq.n	80160ba <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	681a      	ldr	r2, [r3, #0]
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	693a      	ldr	r2, [r7, #16]
 80160b6:	601a      	str	r2, [r3, #0]
        break;
 80160b8:	e007      	b.n	80160ca <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	617b      	str	r3, [r7, #20]
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d1e1      	bne.n	801608a <sys_timeout_abs+0x86>
 80160c6:	e000      	b.n	80160ca <sys_timeout_abs+0xc6>
    return;
 80160c8:	bf00      	nop
      }
    }
  }
}
 80160ca:	3718      	adds	r7, #24
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}
 80160d0:	0801cdc4 	.word	0x0801cdc4
 80160d4:	0801cdf8 	.word	0x0801cdf8
 80160d8:	0801ce38 	.word	0x0801ce38
 80160dc:	2000dae8 	.word	0x2000dae8

080160e0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b086      	sub	sp, #24
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80160ec:	697b      	ldr	r3, [r7, #20]
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	4798      	blx	r3

  now = sys_now();
 80160f2:	f7f4 fcdd 	bl	800aab0 <sys_now>
 80160f6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	4b0f      	ldr	r3, [pc, #60]	; (801613c <lwip_cyclic_timer+0x5c>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	4413      	add	r3, r2
 8016102:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016104:	68fa      	ldr	r2, [r7, #12]
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	1ad3      	subs	r3, r2, r3
 801610a:	0fdb      	lsrs	r3, r3, #31
 801610c:	f003 0301 	and.w	r3, r3, #1
 8016110:	b2db      	uxtb	r3, r3
 8016112:	2b00      	cmp	r3, #0
 8016114:	d009      	beq.n	801612a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	681a      	ldr	r2, [r3, #0]
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	4413      	add	r3, r2
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	4907      	ldr	r1, [pc, #28]	; (8016140 <lwip_cyclic_timer+0x60>)
 8016122:	4618      	mov	r0, r3
 8016124:	f7ff ff6e 	bl	8016004 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016128:	e004      	b.n	8016134 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801612a:	687a      	ldr	r2, [r7, #4]
 801612c:	4904      	ldr	r1, [pc, #16]	; (8016140 <lwip_cyclic_timer+0x60>)
 801612e:	68f8      	ldr	r0, [r7, #12]
 8016130:	f7ff ff68 	bl	8016004 <sys_timeout_abs>
}
 8016134:	bf00      	nop
 8016136:	3718      	adds	r7, #24
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	2000daec 	.word	0x2000daec
 8016140:	080160e1 	.word	0x080160e1

08016144 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801614a:	2301      	movs	r3, #1
 801614c:	607b      	str	r3, [r7, #4]
 801614e:	e00e      	b.n	801616e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016150:	4a0b      	ldr	r2, [pc, #44]	; (8016180 <sys_timeouts_init+0x3c>)
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	00db      	lsls	r3, r3, #3
 801615c:	4a08      	ldr	r2, [pc, #32]	; (8016180 <sys_timeouts_init+0x3c>)
 801615e:	4413      	add	r3, r2
 8016160:	461a      	mov	r2, r3
 8016162:	4908      	ldr	r1, [pc, #32]	; (8016184 <sys_timeouts_init+0x40>)
 8016164:	f000 f810 	bl	8016188 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	3301      	adds	r3, #1
 801616c:	607b      	str	r3, [r7, #4]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	2b02      	cmp	r3, #2
 8016172:	d9ed      	bls.n	8016150 <sys_timeouts_init+0xc>
  }
}
 8016174:	bf00      	nop
 8016176:	bf00      	nop
 8016178:	3708      	adds	r7, #8
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}
 801617e:	bf00      	nop
 8016180:	0801da90 	.word	0x0801da90
 8016184:	080160e1 	.word	0x080160e1

08016188 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b086      	sub	sp, #24
 801618c:	af00      	add	r7, sp, #0
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801619a:	d306      	bcc.n	80161aa <sys_timeout+0x22>
 801619c:	4b0a      	ldr	r3, [pc, #40]	; (80161c8 <sys_timeout+0x40>)
 801619e:	f240 1229 	movw	r2, #297	; 0x129
 80161a2:	490a      	ldr	r1, [pc, #40]	; (80161cc <sys_timeout+0x44>)
 80161a4:	480a      	ldr	r0, [pc, #40]	; (80161d0 <sys_timeout+0x48>)
 80161a6:	f003 fb67 	bl	8019878 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80161aa:	f7f4 fc81 	bl	800aab0 <sys_now>
 80161ae:	4602      	mov	r2, r0
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	4413      	add	r3, r2
 80161b4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	68b9      	ldr	r1, [r7, #8]
 80161ba:	6978      	ldr	r0, [r7, #20]
 80161bc:	f7ff ff22 	bl	8016004 <sys_timeout_abs>
#endif
}
 80161c0:	bf00      	nop
 80161c2:	3718      	adds	r7, #24
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	0801cdc4 	.word	0x0801cdc4
 80161cc:	0801ce60 	.word	0x0801ce60
 80161d0:	0801ce38 	.word	0x0801ce38

080161d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b084      	sub	sp, #16
 80161d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80161da:	f7f4 fc69 	bl	800aab0 <sys_now>
 80161de:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80161e0:	4b17      	ldr	r3, [pc, #92]	; (8016240 <sys_check_timeouts+0x6c>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d022      	beq.n	8016232 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	68fa      	ldr	r2, [r7, #12]
 80161f2:	1ad3      	subs	r3, r2, r3
 80161f4:	0fdb      	lsrs	r3, r3, #31
 80161f6:	f003 0301 	and.w	r3, r3, #1
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d11a      	bne.n	8016236 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	4a0e      	ldr	r2, [pc, #56]	; (8016240 <sys_check_timeouts+0x6c>)
 8016206:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	689b      	ldr	r3, [r3, #8]
 801620c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	68db      	ldr	r3, [r3, #12]
 8016212:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016214:	68bb      	ldr	r3, [r7, #8]
 8016216:	685b      	ldr	r3, [r3, #4]
 8016218:	4a0a      	ldr	r2, [pc, #40]	; (8016244 <sys_check_timeouts+0x70>)
 801621a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801621c:	68b9      	ldr	r1, [r7, #8]
 801621e:	200a      	movs	r0, #10
 8016220:	f7f9 fb94 	bl	800f94c <memp_free>
    if (handler != NULL) {
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d0da      	beq.n	80161e0 <sys_check_timeouts+0xc>
      handler(arg);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	6838      	ldr	r0, [r7, #0]
 801622e:	4798      	blx	r3
  do {
 8016230:	e7d6      	b.n	80161e0 <sys_check_timeouts+0xc>
      return;
 8016232:	bf00      	nop
 8016234:	e000      	b.n	8016238 <sys_check_timeouts+0x64>
      return;
 8016236:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016238:	3710      	adds	r7, #16
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}
 801623e:	bf00      	nop
 8016240:	2000dae8 	.word	0x2000dae8
 8016244:	2000daec 	.word	0x2000daec

08016248 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b082      	sub	sp, #8
 801624c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801624e:	4b16      	ldr	r3, [pc, #88]	; (80162a8 <sys_timeouts_sleeptime+0x60>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d102      	bne.n	801625c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016256:	f04f 33ff 	mov.w	r3, #4294967295
 801625a:	e020      	b.n	801629e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801625c:	f7f4 fc28 	bl	800aab0 <sys_now>
 8016260:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016262:	4b11      	ldr	r3, [pc, #68]	; (80162a8 <sys_timeouts_sleeptime+0x60>)
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	685a      	ldr	r2, [r3, #4]
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	1ad3      	subs	r3, r2, r3
 801626c:	0fdb      	lsrs	r3, r3, #31
 801626e:	f003 0301 	and.w	r3, r3, #1
 8016272:	b2db      	uxtb	r3, r3
 8016274:	2b00      	cmp	r3, #0
 8016276:	d001      	beq.n	801627c <sys_timeouts_sleeptime+0x34>
    return 0;
 8016278:	2300      	movs	r3, #0
 801627a:	e010      	b.n	801629e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801627c:	4b0a      	ldr	r3, [pc, #40]	; (80162a8 <sys_timeouts_sleeptime+0x60>)
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	685a      	ldr	r2, [r3, #4]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	1ad3      	subs	r3, r2, r3
 8016286:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	2b00      	cmp	r3, #0
 801628c:	da06      	bge.n	801629c <sys_timeouts_sleeptime+0x54>
 801628e:	4b07      	ldr	r3, [pc, #28]	; (80162ac <sys_timeouts_sleeptime+0x64>)
 8016290:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016294:	4906      	ldr	r1, [pc, #24]	; (80162b0 <sys_timeouts_sleeptime+0x68>)
 8016296:	4807      	ldr	r0, [pc, #28]	; (80162b4 <sys_timeouts_sleeptime+0x6c>)
 8016298:	f003 faee 	bl	8019878 <iprintf>
    return ret;
 801629c:	683b      	ldr	r3, [r7, #0]
  }
}
 801629e:	4618      	mov	r0, r3
 80162a0:	3708      	adds	r7, #8
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}
 80162a6:	bf00      	nop
 80162a8:	2000dae8 	.word	0x2000dae8
 80162ac:	0801cdc4 	.word	0x0801cdc4
 80162b0:	0801ce98 	.word	0x0801ce98
 80162b4:	0801ce38 	.word	0x0801ce38

080162b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80162bc:	f003 fb6a 	bl	8019994 <rand>
 80162c0:	4603      	mov	r3, r0
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80162ce:	b29a      	uxth	r2, r3
 80162d0:	4b01      	ldr	r3, [pc, #4]	; (80162d8 <udp_init+0x20>)
 80162d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80162d4:	bf00      	nop
 80162d6:	bd80      	pop	{r7, pc}
 80162d8:	20000168 	.word	0x20000168

080162dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80162dc:	b480      	push	{r7}
 80162de:	b083      	sub	sp, #12
 80162e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80162e2:	2300      	movs	r3, #0
 80162e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80162e6:	4b17      	ldr	r3, [pc, #92]	; (8016344 <udp_new_port+0x68>)
 80162e8:	881b      	ldrh	r3, [r3, #0]
 80162ea:	1c5a      	adds	r2, r3, #1
 80162ec:	b291      	uxth	r1, r2
 80162ee:	4a15      	ldr	r2, [pc, #84]	; (8016344 <udp_new_port+0x68>)
 80162f0:	8011      	strh	r1, [r2, #0]
 80162f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162f6:	4293      	cmp	r3, r2
 80162f8:	d103      	bne.n	8016302 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80162fa:	4b12      	ldr	r3, [pc, #72]	; (8016344 <udp_new_port+0x68>)
 80162fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016300:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016302:	4b11      	ldr	r3, [pc, #68]	; (8016348 <udp_new_port+0x6c>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	603b      	str	r3, [r7, #0]
 8016308:	e011      	b.n	801632e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	8a5a      	ldrh	r2, [r3, #18]
 801630e:	4b0d      	ldr	r3, [pc, #52]	; (8016344 <udp_new_port+0x68>)
 8016310:	881b      	ldrh	r3, [r3, #0]
 8016312:	429a      	cmp	r2, r3
 8016314:	d108      	bne.n	8016328 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016316:	88fb      	ldrh	r3, [r7, #6]
 8016318:	3301      	adds	r3, #1
 801631a:	80fb      	strh	r3, [r7, #6]
 801631c:	88fb      	ldrh	r3, [r7, #6]
 801631e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016322:	d3e0      	bcc.n	80162e6 <udp_new_port+0xa>
        return 0;
 8016324:	2300      	movs	r3, #0
 8016326:	e007      	b.n	8016338 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	603b      	str	r3, [r7, #0]
 801632e:	683b      	ldr	r3, [r7, #0]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d1ea      	bne.n	801630a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016334:	4b03      	ldr	r3, [pc, #12]	; (8016344 <udp_new_port+0x68>)
 8016336:	881b      	ldrh	r3, [r3, #0]
}
 8016338:	4618      	mov	r0, r3
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr
 8016344:	20000168 	.word	0x20000168
 8016348:	2000daf4 	.word	0x2000daf4

0801634c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	4613      	mov	r3, r2
 8016358:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d105      	bne.n	801636c <udp_input_local_match+0x20>
 8016360:	4b27      	ldr	r3, [pc, #156]	; (8016400 <udp_input_local_match+0xb4>)
 8016362:	2287      	movs	r2, #135	; 0x87
 8016364:	4927      	ldr	r1, [pc, #156]	; (8016404 <udp_input_local_match+0xb8>)
 8016366:	4828      	ldr	r0, [pc, #160]	; (8016408 <udp_input_local_match+0xbc>)
 8016368:	f003 fa86 	bl	8019878 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801636c:	68bb      	ldr	r3, [r7, #8]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d105      	bne.n	801637e <udp_input_local_match+0x32>
 8016372:	4b23      	ldr	r3, [pc, #140]	; (8016400 <udp_input_local_match+0xb4>)
 8016374:	2288      	movs	r2, #136	; 0x88
 8016376:	4925      	ldr	r1, [pc, #148]	; (801640c <udp_input_local_match+0xc0>)
 8016378:	4823      	ldr	r0, [pc, #140]	; (8016408 <udp_input_local_match+0xbc>)
 801637a:	f003 fa7d 	bl	8019878 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	7a1b      	ldrb	r3, [r3, #8]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d00b      	beq.n	801639e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	7a1a      	ldrb	r2, [r3, #8]
 801638a:	4b21      	ldr	r3, [pc, #132]	; (8016410 <udp_input_local_match+0xc4>)
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016392:	3301      	adds	r3, #1
 8016394:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016396:	429a      	cmp	r2, r3
 8016398:	d001      	beq.n	801639e <udp_input_local_match+0x52>
    return 0;
 801639a:	2300      	movs	r3, #0
 801639c:	e02b      	b.n	80163f6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801639e:	79fb      	ldrb	r3, [r7, #7]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d018      	beq.n	80163d6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d013      	beq.n	80163d2 <udp_input_local_match+0x86>
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d00f      	beq.n	80163d2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80163b2:	4b17      	ldr	r3, [pc, #92]	; (8016410 <udp_input_local_match+0xc4>)
 80163b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80163b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163ba:	d00a      	beq.n	80163d2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681a      	ldr	r2, [r3, #0]
 80163c0:	4b13      	ldr	r3, [pc, #76]	; (8016410 <udp_input_local_match+0xc4>)
 80163c2:	695b      	ldr	r3, [r3, #20]
 80163c4:	405a      	eors	r2, r3
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	3308      	adds	r3, #8
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d110      	bne.n	80163f4 <udp_input_local_match+0xa8>
          return 1;
 80163d2:	2301      	movs	r3, #1
 80163d4:	e00f      	b.n	80163f6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d009      	beq.n	80163f0 <udp_input_local_match+0xa4>
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d005      	beq.n	80163f0 <udp_input_local_match+0xa4>
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	4b09      	ldr	r3, [pc, #36]	; (8016410 <udp_input_local_match+0xc4>)
 80163ea:	695b      	ldr	r3, [r3, #20]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d101      	bne.n	80163f4 <udp_input_local_match+0xa8>
        return 1;
 80163f0:	2301      	movs	r3, #1
 80163f2:	e000      	b.n	80163f6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80163f4:	2300      	movs	r3, #0
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3710      	adds	r7, #16
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	0801ceac 	.word	0x0801ceac
 8016404:	0801cedc 	.word	0x0801cedc
 8016408:	0801cf00 	.word	0x0801cf00
 801640c:	0801cf28 	.word	0x0801cf28
 8016410:	2000a344 	.word	0x2000a344

08016414 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016414:	b590      	push	{r4, r7, lr}
 8016416:	b08d      	sub	sp, #52	; 0x34
 8016418:	af02      	add	r7, sp, #8
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801641e:	2300      	movs	r3, #0
 8016420:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d105      	bne.n	8016434 <udp_input+0x20>
 8016428:	4b7c      	ldr	r3, [pc, #496]	; (801661c <udp_input+0x208>)
 801642a:	22cf      	movs	r2, #207	; 0xcf
 801642c:	497c      	ldr	r1, [pc, #496]	; (8016620 <udp_input+0x20c>)
 801642e:	487d      	ldr	r0, [pc, #500]	; (8016624 <udp_input+0x210>)
 8016430:	f003 fa22 	bl	8019878 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d105      	bne.n	8016446 <udp_input+0x32>
 801643a:	4b78      	ldr	r3, [pc, #480]	; (801661c <udp_input+0x208>)
 801643c:	22d0      	movs	r2, #208	; 0xd0
 801643e:	497a      	ldr	r1, [pc, #488]	; (8016628 <udp_input+0x214>)
 8016440:	4878      	ldr	r0, [pc, #480]	; (8016624 <udp_input+0x210>)
 8016442:	f003 fa19 	bl	8019878 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	895b      	ldrh	r3, [r3, #10]
 801644a:	2b07      	cmp	r3, #7
 801644c:	d803      	bhi.n	8016456 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f7fa f920 	bl	8010694 <pbuf_free>
    goto end;
 8016454:	e0de      	b.n	8016614 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801645c:	4b73      	ldr	r3, [pc, #460]	; (801662c <udp_input+0x218>)
 801645e:	695b      	ldr	r3, [r3, #20]
 8016460:	4a72      	ldr	r2, [pc, #456]	; (801662c <udp_input+0x218>)
 8016462:	6812      	ldr	r2, [r2, #0]
 8016464:	4611      	mov	r1, r2
 8016466:	4618      	mov	r0, r3
 8016468:	f001 ffc8 	bl	80183fc <ip4_addr_isbroadcast_u32>
 801646c:	4603      	mov	r3, r0
 801646e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	881b      	ldrh	r3, [r3, #0]
 8016474:	b29b      	uxth	r3, r3
 8016476:	4618      	mov	r0, r3
 8016478:	f7f8 fd1a 	bl	800eeb0 <lwip_htons>
 801647c:	4603      	mov	r3, r0
 801647e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016480:	697b      	ldr	r3, [r7, #20]
 8016482:	885b      	ldrh	r3, [r3, #2]
 8016484:	b29b      	uxth	r3, r3
 8016486:	4618      	mov	r0, r3
 8016488:	f7f8 fd12 	bl	800eeb0 <lwip_htons>
 801648c:	4603      	mov	r3, r0
 801648e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016490:	2300      	movs	r3, #0
 8016492:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016494:	2300      	movs	r3, #0
 8016496:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016498:	2300      	movs	r3, #0
 801649a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801649c:	4b64      	ldr	r3, [pc, #400]	; (8016630 <udp_input+0x21c>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	627b      	str	r3, [r7, #36]	; 0x24
 80164a2:	e054      	b.n	801654e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80164a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a6:	8a5b      	ldrh	r3, [r3, #18]
 80164a8:	89fa      	ldrh	r2, [r7, #14]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d14a      	bne.n	8016544 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80164ae:	7cfb      	ldrb	r3, [r7, #19]
 80164b0:	461a      	mov	r2, r3
 80164b2:	6839      	ldr	r1, [r7, #0]
 80164b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164b6:	f7ff ff49 	bl	801634c <udp_input_local_match>
 80164ba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d041      	beq.n	8016544 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80164c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c2:	7c1b      	ldrb	r3, [r3, #16]
 80164c4:	f003 0304 	and.w	r3, r3, #4
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d11d      	bne.n	8016508 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80164cc:	69fb      	ldr	r3, [r7, #28]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d102      	bne.n	80164d8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80164d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d4:	61fb      	str	r3, [r7, #28]
 80164d6:	e017      	b.n	8016508 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80164d8:	7cfb      	ldrb	r3, [r7, #19]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d014      	beq.n	8016508 <udp_input+0xf4>
 80164de:	4b53      	ldr	r3, [pc, #332]	; (801662c <udp_input+0x218>)
 80164e0:	695b      	ldr	r3, [r3, #20]
 80164e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164e6:	d10f      	bne.n	8016508 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80164e8:	69fb      	ldr	r3, [r7, #28]
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	3304      	adds	r3, #4
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d008      	beq.n	8016508 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80164f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f8:	681a      	ldr	r2, [r3, #0]
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	3304      	adds	r3, #4
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	429a      	cmp	r2, r3
 8016502:	d101      	bne.n	8016508 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016506:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650a:	8a9b      	ldrh	r3, [r3, #20]
 801650c:	8a3a      	ldrh	r2, [r7, #16]
 801650e:	429a      	cmp	r2, r3
 8016510:	d118      	bne.n	8016544 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016514:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016516:	2b00      	cmp	r3, #0
 8016518:	d005      	beq.n	8016526 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651c:	685a      	ldr	r2, [r3, #4]
 801651e:	4b43      	ldr	r3, [pc, #268]	; (801662c <udp_input+0x218>)
 8016520:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016522:	429a      	cmp	r2, r3
 8016524:	d10e      	bne.n	8016544 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016526:	6a3b      	ldr	r3, [r7, #32]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d014      	beq.n	8016556 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652e:	68da      	ldr	r2, [r3, #12]
 8016530:	6a3b      	ldr	r3, [r7, #32]
 8016532:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016534:	4b3e      	ldr	r3, [pc, #248]	; (8016630 <udp_input+0x21c>)
 8016536:	681a      	ldr	r2, [r3, #0]
 8016538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801653a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801653c:	4a3c      	ldr	r2, [pc, #240]	; (8016630 <udp_input+0x21c>)
 801653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016540:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016542:	e008      	b.n	8016556 <udp_input+0x142>
      }
    }

    prev = pcb;
 8016544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016546:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	627b      	str	r3, [r7, #36]	; 0x24
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	2b00      	cmp	r3, #0
 8016552:	d1a7      	bne.n	80164a4 <udp_input+0x90>
 8016554:	e000      	b.n	8016558 <udp_input+0x144>
        break;
 8016556:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655a:	2b00      	cmp	r3, #0
 801655c:	d101      	bne.n	8016562 <udp_input+0x14e>
    pcb = uncon_pcb;
 801655e:	69fb      	ldr	r3, [r7, #28]
 8016560:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016564:	2b00      	cmp	r3, #0
 8016566:	d002      	beq.n	801656e <udp_input+0x15a>
    for_us = 1;
 8016568:	2301      	movs	r3, #1
 801656a:	76fb      	strb	r3, [r7, #27]
 801656c:	e00a      	b.n	8016584 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	3304      	adds	r3, #4
 8016572:	681a      	ldr	r2, [r3, #0]
 8016574:	4b2d      	ldr	r3, [pc, #180]	; (801662c <udp_input+0x218>)
 8016576:	695b      	ldr	r3, [r3, #20]
 8016578:	429a      	cmp	r2, r3
 801657a:	bf0c      	ite	eq
 801657c:	2301      	moveq	r3, #1
 801657e:	2300      	movne	r3, #0
 8016580:	b2db      	uxtb	r3, r3
 8016582:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016584:	7efb      	ldrb	r3, [r7, #27]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d041      	beq.n	801660e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801658a:	2108      	movs	r1, #8
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f7f9 fffb 	bl	8010588 <pbuf_remove_header>
 8016592:	4603      	mov	r3, r0
 8016594:	2b00      	cmp	r3, #0
 8016596:	d00a      	beq.n	80165ae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016598:	4b20      	ldr	r3, [pc, #128]	; (801661c <udp_input+0x208>)
 801659a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801659e:	4925      	ldr	r1, [pc, #148]	; (8016634 <udp_input+0x220>)
 80165a0:	4820      	ldr	r0, [pc, #128]	; (8016624 <udp_input+0x210>)
 80165a2:	f003 f969 	bl	8019878 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7fa f874 	bl	8010694 <pbuf_free>
      goto end;
 80165ac:	e032      	b.n	8016614 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80165ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d012      	beq.n	80165da <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80165b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b6:	699b      	ldr	r3, [r3, #24]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d00a      	beq.n	80165d2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80165bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165be:	699c      	ldr	r4, [r3, #24]
 80165c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c2:	69d8      	ldr	r0, [r3, #28]
 80165c4:	8a3b      	ldrh	r3, [r7, #16]
 80165c6:	9300      	str	r3, [sp, #0]
 80165c8:	4b1b      	ldr	r3, [pc, #108]	; (8016638 <udp_input+0x224>)
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165ce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80165d0:	e021      	b.n	8016616 <udp_input+0x202>
        pbuf_free(p);
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f7fa f85e 	bl	8010694 <pbuf_free>
        goto end;
 80165d8:	e01c      	b.n	8016614 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80165da:	7cfb      	ldrb	r3, [r7, #19]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d112      	bne.n	8016606 <udp_input+0x1f2>
 80165e0:	4b12      	ldr	r3, [pc, #72]	; (801662c <udp_input+0x218>)
 80165e2:	695b      	ldr	r3, [r3, #20]
 80165e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165e8:	2be0      	cmp	r3, #224	; 0xe0
 80165ea:	d00c      	beq.n	8016606 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80165ec:	4b0f      	ldr	r3, [pc, #60]	; (801662c <udp_input+0x218>)
 80165ee:	899b      	ldrh	r3, [r3, #12]
 80165f0:	3308      	adds	r3, #8
 80165f2:	b29b      	uxth	r3, r3
 80165f4:	b21b      	sxth	r3, r3
 80165f6:	4619      	mov	r1, r3
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7fa f838 	bl	801066e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80165fe:	2103      	movs	r1, #3
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f001 fbdb 	bl	8017dbc <icmp_dest_unreach>
      pbuf_free(p);
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f7fa f844 	bl	8010694 <pbuf_free>
  return;
 801660c:	e003      	b.n	8016616 <udp_input+0x202>
    pbuf_free(p);
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f7fa f840 	bl	8010694 <pbuf_free>
  return;
 8016614:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016616:	372c      	adds	r7, #44	; 0x2c
 8016618:	46bd      	mov	sp, r7
 801661a:	bd90      	pop	{r4, r7, pc}
 801661c:	0801ceac 	.word	0x0801ceac
 8016620:	0801cf50 	.word	0x0801cf50
 8016624:	0801cf00 	.word	0x0801cf00
 8016628:	0801cf68 	.word	0x0801cf68
 801662c:	2000a344 	.word	0x2000a344
 8016630:	2000daf4 	.word	0x2000daf4
 8016634:	0801cf84 	.word	0x0801cf84
 8016638:	2000a354 	.word	0x2000a354

0801663c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d109      	bne.n	8016660 <udp_send+0x24>
 801664c:	4b11      	ldr	r3, [pc, #68]	; (8016694 <udp_send+0x58>)
 801664e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8016652:	4911      	ldr	r1, [pc, #68]	; (8016698 <udp_send+0x5c>)
 8016654:	4811      	ldr	r0, [pc, #68]	; (801669c <udp_send+0x60>)
 8016656:	f003 f90f 	bl	8019878 <iprintf>
 801665a:	f06f 030f 	mvn.w	r3, #15
 801665e:	e015      	b.n	801668c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d109      	bne.n	801667a <udp_send+0x3e>
 8016666:	4b0b      	ldr	r3, [pc, #44]	; (8016694 <udp_send+0x58>)
 8016668:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801666c:	490c      	ldr	r1, [pc, #48]	; (80166a0 <udp_send+0x64>)
 801666e:	480b      	ldr	r0, [pc, #44]	; (801669c <udp_send+0x60>)
 8016670:	f003 f902 	bl	8019878 <iprintf>
 8016674:	f06f 030f 	mvn.w	r3, #15
 8016678:	e008      	b.n	801668c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	1d1a      	adds	r2, r3, #4
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	8a9b      	ldrh	r3, [r3, #20]
 8016682:	6839      	ldr	r1, [r7, #0]
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f000 f80d 	bl	80166a4 <udp_sendto>
 801668a:	4603      	mov	r3, r0
}
 801668c:	4618      	mov	r0, r3
 801668e:	3708      	adds	r7, #8
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}
 8016694:	0801ceac 	.word	0x0801ceac
 8016698:	0801cfa0 	.word	0x0801cfa0
 801669c:	0801cf00 	.word	0x0801cf00
 80166a0:	0801cfb8 	.word	0x0801cfb8

080166a4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b088      	sub	sp, #32
 80166a8:	af02      	add	r7, sp, #8
 80166aa:	60f8      	str	r0, [r7, #12]
 80166ac:	60b9      	str	r1, [r7, #8]
 80166ae:	607a      	str	r2, [r7, #4]
 80166b0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d109      	bne.n	80166cc <udp_sendto+0x28>
 80166b8:	4b23      	ldr	r3, [pc, #140]	; (8016748 <udp_sendto+0xa4>)
 80166ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 80166be:	4923      	ldr	r1, [pc, #140]	; (801674c <udp_sendto+0xa8>)
 80166c0:	4823      	ldr	r0, [pc, #140]	; (8016750 <udp_sendto+0xac>)
 80166c2:	f003 f8d9 	bl	8019878 <iprintf>
 80166c6:	f06f 030f 	mvn.w	r3, #15
 80166ca:	e038      	b.n	801673e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d109      	bne.n	80166e6 <udp_sendto+0x42>
 80166d2:	4b1d      	ldr	r3, [pc, #116]	; (8016748 <udp_sendto+0xa4>)
 80166d4:	f240 2219 	movw	r2, #537	; 0x219
 80166d8:	491e      	ldr	r1, [pc, #120]	; (8016754 <udp_sendto+0xb0>)
 80166da:	481d      	ldr	r0, [pc, #116]	; (8016750 <udp_sendto+0xac>)
 80166dc:	f003 f8cc 	bl	8019878 <iprintf>
 80166e0:	f06f 030f 	mvn.w	r3, #15
 80166e4:	e02b      	b.n	801673e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d109      	bne.n	8016700 <udp_sendto+0x5c>
 80166ec:	4b16      	ldr	r3, [pc, #88]	; (8016748 <udp_sendto+0xa4>)
 80166ee:	f240 221a 	movw	r2, #538	; 0x21a
 80166f2:	4919      	ldr	r1, [pc, #100]	; (8016758 <udp_sendto+0xb4>)
 80166f4:	4816      	ldr	r0, [pc, #88]	; (8016750 <udp_sendto+0xac>)
 80166f6:	f003 f8bf 	bl	8019878 <iprintf>
 80166fa:	f06f 030f 	mvn.w	r3, #15
 80166fe:	e01e      	b.n	801673e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	7a1b      	ldrb	r3, [r3, #8]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d006      	beq.n	8016716 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	7a1b      	ldrb	r3, [r3, #8]
 801670c:	4618      	mov	r0, r3
 801670e:	f7f9 fc33 	bl	800ff78 <netif_get_by_index>
 8016712:	6178      	str	r0, [r7, #20]
 8016714:	e003      	b.n	801671e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f001 fbda 	bl	8017ed0 <ip4_route>
 801671c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801671e:	697b      	ldr	r3, [r7, #20]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d102      	bne.n	801672a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016724:	f06f 0303 	mvn.w	r3, #3
 8016728:	e009      	b.n	801673e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801672a:	887a      	ldrh	r2, [r7, #2]
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	4613      	mov	r3, r2
 8016732:	687a      	ldr	r2, [r7, #4]
 8016734:	68b9      	ldr	r1, [r7, #8]
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	f000 f810 	bl	801675c <udp_sendto_if>
 801673c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801673e:	4618      	mov	r0, r3
 8016740:	3718      	adds	r7, #24
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	0801ceac 	.word	0x0801ceac
 801674c:	0801cfd0 	.word	0x0801cfd0
 8016750:	0801cf00 	.word	0x0801cf00
 8016754:	0801cfe8 	.word	0x0801cfe8
 8016758:	0801d004 	.word	0x0801d004

0801675c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b088      	sub	sp, #32
 8016760:	af02      	add	r7, sp, #8
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	607a      	str	r2, [r7, #4]
 8016768:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d109      	bne.n	8016784 <udp_sendto_if+0x28>
 8016770:	4b2e      	ldr	r3, [pc, #184]	; (801682c <udp_sendto_if+0xd0>)
 8016772:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016776:	492e      	ldr	r1, [pc, #184]	; (8016830 <udp_sendto_if+0xd4>)
 8016778:	482e      	ldr	r0, [pc, #184]	; (8016834 <udp_sendto_if+0xd8>)
 801677a:	f003 f87d 	bl	8019878 <iprintf>
 801677e:	f06f 030f 	mvn.w	r3, #15
 8016782:	e04f      	b.n	8016824 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d109      	bne.n	801679e <udp_sendto_if+0x42>
 801678a:	4b28      	ldr	r3, [pc, #160]	; (801682c <udp_sendto_if+0xd0>)
 801678c:	f240 2281 	movw	r2, #641	; 0x281
 8016790:	4929      	ldr	r1, [pc, #164]	; (8016838 <udp_sendto_if+0xdc>)
 8016792:	4828      	ldr	r0, [pc, #160]	; (8016834 <udp_sendto_if+0xd8>)
 8016794:	f003 f870 	bl	8019878 <iprintf>
 8016798:	f06f 030f 	mvn.w	r3, #15
 801679c:	e042      	b.n	8016824 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d109      	bne.n	80167b8 <udp_sendto_if+0x5c>
 80167a4:	4b21      	ldr	r3, [pc, #132]	; (801682c <udp_sendto_if+0xd0>)
 80167a6:	f240 2282 	movw	r2, #642	; 0x282
 80167aa:	4924      	ldr	r1, [pc, #144]	; (801683c <udp_sendto_if+0xe0>)
 80167ac:	4821      	ldr	r0, [pc, #132]	; (8016834 <udp_sendto_if+0xd8>)
 80167ae:	f003 f863 	bl	8019878 <iprintf>
 80167b2:	f06f 030f 	mvn.w	r3, #15
 80167b6:	e035      	b.n	8016824 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80167b8:	6a3b      	ldr	r3, [r7, #32]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d109      	bne.n	80167d2 <udp_sendto_if+0x76>
 80167be:	4b1b      	ldr	r3, [pc, #108]	; (801682c <udp_sendto_if+0xd0>)
 80167c0:	f240 2283 	movw	r2, #643	; 0x283
 80167c4:	491e      	ldr	r1, [pc, #120]	; (8016840 <udp_sendto_if+0xe4>)
 80167c6:	481b      	ldr	r0, [pc, #108]	; (8016834 <udp_sendto_if+0xd8>)
 80167c8:	f003 f856 	bl	8019878 <iprintf>
 80167cc:	f06f 030f 	mvn.w	r3, #15
 80167d0:	e028      	b.n	8016824 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d009      	beq.n	80167ec <udp_sendto_if+0x90>
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d005      	beq.n	80167ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80167e8:	2be0      	cmp	r3, #224	; 0xe0
 80167ea:	d103      	bne.n	80167f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80167ec:	6a3b      	ldr	r3, [r7, #32]
 80167ee:	3304      	adds	r3, #4
 80167f0:	617b      	str	r3, [r7, #20]
 80167f2:	e00b      	b.n	801680c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	6a3b      	ldr	r3, [r7, #32]
 80167fa:	3304      	adds	r3, #4
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d002      	beq.n	8016808 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016802:	f06f 0303 	mvn.w	r3, #3
 8016806:	e00d      	b.n	8016824 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801680c:	887a      	ldrh	r2, [r7, #2]
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	9301      	str	r3, [sp, #4]
 8016812:	6a3b      	ldr	r3, [r7, #32]
 8016814:	9300      	str	r3, [sp, #0]
 8016816:	4613      	mov	r3, r2
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	68b9      	ldr	r1, [r7, #8]
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f000 f811 	bl	8016844 <udp_sendto_if_src>
 8016822:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016824:	4618      	mov	r0, r3
 8016826:	3718      	adds	r7, #24
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}
 801682c:	0801ceac 	.word	0x0801ceac
 8016830:	0801d020 	.word	0x0801d020
 8016834:	0801cf00 	.word	0x0801cf00
 8016838:	0801d03c 	.word	0x0801d03c
 801683c:	0801d058 	.word	0x0801d058
 8016840:	0801d078 	.word	0x0801d078

08016844 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b08c      	sub	sp, #48	; 0x30
 8016848:	af04      	add	r7, sp, #16
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
 8016850:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d109      	bne.n	801686c <udp_sendto_if_src+0x28>
 8016858:	4b65      	ldr	r3, [pc, #404]	; (80169f0 <udp_sendto_if_src+0x1ac>)
 801685a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801685e:	4965      	ldr	r1, [pc, #404]	; (80169f4 <udp_sendto_if_src+0x1b0>)
 8016860:	4865      	ldr	r0, [pc, #404]	; (80169f8 <udp_sendto_if_src+0x1b4>)
 8016862:	f003 f809 	bl	8019878 <iprintf>
 8016866:	f06f 030f 	mvn.w	r3, #15
 801686a:	e0bc      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d109      	bne.n	8016886 <udp_sendto_if_src+0x42>
 8016872:	4b5f      	ldr	r3, [pc, #380]	; (80169f0 <udp_sendto_if_src+0x1ac>)
 8016874:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016878:	4960      	ldr	r1, [pc, #384]	; (80169fc <udp_sendto_if_src+0x1b8>)
 801687a:	485f      	ldr	r0, [pc, #380]	; (80169f8 <udp_sendto_if_src+0x1b4>)
 801687c:	f002 fffc 	bl	8019878 <iprintf>
 8016880:	f06f 030f 	mvn.w	r3, #15
 8016884:	e0af      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d109      	bne.n	80168a0 <udp_sendto_if_src+0x5c>
 801688c:	4b58      	ldr	r3, [pc, #352]	; (80169f0 <udp_sendto_if_src+0x1ac>)
 801688e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016892:	495b      	ldr	r1, [pc, #364]	; (8016a00 <udp_sendto_if_src+0x1bc>)
 8016894:	4858      	ldr	r0, [pc, #352]	; (80169f8 <udp_sendto_if_src+0x1b4>)
 8016896:	f002 ffef 	bl	8019878 <iprintf>
 801689a:	f06f 030f 	mvn.w	r3, #15
 801689e:	e0a2      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80168a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d109      	bne.n	80168ba <udp_sendto_if_src+0x76>
 80168a6:	4b52      	ldr	r3, [pc, #328]	; (80169f0 <udp_sendto_if_src+0x1ac>)
 80168a8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80168ac:	4955      	ldr	r1, [pc, #340]	; (8016a04 <udp_sendto_if_src+0x1c0>)
 80168ae:	4852      	ldr	r0, [pc, #328]	; (80169f8 <udp_sendto_if_src+0x1b4>)
 80168b0:	f002 ffe2 	bl	8019878 <iprintf>
 80168b4:	f06f 030f 	mvn.w	r3, #15
 80168b8:	e095      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80168ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d109      	bne.n	80168d4 <udp_sendto_if_src+0x90>
 80168c0:	4b4b      	ldr	r3, [pc, #300]	; (80169f0 <udp_sendto_if_src+0x1ac>)
 80168c2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80168c6:	4950      	ldr	r1, [pc, #320]	; (8016a08 <udp_sendto_if_src+0x1c4>)
 80168c8:	484b      	ldr	r0, [pc, #300]	; (80169f8 <udp_sendto_if_src+0x1b4>)
 80168ca:	f002 ffd5 	bl	8019878 <iprintf>
 80168ce:	f06f 030f 	mvn.w	r3, #15
 80168d2:	e088      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	8a5b      	ldrh	r3, [r3, #18]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d10f      	bne.n	80168fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80168dc:	68f9      	ldr	r1, [r7, #12]
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	8a5b      	ldrh	r3, [r3, #18]
 80168e2:	461a      	mov	r2, r3
 80168e4:	68f8      	ldr	r0, [r7, #12]
 80168e6:	f000 f893 	bl	8016a10 <udp_bind>
 80168ea:	4603      	mov	r3, r0
 80168ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80168ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d002      	beq.n	80168fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80168f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80168fa:	e074      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	891b      	ldrh	r3, [r3, #8]
 8016900:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016904:	4293      	cmp	r3, r2
 8016906:	d902      	bls.n	801690e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016908:	f04f 33ff 	mov.w	r3, #4294967295
 801690c:	e06b      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801690e:	2108      	movs	r1, #8
 8016910:	68b8      	ldr	r0, [r7, #8]
 8016912:	f7f9 fe29 	bl	8010568 <pbuf_add_header>
 8016916:	4603      	mov	r3, r0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d015      	beq.n	8016948 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801691c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016920:	2108      	movs	r1, #8
 8016922:	2022      	movs	r0, #34	; 0x22
 8016924:	f7f9 fbd2 	bl	80100cc <pbuf_alloc>
 8016928:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801692a:	69fb      	ldr	r3, [r7, #28]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d102      	bne.n	8016936 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016930:	f04f 33ff 	mov.w	r3, #4294967295
 8016934:	e057      	b.n	80169e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	891b      	ldrh	r3, [r3, #8]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d006      	beq.n	801694c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801693e:	68b9      	ldr	r1, [r7, #8]
 8016940:	69f8      	ldr	r0, [r7, #28]
 8016942:	f7f9 ffcb 	bl	80108dc <pbuf_chain>
 8016946:	e001      	b.n	801694c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	895b      	ldrh	r3, [r3, #10]
 8016950:	2b07      	cmp	r3, #7
 8016952:	d806      	bhi.n	8016962 <udp_sendto_if_src+0x11e>
 8016954:	4b26      	ldr	r3, [pc, #152]	; (80169f0 <udp_sendto_if_src+0x1ac>)
 8016956:	f240 320d 	movw	r2, #781	; 0x30d
 801695a:	492c      	ldr	r1, [pc, #176]	; (8016a0c <udp_sendto_if_src+0x1c8>)
 801695c:	4826      	ldr	r0, [pc, #152]	; (80169f8 <udp_sendto_if_src+0x1b4>)
 801695e:	f002 ff8b 	bl	8019878 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016962:	69fb      	ldr	r3, [r7, #28]
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	8a5b      	ldrh	r3, [r3, #18]
 801696c:	4618      	mov	r0, r3
 801696e:	f7f8 fa9f 	bl	800eeb0 <lwip_htons>
 8016972:	4603      	mov	r3, r0
 8016974:	461a      	mov	r2, r3
 8016976:	697b      	ldr	r3, [r7, #20]
 8016978:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801697a:	887b      	ldrh	r3, [r7, #2]
 801697c:	4618      	mov	r0, r3
 801697e:	f7f8 fa97 	bl	800eeb0 <lwip_htons>
 8016982:	4603      	mov	r3, r0
 8016984:	461a      	mov	r2, r3
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	2200      	movs	r2, #0
 801698e:	719a      	strb	r2, [r3, #6]
 8016990:	2200      	movs	r2, #0
 8016992:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	891b      	ldrh	r3, [r3, #8]
 8016998:	4618      	mov	r0, r3
 801699a:	f7f8 fa89 	bl	800eeb0 <lwip_htons>
 801699e:	4603      	mov	r3, r0
 80169a0:	461a      	mov	r2, r3
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80169a6:	2311      	movs	r3, #17
 80169a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	7adb      	ldrb	r3, [r3, #11]
 80169ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	7a9b      	ldrb	r3, [r3, #10]
 80169b4:	7cb9      	ldrb	r1, [r7, #18]
 80169b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80169b8:	9202      	str	r2, [sp, #8]
 80169ba:	7cfa      	ldrb	r2, [r7, #19]
 80169bc:	9201      	str	r2, [sp, #4]
 80169be:	9300      	str	r3, [sp, #0]
 80169c0:	460b      	mov	r3, r1
 80169c2:	687a      	ldr	r2, [r7, #4]
 80169c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80169c6:	69f8      	ldr	r0, [r7, #28]
 80169c8:	f001 fc6a 	bl	80182a0 <ip4_output_if_src>
 80169cc:	4603      	mov	r3, r0
 80169ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80169d0:	69fa      	ldr	r2, [r7, #28]
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d004      	beq.n	80169e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80169d8:	69f8      	ldr	r0, [r7, #28]
 80169da:	f7f9 fe5b 	bl	8010694 <pbuf_free>
    q = NULL;
 80169de:	2300      	movs	r3, #0
 80169e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80169e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	3720      	adds	r7, #32
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
 80169ee:	bf00      	nop
 80169f0:	0801ceac 	.word	0x0801ceac
 80169f4:	0801d098 	.word	0x0801d098
 80169f8:	0801cf00 	.word	0x0801cf00
 80169fc:	0801d0b8 	.word	0x0801d0b8
 8016a00:	0801d0d8 	.word	0x0801d0d8
 8016a04:	0801d0fc 	.word	0x0801d0fc
 8016a08:	0801d120 	.word	0x0801d120
 8016a0c:	0801d144 	.word	0x0801d144

08016a10 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b086      	sub	sp, #24
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d101      	bne.n	8016a28 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016a24:	4b39      	ldr	r3, [pc, #228]	; (8016b0c <udp_bind+0xfc>)
 8016a26:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d109      	bne.n	8016a42 <udp_bind+0x32>
 8016a2e:	4b38      	ldr	r3, [pc, #224]	; (8016b10 <udp_bind+0x100>)
 8016a30:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016a34:	4937      	ldr	r1, [pc, #220]	; (8016b14 <udp_bind+0x104>)
 8016a36:	4838      	ldr	r0, [pc, #224]	; (8016b18 <udp_bind+0x108>)
 8016a38:	f002 ff1e 	bl	8019878 <iprintf>
 8016a3c:	f06f 030f 	mvn.w	r3, #15
 8016a40:	e060      	b.n	8016b04 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016a42:	2300      	movs	r3, #0
 8016a44:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a46:	4b35      	ldr	r3, [pc, #212]	; (8016b1c <udp_bind+0x10c>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	617b      	str	r3, [r7, #20]
 8016a4c:	e009      	b.n	8016a62 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016a4e:	68fa      	ldr	r2, [r7, #12]
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	429a      	cmp	r2, r3
 8016a54:	d102      	bne.n	8016a5c <udp_bind+0x4c>
      rebind = 1;
 8016a56:	2301      	movs	r3, #1
 8016a58:	74fb      	strb	r3, [r7, #19]
      break;
 8016a5a:	e005      	b.n	8016a68 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a5c:	697b      	ldr	r3, [r7, #20]
 8016a5e:	68db      	ldr	r3, [r3, #12]
 8016a60:	617b      	str	r3, [r7, #20]
 8016a62:	697b      	ldr	r3, [r7, #20]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d1f2      	bne.n	8016a4e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016a68:	88fb      	ldrh	r3, [r7, #6]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d109      	bne.n	8016a82 <udp_bind+0x72>
    port = udp_new_port();
 8016a6e:	f7ff fc35 	bl	80162dc <udp_new_port>
 8016a72:	4603      	mov	r3, r0
 8016a74:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016a76:	88fb      	ldrh	r3, [r7, #6]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d12c      	bne.n	8016ad6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016a7c:	f06f 0307 	mvn.w	r3, #7
 8016a80:	e040      	b.n	8016b04 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a82:	4b26      	ldr	r3, [pc, #152]	; (8016b1c <udp_bind+0x10c>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	617b      	str	r3, [r7, #20]
 8016a88:	e022      	b.n	8016ad0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016a8a:	68fa      	ldr	r2, [r7, #12]
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d01b      	beq.n	8016aca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	8a5b      	ldrh	r3, [r3, #18]
 8016a96:	88fa      	ldrh	r2, [r7, #6]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d116      	bne.n	8016aca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	681a      	ldr	r2, [r3, #0]
 8016aa0:	68bb      	ldr	r3, [r7, #8]
 8016aa2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d00d      	beq.n	8016ac4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d00a      	beq.n	8016ac4 <udp_bind+0xb4>
 8016aae:	68bb      	ldr	r3, [r7, #8]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d006      	beq.n	8016ac4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016ab6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d003      	beq.n	8016ac4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d102      	bne.n	8016aca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016ac4:	f06f 0307 	mvn.w	r3, #7
 8016ac8:	e01c      	b.n	8016b04 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	68db      	ldr	r3, [r3, #12]
 8016ace:	617b      	str	r3, [r7, #20]
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d1d9      	bne.n	8016a8a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d002      	beq.n	8016ae2 <udp_bind+0xd2>
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	e000      	b.n	8016ae4 <udp_bind+0xd4>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	68fa      	ldr	r2, [r7, #12]
 8016ae6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	88fa      	ldrh	r2, [r7, #6]
 8016aec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016aee:	7cfb      	ldrb	r3, [r7, #19]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d106      	bne.n	8016b02 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016af4:	4b09      	ldr	r3, [pc, #36]	; (8016b1c <udp_bind+0x10c>)
 8016af6:	681a      	ldr	r2, [r3, #0]
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016afc:	4a07      	ldr	r2, [pc, #28]	; (8016b1c <udp_bind+0x10c>)
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016b02:	2300      	movs	r3, #0
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	3718      	adds	r7, #24
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	0801daa8 	.word	0x0801daa8
 8016b10:	0801ceac 	.word	0x0801ceac
 8016b14:	0801d174 	.word	0x0801d174
 8016b18:	0801cf00 	.word	0x0801cf00
 8016b1c:	2000daf4 	.word	0x2000daf4

08016b20 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b086      	sub	sp, #24
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	60f8      	str	r0, [r7, #12]
 8016b28:	60b9      	str	r1, [r7, #8]
 8016b2a:	4613      	mov	r3, r2
 8016b2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d109      	bne.n	8016b48 <udp_connect+0x28>
 8016b34:	4b2c      	ldr	r3, [pc, #176]	; (8016be8 <udp_connect+0xc8>)
 8016b36:	f240 4235 	movw	r2, #1077	; 0x435
 8016b3a:	492c      	ldr	r1, [pc, #176]	; (8016bec <udp_connect+0xcc>)
 8016b3c:	482c      	ldr	r0, [pc, #176]	; (8016bf0 <udp_connect+0xd0>)
 8016b3e:	f002 fe9b 	bl	8019878 <iprintf>
 8016b42:	f06f 030f 	mvn.w	r3, #15
 8016b46:	e04b      	b.n	8016be0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d109      	bne.n	8016b62 <udp_connect+0x42>
 8016b4e:	4b26      	ldr	r3, [pc, #152]	; (8016be8 <udp_connect+0xc8>)
 8016b50:	f240 4236 	movw	r2, #1078	; 0x436
 8016b54:	4927      	ldr	r1, [pc, #156]	; (8016bf4 <udp_connect+0xd4>)
 8016b56:	4826      	ldr	r0, [pc, #152]	; (8016bf0 <udp_connect+0xd0>)
 8016b58:	f002 fe8e 	bl	8019878 <iprintf>
 8016b5c:	f06f 030f 	mvn.w	r3, #15
 8016b60:	e03e      	b.n	8016be0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	8a5b      	ldrh	r3, [r3, #18]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d10f      	bne.n	8016b8a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016b6a:	68f9      	ldr	r1, [r7, #12]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	8a5b      	ldrh	r3, [r3, #18]
 8016b70:	461a      	mov	r2, r3
 8016b72:	68f8      	ldr	r0, [r7, #12]
 8016b74:	f7ff ff4c 	bl	8016a10 <udp_bind>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016b7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d002      	beq.n	8016b8a <udp_connect+0x6a>
      return err;
 8016b84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b88:	e02a      	b.n	8016be0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d002      	beq.n	8016b96 <udp_connect+0x76>
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	e000      	b.n	8016b98 <udp_connect+0x78>
 8016b96:	2300      	movs	r3, #0
 8016b98:	68fa      	ldr	r2, [r7, #12]
 8016b9a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	88fa      	ldrh	r2, [r7, #6]
 8016ba0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	7c1b      	ldrb	r3, [r3, #16]
 8016ba6:	f043 0304 	orr.w	r3, r3, #4
 8016baa:	b2da      	uxtb	r2, r3
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016bb0:	4b11      	ldr	r3, [pc, #68]	; (8016bf8 <udp_connect+0xd8>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	617b      	str	r3, [r7, #20]
 8016bb6:	e008      	b.n	8016bca <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016bb8:	68fa      	ldr	r2, [r7, #12]
 8016bba:	697b      	ldr	r3, [r7, #20]
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	d101      	bne.n	8016bc4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	e00d      	b.n	8016be0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	617b      	str	r3, [r7, #20]
 8016bca:	697b      	ldr	r3, [r7, #20]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d1f3      	bne.n	8016bb8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016bd0:	4b09      	ldr	r3, [pc, #36]	; (8016bf8 <udp_connect+0xd8>)
 8016bd2:	681a      	ldr	r2, [r3, #0]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016bd8:	4a07      	ldr	r2, [pc, #28]	; (8016bf8 <udp_connect+0xd8>)
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016bde:	2300      	movs	r3, #0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3718      	adds	r7, #24
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}
 8016be8:	0801ceac 	.word	0x0801ceac
 8016bec:	0801d18c 	.word	0x0801d18c
 8016bf0:	0801cf00 	.word	0x0801cf00
 8016bf4:	0801d1a8 	.word	0x0801d1a8
 8016bf8:	2000daf4 	.word	0x2000daf4

08016bfc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d107      	bne.n	8016c1a <udp_disconnect+0x1e>
 8016c0a:	4b0d      	ldr	r3, [pc, #52]	; (8016c40 <udp_disconnect+0x44>)
 8016c0c:	f240 426a 	movw	r2, #1130	; 0x46a
 8016c10:	490c      	ldr	r1, [pc, #48]	; (8016c44 <udp_disconnect+0x48>)
 8016c12:	480d      	ldr	r0, [pc, #52]	; (8016c48 <udp_disconnect+0x4c>)
 8016c14:	f002 fe30 	bl	8019878 <iprintf>
 8016c18:	e00f      	b.n	8016c3a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	2200      	movs	r2, #0
 8016c24:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	7c1b      	ldrb	r3, [r3, #16]
 8016c30:	f023 0304 	bic.w	r3, r3, #4
 8016c34:	b2da      	uxtb	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	741a      	strb	r2, [r3, #16]
}
 8016c3a:	3708      	adds	r7, #8
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	0801ceac 	.word	0x0801ceac
 8016c44:	0801d1c4 	.word	0x0801d1c4
 8016c48:	0801cf00 	.word	0x0801cf00

08016c4c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b084      	sub	sp, #16
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d107      	bne.n	8016c6e <udp_recv+0x22>
 8016c5e:	4b08      	ldr	r3, [pc, #32]	; (8016c80 <udp_recv+0x34>)
 8016c60:	f240 428a 	movw	r2, #1162	; 0x48a
 8016c64:	4907      	ldr	r1, [pc, #28]	; (8016c84 <udp_recv+0x38>)
 8016c66:	4808      	ldr	r0, [pc, #32]	; (8016c88 <udp_recv+0x3c>)
 8016c68:	f002 fe06 	bl	8019878 <iprintf>
 8016c6c:	e005      	b.n	8016c7a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	68ba      	ldr	r2, [r7, #8]
 8016c72:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	61da      	str	r2, [r3, #28]
}
 8016c7a:	3710      	adds	r7, #16
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}
 8016c80:	0801ceac 	.word	0x0801ceac
 8016c84:	0801d1e0 	.word	0x0801d1e0
 8016c88:	0801cf00 	.word	0x0801cf00

08016c8c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b082      	sub	sp, #8
 8016c90:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016c92:	2000      	movs	r0, #0
 8016c94:	f7f8 fde4 	bl	800f860 <memp_malloc>
 8016c98:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d007      	beq.n	8016cb0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016ca0:	2220      	movs	r2, #32
 8016ca2:	2100      	movs	r1, #0
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f002 fd4a 	bl	801973e <memset>
    pcb->ttl = UDP_TTL;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	22ff      	movs	r2, #255	; 0xff
 8016cae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016cb0:	687b      	ldr	r3, [r7, #4]
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3708      	adds	r7, #8
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
	...

08016cbc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b085      	sub	sp, #20
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d01e      	beq.n	8016d0a <udp_netif_ip_addr_changed+0x4e>
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d01a      	beq.n	8016d0a <udp_netif_ip_addr_changed+0x4e>
 8016cd4:	683b      	ldr	r3, [r7, #0]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d017      	beq.n	8016d0a <udp_netif_ip_addr_changed+0x4e>
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d013      	beq.n	8016d0a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016ce2:	4b0d      	ldr	r3, [pc, #52]	; (8016d18 <udp_netif_ip_addr_changed+0x5c>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	60fb      	str	r3, [r7, #12]
 8016ce8:	e00c      	b.n	8016d04 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	681a      	ldr	r2, [r3, #0]
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d103      	bne.n	8016cfe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	681a      	ldr	r2, [r3, #0]
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	68db      	ldr	r3, [r3, #12]
 8016d02:	60fb      	str	r3, [r7, #12]
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d1ef      	bne.n	8016cea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016d0a:	bf00      	nop
 8016d0c:	3714      	adds	r7, #20
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d14:	4770      	bx	lr
 8016d16:	bf00      	nop
 8016d18:	2000daf4 	.word	0x2000daf4

08016d1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b082      	sub	sp, #8
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016d24:	4915      	ldr	r1, [pc, #84]	; (8016d7c <etharp_free_entry+0x60>)
 8016d26:	687a      	ldr	r2, [r7, #4]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	4413      	add	r3, r2
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	440b      	add	r3, r1
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d013      	beq.n	8016d60 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016d38:	4910      	ldr	r1, [pc, #64]	; (8016d7c <etharp_free_entry+0x60>)
 8016d3a:	687a      	ldr	r2, [r7, #4]
 8016d3c:	4613      	mov	r3, r2
 8016d3e:	005b      	lsls	r3, r3, #1
 8016d40:	4413      	add	r3, r2
 8016d42:	00db      	lsls	r3, r3, #3
 8016d44:	440b      	add	r3, r1
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7f9 fca3 	bl	8010694 <pbuf_free>
    arp_table[i].q = NULL;
 8016d4e:	490b      	ldr	r1, [pc, #44]	; (8016d7c <etharp_free_entry+0x60>)
 8016d50:	687a      	ldr	r2, [r7, #4]
 8016d52:	4613      	mov	r3, r2
 8016d54:	005b      	lsls	r3, r3, #1
 8016d56:	4413      	add	r3, r2
 8016d58:	00db      	lsls	r3, r3, #3
 8016d5a:	440b      	add	r3, r1
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016d60:	4906      	ldr	r1, [pc, #24]	; (8016d7c <etharp_free_entry+0x60>)
 8016d62:	687a      	ldr	r2, [r7, #4]
 8016d64:	4613      	mov	r3, r2
 8016d66:	005b      	lsls	r3, r3, #1
 8016d68:	4413      	add	r3, r2
 8016d6a:	00db      	lsls	r3, r3, #3
 8016d6c:	440b      	add	r3, r1
 8016d6e:	3314      	adds	r3, #20
 8016d70:	2200      	movs	r2, #0
 8016d72:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016d74:	bf00      	nop
 8016d76:	3708      	adds	r7, #8
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}
 8016d7c:	2000daf8 	.word	0x2000daf8

08016d80 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d86:	2300      	movs	r3, #0
 8016d88:	607b      	str	r3, [r7, #4]
 8016d8a:	e096      	b.n	8016eba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016d8c:	494f      	ldr	r1, [pc, #316]	; (8016ecc <etharp_tmr+0x14c>)
 8016d8e:	687a      	ldr	r2, [r7, #4]
 8016d90:	4613      	mov	r3, r2
 8016d92:	005b      	lsls	r3, r3, #1
 8016d94:	4413      	add	r3, r2
 8016d96:	00db      	lsls	r3, r3, #3
 8016d98:	440b      	add	r3, r1
 8016d9a:	3314      	adds	r3, #20
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016da0:	78fb      	ldrb	r3, [r7, #3]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	f000 8086 	beq.w	8016eb4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016da8:	4948      	ldr	r1, [pc, #288]	; (8016ecc <etharp_tmr+0x14c>)
 8016daa:	687a      	ldr	r2, [r7, #4]
 8016dac:	4613      	mov	r3, r2
 8016dae:	005b      	lsls	r3, r3, #1
 8016db0:	4413      	add	r3, r2
 8016db2:	00db      	lsls	r3, r3, #3
 8016db4:	440b      	add	r3, r1
 8016db6:	3312      	adds	r3, #18
 8016db8:	881b      	ldrh	r3, [r3, #0]
 8016dba:	3301      	adds	r3, #1
 8016dbc:	b298      	uxth	r0, r3
 8016dbe:	4943      	ldr	r1, [pc, #268]	; (8016ecc <etharp_tmr+0x14c>)
 8016dc0:	687a      	ldr	r2, [r7, #4]
 8016dc2:	4613      	mov	r3, r2
 8016dc4:	005b      	lsls	r3, r3, #1
 8016dc6:	4413      	add	r3, r2
 8016dc8:	00db      	lsls	r3, r3, #3
 8016dca:	440b      	add	r3, r1
 8016dcc:	3312      	adds	r3, #18
 8016dce:	4602      	mov	r2, r0
 8016dd0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016dd2:	493e      	ldr	r1, [pc, #248]	; (8016ecc <etharp_tmr+0x14c>)
 8016dd4:	687a      	ldr	r2, [r7, #4]
 8016dd6:	4613      	mov	r3, r2
 8016dd8:	005b      	lsls	r3, r3, #1
 8016dda:	4413      	add	r3, r2
 8016ddc:	00db      	lsls	r3, r3, #3
 8016dde:	440b      	add	r3, r1
 8016de0:	3312      	adds	r3, #18
 8016de2:	881b      	ldrh	r3, [r3, #0]
 8016de4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016de8:	d215      	bcs.n	8016e16 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016dea:	4938      	ldr	r1, [pc, #224]	; (8016ecc <etharp_tmr+0x14c>)
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	4613      	mov	r3, r2
 8016df0:	005b      	lsls	r3, r3, #1
 8016df2:	4413      	add	r3, r2
 8016df4:	00db      	lsls	r3, r3, #3
 8016df6:	440b      	add	r3, r1
 8016df8:	3314      	adds	r3, #20
 8016dfa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016dfc:	2b01      	cmp	r3, #1
 8016dfe:	d10e      	bne.n	8016e1e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016e00:	4932      	ldr	r1, [pc, #200]	; (8016ecc <etharp_tmr+0x14c>)
 8016e02:	687a      	ldr	r2, [r7, #4]
 8016e04:	4613      	mov	r3, r2
 8016e06:	005b      	lsls	r3, r3, #1
 8016e08:	4413      	add	r3, r2
 8016e0a:	00db      	lsls	r3, r3, #3
 8016e0c:	440b      	add	r3, r1
 8016e0e:	3312      	adds	r3, #18
 8016e10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016e12:	2b04      	cmp	r3, #4
 8016e14:	d903      	bls.n	8016e1e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f7ff ff80 	bl	8016d1c <etharp_free_entry>
 8016e1c:	e04a      	b.n	8016eb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016e1e:	492b      	ldr	r1, [pc, #172]	; (8016ecc <etharp_tmr+0x14c>)
 8016e20:	687a      	ldr	r2, [r7, #4]
 8016e22:	4613      	mov	r3, r2
 8016e24:	005b      	lsls	r3, r3, #1
 8016e26:	4413      	add	r3, r2
 8016e28:	00db      	lsls	r3, r3, #3
 8016e2a:	440b      	add	r3, r1
 8016e2c:	3314      	adds	r3, #20
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	2b03      	cmp	r3, #3
 8016e32:	d10a      	bne.n	8016e4a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016e34:	4925      	ldr	r1, [pc, #148]	; (8016ecc <etharp_tmr+0x14c>)
 8016e36:	687a      	ldr	r2, [r7, #4]
 8016e38:	4613      	mov	r3, r2
 8016e3a:	005b      	lsls	r3, r3, #1
 8016e3c:	4413      	add	r3, r2
 8016e3e:	00db      	lsls	r3, r3, #3
 8016e40:	440b      	add	r3, r1
 8016e42:	3314      	adds	r3, #20
 8016e44:	2204      	movs	r2, #4
 8016e46:	701a      	strb	r2, [r3, #0]
 8016e48:	e034      	b.n	8016eb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016e4a:	4920      	ldr	r1, [pc, #128]	; (8016ecc <etharp_tmr+0x14c>)
 8016e4c:	687a      	ldr	r2, [r7, #4]
 8016e4e:	4613      	mov	r3, r2
 8016e50:	005b      	lsls	r3, r3, #1
 8016e52:	4413      	add	r3, r2
 8016e54:	00db      	lsls	r3, r3, #3
 8016e56:	440b      	add	r3, r1
 8016e58:	3314      	adds	r3, #20
 8016e5a:	781b      	ldrb	r3, [r3, #0]
 8016e5c:	2b04      	cmp	r3, #4
 8016e5e:	d10a      	bne.n	8016e76 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016e60:	491a      	ldr	r1, [pc, #104]	; (8016ecc <etharp_tmr+0x14c>)
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	4613      	mov	r3, r2
 8016e66:	005b      	lsls	r3, r3, #1
 8016e68:	4413      	add	r3, r2
 8016e6a:	00db      	lsls	r3, r3, #3
 8016e6c:	440b      	add	r3, r1
 8016e6e:	3314      	adds	r3, #20
 8016e70:	2202      	movs	r2, #2
 8016e72:	701a      	strb	r2, [r3, #0]
 8016e74:	e01e      	b.n	8016eb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016e76:	4915      	ldr	r1, [pc, #84]	; (8016ecc <etharp_tmr+0x14c>)
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	005b      	lsls	r3, r3, #1
 8016e7e:	4413      	add	r3, r2
 8016e80:	00db      	lsls	r3, r3, #3
 8016e82:	440b      	add	r3, r1
 8016e84:	3314      	adds	r3, #20
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	2b01      	cmp	r3, #1
 8016e8a:	d113      	bne.n	8016eb4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016e8c:	490f      	ldr	r1, [pc, #60]	; (8016ecc <etharp_tmr+0x14c>)
 8016e8e:	687a      	ldr	r2, [r7, #4]
 8016e90:	4613      	mov	r3, r2
 8016e92:	005b      	lsls	r3, r3, #1
 8016e94:	4413      	add	r3, r2
 8016e96:	00db      	lsls	r3, r3, #3
 8016e98:	440b      	add	r3, r1
 8016e9a:	3308      	adds	r3, #8
 8016e9c:	6818      	ldr	r0, [r3, #0]
 8016e9e:	687a      	ldr	r2, [r7, #4]
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	4413      	add	r3, r2
 8016ea6:	00db      	lsls	r3, r3, #3
 8016ea8:	4a08      	ldr	r2, [pc, #32]	; (8016ecc <etharp_tmr+0x14c>)
 8016eaa:	4413      	add	r3, r2
 8016eac:	3304      	adds	r3, #4
 8016eae:	4619      	mov	r1, r3
 8016eb0:	f000 fe6e 	bl	8017b90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	3301      	adds	r3, #1
 8016eb8:	607b      	str	r3, [r7, #4]
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	2b09      	cmp	r3, #9
 8016ebe:	f77f af65 	ble.w	8016d8c <etharp_tmr+0xc>
      }
    }
  }
}
 8016ec2:	bf00      	nop
 8016ec4:	bf00      	nop
 8016ec6:	3708      	adds	r7, #8
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	2000daf8 	.word	0x2000daf8

08016ed0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b08a      	sub	sp, #40	; 0x28
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	60f8      	str	r0, [r7, #12]
 8016ed8:	460b      	mov	r3, r1
 8016eda:	607a      	str	r2, [r7, #4]
 8016edc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016ede:	230a      	movs	r3, #10
 8016ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016ee2:	230a      	movs	r3, #10
 8016ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016ee6:	230a      	movs	r3, #10
 8016ee8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016eea:	2300      	movs	r3, #0
 8016eec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016eee:	230a      	movs	r3, #10
 8016ef0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	83bb      	strh	r3, [r7, #28]
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	837b      	strh	r3, [r7, #26]
 8016efa:	2300      	movs	r3, #0
 8016efc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016efe:	2300      	movs	r3, #0
 8016f00:	843b      	strh	r3, [r7, #32]
 8016f02:	e0ae      	b.n	8017062 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016f04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f08:	49a6      	ldr	r1, [pc, #664]	; (80171a4 <etharp_find_entry+0x2d4>)
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	005b      	lsls	r3, r3, #1
 8016f0e:	4413      	add	r3, r2
 8016f10:	00db      	lsls	r3, r3, #3
 8016f12:	440b      	add	r3, r1
 8016f14:	3314      	adds	r3, #20
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016f1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016f1e:	2b0a      	cmp	r3, #10
 8016f20:	d105      	bne.n	8016f2e <etharp_find_entry+0x5e>
 8016f22:	7dfb      	ldrb	r3, [r7, #23]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d102      	bne.n	8016f2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016f28:	8c3b      	ldrh	r3, [r7, #32]
 8016f2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8016f2c:	e095      	b.n	801705a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016f2e:	7dfb      	ldrb	r3, [r7, #23]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	f000 8092 	beq.w	801705a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016f36:	7dfb      	ldrb	r3, [r7, #23]
 8016f38:	2b01      	cmp	r3, #1
 8016f3a:	d009      	beq.n	8016f50 <etharp_find_entry+0x80>
 8016f3c:	7dfb      	ldrb	r3, [r7, #23]
 8016f3e:	2b01      	cmp	r3, #1
 8016f40:	d806      	bhi.n	8016f50 <etharp_find_entry+0x80>
 8016f42:	4b99      	ldr	r3, [pc, #612]	; (80171a8 <etharp_find_entry+0x2d8>)
 8016f44:	f240 1223 	movw	r2, #291	; 0x123
 8016f48:	4998      	ldr	r1, [pc, #608]	; (80171ac <etharp_find_entry+0x2dc>)
 8016f4a:	4899      	ldr	r0, [pc, #612]	; (80171b0 <etharp_find_entry+0x2e0>)
 8016f4c:	f002 fc94 	bl	8019878 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d020      	beq.n	8016f98 <etharp_find_entry+0xc8>
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	6819      	ldr	r1, [r3, #0]
 8016f5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f5e:	4891      	ldr	r0, [pc, #580]	; (80171a4 <etharp_find_entry+0x2d4>)
 8016f60:	4613      	mov	r3, r2
 8016f62:	005b      	lsls	r3, r3, #1
 8016f64:	4413      	add	r3, r2
 8016f66:	00db      	lsls	r3, r3, #3
 8016f68:	4403      	add	r3, r0
 8016f6a:	3304      	adds	r3, #4
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	4299      	cmp	r1, r3
 8016f70:	d112      	bne.n	8016f98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d00c      	beq.n	8016f92 <etharp_find_entry+0xc2>
 8016f78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f7c:	4989      	ldr	r1, [pc, #548]	; (80171a4 <etharp_find_entry+0x2d4>)
 8016f7e:	4613      	mov	r3, r2
 8016f80:	005b      	lsls	r3, r3, #1
 8016f82:	4413      	add	r3, r2
 8016f84:	00db      	lsls	r3, r3, #3
 8016f86:	440b      	add	r3, r1
 8016f88:	3308      	adds	r3, #8
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	429a      	cmp	r2, r3
 8016f90:	d102      	bne.n	8016f98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016f92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f96:	e100      	b.n	801719a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016f98:	7dfb      	ldrb	r3, [r7, #23]
 8016f9a:	2b01      	cmp	r3, #1
 8016f9c:	d140      	bne.n	8017020 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016f9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fa2:	4980      	ldr	r1, [pc, #512]	; (80171a4 <etharp_find_entry+0x2d4>)
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	005b      	lsls	r3, r3, #1
 8016fa8:	4413      	add	r3, r2
 8016faa:	00db      	lsls	r3, r3, #3
 8016fac:	440b      	add	r3, r1
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d01a      	beq.n	8016fea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016fb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fb8:	497a      	ldr	r1, [pc, #488]	; (80171a4 <etharp_find_entry+0x2d4>)
 8016fba:	4613      	mov	r3, r2
 8016fbc:	005b      	lsls	r3, r3, #1
 8016fbe:	4413      	add	r3, r2
 8016fc0:	00db      	lsls	r3, r3, #3
 8016fc2:	440b      	add	r3, r1
 8016fc4:	3312      	adds	r3, #18
 8016fc6:	881b      	ldrh	r3, [r3, #0]
 8016fc8:	8bba      	ldrh	r2, [r7, #28]
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d845      	bhi.n	801705a <etharp_find_entry+0x18a>
            old_queue = i;
 8016fce:	8c3b      	ldrh	r3, [r7, #32]
 8016fd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016fd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fd6:	4973      	ldr	r1, [pc, #460]	; (80171a4 <etharp_find_entry+0x2d4>)
 8016fd8:	4613      	mov	r3, r2
 8016fda:	005b      	lsls	r3, r3, #1
 8016fdc:	4413      	add	r3, r2
 8016fde:	00db      	lsls	r3, r3, #3
 8016fe0:	440b      	add	r3, r1
 8016fe2:	3312      	adds	r3, #18
 8016fe4:	881b      	ldrh	r3, [r3, #0]
 8016fe6:	83bb      	strh	r3, [r7, #28]
 8016fe8:	e037      	b.n	801705a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016fea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fee:	496d      	ldr	r1, [pc, #436]	; (80171a4 <etharp_find_entry+0x2d4>)
 8016ff0:	4613      	mov	r3, r2
 8016ff2:	005b      	lsls	r3, r3, #1
 8016ff4:	4413      	add	r3, r2
 8016ff6:	00db      	lsls	r3, r3, #3
 8016ff8:	440b      	add	r3, r1
 8016ffa:	3312      	adds	r3, #18
 8016ffc:	881b      	ldrh	r3, [r3, #0]
 8016ffe:	8b7a      	ldrh	r2, [r7, #26]
 8017000:	429a      	cmp	r2, r3
 8017002:	d82a      	bhi.n	801705a <etharp_find_entry+0x18a>
            old_pending = i;
 8017004:	8c3b      	ldrh	r3, [r7, #32]
 8017006:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801700c:	4965      	ldr	r1, [pc, #404]	; (80171a4 <etharp_find_entry+0x2d4>)
 801700e:	4613      	mov	r3, r2
 8017010:	005b      	lsls	r3, r3, #1
 8017012:	4413      	add	r3, r2
 8017014:	00db      	lsls	r3, r3, #3
 8017016:	440b      	add	r3, r1
 8017018:	3312      	adds	r3, #18
 801701a:	881b      	ldrh	r3, [r3, #0]
 801701c:	837b      	strh	r3, [r7, #26]
 801701e:	e01c      	b.n	801705a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017020:	7dfb      	ldrb	r3, [r7, #23]
 8017022:	2b01      	cmp	r3, #1
 8017024:	d919      	bls.n	801705a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017026:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801702a:	495e      	ldr	r1, [pc, #376]	; (80171a4 <etharp_find_entry+0x2d4>)
 801702c:	4613      	mov	r3, r2
 801702e:	005b      	lsls	r3, r3, #1
 8017030:	4413      	add	r3, r2
 8017032:	00db      	lsls	r3, r3, #3
 8017034:	440b      	add	r3, r1
 8017036:	3312      	adds	r3, #18
 8017038:	881b      	ldrh	r3, [r3, #0]
 801703a:	8b3a      	ldrh	r2, [r7, #24]
 801703c:	429a      	cmp	r2, r3
 801703e:	d80c      	bhi.n	801705a <etharp_find_entry+0x18a>
            old_stable = i;
 8017040:	8c3b      	ldrh	r3, [r7, #32]
 8017042:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017044:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017048:	4956      	ldr	r1, [pc, #344]	; (80171a4 <etharp_find_entry+0x2d4>)
 801704a:	4613      	mov	r3, r2
 801704c:	005b      	lsls	r3, r3, #1
 801704e:	4413      	add	r3, r2
 8017050:	00db      	lsls	r3, r3, #3
 8017052:	440b      	add	r3, r1
 8017054:	3312      	adds	r3, #18
 8017056:	881b      	ldrh	r3, [r3, #0]
 8017058:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801705a:	8c3b      	ldrh	r3, [r7, #32]
 801705c:	3301      	adds	r3, #1
 801705e:	b29b      	uxth	r3, r3
 8017060:	843b      	strh	r3, [r7, #32]
 8017062:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017066:	2b09      	cmp	r3, #9
 8017068:	f77f af4c 	ble.w	8016f04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801706c:	7afb      	ldrb	r3, [r7, #11]
 801706e:	f003 0302 	and.w	r3, r3, #2
 8017072:	2b00      	cmp	r3, #0
 8017074:	d108      	bne.n	8017088 <etharp_find_entry+0x1b8>
 8017076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801707a:	2b0a      	cmp	r3, #10
 801707c:	d107      	bne.n	801708e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801707e:	7afb      	ldrb	r3, [r7, #11]
 8017080:	f003 0301 	and.w	r3, r3, #1
 8017084:	2b00      	cmp	r3, #0
 8017086:	d102      	bne.n	801708e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017088:	f04f 33ff 	mov.w	r3, #4294967295
 801708c:	e085      	b.n	801719a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801708e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017092:	2b09      	cmp	r3, #9
 8017094:	dc02      	bgt.n	801709c <etharp_find_entry+0x1cc>
    i = empty;
 8017096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017098:	843b      	strh	r3, [r7, #32]
 801709a:	e039      	b.n	8017110 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801709c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80170a0:	2b09      	cmp	r3, #9
 80170a2:	dc14      	bgt.n	80170ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80170a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80170a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80170a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170ac:	493d      	ldr	r1, [pc, #244]	; (80171a4 <etharp_find_entry+0x2d4>)
 80170ae:	4613      	mov	r3, r2
 80170b0:	005b      	lsls	r3, r3, #1
 80170b2:	4413      	add	r3, r2
 80170b4:	00db      	lsls	r3, r3, #3
 80170b6:	440b      	add	r3, r1
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d018      	beq.n	80170f0 <etharp_find_entry+0x220>
 80170be:	4b3a      	ldr	r3, [pc, #232]	; (80171a8 <etharp_find_entry+0x2d8>)
 80170c0:	f240 126d 	movw	r2, #365	; 0x16d
 80170c4:	493b      	ldr	r1, [pc, #236]	; (80171b4 <etharp_find_entry+0x2e4>)
 80170c6:	483a      	ldr	r0, [pc, #232]	; (80171b0 <etharp_find_entry+0x2e0>)
 80170c8:	f002 fbd6 	bl	8019878 <iprintf>
 80170cc:	e010      	b.n	80170f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80170ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80170d2:	2b09      	cmp	r3, #9
 80170d4:	dc02      	bgt.n	80170dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80170d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80170d8:	843b      	strh	r3, [r7, #32]
 80170da:	e009      	b.n	80170f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80170dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80170e0:	2b09      	cmp	r3, #9
 80170e2:	dc02      	bgt.n	80170ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80170e4:	8bfb      	ldrh	r3, [r7, #30]
 80170e6:	843b      	strh	r3, [r7, #32]
 80170e8:	e002      	b.n	80170f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80170ea:	f04f 33ff 	mov.w	r3, #4294967295
 80170ee:	e054      	b.n	801719a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80170f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80170f4:	2b09      	cmp	r3, #9
 80170f6:	dd06      	ble.n	8017106 <etharp_find_entry+0x236>
 80170f8:	4b2b      	ldr	r3, [pc, #172]	; (80171a8 <etharp_find_entry+0x2d8>)
 80170fa:	f240 127f 	movw	r2, #383	; 0x17f
 80170fe:	492e      	ldr	r1, [pc, #184]	; (80171b8 <etharp_find_entry+0x2e8>)
 8017100:	482b      	ldr	r0, [pc, #172]	; (80171b0 <etharp_find_entry+0x2e0>)
 8017102:	f002 fbb9 	bl	8019878 <iprintf>
    etharp_free_entry(i);
 8017106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801710a:	4618      	mov	r0, r3
 801710c:	f7ff fe06 	bl	8016d1c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017110:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017114:	2b09      	cmp	r3, #9
 8017116:	dd06      	ble.n	8017126 <etharp_find_entry+0x256>
 8017118:	4b23      	ldr	r3, [pc, #140]	; (80171a8 <etharp_find_entry+0x2d8>)
 801711a:	f240 1283 	movw	r2, #387	; 0x183
 801711e:	4926      	ldr	r1, [pc, #152]	; (80171b8 <etharp_find_entry+0x2e8>)
 8017120:	4823      	ldr	r0, [pc, #140]	; (80171b0 <etharp_find_entry+0x2e0>)
 8017122:	f002 fba9 	bl	8019878 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801712a:	491e      	ldr	r1, [pc, #120]	; (80171a4 <etharp_find_entry+0x2d4>)
 801712c:	4613      	mov	r3, r2
 801712e:	005b      	lsls	r3, r3, #1
 8017130:	4413      	add	r3, r2
 8017132:	00db      	lsls	r3, r3, #3
 8017134:	440b      	add	r3, r1
 8017136:	3314      	adds	r3, #20
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d006      	beq.n	801714c <etharp_find_entry+0x27c>
 801713e:	4b1a      	ldr	r3, [pc, #104]	; (80171a8 <etharp_find_entry+0x2d8>)
 8017140:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017144:	491d      	ldr	r1, [pc, #116]	; (80171bc <etharp_find_entry+0x2ec>)
 8017146:	481a      	ldr	r0, [pc, #104]	; (80171b0 <etharp_find_entry+0x2e0>)
 8017148:	f002 fb96 	bl	8019878 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00b      	beq.n	801716a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	6819      	ldr	r1, [r3, #0]
 801715a:	4812      	ldr	r0, [pc, #72]	; (80171a4 <etharp_find_entry+0x2d4>)
 801715c:	4613      	mov	r3, r2
 801715e:	005b      	lsls	r3, r3, #1
 8017160:	4413      	add	r3, r2
 8017162:	00db      	lsls	r3, r3, #3
 8017164:	4403      	add	r3, r0
 8017166:	3304      	adds	r3, #4
 8017168:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801716a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801716e:	490d      	ldr	r1, [pc, #52]	; (80171a4 <etharp_find_entry+0x2d4>)
 8017170:	4613      	mov	r3, r2
 8017172:	005b      	lsls	r3, r3, #1
 8017174:	4413      	add	r3, r2
 8017176:	00db      	lsls	r3, r3, #3
 8017178:	440b      	add	r3, r1
 801717a:	3312      	adds	r3, #18
 801717c:	2200      	movs	r2, #0
 801717e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017184:	4907      	ldr	r1, [pc, #28]	; (80171a4 <etharp_find_entry+0x2d4>)
 8017186:	4613      	mov	r3, r2
 8017188:	005b      	lsls	r3, r3, #1
 801718a:	4413      	add	r3, r2
 801718c:	00db      	lsls	r3, r3, #3
 801718e:	440b      	add	r3, r1
 8017190:	3308      	adds	r3, #8
 8017192:	687a      	ldr	r2, [r7, #4]
 8017194:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801719a:	4618      	mov	r0, r3
 801719c:	3728      	adds	r7, #40	; 0x28
 801719e:	46bd      	mov	sp, r7
 80171a0:	bd80      	pop	{r7, pc}
 80171a2:	bf00      	nop
 80171a4:	2000daf8 	.word	0x2000daf8
 80171a8:	0801d210 	.word	0x0801d210
 80171ac:	0801d248 	.word	0x0801d248
 80171b0:	0801d288 	.word	0x0801d288
 80171b4:	0801d2b0 	.word	0x0801d2b0
 80171b8:	0801d2c8 	.word	0x0801d2c8
 80171bc:	0801d2dc 	.word	0x0801d2dc

080171c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b088      	sub	sp, #32
 80171c4:	af02      	add	r7, sp, #8
 80171c6:	60f8      	str	r0, [r7, #12]
 80171c8:	60b9      	str	r1, [r7, #8]
 80171ca:	607a      	str	r2, [r7, #4]
 80171cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80171d4:	2b06      	cmp	r3, #6
 80171d6:	d006      	beq.n	80171e6 <etharp_update_arp_entry+0x26>
 80171d8:	4b48      	ldr	r3, [pc, #288]	; (80172fc <etharp_update_arp_entry+0x13c>)
 80171da:	f240 12a9 	movw	r2, #425	; 0x1a9
 80171de:	4948      	ldr	r1, [pc, #288]	; (8017300 <etharp_update_arp_entry+0x140>)
 80171e0:	4848      	ldr	r0, [pc, #288]	; (8017304 <etharp_update_arp_entry+0x144>)
 80171e2:	f002 fb49 	bl	8019878 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d012      	beq.n	8017212 <etharp_update_arp_entry+0x52>
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d00e      	beq.n	8017212 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	68f9      	ldr	r1, [r7, #12]
 80171fa:	4618      	mov	r0, r3
 80171fc:	f001 f8fe 	bl	80183fc <ip4_addr_isbroadcast_u32>
 8017200:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017202:	2b00      	cmp	r3, #0
 8017204:	d105      	bne.n	8017212 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801720e:	2be0      	cmp	r3, #224	; 0xe0
 8017210:	d102      	bne.n	8017218 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017212:	f06f 030f 	mvn.w	r3, #15
 8017216:	e06c      	b.n	80172f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017218:	78fb      	ldrb	r3, [r7, #3]
 801721a:	68fa      	ldr	r2, [r7, #12]
 801721c:	4619      	mov	r1, r3
 801721e:	68b8      	ldr	r0, [r7, #8]
 8017220:	f7ff fe56 	bl	8016ed0 <etharp_find_entry>
 8017224:	4603      	mov	r3, r0
 8017226:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017228:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801722c:	2b00      	cmp	r3, #0
 801722e:	da02      	bge.n	8017236 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017230:	8afb      	ldrh	r3, [r7, #22]
 8017232:	b25b      	sxtb	r3, r3
 8017234:	e05d      	b.n	80172f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017236:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801723a:	4933      	ldr	r1, [pc, #204]	; (8017308 <etharp_update_arp_entry+0x148>)
 801723c:	4613      	mov	r3, r2
 801723e:	005b      	lsls	r3, r3, #1
 8017240:	4413      	add	r3, r2
 8017242:	00db      	lsls	r3, r3, #3
 8017244:	440b      	add	r3, r1
 8017246:	3314      	adds	r3, #20
 8017248:	2202      	movs	r2, #2
 801724a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801724c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017250:	492d      	ldr	r1, [pc, #180]	; (8017308 <etharp_update_arp_entry+0x148>)
 8017252:	4613      	mov	r3, r2
 8017254:	005b      	lsls	r3, r3, #1
 8017256:	4413      	add	r3, r2
 8017258:	00db      	lsls	r3, r3, #3
 801725a:	440b      	add	r3, r1
 801725c:	3308      	adds	r3, #8
 801725e:	68fa      	ldr	r2, [r7, #12]
 8017260:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017266:	4613      	mov	r3, r2
 8017268:	005b      	lsls	r3, r3, #1
 801726a:	4413      	add	r3, r2
 801726c:	00db      	lsls	r3, r3, #3
 801726e:	3308      	adds	r3, #8
 8017270:	4a25      	ldr	r2, [pc, #148]	; (8017308 <etharp_update_arp_entry+0x148>)
 8017272:	4413      	add	r3, r2
 8017274:	3304      	adds	r3, #4
 8017276:	2206      	movs	r2, #6
 8017278:	6879      	ldr	r1, [r7, #4]
 801727a:	4618      	mov	r0, r3
 801727c:	f002 fa37 	bl	80196ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017284:	4920      	ldr	r1, [pc, #128]	; (8017308 <etharp_update_arp_entry+0x148>)
 8017286:	4613      	mov	r3, r2
 8017288:	005b      	lsls	r3, r3, #1
 801728a:	4413      	add	r3, r2
 801728c:	00db      	lsls	r3, r3, #3
 801728e:	440b      	add	r3, r1
 8017290:	3312      	adds	r3, #18
 8017292:	2200      	movs	r2, #0
 8017294:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017296:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801729a:	491b      	ldr	r1, [pc, #108]	; (8017308 <etharp_update_arp_entry+0x148>)
 801729c:	4613      	mov	r3, r2
 801729e:	005b      	lsls	r3, r3, #1
 80172a0:	4413      	add	r3, r2
 80172a2:	00db      	lsls	r3, r3, #3
 80172a4:	440b      	add	r3, r1
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d021      	beq.n	80172f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80172ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172b0:	4915      	ldr	r1, [pc, #84]	; (8017308 <etharp_update_arp_entry+0x148>)
 80172b2:	4613      	mov	r3, r2
 80172b4:	005b      	lsls	r3, r3, #1
 80172b6:	4413      	add	r3, r2
 80172b8:	00db      	lsls	r3, r3, #3
 80172ba:	440b      	add	r3, r1
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80172c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172c4:	4910      	ldr	r1, [pc, #64]	; (8017308 <etharp_update_arp_entry+0x148>)
 80172c6:	4613      	mov	r3, r2
 80172c8:	005b      	lsls	r3, r3, #1
 80172ca:	4413      	add	r3, r2
 80172cc:	00db      	lsls	r3, r3, #3
 80172ce:	440b      	add	r3, r1
 80172d0:	2200      	movs	r2, #0
 80172d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80172da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80172de:	9300      	str	r3, [sp, #0]
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	6939      	ldr	r1, [r7, #16]
 80172e4:	68f8      	ldr	r0, [r7, #12]
 80172e6:	f001 ff97 	bl	8019218 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80172ea:	6938      	ldr	r0, [r7, #16]
 80172ec:	f7f9 f9d2 	bl	8010694 <pbuf_free>
  }
  return ERR_OK;
 80172f0:	2300      	movs	r3, #0
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3718      	adds	r7, #24
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}
 80172fa:	bf00      	nop
 80172fc:	0801d210 	.word	0x0801d210
 8017300:	0801d308 	.word	0x0801d308
 8017304:	0801d288 	.word	0x0801d288
 8017308:	2000daf8 	.word	0x2000daf8

0801730c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b084      	sub	sp, #16
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017314:	2300      	movs	r3, #0
 8017316:	60fb      	str	r3, [r7, #12]
 8017318:	e01e      	b.n	8017358 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801731a:	4913      	ldr	r1, [pc, #76]	; (8017368 <etharp_cleanup_netif+0x5c>)
 801731c:	68fa      	ldr	r2, [r7, #12]
 801731e:	4613      	mov	r3, r2
 8017320:	005b      	lsls	r3, r3, #1
 8017322:	4413      	add	r3, r2
 8017324:	00db      	lsls	r3, r3, #3
 8017326:	440b      	add	r3, r1
 8017328:	3314      	adds	r3, #20
 801732a:	781b      	ldrb	r3, [r3, #0]
 801732c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801732e:	7afb      	ldrb	r3, [r7, #11]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d00e      	beq.n	8017352 <etharp_cleanup_netif+0x46>
 8017334:	490c      	ldr	r1, [pc, #48]	; (8017368 <etharp_cleanup_netif+0x5c>)
 8017336:	68fa      	ldr	r2, [r7, #12]
 8017338:	4613      	mov	r3, r2
 801733a:	005b      	lsls	r3, r3, #1
 801733c:	4413      	add	r3, r2
 801733e:	00db      	lsls	r3, r3, #3
 8017340:	440b      	add	r3, r1
 8017342:	3308      	adds	r3, #8
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	687a      	ldr	r2, [r7, #4]
 8017348:	429a      	cmp	r2, r3
 801734a:	d102      	bne.n	8017352 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801734c:	68f8      	ldr	r0, [r7, #12]
 801734e:	f7ff fce5 	bl	8016d1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	3301      	adds	r3, #1
 8017356:	60fb      	str	r3, [r7, #12]
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	2b09      	cmp	r3, #9
 801735c:	dddd      	ble.n	801731a <etharp_cleanup_netif+0xe>
    }
  }
}
 801735e:	bf00      	nop
 8017360:	bf00      	nop
 8017362:	3710      	adds	r7, #16
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	2000daf8 	.word	0x2000daf8

0801736c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801736c:	b5b0      	push	{r4, r5, r7, lr}
 801736e:	b08a      	sub	sp, #40	; 0x28
 8017370:	af04      	add	r7, sp, #16
 8017372:	6078      	str	r0, [r7, #4]
 8017374:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d107      	bne.n	801738c <etharp_input+0x20>
 801737c:	4b3d      	ldr	r3, [pc, #244]	; (8017474 <etharp_input+0x108>)
 801737e:	f240 228a 	movw	r2, #650	; 0x28a
 8017382:	493d      	ldr	r1, [pc, #244]	; (8017478 <etharp_input+0x10c>)
 8017384:	483d      	ldr	r0, [pc, #244]	; (801747c <etharp_input+0x110>)
 8017386:	f002 fa77 	bl	8019878 <iprintf>
 801738a:	e06f      	b.n	801746c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	685b      	ldr	r3, [r3, #4]
 8017390:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	881b      	ldrh	r3, [r3, #0]
 8017396:	b29b      	uxth	r3, r3
 8017398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801739c:	d10c      	bne.n	80173b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80173a2:	2b06      	cmp	r3, #6
 80173a4:	d108      	bne.n	80173b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80173a6:	693b      	ldr	r3, [r7, #16]
 80173a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80173aa:	2b04      	cmp	r3, #4
 80173ac:	d104      	bne.n	80173b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80173ae:	693b      	ldr	r3, [r7, #16]
 80173b0:	885b      	ldrh	r3, [r3, #2]
 80173b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80173b4:	2b08      	cmp	r3, #8
 80173b6:	d003      	beq.n	80173c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80173b8:	6878      	ldr	r0, [r7, #4]
 80173ba:	f7f9 f96b 	bl	8010694 <pbuf_free>
    return;
 80173be:	e055      	b.n	801746c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80173c0:	693b      	ldr	r3, [r7, #16]
 80173c2:	330e      	adds	r3, #14
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80173c8:	693b      	ldr	r3, [r7, #16]
 80173ca:	3318      	adds	r3, #24
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	3304      	adds	r3, #4
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d102      	bne.n	80173e0 <etharp_input+0x74>
    for_us = 0;
 80173da:	2300      	movs	r3, #0
 80173dc:	75fb      	strb	r3, [r7, #23]
 80173de:	e009      	b.n	80173f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80173e0:	68ba      	ldr	r2, [r7, #8]
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	3304      	adds	r3, #4
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	bf0c      	ite	eq
 80173ec:	2301      	moveq	r3, #1
 80173ee:	2300      	movne	r3, #0
 80173f0:	b2db      	uxtb	r3, r3
 80173f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80173f4:	693b      	ldr	r3, [r7, #16]
 80173f6:	f103 0208 	add.w	r2, r3, #8
 80173fa:	7dfb      	ldrb	r3, [r7, #23]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d001      	beq.n	8017404 <etharp_input+0x98>
 8017400:	2301      	movs	r3, #1
 8017402:	e000      	b.n	8017406 <etharp_input+0x9a>
 8017404:	2302      	movs	r3, #2
 8017406:	f107 010c 	add.w	r1, r7, #12
 801740a:	6838      	ldr	r0, [r7, #0]
 801740c:	f7ff fed8 	bl	80171c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	88db      	ldrh	r3, [r3, #6]
 8017414:	b29b      	uxth	r3, r3
 8017416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801741a:	d003      	beq.n	8017424 <etharp_input+0xb8>
 801741c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017420:	d01e      	beq.n	8017460 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017422:	e020      	b.n	8017466 <etharp_input+0xfa>
      if (for_us) {
 8017424:	7dfb      	ldrb	r3, [r7, #23]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d01c      	beq.n	8017464 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801742a:	683b      	ldr	r3, [r7, #0]
 801742c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017430:	693b      	ldr	r3, [r7, #16]
 8017432:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017440:	693a      	ldr	r2, [r7, #16]
 8017442:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017444:	2102      	movs	r1, #2
 8017446:	9103      	str	r1, [sp, #12]
 8017448:	f107 010c 	add.w	r1, r7, #12
 801744c:	9102      	str	r1, [sp, #8]
 801744e:	9201      	str	r2, [sp, #4]
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	462b      	mov	r3, r5
 8017454:	4622      	mov	r2, r4
 8017456:	4601      	mov	r1, r0
 8017458:	6838      	ldr	r0, [r7, #0]
 801745a:	f000 faeb 	bl	8017a34 <etharp_raw>
      break;
 801745e:	e001      	b.n	8017464 <etharp_input+0xf8>
      break;
 8017460:	bf00      	nop
 8017462:	e000      	b.n	8017466 <etharp_input+0xfa>
      break;
 8017464:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7f9 f914 	bl	8010694 <pbuf_free>
}
 801746c:	3718      	adds	r7, #24
 801746e:	46bd      	mov	sp, r7
 8017470:	bdb0      	pop	{r4, r5, r7, pc}
 8017472:	bf00      	nop
 8017474:	0801d210 	.word	0x0801d210
 8017478:	0801d360 	.word	0x0801d360
 801747c:	0801d288 	.word	0x0801d288

08017480 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b086      	sub	sp, #24
 8017484:	af02      	add	r7, sp, #8
 8017486:	60f8      	str	r0, [r7, #12]
 8017488:	60b9      	str	r1, [r7, #8]
 801748a:	4613      	mov	r3, r2
 801748c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801748e:	79fa      	ldrb	r2, [r7, #7]
 8017490:	4944      	ldr	r1, [pc, #272]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 8017492:	4613      	mov	r3, r2
 8017494:	005b      	lsls	r3, r3, #1
 8017496:	4413      	add	r3, r2
 8017498:	00db      	lsls	r3, r3, #3
 801749a:	440b      	add	r3, r1
 801749c:	3314      	adds	r3, #20
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	2b01      	cmp	r3, #1
 80174a2:	d806      	bhi.n	80174b2 <etharp_output_to_arp_index+0x32>
 80174a4:	4b40      	ldr	r3, [pc, #256]	; (80175a8 <etharp_output_to_arp_index+0x128>)
 80174a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80174aa:	4940      	ldr	r1, [pc, #256]	; (80175ac <etharp_output_to_arp_index+0x12c>)
 80174ac:	4840      	ldr	r0, [pc, #256]	; (80175b0 <etharp_output_to_arp_index+0x130>)
 80174ae:	f002 f9e3 	bl	8019878 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80174b2:	79fa      	ldrb	r2, [r7, #7]
 80174b4:	493b      	ldr	r1, [pc, #236]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 80174b6:	4613      	mov	r3, r2
 80174b8:	005b      	lsls	r3, r3, #1
 80174ba:	4413      	add	r3, r2
 80174bc:	00db      	lsls	r3, r3, #3
 80174be:	440b      	add	r3, r1
 80174c0:	3314      	adds	r3, #20
 80174c2:	781b      	ldrb	r3, [r3, #0]
 80174c4:	2b02      	cmp	r3, #2
 80174c6:	d153      	bne.n	8017570 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80174c8:	79fa      	ldrb	r2, [r7, #7]
 80174ca:	4936      	ldr	r1, [pc, #216]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 80174cc:	4613      	mov	r3, r2
 80174ce:	005b      	lsls	r3, r3, #1
 80174d0:	4413      	add	r3, r2
 80174d2:	00db      	lsls	r3, r3, #3
 80174d4:	440b      	add	r3, r1
 80174d6:	3312      	adds	r3, #18
 80174d8:	881b      	ldrh	r3, [r3, #0]
 80174da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80174de:	d919      	bls.n	8017514 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80174e0:	79fa      	ldrb	r2, [r7, #7]
 80174e2:	4613      	mov	r3, r2
 80174e4:	005b      	lsls	r3, r3, #1
 80174e6:	4413      	add	r3, r2
 80174e8:	00db      	lsls	r3, r3, #3
 80174ea:	4a2e      	ldr	r2, [pc, #184]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 80174ec:	4413      	add	r3, r2
 80174ee:	3304      	adds	r3, #4
 80174f0:	4619      	mov	r1, r3
 80174f2:	68f8      	ldr	r0, [r7, #12]
 80174f4:	f000 fb4c 	bl	8017b90 <etharp_request>
 80174f8:	4603      	mov	r3, r0
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d138      	bne.n	8017570 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80174fe:	79fa      	ldrb	r2, [r7, #7]
 8017500:	4928      	ldr	r1, [pc, #160]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 8017502:	4613      	mov	r3, r2
 8017504:	005b      	lsls	r3, r3, #1
 8017506:	4413      	add	r3, r2
 8017508:	00db      	lsls	r3, r3, #3
 801750a:	440b      	add	r3, r1
 801750c:	3314      	adds	r3, #20
 801750e:	2203      	movs	r2, #3
 8017510:	701a      	strb	r2, [r3, #0]
 8017512:	e02d      	b.n	8017570 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017514:	79fa      	ldrb	r2, [r7, #7]
 8017516:	4923      	ldr	r1, [pc, #140]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 8017518:	4613      	mov	r3, r2
 801751a:	005b      	lsls	r3, r3, #1
 801751c:	4413      	add	r3, r2
 801751e:	00db      	lsls	r3, r3, #3
 8017520:	440b      	add	r3, r1
 8017522:	3312      	adds	r3, #18
 8017524:	881b      	ldrh	r3, [r3, #0]
 8017526:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801752a:	d321      	bcc.n	8017570 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801752c:	79fa      	ldrb	r2, [r7, #7]
 801752e:	4613      	mov	r3, r2
 8017530:	005b      	lsls	r3, r3, #1
 8017532:	4413      	add	r3, r2
 8017534:	00db      	lsls	r3, r3, #3
 8017536:	4a1b      	ldr	r2, [pc, #108]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 8017538:	4413      	add	r3, r2
 801753a:	1d19      	adds	r1, r3, #4
 801753c:	79fa      	ldrb	r2, [r7, #7]
 801753e:	4613      	mov	r3, r2
 8017540:	005b      	lsls	r3, r3, #1
 8017542:	4413      	add	r3, r2
 8017544:	00db      	lsls	r3, r3, #3
 8017546:	3308      	adds	r3, #8
 8017548:	4a16      	ldr	r2, [pc, #88]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 801754a:	4413      	add	r3, r2
 801754c:	3304      	adds	r3, #4
 801754e:	461a      	mov	r2, r3
 8017550:	68f8      	ldr	r0, [r7, #12]
 8017552:	f000 fafb 	bl	8017b4c <etharp_request_dst>
 8017556:	4603      	mov	r3, r0
 8017558:	2b00      	cmp	r3, #0
 801755a:	d109      	bne.n	8017570 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801755c:	79fa      	ldrb	r2, [r7, #7]
 801755e:	4911      	ldr	r1, [pc, #68]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 8017560:	4613      	mov	r3, r2
 8017562:	005b      	lsls	r3, r3, #1
 8017564:	4413      	add	r3, r2
 8017566:	00db      	lsls	r3, r3, #3
 8017568:	440b      	add	r3, r1
 801756a:	3314      	adds	r3, #20
 801756c:	2203      	movs	r2, #3
 801756e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8017576:	79fa      	ldrb	r2, [r7, #7]
 8017578:	4613      	mov	r3, r2
 801757a:	005b      	lsls	r3, r3, #1
 801757c:	4413      	add	r3, r2
 801757e:	00db      	lsls	r3, r3, #3
 8017580:	3308      	adds	r3, #8
 8017582:	4a08      	ldr	r2, [pc, #32]	; (80175a4 <etharp_output_to_arp_index+0x124>)
 8017584:	4413      	add	r3, r2
 8017586:	3304      	adds	r3, #4
 8017588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801758c:	9200      	str	r2, [sp, #0]
 801758e:	460a      	mov	r2, r1
 8017590:	68b9      	ldr	r1, [r7, #8]
 8017592:	68f8      	ldr	r0, [r7, #12]
 8017594:	f001 fe40 	bl	8019218 <ethernet_output>
 8017598:	4603      	mov	r3, r0
}
 801759a:	4618      	mov	r0, r3
 801759c:	3710      	adds	r7, #16
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
 80175a2:	bf00      	nop
 80175a4:	2000daf8 	.word	0x2000daf8
 80175a8:	0801d210 	.word	0x0801d210
 80175ac:	0801d380 	.word	0x0801d380
 80175b0:	0801d288 	.word	0x0801d288

080175b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b08a      	sub	sp, #40	; 0x28
 80175b8:	af02      	add	r7, sp, #8
 80175ba:	60f8      	str	r0, [r7, #12]
 80175bc:	60b9      	str	r1, [r7, #8]
 80175be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d106      	bne.n	80175d8 <etharp_output+0x24>
 80175ca:	4b73      	ldr	r3, [pc, #460]	; (8017798 <etharp_output+0x1e4>)
 80175cc:	f240 321e 	movw	r2, #798	; 0x31e
 80175d0:	4972      	ldr	r1, [pc, #456]	; (801779c <etharp_output+0x1e8>)
 80175d2:	4873      	ldr	r0, [pc, #460]	; (80177a0 <etharp_output+0x1ec>)
 80175d4:	f002 f950 	bl	8019878 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d106      	bne.n	80175ec <etharp_output+0x38>
 80175de:	4b6e      	ldr	r3, [pc, #440]	; (8017798 <etharp_output+0x1e4>)
 80175e0:	f240 321f 	movw	r2, #799	; 0x31f
 80175e4:	496f      	ldr	r1, [pc, #444]	; (80177a4 <etharp_output+0x1f0>)
 80175e6:	486e      	ldr	r0, [pc, #440]	; (80177a0 <etharp_output+0x1ec>)
 80175e8:	f002 f946 	bl	8019878 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d106      	bne.n	8017600 <etharp_output+0x4c>
 80175f2:	4b69      	ldr	r3, [pc, #420]	; (8017798 <etharp_output+0x1e4>)
 80175f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80175f8:	496b      	ldr	r1, [pc, #428]	; (80177a8 <etharp_output+0x1f4>)
 80175fa:	4869      	ldr	r0, [pc, #420]	; (80177a0 <etharp_output+0x1ec>)
 80175fc:	f002 f93c 	bl	8019878 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	68f9      	ldr	r1, [r7, #12]
 8017606:	4618      	mov	r0, r3
 8017608:	f000 fef8 	bl	80183fc <ip4_addr_isbroadcast_u32>
 801760c:	4603      	mov	r3, r0
 801760e:	2b00      	cmp	r3, #0
 8017610:	d002      	beq.n	8017618 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017612:	4b66      	ldr	r3, [pc, #408]	; (80177ac <etharp_output+0x1f8>)
 8017614:	61fb      	str	r3, [r7, #28]
 8017616:	e0af      	b.n	8017778 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017620:	2be0      	cmp	r3, #224	; 0xe0
 8017622:	d118      	bne.n	8017656 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017624:	2301      	movs	r3, #1
 8017626:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017628:	2300      	movs	r3, #0
 801762a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801762c:	235e      	movs	r3, #94	; 0x5e
 801762e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	3301      	adds	r3, #1
 8017634:	781b      	ldrb	r3, [r3, #0]
 8017636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801763a:	b2db      	uxtb	r3, r3
 801763c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	3302      	adds	r3, #2
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	3303      	adds	r3, #3
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801764e:	f107 0310 	add.w	r3, r7, #16
 8017652:	61fb      	str	r3, [r7, #28]
 8017654:	e090      	b.n	8017778 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681a      	ldr	r2, [r3, #0]
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	3304      	adds	r3, #4
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	405a      	eors	r2, r3
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	3308      	adds	r3, #8
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	4013      	ands	r3, r2
 801766a:	2b00      	cmp	r3, #0
 801766c:	d012      	beq.n	8017694 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017674:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017678:	4293      	cmp	r3, r2
 801767a:	d00b      	beq.n	8017694 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	330c      	adds	r3, #12
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d003      	beq.n	801768e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	330c      	adds	r3, #12
 801768a:	61bb      	str	r3, [r7, #24]
 801768c:	e002      	b.n	8017694 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801768e:	f06f 0303 	mvn.w	r3, #3
 8017692:	e07d      	b.n	8017790 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017694:	4b46      	ldr	r3, [pc, #280]	; (80177b0 <etharp_output+0x1fc>)
 8017696:	781b      	ldrb	r3, [r3, #0]
 8017698:	4619      	mov	r1, r3
 801769a:	4a46      	ldr	r2, [pc, #280]	; (80177b4 <etharp_output+0x200>)
 801769c:	460b      	mov	r3, r1
 801769e:	005b      	lsls	r3, r3, #1
 80176a0:	440b      	add	r3, r1
 80176a2:	00db      	lsls	r3, r3, #3
 80176a4:	4413      	add	r3, r2
 80176a6:	3314      	adds	r3, #20
 80176a8:	781b      	ldrb	r3, [r3, #0]
 80176aa:	2b01      	cmp	r3, #1
 80176ac:	d925      	bls.n	80176fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80176ae:	4b40      	ldr	r3, [pc, #256]	; (80177b0 <etharp_output+0x1fc>)
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	4619      	mov	r1, r3
 80176b4:	4a3f      	ldr	r2, [pc, #252]	; (80177b4 <etharp_output+0x200>)
 80176b6:	460b      	mov	r3, r1
 80176b8:	005b      	lsls	r3, r3, #1
 80176ba:	440b      	add	r3, r1
 80176bc:	00db      	lsls	r3, r3, #3
 80176be:	4413      	add	r3, r2
 80176c0:	3308      	adds	r3, #8
 80176c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	429a      	cmp	r2, r3
 80176c8:	d117      	bne.n	80176fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80176ca:	69bb      	ldr	r3, [r7, #24]
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	4b38      	ldr	r3, [pc, #224]	; (80177b0 <etharp_output+0x1fc>)
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	4618      	mov	r0, r3
 80176d4:	4937      	ldr	r1, [pc, #220]	; (80177b4 <etharp_output+0x200>)
 80176d6:	4603      	mov	r3, r0
 80176d8:	005b      	lsls	r3, r3, #1
 80176da:	4403      	add	r3, r0
 80176dc:	00db      	lsls	r3, r3, #3
 80176de:	440b      	add	r3, r1
 80176e0:	3304      	adds	r3, #4
 80176e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80176e4:	429a      	cmp	r2, r3
 80176e6:	d108      	bne.n	80176fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80176e8:	4b31      	ldr	r3, [pc, #196]	; (80177b0 <etharp_output+0x1fc>)
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	461a      	mov	r2, r3
 80176ee:	68b9      	ldr	r1, [r7, #8]
 80176f0:	68f8      	ldr	r0, [r7, #12]
 80176f2:	f7ff fec5 	bl	8017480 <etharp_output_to_arp_index>
 80176f6:	4603      	mov	r3, r0
 80176f8:	e04a      	b.n	8017790 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80176fa:	2300      	movs	r3, #0
 80176fc:	75fb      	strb	r3, [r7, #23]
 80176fe:	e031      	b.n	8017764 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017700:	7dfa      	ldrb	r2, [r7, #23]
 8017702:	492c      	ldr	r1, [pc, #176]	; (80177b4 <etharp_output+0x200>)
 8017704:	4613      	mov	r3, r2
 8017706:	005b      	lsls	r3, r3, #1
 8017708:	4413      	add	r3, r2
 801770a:	00db      	lsls	r3, r3, #3
 801770c:	440b      	add	r3, r1
 801770e:	3314      	adds	r3, #20
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	2b01      	cmp	r3, #1
 8017714:	d923      	bls.n	801775e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017716:	7dfa      	ldrb	r2, [r7, #23]
 8017718:	4926      	ldr	r1, [pc, #152]	; (80177b4 <etharp_output+0x200>)
 801771a:	4613      	mov	r3, r2
 801771c:	005b      	lsls	r3, r3, #1
 801771e:	4413      	add	r3, r2
 8017720:	00db      	lsls	r3, r3, #3
 8017722:	440b      	add	r3, r1
 8017724:	3308      	adds	r3, #8
 8017726:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017728:	68fa      	ldr	r2, [r7, #12]
 801772a:	429a      	cmp	r2, r3
 801772c:	d117      	bne.n	801775e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801772e:	69bb      	ldr	r3, [r7, #24]
 8017730:	6819      	ldr	r1, [r3, #0]
 8017732:	7dfa      	ldrb	r2, [r7, #23]
 8017734:	481f      	ldr	r0, [pc, #124]	; (80177b4 <etharp_output+0x200>)
 8017736:	4613      	mov	r3, r2
 8017738:	005b      	lsls	r3, r3, #1
 801773a:	4413      	add	r3, r2
 801773c:	00db      	lsls	r3, r3, #3
 801773e:	4403      	add	r3, r0
 8017740:	3304      	adds	r3, #4
 8017742:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017744:	4299      	cmp	r1, r3
 8017746:	d10a      	bne.n	801775e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017748:	4a19      	ldr	r2, [pc, #100]	; (80177b0 <etharp_output+0x1fc>)
 801774a:	7dfb      	ldrb	r3, [r7, #23]
 801774c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801774e:	7dfb      	ldrb	r3, [r7, #23]
 8017750:	461a      	mov	r2, r3
 8017752:	68b9      	ldr	r1, [r7, #8]
 8017754:	68f8      	ldr	r0, [r7, #12]
 8017756:	f7ff fe93 	bl	8017480 <etharp_output_to_arp_index>
 801775a:	4603      	mov	r3, r0
 801775c:	e018      	b.n	8017790 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801775e:	7dfb      	ldrb	r3, [r7, #23]
 8017760:	3301      	adds	r3, #1
 8017762:	75fb      	strb	r3, [r7, #23]
 8017764:	7dfb      	ldrb	r3, [r7, #23]
 8017766:	2b09      	cmp	r3, #9
 8017768:	d9ca      	bls.n	8017700 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801776a:	68ba      	ldr	r2, [r7, #8]
 801776c:	69b9      	ldr	r1, [r7, #24]
 801776e:	68f8      	ldr	r0, [r7, #12]
 8017770:	f000 f822 	bl	80177b8 <etharp_query>
 8017774:	4603      	mov	r3, r0
 8017776:	e00b      	b.n	8017790 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801777e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017782:	9300      	str	r3, [sp, #0]
 8017784:	69fb      	ldr	r3, [r7, #28]
 8017786:	68b9      	ldr	r1, [r7, #8]
 8017788:	68f8      	ldr	r0, [r7, #12]
 801778a:	f001 fd45 	bl	8019218 <ethernet_output>
 801778e:	4603      	mov	r3, r0
}
 8017790:	4618      	mov	r0, r3
 8017792:	3720      	adds	r7, #32
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}
 8017798:	0801d210 	.word	0x0801d210
 801779c:	0801d360 	.word	0x0801d360
 80177a0:	0801d288 	.word	0x0801d288
 80177a4:	0801d3b0 	.word	0x0801d3b0
 80177a8:	0801d350 	.word	0x0801d350
 80177ac:	0801daac 	.word	0x0801daac
 80177b0:	2000dbe8 	.word	0x2000dbe8
 80177b4:	2000daf8 	.word	0x2000daf8

080177b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b08c      	sub	sp, #48	; 0x30
 80177bc:	af02      	add	r7, sp, #8
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	3326      	adds	r3, #38	; 0x26
 80177c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80177ca:	23ff      	movs	r3, #255	; 0xff
 80177cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80177d0:	2300      	movs	r3, #0
 80177d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	68f9      	ldr	r1, [r7, #12]
 80177da:	4618      	mov	r0, r3
 80177dc:	f000 fe0e 	bl	80183fc <ip4_addr_isbroadcast_u32>
 80177e0:	4603      	mov	r3, r0
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d10c      	bne.n	8017800 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80177e6:	68bb      	ldr	r3, [r7, #8]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80177ee:	2be0      	cmp	r3, #224	; 0xe0
 80177f0:	d006      	beq.n	8017800 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d003      	beq.n	8017800 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80177f8:	68bb      	ldr	r3, [r7, #8]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d102      	bne.n	8017806 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017800:	f06f 030f 	mvn.w	r3, #15
 8017804:	e101      	b.n	8017a0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017806:	68fa      	ldr	r2, [r7, #12]
 8017808:	2101      	movs	r1, #1
 801780a:	68b8      	ldr	r0, [r7, #8]
 801780c:	f7ff fb60 	bl	8016ed0 <etharp_find_entry>
 8017810:	4603      	mov	r3, r0
 8017812:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017818:	2b00      	cmp	r3, #0
 801781a:	da02      	bge.n	8017822 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801781c:	8a7b      	ldrh	r3, [r7, #18]
 801781e:	b25b      	sxtb	r3, r3
 8017820:	e0f3      	b.n	8017a0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017822:	8a7b      	ldrh	r3, [r7, #18]
 8017824:	2b7e      	cmp	r3, #126	; 0x7e
 8017826:	d906      	bls.n	8017836 <etharp_query+0x7e>
 8017828:	4b7a      	ldr	r3, [pc, #488]	; (8017a14 <etharp_query+0x25c>)
 801782a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801782e:	497a      	ldr	r1, [pc, #488]	; (8017a18 <etharp_query+0x260>)
 8017830:	487a      	ldr	r0, [pc, #488]	; (8017a1c <etharp_query+0x264>)
 8017832:	f002 f821 	bl	8019878 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017836:	8a7b      	ldrh	r3, [r7, #18]
 8017838:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801783a:	7c7a      	ldrb	r2, [r7, #17]
 801783c:	4978      	ldr	r1, [pc, #480]	; (8017a20 <etharp_query+0x268>)
 801783e:	4613      	mov	r3, r2
 8017840:	005b      	lsls	r3, r3, #1
 8017842:	4413      	add	r3, r2
 8017844:	00db      	lsls	r3, r3, #3
 8017846:	440b      	add	r3, r1
 8017848:	3314      	adds	r3, #20
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d115      	bne.n	801787c <etharp_query+0xc4>
    is_new_entry = 1;
 8017850:	2301      	movs	r3, #1
 8017852:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017854:	7c7a      	ldrb	r2, [r7, #17]
 8017856:	4972      	ldr	r1, [pc, #456]	; (8017a20 <etharp_query+0x268>)
 8017858:	4613      	mov	r3, r2
 801785a:	005b      	lsls	r3, r3, #1
 801785c:	4413      	add	r3, r2
 801785e:	00db      	lsls	r3, r3, #3
 8017860:	440b      	add	r3, r1
 8017862:	3314      	adds	r3, #20
 8017864:	2201      	movs	r2, #1
 8017866:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017868:	7c7a      	ldrb	r2, [r7, #17]
 801786a:	496d      	ldr	r1, [pc, #436]	; (8017a20 <etharp_query+0x268>)
 801786c:	4613      	mov	r3, r2
 801786e:	005b      	lsls	r3, r3, #1
 8017870:	4413      	add	r3, r2
 8017872:	00db      	lsls	r3, r3, #3
 8017874:	440b      	add	r3, r1
 8017876:	3308      	adds	r3, #8
 8017878:	68fa      	ldr	r2, [r7, #12]
 801787a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801787c:	7c7a      	ldrb	r2, [r7, #17]
 801787e:	4968      	ldr	r1, [pc, #416]	; (8017a20 <etharp_query+0x268>)
 8017880:	4613      	mov	r3, r2
 8017882:	005b      	lsls	r3, r3, #1
 8017884:	4413      	add	r3, r2
 8017886:	00db      	lsls	r3, r3, #3
 8017888:	440b      	add	r3, r1
 801788a:	3314      	adds	r3, #20
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	2b01      	cmp	r3, #1
 8017890:	d011      	beq.n	80178b6 <etharp_query+0xfe>
 8017892:	7c7a      	ldrb	r2, [r7, #17]
 8017894:	4962      	ldr	r1, [pc, #392]	; (8017a20 <etharp_query+0x268>)
 8017896:	4613      	mov	r3, r2
 8017898:	005b      	lsls	r3, r3, #1
 801789a:	4413      	add	r3, r2
 801789c:	00db      	lsls	r3, r3, #3
 801789e:	440b      	add	r3, r1
 80178a0:	3314      	adds	r3, #20
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	d806      	bhi.n	80178b6 <etharp_query+0xfe>
 80178a8:	4b5a      	ldr	r3, [pc, #360]	; (8017a14 <etharp_query+0x25c>)
 80178aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 80178ae:	495d      	ldr	r1, [pc, #372]	; (8017a24 <etharp_query+0x26c>)
 80178b0:	485a      	ldr	r0, [pc, #360]	; (8017a1c <etharp_query+0x264>)
 80178b2:	f001 ffe1 	bl	8019878 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80178b6:	6a3b      	ldr	r3, [r7, #32]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d102      	bne.n	80178c2 <etharp_query+0x10a>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d10c      	bne.n	80178dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80178c2:	68b9      	ldr	r1, [r7, #8]
 80178c4:	68f8      	ldr	r0, [r7, #12]
 80178c6:	f000 f963 	bl	8017b90 <etharp_request>
 80178ca:	4603      	mov	r3, r0
 80178cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d102      	bne.n	80178dc <etharp_query+0x124>
      return result;
 80178d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80178da:	e096      	b.n	8017a0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d106      	bne.n	80178f0 <etharp_query+0x138>
 80178e2:	4b4c      	ldr	r3, [pc, #304]	; (8017a14 <etharp_query+0x25c>)
 80178e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80178e8:	494f      	ldr	r1, [pc, #316]	; (8017a28 <etharp_query+0x270>)
 80178ea:	484c      	ldr	r0, [pc, #304]	; (8017a1c <etharp_query+0x264>)
 80178ec:	f001 ffc4 	bl	8019878 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80178f0:	7c7a      	ldrb	r2, [r7, #17]
 80178f2:	494b      	ldr	r1, [pc, #300]	; (8017a20 <etharp_query+0x268>)
 80178f4:	4613      	mov	r3, r2
 80178f6:	005b      	lsls	r3, r3, #1
 80178f8:	4413      	add	r3, r2
 80178fa:	00db      	lsls	r3, r3, #3
 80178fc:	440b      	add	r3, r1
 80178fe:	3314      	adds	r3, #20
 8017900:	781b      	ldrb	r3, [r3, #0]
 8017902:	2b01      	cmp	r3, #1
 8017904:	d917      	bls.n	8017936 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017906:	4a49      	ldr	r2, [pc, #292]	; (8017a2c <etharp_query+0x274>)
 8017908:	7c7b      	ldrb	r3, [r7, #17]
 801790a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801790c:	7c7a      	ldrb	r2, [r7, #17]
 801790e:	4613      	mov	r3, r2
 8017910:	005b      	lsls	r3, r3, #1
 8017912:	4413      	add	r3, r2
 8017914:	00db      	lsls	r3, r3, #3
 8017916:	3308      	adds	r3, #8
 8017918:	4a41      	ldr	r2, [pc, #260]	; (8017a20 <etharp_query+0x268>)
 801791a:	4413      	add	r3, r2
 801791c:	3304      	adds	r3, #4
 801791e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017922:	9200      	str	r2, [sp, #0]
 8017924:	697a      	ldr	r2, [r7, #20]
 8017926:	6879      	ldr	r1, [r7, #4]
 8017928:	68f8      	ldr	r0, [r7, #12]
 801792a:	f001 fc75 	bl	8019218 <ethernet_output>
 801792e:	4603      	mov	r3, r0
 8017930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017934:	e067      	b.n	8017a06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017936:	7c7a      	ldrb	r2, [r7, #17]
 8017938:	4939      	ldr	r1, [pc, #228]	; (8017a20 <etharp_query+0x268>)
 801793a:	4613      	mov	r3, r2
 801793c:	005b      	lsls	r3, r3, #1
 801793e:	4413      	add	r3, r2
 8017940:	00db      	lsls	r3, r3, #3
 8017942:	440b      	add	r3, r1
 8017944:	3314      	adds	r3, #20
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	2b01      	cmp	r3, #1
 801794a:	d15c      	bne.n	8017a06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801794c:	2300      	movs	r3, #0
 801794e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017954:	e01c      	b.n	8017990 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017956:	69fb      	ldr	r3, [r7, #28]
 8017958:	895a      	ldrh	r2, [r3, #10]
 801795a:	69fb      	ldr	r3, [r7, #28]
 801795c:	891b      	ldrh	r3, [r3, #8]
 801795e:	429a      	cmp	r2, r3
 8017960:	d10a      	bne.n	8017978 <etharp_query+0x1c0>
 8017962:	69fb      	ldr	r3, [r7, #28]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d006      	beq.n	8017978 <etharp_query+0x1c0>
 801796a:	4b2a      	ldr	r3, [pc, #168]	; (8017a14 <etharp_query+0x25c>)
 801796c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017970:	492f      	ldr	r1, [pc, #188]	; (8017a30 <etharp_query+0x278>)
 8017972:	482a      	ldr	r0, [pc, #168]	; (8017a1c <etharp_query+0x264>)
 8017974:	f001 ff80 	bl	8019878 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017978:	69fb      	ldr	r3, [r7, #28]
 801797a:	7b1b      	ldrb	r3, [r3, #12]
 801797c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017980:	2b00      	cmp	r3, #0
 8017982:	d002      	beq.n	801798a <etharp_query+0x1d2>
        copy_needed = 1;
 8017984:	2301      	movs	r3, #1
 8017986:	61bb      	str	r3, [r7, #24]
        break;
 8017988:	e005      	b.n	8017996 <etharp_query+0x1de>
      }
      p = p->next;
 801798a:	69fb      	ldr	r3, [r7, #28]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017990:	69fb      	ldr	r3, [r7, #28]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d1df      	bne.n	8017956 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017996:	69bb      	ldr	r3, [r7, #24]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d007      	beq.n	80179ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801799c:	687a      	ldr	r2, [r7, #4]
 801799e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80179a2:	200e      	movs	r0, #14
 80179a4:	f7f9 f980 	bl	8010ca8 <pbuf_clone>
 80179a8:	61f8      	str	r0, [r7, #28]
 80179aa:	e004      	b.n	80179b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80179b0:	69f8      	ldr	r0, [r7, #28]
 80179b2:	f7f8 ff15 	bl	80107e0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d021      	beq.n	8017a00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80179bc:	7c7a      	ldrb	r2, [r7, #17]
 80179be:	4918      	ldr	r1, [pc, #96]	; (8017a20 <etharp_query+0x268>)
 80179c0:	4613      	mov	r3, r2
 80179c2:	005b      	lsls	r3, r3, #1
 80179c4:	4413      	add	r3, r2
 80179c6:	00db      	lsls	r3, r3, #3
 80179c8:	440b      	add	r3, r1
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d00a      	beq.n	80179e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80179d0:	7c7a      	ldrb	r2, [r7, #17]
 80179d2:	4913      	ldr	r1, [pc, #76]	; (8017a20 <etharp_query+0x268>)
 80179d4:	4613      	mov	r3, r2
 80179d6:	005b      	lsls	r3, r3, #1
 80179d8:	4413      	add	r3, r2
 80179da:	00db      	lsls	r3, r3, #3
 80179dc:	440b      	add	r3, r1
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7f8 fe57 	bl	8010694 <pbuf_free>
      }
      arp_table[i].q = p;
 80179e6:	7c7a      	ldrb	r2, [r7, #17]
 80179e8:	490d      	ldr	r1, [pc, #52]	; (8017a20 <etharp_query+0x268>)
 80179ea:	4613      	mov	r3, r2
 80179ec:	005b      	lsls	r3, r3, #1
 80179ee:	4413      	add	r3, r2
 80179f0:	00db      	lsls	r3, r3, #3
 80179f2:	440b      	add	r3, r1
 80179f4:	69fa      	ldr	r2, [r7, #28]
 80179f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80179f8:	2300      	movs	r3, #0
 80179fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80179fe:	e002      	b.n	8017a06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017a00:	23ff      	movs	r3, #255	; 0xff
 8017a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017a06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3728      	adds	r7, #40	; 0x28
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}
 8017a12:	bf00      	nop
 8017a14:	0801d210 	.word	0x0801d210
 8017a18:	0801d3bc 	.word	0x0801d3bc
 8017a1c:	0801d288 	.word	0x0801d288
 8017a20:	2000daf8 	.word	0x2000daf8
 8017a24:	0801d3cc 	.word	0x0801d3cc
 8017a28:	0801d3b0 	.word	0x0801d3b0
 8017a2c:	2000dbe8 	.word	0x2000dbe8
 8017a30:	0801d3f4 	.word	0x0801d3f4

08017a34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b08a      	sub	sp, #40	; 0x28
 8017a38:	af02      	add	r7, sp, #8
 8017a3a:	60f8      	str	r0, [r7, #12]
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
 8017a40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017a42:	2300      	movs	r3, #0
 8017a44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d106      	bne.n	8017a5a <etharp_raw+0x26>
 8017a4c:	4b3a      	ldr	r3, [pc, #232]	; (8017b38 <etharp_raw+0x104>)
 8017a4e:	f240 4257 	movw	r2, #1111	; 0x457
 8017a52:	493a      	ldr	r1, [pc, #232]	; (8017b3c <etharp_raw+0x108>)
 8017a54:	483a      	ldr	r0, [pc, #232]	; (8017b40 <etharp_raw+0x10c>)
 8017a56:	f001 ff0f 	bl	8019878 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a5e:	211c      	movs	r1, #28
 8017a60:	200e      	movs	r0, #14
 8017a62:	f7f8 fb33 	bl	80100cc <pbuf_alloc>
 8017a66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017a68:	69bb      	ldr	r3, [r7, #24]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d102      	bne.n	8017a74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a72:	e05d      	b.n	8017b30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017a74:	69bb      	ldr	r3, [r7, #24]
 8017a76:	895b      	ldrh	r3, [r3, #10]
 8017a78:	2b1b      	cmp	r3, #27
 8017a7a:	d806      	bhi.n	8017a8a <etharp_raw+0x56>
 8017a7c:	4b2e      	ldr	r3, [pc, #184]	; (8017b38 <etharp_raw+0x104>)
 8017a7e:	f240 4262 	movw	r2, #1122	; 0x462
 8017a82:	4930      	ldr	r1, [pc, #192]	; (8017b44 <etharp_raw+0x110>)
 8017a84:	482e      	ldr	r0, [pc, #184]	; (8017b40 <etharp_raw+0x10c>)
 8017a86:	f001 fef7 	bl	8019878 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017a8a:	69bb      	ldr	r3, [r7, #24]
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017a90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7f7 fa0c 	bl	800eeb0 <lwip_htons>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	461a      	mov	r2, r3
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017aa6:	2b06      	cmp	r3, #6
 8017aa8:	d006      	beq.n	8017ab8 <etharp_raw+0x84>
 8017aaa:	4b23      	ldr	r3, [pc, #140]	; (8017b38 <etharp_raw+0x104>)
 8017aac:	f240 4269 	movw	r2, #1129	; 0x469
 8017ab0:	4925      	ldr	r1, [pc, #148]	; (8017b48 <etharp_raw+0x114>)
 8017ab2:	4823      	ldr	r0, [pc, #140]	; (8017b40 <etharp_raw+0x10c>)
 8017ab4:	f001 fee0 	bl	8019878 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017ab8:	697b      	ldr	r3, [r7, #20]
 8017aba:	3308      	adds	r3, #8
 8017abc:	2206      	movs	r2, #6
 8017abe:	6839      	ldr	r1, [r7, #0]
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f001 fe14 	bl	80196ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	3312      	adds	r3, #18
 8017aca:	2206      	movs	r2, #6
 8017acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f001 fe0d 	bl	80196ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	330e      	adds	r3, #14
 8017ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ada:	6812      	ldr	r2, [r2, #0]
 8017adc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017ade:	697b      	ldr	r3, [r7, #20]
 8017ae0:	3318      	adds	r3, #24
 8017ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ae4:	6812      	ldr	r2, [r2, #0]
 8017ae6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017ae8:	697b      	ldr	r3, [r7, #20]
 8017aea:	2200      	movs	r2, #0
 8017aec:	701a      	strb	r2, [r3, #0]
 8017aee:	2200      	movs	r2, #0
 8017af0:	f042 0201 	orr.w	r2, r2, #1
 8017af4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	2200      	movs	r2, #0
 8017afa:	f042 0208 	orr.w	r2, r2, #8
 8017afe:	709a      	strb	r2, [r3, #2]
 8017b00:	2200      	movs	r2, #0
 8017b02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017b04:	697b      	ldr	r3, [r7, #20]
 8017b06:	2206      	movs	r2, #6
 8017b08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017b0a:	697b      	ldr	r3, [r7, #20]
 8017b0c:	2204      	movs	r2, #4
 8017b0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017b10:	f640 0306 	movw	r3, #2054	; 0x806
 8017b14:	9300      	str	r3, [sp, #0]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	68ba      	ldr	r2, [r7, #8]
 8017b1a:	69b9      	ldr	r1, [r7, #24]
 8017b1c:	68f8      	ldr	r0, [r7, #12]
 8017b1e:	f001 fb7b 	bl	8019218 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017b22:	69b8      	ldr	r0, [r7, #24]
 8017b24:	f7f8 fdb6 	bl	8010694 <pbuf_free>
  p = NULL;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017b2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017b30:	4618      	mov	r0, r3
 8017b32:	3720      	adds	r7, #32
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd80      	pop	{r7, pc}
 8017b38:	0801d210 	.word	0x0801d210
 8017b3c:	0801d360 	.word	0x0801d360
 8017b40:	0801d288 	.word	0x0801d288
 8017b44:	0801d410 	.word	0x0801d410
 8017b48:	0801d444 	.word	0x0801d444

08017b4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b088      	sub	sp, #32
 8017b50:	af04      	add	r7, sp, #16
 8017b52:	60f8      	str	r0, [r7, #12]
 8017b54:	60b9      	str	r1, [r7, #8]
 8017b56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017b68:	2201      	movs	r2, #1
 8017b6a:	9203      	str	r2, [sp, #12]
 8017b6c:	68ba      	ldr	r2, [r7, #8]
 8017b6e:	9202      	str	r2, [sp, #8]
 8017b70:	4a06      	ldr	r2, [pc, #24]	; (8017b8c <etharp_request_dst+0x40>)
 8017b72:	9201      	str	r2, [sp, #4]
 8017b74:	9300      	str	r3, [sp, #0]
 8017b76:	4603      	mov	r3, r0
 8017b78:	687a      	ldr	r2, [r7, #4]
 8017b7a:	68f8      	ldr	r0, [r7, #12]
 8017b7c:	f7ff ff5a 	bl	8017a34 <etharp_raw>
 8017b80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3710      	adds	r7, #16
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
 8017b8a:	bf00      	nop
 8017b8c:	0801dab4 	.word	0x0801dab4

08017b90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
 8017b98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017b9a:	4a05      	ldr	r2, [pc, #20]	; (8017bb0 <etharp_request+0x20>)
 8017b9c:	6839      	ldr	r1, [r7, #0]
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f7ff ffd4 	bl	8017b4c <etharp_request_dst>
 8017ba4:	4603      	mov	r3, r0
}
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	3708      	adds	r7, #8
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	0801daac 	.word	0x0801daac

08017bb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b08e      	sub	sp, #56	; 0x38
 8017bb8:	af04      	add	r7, sp, #16
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017bbe:	4b79      	ldr	r3, [pc, #484]	; (8017da4 <icmp_input+0x1f0>)
 8017bc0:	689b      	ldr	r3, [r3, #8]
 8017bc2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc6:	781b      	ldrb	r3, [r3, #0]
 8017bc8:	f003 030f 	and.w	r3, r3, #15
 8017bcc:	b2db      	uxtb	r3, r3
 8017bce:	009b      	lsls	r3, r3, #2
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017bd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bd6:	2b13      	cmp	r3, #19
 8017bd8:	f240 80cd 	bls.w	8017d76 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	895b      	ldrh	r3, [r3, #10]
 8017be0:	2b03      	cmp	r3, #3
 8017be2:	f240 80ca 	bls.w	8017d7a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	781b      	ldrb	r3, [r3, #0]
 8017bec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017bf0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	f000 80b7 	beq.w	8017d68 <icmp_input+0x1b4>
 8017bfa:	2b08      	cmp	r3, #8
 8017bfc:	f040 80b7 	bne.w	8017d6e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017c00:	4b69      	ldr	r3, [pc, #420]	; (8017da8 <icmp_input+0x1f4>)
 8017c02:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017c04:	4b67      	ldr	r3, [pc, #412]	; (8017da4 <icmp_input+0x1f0>)
 8017c06:	695b      	ldr	r3, [r3, #20]
 8017c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c0c:	2be0      	cmp	r3, #224	; 0xe0
 8017c0e:	f000 80bb 	beq.w	8017d88 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017c12:	4b64      	ldr	r3, [pc, #400]	; (8017da4 <icmp_input+0x1f0>)
 8017c14:	695b      	ldr	r3, [r3, #20]
 8017c16:	4a63      	ldr	r2, [pc, #396]	; (8017da4 <icmp_input+0x1f0>)
 8017c18:	6812      	ldr	r2, [r2, #0]
 8017c1a:	4611      	mov	r1, r2
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f000 fbed 	bl	80183fc <ip4_addr_isbroadcast_u32>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	f040 80b1 	bne.w	8017d8c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	891b      	ldrh	r3, [r3, #8]
 8017c2e:	2b07      	cmp	r3, #7
 8017c30:	f240 80a5 	bls.w	8017d7e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c36:	330e      	adds	r3, #14
 8017c38:	4619      	mov	r1, r3
 8017c3a:	6878      	ldr	r0, [r7, #4]
 8017c3c:	f7f8 fc94 	bl	8010568 <pbuf_add_header>
 8017c40:	4603      	mov	r3, r0
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d04b      	beq.n	8017cde <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	891a      	ldrh	r2, [r3, #8]
 8017c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c4c:	4413      	add	r3, r2
 8017c4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	891b      	ldrh	r3, [r3, #8]
 8017c54:	8b7a      	ldrh	r2, [r7, #26]
 8017c56:	429a      	cmp	r2, r3
 8017c58:	f0c0 809a 	bcc.w	8017d90 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017c5c:	8b7b      	ldrh	r3, [r7, #26]
 8017c5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c62:	4619      	mov	r1, r3
 8017c64:	200e      	movs	r0, #14
 8017c66:	f7f8 fa31 	bl	80100cc <pbuf_alloc>
 8017c6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017c6c:	697b      	ldr	r3, [r7, #20]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	f000 8090 	beq.w	8017d94 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	895b      	ldrh	r3, [r3, #10]
 8017c78:	461a      	mov	r2, r3
 8017c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c7c:	3308      	adds	r3, #8
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d203      	bcs.n	8017c8a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017c82:	6978      	ldr	r0, [r7, #20]
 8017c84:	f7f8 fd06 	bl	8010694 <pbuf_free>
          goto icmperr;
 8017c88:	e085      	b.n	8017d96 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017c8a:	697b      	ldr	r3, [r7, #20]
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c92:	4618      	mov	r0, r3
 8017c94:	f001 fd2b 	bl	80196ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	6978      	ldr	r0, [r7, #20]
 8017c9e:	f7f8 fc73 	bl	8010588 <pbuf_remove_header>
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d009      	beq.n	8017cbc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017ca8:	4b40      	ldr	r3, [pc, #256]	; (8017dac <icmp_input+0x1f8>)
 8017caa:	22b6      	movs	r2, #182	; 0xb6
 8017cac:	4940      	ldr	r1, [pc, #256]	; (8017db0 <icmp_input+0x1fc>)
 8017cae:	4841      	ldr	r0, [pc, #260]	; (8017db4 <icmp_input+0x200>)
 8017cb0:	f001 fde2 	bl	8019878 <iprintf>
          pbuf_free(r);
 8017cb4:	6978      	ldr	r0, [r7, #20]
 8017cb6:	f7f8 fced 	bl	8010694 <pbuf_free>
          goto icmperr;
 8017cba:	e06c      	b.n	8017d96 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017cbc:	6879      	ldr	r1, [r7, #4]
 8017cbe:	6978      	ldr	r0, [r7, #20]
 8017cc0:	f7f8 fe1c 	bl	80108fc <pbuf_copy>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d003      	beq.n	8017cd2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017cca:	6978      	ldr	r0, [r7, #20]
 8017ccc:	f7f8 fce2 	bl	8010694 <pbuf_free>
          goto icmperr;
 8017cd0:	e061      	b.n	8017d96 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017cd2:	6878      	ldr	r0, [r7, #4]
 8017cd4:	f7f8 fcde 	bl	8010694 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017cd8:	697b      	ldr	r3, [r7, #20]
 8017cda:	607b      	str	r3, [r7, #4]
 8017cdc:	e00f      	b.n	8017cfe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017cde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ce0:	330e      	adds	r3, #14
 8017ce2:	4619      	mov	r1, r3
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	f7f8 fc4f 	bl	8010588 <pbuf_remove_header>
 8017cea:	4603      	mov	r3, r0
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d006      	beq.n	8017cfe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017cf0:	4b2e      	ldr	r3, [pc, #184]	; (8017dac <icmp_input+0x1f8>)
 8017cf2:	22c7      	movs	r2, #199	; 0xc7
 8017cf4:	4930      	ldr	r1, [pc, #192]	; (8017db8 <icmp_input+0x204>)
 8017cf6:	482f      	ldr	r0, [pc, #188]	; (8017db4 <icmp_input+0x200>)
 8017cf8:	f001 fdbe 	bl	8019878 <iprintf>
          goto icmperr;
 8017cfc:	e04b      	b.n	8017d96 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	685b      	ldr	r3, [r3, #4]
 8017d02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d06:	4619      	mov	r1, r3
 8017d08:	6878      	ldr	r0, [r7, #4]
 8017d0a:	f7f8 fc2d 	bl	8010568 <pbuf_add_header>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d12b      	bne.n	8017d6c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017d1a:	69fb      	ldr	r3, [r7, #28]
 8017d1c:	681a      	ldr	r2, [r3, #0]
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017d22:	4b20      	ldr	r3, [pc, #128]	; (8017da4 <icmp_input+0x1f0>)
 8017d24:	691a      	ldr	r2, [r3, #16]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017d2a:	693b      	ldr	r3, [r7, #16]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017d30:	693b      	ldr	r3, [r7, #16]
 8017d32:	2200      	movs	r2, #0
 8017d34:	709a      	strb	r2, [r3, #2]
 8017d36:	2200      	movs	r2, #0
 8017d38:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	22ff      	movs	r2, #255	; 0xff
 8017d3e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2200      	movs	r2, #0
 8017d44:	729a      	strb	r2, [r3, #10]
 8017d46:	2200      	movs	r2, #0
 8017d48:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	9302      	str	r3, [sp, #8]
 8017d4e:	2301      	movs	r3, #1
 8017d50:	9301      	str	r3, [sp, #4]
 8017d52:	2300      	movs	r3, #0
 8017d54:	9300      	str	r3, [sp, #0]
 8017d56:	23ff      	movs	r3, #255	; 0xff
 8017d58:	2200      	movs	r2, #0
 8017d5a:	69f9      	ldr	r1, [r7, #28]
 8017d5c:	6878      	ldr	r0, [r7, #4]
 8017d5e:	f000 fa75 	bl	801824c <ip4_output_if>
 8017d62:	4603      	mov	r3, r0
 8017d64:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017d66:	e001      	b.n	8017d6c <icmp_input+0x1b8>
      break;
 8017d68:	bf00      	nop
 8017d6a:	e000      	b.n	8017d6e <icmp_input+0x1ba>
      break;
 8017d6c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f7f8 fc90 	bl	8010694 <pbuf_free>
  return;
 8017d74:	e013      	b.n	8017d9e <icmp_input+0x1ea>
    goto lenerr;
 8017d76:	bf00      	nop
 8017d78:	e002      	b.n	8017d80 <icmp_input+0x1cc>
    goto lenerr;
 8017d7a:	bf00      	nop
 8017d7c:	e000      	b.n	8017d80 <icmp_input+0x1cc>
        goto lenerr;
 8017d7e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017d80:	6878      	ldr	r0, [r7, #4]
 8017d82:	f7f8 fc87 	bl	8010694 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017d86:	e00a      	b.n	8017d9e <icmp_input+0x1ea>
        goto icmperr;
 8017d88:	bf00      	nop
 8017d8a:	e004      	b.n	8017d96 <icmp_input+0x1e2>
        goto icmperr;
 8017d8c:	bf00      	nop
 8017d8e:	e002      	b.n	8017d96 <icmp_input+0x1e2>
          goto icmperr;
 8017d90:	bf00      	nop
 8017d92:	e000      	b.n	8017d96 <icmp_input+0x1e2>
          goto icmperr;
 8017d94:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017d96:	6878      	ldr	r0, [r7, #4]
 8017d98:	f7f8 fc7c 	bl	8010694 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017d9c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017d9e:	3728      	adds	r7, #40	; 0x28
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}
 8017da4:	2000a344 	.word	0x2000a344
 8017da8:	2000a358 	.word	0x2000a358
 8017dac:	0801d488 	.word	0x0801d488
 8017db0:	0801d4c0 	.word	0x0801d4c0
 8017db4:	0801d4f8 	.word	0x0801d4f8
 8017db8:	0801d520 	.word	0x0801d520

08017dbc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b082      	sub	sp, #8
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
 8017dc4:	460b      	mov	r3, r1
 8017dc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017dc8:	78fb      	ldrb	r3, [r7, #3]
 8017dca:	461a      	mov	r2, r3
 8017dcc:	2103      	movs	r1, #3
 8017dce:	6878      	ldr	r0, [r7, #4]
 8017dd0:	f000 f814 	bl	8017dfc <icmp_send_response>
}
 8017dd4:	bf00      	nop
 8017dd6:	3708      	adds	r7, #8
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}

08017ddc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b082      	sub	sp, #8
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
 8017de4:	460b      	mov	r3, r1
 8017de6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017de8:	78fb      	ldrb	r3, [r7, #3]
 8017dea:	461a      	mov	r2, r3
 8017dec:	210b      	movs	r1, #11
 8017dee:	6878      	ldr	r0, [r7, #4]
 8017df0:	f000 f804 	bl	8017dfc <icmp_send_response>
}
 8017df4:	bf00      	nop
 8017df6:	3708      	adds	r7, #8
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}

08017dfc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b08c      	sub	sp, #48	; 0x30
 8017e00:	af04      	add	r7, sp, #16
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	460b      	mov	r3, r1
 8017e06:	70fb      	strb	r3, [r7, #3]
 8017e08:	4613      	mov	r3, r2
 8017e0a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017e0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e10:	2124      	movs	r1, #36	; 0x24
 8017e12:	2022      	movs	r0, #34	; 0x22
 8017e14:	f7f8 f95a 	bl	80100cc <pbuf_alloc>
 8017e18:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017e1a:	69fb      	ldr	r3, [r7, #28]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d04c      	beq.n	8017eba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017e20:	69fb      	ldr	r3, [r7, #28]
 8017e22:	895b      	ldrh	r3, [r3, #10]
 8017e24:	2b23      	cmp	r3, #35	; 0x23
 8017e26:	d806      	bhi.n	8017e36 <icmp_send_response+0x3a>
 8017e28:	4b26      	ldr	r3, [pc, #152]	; (8017ec4 <icmp_send_response+0xc8>)
 8017e2a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017e2e:	4926      	ldr	r1, [pc, #152]	; (8017ec8 <icmp_send_response+0xcc>)
 8017e30:	4826      	ldr	r0, [pc, #152]	; (8017ecc <icmp_send_response+0xd0>)
 8017e32:	f001 fd21 	bl	8019878 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	685b      	ldr	r3, [r3, #4]
 8017e3a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017e3c:	69fb      	ldr	r3, [r7, #28]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	78fa      	ldrb	r2, [r7, #3]
 8017e46:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017e48:	697b      	ldr	r3, [r7, #20]
 8017e4a:	78ba      	ldrb	r2, [r7, #2]
 8017e4c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	2200      	movs	r2, #0
 8017e52:	711a      	strb	r2, [r3, #4]
 8017e54:	2200      	movs	r2, #0
 8017e56:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	719a      	strb	r2, [r3, #6]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017e62:	69fb      	ldr	r3, [r7, #28]
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	f103 0008 	add.w	r0, r3, #8
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	221c      	movs	r2, #28
 8017e70:	4619      	mov	r1, r3
 8017e72:	f001 fc3c 	bl	80196ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	68db      	ldr	r3, [r3, #12]
 8017e7a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017e7c:	f107 030c 	add.w	r3, r7, #12
 8017e80:	4618      	mov	r0, r3
 8017e82:	f000 f825 	bl	8017ed0 <ip4_route>
 8017e86:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d011      	beq.n	8017eb2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	2200      	movs	r2, #0
 8017e92:	709a      	strb	r2, [r3, #2]
 8017e94:	2200      	movs	r2, #0
 8017e96:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017e98:	f107 020c 	add.w	r2, r7, #12
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	9302      	str	r3, [sp, #8]
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	9301      	str	r3, [sp, #4]
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	9300      	str	r3, [sp, #0]
 8017ea8:	23ff      	movs	r3, #255	; 0xff
 8017eaa:	2100      	movs	r1, #0
 8017eac:	69f8      	ldr	r0, [r7, #28]
 8017eae:	f000 f9cd 	bl	801824c <ip4_output_if>
  }
  pbuf_free(q);
 8017eb2:	69f8      	ldr	r0, [r7, #28]
 8017eb4:	f7f8 fbee 	bl	8010694 <pbuf_free>
 8017eb8:	e000      	b.n	8017ebc <icmp_send_response+0xc0>
    return;
 8017eba:	bf00      	nop
}
 8017ebc:	3720      	adds	r7, #32
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd80      	pop	{r7, pc}
 8017ec2:	bf00      	nop
 8017ec4:	0801d488 	.word	0x0801d488
 8017ec8:	0801d554 	.word	0x0801d554
 8017ecc:	0801d4f8 	.word	0x0801d4f8

08017ed0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017ed0:	b480      	push	{r7}
 8017ed2:	b085      	sub	sp, #20
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017ed8:	4b33      	ldr	r3, [pc, #204]	; (8017fa8 <ip4_route+0xd8>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	60fb      	str	r3, [r7, #12]
 8017ede:	e036      	b.n	8017f4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ee6:	f003 0301 	and.w	r3, r3, #1
 8017eea:	b2db      	uxtb	r3, r3
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d02b      	beq.n	8017f48 <ip4_route+0x78>
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ef6:	089b      	lsrs	r3, r3, #2
 8017ef8:	f003 0301 	and.w	r3, r3, #1
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d022      	beq.n	8017f48 <ip4_route+0x78>
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	3304      	adds	r3, #4
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d01d      	beq.n	8017f48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681a      	ldr	r2, [r3, #0]
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	3304      	adds	r3, #4
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	405a      	eors	r2, r3
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	3308      	adds	r3, #8
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	4013      	ands	r3, r2
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d101      	bne.n	8017f28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	e038      	b.n	8017f9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f2e:	f003 0302 	and.w	r3, r3, #2
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d108      	bne.n	8017f48 <ip4_route+0x78>
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	681a      	ldr	r2, [r3, #0]
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	330c      	adds	r3, #12
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d101      	bne.n	8017f48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	e028      	b.n	8017f9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	60fb      	str	r3, [r7, #12]
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d1c5      	bne.n	8017ee0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017f54:	4b15      	ldr	r3, [pc, #84]	; (8017fac <ip4_route+0xdc>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d01a      	beq.n	8017f92 <ip4_route+0xc2>
 8017f5c:	4b13      	ldr	r3, [pc, #76]	; (8017fac <ip4_route+0xdc>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f64:	f003 0301 	and.w	r3, r3, #1
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d012      	beq.n	8017f92 <ip4_route+0xc2>
 8017f6c:	4b0f      	ldr	r3, [pc, #60]	; (8017fac <ip4_route+0xdc>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f74:	f003 0304 	and.w	r3, r3, #4
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d00a      	beq.n	8017f92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017f7c:	4b0b      	ldr	r3, [pc, #44]	; (8017fac <ip4_route+0xdc>)
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	3304      	adds	r3, #4
 8017f82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d004      	beq.n	8017f92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	b2db      	uxtb	r3, r3
 8017f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8017f90:	d101      	bne.n	8017f96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017f92:	2300      	movs	r3, #0
 8017f94:	e001      	b.n	8017f9a <ip4_route+0xca>
  }

  return netif_default;
 8017f96:	4b05      	ldr	r3, [pc, #20]	; (8017fac <ip4_route+0xdc>)
 8017f98:	681b      	ldr	r3, [r3, #0]
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3714      	adds	r7, #20
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa4:	4770      	bx	lr
 8017fa6:	bf00      	nop
 8017fa8:	2000da8c 	.word	0x2000da8c
 8017fac:	2000da90 	.word	0x2000da90

08017fb0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b082      	sub	sp, #8
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017fbe:	f003 0301 	and.w	r3, r3, #1
 8017fc2:	b2db      	uxtb	r3, r3
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d016      	beq.n	8017ff6 <ip4_input_accept+0x46>
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	3304      	adds	r3, #4
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d011      	beq.n	8017ff6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017fd2:	4b0b      	ldr	r3, [pc, #44]	; (8018000 <ip4_input_accept+0x50>)
 8017fd4:	695a      	ldr	r2, [r3, #20]
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	3304      	adds	r3, #4
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d008      	beq.n	8017ff2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017fe0:	4b07      	ldr	r3, [pc, #28]	; (8018000 <ip4_input_accept+0x50>)
 8017fe2:	695b      	ldr	r3, [r3, #20]
 8017fe4:	6879      	ldr	r1, [r7, #4]
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f000 fa08 	bl	80183fc <ip4_addr_isbroadcast_u32>
 8017fec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d001      	beq.n	8017ff6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017ff2:	2301      	movs	r3, #1
 8017ff4:	e000      	b.n	8017ff8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017ff6:	2300      	movs	r3, #0
}
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	3708      	adds	r7, #8
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bd80      	pop	{r7, pc}
 8018000:	2000a344 	.word	0x2000a344

08018004 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b086      	sub	sp, #24
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
 801800c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	685b      	ldr	r3, [r3, #4]
 8018012:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018014:	697b      	ldr	r3, [r7, #20]
 8018016:	781b      	ldrb	r3, [r3, #0]
 8018018:	091b      	lsrs	r3, r3, #4
 801801a:	b2db      	uxtb	r3, r3
 801801c:	2b04      	cmp	r3, #4
 801801e:	d004      	beq.n	801802a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018020:	6878      	ldr	r0, [r7, #4]
 8018022:	f7f8 fb37 	bl	8010694 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018026:	2300      	movs	r3, #0
 8018028:	e107      	b.n	801823a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	f003 030f 	and.w	r3, r3, #15
 8018032:	b2db      	uxtb	r3, r3
 8018034:	009b      	lsls	r3, r3, #2
 8018036:	b2db      	uxtb	r3, r3
 8018038:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	885b      	ldrh	r3, [r3, #2]
 801803e:	b29b      	uxth	r3, r3
 8018040:	4618      	mov	r0, r3
 8018042:	f7f6 ff35 	bl	800eeb0 <lwip_htons>
 8018046:	4603      	mov	r3, r0
 8018048:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	891b      	ldrh	r3, [r3, #8]
 801804e:	89ba      	ldrh	r2, [r7, #12]
 8018050:	429a      	cmp	r2, r3
 8018052:	d204      	bcs.n	801805e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018054:	89bb      	ldrh	r3, [r7, #12]
 8018056:	4619      	mov	r1, r3
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f7f8 f995 	bl	8010388 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	895b      	ldrh	r3, [r3, #10]
 8018062:	89fa      	ldrh	r2, [r7, #14]
 8018064:	429a      	cmp	r2, r3
 8018066:	d807      	bhi.n	8018078 <ip4_input+0x74>
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	891b      	ldrh	r3, [r3, #8]
 801806c:	89ba      	ldrh	r2, [r7, #12]
 801806e:	429a      	cmp	r2, r3
 8018070:	d802      	bhi.n	8018078 <ip4_input+0x74>
 8018072:	89fb      	ldrh	r3, [r7, #14]
 8018074:	2b13      	cmp	r3, #19
 8018076:	d804      	bhi.n	8018082 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018078:	6878      	ldr	r0, [r7, #4]
 801807a:	f7f8 fb0b 	bl	8010694 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801807e:	2300      	movs	r3, #0
 8018080:	e0db      	b.n	801823a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	691b      	ldr	r3, [r3, #16]
 8018086:	4a6f      	ldr	r2, [pc, #444]	; (8018244 <ip4_input+0x240>)
 8018088:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	68db      	ldr	r3, [r3, #12]
 801808e:	4a6d      	ldr	r2, [pc, #436]	; (8018244 <ip4_input+0x240>)
 8018090:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018092:	4b6c      	ldr	r3, [pc, #432]	; (8018244 <ip4_input+0x240>)
 8018094:	695b      	ldr	r3, [r3, #20]
 8018096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801809a:	2be0      	cmp	r3, #224	; 0xe0
 801809c:	d112      	bne.n	80180c4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801809e:	683b      	ldr	r3, [r7, #0]
 80180a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180a4:	f003 0301 	and.w	r3, r3, #1
 80180a8:	b2db      	uxtb	r3, r3
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d007      	beq.n	80180be <ip4_input+0xba>
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	3304      	adds	r3, #4
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d002      	beq.n	80180be <ip4_input+0xba>
      netif = inp;
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	613b      	str	r3, [r7, #16]
 80180bc:	e02a      	b.n	8018114 <ip4_input+0x110>
    } else {
      netif = NULL;
 80180be:	2300      	movs	r3, #0
 80180c0:	613b      	str	r3, [r7, #16]
 80180c2:	e027      	b.n	8018114 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80180c4:	6838      	ldr	r0, [r7, #0]
 80180c6:	f7ff ff73 	bl	8017fb0 <ip4_input_accept>
 80180ca:	4603      	mov	r3, r0
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d002      	beq.n	80180d6 <ip4_input+0xd2>
      netif = inp;
 80180d0:	683b      	ldr	r3, [r7, #0]
 80180d2:	613b      	str	r3, [r7, #16]
 80180d4:	e01e      	b.n	8018114 <ip4_input+0x110>
    } else {
      netif = NULL;
 80180d6:	2300      	movs	r3, #0
 80180d8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80180da:	4b5a      	ldr	r3, [pc, #360]	; (8018244 <ip4_input+0x240>)
 80180dc:	695b      	ldr	r3, [r3, #20]
 80180de:	b2db      	uxtb	r3, r3
 80180e0:	2b7f      	cmp	r3, #127	; 0x7f
 80180e2:	d017      	beq.n	8018114 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80180e4:	4b58      	ldr	r3, [pc, #352]	; (8018248 <ip4_input+0x244>)
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	613b      	str	r3, [r7, #16]
 80180ea:	e00e      	b.n	801810a <ip4_input+0x106>
          if (netif == inp) {
 80180ec:	693a      	ldr	r2, [r7, #16]
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d006      	beq.n	8018102 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80180f4:	6938      	ldr	r0, [r7, #16]
 80180f6:	f7ff ff5b 	bl	8017fb0 <ip4_input_accept>
 80180fa:	4603      	mov	r3, r0
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d108      	bne.n	8018112 <ip4_input+0x10e>
 8018100:	e000      	b.n	8018104 <ip4_input+0x100>
            continue;
 8018102:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018104:	693b      	ldr	r3, [r7, #16]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	613b      	str	r3, [r7, #16]
 801810a:	693b      	ldr	r3, [r7, #16]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d1ed      	bne.n	80180ec <ip4_input+0xe8>
 8018110:	e000      	b.n	8018114 <ip4_input+0x110>
            break;
 8018112:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018114:	4b4b      	ldr	r3, [pc, #300]	; (8018244 <ip4_input+0x240>)
 8018116:	691b      	ldr	r3, [r3, #16]
 8018118:	6839      	ldr	r1, [r7, #0]
 801811a:	4618      	mov	r0, r3
 801811c:	f000 f96e 	bl	80183fc <ip4_addr_isbroadcast_u32>
 8018120:	4603      	mov	r3, r0
 8018122:	2b00      	cmp	r3, #0
 8018124:	d105      	bne.n	8018132 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018126:	4b47      	ldr	r3, [pc, #284]	; (8018244 <ip4_input+0x240>)
 8018128:	691b      	ldr	r3, [r3, #16]
 801812a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801812e:	2be0      	cmp	r3, #224	; 0xe0
 8018130:	d104      	bne.n	801813c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f7f8 faae 	bl	8010694 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018138:	2300      	movs	r3, #0
 801813a:	e07e      	b.n	801823a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801813c:	693b      	ldr	r3, [r7, #16]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d104      	bne.n	801814c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	f7f8 faa6 	bl	8010694 <pbuf_free>
    return ERR_OK;
 8018148:	2300      	movs	r3, #0
 801814a:	e076      	b.n	801823a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801814c:	697b      	ldr	r3, [r7, #20]
 801814e:	88db      	ldrh	r3, [r3, #6]
 8018150:	b29b      	uxth	r3, r3
 8018152:	461a      	mov	r2, r3
 8018154:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018158:	4013      	ands	r3, r2
 801815a:	2b00      	cmp	r3, #0
 801815c:	d00b      	beq.n	8018176 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	f000 fc92 	bl	8018a88 <ip4_reass>
 8018164:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d101      	bne.n	8018170 <ip4_input+0x16c>
      return ERR_OK;
 801816c:	2300      	movs	r3, #0
 801816e:	e064      	b.n	801823a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018176:	4a33      	ldr	r2, [pc, #204]	; (8018244 <ip4_input+0x240>)
 8018178:	693b      	ldr	r3, [r7, #16]
 801817a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801817c:	4a31      	ldr	r2, [pc, #196]	; (8018244 <ip4_input+0x240>)
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018182:	4a30      	ldr	r2, [pc, #192]	; (8018244 <ip4_input+0x240>)
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	f003 030f 	and.w	r3, r3, #15
 8018190:	b2db      	uxtb	r3, r3
 8018192:	009b      	lsls	r3, r3, #2
 8018194:	b2db      	uxtb	r3, r3
 8018196:	b29a      	uxth	r2, r3
 8018198:	4b2a      	ldr	r3, [pc, #168]	; (8018244 <ip4_input+0x240>)
 801819a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801819c:	89fb      	ldrh	r3, [r7, #14]
 801819e:	4619      	mov	r1, r3
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	f7f8 f9f1 	bl	8010588 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80181a6:	697b      	ldr	r3, [r7, #20]
 80181a8:	7a5b      	ldrb	r3, [r3, #9]
 80181aa:	2b11      	cmp	r3, #17
 80181ac:	d006      	beq.n	80181bc <ip4_input+0x1b8>
 80181ae:	2b11      	cmp	r3, #17
 80181b0:	dc13      	bgt.n	80181da <ip4_input+0x1d6>
 80181b2:	2b01      	cmp	r3, #1
 80181b4:	d00c      	beq.n	80181d0 <ip4_input+0x1cc>
 80181b6:	2b06      	cmp	r3, #6
 80181b8:	d005      	beq.n	80181c6 <ip4_input+0x1c2>
 80181ba:	e00e      	b.n	80181da <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80181bc:	6839      	ldr	r1, [r7, #0]
 80181be:	6878      	ldr	r0, [r7, #4]
 80181c0:	f7fe f928 	bl	8016414 <udp_input>
        break;
 80181c4:	e026      	b.n	8018214 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80181c6:	6839      	ldr	r1, [r7, #0]
 80181c8:	6878      	ldr	r0, [r7, #4]
 80181ca:	f7fa f939 	bl	8012440 <tcp_input>
        break;
 80181ce:	e021      	b.n	8018214 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80181d0:	6839      	ldr	r1, [r7, #0]
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f7ff fcee 	bl	8017bb4 <icmp_input>
        break;
 80181d8:	e01c      	b.n	8018214 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80181da:	4b1a      	ldr	r3, [pc, #104]	; (8018244 <ip4_input+0x240>)
 80181dc:	695b      	ldr	r3, [r3, #20]
 80181de:	6939      	ldr	r1, [r7, #16]
 80181e0:	4618      	mov	r0, r3
 80181e2:	f000 f90b 	bl	80183fc <ip4_addr_isbroadcast_u32>
 80181e6:	4603      	mov	r3, r0
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d10f      	bne.n	801820c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80181ec:	4b15      	ldr	r3, [pc, #84]	; (8018244 <ip4_input+0x240>)
 80181ee:	695b      	ldr	r3, [r3, #20]
 80181f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80181f4:	2be0      	cmp	r3, #224	; 0xe0
 80181f6:	d009      	beq.n	801820c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80181f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80181fc:	4619      	mov	r1, r3
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	f7f8 fa35 	bl	801066e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018204:	2102      	movs	r1, #2
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	f7ff fdd8 	bl	8017dbc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801820c:	6878      	ldr	r0, [r7, #4]
 801820e:	f7f8 fa41 	bl	8010694 <pbuf_free>
        break;
 8018212:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018214:	4b0b      	ldr	r3, [pc, #44]	; (8018244 <ip4_input+0x240>)
 8018216:	2200      	movs	r2, #0
 8018218:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801821a:	4b0a      	ldr	r3, [pc, #40]	; (8018244 <ip4_input+0x240>)
 801821c:	2200      	movs	r2, #0
 801821e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018220:	4b08      	ldr	r3, [pc, #32]	; (8018244 <ip4_input+0x240>)
 8018222:	2200      	movs	r2, #0
 8018224:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018226:	4b07      	ldr	r3, [pc, #28]	; (8018244 <ip4_input+0x240>)
 8018228:	2200      	movs	r2, #0
 801822a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801822c:	4b05      	ldr	r3, [pc, #20]	; (8018244 <ip4_input+0x240>)
 801822e:	2200      	movs	r2, #0
 8018230:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018232:	4b04      	ldr	r3, [pc, #16]	; (8018244 <ip4_input+0x240>)
 8018234:	2200      	movs	r2, #0
 8018236:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018238:	2300      	movs	r3, #0
}
 801823a:	4618      	mov	r0, r3
 801823c:	3718      	adds	r7, #24
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	2000a344 	.word	0x2000a344
 8018248:	2000da8c 	.word	0x2000da8c

0801824c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b08a      	sub	sp, #40	; 0x28
 8018250:	af04      	add	r7, sp, #16
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
 8018258:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801825a:	68bb      	ldr	r3, [r7, #8]
 801825c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d009      	beq.n	8018278 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018264:	68bb      	ldr	r3, [r7, #8]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d003      	beq.n	8018272 <ip4_output_if+0x26>
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d102      	bne.n	8018278 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018274:	3304      	adds	r3, #4
 8018276:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018278:	78fa      	ldrb	r2, [r7, #3]
 801827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801827c:	9302      	str	r3, [sp, #8]
 801827e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018282:	9301      	str	r3, [sp, #4]
 8018284:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018288:	9300      	str	r3, [sp, #0]
 801828a:	4613      	mov	r3, r2
 801828c:	687a      	ldr	r2, [r7, #4]
 801828e:	6979      	ldr	r1, [r7, #20]
 8018290:	68f8      	ldr	r0, [r7, #12]
 8018292:	f000 f805 	bl	80182a0 <ip4_output_if_src>
 8018296:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018298:	4618      	mov	r0, r3
 801829a:	3718      	adds	r7, #24
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}

080182a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b088      	sub	sp, #32
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	60f8      	str	r0, [r7, #12]
 80182a8:	60b9      	str	r1, [r7, #8]
 80182aa:	607a      	str	r2, [r7, #4]
 80182ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	7b9b      	ldrb	r3, [r3, #14]
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d006      	beq.n	80182c4 <ip4_output_if_src+0x24>
 80182b6:	4b4b      	ldr	r3, [pc, #300]	; (80183e4 <ip4_output_if_src+0x144>)
 80182b8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80182bc:	494a      	ldr	r1, [pc, #296]	; (80183e8 <ip4_output_if_src+0x148>)
 80182be:	484b      	ldr	r0, [pc, #300]	; (80183ec <ip4_output_if_src+0x14c>)
 80182c0:	f001 fada 	bl	8019878 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d060      	beq.n	801838c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80182ca:	2314      	movs	r3, #20
 80182cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80182ce:	2114      	movs	r1, #20
 80182d0:	68f8      	ldr	r0, [r7, #12]
 80182d2:	f7f8 f949 	bl	8010568 <pbuf_add_header>
 80182d6:	4603      	mov	r3, r0
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d002      	beq.n	80182e2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80182dc:	f06f 0301 	mvn.w	r3, #1
 80182e0:	e07c      	b.n	80183dc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	895b      	ldrh	r3, [r3, #10]
 80182ec:	2b13      	cmp	r3, #19
 80182ee:	d806      	bhi.n	80182fe <ip4_output_if_src+0x5e>
 80182f0:	4b3c      	ldr	r3, [pc, #240]	; (80183e4 <ip4_output_if_src+0x144>)
 80182f2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80182f6:	493e      	ldr	r1, [pc, #248]	; (80183f0 <ip4_output_if_src+0x150>)
 80182f8:	483c      	ldr	r0, [pc, #240]	; (80183ec <ip4_output_if_src+0x14c>)
 80182fa:	f001 fabd 	bl	8019878 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80182fe:	69fb      	ldr	r3, [r7, #28]
 8018300:	78fa      	ldrb	r2, [r7, #3]
 8018302:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801830a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681a      	ldr	r2, [r3, #0]
 8018310:	69fb      	ldr	r3, [r7, #28]
 8018312:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018314:	8b7b      	ldrh	r3, [r7, #26]
 8018316:	089b      	lsrs	r3, r3, #2
 8018318:	b29b      	uxth	r3, r3
 801831a:	b2db      	uxtb	r3, r3
 801831c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018320:	b2da      	uxtb	r2, r3
 8018322:	69fb      	ldr	r3, [r7, #28]
 8018324:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801832c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	891b      	ldrh	r3, [r3, #8]
 8018332:	4618      	mov	r0, r3
 8018334:	f7f6 fdbc 	bl	800eeb0 <lwip_htons>
 8018338:	4603      	mov	r3, r0
 801833a:	461a      	mov	r2, r3
 801833c:	69fb      	ldr	r3, [r7, #28]
 801833e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	2200      	movs	r2, #0
 8018344:	719a      	strb	r2, [r3, #6]
 8018346:	2200      	movs	r2, #0
 8018348:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801834a:	4b2a      	ldr	r3, [pc, #168]	; (80183f4 <ip4_output_if_src+0x154>)
 801834c:	881b      	ldrh	r3, [r3, #0]
 801834e:	4618      	mov	r0, r3
 8018350:	f7f6 fdae 	bl	800eeb0 <lwip_htons>
 8018354:	4603      	mov	r3, r0
 8018356:	461a      	mov	r2, r3
 8018358:	69fb      	ldr	r3, [r7, #28]
 801835a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801835c:	4b25      	ldr	r3, [pc, #148]	; (80183f4 <ip4_output_if_src+0x154>)
 801835e:	881b      	ldrh	r3, [r3, #0]
 8018360:	3301      	adds	r3, #1
 8018362:	b29a      	uxth	r2, r3
 8018364:	4b23      	ldr	r3, [pc, #140]	; (80183f4 <ip4_output_if_src+0x154>)
 8018366:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018368:	68bb      	ldr	r3, [r7, #8]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d104      	bne.n	8018378 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801836e:	4b22      	ldr	r3, [pc, #136]	; (80183f8 <ip4_output_if_src+0x158>)
 8018370:	681a      	ldr	r2, [r3, #0]
 8018372:	69fb      	ldr	r3, [r7, #28]
 8018374:	60da      	str	r2, [r3, #12]
 8018376:	e003      	b.n	8018380 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	69fb      	ldr	r3, [r7, #28]
 801837e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018380:	69fb      	ldr	r3, [r7, #28]
 8018382:	2200      	movs	r2, #0
 8018384:	729a      	strb	r2, [r3, #10]
 8018386:	2200      	movs	r2, #0
 8018388:	72da      	strb	r2, [r3, #11]
 801838a:	e00f      	b.n	80183ac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	895b      	ldrh	r3, [r3, #10]
 8018390:	2b13      	cmp	r3, #19
 8018392:	d802      	bhi.n	801839a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018394:	f06f 0301 	mvn.w	r3, #1
 8018398:	e020      	b.n	80183dc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	685b      	ldr	r3, [r3, #4]
 801839e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80183a0:	69fb      	ldr	r3, [r7, #28]
 80183a2:	691b      	ldr	r3, [r3, #16]
 80183a4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80183a6:	f107 0314 	add.w	r3, r7, #20
 80183aa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80183ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d00c      	beq.n	80183ce <ip4_output_if_src+0x12e>
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	891a      	ldrh	r2, [r3, #8]
 80183b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80183bc:	429a      	cmp	r2, r3
 80183be:	d906      	bls.n	80183ce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80183c0:	687a      	ldr	r2, [r7, #4]
 80183c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80183c4:	68f8      	ldr	r0, [r7, #12]
 80183c6:	f000 fd53 	bl	8018e70 <ip4_frag>
 80183ca:	4603      	mov	r3, r0
 80183cc:	e006      	b.n	80183dc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80183ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d0:	695b      	ldr	r3, [r3, #20]
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	68f9      	ldr	r1, [r7, #12]
 80183d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183d8:	4798      	blx	r3
 80183da:	4603      	mov	r3, r0
}
 80183dc:	4618      	mov	r0, r3
 80183de:	3720      	adds	r7, #32
 80183e0:	46bd      	mov	sp, r7
 80183e2:	bd80      	pop	{r7, pc}
 80183e4:	0801d580 	.word	0x0801d580
 80183e8:	0801d5b4 	.word	0x0801d5b4
 80183ec:	0801d5c0 	.word	0x0801d5c0
 80183f0:	0801d5e8 	.word	0x0801d5e8
 80183f4:	2000dbea 	.word	0x2000dbea
 80183f8:	0801daa8 	.word	0x0801daa8

080183fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80183fc:	b480      	push	{r7}
 80183fe:	b085      	sub	sp, #20
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018410:	d002      	beq.n	8018418 <ip4_addr_isbroadcast_u32+0x1c>
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d101      	bne.n	801841c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018418:	2301      	movs	r3, #1
 801841a:	e02a      	b.n	8018472 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018422:	f003 0302 	and.w	r3, r3, #2
 8018426:	2b00      	cmp	r3, #0
 8018428:	d101      	bne.n	801842e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801842a:	2300      	movs	r3, #0
 801842c:	e021      	b.n	8018472 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	3304      	adds	r3, #4
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	429a      	cmp	r2, r3
 8018438:	d101      	bne.n	801843e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801843a:	2300      	movs	r3, #0
 801843c:	e019      	b.n	8018472 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801843e:	68fa      	ldr	r2, [r7, #12]
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	3304      	adds	r3, #4
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	405a      	eors	r2, r3
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	3308      	adds	r3, #8
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	4013      	ands	r3, r2
 8018450:	2b00      	cmp	r3, #0
 8018452:	d10d      	bne.n	8018470 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	3308      	adds	r3, #8
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	43da      	mvns	r2, r3
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018460:	683b      	ldr	r3, [r7, #0]
 8018462:	3308      	adds	r3, #8
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018468:	429a      	cmp	r2, r3
 801846a:	d101      	bne.n	8018470 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801846c:	2301      	movs	r3, #1
 801846e:	e000      	b.n	8018472 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018470:	2300      	movs	r3, #0
  }
}
 8018472:	4618      	mov	r0, r3
 8018474:	3714      	adds	r7, #20
 8018476:	46bd      	mov	sp, r7
 8018478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847c:	4770      	bx	lr
	...

08018480 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b084      	sub	sp, #16
 8018484:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018486:	2300      	movs	r3, #0
 8018488:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801848a:	4b12      	ldr	r3, [pc, #72]	; (80184d4 <ip_reass_tmr+0x54>)
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018490:	e018      	b.n	80184c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	7fdb      	ldrb	r3, [r3, #31]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d00b      	beq.n	80184b2 <ip_reass_tmr+0x32>
      r->timer--;
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	7fdb      	ldrb	r3, [r3, #31]
 801849e:	3b01      	subs	r3, #1
 80184a0:	b2da      	uxtb	r2, r3
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	60fb      	str	r3, [r7, #12]
 80184b0:	e008      	b.n	80184c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80184bc:	68b9      	ldr	r1, [r7, #8]
 80184be:	6878      	ldr	r0, [r7, #4]
 80184c0:	f000 f80a 	bl	80184d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d1e3      	bne.n	8018492 <ip_reass_tmr+0x12>
    }
  }
}
 80184ca:	bf00      	nop
 80184cc:	bf00      	nop
 80184ce:	3710      	adds	r7, #16
 80184d0:	46bd      	mov	sp, r7
 80184d2:	bd80      	pop	{r7, pc}
 80184d4:	2000dbec 	.word	0x2000dbec

080184d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b088      	sub	sp, #32
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
 80184e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80184e2:	2300      	movs	r3, #0
 80184e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80184e6:	683a      	ldr	r2, [r7, #0]
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d105      	bne.n	80184fa <ip_reass_free_complete_datagram+0x22>
 80184ee:	4b45      	ldr	r3, [pc, #276]	; (8018604 <ip_reass_free_complete_datagram+0x12c>)
 80184f0:	22ab      	movs	r2, #171	; 0xab
 80184f2:	4945      	ldr	r1, [pc, #276]	; (8018608 <ip_reass_free_complete_datagram+0x130>)
 80184f4:	4845      	ldr	r0, [pc, #276]	; (801860c <ip_reass_free_complete_datagram+0x134>)
 80184f6:	f001 f9bf 	bl	8019878 <iprintf>
  if (prev != NULL) {
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d00a      	beq.n	8018516 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	687a      	ldr	r2, [r7, #4]
 8018506:	429a      	cmp	r2, r3
 8018508:	d005      	beq.n	8018516 <ip_reass_free_complete_datagram+0x3e>
 801850a:	4b3e      	ldr	r3, [pc, #248]	; (8018604 <ip_reass_free_complete_datagram+0x12c>)
 801850c:	22ad      	movs	r2, #173	; 0xad
 801850e:	4940      	ldr	r1, [pc, #256]	; (8018610 <ip_reass_free_complete_datagram+0x138>)
 8018510:	483e      	ldr	r0, [pc, #248]	; (801860c <ip_reass_free_complete_datagram+0x134>)
 8018512:	f001 f9b1 	bl	8019878 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	685b      	ldr	r3, [r3, #4]
 801851a:	685b      	ldr	r3, [r3, #4]
 801851c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	889b      	ldrh	r3, [r3, #4]
 8018522:	b29b      	uxth	r3, r3
 8018524:	2b00      	cmp	r3, #0
 8018526:	d12a      	bne.n	801857e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	685b      	ldr	r3, [r3, #4]
 801852c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	681a      	ldr	r2, [r3, #0]
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018536:	69bb      	ldr	r3, [r7, #24]
 8018538:	6858      	ldr	r0, [r3, #4]
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	3308      	adds	r3, #8
 801853e:	2214      	movs	r2, #20
 8018540:	4619      	mov	r1, r3
 8018542:	f001 f8d4 	bl	80196ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018546:	2101      	movs	r1, #1
 8018548:	69b8      	ldr	r0, [r7, #24]
 801854a:	f7ff fc47 	bl	8017ddc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801854e:	69b8      	ldr	r0, [r7, #24]
 8018550:	f7f8 f92e 	bl	80107b0 <pbuf_clen>
 8018554:	4603      	mov	r3, r0
 8018556:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018558:	8bfa      	ldrh	r2, [r7, #30]
 801855a:	8a7b      	ldrh	r3, [r7, #18]
 801855c:	4413      	add	r3, r2
 801855e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018562:	db05      	blt.n	8018570 <ip_reass_free_complete_datagram+0x98>
 8018564:	4b27      	ldr	r3, [pc, #156]	; (8018604 <ip_reass_free_complete_datagram+0x12c>)
 8018566:	22bc      	movs	r2, #188	; 0xbc
 8018568:	492a      	ldr	r1, [pc, #168]	; (8018614 <ip_reass_free_complete_datagram+0x13c>)
 801856a:	4828      	ldr	r0, [pc, #160]	; (801860c <ip_reass_free_complete_datagram+0x134>)
 801856c:	f001 f984 	bl	8019878 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018570:	8bfa      	ldrh	r2, [r7, #30]
 8018572:	8a7b      	ldrh	r3, [r7, #18]
 8018574:	4413      	add	r3, r2
 8018576:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018578:	69b8      	ldr	r0, [r7, #24]
 801857a:	f7f8 f88b 	bl	8010694 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	685b      	ldr	r3, [r3, #4]
 8018582:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018584:	e01f      	b.n	80185c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018586:	69bb      	ldr	r3, [r7, #24]
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801858c:	69bb      	ldr	r3, [r7, #24]
 801858e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018596:	68f8      	ldr	r0, [r7, #12]
 8018598:	f7f8 f90a 	bl	80107b0 <pbuf_clen>
 801859c:	4603      	mov	r3, r0
 801859e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80185a0:	8bfa      	ldrh	r2, [r7, #30]
 80185a2:	8a7b      	ldrh	r3, [r7, #18]
 80185a4:	4413      	add	r3, r2
 80185a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80185aa:	db05      	blt.n	80185b8 <ip_reass_free_complete_datagram+0xe0>
 80185ac:	4b15      	ldr	r3, [pc, #84]	; (8018604 <ip_reass_free_complete_datagram+0x12c>)
 80185ae:	22cc      	movs	r2, #204	; 0xcc
 80185b0:	4918      	ldr	r1, [pc, #96]	; (8018614 <ip_reass_free_complete_datagram+0x13c>)
 80185b2:	4816      	ldr	r0, [pc, #88]	; (801860c <ip_reass_free_complete_datagram+0x134>)
 80185b4:	f001 f960 	bl	8019878 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80185b8:	8bfa      	ldrh	r2, [r7, #30]
 80185ba:	8a7b      	ldrh	r3, [r7, #18]
 80185bc:	4413      	add	r3, r2
 80185be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80185c0:	68f8      	ldr	r0, [r7, #12]
 80185c2:	f7f8 f867 	bl	8010694 <pbuf_free>
  while (p != NULL) {
 80185c6:	69bb      	ldr	r3, [r7, #24]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d1dc      	bne.n	8018586 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80185cc:	6839      	ldr	r1, [r7, #0]
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f000 f8c2 	bl	8018758 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80185d4:	4b10      	ldr	r3, [pc, #64]	; (8018618 <ip_reass_free_complete_datagram+0x140>)
 80185d6:	881b      	ldrh	r3, [r3, #0]
 80185d8:	8bfa      	ldrh	r2, [r7, #30]
 80185da:	429a      	cmp	r2, r3
 80185dc:	d905      	bls.n	80185ea <ip_reass_free_complete_datagram+0x112>
 80185de:	4b09      	ldr	r3, [pc, #36]	; (8018604 <ip_reass_free_complete_datagram+0x12c>)
 80185e0:	22d2      	movs	r2, #210	; 0xd2
 80185e2:	490e      	ldr	r1, [pc, #56]	; (801861c <ip_reass_free_complete_datagram+0x144>)
 80185e4:	4809      	ldr	r0, [pc, #36]	; (801860c <ip_reass_free_complete_datagram+0x134>)
 80185e6:	f001 f947 	bl	8019878 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80185ea:	4b0b      	ldr	r3, [pc, #44]	; (8018618 <ip_reass_free_complete_datagram+0x140>)
 80185ec:	881a      	ldrh	r2, [r3, #0]
 80185ee:	8bfb      	ldrh	r3, [r7, #30]
 80185f0:	1ad3      	subs	r3, r2, r3
 80185f2:	b29a      	uxth	r2, r3
 80185f4:	4b08      	ldr	r3, [pc, #32]	; (8018618 <ip_reass_free_complete_datagram+0x140>)
 80185f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80185f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80185fa:	4618      	mov	r0, r3
 80185fc:	3720      	adds	r7, #32
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
 8018602:	bf00      	nop
 8018604:	0801d618 	.word	0x0801d618
 8018608:	0801d654 	.word	0x0801d654
 801860c:	0801d660 	.word	0x0801d660
 8018610:	0801d688 	.word	0x0801d688
 8018614:	0801d69c 	.word	0x0801d69c
 8018618:	2000dbf0 	.word	0x2000dbf0
 801861c:	0801d6bc 	.word	0x0801d6bc

08018620 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b08a      	sub	sp, #40	; 0x28
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
 8018628:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801862a:	2300      	movs	r3, #0
 801862c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801862e:	2300      	movs	r3, #0
 8018630:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018632:	2300      	movs	r3, #0
 8018634:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018636:	2300      	movs	r3, #0
 8018638:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801863a:	2300      	movs	r3, #0
 801863c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801863e:	4b28      	ldr	r3, [pc, #160]	; (80186e0 <ip_reass_remove_oldest_datagram+0xc0>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018644:	e030      	b.n	80186a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018648:	695a      	ldr	r2, [r3, #20]
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	68db      	ldr	r3, [r3, #12]
 801864e:	429a      	cmp	r2, r3
 8018650:	d10c      	bne.n	801866c <ip_reass_remove_oldest_datagram+0x4c>
 8018652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018654:	699a      	ldr	r2, [r3, #24]
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	691b      	ldr	r3, [r3, #16]
 801865a:	429a      	cmp	r2, r3
 801865c:	d106      	bne.n	801866c <ip_reass_remove_oldest_datagram+0x4c>
 801865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018660:	899a      	ldrh	r2, [r3, #12]
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	889b      	ldrh	r3, [r3, #4]
 8018666:	b29b      	uxth	r3, r3
 8018668:	429a      	cmp	r2, r3
 801866a:	d014      	beq.n	8018696 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801866c:	693b      	ldr	r3, [r7, #16]
 801866e:	3301      	adds	r3, #1
 8018670:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018672:	6a3b      	ldr	r3, [r7, #32]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d104      	bne.n	8018682 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801867a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801867c:	69fb      	ldr	r3, [r7, #28]
 801867e:	61bb      	str	r3, [r7, #24]
 8018680:	e009      	b.n	8018696 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018684:	7fda      	ldrb	r2, [r3, #31]
 8018686:	6a3b      	ldr	r3, [r7, #32]
 8018688:	7fdb      	ldrb	r3, [r3, #31]
 801868a:	429a      	cmp	r2, r3
 801868c:	d803      	bhi.n	8018696 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018690:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018692:	69fb      	ldr	r3, [r7, #28]
 8018694:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d001      	beq.n	80186a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80186a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80186a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d1cb      	bne.n	8018646 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80186ae:	6a3b      	ldr	r3, [r7, #32]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d008      	beq.n	80186c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80186b4:	69b9      	ldr	r1, [r7, #24]
 80186b6:	6a38      	ldr	r0, [r7, #32]
 80186b8:	f7ff ff0e 	bl	80184d8 <ip_reass_free_complete_datagram>
 80186bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80186be:	697a      	ldr	r2, [r7, #20]
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	4413      	add	r3, r2
 80186c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80186c6:	697a      	ldr	r2, [r7, #20]
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	429a      	cmp	r2, r3
 80186cc:	da02      	bge.n	80186d4 <ip_reass_remove_oldest_datagram+0xb4>
 80186ce:	693b      	ldr	r3, [r7, #16]
 80186d0:	2b01      	cmp	r3, #1
 80186d2:	dcac      	bgt.n	801862e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80186d4:	697b      	ldr	r3, [r7, #20]
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3728      	adds	r7, #40	; 0x28
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	bf00      	nop
 80186e0:	2000dbec 	.word	0x2000dbec

080186e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b084      	sub	sp, #16
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80186ee:	2004      	movs	r0, #4
 80186f0:	f7f7 f8b6 	bl	800f860 <memp_malloc>
 80186f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d110      	bne.n	801871e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80186fc:	6839      	ldr	r1, [r7, #0]
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f7ff ff8e 	bl	8018620 <ip_reass_remove_oldest_datagram>
 8018704:	4602      	mov	r2, r0
 8018706:	683b      	ldr	r3, [r7, #0]
 8018708:	4293      	cmp	r3, r2
 801870a:	dc03      	bgt.n	8018714 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801870c:	2004      	movs	r0, #4
 801870e:	f7f7 f8a7 	bl	800f860 <memp_malloc>
 8018712:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d101      	bne.n	801871e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801871a:	2300      	movs	r3, #0
 801871c:	e016      	b.n	801874c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801871e:	2220      	movs	r2, #32
 8018720:	2100      	movs	r1, #0
 8018722:	68f8      	ldr	r0, [r7, #12]
 8018724:	f001 f80b 	bl	801973e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	220f      	movs	r2, #15
 801872c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801872e:	4b09      	ldr	r3, [pc, #36]	; (8018754 <ip_reass_enqueue_new_datagram+0x70>)
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018736:	4a07      	ldr	r2, [pc, #28]	; (8018754 <ip_reass_enqueue_new_datagram+0x70>)
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	3308      	adds	r3, #8
 8018740:	2214      	movs	r2, #20
 8018742:	6879      	ldr	r1, [r7, #4]
 8018744:	4618      	mov	r0, r3
 8018746:	f000 ffd2 	bl	80196ee <memcpy>
  return ipr;
 801874a:	68fb      	ldr	r3, [r7, #12]
}
 801874c:	4618      	mov	r0, r3
 801874e:	3710      	adds	r7, #16
 8018750:	46bd      	mov	sp, r7
 8018752:	bd80      	pop	{r7, pc}
 8018754:	2000dbec 	.word	0x2000dbec

08018758 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b082      	sub	sp, #8
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
 8018760:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018762:	4b10      	ldr	r3, [pc, #64]	; (80187a4 <ip_reass_dequeue_datagram+0x4c>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	687a      	ldr	r2, [r7, #4]
 8018768:	429a      	cmp	r2, r3
 801876a:	d104      	bne.n	8018776 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	4a0c      	ldr	r2, [pc, #48]	; (80187a4 <ip_reass_dequeue_datagram+0x4c>)
 8018772:	6013      	str	r3, [r2, #0]
 8018774:	e00d      	b.n	8018792 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d106      	bne.n	801878a <ip_reass_dequeue_datagram+0x32>
 801877c:	4b0a      	ldr	r3, [pc, #40]	; (80187a8 <ip_reass_dequeue_datagram+0x50>)
 801877e:	f240 1245 	movw	r2, #325	; 0x145
 8018782:	490a      	ldr	r1, [pc, #40]	; (80187ac <ip_reass_dequeue_datagram+0x54>)
 8018784:	480a      	ldr	r0, [pc, #40]	; (80187b0 <ip_reass_dequeue_datagram+0x58>)
 8018786:	f001 f877 	bl	8019878 <iprintf>
    prev->next = ipr->next;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681a      	ldr	r2, [r3, #0]
 801878e:	683b      	ldr	r3, [r7, #0]
 8018790:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018792:	6879      	ldr	r1, [r7, #4]
 8018794:	2004      	movs	r0, #4
 8018796:	f7f7 f8d9 	bl	800f94c <memp_free>
}
 801879a:	bf00      	nop
 801879c:	3708      	adds	r7, #8
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	2000dbec 	.word	0x2000dbec
 80187a8:	0801d618 	.word	0x0801d618
 80187ac:	0801d6e0 	.word	0x0801d6e0
 80187b0:	0801d660 	.word	0x0801d660

080187b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b08c      	sub	sp, #48	; 0x30
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80187c0:	2300      	movs	r3, #0
 80187c2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80187c4:	2301      	movs	r3, #1
 80187c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	685b      	ldr	r3, [r3, #4]
 80187cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80187ce:	69fb      	ldr	r3, [r7, #28]
 80187d0:	885b      	ldrh	r3, [r3, #2]
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7f6 fb6b 	bl	800eeb0 <lwip_htons>
 80187da:	4603      	mov	r3, r0
 80187dc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80187de:	69fb      	ldr	r3, [r7, #28]
 80187e0:	781b      	ldrb	r3, [r3, #0]
 80187e2:	f003 030f 	and.w	r3, r3, #15
 80187e6:	b2db      	uxtb	r3, r3
 80187e8:	009b      	lsls	r3, r3, #2
 80187ea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80187ec:	7e7b      	ldrb	r3, [r7, #25]
 80187ee:	b29b      	uxth	r3, r3
 80187f0:	8b7a      	ldrh	r2, [r7, #26]
 80187f2:	429a      	cmp	r2, r3
 80187f4:	d202      	bcs.n	80187fc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187f6:	f04f 33ff 	mov.w	r3, #4294967295
 80187fa:	e135      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80187fc:	7e7b      	ldrb	r3, [r7, #25]
 80187fe:	b29b      	uxth	r3, r3
 8018800:	8b7a      	ldrh	r2, [r7, #26]
 8018802:	1ad3      	subs	r3, r2, r3
 8018804:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018806:	69fb      	ldr	r3, [r7, #28]
 8018808:	88db      	ldrh	r3, [r3, #6]
 801880a:	b29b      	uxth	r3, r3
 801880c:	4618      	mov	r0, r3
 801880e:	f7f6 fb4f 	bl	800eeb0 <lwip_htons>
 8018812:	4603      	mov	r3, r0
 8018814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018818:	b29b      	uxth	r3, r3
 801881a:	00db      	lsls	r3, r3, #3
 801881c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	685b      	ldr	r3, [r3, #4]
 8018822:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018826:	2200      	movs	r2, #0
 8018828:	701a      	strb	r2, [r3, #0]
 801882a:	2200      	movs	r2, #0
 801882c:	705a      	strb	r2, [r3, #1]
 801882e:	2200      	movs	r2, #0
 8018830:	709a      	strb	r2, [r3, #2]
 8018832:	2200      	movs	r2, #0
 8018834:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018838:	8afa      	ldrh	r2, [r7, #22]
 801883a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801883c:	8afa      	ldrh	r2, [r7, #22]
 801883e:	8b7b      	ldrh	r3, [r7, #26]
 8018840:	4413      	add	r3, r2
 8018842:	b29a      	uxth	r2, r3
 8018844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018846:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	88db      	ldrh	r3, [r3, #6]
 801884c:	b29b      	uxth	r3, r3
 801884e:	8afa      	ldrh	r2, [r7, #22]
 8018850:	429a      	cmp	r2, r3
 8018852:	d902      	bls.n	801885a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018854:	f04f 33ff 	mov.w	r3, #4294967295
 8018858:	e106      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	685b      	ldr	r3, [r3, #4]
 801885e:	627b      	str	r3, [r7, #36]	; 0x24
 8018860:	e068      	b.n	8018934 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018864:	685b      	ldr	r3, [r3, #4]
 8018866:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801886a:	889b      	ldrh	r3, [r3, #4]
 801886c:	b29a      	uxth	r2, r3
 801886e:	693b      	ldr	r3, [r7, #16]
 8018870:	889b      	ldrh	r3, [r3, #4]
 8018872:	b29b      	uxth	r3, r3
 8018874:	429a      	cmp	r2, r3
 8018876:	d235      	bcs.n	80188e4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801887a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801887c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018880:	2b00      	cmp	r3, #0
 8018882:	d020      	beq.n	80188c6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018886:	889b      	ldrh	r3, [r3, #4]
 8018888:	b29a      	uxth	r2, r3
 801888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801888c:	88db      	ldrh	r3, [r3, #6]
 801888e:	b29b      	uxth	r3, r3
 8018890:	429a      	cmp	r2, r3
 8018892:	d307      	bcc.n	80188a4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018896:	88db      	ldrh	r3, [r3, #6]
 8018898:	b29a      	uxth	r2, r3
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	889b      	ldrh	r3, [r3, #4]
 801889e:	b29b      	uxth	r3, r3
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d902      	bls.n	80188aa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80188a4:	f04f 33ff 	mov.w	r3, #4294967295
 80188a8:	e0de      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80188aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ac:	68ba      	ldr	r2, [r7, #8]
 80188ae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80188b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188b2:	88db      	ldrh	r3, [r3, #6]
 80188b4:	b29a      	uxth	r2, r3
 80188b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188b8:	889b      	ldrh	r3, [r3, #4]
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	429a      	cmp	r2, r3
 80188be:	d03d      	beq.n	801893c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80188c0:	2300      	movs	r3, #0
 80188c2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80188c4:	e03a      	b.n	801893c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80188c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c8:	88db      	ldrh	r3, [r3, #6]
 80188ca:	b29a      	uxth	r2, r3
 80188cc:	693b      	ldr	r3, [r7, #16]
 80188ce:	889b      	ldrh	r3, [r3, #4]
 80188d0:	b29b      	uxth	r3, r3
 80188d2:	429a      	cmp	r2, r3
 80188d4:	d902      	bls.n	80188dc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80188d6:	f04f 33ff 	mov.w	r3, #4294967295
 80188da:	e0c5      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	68ba      	ldr	r2, [r7, #8]
 80188e0:	605a      	str	r2, [r3, #4]
      break;
 80188e2:	e02b      	b.n	801893c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80188e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188e6:	889b      	ldrh	r3, [r3, #4]
 80188e8:	b29a      	uxth	r2, r3
 80188ea:	693b      	ldr	r3, [r7, #16]
 80188ec:	889b      	ldrh	r3, [r3, #4]
 80188ee:	b29b      	uxth	r3, r3
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d102      	bne.n	80188fa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80188f4:	f04f 33ff 	mov.w	r3, #4294967295
 80188f8:	e0b6      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80188fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188fc:	889b      	ldrh	r3, [r3, #4]
 80188fe:	b29a      	uxth	r2, r3
 8018900:	693b      	ldr	r3, [r7, #16]
 8018902:	88db      	ldrh	r3, [r3, #6]
 8018904:	b29b      	uxth	r3, r3
 8018906:	429a      	cmp	r2, r3
 8018908:	d202      	bcs.n	8018910 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801890a:	f04f 33ff 	mov.w	r3, #4294967295
 801890e:	e0ab      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018912:	2b00      	cmp	r3, #0
 8018914:	d009      	beq.n	801892a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018918:	88db      	ldrh	r3, [r3, #6]
 801891a:	b29a      	uxth	r2, r3
 801891c:	693b      	ldr	r3, [r7, #16]
 801891e:	889b      	ldrh	r3, [r3, #4]
 8018920:	b29b      	uxth	r3, r3
 8018922:	429a      	cmp	r2, r3
 8018924:	d001      	beq.n	801892a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018926:	2300      	movs	r3, #0
 8018928:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801892a:	693b      	ldr	r3, [r7, #16]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018930:	693b      	ldr	r3, [r7, #16]
 8018932:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018936:	2b00      	cmp	r3, #0
 8018938:	d193      	bne.n	8018862 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801893a:	e000      	b.n	801893e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801893c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018940:	2b00      	cmp	r3, #0
 8018942:	d12d      	bne.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018946:	2b00      	cmp	r3, #0
 8018948:	d01c      	beq.n	8018984 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801894c:	88db      	ldrh	r3, [r3, #6]
 801894e:	b29a      	uxth	r2, r3
 8018950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018952:	889b      	ldrh	r3, [r3, #4]
 8018954:	b29b      	uxth	r3, r3
 8018956:	429a      	cmp	r2, r3
 8018958:	d906      	bls.n	8018968 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801895a:	4b45      	ldr	r3, [pc, #276]	; (8018a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801895c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018960:	4944      	ldr	r1, [pc, #272]	; (8018a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018962:	4845      	ldr	r0, [pc, #276]	; (8018a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018964:	f000 ff88 	bl	8019878 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801896a:	68ba      	ldr	r2, [r7, #8]
 801896c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018970:	88db      	ldrh	r3, [r3, #6]
 8018972:	b29a      	uxth	r2, r3
 8018974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018976:	889b      	ldrh	r3, [r3, #4]
 8018978:	b29b      	uxth	r3, r3
 801897a:	429a      	cmp	r2, r3
 801897c:	d010      	beq.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801897e:	2300      	movs	r3, #0
 8018980:	623b      	str	r3, [r7, #32]
 8018982:	e00d      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	685b      	ldr	r3, [r3, #4]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d006      	beq.n	801899a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801898c:	4b38      	ldr	r3, [pc, #224]	; (8018a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801898e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018992:	493a      	ldr	r1, [pc, #232]	; (8018a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018994:	4838      	ldr	r0, [pc, #224]	; (8018a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018996:	f000 ff6f 	bl	8019878 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	68ba      	ldr	r2, [r7, #8]
 801899e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d105      	bne.n	80189b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	7f9b      	ldrb	r3, [r3, #30]
 80189aa:	f003 0301 	and.w	r3, r3, #1
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d059      	beq.n	8018a66 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80189b2:	6a3b      	ldr	r3, [r7, #32]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d04f      	beq.n	8018a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	685b      	ldr	r3, [r3, #4]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d006      	beq.n	80189ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	685b      	ldr	r3, [r3, #4]
 80189c4:	685b      	ldr	r3, [r3, #4]
 80189c6:	889b      	ldrh	r3, [r3, #4]
 80189c8:	b29b      	uxth	r3, r3
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d002      	beq.n	80189d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80189ce:	2300      	movs	r3, #0
 80189d0:	623b      	str	r3, [r7, #32]
 80189d2:	e041      	b.n	8018a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80189d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80189d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80189de:	e012      	b.n	8018a06 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80189e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80189e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e8:	88db      	ldrh	r3, [r3, #6]
 80189ea:	b29a      	uxth	r2, r3
 80189ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189ee:	889b      	ldrh	r3, [r3, #4]
 80189f0:	b29b      	uxth	r3, r3
 80189f2:	429a      	cmp	r2, r3
 80189f4:	d002      	beq.n	80189fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80189f6:	2300      	movs	r3, #0
 80189f8:	623b      	str	r3, [r7, #32]
            break;
 80189fa:	e007      	b.n	8018a0c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80189fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d1e9      	bne.n	80189e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018a0c:	6a3b      	ldr	r3, [r7, #32]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d022      	beq.n	8018a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	685b      	ldr	r3, [r3, #4]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d106      	bne.n	8018a28 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018a1a:	4b15      	ldr	r3, [pc, #84]	; (8018a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a1c:	f240 12df 	movw	r2, #479	; 0x1df
 8018a20:	4917      	ldr	r1, [pc, #92]	; (8018a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018a22:	4815      	ldr	r0, [pc, #84]	; (8018a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a24:	f000 ff28 	bl	8019878 <iprintf>
          LWIP_ASSERT("sanity check",
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	685b      	ldr	r3, [r3, #4]
 8018a2c:	685b      	ldr	r3, [r3, #4]
 8018a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a30:	429a      	cmp	r2, r3
 8018a32:	d106      	bne.n	8018a42 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018a34:	4b0e      	ldr	r3, [pc, #56]	; (8018a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018a3a:	4911      	ldr	r1, [pc, #68]	; (8018a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018a3c:	480e      	ldr	r0, [pc, #56]	; (8018a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a3e:	f000 ff1b 	bl	8019878 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d006      	beq.n	8018a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018a4a:	4b09      	ldr	r3, [pc, #36]	; (8018a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a4c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018a50:	490c      	ldr	r1, [pc, #48]	; (8018a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018a52:	4809      	ldr	r0, [pc, #36]	; (8018a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a54:	f000 ff10 	bl	8019878 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018a58:	6a3b      	ldr	r3, [r7, #32]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	bf14      	ite	ne
 8018a5e:	2301      	movne	r3, #1
 8018a60:	2300      	moveq	r3, #0
 8018a62:	b2db      	uxtb	r3, r3
 8018a64:	e000      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018a66:	2300      	movs	r3, #0
}
 8018a68:	4618      	mov	r0, r3
 8018a6a:	3730      	adds	r7, #48	; 0x30
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd80      	pop	{r7, pc}
 8018a70:	0801d618 	.word	0x0801d618
 8018a74:	0801d6fc 	.word	0x0801d6fc
 8018a78:	0801d660 	.word	0x0801d660
 8018a7c:	0801d71c 	.word	0x0801d71c
 8018a80:	0801d754 	.word	0x0801d754
 8018a84:	0801d764 	.word	0x0801d764

08018a88 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b08e      	sub	sp, #56	; 0x38
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	685b      	ldr	r3, [r3, #4]
 8018a94:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	f003 030f 	and.w	r3, r3, #15
 8018a9e:	b2db      	uxtb	r3, r3
 8018aa0:	009b      	lsls	r3, r3, #2
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	2b14      	cmp	r3, #20
 8018aa6:	f040 8171 	bne.w	8018d8c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aac:	88db      	ldrh	r3, [r3, #6]
 8018aae:	b29b      	uxth	r3, r3
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7f6 f9fd 	bl	800eeb0 <lwip_htons>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018abc:	b29b      	uxth	r3, r3
 8018abe:	00db      	lsls	r3, r3, #3
 8018ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac4:	885b      	ldrh	r3, [r3, #2]
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7f6 f9f1 	bl	800eeb0 <lwip_htons>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	f003 030f 	and.w	r3, r3, #15
 8018ada:	b2db      	uxtb	r3, r3
 8018adc:	009b      	lsls	r3, r3, #2
 8018ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018aea:	429a      	cmp	r2, r3
 8018aec:	f0c0 8150 	bcc.w	8018d90 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018af8:	1ad3      	subs	r3, r2, r3
 8018afa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f7f7 fe57 	bl	80107b0 <pbuf_clen>
 8018b02:	4603      	mov	r3, r0
 8018b04:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018b06:	4b8c      	ldr	r3, [pc, #560]	; (8018d38 <ip4_reass+0x2b0>)
 8018b08:	881b      	ldrh	r3, [r3, #0]
 8018b0a:	461a      	mov	r2, r3
 8018b0c:	8c3b      	ldrh	r3, [r7, #32]
 8018b0e:	4413      	add	r3, r2
 8018b10:	2b0a      	cmp	r3, #10
 8018b12:	dd10      	ble.n	8018b36 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018b14:	8c3b      	ldrh	r3, [r7, #32]
 8018b16:	4619      	mov	r1, r3
 8018b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b1a:	f7ff fd81 	bl	8018620 <ip_reass_remove_oldest_datagram>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	f000 8137 	beq.w	8018d94 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018b26:	4b84      	ldr	r3, [pc, #528]	; (8018d38 <ip4_reass+0x2b0>)
 8018b28:	881b      	ldrh	r3, [r3, #0]
 8018b2a:	461a      	mov	r2, r3
 8018b2c:	8c3b      	ldrh	r3, [r7, #32]
 8018b2e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018b30:	2b0a      	cmp	r3, #10
 8018b32:	f300 812f 	bgt.w	8018d94 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018b36:	4b81      	ldr	r3, [pc, #516]	; (8018d3c <ip4_reass+0x2b4>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8018b3c:	e015      	b.n	8018b6a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b40:	695a      	ldr	r2, [r3, #20]
 8018b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b44:	68db      	ldr	r3, [r3, #12]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	d10c      	bne.n	8018b64 <ip4_reass+0xdc>
 8018b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b4c:	699a      	ldr	r2, [r3, #24]
 8018b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b50:	691b      	ldr	r3, [r3, #16]
 8018b52:	429a      	cmp	r2, r3
 8018b54:	d106      	bne.n	8018b64 <ip4_reass+0xdc>
 8018b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b58:	899a      	ldrh	r2, [r3, #12]
 8018b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b5c:	889b      	ldrh	r3, [r3, #4]
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	429a      	cmp	r2, r3
 8018b62:	d006      	beq.n	8018b72 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	633b      	str	r3, [r7, #48]	; 0x30
 8018b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d1e6      	bne.n	8018b3e <ip4_reass+0xb6>
 8018b70:	e000      	b.n	8018b74 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018b72:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d109      	bne.n	8018b8e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018b7a:	8c3b      	ldrh	r3, [r7, #32]
 8018b7c:	4619      	mov	r1, r3
 8018b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b80:	f7ff fdb0 	bl	80186e4 <ip_reass_enqueue_new_datagram>
 8018b84:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d11c      	bne.n	8018bc6 <ip4_reass+0x13e>
      goto nullreturn;
 8018b8c:	e105      	b.n	8018d9a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b90:	88db      	ldrh	r3, [r3, #6]
 8018b92:	b29b      	uxth	r3, r3
 8018b94:	4618      	mov	r0, r3
 8018b96:	f7f6 f98b 	bl	800eeb0 <lwip_htons>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d110      	bne.n	8018bc6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ba6:	89db      	ldrh	r3, [r3, #14]
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7f6 f981 	bl	800eeb0 <lwip_htons>
 8018bae:	4603      	mov	r3, r0
 8018bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d006      	beq.n	8018bc6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bba:	3308      	adds	r3, #8
 8018bbc:	2214      	movs	r2, #20
 8018bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f000 fd94 	bl	80196ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc8:	88db      	ldrh	r3, [r3, #6]
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	f003 0320 	and.w	r3, r3, #32
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	bf0c      	ite	eq
 8018bd4:	2301      	moveq	r3, #1
 8018bd6:	2300      	movne	r3, #0
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018bdc:	69fb      	ldr	r3, [r7, #28]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d00e      	beq.n	8018c00 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018be2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018be6:	4413      	add	r3, r2
 8018be8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018bea:	8b7a      	ldrh	r2, [r7, #26]
 8018bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	f0c0 80a0 	bcc.w	8018d34 <ip4_reass+0x2ac>
 8018bf4:	8b7b      	ldrh	r3, [r7, #26]
 8018bf6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	f200 809a 	bhi.w	8018d34 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018c00:	69fa      	ldr	r2, [r7, #28]
 8018c02:	6879      	ldr	r1, [r7, #4]
 8018c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c06:	f7ff fdd5 	bl	80187b4 <ip_reass_chain_frag_into_datagram_and_validate>
 8018c0a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c12:	f000 809b 	beq.w	8018d4c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018c16:	4b48      	ldr	r3, [pc, #288]	; (8018d38 <ip4_reass+0x2b0>)
 8018c18:	881a      	ldrh	r2, [r3, #0]
 8018c1a:	8c3b      	ldrh	r3, [r7, #32]
 8018c1c:	4413      	add	r3, r2
 8018c1e:	b29a      	uxth	r2, r3
 8018c20:	4b45      	ldr	r3, [pc, #276]	; (8018d38 <ip4_reass+0x2b0>)
 8018c22:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018c24:	69fb      	ldr	r3, [r7, #28]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d00d      	beq.n	8018c46 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018c2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c2e:	4413      	add	r3, r2
 8018c30:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c34:	8a7a      	ldrh	r2, [r7, #18]
 8018c36:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c3a:	7f9b      	ldrb	r3, [r3, #30]
 8018c3c:	f043 0301 	orr.w	r3, r3, #1
 8018c40:	b2da      	uxtb	r2, r3
 8018c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c44:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018c46:	697b      	ldr	r3, [r7, #20]
 8018c48:	2b01      	cmp	r3, #1
 8018c4a:	d171      	bne.n	8018d30 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c4e:	8b9b      	ldrh	r3, [r3, #28]
 8018c50:	3314      	adds	r3, #20
 8018c52:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	685b      	ldr	r3, [r3, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c60:	685b      	ldr	r3, [r3, #4]
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c68:	3308      	adds	r3, #8
 8018c6a:	2214      	movs	r2, #20
 8018c6c:	4619      	mov	r1, r3
 8018c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018c70:	f000 fd3d 	bl	80196ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018c74:	8a3b      	ldrh	r3, [r7, #16]
 8018c76:	4618      	mov	r0, r3
 8018c78:	f7f6 f91a 	bl	800eeb0 <lwip_htons>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	461a      	mov	r2, r3
 8018c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c82:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c86:	2200      	movs	r2, #0
 8018c88:	719a      	strb	r2, [r3, #6]
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c90:	2200      	movs	r2, #0
 8018c92:	729a      	strb	r2, [r3, #10]
 8018c94:	2200      	movs	r2, #0
 8018c96:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c9a:	685b      	ldr	r3, [r3, #4]
 8018c9c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018c9e:	e00d      	b.n	8018cbc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ca2:	685b      	ldr	r3, [r3, #4]
 8018ca4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018ca6:	2114      	movs	r1, #20
 8018ca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018caa:	f7f7 fc6d 	bl	8010588 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018cae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f7f7 fdbd 	bl	8010830 <pbuf_cat>
      r = iprh->next_pbuf;
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d1ee      	bne.n	8018ca0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018cc2:	4b1e      	ldr	r3, [pc, #120]	; (8018d3c <ip4_reass+0x2b4>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018cc8:	429a      	cmp	r2, r3
 8018cca:	d102      	bne.n	8018cd2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018ccc:	2300      	movs	r3, #0
 8018cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cd0:	e010      	b.n	8018cf4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018cd2:	4b1a      	ldr	r3, [pc, #104]	; (8018d3c <ip4_reass+0x2b4>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cd8:	e007      	b.n	8018cea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	d006      	beq.n	8018cf2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d1f4      	bne.n	8018cda <ip4_reass+0x252>
 8018cf0:	e000      	b.n	8018cf4 <ip4_reass+0x26c>
          break;
 8018cf2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018cf8:	f7ff fd2e 	bl	8018758 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018cfc:	6878      	ldr	r0, [r7, #4]
 8018cfe:	f7f7 fd57 	bl	80107b0 <pbuf_clen>
 8018d02:	4603      	mov	r3, r0
 8018d04:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018d06:	4b0c      	ldr	r3, [pc, #48]	; (8018d38 <ip4_reass+0x2b0>)
 8018d08:	881b      	ldrh	r3, [r3, #0]
 8018d0a:	8c3a      	ldrh	r2, [r7, #32]
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	d906      	bls.n	8018d1e <ip4_reass+0x296>
 8018d10:	4b0b      	ldr	r3, [pc, #44]	; (8018d40 <ip4_reass+0x2b8>)
 8018d12:	f240 229b 	movw	r2, #667	; 0x29b
 8018d16:	490b      	ldr	r1, [pc, #44]	; (8018d44 <ip4_reass+0x2bc>)
 8018d18:	480b      	ldr	r0, [pc, #44]	; (8018d48 <ip4_reass+0x2c0>)
 8018d1a:	f000 fdad 	bl	8019878 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018d1e:	4b06      	ldr	r3, [pc, #24]	; (8018d38 <ip4_reass+0x2b0>)
 8018d20:	881a      	ldrh	r2, [r3, #0]
 8018d22:	8c3b      	ldrh	r3, [r7, #32]
 8018d24:	1ad3      	subs	r3, r2, r3
 8018d26:	b29a      	uxth	r2, r3
 8018d28:	4b03      	ldr	r3, [pc, #12]	; (8018d38 <ip4_reass+0x2b0>)
 8018d2a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	e038      	b.n	8018da2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018d30:	2300      	movs	r3, #0
 8018d32:	e036      	b.n	8018da2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018d34:	bf00      	nop
 8018d36:	e00a      	b.n	8018d4e <ip4_reass+0x2c6>
 8018d38:	2000dbf0 	.word	0x2000dbf0
 8018d3c:	2000dbec 	.word	0x2000dbec
 8018d40:	0801d618 	.word	0x0801d618
 8018d44:	0801d788 	.word	0x0801d788
 8018d48:	0801d660 	.word	0x0801d660
    goto nullreturn_ipr;
 8018d4c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d106      	bne.n	8018d62 <ip4_reass+0x2da>
 8018d54:	4b15      	ldr	r3, [pc, #84]	; (8018dac <ip4_reass+0x324>)
 8018d56:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018d5a:	4915      	ldr	r1, [pc, #84]	; (8018db0 <ip4_reass+0x328>)
 8018d5c:	4815      	ldr	r0, [pc, #84]	; (8018db4 <ip4_reass+0x32c>)
 8018d5e:	f000 fd8b 	bl	8019878 <iprintf>
  if (ipr->p == NULL) {
 8018d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d116      	bne.n	8018d98 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018d6a:	4b13      	ldr	r3, [pc, #76]	; (8018db8 <ip4_reass+0x330>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d006      	beq.n	8018d82 <ip4_reass+0x2fa>
 8018d74:	4b0d      	ldr	r3, [pc, #52]	; (8018dac <ip4_reass+0x324>)
 8018d76:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018d7a:	4910      	ldr	r1, [pc, #64]	; (8018dbc <ip4_reass+0x334>)
 8018d7c:	480d      	ldr	r0, [pc, #52]	; (8018db4 <ip4_reass+0x32c>)
 8018d7e:	f000 fd7b 	bl	8019878 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018d82:	2100      	movs	r1, #0
 8018d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d86:	f7ff fce7 	bl	8018758 <ip_reass_dequeue_datagram>
 8018d8a:	e006      	b.n	8018d9a <ip4_reass+0x312>
    goto nullreturn;
 8018d8c:	bf00      	nop
 8018d8e:	e004      	b.n	8018d9a <ip4_reass+0x312>
    goto nullreturn;
 8018d90:	bf00      	nop
 8018d92:	e002      	b.n	8018d9a <ip4_reass+0x312>
      goto nullreturn;
 8018d94:	bf00      	nop
 8018d96:	e000      	b.n	8018d9a <ip4_reass+0x312>
  }

nullreturn:
 8018d98:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018d9a:	6878      	ldr	r0, [r7, #4]
 8018d9c:	f7f7 fc7a 	bl	8010694 <pbuf_free>
  return NULL;
 8018da0:	2300      	movs	r3, #0
}
 8018da2:	4618      	mov	r0, r3
 8018da4:	3738      	adds	r7, #56	; 0x38
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}
 8018daa:	bf00      	nop
 8018dac:	0801d618 	.word	0x0801d618
 8018db0:	0801d7a4 	.word	0x0801d7a4
 8018db4:	0801d660 	.word	0x0801d660
 8018db8:	2000dbec 	.word	0x2000dbec
 8018dbc:	0801d7b0 	.word	0x0801d7b0

08018dc0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018dc4:	2005      	movs	r0, #5
 8018dc6:	f7f6 fd4b 	bl	800f860 <memp_malloc>
 8018dca:	4603      	mov	r3, r0
}
 8018dcc:	4618      	mov	r0, r3
 8018dce:	bd80      	pop	{r7, pc}

08018dd0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d106      	bne.n	8018dec <ip_frag_free_pbuf_custom_ref+0x1c>
 8018dde:	4b07      	ldr	r3, [pc, #28]	; (8018dfc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018de0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018de4:	4906      	ldr	r1, [pc, #24]	; (8018e00 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018de6:	4807      	ldr	r0, [pc, #28]	; (8018e04 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018de8:	f000 fd46 	bl	8019878 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018dec:	6879      	ldr	r1, [r7, #4]
 8018dee:	2005      	movs	r0, #5
 8018df0:	f7f6 fdac 	bl	800f94c <memp_free>
}
 8018df4:	bf00      	nop
 8018df6:	3708      	adds	r7, #8
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	bd80      	pop	{r7, pc}
 8018dfc:	0801d618 	.word	0x0801d618
 8018e00:	0801d7d0 	.word	0x0801d7d0
 8018e04:	0801d660 	.word	0x0801d660

08018e08 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b084      	sub	sp, #16
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d106      	bne.n	8018e28 <ipfrag_free_pbuf_custom+0x20>
 8018e1a:	4b11      	ldr	r3, [pc, #68]	; (8018e60 <ipfrag_free_pbuf_custom+0x58>)
 8018e1c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018e20:	4910      	ldr	r1, [pc, #64]	; (8018e64 <ipfrag_free_pbuf_custom+0x5c>)
 8018e22:	4811      	ldr	r0, [pc, #68]	; (8018e68 <ipfrag_free_pbuf_custom+0x60>)
 8018e24:	f000 fd28 	bl	8019878 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018e28:	68fa      	ldr	r2, [r7, #12]
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d006      	beq.n	8018e3e <ipfrag_free_pbuf_custom+0x36>
 8018e30:	4b0b      	ldr	r3, [pc, #44]	; (8018e60 <ipfrag_free_pbuf_custom+0x58>)
 8018e32:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018e36:	490d      	ldr	r1, [pc, #52]	; (8018e6c <ipfrag_free_pbuf_custom+0x64>)
 8018e38:	480b      	ldr	r0, [pc, #44]	; (8018e68 <ipfrag_free_pbuf_custom+0x60>)
 8018e3a:	f000 fd1d 	bl	8019878 <iprintf>
  if (pcr->original != NULL) {
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	695b      	ldr	r3, [r3, #20]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d004      	beq.n	8018e50 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	695b      	ldr	r3, [r3, #20]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7f7 fc22 	bl	8010694 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018e50:	68f8      	ldr	r0, [r7, #12]
 8018e52:	f7ff ffbd 	bl	8018dd0 <ip_frag_free_pbuf_custom_ref>
}
 8018e56:	bf00      	nop
 8018e58:	3710      	adds	r7, #16
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}
 8018e5e:	bf00      	nop
 8018e60:	0801d618 	.word	0x0801d618
 8018e64:	0801d7dc 	.word	0x0801d7dc
 8018e68:	0801d660 	.word	0x0801d660
 8018e6c:	0801d7e8 	.word	0x0801d7e8

08018e70 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b094      	sub	sp, #80	; 0x50
 8018e74:	af02      	add	r7, sp, #8
 8018e76:	60f8      	str	r0, [r7, #12]
 8018e78:	60b9      	str	r1, [r7, #8]
 8018e7a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018e86:	3b14      	subs	r3, #20
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	da00      	bge.n	8018e8e <ip4_frag+0x1e>
 8018e8c:	3307      	adds	r3, #7
 8018e8e:	10db      	asrs	r3, r3, #3
 8018e90:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018e92:	2314      	movs	r3, #20
 8018e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	685b      	ldr	r3, [r3, #4]
 8018e9a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ea2:	781b      	ldrb	r3, [r3, #0]
 8018ea4:	f003 030f 	and.w	r3, r3, #15
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	009b      	lsls	r3, r3, #2
 8018eac:	b2db      	uxtb	r3, r3
 8018eae:	2b14      	cmp	r3, #20
 8018eb0:	d002      	beq.n	8018eb8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018eb2:	f06f 0305 	mvn.w	r3, #5
 8018eb6:	e110      	b.n	80190da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	895b      	ldrh	r3, [r3, #10]
 8018ebc:	2b13      	cmp	r3, #19
 8018ebe:	d809      	bhi.n	8018ed4 <ip4_frag+0x64>
 8018ec0:	4b88      	ldr	r3, [pc, #544]	; (80190e4 <ip4_frag+0x274>)
 8018ec2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018ec6:	4988      	ldr	r1, [pc, #544]	; (80190e8 <ip4_frag+0x278>)
 8018ec8:	4888      	ldr	r0, [pc, #544]	; (80190ec <ip4_frag+0x27c>)
 8018eca:	f000 fcd5 	bl	8019878 <iprintf>
 8018ece:	f06f 0305 	mvn.w	r3, #5
 8018ed2:	e102      	b.n	80190da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ed6:	88db      	ldrh	r3, [r3, #6]
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	4618      	mov	r0, r3
 8018edc:	f7f5 ffe8 	bl	800eeb0 <lwip_htons>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018ee4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ee6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018eea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018eee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	891b      	ldrh	r3, [r3, #8]
 8018efa:	3b14      	subs	r3, #20
 8018efc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018f00:	e0e1      	b.n	80190c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018f02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018f04:	00db      	lsls	r3, r3, #3
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018f0c:	4293      	cmp	r3, r2
 8018f0e:	bf28      	it	cs
 8018f10:	4613      	movcs	r3, r2
 8018f12:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018f14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f18:	2114      	movs	r1, #20
 8018f1a:	200e      	movs	r0, #14
 8018f1c:	f7f7 f8d6 	bl	80100cc <pbuf_alloc>
 8018f20:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 80d5 	beq.w	80190d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f2c:	895b      	ldrh	r3, [r3, #10]
 8018f2e:	2b13      	cmp	r3, #19
 8018f30:	d806      	bhi.n	8018f40 <ip4_frag+0xd0>
 8018f32:	4b6c      	ldr	r3, [pc, #432]	; (80190e4 <ip4_frag+0x274>)
 8018f34:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018f38:	496d      	ldr	r1, [pc, #436]	; (80190f0 <ip4_frag+0x280>)
 8018f3a:	486c      	ldr	r0, [pc, #432]	; (80190ec <ip4_frag+0x27c>)
 8018f3c:	f000 fc9c 	bl	8019878 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f42:	685b      	ldr	r3, [r3, #4]
 8018f44:	2214      	movs	r2, #20
 8018f46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f000 fbd0 	bl	80196ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f50:	685b      	ldr	r3, [r3, #4]
 8018f52:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018f54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018f5a:	e064      	b.n	8019026 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	895a      	ldrh	r2, [r3, #10]
 8018f60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018f62:	1ad3      	subs	r3, r2, r3
 8018f64:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	895b      	ldrh	r3, [r3, #10]
 8018f6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018f6c:	429a      	cmp	r2, r3
 8018f6e:	d906      	bls.n	8018f7e <ip4_frag+0x10e>
 8018f70:	4b5c      	ldr	r3, [pc, #368]	; (80190e4 <ip4_frag+0x274>)
 8018f72:	f240 322d 	movw	r2, #813	; 0x32d
 8018f76:	495f      	ldr	r1, [pc, #380]	; (80190f4 <ip4_frag+0x284>)
 8018f78:	485c      	ldr	r0, [pc, #368]	; (80190ec <ip4_frag+0x27c>)
 8018f7a:	f000 fc7d 	bl	8019878 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018f7e:	8bfa      	ldrh	r2, [r7, #30]
 8018f80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018f84:	4293      	cmp	r3, r2
 8018f86:	bf28      	it	cs
 8018f88:	4613      	movcs	r3, r2
 8018f8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018f8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d105      	bne.n	8018fa2 <ip4_frag+0x132>
        poff = 0;
 8018f96:	2300      	movs	r3, #0
 8018f98:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	60fb      	str	r3, [r7, #12]
        continue;
 8018fa0:	e041      	b.n	8019026 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018fa2:	f7ff ff0d 	bl	8018dc0 <ip_frag_alloc_pbuf_custom_ref>
 8018fa6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018fa8:	69bb      	ldr	r3, [r7, #24]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d103      	bne.n	8018fb6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018fb0:	f7f7 fb70 	bl	8010694 <pbuf_free>
        goto memerr;
 8018fb4:	e08f      	b.n	80190d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018fb6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018fbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018fbe:	4413      	add	r3, r2
 8018fc0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018fc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018fc8:	9201      	str	r2, [sp, #4]
 8018fca:	9300      	str	r3, [sp, #0]
 8018fcc:	4603      	mov	r3, r0
 8018fce:	2241      	movs	r2, #65	; 0x41
 8018fd0:	2000      	movs	r0, #0
 8018fd2:	f7f7 f9a5 	bl	8010320 <pbuf_alloced_custom>
 8018fd6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d106      	bne.n	8018fec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018fde:	69b8      	ldr	r0, [r7, #24]
 8018fe0:	f7ff fef6 	bl	8018dd0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018fe6:	f7f7 fb55 	bl	8010694 <pbuf_free>
        goto memerr;
 8018fea:	e074      	b.n	80190d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018fec:	68f8      	ldr	r0, [r7, #12]
 8018fee:	f7f7 fbf7 	bl	80107e0 <pbuf_ref>
      pcr->original = p;
 8018ff2:	69bb      	ldr	r3, [r7, #24]
 8018ff4:	68fa      	ldr	r2, [r7, #12]
 8018ff6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018ff8:	69bb      	ldr	r3, [r7, #24]
 8018ffa:	4a3f      	ldr	r2, [pc, #252]	; (80190f8 <ip4_frag+0x288>)
 8018ffc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018ffe:	6979      	ldr	r1, [r7, #20]
 8019000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019002:	f7f7 fc15 	bl	8010830 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019006:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801900a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801900e:	1ad3      	subs	r3, r2, r3
 8019010:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019014:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019018:	2b00      	cmp	r3, #0
 801901a:	d004      	beq.n	8019026 <ip4_frag+0x1b6>
        poff = 0;
 801901c:	2300      	movs	r3, #0
 801901e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019026:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801902a:	2b00      	cmp	r3, #0
 801902c:	d196      	bne.n	8018f5c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801902e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019030:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019034:	4413      	add	r3, r2
 8019036:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019038:	68bb      	ldr	r3, [r7, #8]
 801903a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801903c:	f1a3 0213 	sub.w	r2, r3, #19
 8019040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019044:	429a      	cmp	r2, r3
 8019046:	bfcc      	ite	gt
 8019048:	2301      	movgt	r3, #1
 801904a:	2300      	movle	r3, #0
 801904c:	b2db      	uxtb	r3, r3
 801904e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019050:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019058:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801905a:	6a3b      	ldr	r3, [r7, #32]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d002      	beq.n	8019066 <ip4_frag+0x1f6>
 8019060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019062:	2b00      	cmp	r3, #0
 8019064:	d003      	beq.n	801906e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801906c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801906e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019070:	4618      	mov	r0, r3
 8019072:	f7f5 ff1d 	bl	800eeb0 <lwip_htons>
 8019076:	4603      	mov	r3, r0
 8019078:	461a      	mov	r2, r3
 801907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801907c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801907e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019080:	3314      	adds	r3, #20
 8019082:	b29b      	uxth	r3, r3
 8019084:	4618      	mov	r0, r3
 8019086:	f7f5 ff13 	bl	800eeb0 <lwip_htons>
 801908a:	4603      	mov	r3, r0
 801908c:	461a      	mov	r2, r3
 801908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019090:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019094:	2200      	movs	r2, #0
 8019096:	729a      	strb	r2, [r3, #10]
 8019098:	2200      	movs	r2, #0
 801909a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801909c:	68bb      	ldr	r3, [r7, #8]
 801909e:	695b      	ldr	r3, [r3, #20]
 80190a0:	687a      	ldr	r2, [r7, #4]
 80190a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80190a4:	68b8      	ldr	r0, [r7, #8]
 80190a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80190a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80190aa:	f7f7 faf3 	bl	8010694 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80190ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80190b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80190b4:	1ad3      	subs	r3, r2, r3
 80190b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80190ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80190be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80190c0:	4413      	add	r3, r2
 80190c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80190c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	f47f af19 	bne.w	8018f02 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80190d0:	2300      	movs	r3, #0
 80190d2:	e002      	b.n	80190da <ip4_frag+0x26a>
      goto memerr;
 80190d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80190d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80190da:	4618      	mov	r0, r3
 80190dc:	3748      	adds	r7, #72	; 0x48
 80190de:	46bd      	mov	sp, r7
 80190e0:	bd80      	pop	{r7, pc}
 80190e2:	bf00      	nop
 80190e4:	0801d618 	.word	0x0801d618
 80190e8:	0801d7f4 	.word	0x0801d7f4
 80190ec:	0801d660 	.word	0x0801d660
 80190f0:	0801d810 	.word	0x0801d810
 80190f4:	0801d830 	.word	0x0801d830
 80190f8:	08018e09 	.word	0x08018e09

080190fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b086      	sub	sp, #24
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
 8019104:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019106:	230e      	movs	r3, #14
 8019108:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	895b      	ldrh	r3, [r3, #10]
 801910e:	2b0e      	cmp	r3, #14
 8019110:	d96e      	bls.n	80191f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	7bdb      	ldrb	r3, [r3, #15]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d106      	bne.n	8019128 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019120:	3301      	adds	r3, #1
 8019122:	b2da      	uxtb	r2, r3
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	685b      	ldr	r3, [r3, #4]
 801912c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	7b1a      	ldrb	r2, [r3, #12]
 8019132:	7b5b      	ldrb	r3, [r3, #13]
 8019134:	021b      	lsls	r3, r3, #8
 8019136:	4313      	orrs	r3, r2
 8019138:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	781b      	ldrb	r3, [r3, #0]
 801913e:	f003 0301 	and.w	r3, r3, #1
 8019142:	2b00      	cmp	r3, #0
 8019144:	d023      	beq.n	801918e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019146:	693b      	ldr	r3, [r7, #16]
 8019148:	781b      	ldrb	r3, [r3, #0]
 801914a:	2b01      	cmp	r3, #1
 801914c:	d10f      	bne.n	801916e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801914e:	693b      	ldr	r3, [r7, #16]
 8019150:	785b      	ldrb	r3, [r3, #1]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d11b      	bne.n	801918e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019156:	693b      	ldr	r3, [r7, #16]
 8019158:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801915a:	2b5e      	cmp	r3, #94	; 0x5e
 801915c:	d117      	bne.n	801918e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	7b5b      	ldrb	r3, [r3, #13]
 8019162:	f043 0310 	orr.w	r3, r3, #16
 8019166:	b2da      	uxtb	r2, r3
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	735a      	strb	r2, [r3, #13]
 801916c:	e00f      	b.n	801918e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	2206      	movs	r2, #6
 8019172:	4928      	ldr	r1, [pc, #160]	; (8019214 <ethernet_input+0x118>)
 8019174:	4618      	mov	r0, r3
 8019176:	f000 faaa 	bl	80196ce <memcmp>
 801917a:	4603      	mov	r3, r0
 801917c:	2b00      	cmp	r3, #0
 801917e:	d106      	bne.n	801918e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	7b5b      	ldrb	r3, [r3, #13]
 8019184:	f043 0308 	orr.w	r3, r3, #8
 8019188:	b2da      	uxtb	r2, r3
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801918e:	89fb      	ldrh	r3, [r7, #14]
 8019190:	2b08      	cmp	r3, #8
 8019192:	d003      	beq.n	801919c <ethernet_input+0xa0>
 8019194:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019198:	d014      	beq.n	80191c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801919a:	e032      	b.n	8019202 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80191a2:	f003 0308 	and.w	r3, r3, #8
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d024      	beq.n	80191f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80191aa:	8afb      	ldrh	r3, [r7, #22]
 80191ac:	4619      	mov	r1, r3
 80191ae:	6878      	ldr	r0, [r7, #4]
 80191b0:	f7f7 f9ea 	bl	8010588 <pbuf_remove_header>
 80191b4:	4603      	mov	r3, r0
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d11e      	bne.n	80191f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80191ba:	6839      	ldr	r1, [r7, #0]
 80191bc:	6878      	ldr	r0, [r7, #4]
 80191be:	f7fe ff21 	bl	8018004 <ip4_input>
      break;
 80191c2:	e013      	b.n	80191ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80191ca:	f003 0308 	and.w	r3, r3, #8
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d014      	beq.n	80191fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80191d2:	8afb      	ldrh	r3, [r7, #22]
 80191d4:	4619      	mov	r1, r3
 80191d6:	6878      	ldr	r0, [r7, #4]
 80191d8:	f7f7 f9d6 	bl	8010588 <pbuf_remove_header>
 80191dc:	4603      	mov	r3, r0
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d10e      	bne.n	8019200 <ethernet_input+0x104>
        etharp_input(p, netif);
 80191e2:	6839      	ldr	r1, [r7, #0]
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f7fe f8c1 	bl	801736c <etharp_input>
      break;
 80191ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80191ec:	2300      	movs	r3, #0
 80191ee:	e00c      	b.n	801920a <ethernet_input+0x10e>
    goto free_and_return;
 80191f0:	bf00      	nop
 80191f2:	e006      	b.n	8019202 <ethernet_input+0x106>
        goto free_and_return;
 80191f4:	bf00      	nop
 80191f6:	e004      	b.n	8019202 <ethernet_input+0x106>
        goto free_and_return;
 80191f8:	bf00      	nop
 80191fa:	e002      	b.n	8019202 <ethernet_input+0x106>
        goto free_and_return;
 80191fc:	bf00      	nop
 80191fe:	e000      	b.n	8019202 <ethernet_input+0x106>
        goto free_and_return;
 8019200:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019202:	6878      	ldr	r0, [r7, #4]
 8019204:	f7f7 fa46 	bl	8010694 <pbuf_free>
  return ERR_OK;
 8019208:	2300      	movs	r3, #0
}
 801920a:	4618      	mov	r0, r3
 801920c:	3718      	adds	r7, #24
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	0801daac 	.word	0x0801daac

08019218 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019218:	b580      	push	{r7, lr}
 801921a:	b086      	sub	sp, #24
 801921c:	af00      	add	r7, sp, #0
 801921e:	60f8      	str	r0, [r7, #12]
 8019220:	60b9      	str	r1, [r7, #8]
 8019222:	607a      	str	r2, [r7, #4]
 8019224:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019226:	8c3b      	ldrh	r3, [r7, #32]
 8019228:	4618      	mov	r0, r3
 801922a:	f7f5 fe41 	bl	800eeb0 <lwip_htons>
 801922e:	4603      	mov	r3, r0
 8019230:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019232:	210e      	movs	r1, #14
 8019234:	68b8      	ldr	r0, [r7, #8]
 8019236:	f7f7 f997 	bl	8010568 <pbuf_add_header>
 801923a:	4603      	mov	r3, r0
 801923c:	2b00      	cmp	r3, #0
 801923e:	d125      	bne.n	801928c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019240:	68bb      	ldr	r3, [r7, #8]
 8019242:	685b      	ldr	r3, [r3, #4]
 8019244:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019246:	693b      	ldr	r3, [r7, #16]
 8019248:	8afa      	ldrh	r2, [r7, #22]
 801924a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801924c:	693b      	ldr	r3, [r7, #16]
 801924e:	2206      	movs	r2, #6
 8019250:	6839      	ldr	r1, [r7, #0]
 8019252:	4618      	mov	r0, r3
 8019254:	f000 fa4b 	bl	80196ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019258:	693b      	ldr	r3, [r7, #16]
 801925a:	3306      	adds	r3, #6
 801925c:	2206      	movs	r2, #6
 801925e:	6879      	ldr	r1, [r7, #4]
 8019260:	4618      	mov	r0, r3
 8019262:	f000 fa44 	bl	80196ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801926c:	2b06      	cmp	r3, #6
 801926e:	d006      	beq.n	801927e <ethernet_output+0x66>
 8019270:	4b0a      	ldr	r3, [pc, #40]	; (801929c <ethernet_output+0x84>)
 8019272:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019276:	490a      	ldr	r1, [pc, #40]	; (80192a0 <ethernet_output+0x88>)
 8019278:	480a      	ldr	r0, [pc, #40]	; (80192a4 <ethernet_output+0x8c>)
 801927a:	f000 fafd 	bl	8019878 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	699b      	ldr	r3, [r3, #24]
 8019282:	68b9      	ldr	r1, [r7, #8]
 8019284:	68f8      	ldr	r0, [r7, #12]
 8019286:	4798      	blx	r3
 8019288:	4603      	mov	r3, r0
 801928a:	e002      	b.n	8019292 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801928c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801928e:	f06f 0301 	mvn.w	r3, #1
}
 8019292:	4618      	mov	r0, r3
 8019294:	3718      	adds	r7, #24
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}
 801929a:	bf00      	nop
 801929c:	0801d840 	.word	0x0801d840
 80192a0:	0801d878 	.word	0x0801d878
 80192a4:	0801d8ac 	.word	0x0801d8ac

080192a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b082      	sub	sp, #8
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
 80192b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	2200      	movs	r2, #0
 80192b6:	2104      	movs	r1, #4
 80192b8:	4618      	mov	r0, r3
 80192ba:	f7f2 f9ad 	bl	800b618 <osMessageQueueNew>
 80192be:	4602      	mov	r2, r0
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d102      	bne.n	80192d2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80192cc:	f04f 33ff 	mov.w	r3, #4294967295
 80192d0:	e000      	b.n	80192d4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80192d2:	2300      	movs	r3, #0
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3708      	adds	r7, #8
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}

080192dc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
 80192e4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	6818      	ldr	r0, [r3, #0]
 80192ea:	4639      	mov	r1, r7
 80192ec:	2300      	movs	r3, #0
 80192ee:	2200      	movs	r2, #0
 80192f0:	f7f2 fa06 	bl	800b700 <osMessageQueuePut>
 80192f4:	4603      	mov	r3, r0
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d102      	bne.n	8019300 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80192fa:	2300      	movs	r3, #0
 80192fc:	73fb      	strb	r3, [r7, #15]
 80192fe:	e001      	b.n	8019304 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019300:	23ff      	movs	r3, #255	; 0xff
 8019302:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019308:	4618      	mov	r0, r3
 801930a:	3710      	adds	r7, #16
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}

08019310 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b086      	sub	sp, #24
 8019314:	af00      	add	r7, sp, #0
 8019316:	60f8      	str	r0, [r7, #12]
 8019318:	60b9      	str	r1, [r7, #8]
 801931a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801931c:	f7f1 fe8c 	bl	800b038 <osKernelGetTickCount>
 8019320:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d013      	beq.n	8019350 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	6818      	ldr	r0, [r3, #0]
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	2200      	movs	r2, #0
 8019330:	68b9      	ldr	r1, [r7, #8]
 8019332:	f7f2 fa45 	bl	800b7c0 <osMessageQueueGet>
 8019336:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019338:	693b      	ldr	r3, [r7, #16]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d105      	bne.n	801934a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801933e:	f7f1 fe7b 	bl	800b038 <osKernelGetTickCount>
 8019342:	4602      	mov	r2, r0
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	1ad3      	subs	r3, r2, r3
 8019348:	e00f      	b.n	801936a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801934a:	f04f 33ff 	mov.w	r3, #4294967295
 801934e:	e00c      	b.n	801936a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	6818      	ldr	r0, [r3, #0]
 8019354:	f04f 33ff 	mov.w	r3, #4294967295
 8019358:	2200      	movs	r2, #0
 801935a:	68b9      	ldr	r1, [r7, #8]
 801935c:	f7f2 fa30 	bl	800b7c0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019360:	f7f1 fe6a 	bl	800b038 <osKernelGetTickCount>
 8019364:	4602      	mov	r2, r0
 8019366:	697b      	ldr	r3, [r7, #20]
 8019368:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801936a:	4618      	mov	r0, r3
 801936c:	3718      	adds	r7, #24
 801936e:	46bd      	mov	sp, r7
 8019370:	bd80      	pop	{r7, pc}

08019372 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019372:	b480      	push	{r7}
 8019374:	b083      	sub	sp, #12
 8019376:	af00      	add	r7, sp, #0
 8019378:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d101      	bne.n	8019386 <sys_mbox_valid+0x14>
    return 0;
 8019382:	2300      	movs	r3, #0
 8019384:	e000      	b.n	8019388 <sys_mbox_valid+0x16>
  else
    return 1;
 8019386:	2301      	movs	r3, #1
}
 8019388:	4618      	mov	r0, r3
 801938a:	370c      	adds	r7, #12
 801938c:	46bd      	mov	sp, r7
 801938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019392:	4770      	bx	lr

08019394 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019398:	2000      	movs	r0, #0
 801939a:	f7f1 ff0f 	bl	800b1bc <osMutexNew>
 801939e:	4603      	mov	r3, r0
 80193a0:	4a01      	ldr	r2, [pc, #4]	; (80193a8 <sys_init+0x14>)
 80193a2:	6013      	str	r3, [r2, #0]
#endif
}
 80193a4:	bf00      	nop
 80193a6:	bd80      	pop	{r7, pc}
 80193a8:	2000dbf4 	.word	0x2000dbf4

080193ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b082      	sub	sp, #8
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80193b4:	2000      	movs	r0, #0
 80193b6:	f7f1 ff01 	bl	800b1bc <osMutexNew>
 80193ba:	4602      	mov	r2, r0
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d102      	bne.n	80193ce <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80193c8:	f04f 33ff 	mov.w	r3, #4294967295
 80193cc:	e000      	b.n	80193d0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80193ce:	2300      	movs	r3, #0
}
 80193d0:	4618      	mov	r0, r3
 80193d2:	3708      	adds	r7, #8
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}

080193d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	f04f 31ff 	mov.w	r1, #4294967295
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7f1 ff6d 	bl	800b2c8 <osMutexAcquire>
#endif
}
 80193ee:	bf00      	nop
 80193f0:	3708      	adds	r7, #8
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}

080193f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80193f6:	b580      	push	{r7, lr}
 80193f8:	b082      	sub	sp, #8
 80193fa:	af00      	add	r7, sp, #0
 80193fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	4618      	mov	r0, r3
 8019404:	f7f1 ffab 	bl	800b35e <osMutexRelease>
}
 8019408:	bf00      	nop
 801940a:	3708      	adds	r7, #8
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}

08019410 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b08e      	sub	sp, #56	; 0x38
 8019414:	af00      	add	r7, sp, #0
 8019416:	60f8      	str	r0, [r7, #12]
 8019418:	60b9      	str	r1, [r7, #8]
 801941a:	607a      	str	r2, [r7, #4]
 801941c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801941e:	f107 0314 	add.w	r3, r7, #20
 8019422:	2224      	movs	r2, #36	; 0x24
 8019424:	2100      	movs	r1, #0
 8019426:	4618      	mov	r0, r3
 8019428:	f000 f989 	bl	801973e <memset>
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	617b      	str	r3, [r7, #20]
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	62bb      	str	r3, [r7, #40]	; 0x28
 8019434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019436:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019438:	f107 0314 	add.w	r3, r7, #20
 801943c:	461a      	mov	r2, r3
 801943e:	6879      	ldr	r1, [r7, #4]
 8019440:	68b8      	ldr	r0, [r7, #8]
 8019442:	f7f1 fe0e 	bl	800b062 <osThreadNew>
 8019446:	4603      	mov	r3, r0
#endif
}
 8019448:	4618      	mov	r0, r3
 801944a:	3738      	adds	r7, #56	; 0x38
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}

08019450 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019454:	4b04      	ldr	r3, [pc, #16]	; (8019468 <sys_arch_protect+0x18>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	f04f 31ff 	mov.w	r1, #4294967295
 801945c:	4618      	mov	r0, r3
 801945e:	f7f1 ff33 	bl	800b2c8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019462:	2301      	movs	r3, #1
}
 8019464:	4618      	mov	r0, r3
 8019466:	bd80      	pop	{r7, pc}
 8019468:	2000dbf4 	.word	0x2000dbf4

0801946c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b082      	sub	sp, #8
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019474:	4b04      	ldr	r3, [pc, #16]	; (8019488 <sys_arch_unprotect+0x1c>)
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	4618      	mov	r0, r3
 801947a:	f7f1 ff70 	bl	800b35e <osMutexRelease>
}
 801947e:	bf00      	nop
 8019480:	3708      	adds	r7, #8
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
 8019486:	bf00      	nop
 8019488:	2000dbf4 	.word	0x2000dbf4

0801948c <atoi>:
 801948c:	220a      	movs	r2, #10
 801948e:	2100      	movs	r1, #0
 8019490:	f000 bc44 	b.w	8019d1c <strtol>

08019494 <std>:
 8019494:	2300      	movs	r3, #0
 8019496:	b510      	push	{r4, lr}
 8019498:	4604      	mov	r4, r0
 801949a:	e9c0 3300 	strd	r3, r3, [r0]
 801949e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80194a2:	6083      	str	r3, [r0, #8]
 80194a4:	8181      	strh	r1, [r0, #12]
 80194a6:	6643      	str	r3, [r0, #100]	; 0x64
 80194a8:	81c2      	strh	r2, [r0, #14]
 80194aa:	6183      	str	r3, [r0, #24]
 80194ac:	4619      	mov	r1, r3
 80194ae:	2208      	movs	r2, #8
 80194b0:	305c      	adds	r0, #92	; 0x5c
 80194b2:	f000 f944 	bl	801973e <memset>
 80194b6:	4b05      	ldr	r3, [pc, #20]	; (80194cc <std+0x38>)
 80194b8:	6263      	str	r3, [r4, #36]	; 0x24
 80194ba:	4b05      	ldr	r3, [pc, #20]	; (80194d0 <std+0x3c>)
 80194bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80194be:	4b05      	ldr	r3, [pc, #20]	; (80194d4 <std+0x40>)
 80194c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80194c2:	4b05      	ldr	r3, [pc, #20]	; (80194d8 <std+0x44>)
 80194c4:	6224      	str	r4, [r4, #32]
 80194c6:	6323      	str	r3, [r4, #48]	; 0x30
 80194c8:	bd10      	pop	{r4, pc}
 80194ca:	bf00      	nop
 80194cc:	08019b45 	.word	0x08019b45
 80194d0:	08019b67 	.word	0x08019b67
 80194d4:	08019b9f 	.word	0x08019b9f
 80194d8:	08019bc3 	.word	0x08019bc3

080194dc <_cleanup_r>:
 80194dc:	4901      	ldr	r1, [pc, #4]	; (80194e4 <_cleanup_r+0x8>)
 80194de:	f000 b8af 	b.w	8019640 <_fwalk_reent>
 80194e2:	bf00      	nop
 80194e4:	0801a049 	.word	0x0801a049

080194e8 <__sfmoreglue>:
 80194e8:	b570      	push	{r4, r5, r6, lr}
 80194ea:	2268      	movs	r2, #104	; 0x68
 80194ec:	1e4d      	subs	r5, r1, #1
 80194ee:	4355      	muls	r5, r2
 80194f0:	460e      	mov	r6, r1
 80194f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80194f6:	f000 f94b 	bl	8019790 <_malloc_r>
 80194fa:	4604      	mov	r4, r0
 80194fc:	b140      	cbz	r0, 8019510 <__sfmoreglue+0x28>
 80194fe:	2100      	movs	r1, #0
 8019500:	e9c0 1600 	strd	r1, r6, [r0]
 8019504:	300c      	adds	r0, #12
 8019506:	60a0      	str	r0, [r4, #8]
 8019508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801950c:	f000 f917 	bl	801973e <memset>
 8019510:	4620      	mov	r0, r4
 8019512:	bd70      	pop	{r4, r5, r6, pc}

08019514 <__sfp_lock_acquire>:
 8019514:	4801      	ldr	r0, [pc, #4]	; (801951c <__sfp_lock_acquire+0x8>)
 8019516:	f000 b8d8 	b.w	80196ca <__retarget_lock_acquire_recursive>
 801951a:	bf00      	nop
 801951c:	2000dbf9 	.word	0x2000dbf9

08019520 <__sfp_lock_release>:
 8019520:	4801      	ldr	r0, [pc, #4]	; (8019528 <__sfp_lock_release+0x8>)
 8019522:	f000 b8d3 	b.w	80196cc <__retarget_lock_release_recursive>
 8019526:	bf00      	nop
 8019528:	2000dbf9 	.word	0x2000dbf9

0801952c <__sinit_lock_acquire>:
 801952c:	4801      	ldr	r0, [pc, #4]	; (8019534 <__sinit_lock_acquire+0x8>)
 801952e:	f000 b8cc 	b.w	80196ca <__retarget_lock_acquire_recursive>
 8019532:	bf00      	nop
 8019534:	2000dbfa 	.word	0x2000dbfa

08019538 <__sinit_lock_release>:
 8019538:	4801      	ldr	r0, [pc, #4]	; (8019540 <__sinit_lock_release+0x8>)
 801953a:	f000 b8c7 	b.w	80196cc <__retarget_lock_release_recursive>
 801953e:	bf00      	nop
 8019540:	2000dbfa 	.word	0x2000dbfa

08019544 <__sinit>:
 8019544:	b510      	push	{r4, lr}
 8019546:	4604      	mov	r4, r0
 8019548:	f7ff fff0 	bl	801952c <__sinit_lock_acquire>
 801954c:	69a3      	ldr	r3, [r4, #24]
 801954e:	b11b      	cbz	r3, 8019558 <__sinit+0x14>
 8019550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019554:	f7ff bff0 	b.w	8019538 <__sinit_lock_release>
 8019558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801955c:	6523      	str	r3, [r4, #80]	; 0x50
 801955e:	4b13      	ldr	r3, [pc, #76]	; (80195ac <__sinit+0x68>)
 8019560:	4a13      	ldr	r2, [pc, #76]	; (80195b0 <__sinit+0x6c>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	62a2      	str	r2, [r4, #40]	; 0x28
 8019566:	42a3      	cmp	r3, r4
 8019568:	bf04      	itt	eq
 801956a:	2301      	moveq	r3, #1
 801956c:	61a3      	streq	r3, [r4, #24]
 801956e:	4620      	mov	r0, r4
 8019570:	f000 f820 	bl	80195b4 <__sfp>
 8019574:	6060      	str	r0, [r4, #4]
 8019576:	4620      	mov	r0, r4
 8019578:	f000 f81c 	bl	80195b4 <__sfp>
 801957c:	60a0      	str	r0, [r4, #8]
 801957e:	4620      	mov	r0, r4
 8019580:	f000 f818 	bl	80195b4 <__sfp>
 8019584:	2200      	movs	r2, #0
 8019586:	60e0      	str	r0, [r4, #12]
 8019588:	2104      	movs	r1, #4
 801958a:	6860      	ldr	r0, [r4, #4]
 801958c:	f7ff ff82 	bl	8019494 <std>
 8019590:	68a0      	ldr	r0, [r4, #8]
 8019592:	2201      	movs	r2, #1
 8019594:	2109      	movs	r1, #9
 8019596:	f7ff ff7d 	bl	8019494 <std>
 801959a:	68e0      	ldr	r0, [r4, #12]
 801959c:	2202      	movs	r2, #2
 801959e:	2112      	movs	r1, #18
 80195a0:	f7ff ff78 	bl	8019494 <std>
 80195a4:	2301      	movs	r3, #1
 80195a6:	61a3      	str	r3, [r4, #24]
 80195a8:	e7d2      	b.n	8019550 <__sinit+0xc>
 80195aa:	bf00      	nop
 80195ac:	0801dc1c 	.word	0x0801dc1c
 80195b0:	080194dd 	.word	0x080194dd

080195b4 <__sfp>:
 80195b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195b6:	4607      	mov	r7, r0
 80195b8:	f7ff ffac 	bl	8019514 <__sfp_lock_acquire>
 80195bc:	4b1e      	ldr	r3, [pc, #120]	; (8019638 <__sfp+0x84>)
 80195be:	681e      	ldr	r6, [r3, #0]
 80195c0:	69b3      	ldr	r3, [r6, #24]
 80195c2:	b913      	cbnz	r3, 80195ca <__sfp+0x16>
 80195c4:	4630      	mov	r0, r6
 80195c6:	f7ff ffbd 	bl	8019544 <__sinit>
 80195ca:	3648      	adds	r6, #72	; 0x48
 80195cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80195d0:	3b01      	subs	r3, #1
 80195d2:	d503      	bpl.n	80195dc <__sfp+0x28>
 80195d4:	6833      	ldr	r3, [r6, #0]
 80195d6:	b30b      	cbz	r3, 801961c <__sfp+0x68>
 80195d8:	6836      	ldr	r6, [r6, #0]
 80195da:	e7f7      	b.n	80195cc <__sfp+0x18>
 80195dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80195e0:	b9d5      	cbnz	r5, 8019618 <__sfp+0x64>
 80195e2:	4b16      	ldr	r3, [pc, #88]	; (801963c <__sfp+0x88>)
 80195e4:	60e3      	str	r3, [r4, #12]
 80195e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80195ea:	6665      	str	r5, [r4, #100]	; 0x64
 80195ec:	f000 f86c 	bl	80196c8 <__retarget_lock_init_recursive>
 80195f0:	f7ff ff96 	bl	8019520 <__sfp_lock_release>
 80195f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80195f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80195fc:	6025      	str	r5, [r4, #0]
 80195fe:	61a5      	str	r5, [r4, #24]
 8019600:	2208      	movs	r2, #8
 8019602:	4629      	mov	r1, r5
 8019604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019608:	f000 f899 	bl	801973e <memset>
 801960c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019614:	4620      	mov	r0, r4
 8019616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019618:	3468      	adds	r4, #104	; 0x68
 801961a:	e7d9      	b.n	80195d0 <__sfp+0x1c>
 801961c:	2104      	movs	r1, #4
 801961e:	4638      	mov	r0, r7
 8019620:	f7ff ff62 	bl	80194e8 <__sfmoreglue>
 8019624:	4604      	mov	r4, r0
 8019626:	6030      	str	r0, [r6, #0]
 8019628:	2800      	cmp	r0, #0
 801962a:	d1d5      	bne.n	80195d8 <__sfp+0x24>
 801962c:	f7ff ff78 	bl	8019520 <__sfp_lock_release>
 8019630:	230c      	movs	r3, #12
 8019632:	603b      	str	r3, [r7, #0]
 8019634:	e7ee      	b.n	8019614 <__sfp+0x60>
 8019636:	bf00      	nop
 8019638:	0801dc1c 	.word	0x0801dc1c
 801963c:	ffff0001 	.word	0xffff0001

08019640 <_fwalk_reent>:
 8019640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019644:	4606      	mov	r6, r0
 8019646:	4688      	mov	r8, r1
 8019648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801964c:	2700      	movs	r7, #0
 801964e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019652:	f1b9 0901 	subs.w	r9, r9, #1
 8019656:	d505      	bpl.n	8019664 <_fwalk_reent+0x24>
 8019658:	6824      	ldr	r4, [r4, #0]
 801965a:	2c00      	cmp	r4, #0
 801965c:	d1f7      	bne.n	801964e <_fwalk_reent+0xe>
 801965e:	4638      	mov	r0, r7
 8019660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019664:	89ab      	ldrh	r3, [r5, #12]
 8019666:	2b01      	cmp	r3, #1
 8019668:	d907      	bls.n	801967a <_fwalk_reent+0x3a>
 801966a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801966e:	3301      	adds	r3, #1
 8019670:	d003      	beq.n	801967a <_fwalk_reent+0x3a>
 8019672:	4629      	mov	r1, r5
 8019674:	4630      	mov	r0, r6
 8019676:	47c0      	blx	r8
 8019678:	4307      	orrs	r7, r0
 801967a:	3568      	adds	r5, #104	; 0x68
 801967c:	e7e9      	b.n	8019652 <_fwalk_reent+0x12>
	...

08019680 <__libc_init_array>:
 8019680:	b570      	push	{r4, r5, r6, lr}
 8019682:	4d0d      	ldr	r5, [pc, #52]	; (80196b8 <__libc_init_array+0x38>)
 8019684:	4c0d      	ldr	r4, [pc, #52]	; (80196bc <__libc_init_array+0x3c>)
 8019686:	1b64      	subs	r4, r4, r5
 8019688:	10a4      	asrs	r4, r4, #2
 801968a:	2600      	movs	r6, #0
 801968c:	42a6      	cmp	r6, r4
 801968e:	d109      	bne.n	80196a4 <__libc_init_array+0x24>
 8019690:	4d0b      	ldr	r5, [pc, #44]	; (80196c0 <__libc_init_array+0x40>)
 8019692:	4c0c      	ldr	r4, [pc, #48]	; (80196c4 <__libc_init_array+0x44>)
 8019694:	f001 fb00 	bl	801ac98 <_init>
 8019698:	1b64      	subs	r4, r4, r5
 801969a:	10a4      	asrs	r4, r4, #2
 801969c:	2600      	movs	r6, #0
 801969e:	42a6      	cmp	r6, r4
 80196a0:	d105      	bne.n	80196ae <__libc_init_array+0x2e>
 80196a2:	bd70      	pop	{r4, r5, r6, pc}
 80196a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80196a8:	4798      	blx	r3
 80196aa:	3601      	adds	r6, #1
 80196ac:	e7ee      	b.n	801968c <__libc_init_array+0xc>
 80196ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80196b2:	4798      	blx	r3
 80196b4:	3601      	adds	r6, #1
 80196b6:	e7f2      	b.n	801969e <__libc_init_array+0x1e>
 80196b8:	0801dd0c 	.word	0x0801dd0c
 80196bc:	0801dd0c 	.word	0x0801dd0c
 80196c0:	0801dd0c 	.word	0x0801dd0c
 80196c4:	0801dd10 	.word	0x0801dd10

080196c8 <__retarget_lock_init_recursive>:
 80196c8:	4770      	bx	lr

080196ca <__retarget_lock_acquire_recursive>:
 80196ca:	4770      	bx	lr

080196cc <__retarget_lock_release_recursive>:
 80196cc:	4770      	bx	lr

080196ce <memcmp>:
 80196ce:	b510      	push	{r4, lr}
 80196d0:	3901      	subs	r1, #1
 80196d2:	4402      	add	r2, r0
 80196d4:	4290      	cmp	r0, r2
 80196d6:	d101      	bne.n	80196dc <memcmp+0xe>
 80196d8:	2000      	movs	r0, #0
 80196da:	e005      	b.n	80196e8 <memcmp+0x1a>
 80196dc:	7803      	ldrb	r3, [r0, #0]
 80196de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80196e2:	42a3      	cmp	r3, r4
 80196e4:	d001      	beq.n	80196ea <memcmp+0x1c>
 80196e6:	1b18      	subs	r0, r3, r4
 80196e8:	bd10      	pop	{r4, pc}
 80196ea:	3001      	adds	r0, #1
 80196ec:	e7f2      	b.n	80196d4 <memcmp+0x6>

080196ee <memcpy>:
 80196ee:	440a      	add	r2, r1
 80196f0:	4291      	cmp	r1, r2
 80196f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80196f6:	d100      	bne.n	80196fa <memcpy+0xc>
 80196f8:	4770      	bx	lr
 80196fa:	b510      	push	{r4, lr}
 80196fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019704:	4291      	cmp	r1, r2
 8019706:	d1f9      	bne.n	80196fc <memcpy+0xe>
 8019708:	bd10      	pop	{r4, pc}

0801970a <memmove>:
 801970a:	4288      	cmp	r0, r1
 801970c:	b510      	push	{r4, lr}
 801970e:	eb01 0402 	add.w	r4, r1, r2
 8019712:	d902      	bls.n	801971a <memmove+0x10>
 8019714:	4284      	cmp	r4, r0
 8019716:	4623      	mov	r3, r4
 8019718:	d807      	bhi.n	801972a <memmove+0x20>
 801971a:	1e43      	subs	r3, r0, #1
 801971c:	42a1      	cmp	r1, r4
 801971e:	d008      	beq.n	8019732 <memmove+0x28>
 8019720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019724:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019728:	e7f8      	b.n	801971c <memmove+0x12>
 801972a:	4402      	add	r2, r0
 801972c:	4601      	mov	r1, r0
 801972e:	428a      	cmp	r2, r1
 8019730:	d100      	bne.n	8019734 <memmove+0x2a>
 8019732:	bd10      	pop	{r4, pc}
 8019734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019738:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801973c:	e7f7      	b.n	801972e <memmove+0x24>

0801973e <memset>:
 801973e:	4402      	add	r2, r0
 8019740:	4603      	mov	r3, r0
 8019742:	4293      	cmp	r3, r2
 8019744:	d100      	bne.n	8019748 <memset+0xa>
 8019746:	4770      	bx	lr
 8019748:	f803 1b01 	strb.w	r1, [r3], #1
 801974c:	e7f9      	b.n	8019742 <memset+0x4>
	...

08019750 <sbrk_aligned>:
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	4e0e      	ldr	r6, [pc, #56]	; (801978c <sbrk_aligned+0x3c>)
 8019754:	460c      	mov	r4, r1
 8019756:	6831      	ldr	r1, [r6, #0]
 8019758:	4605      	mov	r5, r0
 801975a:	b911      	cbnz	r1, 8019762 <sbrk_aligned+0x12>
 801975c:	f000 f9c2 	bl	8019ae4 <_sbrk_r>
 8019760:	6030      	str	r0, [r6, #0]
 8019762:	4621      	mov	r1, r4
 8019764:	4628      	mov	r0, r5
 8019766:	f000 f9bd 	bl	8019ae4 <_sbrk_r>
 801976a:	1c43      	adds	r3, r0, #1
 801976c:	d00a      	beq.n	8019784 <sbrk_aligned+0x34>
 801976e:	1cc4      	adds	r4, r0, #3
 8019770:	f024 0403 	bic.w	r4, r4, #3
 8019774:	42a0      	cmp	r0, r4
 8019776:	d007      	beq.n	8019788 <sbrk_aligned+0x38>
 8019778:	1a21      	subs	r1, r4, r0
 801977a:	4628      	mov	r0, r5
 801977c:	f000 f9b2 	bl	8019ae4 <_sbrk_r>
 8019780:	3001      	adds	r0, #1
 8019782:	d101      	bne.n	8019788 <sbrk_aligned+0x38>
 8019784:	f04f 34ff 	mov.w	r4, #4294967295
 8019788:	4620      	mov	r0, r4
 801978a:	bd70      	pop	{r4, r5, r6, pc}
 801978c:	2000dc00 	.word	0x2000dc00

08019790 <_malloc_r>:
 8019790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019794:	1ccd      	adds	r5, r1, #3
 8019796:	f025 0503 	bic.w	r5, r5, #3
 801979a:	3508      	adds	r5, #8
 801979c:	2d0c      	cmp	r5, #12
 801979e:	bf38      	it	cc
 80197a0:	250c      	movcc	r5, #12
 80197a2:	2d00      	cmp	r5, #0
 80197a4:	4607      	mov	r7, r0
 80197a6:	db01      	blt.n	80197ac <_malloc_r+0x1c>
 80197a8:	42a9      	cmp	r1, r5
 80197aa:	d905      	bls.n	80197b8 <_malloc_r+0x28>
 80197ac:	230c      	movs	r3, #12
 80197ae:	603b      	str	r3, [r7, #0]
 80197b0:	2600      	movs	r6, #0
 80197b2:	4630      	mov	r0, r6
 80197b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197b8:	4e2e      	ldr	r6, [pc, #184]	; (8019874 <_malloc_r+0xe4>)
 80197ba:	f000 fd13 	bl	801a1e4 <__malloc_lock>
 80197be:	6833      	ldr	r3, [r6, #0]
 80197c0:	461c      	mov	r4, r3
 80197c2:	bb34      	cbnz	r4, 8019812 <_malloc_r+0x82>
 80197c4:	4629      	mov	r1, r5
 80197c6:	4638      	mov	r0, r7
 80197c8:	f7ff ffc2 	bl	8019750 <sbrk_aligned>
 80197cc:	1c43      	adds	r3, r0, #1
 80197ce:	4604      	mov	r4, r0
 80197d0:	d14d      	bne.n	801986e <_malloc_r+0xde>
 80197d2:	6834      	ldr	r4, [r6, #0]
 80197d4:	4626      	mov	r6, r4
 80197d6:	2e00      	cmp	r6, #0
 80197d8:	d140      	bne.n	801985c <_malloc_r+0xcc>
 80197da:	6823      	ldr	r3, [r4, #0]
 80197dc:	4631      	mov	r1, r6
 80197de:	4638      	mov	r0, r7
 80197e0:	eb04 0803 	add.w	r8, r4, r3
 80197e4:	f000 f97e 	bl	8019ae4 <_sbrk_r>
 80197e8:	4580      	cmp	r8, r0
 80197ea:	d13a      	bne.n	8019862 <_malloc_r+0xd2>
 80197ec:	6821      	ldr	r1, [r4, #0]
 80197ee:	3503      	adds	r5, #3
 80197f0:	1a6d      	subs	r5, r5, r1
 80197f2:	f025 0503 	bic.w	r5, r5, #3
 80197f6:	3508      	adds	r5, #8
 80197f8:	2d0c      	cmp	r5, #12
 80197fa:	bf38      	it	cc
 80197fc:	250c      	movcc	r5, #12
 80197fe:	4629      	mov	r1, r5
 8019800:	4638      	mov	r0, r7
 8019802:	f7ff ffa5 	bl	8019750 <sbrk_aligned>
 8019806:	3001      	adds	r0, #1
 8019808:	d02b      	beq.n	8019862 <_malloc_r+0xd2>
 801980a:	6823      	ldr	r3, [r4, #0]
 801980c:	442b      	add	r3, r5
 801980e:	6023      	str	r3, [r4, #0]
 8019810:	e00e      	b.n	8019830 <_malloc_r+0xa0>
 8019812:	6822      	ldr	r2, [r4, #0]
 8019814:	1b52      	subs	r2, r2, r5
 8019816:	d41e      	bmi.n	8019856 <_malloc_r+0xc6>
 8019818:	2a0b      	cmp	r2, #11
 801981a:	d916      	bls.n	801984a <_malloc_r+0xba>
 801981c:	1961      	adds	r1, r4, r5
 801981e:	42a3      	cmp	r3, r4
 8019820:	6025      	str	r5, [r4, #0]
 8019822:	bf18      	it	ne
 8019824:	6059      	strne	r1, [r3, #4]
 8019826:	6863      	ldr	r3, [r4, #4]
 8019828:	bf08      	it	eq
 801982a:	6031      	streq	r1, [r6, #0]
 801982c:	5162      	str	r2, [r4, r5]
 801982e:	604b      	str	r3, [r1, #4]
 8019830:	4638      	mov	r0, r7
 8019832:	f104 060b 	add.w	r6, r4, #11
 8019836:	f000 fcdb 	bl	801a1f0 <__malloc_unlock>
 801983a:	f026 0607 	bic.w	r6, r6, #7
 801983e:	1d23      	adds	r3, r4, #4
 8019840:	1af2      	subs	r2, r6, r3
 8019842:	d0b6      	beq.n	80197b2 <_malloc_r+0x22>
 8019844:	1b9b      	subs	r3, r3, r6
 8019846:	50a3      	str	r3, [r4, r2]
 8019848:	e7b3      	b.n	80197b2 <_malloc_r+0x22>
 801984a:	6862      	ldr	r2, [r4, #4]
 801984c:	42a3      	cmp	r3, r4
 801984e:	bf0c      	ite	eq
 8019850:	6032      	streq	r2, [r6, #0]
 8019852:	605a      	strne	r2, [r3, #4]
 8019854:	e7ec      	b.n	8019830 <_malloc_r+0xa0>
 8019856:	4623      	mov	r3, r4
 8019858:	6864      	ldr	r4, [r4, #4]
 801985a:	e7b2      	b.n	80197c2 <_malloc_r+0x32>
 801985c:	4634      	mov	r4, r6
 801985e:	6876      	ldr	r6, [r6, #4]
 8019860:	e7b9      	b.n	80197d6 <_malloc_r+0x46>
 8019862:	230c      	movs	r3, #12
 8019864:	603b      	str	r3, [r7, #0]
 8019866:	4638      	mov	r0, r7
 8019868:	f000 fcc2 	bl	801a1f0 <__malloc_unlock>
 801986c:	e7a1      	b.n	80197b2 <_malloc_r+0x22>
 801986e:	6025      	str	r5, [r4, #0]
 8019870:	e7de      	b.n	8019830 <_malloc_r+0xa0>
 8019872:	bf00      	nop
 8019874:	2000dbfc 	.word	0x2000dbfc

08019878 <iprintf>:
 8019878:	b40f      	push	{r0, r1, r2, r3}
 801987a:	4b0a      	ldr	r3, [pc, #40]	; (80198a4 <iprintf+0x2c>)
 801987c:	b513      	push	{r0, r1, r4, lr}
 801987e:	681c      	ldr	r4, [r3, #0]
 8019880:	b124      	cbz	r4, 801988c <iprintf+0x14>
 8019882:	69a3      	ldr	r3, [r4, #24]
 8019884:	b913      	cbnz	r3, 801988c <iprintf+0x14>
 8019886:	4620      	mov	r0, r4
 8019888:	f7ff fe5c 	bl	8019544 <__sinit>
 801988c:	ab05      	add	r3, sp, #20
 801988e:	9a04      	ldr	r2, [sp, #16]
 8019890:	68a1      	ldr	r1, [r4, #8]
 8019892:	9301      	str	r3, [sp, #4]
 8019894:	4620      	mov	r0, r4
 8019896:	f000 fe83 	bl	801a5a0 <_vfiprintf_r>
 801989a:	b002      	add	sp, #8
 801989c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198a0:	b004      	add	sp, #16
 80198a2:	4770      	bx	lr
 80198a4:	2000016c 	.word	0x2000016c

080198a8 <_puts_r>:
 80198a8:	b570      	push	{r4, r5, r6, lr}
 80198aa:	460e      	mov	r6, r1
 80198ac:	4605      	mov	r5, r0
 80198ae:	b118      	cbz	r0, 80198b8 <_puts_r+0x10>
 80198b0:	6983      	ldr	r3, [r0, #24]
 80198b2:	b90b      	cbnz	r3, 80198b8 <_puts_r+0x10>
 80198b4:	f7ff fe46 	bl	8019544 <__sinit>
 80198b8:	69ab      	ldr	r3, [r5, #24]
 80198ba:	68ac      	ldr	r4, [r5, #8]
 80198bc:	b913      	cbnz	r3, 80198c4 <_puts_r+0x1c>
 80198be:	4628      	mov	r0, r5
 80198c0:	f7ff fe40 	bl	8019544 <__sinit>
 80198c4:	4b2c      	ldr	r3, [pc, #176]	; (8019978 <_puts_r+0xd0>)
 80198c6:	429c      	cmp	r4, r3
 80198c8:	d120      	bne.n	801990c <_puts_r+0x64>
 80198ca:	686c      	ldr	r4, [r5, #4]
 80198cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198ce:	07db      	lsls	r3, r3, #31
 80198d0:	d405      	bmi.n	80198de <_puts_r+0x36>
 80198d2:	89a3      	ldrh	r3, [r4, #12]
 80198d4:	0598      	lsls	r0, r3, #22
 80198d6:	d402      	bmi.n	80198de <_puts_r+0x36>
 80198d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198da:	f7ff fef6 	bl	80196ca <__retarget_lock_acquire_recursive>
 80198de:	89a3      	ldrh	r3, [r4, #12]
 80198e0:	0719      	lsls	r1, r3, #28
 80198e2:	d51d      	bpl.n	8019920 <_puts_r+0x78>
 80198e4:	6923      	ldr	r3, [r4, #16]
 80198e6:	b1db      	cbz	r3, 8019920 <_puts_r+0x78>
 80198e8:	3e01      	subs	r6, #1
 80198ea:	68a3      	ldr	r3, [r4, #8]
 80198ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80198f0:	3b01      	subs	r3, #1
 80198f2:	60a3      	str	r3, [r4, #8]
 80198f4:	bb39      	cbnz	r1, 8019946 <_puts_r+0x9e>
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	da38      	bge.n	801996c <_puts_r+0xc4>
 80198fa:	4622      	mov	r2, r4
 80198fc:	210a      	movs	r1, #10
 80198fe:	4628      	mov	r0, r5
 8019900:	f000 fa16 	bl	8019d30 <__swbuf_r>
 8019904:	3001      	adds	r0, #1
 8019906:	d011      	beq.n	801992c <_puts_r+0x84>
 8019908:	250a      	movs	r5, #10
 801990a:	e011      	b.n	8019930 <_puts_r+0x88>
 801990c:	4b1b      	ldr	r3, [pc, #108]	; (801997c <_puts_r+0xd4>)
 801990e:	429c      	cmp	r4, r3
 8019910:	d101      	bne.n	8019916 <_puts_r+0x6e>
 8019912:	68ac      	ldr	r4, [r5, #8]
 8019914:	e7da      	b.n	80198cc <_puts_r+0x24>
 8019916:	4b1a      	ldr	r3, [pc, #104]	; (8019980 <_puts_r+0xd8>)
 8019918:	429c      	cmp	r4, r3
 801991a:	bf08      	it	eq
 801991c:	68ec      	ldreq	r4, [r5, #12]
 801991e:	e7d5      	b.n	80198cc <_puts_r+0x24>
 8019920:	4621      	mov	r1, r4
 8019922:	4628      	mov	r0, r5
 8019924:	f000 fa68 	bl	8019df8 <__swsetup_r>
 8019928:	2800      	cmp	r0, #0
 801992a:	d0dd      	beq.n	80198e8 <_puts_r+0x40>
 801992c:	f04f 35ff 	mov.w	r5, #4294967295
 8019930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019932:	07da      	lsls	r2, r3, #31
 8019934:	d405      	bmi.n	8019942 <_puts_r+0x9a>
 8019936:	89a3      	ldrh	r3, [r4, #12]
 8019938:	059b      	lsls	r3, r3, #22
 801993a:	d402      	bmi.n	8019942 <_puts_r+0x9a>
 801993c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801993e:	f7ff fec5 	bl	80196cc <__retarget_lock_release_recursive>
 8019942:	4628      	mov	r0, r5
 8019944:	bd70      	pop	{r4, r5, r6, pc}
 8019946:	2b00      	cmp	r3, #0
 8019948:	da04      	bge.n	8019954 <_puts_r+0xac>
 801994a:	69a2      	ldr	r2, [r4, #24]
 801994c:	429a      	cmp	r2, r3
 801994e:	dc06      	bgt.n	801995e <_puts_r+0xb6>
 8019950:	290a      	cmp	r1, #10
 8019952:	d004      	beq.n	801995e <_puts_r+0xb6>
 8019954:	6823      	ldr	r3, [r4, #0]
 8019956:	1c5a      	adds	r2, r3, #1
 8019958:	6022      	str	r2, [r4, #0]
 801995a:	7019      	strb	r1, [r3, #0]
 801995c:	e7c5      	b.n	80198ea <_puts_r+0x42>
 801995e:	4622      	mov	r2, r4
 8019960:	4628      	mov	r0, r5
 8019962:	f000 f9e5 	bl	8019d30 <__swbuf_r>
 8019966:	3001      	adds	r0, #1
 8019968:	d1bf      	bne.n	80198ea <_puts_r+0x42>
 801996a:	e7df      	b.n	801992c <_puts_r+0x84>
 801996c:	6823      	ldr	r3, [r4, #0]
 801996e:	250a      	movs	r5, #10
 8019970:	1c5a      	adds	r2, r3, #1
 8019972:	6022      	str	r2, [r4, #0]
 8019974:	701d      	strb	r5, [r3, #0]
 8019976:	e7db      	b.n	8019930 <_puts_r+0x88>
 8019978:	0801dbdc 	.word	0x0801dbdc
 801997c:	0801dbfc 	.word	0x0801dbfc
 8019980:	0801dbbc 	.word	0x0801dbbc

08019984 <puts>:
 8019984:	4b02      	ldr	r3, [pc, #8]	; (8019990 <puts+0xc>)
 8019986:	4601      	mov	r1, r0
 8019988:	6818      	ldr	r0, [r3, #0]
 801998a:	f7ff bf8d 	b.w	80198a8 <_puts_r>
 801998e:	bf00      	nop
 8019990:	2000016c 	.word	0x2000016c

08019994 <rand>:
 8019994:	4b16      	ldr	r3, [pc, #88]	; (80199f0 <rand+0x5c>)
 8019996:	b510      	push	{r4, lr}
 8019998:	681c      	ldr	r4, [r3, #0]
 801999a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801999c:	b9b3      	cbnz	r3, 80199cc <rand+0x38>
 801999e:	2018      	movs	r0, #24
 80199a0:	f000 fc18 	bl	801a1d4 <malloc>
 80199a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80199a6:	b928      	cbnz	r0, 80199b4 <rand+0x20>
 80199a8:	4602      	mov	r2, r0
 80199aa:	4b12      	ldr	r3, [pc, #72]	; (80199f4 <rand+0x60>)
 80199ac:	4812      	ldr	r0, [pc, #72]	; (80199f8 <rand+0x64>)
 80199ae:	214e      	movs	r1, #78	; 0x4e
 80199b0:	f000 fa90 	bl	8019ed4 <__assert_func>
 80199b4:	4a11      	ldr	r2, [pc, #68]	; (80199fc <rand+0x68>)
 80199b6:	4b12      	ldr	r3, [pc, #72]	; (8019a00 <rand+0x6c>)
 80199b8:	e9c0 2300 	strd	r2, r3, [r0]
 80199bc:	4b11      	ldr	r3, [pc, #68]	; (8019a04 <rand+0x70>)
 80199be:	6083      	str	r3, [r0, #8]
 80199c0:	230b      	movs	r3, #11
 80199c2:	8183      	strh	r3, [r0, #12]
 80199c4:	2201      	movs	r2, #1
 80199c6:	2300      	movs	r3, #0
 80199c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80199cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80199ce:	4a0e      	ldr	r2, [pc, #56]	; (8019a08 <rand+0x74>)
 80199d0:	6920      	ldr	r0, [r4, #16]
 80199d2:	6963      	ldr	r3, [r4, #20]
 80199d4:	490d      	ldr	r1, [pc, #52]	; (8019a0c <rand+0x78>)
 80199d6:	4342      	muls	r2, r0
 80199d8:	fb01 2203 	mla	r2, r1, r3, r2
 80199dc:	fba0 0101 	umull	r0, r1, r0, r1
 80199e0:	1c43      	adds	r3, r0, #1
 80199e2:	eb42 0001 	adc.w	r0, r2, r1
 80199e6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80199ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80199ee:	bd10      	pop	{r4, pc}
 80199f0:	2000016c 	.word	0x2000016c
 80199f4:	0801dc20 	.word	0x0801dc20
 80199f8:	0801dc37 	.word	0x0801dc37
 80199fc:	abcd330e 	.word	0xabcd330e
 8019a00:	e66d1234 	.word	0xe66d1234
 8019a04:	0005deec 	.word	0x0005deec
 8019a08:	5851f42d 	.word	0x5851f42d
 8019a0c:	4c957f2d 	.word	0x4c957f2d

08019a10 <cleanup_glue>:
 8019a10:	b538      	push	{r3, r4, r5, lr}
 8019a12:	460c      	mov	r4, r1
 8019a14:	6809      	ldr	r1, [r1, #0]
 8019a16:	4605      	mov	r5, r0
 8019a18:	b109      	cbz	r1, 8019a1e <cleanup_glue+0xe>
 8019a1a:	f7ff fff9 	bl	8019a10 <cleanup_glue>
 8019a1e:	4621      	mov	r1, r4
 8019a20:	4628      	mov	r0, r5
 8019a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a26:	f000 bbe9 	b.w	801a1fc <_free_r>
	...

08019a2c <_reclaim_reent>:
 8019a2c:	4b2c      	ldr	r3, [pc, #176]	; (8019ae0 <_reclaim_reent+0xb4>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	4283      	cmp	r3, r0
 8019a32:	b570      	push	{r4, r5, r6, lr}
 8019a34:	4604      	mov	r4, r0
 8019a36:	d051      	beq.n	8019adc <_reclaim_reent+0xb0>
 8019a38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019a3a:	b143      	cbz	r3, 8019a4e <_reclaim_reent+0x22>
 8019a3c:	68db      	ldr	r3, [r3, #12]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d14a      	bne.n	8019ad8 <_reclaim_reent+0xac>
 8019a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a44:	6819      	ldr	r1, [r3, #0]
 8019a46:	b111      	cbz	r1, 8019a4e <_reclaim_reent+0x22>
 8019a48:	4620      	mov	r0, r4
 8019a4a:	f000 fbd7 	bl	801a1fc <_free_r>
 8019a4e:	6961      	ldr	r1, [r4, #20]
 8019a50:	b111      	cbz	r1, 8019a58 <_reclaim_reent+0x2c>
 8019a52:	4620      	mov	r0, r4
 8019a54:	f000 fbd2 	bl	801a1fc <_free_r>
 8019a58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019a5a:	b111      	cbz	r1, 8019a62 <_reclaim_reent+0x36>
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	f000 fbcd 	bl	801a1fc <_free_r>
 8019a62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019a64:	b111      	cbz	r1, 8019a6c <_reclaim_reent+0x40>
 8019a66:	4620      	mov	r0, r4
 8019a68:	f000 fbc8 	bl	801a1fc <_free_r>
 8019a6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019a6e:	b111      	cbz	r1, 8019a76 <_reclaim_reent+0x4a>
 8019a70:	4620      	mov	r0, r4
 8019a72:	f000 fbc3 	bl	801a1fc <_free_r>
 8019a76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019a78:	b111      	cbz	r1, 8019a80 <_reclaim_reent+0x54>
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	f000 fbbe 	bl	801a1fc <_free_r>
 8019a80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019a82:	b111      	cbz	r1, 8019a8a <_reclaim_reent+0x5e>
 8019a84:	4620      	mov	r0, r4
 8019a86:	f000 fbb9 	bl	801a1fc <_free_r>
 8019a8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019a8c:	b111      	cbz	r1, 8019a94 <_reclaim_reent+0x68>
 8019a8e:	4620      	mov	r0, r4
 8019a90:	f000 fbb4 	bl	801a1fc <_free_r>
 8019a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a96:	b111      	cbz	r1, 8019a9e <_reclaim_reent+0x72>
 8019a98:	4620      	mov	r0, r4
 8019a9a:	f000 fbaf 	bl	801a1fc <_free_r>
 8019a9e:	69a3      	ldr	r3, [r4, #24]
 8019aa0:	b1e3      	cbz	r3, 8019adc <_reclaim_reent+0xb0>
 8019aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	4798      	blx	r3
 8019aa8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019aaa:	b1b9      	cbz	r1, 8019adc <_reclaim_reent+0xb0>
 8019aac:	4620      	mov	r0, r4
 8019aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ab2:	f7ff bfad 	b.w	8019a10 <cleanup_glue>
 8019ab6:	5949      	ldr	r1, [r1, r5]
 8019ab8:	b941      	cbnz	r1, 8019acc <_reclaim_reent+0xa0>
 8019aba:	3504      	adds	r5, #4
 8019abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019abe:	2d80      	cmp	r5, #128	; 0x80
 8019ac0:	68d9      	ldr	r1, [r3, #12]
 8019ac2:	d1f8      	bne.n	8019ab6 <_reclaim_reent+0x8a>
 8019ac4:	4620      	mov	r0, r4
 8019ac6:	f000 fb99 	bl	801a1fc <_free_r>
 8019aca:	e7ba      	b.n	8019a42 <_reclaim_reent+0x16>
 8019acc:	680e      	ldr	r6, [r1, #0]
 8019ace:	4620      	mov	r0, r4
 8019ad0:	f000 fb94 	bl	801a1fc <_free_r>
 8019ad4:	4631      	mov	r1, r6
 8019ad6:	e7ef      	b.n	8019ab8 <_reclaim_reent+0x8c>
 8019ad8:	2500      	movs	r5, #0
 8019ada:	e7ef      	b.n	8019abc <_reclaim_reent+0x90>
 8019adc:	bd70      	pop	{r4, r5, r6, pc}
 8019ade:	bf00      	nop
 8019ae0:	2000016c 	.word	0x2000016c

08019ae4 <_sbrk_r>:
 8019ae4:	b538      	push	{r3, r4, r5, lr}
 8019ae6:	4d06      	ldr	r5, [pc, #24]	; (8019b00 <_sbrk_r+0x1c>)
 8019ae8:	2300      	movs	r3, #0
 8019aea:	4604      	mov	r4, r0
 8019aec:	4608      	mov	r0, r1
 8019aee:	602b      	str	r3, [r5, #0]
 8019af0:	f7e8 fe88 	bl	8002804 <_sbrk>
 8019af4:	1c43      	adds	r3, r0, #1
 8019af6:	d102      	bne.n	8019afe <_sbrk_r+0x1a>
 8019af8:	682b      	ldr	r3, [r5, #0]
 8019afa:	b103      	cbz	r3, 8019afe <_sbrk_r+0x1a>
 8019afc:	6023      	str	r3, [r4, #0]
 8019afe:	bd38      	pop	{r3, r4, r5, pc}
 8019b00:	2000dc04 	.word	0x2000dc04

08019b04 <siprintf>:
 8019b04:	b40e      	push	{r1, r2, r3}
 8019b06:	b500      	push	{lr}
 8019b08:	b09c      	sub	sp, #112	; 0x70
 8019b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8019b0c:	9002      	str	r0, [sp, #8]
 8019b0e:	9006      	str	r0, [sp, #24]
 8019b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019b14:	4809      	ldr	r0, [pc, #36]	; (8019b3c <siprintf+0x38>)
 8019b16:	9107      	str	r1, [sp, #28]
 8019b18:	9104      	str	r1, [sp, #16]
 8019b1a:	4909      	ldr	r1, [pc, #36]	; (8019b40 <siprintf+0x3c>)
 8019b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b20:	9105      	str	r1, [sp, #20]
 8019b22:	6800      	ldr	r0, [r0, #0]
 8019b24:	9301      	str	r3, [sp, #4]
 8019b26:	a902      	add	r1, sp, #8
 8019b28:	f000 fc10 	bl	801a34c <_svfiprintf_r>
 8019b2c:	9b02      	ldr	r3, [sp, #8]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	701a      	strb	r2, [r3, #0]
 8019b32:	b01c      	add	sp, #112	; 0x70
 8019b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b38:	b003      	add	sp, #12
 8019b3a:	4770      	bx	lr
 8019b3c:	2000016c 	.word	0x2000016c
 8019b40:	ffff0208 	.word	0xffff0208

08019b44 <__sread>:
 8019b44:	b510      	push	{r4, lr}
 8019b46:	460c      	mov	r4, r1
 8019b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b4c:	f000 ffec 	bl	801ab28 <_read_r>
 8019b50:	2800      	cmp	r0, #0
 8019b52:	bfab      	itete	ge
 8019b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019b56:	89a3      	ldrhlt	r3, [r4, #12]
 8019b58:	181b      	addge	r3, r3, r0
 8019b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019b5e:	bfac      	ite	ge
 8019b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8019b62:	81a3      	strhlt	r3, [r4, #12]
 8019b64:	bd10      	pop	{r4, pc}

08019b66 <__swrite>:
 8019b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b6a:	461f      	mov	r7, r3
 8019b6c:	898b      	ldrh	r3, [r1, #12]
 8019b6e:	05db      	lsls	r3, r3, #23
 8019b70:	4605      	mov	r5, r0
 8019b72:	460c      	mov	r4, r1
 8019b74:	4616      	mov	r6, r2
 8019b76:	d505      	bpl.n	8019b84 <__swrite+0x1e>
 8019b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b7c:	2302      	movs	r3, #2
 8019b7e:	2200      	movs	r2, #0
 8019b80:	f000 fab0 	bl	801a0e4 <_lseek_r>
 8019b84:	89a3      	ldrh	r3, [r4, #12]
 8019b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019b8e:	81a3      	strh	r3, [r4, #12]
 8019b90:	4632      	mov	r2, r6
 8019b92:	463b      	mov	r3, r7
 8019b94:	4628      	mov	r0, r5
 8019b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b9a:	f000 b91b 	b.w	8019dd4 <_write_r>

08019b9e <__sseek>:
 8019b9e:	b510      	push	{r4, lr}
 8019ba0:	460c      	mov	r4, r1
 8019ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ba6:	f000 fa9d 	bl	801a0e4 <_lseek_r>
 8019baa:	1c43      	adds	r3, r0, #1
 8019bac:	89a3      	ldrh	r3, [r4, #12]
 8019bae:	bf15      	itete	ne
 8019bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8019bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019bba:	81a3      	strheq	r3, [r4, #12]
 8019bbc:	bf18      	it	ne
 8019bbe:	81a3      	strhne	r3, [r4, #12]
 8019bc0:	bd10      	pop	{r4, pc}

08019bc2 <__sclose>:
 8019bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bc6:	f000 b9a3 	b.w	8019f10 <_close_r>

08019bca <strncmp>:
 8019bca:	b510      	push	{r4, lr}
 8019bcc:	b17a      	cbz	r2, 8019bee <strncmp+0x24>
 8019bce:	4603      	mov	r3, r0
 8019bd0:	3901      	subs	r1, #1
 8019bd2:	1884      	adds	r4, r0, r2
 8019bd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019bd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019bdc:	4290      	cmp	r0, r2
 8019bde:	d101      	bne.n	8019be4 <strncmp+0x1a>
 8019be0:	42a3      	cmp	r3, r4
 8019be2:	d101      	bne.n	8019be8 <strncmp+0x1e>
 8019be4:	1a80      	subs	r0, r0, r2
 8019be6:	bd10      	pop	{r4, pc}
 8019be8:	2800      	cmp	r0, #0
 8019bea:	d1f3      	bne.n	8019bd4 <strncmp+0xa>
 8019bec:	e7fa      	b.n	8019be4 <strncmp+0x1a>
 8019bee:	4610      	mov	r0, r2
 8019bf0:	e7f9      	b.n	8019be6 <strncmp+0x1c>

08019bf2 <strncpy>:
 8019bf2:	b510      	push	{r4, lr}
 8019bf4:	3901      	subs	r1, #1
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	b132      	cbz	r2, 8019c08 <strncpy+0x16>
 8019bfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019bfe:	f803 4b01 	strb.w	r4, [r3], #1
 8019c02:	3a01      	subs	r2, #1
 8019c04:	2c00      	cmp	r4, #0
 8019c06:	d1f7      	bne.n	8019bf8 <strncpy+0x6>
 8019c08:	441a      	add	r2, r3
 8019c0a:	2100      	movs	r1, #0
 8019c0c:	4293      	cmp	r3, r2
 8019c0e:	d100      	bne.n	8019c12 <strncpy+0x20>
 8019c10:	bd10      	pop	{r4, pc}
 8019c12:	f803 1b01 	strb.w	r1, [r3], #1
 8019c16:	e7f9      	b.n	8019c0c <strncpy+0x1a>

08019c18 <_strtol_l.constprop.0>:
 8019c18:	2b01      	cmp	r3, #1
 8019c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c1e:	d001      	beq.n	8019c24 <_strtol_l.constprop.0+0xc>
 8019c20:	2b24      	cmp	r3, #36	; 0x24
 8019c22:	d906      	bls.n	8019c32 <_strtol_l.constprop.0+0x1a>
 8019c24:	f000 f984 	bl	8019f30 <__errno>
 8019c28:	2316      	movs	r3, #22
 8019c2a:	6003      	str	r3, [r0, #0]
 8019c2c:	2000      	movs	r0, #0
 8019c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019d18 <_strtol_l.constprop.0+0x100>
 8019c36:	460d      	mov	r5, r1
 8019c38:	462e      	mov	r6, r5
 8019c3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8019c42:	f017 0708 	ands.w	r7, r7, #8
 8019c46:	d1f7      	bne.n	8019c38 <_strtol_l.constprop.0+0x20>
 8019c48:	2c2d      	cmp	r4, #45	; 0x2d
 8019c4a:	d132      	bne.n	8019cb2 <_strtol_l.constprop.0+0x9a>
 8019c4c:	782c      	ldrb	r4, [r5, #0]
 8019c4e:	2701      	movs	r7, #1
 8019c50:	1cb5      	adds	r5, r6, #2
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d05b      	beq.n	8019d0e <_strtol_l.constprop.0+0xf6>
 8019c56:	2b10      	cmp	r3, #16
 8019c58:	d109      	bne.n	8019c6e <_strtol_l.constprop.0+0x56>
 8019c5a:	2c30      	cmp	r4, #48	; 0x30
 8019c5c:	d107      	bne.n	8019c6e <_strtol_l.constprop.0+0x56>
 8019c5e:	782c      	ldrb	r4, [r5, #0]
 8019c60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019c64:	2c58      	cmp	r4, #88	; 0x58
 8019c66:	d14d      	bne.n	8019d04 <_strtol_l.constprop.0+0xec>
 8019c68:	786c      	ldrb	r4, [r5, #1]
 8019c6a:	2310      	movs	r3, #16
 8019c6c:	3502      	adds	r5, #2
 8019c6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019c72:	f108 38ff 	add.w	r8, r8, #4294967295
 8019c76:	f04f 0c00 	mov.w	ip, #0
 8019c7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8019c7e:	4666      	mov	r6, ip
 8019c80:	fb03 8a19 	mls	sl, r3, r9, r8
 8019c84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8019c88:	f1be 0f09 	cmp.w	lr, #9
 8019c8c:	d816      	bhi.n	8019cbc <_strtol_l.constprop.0+0xa4>
 8019c8e:	4674      	mov	r4, lr
 8019c90:	42a3      	cmp	r3, r4
 8019c92:	dd24      	ble.n	8019cde <_strtol_l.constprop.0+0xc6>
 8019c94:	f1bc 0f00 	cmp.w	ip, #0
 8019c98:	db1e      	blt.n	8019cd8 <_strtol_l.constprop.0+0xc0>
 8019c9a:	45b1      	cmp	r9, r6
 8019c9c:	d31c      	bcc.n	8019cd8 <_strtol_l.constprop.0+0xc0>
 8019c9e:	d101      	bne.n	8019ca4 <_strtol_l.constprop.0+0x8c>
 8019ca0:	45a2      	cmp	sl, r4
 8019ca2:	db19      	blt.n	8019cd8 <_strtol_l.constprop.0+0xc0>
 8019ca4:	fb06 4603 	mla	r6, r6, r3, r4
 8019ca8:	f04f 0c01 	mov.w	ip, #1
 8019cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019cb0:	e7e8      	b.n	8019c84 <_strtol_l.constprop.0+0x6c>
 8019cb2:	2c2b      	cmp	r4, #43	; 0x2b
 8019cb4:	bf04      	itt	eq
 8019cb6:	782c      	ldrbeq	r4, [r5, #0]
 8019cb8:	1cb5      	addeq	r5, r6, #2
 8019cba:	e7ca      	b.n	8019c52 <_strtol_l.constprop.0+0x3a>
 8019cbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8019cc0:	f1be 0f19 	cmp.w	lr, #25
 8019cc4:	d801      	bhi.n	8019cca <_strtol_l.constprop.0+0xb2>
 8019cc6:	3c37      	subs	r4, #55	; 0x37
 8019cc8:	e7e2      	b.n	8019c90 <_strtol_l.constprop.0+0x78>
 8019cca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8019cce:	f1be 0f19 	cmp.w	lr, #25
 8019cd2:	d804      	bhi.n	8019cde <_strtol_l.constprop.0+0xc6>
 8019cd4:	3c57      	subs	r4, #87	; 0x57
 8019cd6:	e7db      	b.n	8019c90 <_strtol_l.constprop.0+0x78>
 8019cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8019cdc:	e7e6      	b.n	8019cac <_strtol_l.constprop.0+0x94>
 8019cde:	f1bc 0f00 	cmp.w	ip, #0
 8019ce2:	da05      	bge.n	8019cf0 <_strtol_l.constprop.0+0xd8>
 8019ce4:	2322      	movs	r3, #34	; 0x22
 8019ce6:	6003      	str	r3, [r0, #0]
 8019ce8:	4646      	mov	r6, r8
 8019cea:	b942      	cbnz	r2, 8019cfe <_strtol_l.constprop.0+0xe6>
 8019cec:	4630      	mov	r0, r6
 8019cee:	e79e      	b.n	8019c2e <_strtol_l.constprop.0+0x16>
 8019cf0:	b107      	cbz	r7, 8019cf4 <_strtol_l.constprop.0+0xdc>
 8019cf2:	4276      	negs	r6, r6
 8019cf4:	2a00      	cmp	r2, #0
 8019cf6:	d0f9      	beq.n	8019cec <_strtol_l.constprop.0+0xd4>
 8019cf8:	f1bc 0f00 	cmp.w	ip, #0
 8019cfc:	d000      	beq.n	8019d00 <_strtol_l.constprop.0+0xe8>
 8019cfe:	1e69      	subs	r1, r5, #1
 8019d00:	6011      	str	r1, [r2, #0]
 8019d02:	e7f3      	b.n	8019cec <_strtol_l.constprop.0+0xd4>
 8019d04:	2430      	movs	r4, #48	; 0x30
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d1b1      	bne.n	8019c6e <_strtol_l.constprop.0+0x56>
 8019d0a:	2308      	movs	r3, #8
 8019d0c:	e7af      	b.n	8019c6e <_strtol_l.constprop.0+0x56>
 8019d0e:	2c30      	cmp	r4, #48	; 0x30
 8019d10:	d0a5      	beq.n	8019c5e <_strtol_l.constprop.0+0x46>
 8019d12:	230a      	movs	r3, #10
 8019d14:	e7ab      	b.n	8019c6e <_strtol_l.constprop.0+0x56>
 8019d16:	bf00      	nop
 8019d18:	0801dabb 	.word	0x0801dabb

08019d1c <strtol>:
 8019d1c:	4613      	mov	r3, r2
 8019d1e:	460a      	mov	r2, r1
 8019d20:	4601      	mov	r1, r0
 8019d22:	4802      	ldr	r0, [pc, #8]	; (8019d2c <strtol+0x10>)
 8019d24:	6800      	ldr	r0, [r0, #0]
 8019d26:	f7ff bf77 	b.w	8019c18 <_strtol_l.constprop.0>
 8019d2a:	bf00      	nop
 8019d2c:	2000016c 	.word	0x2000016c

08019d30 <__swbuf_r>:
 8019d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d32:	460e      	mov	r6, r1
 8019d34:	4614      	mov	r4, r2
 8019d36:	4605      	mov	r5, r0
 8019d38:	b118      	cbz	r0, 8019d42 <__swbuf_r+0x12>
 8019d3a:	6983      	ldr	r3, [r0, #24]
 8019d3c:	b90b      	cbnz	r3, 8019d42 <__swbuf_r+0x12>
 8019d3e:	f7ff fc01 	bl	8019544 <__sinit>
 8019d42:	4b21      	ldr	r3, [pc, #132]	; (8019dc8 <__swbuf_r+0x98>)
 8019d44:	429c      	cmp	r4, r3
 8019d46:	d12b      	bne.n	8019da0 <__swbuf_r+0x70>
 8019d48:	686c      	ldr	r4, [r5, #4]
 8019d4a:	69a3      	ldr	r3, [r4, #24]
 8019d4c:	60a3      	str	r3, [r4, #8]
 8019d4e:	89a3      	ldrh	r3, [r4, #12]
 8019d50:	071a      	lsls	r2, r3, #28
 8019d52:	d52f      	bpl.n	8019db4 <__swbuf_r+0x84>
 8019d54:	6923      	ldr	r3, [r4, #16]
 8019d56:	b36b      	cbz	r3, 8019db4 <__swbuf_r+0x84>
 8019d58:	6923      	ldr	r3, [r4, #16]
 8019d5a:	6820      	ldr	r0, [r4, #0]
 8019d5c:	1ac0      	subs	r0, r0, r3
 8019d5e:	6963      	ldr	r3, [r4, #20]
 8019d60:	b2f6      	uxtb	r6, r6
 8019d62:	4283      	cmp	r3, r0
 8019d64:	4637      	mov	r7, r6
 8019d66:	dc04      	bgt.n	8019d72 <__swbuf_r+0x42>
 8019d68:	4621      	mov	r1, r4
 8019d6a:	4628      	mov	r0, r5
 8019d6c:	f000 f96c 	bl	801a048 <_fflush_r>
 8019d70:	bb30      	cbnz	r0, 8019dc0 <__swbuf_r+0x90>
 8019d72:	68a3      	ldr	r3, [r4, #8]
 8019d74:	3b01      	subs	r3, #1
 8019d76:	60a3      	str	r3, [r4, #8]
 8019d78:	6823      	ldr	r3, [r4, #0]
 8019d7a:	1c5a      	adds	r2, r3, #1
 8019d7c:	6022      	str	r2, [r4, #0]
 8019d7e:	701e      	strb	r6, [r3, #0]
 8019d80:	6963      	ldr	r3, [r4, #20]
 8019d82:	3001      	adds	r0, #1
 8019d84:	4283      	cmp	r3, r0
 8019d86:	d004      	beq.n	8019d92 <__swbuf_r+0x62>
 8019d88:	89a3      	ldrh	r3, [r4, #12]
 8019d8a:	07db      	lsls	r3, r3, #31
 8019d8c:	d506      	bpl.n	8019d9c <__swbuf_r+0x6c>
 8019d8e:	2e0a      	cmp	r6, #10
 8019d90:	d104      	bne.n	8019d9c <__swbuf_r+0x6c>
 8019d92:	4621      	mov	r1, r4
 8019d94:	4628      	mov	r0, r5
 8019d96:	f000 f957 	bl	801a048 <_fflush_r>
 8019d9a:	b988      	cbnz	r0, 8019dc0 <__swbuf_r+0x90>
 8019d9c:	4638      	mov	r0, r7
 8019d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019da0:	4b0a      	ldr	r3, [pc, #40]	; (8019dcc <__swbuf_r+0x9c>)
 8019da2:	429c      	cmp	r4, r3
 8019da4:	d101      	bne.n	8019daa <__swbuf_r+0x7a>
 8019da6:	68ac      	ldr	r4, [r5, #8]
 8019da8:	e7cf      	b.n	8019d4a <__swbuf_r+0x1a>
 8019daa:	4b09      	ldr	r3, [pc, #36]	; (8019dd0 <__swbuf_r+0xa0>)
 8019dac:	429c      	cmp	r4, r3
 8019dae:	bf08      	it	eq
 8019db0:	68ec      	ldreq	r4, [r5, #12]
 8019db2:	e7ca      	b.n	8019d4a <__swbuf_r+0x1a>
 8019db4:	4621      	mov	r1, r4
 8019db6:	4628      	mov	r0, r5
 8019db8:	f000 f81e 	bl	8019df8 <__swsetup_r>
 8019dbc:	2800      	cmp	r0, #0
 8019dbe:	d0cb      	beq.n	8019d58 <__swbuf_r+0x28>
 8019dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8019dc4:	e7ea      	b.n	8019d9c <__swbuf_r+0x6c>
 8019dc6:	bf00      	nop
 8019dc8:	0801dbdc 	.word	0x0801dbdc
 8019dcc:	0801dbfc 	.word	0x0801dbfc
 8019dd0:	0801dbbc 	.word	0x0801dbbc

08019dd4 <_write_r>:
 8019dd4:	b538      	push	{r3, r4, r5, lr}
 8019dd6:	4d07      	ldr	r5, [pc, #28]	; (8019df4 <_write_r+0x20>)
 8019dd8:	4604      	mov	r4, r0
 8019dda:	4608      	mov	r0, r1
 8019ddc:	4611      	mov	r1, r2
 8019dde:	2200      	movs	r2, #0
 8019de0:	602a      	str	r2, [r5, #0]
 8019de2:	461a      	mov	r2, r3
 8019de4:	f7e8 fcbd 	bl	8002762 <_write>
 8019de8:	1c43      	adds	r3, r0, #1
 8019dea:	d102      	bne.n	8019df2 <_write_r+0x1e>
 8019dec:	682b      	ldr	r3, [r5, #0]
 8019dee:	b103      	cbz	r3, 8019df2 <_write_r+0x1e>
 8019df0:	6023      	str	r3, [r4, #0]
 8019df2:	bd38      	pop	{r3, r4, r5, pc}
 8019df4:	2000dc04 	.word	0x2000dc04

08019df8 <__swsetup_r>:
 8019df8:	4b32      	ldr	r3, [pc, #200]	; (8019ec4 <__swsetup_r+0xcc>)
 8019dfa:	b570      	push	{r4, r5, r6, lr}
 8019dfc:	681d      	ldr	r5, [r3, #0]
 8019dfe:	4606      	mov	r6, r0
 8019e00:	460c      	mov	r4, r1
 8019e02:	b125      	cbz	r5, 8019e0e <__swsetup_r+0x16>
 8019e04:	69ab      	ldr	r3, [r5, #24]
 8019e06:	b913      	cbnz	r3, 8019e0e <__swsetup_r+0x16>
 8019e08:	4628      	mov	r0, r5
 8019e0a:	f7ff fb9b 	bl	8019544 <__sinit>
 8019e0e:	4b2e      	ldr	r3, [pc, #184]	; (8019ec8 <__swsetup_r+0xd0>)
 8019e10:	429c      	cmp	r4, r3
 8019e12:	d10f      	bne.n	8019e34 <__swsetup_r+0x3c>
 8019e14:	686c      	ldr	r4, [r5, #4]
 8019e16:	89a3      	ldrh	r3, [r4, #12]
 8019e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e1c:	0719      	lsls	r1, r3, #28
 8019e1e:	d42c      	bmi.n	8019e7a <__swsetup_r+0x82>
 8019e20:	06dd      	lsls	r5, r3, #27
 8019e22:	d411      	bmi.n	8019e48 <__swsetup_r+0x50>
 8019e24:	2309      	movs	r3, #9
 8019e26:	6033      	str	r3, [r6, #0]
 8019e28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019e2c:	81a3      	strh	r3, [r4, #12]
 8019e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8019e32:	e03e      	b.n	8019eb2 <__swsetup_r+0xba>
 8019e34:	4b25      	ldr	r3, [pc, #148]	; (8019ecc <__swsetup_r+0xd4>)
 8019e36:	429c      	cmp	r4, r3
 8019e38:	d101      	bne.n	8019e3e <__swsetup_r+0x46>
 8019e3a:	68ac      	ldr	r4, [r5, #8]
 8019e3c:	e7eb      	b.n	8019e16 <__swsetup_r+0x1e>
 8019e3e:	4b24      	ldr	r3, [pc, #144]	; (8019ed0 <__swsetup_r+0xd8>)
 8019e40:	429c      	cmp	r4, r3
 8019e42:	bf08      	it	eq
 8019e44:	68ec      	ldreq	r4, [r5, #12]
 8019e46:	e7e6      	b.n	8019e16 <__swsetup_r+0x1e>
 8019e48:	0758      	lsls	r0, r3, #29
 8019e4a:	d512      	bpl.n	8019e72 <__swsetup_r+0x7a>
 8019e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e4e:	b141      	cbz	r1, 8019e62 <__swsetup_r+0x6a>
 8019e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e54:	4299      	cmp	r1, r3
 8019e56:	d002      	beq.n	8019e5e <__swsetup_r+0x66>
 8019e58:	4630      	mov	r0, r6
 8019e5a:	f000 f9cf 	bl	801a1fc <_free_r>
 8019e5e:	2300      	movs	r3, #0
 8019e60:	6363      	str	r3, [r4, #52]	; 0x34
 8019e62:	89a3      	ldrh	r3, [r4, #12]
 8019e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019e68:	81a3      	strh	r3, [r4, #12]
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	6063      	str	r3, [r4, #4]
 8019e6e:	6923      	ldr	r3, [r4, #16]
 8019e70:	6023      	str	r3, [r4, #0]
 8019e72:	89a3      	ldrh	r3, [r4, #12]
 8019e74:	f043 0308 	orr.w	r3, r3, #8
 8019e78:	81a3      	strh	r3, [r4, #12]
 8019e7a:	6923      	ldr	r3, [r4, #16]
 8019e7c:	b94b      	cbnz	r3, 8019e92 <__swsetup_r+0x9a>
 8019e7e:	89a3      	ldrh	r3, [r4, #12]
 8019e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e88:	d003      	beq.n	8019e92 <__swsetup_r+0x9a>
 8019e8a:	4621      	mov	r1, r4
 8019e8c:	4630      	mov	r0, r6
 8019e8e:	f000 f961 	bl	801a154 <__smakebuf_r>
 8019e92:	89a0      	ldrh	r0, [r4, #12]
 8019e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e98:	f010 0301 	ands.w	r3, r0, #1
 8019e9c:	d00a      	beq.n	8019eb4 <__swsetup_r+0xbc>
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	60a3      	str	r3, [r4, #8]
 8019ea2:	6963      	ldr	r3, [r4, #20]
 8019ea4:	425b      	negs	r3, r3
 8019ea6:	61a3      	str	r3, [r4, #24]
 8019ea8:	6923      	ldr	r3, [r4, #16]
 8019eaa:	b943      	cbnz	r3, 8019ebe <__swsetup_r+0xc6>
 8019eac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019eb0:	d1ba      	bne.n	8019e28 <__swsetup_r+0x30>
 8019eb2:	bd70      	pop	{r4, r5, r6, pc}
 8019eb4:	0781      	lsls	r1, r0, #30
 8019eb6:	bf58      	it	pl
 8019eb8:	6963      	ldrpl	r3, [r4, #20]
 8019eba:	60a3      	str	r3, [r4, #8]
 8019ebc:	e7f4      	b.n	8019ea8 <__swsetup_r+0xb0>
 8019ebe:	2000      	movs	r0, #0
 8019ec0:	e7f7      	b.n	8019eb2 <__swsetup_r+0xba>
 8019ec2:	bf00      	nop
 8019ec4:	2000016c 	.word	0x2000016c
 8019ec8:	0801dbdc 	.word	0x0801dbdc
 8019ecc:	0801dbfc 	.word	0x0801dbfc
 8019ed0:	0801dbbc 	.word	0x0801dbbc

08019ed4 <__assert_func>:
 8019ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019ed6:	4614      	mov	r4, r2
 8019ed8:	461a      	mov	r2, r3
 8019eda:	4b09      	ldr	r3, [pc, #36]	; (8019f00 <__assert_func+0x2c>)
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	4605      	mov	r5, r0
 8019ee0:	68d8      	ldr	r0, [r3, #12]
 8019ee2:	b14c      	cbz	r4, 8019ef8 <__assert_func+0x24>
 8019ee4:	4b07      	ldr	r3, [pc, #28]	; (8019f04 <__assert_func+0x30>)
 8019ee6:	9100      	str	r1, [sp, #0]
 8019ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019eec:	4906      	ldr	r1, [pc, #24]	; (8019f08 <__assert_func+0x34>)
 8019eee:	462b      	mov	r3, r5
 8019ef0:	f000 f8e6 	bl	801a0c0 <fiprintf>
 8019ef4:	f000 fe2a 	bl	801ab4c <abort>
 8019ef8:	4b04      	ldr	r3, [pc, #16]	; (8019f0c <__assert_func+0x38>)
 8019efa:	461c      	mov	r4, r3
 8019efc:	e7f3      	b.n	8019ee6 <__assert_func+0x12>
 8019efe:	bf00      	nop
 8019f00:	2000016c 	.word	0x2000016c
 8019f04:	0801dc92 	.word	0x0801dc92
 8019f08:	0801dc9f 	.word	0x0801dc9f
 8019f0c:	0801dccd 	.word	0x0801dccd

08019f10 <_close_r>:
 8019f10:	b538      	push	{r3, r4, r5, lr}
 8019f12:	4d06      	ldr	r5, [pc, #24]	; (8019f2c <_close_r+0x1c>)
 8019f14:	2300      	movs	r3, #0
 8019f16:	4604      	mov	r4, r0
 8019f18:	4608      	mov	r0, r1
 8019f1a:	602b      	str	r3, [r5, #0]
 8019f1c:	f7e8 fc3d 	bl	800279a <_close>
 8019f20:	1c43      	adds	r3, r0, #1
 8019f22:	d102      	bne.n	8019f2a <_close_r+0x1a>
 8019f24:	682b      	ldr	r3, [r5, #0]
 8019f26:	b103      	cbz	r3, 8019f2a <_close_r+0x1a>
 8019f28:	6023      	str	r3, [r4, #0]
 8019f2a:	bd38      	pop	{r3, r4, r5, pc}
 8019f2c:	2000dc04 	.word	0x2000dc04

08019f30 <__errno>:
 8019f30:	4b01      	ldr	r3, [pc, #4]	; (8019f38 <__errno+0x8>)
 8019f32:	6818      	ldr	r0, [r3, #0]
 8019f34:	4770      	bx	lr
 8019f36:	bf00      	nop
 8019f38:	2000016c 	.word	0x2000016c

08019f3c <__sflush_r>:
 8019f3c:	898a      	ldrh	r2, [r1, #12]
 8019f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f42:	4605      	mov	r5, r0
 8019f44:	0710      	lsls	r0, r2, #28
 8019f46:	460c      	mov	r4, r1
 8019f48:	d458      	bmi.n	8019ffc <__sflush_r+0xc0>
 8019f4a:	684b      	ldr	r3, [r1, #4]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	dc05      	bgt.n	8019f5c <__sflush_r+0x20>
 8019f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	dc02      	bgt.n	8019f5c <__sflush_r+0x20>
 8019f56:	2000      	movs	r0, #0
 8019f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f5e:	2e00      	cmp	r6, #0
 8019f60:	d0f9      	beq.n	8019f56 <__sflush_r+0x1a>
 8019f62:	2300      	movs	r3, #0
 8019f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019f68:	682f      	ldr	r7, [r5, #0]
 8019f6a:	602b      	str	r3, [r5, #0]
 8019f6c:	d032      	beq.n	8019fd4 <__sflush_r+0x98>
 8019f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019f70:	89a3      	ldrh	r3, [r4, #12]
 8019f72:	075a      	lsls	r2, r3, #29
 8019f74:	d505      	bpl.n	8019f82 <__sflush_r+0x46>
 8019f76:	6863      	ldr	r3, [r4, #4]
 8019f78:	1ac0      	subs	r0, r0, r3
 8019f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f7c:	b10b      	cbz	r3, 8019f82 <__sflush_r+0x46>
 8019f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019f80:	1ac0      	subs	r0, r0, r3
 8019f82:	2300      	movs	r3, #0
 8019f84:	4602      	mov	r2, r0
 8019f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f88:	6a21      	ldr	r1, [r4, #32]
 8019f8a:	4628      	mov	r0, r5
 8019f8c:	47b0      	blx	r6
 8019f8e:	1c43      	adds	r3, r0, #1
 8019f90:	89a3      	ldrh	r3, [r4, #12]
 8019f92:	d106      	bne.n	8019fa2 <__sflush_r+0x66>
 8019f94:	6829      	ldr	r1, [r5, #0]
 8019f96:	291d      	cmp	r1, #29
 8019f98:	d82c      	bhi.n	8019ff4 <__sflush_r+0xb8>
 8019f9a:	4a2a      	ldr	r2, [pc, #168]	; (801a044 <__sflush_r+0x108>)
 8019f9c:	40ca      	lsrs	r2, r1
 8019f9e:	07d6      	lsls	r6, r2, #31
 8019fa0:	d528      	bpl.n	8019ff4 <__sflush_r+0xb8>
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	6062      	str	r2, [r4, #4]
 8019fa6:	04d9      	lsls	r1, r3, #19
 8019fa8:	6922      	ldr	r2, [r4, #16]
 8019faa:	6022      	str	r2, [r4, #0]
 8019fac:	d504      	bpl.n	8019fb8 <__sflush_r+0x7c>
 8019fae:	1c42      	adds	r2, r0, #1
 8019fb0:	d101      	bne.n	8019fb6 <__sflush_r+0x7a>
 8019fb2:	682b      	ldr	r3, [r5, #0]
 8019fb4:	b903      	cbnz	r3, 8019fb8 <__sflush_r+0x7c>
 8019fb6:	6560      	str	r0, [r4, #84]	; 0x54
 8019fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fba:	602f      	str	r7, [r5, #0]
 8019fbc:	2900      	cmp	r1, #0
 8019fbe:	d0ca      	beq.n	8019f56 <__sflush_r+0x1a>
 8019fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fc4:	4299      	cmp	r1, r3
 8019fc6:	d002      	beq.n	8019fce <__sflush_r+0x92>
 8019fc8:	4628      	mov	r0, r5
 8019fca:	f000 f917 	bl	801a1fc <_free_r>
 8019fce:	2000      	movs	r0, #0
 8019fd0:	6360      	str	r0, [r4, #52]	; 0x34
 8019fd2:	e7c1      	b.n	8019f58 <__sflush_r+0x1c>
 8019fd4:	6a21      	ldr	r1, [r4, #32]
 8019fd6:	2301      	movs	r3, #1
 8019fd8:	4628      	mov	r0, r5
 8019fda:	47b0      	blx	r6
 8019fdc:	1c41      	adds	r1, r0, #1
 8019fde:	d1c7      	bne.n	8019f70 <__sflush_r+0x34>
 8019fe0:	682b      	ldr	r3, [r5, #0]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d0c4      	beq.n	8019f70 <__sflush_r+0x34>
 8019fe6:	2b1d      	cmp	r3, #29
 8019fe8:	d001      	beq.n	8019fee <__sflush_r+0xb2>
 8019fea:	2b16      	cmp	r3, #22
 8019fec:	d101      	bne.n	8019ff2 <__sflush_r+0xb6>
 8019fee:	602f      	str	r7, [r5, #0]
 8019ff0:	e7b1      	b.n	8019f56 <__sflush_r+0x1a>
 8019ff2:	89a3      	ldrh	r3, [r4, #12]
 8019ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ff8:	81a3      	strh	r3, [r4, #12]
 8019ffa:	e7ad      	b.n	8019f58 <__sflush_r+0x1c>
 8019ffc:	690f      	ldr	r7, [r1, #16]
 8019ffe:	2f00      	cmp	r7, #0
 801a000:	d0a9      	beq.n	8019f56 <__sflush_r+0x1a>
 801a002:	0793      	lsls	r3, r2, #30
 801a004:	680e      	ldr	r6, [r1, #0]
 801a006:	bf08      	it	eq
 801a008:	694b      	ldreq	r3, [r1, #20]
 801a00a:	600f      	str	r7, [r1, #0]
 801a00c:	bf18      	it	ne
 801a00e:	2300      	movne	r3, #0
 801a010:	eba6 0807 	sub.w	r8, r6, r7
 801a014:	608b      	str	r3, [r1, #8]
 801a016:	f1b8 0f00 	cmp.w	r8, #0
 801a01a:	dd9c      	ble.n	8019f56 <__sflush_r+0x1a>
 801a01c:	6a21      	ldr	r1, [r4, #32]
 801a01e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a020:	4643      	mov	r3, r8
 801a022:	463a      	mov	r2, r7
 801a024:	4628      	mov	r0, r5
 801a026:	47b0      	blx	r6
 801a028:	2800      	cmp	r0, #0
 801a02a:	dc06      	bgt.n	801a03a <__sflush_r+0xfe>
 801a02c:	89a3      	ldrh	r3, [r4, #12]
 801a02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a032:	81a3      	strh	r3, [r4, #12]
 801a034:	f04f 30ff 	mov.w	r0, #4294967295
 801a038:	e78e      	b.n	8019f58 <__sflush_r+0x1c>
 801a03a:	4407      	add	r7, r0
 801a03c:	eba8 0800 	sub.w	r8, r8, r0
 801a040:	e7e9      	b.n	801a016 <__sflush_r+0xda>
 801a042:	bf00      	nop
 801a044:	20400001 	.word	0x20400001

0801a048 <_fflush_r>:
 801a048:	b538      	push	{r3, r4, r5, lr}
 801a04a:	690b      	ldr	r3, [r1, #16]
 801a04c:	4605      	mov	r5, r0
 801a04e:	460c      	mov	r4, r1
 801a050:	b913      	cbnz	r3, 801a058 <_fflush_r+0x10>
 801a052:	2500      	movs	r5, #0
 801a054:	4628      	mov	r0, r5
 801a056:	bd38      	pop	{r3, r4, r5, pc}
 801a058:	b118      	cbz	r0, 801a062 <_fflush_r+0x1a>
 801a05a:	6983      	ldr	r3, [r0, #24]
 801a05c:	b90b      	cbnz	r3, 801a062 <_fflush_r+0x1a>
 801a05e:	f7ff fa71 	bl	8019544 <__sinit>
 801a062:	4b14      	ldr	r3, [pc, #80]	; (801a0b4 <_fflush_r+0x6c>)
 801a064:	429c      	cmp	r4, r3
 801a066:	d11b      	bne.n	801a0a0 <_fflush_r+0x58>
 801a068:	686c      	ldr	r4, [r5, #4]
 801a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d0ef      	beq.n	801a052 <_fflush_r+0xa>
 801a072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a074:	07d0      	lsls	r0, r2, #31
 801a076:	d404      	bmi.n	801a082 <_fflush_r+0x3a>
 801a078:	0599      	lsls	r1, r3, #22
 801a07a:	d402      	bmi.n	801a082 <_fflush_r+0x3a>
 801a07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a07e:	f7ff fb24 	bl	80196ca <__retarget_lock_acquire_recursive>
 801a082:	4628      	mov	r0, r5
 801a084:	4621      	mov	r1, r4
 801a086:	f7ff ff59 	bl	8019f3c <__sflush_r>
 801a08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a08c:	07da      	lsls	r2, r3, #31
 801a08e:	4605      	mov	r5, r0
 801a090:	d4e0      	bmi.n	801a054 <_fflush_r+0xc>
 801a092:	89a3      	ldrh	r3, [r4, #12]
 801a094:	059b      	lsls	r3, r3, #22
 801a096:	d4dd      	bmi.n	801a054 <_fflush_r+0xc>
 801a098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a09a:	f7ff fb17 	bl	80196cc <__retarget_lock_release_recursive>
 801a09e:	e7d9      	b.n	801a054 <_fflush_r+0xc>
 801a0a0:	4b05      	ldr	r3, [pc, #20]	; (801a0b8 <_fflush_r+0x70>)
 801a0a2:	429c      	cmp	r4, r3
 801a0a4:	d101      	bne.n	801a0aa <_fflush_r+0x62>
 801a0a6:	68ac      	ldr	r4, [r5, #8]
 801a0a8:	e7df      	b.n	801a06a <_fflush_r+0x22>
 801a0aa:	4b04      	ldr	r3, [pc, #16]	; (801a0bc <_fflush_r+0x74>)
 801a0ac:	429c      	cmp	r4, r3
 801a0ae:	bf08      	it	eq
 801a0b0:	68ec      	ldreq	r4, [r5, #12]
 801a0b2:	e7da      	b.n	801a06a <_fflush_r+0x22>
 801a0b4:	0801dbdc 	.word	0x0801dbdc
 801a0b8:	0801dbfc 	.word	0x0801dbfc
 801a0bc:	0801dbbc 	.word	0x0801dbbc

0801a0c0 <fiprintf>:
 801a0c0:	b40e      	push	{r1, r2, r3}
 801a0c2:	b503      	push	{r0, r1, lr}
 801a0c4:	4601      	mov	r1, r0
 801a0c6:	ab03      	add	r3, sp, #12
 801a0c8:	4805      	ldr	r0, [pc, #20]	; (801a0e0 <fiprintf+0x20>)
 801a0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0ce:	6800      	ldr	r0, [r0, #0]
 801a0d0:	9301      	str	r3, [sp, #4]
 801a0d2:	f000 fa65 	bl	801a5a0 <_vfiprintf_r>
 801a0d6:	b002      	add	sp, #8
 801a0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0dc:	b003      	add	sp, #12
 801a0de:	4770      	bx	lr
 801a0e0:	2000016c 	.word	0x2000016c

0801a0e4 <_lseek_r>:
 801a0e4:	b538      	push	{r3, r4, r5, lr}
 801a0e6:	4d07      	ldr	r5, [pc, #28]	; (801a104 <_lseek_r+0x20>)
 801a0e8:	4604      	mov	r4, r0
 801a0ea:	4608      	mov	r0, r1
 801a0ec:	4611      	mov	r1, r2
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	602a      	str	r2, [r5, #0]
 801a0f2:	461a      	mov	r2, r3
 801a0f4:	f7e8 fb78 	bl	80027e8 <_lseek>
 801a0f8:	1c43      	adds	r3, r0, #1
 801a0fa:	d102      	bne.n	801a102 <_lseek_r+0x1e>
 801a0fc:	682b      	ldr	r3, [r5, #0]
 801a0fe:	b103      	cbz	r3, 801a102 <_lseek_r+0x1e>
 801a100:	6023      	str	r3, [r4, #0]
 801a102:	bd38      	pop	{r3, r4, r5, pc}
 801a104:	2000dc04 	.word	0x2000dc04

0801a108 <__swhatbuf_r>:
 801a108:	b570      	push	{r4, r5, r6, lr}
 801a10a:	460e      	mov	r6, r1
 801a10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a110:	2900      	cmp	r1, #0
 801a112:	b096      	sub	sp, #88	; 0x58
 801a114:	4614      	mov	r4, r2
 801a116:	461d      	mov	r5, r3
 801a118:	da08      	bge.n	801a12c <__swhatbuf_r+0x24>
 801a11a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a11e:	2200      	movs	r2, #0
 801a120:	602a      	str	r2, [r5, #0]
 801a122:	061a      	lsls	r2, r3, #24
 801a124:	d410      	bmi.n	801a148 <__swhatbuf_r+0x40>
 801a126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a12a:	e00e      	b.n	801a14a <__swhatbuf_r+0x42>
 801a12c:	466a      	mov	r2, sp
 801a12e:	f000 fd15 	bl	801ab5c <_fstat_r>
 801a132:	2800      	cmp	r0, #0
 801a134:	dbf1      	blt.n	801a11a <__swhatbuf_r+0x12>
 801a136:	9a01      	ldr	r2, [sp, #4]
 801a138:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a13c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a140:	425a      	negs	r2, r3
 801a142:	415a      	adcs	r2, r3
 801a144:	602a      	str	r2, [r5, #0]
 801a146:	e7ee      	b.n	801a126 <__swhatbuf_r+0x1e>
 801a148:	2340      	movs	r3, #64	; 0x40
 801a14a:	2000      	movs	r0, #0
 801a14c:	6023      	str	r3, [r4, #0]
 801a14e:	b016      	add	sp, #88	; 0x58
 801a150:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a154 <__smakebuf_r>:
 801a154:	898b      	ldrh	r3, [r1, #12]
 801a156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a158:	079d      	lsls	r5, r3, #30
 801a15a:	4606      	mov	r6, r0
 801a15c:	460c      	mov	r4, r1
 801a15e:	d507      	bpl.n	801a170 <__smakebuf_r+0x1c>
 801a160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a164:	6023      	str	r3, [r4, #0]
 801a166:	6123      	str	r3, [r4, #16]
 801a168:	2301      	movs	r3, #1
 801a16a:	6163      	str	r3, [r4, #20]
 801a16c:	b002      	add	sp, #8
 801a16e:	bd70      	pop	{r4, r5, r6, pc}
 801a170:	ab01      	add	r3, sp, #4
 801a172:	466a      	mov	r2, sp
 801a174:	f7ff ffc8 	bl	801a108 <__swhatbuf_r>
 801a178:	9900      	ldr	r1, [sp, #0]
 801a17a:	4605      	mov	r5, r0
 801a17c:	4630      	mov	r0, r6
 801a17e:	f7ff fb07 	bl	8019790 <_malloc_r>
 801a182:	b948      	cbnz	r0, 801a198 <__smakebuf_r+0x44>
 801a184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a188:	059a      	lsls	r2, r3, #22
 801a18a:	d4ef      	bmi.n	801a16c <__smakebuf_r+0x18>
 801a18c:	f023 0303 	bic.w	r3, r3, #3
 801a190:	f043 0302 	orr.w	r3, r3, #2
 801a194:	81a3      	strh	r3, [r4, #12]
 801a196:	e7e3      	b.n	801a160 <__smakebuf_r+0xc>
 801a198:	4b0d      	ldr	r3, [pc, #52]	; (801a1d0 <__smakebuf_r+0x7c>)
 801a19a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a19c:	89a3      	ldrh	r3, [r4, #12]
 801a19e:	6020      	str	r0, [r4, #0]
 801a1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1a4:	81a3      	strh	r3, [r4, #12]
 801a1a6:	9b00      	ldr	r3, [sp, #0]
 801a1a8:	6163      	str	r3, [r4, #20]
 801a1aa:	9b01      	ldr	r3, [sp, #4]
 801a1ac:	6120      	str	r0, [r4, #16]
 801a1ae:	b15b      	cbz	r3, 801a1c8 <__smakebuf_r+0x74>
 801a1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1b4:	4630      	mov	r0, r6
 801a1b6:	f000 fce3 	bl	801ab80 <_isatty_r>
 801a1ba:	b128      	cbz	r0, 801a1c8 <__smakebuf_r+0x74>
 801a1bc:	89a3      	ldrh	r3, [r4, #12]
 801a1be:	f023 0303 	bic.w	r3, r3, #3
 801a1c2:	f043 0301 	orr.w	r3, r3, #1
 801a1c6:	81a3      	strh	r3, [r4, #12]
 801a1c8:	89a0      	ldrh	r0, [r4, #12]
 801a1ca:	4305      	orrs	r5, r0
 801a1cc:	81a5      	strh	r5, [r4, #12]
 801a1ce:	e7cd      	b.n	801a16c <__smakebuf_r+0x18>
 801a1d0:	080194dd 	.word	0x080194dd

0801a1d4 <malloc>:
 801a1d4:	4b02      	ldr	r3, [pc, #8]	; (801a1e0 <malloc+0xc>)
 801a1d6:	4601      	mov	r1, r0
 801a1d8:	6818      	ldr	r0, [r3, #0]
 801a1da:	f7ff bad9 	b.w	8019790 <_malloc_r>
 801a1de:	bf00      	nop
 801a1e0:	2000016c 	.word	0x2000016c

0801a1e4 <__malloc_lock>:
 801a1e4:	4801      	ldr	r0, [pc, #4]	; (801a1ec <__malloc_lock+0x8>)
 801a1e6:	f7ff ba70 	b.w	80196ca <__retarget_lock_acquire_recursive>
 801a1ea:	bf00      	nop
 801a1ec:	2000dbf8 	.word	0x2000dbf8

0801a1f0 <__malloc_unlock>:
 801a1f0:	4801      	ldr	r0, [pc, #4]	; (801a1f8 <__malloc_unlock+0x8>)
 801a1f2:	f7ff ba6b 	b.w	80196cc <__retarget_lock_release_recursive>
 801a1f6:	bf00      	nop
 801a1f8:	2000dbf8 	.word	0x2000dbf8

0801a1fc <_free_r>:
 801a1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1fe:	2900      	cmp	r1, #0
 801a200:	d044      	beq.n	801a28c <_free_r+0x90>
 801a202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a206:	9001      	str	r0, [sp, #4]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	f1a1 0404 	sub.w	r4, r1, #4
 801a20e:	bfb8      	it	lt
 801a210:	18e4      	addlt	r4, r4, r3
 801a212:	f7ff ffe7 	bl	801a1e4 <__malloc_lock>
 801a216:	4a1e      	ldr	r2, [pc, #120]	; (801a290 <_free_r+0x94>)
 801a218:	9801      	ldr	r0, [sp, #4]
 801a21a:	6813      	ldr	r3, [r2, #0]
 801a21c:	b933      	cbnz	r3, 801a22c <_free_r+0x30>
 801a21e:	6063      	str	r3, [r4, #4]
 801a220:	6014      	str	r4, [r2, #0]
 801a222:	b003      	add	sp, #12
 801a224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a228:	f7ff bfe2 	b.w	801a1f0 <__malloc_unlock>
 801a22c:	42a3      	cmp	r3, r4
 801a22e:	d908      	bls.n	801a242 <_free_r+0x46>
 801a230:	6825      	ldr	r5, [r4, #0]
 801a232:	1961      	adds	r1, r4, r5
 801a234:	428b      	cmp	r3, r1
 801a236:	bf01      	itttt	eq
 801a238:	6819      	ldreq	r1, [r3, #0]
 801a23a:	685b      	ldreq	r3, [r3, #4]
 801a23c:	1949      	addeq	r1, r1, r5
 801a23e:	6021      	streq	r1, [r4, #0]
 801a240:	e7ed      	b.n	801a21e <_free_r+0x22>
 801a242:	461a      	mov	r2, r3
 801a244:	685b      	ldr	r3, [r3, #4]
 801a246:	b10b      	cbz	r3, 801a24c <_free_r+0x50>
 801a248:	42a3      	cmp	r3, r4
 801a24a:	d9fa      	bls.n	801a242 <_free_r+0x46>
 801a24c:	6811      	ldr	r1, [r2, #0]
 801a24e:	1855      	adds	r5, r2, r1
 801a250:	42a5      	cmp	r5, r4
 801a252:	d10b      	bne.n	801a26c <_free_r+0x70>
 801a254:	6824      	ldr	r4, [r4, #0]
 801a256:	4421      	add	r1, r4
 801a258:	1854      	adds	r4, r2, r1
 801a25a:	42a3      	cmp	r3, r4
 801a25c:	6011      	str	r1, [r2, #0]
 801a25e:	d1e0      	bne.n	801a222 <_free_r+0x26>
 801a260:	681c      	ldr	r4, [r3, #0]
 801a262:	685b      	ldr	r3, [r3, #4]
 801a264:	6053      	str	r3, [r2, #4]
 801a266:	4421      	add	r1, r4
 801a268:	6011      	str	r1, [r2, #0]
 801a26a:	e7da      	b.n	801a222 <_free_r+0x26>
 801a26c:	d902      	bls.n	801a274 <_free_r+0x78>
 801a26e:	230c      	movs	r3, #12
 801a270:	6003      	str	r3, [r0, #0]
 801a272:	e7d6      	b.n	801a222 <_free_r+0x26>
 801a274:	6825      	ldr	r5, [r4, #0]
 801a276:	1961      	adds	r1, r4, r5
 801a278:	428b      	cmp	r3, r1
 801a27a:	bf04      	itt	eq
 801a27c:	6819      	ldreq	r1, [r3, #0]
 801a27e:	685b      	ldreq	r3, [r3, #4]
 801a280:	6063      	str	r3, [r4, #4]
 801a282:	bf04      	itt	eq
 801a284:	1949      	addeq	r1, r1, r5
 801a286:	6021      	streq	r1, [r4, #0]
 801a288:	6054      	str	r4, [r2, #4]
 801a28a:	e7ca      	b.n	801a222 <_free_r+0x26>
 801a28c:	b003      	add	sp, #12
 801a28e:	bd30      	pop	{r4, r5, pc}
 801a290:	2000dbfc 	.word	0x2000dbfc

0801a294 <__ssputs_r>:
 801a294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a298:	688e      	ldr	r6, [r1, #8]
 801a29a:	429e      	cmp	r6, r3
 801a29c:	4682      	mov	sl, r0
 801a29e:	460c      	mov	r4, r1
 801a2a0:	4690      	mov	r8, r2
 801a2a2:	461f      	mov	r7, r3
 801a2a4:	d838      	bhi.n	801a318 <__ssputs_r+0x84>
 801a2a6:	898a      	ldrh	r2, [r1, #12]
 801a2a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a2ac:	d032      	beq.n	801a314 <__ssputs_r+0x80>
 801a2ae:	6825      	ldr	r5, [r4, #0]
 801a2b0:	6909      	ldr	r1, [r1, #16]
 801a2b2:	eba5 0901 	sub.w	r9, r5, r1
 801a2b6:	6965      	ldr	r5, [r4, #20]
 801a2b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a2bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a2c0:	3301      	adds	r3, #1
 801a2c2:	444b      	add	r3, r9
 801a2c4:	106d      	asrs	r5, r5, #1
 801a2c6:	429d      	cmp	r5, r3
 801a2c8:	bf38      	it	cc
 801a2ca:	461d      	movcc	r5, r3
 801a2cc:	0553      	lsls	r3, r2, #21
 801a2ce:	d531      	bpl.n	801a334 <__ssputs_r+0xa0>
 801a2d0:	4629      	mov	r1, r5
 801a2d2:	f7ff fa5d 	bl	8019790 <_malloc_r>
 801a2d6:	4606      	mov	r6, r0
 801a2d8:	b950      	cbnz	r0, 801a2f0 <__ssputs_r+0x5c>
 801a2da:	230c      	movs	r3, #12
 801a2dc:	f8ca 3000 	str.w	r3, [sl]
 801a2e0:	89a3      	ldrh	r3, [r4, #12]
 801a2e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2e6:	81a3      	strh	r3, [r4, #12]
 801a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2f0:	6921      	ldr	r1, [r4, #16]
 801a2f2:	464a      	mov	r2, r9
 801a2f4:	f7ff f9fb 	bl	80196ee <memcpy>
 801a2f8:	89a3      	ldrh	r3, [r4, #12]
 801a2fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a302:	81a3      	strh	r3, [r4, #12]
 801a304:	6126      	str	r6, [r4, #16]
 801a306:	6165      	str	r5, [r4, #20]
 801a308:	444e      	add	r6, r9
 801a30a:	eba5 0509 	sub.w	r5, r5, r9
 801a30e:	6026      	str	r6, [r4, #0]
 801a310:	60a5      	str	r5, [r4, #8]
 801a312:	463e      	mov	r6, r7
 801a314:	42be      	cmp	r6, r7
 801a316:	d900      	bls.n	801a31a <__ssputs_r+0x86>
 801a318:	463e      	mov	r6, r7
 801a31a:	6820      	ldr	r0, [r4, #0]
 801a31c:	4632      	mov	r2, r6
 801a31e:	4641      	mov	r1, r8
 801a320:	f7ff f9f3 	bl	801970a <memmove>
 801a324:	68a3      	ldr	r3, [r4, #8]
 801a326:	1b9b      	subs	r3, r3, r6
 801a328:	60a3      	str	r3, [r4, #8]
 801a32a:	6823      	ldr	r3, [r4, #0]
 801a32c:	4433      	add	r3, r6
 801a32e:	6023      	str	r3, [r4, #0]
 801a330:	2000      	movs	r0, #0
 801a332:	e7db      	b.n	801a2ec <__ssputs_r+0x58>
 801a334:	462a      	mov	r2, r5
 801a336:	f000 fc33 	bl	801aba0 <_realloc_r>
 801a33a:	4606      	mov	r6, r0
 801a33c:	2800      	cmp	r0, #0
 801a33e:	d1e1      	bne.n	801a304 <__ssputs_r+0x70>
 801a340:	6921      	ldr	r1, [r4, #16]
 801a342:	4650      	mov	r0, sl
 801a344:	f7ff ff5a 	bl	801a1fc <_free_r>
 801a348:	e7c7      	b.n	801a2da <__ssputs_r+0x46>
	...

0801a34c <_svfiprintf_r>:
 801a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a350:	4698      	mov	r8, r3
 801a352:	898b      	ldrh	r3, [r1, #12]
 801a354:	061b      	lsls	r3, r3, #24
 801a356:	b09d      	sub	sp, #116	; 0x74
 801a358:	4607      	mov	r7, r0
 801a35a:	460d      	mov	r5, r1
 801a35c:	4614      	mov	r4, r2
 801a35e:	d50e      	bpl.n	801a37e <_svfiprintf_r+0x32>
 801a360:	690b      	ldr	r3, [r1, #16]
 801a362:	b963      	cbnz	r3, 801a37e <_svfiprintf_r+0x32>
 801a364:	2140      	movs	r1, #64	; 0x40
 801a366:	f7ff fa13 	bl	8019790 <_malloc_r>
 801a36a:	6028      	str	r0, [r5, #0]
 801a36c:	6128      	str	r0, [r5, #16]
 801a36e:	b920      	cbnz	r0, 801a37a <_svfiprintf_r+0x2e>
 801a370:	230c      	movs	r3, #12
 801a372:	603b      	str	r3, [r7, #0]
 801a374:	f04f 30ff 	mov.w	r0, #4294967295
 801a378:	e0d1      	b.n	801a51e <_svfiprintf_r+0x1d2>
 801a37a:	2340      	movs	r3, #64	; 0x40
 801a37c:	616b      	str	r3, [r5, #20]
 801a37e:	2300      	movs	r3, #0
 801a380:	9309      	str	r3, [sp, #36]	; 0x24
 801a382:	2320      	movs	r3, #32
 801a384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a388:	f8cd 800c 	str.w	r8, [sp, #12]
 801a38c:	2330      	movs	r3, #48	; 0x30
 801a38e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a538 <_svfiprintf_r+0x1ec>
 801a392:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a396:	f04f 0901 	mov.w	r9, #1
 801a39a:	4623      	mov	r3, r4
 801a39c:	469a      	mov	sl, r3
 801a39e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3a2:	b10a      	cbz	r2, 801a3a8 <_svfiprintf_r+0x5c>
 801a3a4:	2a25      	cmp	r2, #37	; 0x25
 801a3a6:	d1f9      	bne.n	801a39c <_svfiprintf_r+0x50>
 801a3a8:	ebba 0b04 	subs.w	fp, sl, r4
 801a3ac:	d00b      	beq.n	801a3c6 <_svfiprintf_r+0x7a>
 801a3ae:	465b      	mov	r3, fp
 801a3b0:	4622      	mov	r2, r4
 801a3b2:	4629      	mov	r1, r5
 801a3b4:	4638      	mov	r0, r7
 801a3b6:	f7ff ff6d 	bl	801a294 <__ssputs_r>
 801a3ba:	3001      	adds	r0, #1
 801a3bc:	f000 80aa 	beq.w	801a514 <_svfiprintf_r+0x1c8>
 801a3c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3c2:	445a      	add	r2, fp
 801a3c4:	9209      	str	r2, [sp, #36]	; 0x24
 801a3c6:	f89a 3000 	ldrb.w	r3, [sl]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	f000 80a2 	beq.w	801a514 <_svfiprintf_r+0x1c8>
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a3d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3da:	f10a 0a01 	add.w	sl, sl, #1
 801a3de:	9304      	str	r3, [sp, #16]
 801a3e0:	9307      	str	r3, [sp, #28]
 801a3e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a3e6:	931a      	str	r3, [sp, #104]	; 0x68
 801a3e8:	4654      	mov	r4, sl
 801a3ea:	2205      	movs	r2, #5
 801a3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3f0:	4851      	ldr	r0, [pc, #324]	; (801a538 <_svfiprintf_r+0x1ec>)
 801a3f2:	f7e5 ff05 	bl	8000200 <memchr>
 801a3f6:	9a04      	ldr	r2, [sp, #16]
 801a3f8:	b9d8      	cbnz	r0, 801a432 <_svfiprintf_r+0xe6>
 801a3fa:	06d0      	lsls	r0, r2, #27
 801a3fc:	bf44      	itt	mi
 801a3fe:	2320      	movmi	r3, #32
 801a400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a404:	0711      	lsls	r1, r2, #28
 801a406:	bf44      	itt	mi
 801a408:	232b      	movmi	r3, #43	; 0x2b
 801a40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a40e:	f89a 3000 	ldrb.w	r3, [sl]
 801a412:	2b2a      	cmp	r3, #42	; 0x2a
 801a414:	d015      	beq.n	801a442 <_svfiprintf_r+0xf6>
 801a416:	9a07      	ldr	r2, [sp, #28]
 801a418:	4654      	mov	r4, sl
 801a41a:	2000      	movs	r0, #0
 801a41c:	f04f 0c0a 	mov.w	ip, #10
 801a420:	4621      	mov	r1, r4
 801a422:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a426:	3b30      	subs	r3, #48	; 0x30
 801a428:	2b09      	cmp	r3, #9
 801a42a:	d94e      	bls.n	801a4ca <_svfiprintf_r+0x17e>
 801a42c:	b1b0      	cbz	r0, 801a45c <_svfiprintf_r+0x110>
 801a42e:	9207      	str	r2, [sp, #28]
 801a430:	e014      	b.n	801a45c <_svfiprintf_r+0x110>
 801a432:	eba0 0308 	sub.w	r3, r0, r8
 801a436:	fa09 f303 	lsl.w	r3, r9, r3
 801a43a:	4313      	orrs	r3, r2
 801a43c:	9304      	str	r3, [sp, #16]
 801a43e:	46a2      	mov	sl, r4
 801a440:	e7d2      	b.n	801a3e8 <_svfiprintf_r+0x9c>
 801a442:	9b03      	ldr	r3, [sp, #12]
 801a444:	1d19      	adds	r1, r3, #4
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	9103      	str	r1, [sp, #12]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	bfbb      	ittet	lt
 801a44e:	425b      	neglt	r3, r3
 801a450:	f042 0202 	orrlt.w	r2, r2, #2
 801a454:	9307      	strge	r3, [sp, #28]
 801a456:	9307      	strlt	r3, [sp, #28]
 801a458:	bfb8      	it	lt
 801a45a:	9204      	strlt	r2, [sp, #16]
 801a45c:	7823      	ldrb	r3, [r4, #0]
 801a45e:	2b2e      	cmp	r3, #46	; 0x2e
 801a460:	d10c      	bne.n	801a47c <_svfiprintf_r+0x130>
 801a462:	7863      	ldrb	r3, [r4, #1]
 801a464:	2b2a      	cmp	r3, #42	; 0x2a
 801a466:	d135      	bne.n	801a4d4 <_svfiprintf_r+0x188>
 801a468:	9b03      	ldr	r3, [sp, #12]
 801a46a:	1d1a      	adds	r2, r3, #4
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	9203      	str	r2, [sp, #12]
 801a470:	2b00      	cmp	r3, #0
 801a472:	bfb8      	it	lt
 801a474:	f04f 33ff 	movlt.w	r3, #4294967295
 801a478:	3402      	adds	r4, #2
 801a47a:	9305      	str	r3, [sp, #20]
 801a47c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a548 <_svfiprintf_r+0x1fc>
 801a480:	7821      	ldrb	r1, [r4, #0]
 801a482:	2203      	movs	r2, #3
 801a484:	4650      	mov	r0, sl
 801a486:	f7e5 febb 	bl	8000200 <memchr>
 801a48a:	b140      	cbz	r0, 801a49e <_svfiprintf_r+0x152>
 801a48c:	2340      	movs	r3, #64	; 0x40
 801a48e:	eba0 000a 	sub.w	r0, r0, sl
 801a492:	fa03 f000 	lsl.w	r0, r3, r0
 801a496:	9b04      	ldr	r3, [sp, #16]
 801a498:	4303      	orrs	r3, r0
 801a49a:	3401      	adds	r4, #1
 801a49c:	9304      	str	r3, [sp, #16]
 801a49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4a2:	4826      	ldr	r0, [pc, #152]	; (801a53c <_svfiprintf_r+0x1f0>)
 801a4a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a4a8:	2206      	movs	r2, #6
 801a4aa:	f7e5 fea9 	bl	8000200 <memchr>
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	d038      	beq.n	801a524 <_svfiprintf_r+0x1d8>
 801a4b2:	4b23      	ldr	r3, [pc, #140]	; (801a540 <_svfiprintf_r+0x1f4>)
 801a4b4:	bb1b      	cbnz	r3, 801a4fe <_svfiprintf_r+0x1b2>
 801a4b6:	9b03      	ldr	r3, [sp, #12]
 801a4b8:	3307      	adds	r3, #7
 801a4ba:	f023 0307 	bic.w	r3, r3, #7
 801a4be:	3308      	adds	r3, #8
 801a4c0:	9303      	str	r3, [sp, #12]
 801a4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4c4:	4433      	add	r3, r6
 801a4c6:	9309      	str	r3, [sp, #36]	; 0x24
 801a4c8:	e767      	b.n	801a39a <_svfiprintf_r+0x4e>
 801a4ca:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4ce:	460c      	mov	r4, r1
 801a4d0:	2001      	movs	r0, #1
 801a4d2:	e7a5      	b.n	801a420 <_svfiprintf_r+0xd4>
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	3401      	adds	r4, #1
 801a4d8:	9305      	str	r3, [sp, #20]
 801a4da:	4619      	mov	r1, r3
 801a4dc:	f04f 0c0a 	mov.w	ip, #10
 801a4e0:	4620      	mov	r0, r4
 801a4e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4e6:	3a30      	subs	r2, #48	; 0x30
 801a4e8:	2a09      	cmp	r2, #9
 801a4ea:	d903      	bls.n	801a4f4 <_svfiprintf_r+0x1a8>
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d0c5      	beq.n	801a47c <_svfiprintf_r+0x130>
 801a4f0:	9105      	str	r1, [sp, #20]
 801a4f2:	e7c3      	b.n	801a47c <_svfiprintf_r+0x130>
 801a4f4:	fb0c 2101 	mla	r1, ip, r1, r2
 801a4f8:	4604      	mov	r4, r0
 801a4fa:	2301      	movs	r3, #1
 801a4fc:	e7f0      	b.n	801a4e0 <_svfiprintf_r+0x194>
 801a4fe:	ab03      	add	r3, sp, #12
 801a500:	9300      	str	r3, [sp, #0]
 801a502:	462a      	mov	r2, r5
 801a504:	4b0f      	ldr	r3, [pc, #60]	; (801a544 <_svfiprintf_r+0x1f8>)
 801a506:	a904      	add	r1, sp, #16
 801a508:	4638      	mov	r0, r7
 801a50a:	f3af 8000 	nop.w
 801a50e:	1c42      	adds	r2, r0, #1
 801a510:	4606      	mov	r6, r0
 801a512:	d1d6      	bne.n	801a4c2 <_svfiprintf_r+0x176>
 801a514:	89ab      	ldrh	r3, [r5, #12]
 801a516:	065b      	lsls	r3, r3, #25
 801a518:	f53f af2c 	bmi.w	801a374 <_svfiprintf_r+0x28>
 801a51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a51e:	b01d      	add	sp, #116	; 0x74
 801a520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a524:	ab03      	add	r3, sp, #12
 801a526:	9300      	str	r3, [sp, #0]
 801a528:	462a      	mov	r2, r5
 801a52a:	4b06      	ldr	r3, [pc, #24]	; (801a544 <_svfiprintf_r+0x1f8>)
 801a52c:	a904      	add	r1, sp, #16
 801a52e:	4638      	mov	r0, r7
 801a530:	f000 f9d4 	bl	801a8dc <_printf_i>
 801a534:	e7eb      	b.n	801a50e <_svfiprintf_r+0x1c2>
 801a536:	bf00      	nop
 801a538:	0801dcce 	.word	0x0801dcce
 801a53c:	0801dcd8 	.word	0x0801dcd8
 801a540:	00000000 	.word	0x00000000
 801a544:	0801a295 	.word	0x0801a295
 801a548:	0801dcd4 	.word	0x0801dcd4

0801a54c <__sfputc_r>:
 801a54c:	6893      	ldr	r3, [r2, #8]
 801a54e:	3b01      	subs	r3, #1
 801a550:	2b00      	cmp	r3, #0
 801a552:	b410      	push	{r4}
 801a554:	6093      	str	r3, [r2, #8]
 801a556:	da08      	bge.n	801a56a <__sfputc_r+0x1e>
 801a558:	6994      	ldr	r4, [r2, #24]
 801a55a:	42a3      	cmp	r3, r4
 801a55c:	db01      	blt.n	801a562 <__sfputc_r+0x16>
 801a55e:	290a      	cmp	r1, #10
 801a560:	d103      	bne.n	801a56a <__sfputc_r+0x1e>
 801a562:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a566:	f7ff bbe3 	b.w	8019d30 <__swbuf_r>
 801a56a:	6813      	ldr	r3, [r2, #0]
 801a56c:	1c58      	adds	r0, r3, #1
 801a56e:	6010      	str	r0, [r2, #0]
 801a570:	7019      	strb	r1, [r3, #0]
 801a572:	4608      	mov	r0, r1
 801a574:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a578:	4770      	bx	lr

0801a57a <__sfputs_r>:
 801a57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a57c:	4606      	mov	r6, r0
 801a57e:	460f      	mov	r7, r1
 801a580:	4614      	mov	r4, r2
 801a582:	18d5      	adds	r5, r2, r3
 801a584:	42ac      	cmp	r4, r5
 801a586:	d101      	bne.n	801a58c <__sfputs_r+0x12>
 801a588:	2000      	movs	r0, #0
 801a58a:	e007      	b.n	801a59c <__sfputs_r+0x22>
 801a58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a590:	463a      	mov	r2, r7
 801a592:	4630      	mov	r0, r6
 801a594:	f7ff ffda 	bl	801a54c <__sfputc_r>
 801a598:	1c43      	adds	r3, r0, #1
 801a59a:	d1f3      	bne.n	801a584 <__sfputs_r+0xa>
 801a59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a5a0 <_vfiprintf_r>:
 801a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5a4:	460d      	mov	r5, r1
 801a5a6:	b09d      	sub	sp, #116	; 0x74
 801a5a8:	4614      	mov	r4, r2
 801a5aa:	4698      	mov	r8, r3
 801a5ac:	4606      	mov	r6, r0
 801a5ae:	b118      	cbz	r0, 801a5b8 <_vfiprintf_r+0x18>
 801a5b0:	6983      	ldr	r3, [r0, #24]
 801a5b2:	b90b      	cbnz	r3, 801a5b8 <_vfiprintf_r+0x18>
 801a5b4:	f7fe ffc6 	bl	8019544 <__sinit>
 801a5b8:	4b89      	ldr	r3, [pc, #548]	; (801a7e0 <_vfiprintf_r+0x240>)
 801a5ba:	429d      	cmp	r5, r3
 801a5bc:	d11b      	bne.n	801a5f6 <_vfiprintf_r+0x56>
 801a5be:	6875      	ldr	r5, [r6, #4]
 801a5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5c2:	07d9      	lsls	r1, r3, #31
 801a5c4:	d405      	bmi.n	801a5d2 <_vfiprintf_r+0x32>
 801a5c6:	89ab      	ldrh	r3, [r5, #12]
 801a5c8:	059a      	lsls	r2, r3, #22
 801a5ca:	d402      	bmi.n	801a5d2 <_vfiprintf_r+0x32>
 801a5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5ce:	f7ff f87c 	bl	80196ca <__retarget_lock_acquire_recursive>
 801a5d2:	89ab      	ldrh	r3, [r5, #12]
 801a5d4:	071b      	lsls	r3, r3, #28
 801a5d6:	d501      	bpl.n	801a5dc <_vfiprintf_r+0x3c>
 801a5d8:	692b      	ldr	r3, [r5, #16]
 801a5da:	b9eb      	cbnz	r3, 801a618 <_vfiprintf_r+0x78>
 801a5dc:	4629      	mov	r1, r5
 801a5de:	4630      	mov	r0, r6
 801a5e0:	f7ff fc0a 	bl	8019df8 <__swsetup_r>
 801a5e4:	b1c0      	cbz	r0, 801a618 <_vfiprintf_r+0x78>
 801a5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5e8:	07dc      	lsls	r4, r3, #31
 801a5ea:	d50e      	bpl.n	801a60a <_vfiprintf_r+0x6a>
 801a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 801a5f0:	b01d      	add	sp, #116	; 0x74
 801a5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5f6:	4b7b      	ldr	r3, [pc, #492]	; (801a7e4 <_vfiprintf_r+0x244>)
 801a5f8:	429d      	cmp	r5, r3
 801a5fa:	d101      	bne.n	801a600 <_vfiprintf_r+0x60>
 801a5fc:	68b5      	ldr	r5, [r6, #8]
 801a5fe:	e7df      	b.n	801a5c0 <_vfiprintf_r+0x20>
 801a600:	4b79      	ldr	r3, [pc, #484]	; (801a7e8 <_vfiprintf_r+0x248>)
 801a602:	429d      	cmp	r5, r3
 801a604:	bf08      	it	eq
 801a606:	68f5      	ldreq	r5, [r6, #12]
 801a608:	e7da      	b.n	801a5c0 <_vfiprintf_r+0x20>
 801a60a:	89ab      	ldrh	r3, [r5, #12]
 801a60c:	0598      	lsls	r0, r3, #22
 801a60e:	d4ed      	bmi.n	801a5ec <_vfiprintf_r+0x4c>
 801a610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a612:	f7ff f85b 	bl	80196cc <__retarget_lock_release_recursive>
 801a616:	e7e9      	b.n	801a5ec <_vfiprintf_r+0x4c>
 801a618:	2300      	movs	r3, #0
 801a61a:	9309      	str	r3, [sp, #36]	; 0x24
 801a61c:	2320      	movs	r3, #32
 801a61e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a622:	f8cd 800c 	str.w	r8, [sp, #12]
 801a626:	2330      	movs	r3, #48	; 0x30
 801a628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a7ec <_vfiprintf_r+0x24c>
 801a62c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a630:	f04f 0901 	mov.w	r9, #1
 801a634:	4623      	mov	r3, r4
 801a636:	469a      	mov	sl, r3
 801a638:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a63c:	b10a      	cbz	r2, 801a642 <_vfiprintf_r+0xa2>
 801a63e:	2a25      	cmp	r2, #37	; 0x25
 801a640:	d1f9      	bne.n	801a636 <_vfiprintf_r+0x96>
 801a642:	ebba 0b04 	subs.w	fp, sl, r4
 801a646:	d00b      	beq.n	801a660 <_vfiprintf_r+0xc0>
 801a648:	465b      	mov	r3, fp
 801a64a:	4622      	mov	r2, r4
 801a64c:	4629      	mov	r1, r5
 801a64e:	4630      	mov	r0, r6
 801a650:	f7ff ff93 	bl	801a57a <__sfputs_r>
 801a654:	3001      	adds	r0, #1
 801a656:	f000 80aa 	beq.w	801a7ae <_vfiprintf_r+0x20e>
 801a65a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a65c:	445a      	add	r2, fp
 801a65e:	9209      	str	r2, [sp, #36]	; 0x24
 801a660:	f89a 3000 	ldrb.w	r3, [sl]
 801a664:	2b00      	cmp	r3, #0
 801a666:	f000 80a2 	beq.w	801a7ae <_vfiprintf_r+0x20e>
 801a66a:	2300      	movs	r3, #0
 801a66c:	f04f 32ff 	mov.w	r2, #4294967295
 801a670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a674:	f10a 0a01 	add.w	sl, sl, #1
 801a678:	9304      	str	r3, [sp, #16]
 801a67a:	9307      	str	r3, [sp, #28]
 801a67c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a680:	931a      	str	r3, [sp, #104]	; 0x68
 801a682:	4654      	mov	r4, sl
 801a684:	2205      	movs	r2, #5
 801a686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a68a:	4858      	ldr	r0, [pc, #352]	; (801a7ec <_vfiprintf_r+0x24c>)
 801a68c:	f7e5 fdb8 	bl	8000200 <memchr>
 801a690:	9a04      	ldr	r2, [sp, #16]
 801a692:	b9d8      	cbnz	r0, 801a6cc <_vfiprintf_r+0x12c>
 801a694:	06d1      	lsls	r1, r2, #27
 801a696:	bf44      	itt	mi
 801a698:	2320      	movmi	r3, #32
 801a69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a69e:	0713      	lsls	r3, r2, #28
 801a6a0:	bf44      	itt	mi
 801a6a2:	232b      	movmi	r3, #43	; 0x2b
 801a6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6a8:	f89a 3000 	ldrb.w	r3, [sl]
 801a6ac:	2b2a      	cmp	r3, #42	; 0x2a
 801a6ae:	d015      	beq.n	801a6dc <_vfiprintf_r+0x13c>
 801a6b0:	9a07      	ldr	r2, [sp, #28]
 801a6b2:	4654      	mov	r4, sl
 801a6b4:	2000      	movs	r0, #0
 801a6b6:	f04f 0c0a 	mov.w	ip, #10
 801a6ba:	4621      	mov	r1, r4
 801a6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a6c0:	3b30      	subs	r3, #48	; 0x30
 801a6c2:	2b09      	cmp	r3, #9
 801a6c4:	d94e      	bls.n	801a764 <_vfiprintf_r+0x1c4>
 801a6c6:	b1b0      	cbz	r0, 801a6f6 <_vfiprintf_r+0x156>
 801a6c8:	9207      	str	r2, [sp, #28]
 801a6ca:	e014      	b.n	801a6f6 <_vfiprintf_r+0x156>
 801a6cc:	eba0 0308 	sub.w	r3, r0, r8
 801a6d0:	fa09 f303 	lsl.w	r3, r9, r3
 801a6d4:	4313      	orrs	r3, r2
 801a6d6:	9304      	str	r3, [sp, #16]
 801a6d8:	46a2      	mov	sl, r4
 801a6da:	e7d2      	b.n	801a682 <_vfiprintf_r+0xe2>
 801a6dc:	9b03      	ldr	r3, [sp, #12]
 801a6de:	1d19      	adds	r1, r3, #4
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	9103      	str	r1, [sp, #12]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	bfbb      	ittet	lt
 801a6e8:	425b      	neglt	r3, r3
 801a6ea:	f042 0202 	orrlt.w	r2, r2, #2
 801a6ee:	9307      	strge	r3, [sp, #28]
 801a6f0:	9307      	strlt	r3, [sp, #28]
 801a6f2:	bfb8      	it	lt
 801a6f4:	9204      	strlt	r2, [sp, #16]
 801a6f6:	7823      	ldrb	r3, [r4, #0]
 801a6f8:	2b2e      	cmp	r3, #46	; 0x2e
 801a6fa:	d10c      	bne.n	801a716 <_vfiprintf_r+0x176>
 801a6fc:	7863      	ldrb	r3, [r4, #1]
 801a6fe:	2b2a      	cmp	r3, #42	; 0x2a
 801a700:	d135      	bne.n	801a76e <_vfiprintf_r+0x1ce>
 801a702:	9b03      	ldr	r3, [sp, #12]
 801a704:	1d1a      	adds	r2, r3, #4
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	9203      	str	r2, [sp, #12]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	bfb8      	it	lt
 801a70e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a712:	3402      	adds	r4, #2
 801a714:	9305      	str	r3, [sp, #20]
 801a716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a7fc <_vfiprintf_r+0x25c>
 801a71a:	7821      	ldrb	r1, [r4, #0]
 801a71c:	2203      	movs	r2, #3
 801a71e:	4650      	mov	r0, sl
 801a720:	f7e5 fd6e 	bl	8000200 <memchr>
 801a724:	b140      	cbz	r0, 801a738 <_vfiprintf_r+0x198>
 801a726:	2340      	movs	r3, #64	; 0x40
 801a728:	eba0 000a 	sub.w	r0, r0, sl
 801a72c:	fa03 f000 	lsl.w	r0, r3, r0
 801a730:	9b04      	ldr	r3, [sp, #16]
 801a732:	4303      	orrs	r3, r0
 801a734:	3401      	adds	r4, #1
 801a736:	9304      	str	r3, [sp, #16]
 801a738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a73c:	482c      	ldr	r0, [pc, #176]	; (801a7f0 <_vfiprintf_r+0x250>)
 801a73e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a742:	2206      	movs	r2, #6
 801a744:	f7e5 fd5c 	bl	8000200 <memchr>
 801a748:	2800      	cmp	r0, #0
 801a74a:	d03f      	beq.n	801a7cc <_vfiprintf_r+0x22c>
 801a74c:	4b29      	ldr	r3, [pc, #164]	; (801a7f4 <_vfiprintf_r+0x254>)
 801a74e:	bb1b      	cbnz	r3, 801a798 <_vfiprintf_r+0x1f8>
 801a750:	9b03      	ldr	r3, [sp, #12]
 801a752:	3307      	adds	r3, #7
 801a754:	f023 0307 	bic.w	r3, r3, #7
 801a758:	3308      	adds	r3, #8
 801a75a:	9303      	str	r3, [sp, #12]
 801a75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a75e:	443b      	add	r3, r7
 801a760:	9309      	str	r3, [sp, #36]	; 0x24
 801a762:	e767      	b.n	801a634 <_vfiprintf_r+0x94>
 801a764:	fb0c 3202 	mla	r2, ip, r2, r3
 801a768:	460c      	mov	r4, r1
 801a76a:	2001      	movs	r0, #1
 801a76c:	e7a5      	b.n	801a6ba <_vfiprintf_r+0x11a>
 801a76e:	2300      	movs	r3, #0
 801a770:	3401      	adds	r4, #1
 801a772:	9305      	str	r3, [sp, #20]
 801a774:	4619      	mov	r1, r3
 801a776:	f04f 0c0a 	mov.w	ip, #10
 801a77a:	4620      	mov	r0, r4
 801a77c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a780:	3a30      	subs	r2, #48	; 0x30
 801a782:	2a09      	cmp	r2, #9
 801a784:	d903      	bls.n	801a78e <_vfiprintf_r+0x1ee>
 801a786:	2b00      	cmp	r3, #0
 801a788:	d0c5      	beq.n	801a716 <_vfiprintf_r+0x176>
 801a78a:	9105      	str	r1, [sp, #20]
 801a78c:	e7c3      	b.n	801a716 <_vfiprintf_r+0x176>
 801a78e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a792:	4604      	mov	r4, r0
 801a794:	2301      	movs	r3, #1
 801a796:	e7f0      	b.n	801a77a <_vfiprintf_r+0x1da>
 801a798:	ab03      	add	r3, sp, #12
 801a79a:	9300      	str	r3, [sp, #0]
 801a79c:	462a      	mov	r2, r5
 801a79e:	4b16      	ldr	r3, [pc, #88]	; (801a7f8 <_vfiprintf_r+0x258>)
 801a7a0:	a904      	add	r1, sp, #16
 801a7a2:	4630      	mov	r0, r6
 801a7a4:	f3af 8000 	nop.w
 801a7a8:	4607      	mov	r7, r0
 801a7aa:	1c78      	adds	r0, r7, #1
 801a7ac:	d1d6      	bne.n	801a75c <_vfiprintf_r+0x1bc>
 801a7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7b0:	07d9      	lsls	r1, r3, #31
 801a7b2:	d405      	bmi.n	801a7c0 <_vfiprintf_r+0x220>
 801a7b4:	89ab      	ldrh	r3, [r5, #12]
 801a7b6:	059a      	lsls	r2, r3, #22
 801a7b8:	d402      	bmi.n	801a7c0 <_vfiprintf_r+0x220>
 801a7ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7bc:	f7fe ff86 	bl	80196cc <__retarget_lock_release_recursive>
 801a7c0:	89ab      	ldrh	r3, [r5, #12]
 801a7c2:	065b      	lsls	r3, r3, #25
 801a7c4:	f53f af12 	bmi.w	801a5ec <_vfiprintf_r+0x4c>
 801a7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7ca:	e711      	b.n	801a5f0 <_vfiprintf_r+0x50>
 801a7cc:	ab03      	add	r3, sp, #12
 801a7ce:	9300      	str	r3, [sp, #0]
 801a7d0:	462a      	mov	r2, r5
 801a7d2:	4b09      	ldr	r3, [pc, #36]	; (801a7f8 <_vfiprintf_r+0x258>)
 801a7d4:	a904      	add	r1, sp, #16
 801a7d6:	4630      	mov	r0, r6
 801a7d8:	f000 f880 	bl	801a8dc <_printf_i>
 801a7dc:	e7e4      	b.n	801a7a8 <_vfiprintf_r+0x208>
 801a7de:	bf00      	nop
 801a7e0:	0801dbdc 	.word	0x0801dbdc
 801a7e4:	0801dbfc 	.word	0x0801dbfc
 801a7e8:	0801dbbc 	.word	0x0801dbbc
 801a7ec:	0801dcce 	.word	0x0801dcce
 801a7f0:	0801dcd8 	.word	0x0801dcd8
 801a7f4:	00000000 	.word	0x00000000
 801a7f8:	0801a57b 	.word	0x0801a57b
 801a7fc:	0801dcd4 	.word	0x0801dcd4

0801a800 <_printf_common>:
 801a800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a804:	4616      	mov	r6, r2
 801a806:	4699      	mov	r9, r3
 801a808:	688a      	ldr	r2, [r1, #8]
 801a80a:	690b      	ldr	r3, [r1, #16]
 801a80c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a810:	4293      	cmp	r3, r2
 801a812:	bfb8      	it	lt
 801a814:	4613      	movlt	r3, r2
 801a816:	6033      	str	r3, [r6, #0]
 801a818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a81c:	4607      	mov	r7, r0
 801a81e:	460c      	mov	r4, r1
 801a820:	b10a      	cbz	r2, 801a826 <_printf_common+0x26>
 801a822:	3301      	adds	r3, #1
 801a824:	6033      	str	r3, [r6, #0]
 801a826:	6823      	ldr	r3, [r4, #0]
 801a828:	0699      	lsls	r1, r3, #26
 801a82a:	bf42      	ittt	mi
 801a82c:	6833      	ldrmi	r3, [r6, #0]
 801a82e:	3302      	addmi	r3, #2
 801a830:	6033      	strmi	r3, [r6, #0]
 801a832:	6825      	ldr	r5, [r4, #0]
 801a834:	f015 0506 	ands.w	r5, r5, #6
 801a838:	d106      	bne.n	801a848 <_printf_common+0x48>
 801a83a:	f104 0a19 	add.w	sl, r4, #25
 801a83e:	68e3      	ldr	r3, [r4, #12]
 801a840:	6832      	ldr	r2, [r6, #0]
 801a842:	1a9b      	subs	r3, r3, r2
 801a844:	42ab      	cmp	r3, r5
 801a846:	dc26      	bgt.n	801a896 <_printf_common+0x96>
 801a848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a84c:	1e13      	subs	r3, r2, #0
 801a84e:	6822      	ldr	r2, [r4, #0]
 801a850:	bf18      	it	ne
 801a852:	2301      	movne	r3, #1
 801a854:	0692      	lsls	r2, r2, #26
 801a856:	d42b      	bmi.n	801a8b0 <_printf_common+0xb0>
 801a858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a85c:	4649      	mov	r1, r9
 801a85e:	4638      	mov	r0, r7
 801a860:	47c0      	blx	r8
 801a862:	3001      	adds	r0, #1
 801a864:	d01e      	beq.n	801a8a4 <_printf_common+0xa4>
 801a866:	6823      	ldr	r3, [r4, #0]
 801a868:	68e5      	ldr	r5, [r4, #12]
 801a86a:	6832      	ldr	r2, [r6, #0]
 801a86c:	f003 0306 	and.w	r3, r3, #6
 801a870:	2b04      	cmp	r3, #4
 801a872:	bf08      	it	eq
 801a874:	1aad      	subeq	r5, r5, r2
 801a876:	68a3      	ldr	r3, [r4, #8]
 801a878:	6922      	ldr	r2, [r4, #16]
 801a87a:	bf0c      	ite	eq
 801a87c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a880:	2500      	movne	r5, #0
 801a882:	4293      	cmp	r3, r2
 801a884:	bfc4      	itt	gt
 801a886:	1a9b      	subgt	r3, r3, r2
 801a888:	18ed      	addgt	r5, r5, r3
 801a88a:	2600      	movs	r6, #0
 801a88c:	341a      	adds	r4, #26
 801a88e:	42b5      	cmp	r5, r6
 801a890:	d11a      	bne.n	801a8c8 <_printf_common+0xc8>
 801a892:	2000      	movs	r0, #0
 801a894:	e008      	b.n	801a8a8 <_printf_common+0xa8>
 801a896:	2301      	movs	r3, #1
 801a898:	4652      	mov	r2, sl
 801a89a:	4649      	mov	r1, r9
 801a89c:	4638      	mov	r0, r7
 801a89e:	47c0      	blx	r8
 801a8a0:	3001      	adds	r0, #1
 801a8a2:	d103      	bne.n	801a8ac <_printf_common+0xac>
 801a8a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8ac:	3501      	adds	r5, #1
 801a8ae:	e7c6      	b.n	801a83e <_printf_common+0x3e>
 801a8b0:	18e1      	adds	r1, r4, r3
 801a8b2:	1c5a      	adds	r2, r3, #1
 801a8b4:	2030      	movs	r0, #48	; 0x30
 801a8b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a8ba:	4422      	add	r2, r4
 801a8bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a8c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a8c4:	3302      	adds	r3, #2
 801a8c6:	e7c7      	b.n	801a858 <_printf_common+0x58>
 801a8c8:	2301      	movs	r3, #1
 801a8ca:	4622      	mov	r2, r4
 801a8cc:	4649      	mov	r1, r9
 801a8ce:	4638      	mov	r0, r7
 801a8d0:	47c0      	blx	r8
 801a8d2:	3001      	adds	r0, #1
 801a8d4:	d0e6      	beq.n	801a8a4 <_printf_common+0xa4>
 801a8d6:	3601      	adds	r6, #1
 801a8d8:	e7d9      	b.n	801a88e <_printf_common+0x8e>
	...

0801a8dc <_printf_i>:
 801a8dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8e0:	7e0f      	ldrb	r7, [r1, #24]
 801a8e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a8e4:	2f78      	cmp	r7, #120	; 0x78
 801a8e6:	4691      	mov	r9, r2
 801a8e8:	4680      	mov	r8, r0
 801a8ea:	460c      	mov	r4, r1
 801a8ec:	469a      	mov	sl, r3
 801a8ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a8f2:	d807      	bhi.n	801a904 <_printf_i+0x28>
 801a8f4:	2f62      	cmp	r7, #98	; 0x62
 801a8f6:	d80a      	bhi.n	801a90e <_printf_i+0x32>
 801a8f8:	2f00      	cmp	r7, #0
 801a8fa:	f000 80d8 	beq.w	801aaae <_printf_i+0x1d2>
 801a8fe:	2f58      	cmp	r7, #88	; 0x58
 801a900:	f000 80a3 	beq.w	801aa4a <_printf_i+0x16e>
 801a904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a90c:	e03a      	b.n	801a984 <_printf_i+0xa8>
 801a90e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a912:	2b15      	cmp	r3, #21
 801a914:	d8f6      	bhi.n	801a904 <_printf_i+0x28>
 801a916:	a101      	add	r1, pc, #4	; (adr r1, 801a91c <_printf_i+0x40>)
 801a918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a91c:	0801a975 	.word	0x0801a975
 801a920:	0801a989 	.word	0x0801a989
 801a924:	0801a905 	.word	0x0801a905
 801a928:	0801a905 	.word	0x0801a905
 801a92c:	0801a905 	.word	0x0801a905
 801a930:	0801a905 	.word	0x0801a905
 801a934:	0801a989 	.word	0x0801a989
 801a938:	0801a905 	.word	0x0801a905
 801a93c:	0801a905 	.word	0x0801a905
 801a940:	0801a905 	.word	0x0801a905
 801a944:	0801a905 	.word	0x0801a905
 801a948:	0801aa95 	.word	0x0801aa95
 801a94c:	0801a9b9 	.word	0x0801a9b9
 801a950:	0801aa77 	.word	0x0801aa77
 801a954:	0801a905 	.word	0x0801a905
 801a958:	0801a905 	.word	0x0801a905
 801a95c:	0801aab7 	.word	0x0801aab7
 801a960:	0801a905 	.word	0x0801a905
 801a964:	0801a9b9 	.word	0x0801a9b9
 801a968:	0801a905 	.word	0x0801a905
 801a96c:	0801a905 	.word	0x0801a905
 801a970:	0801aa7f 	.word	0x0801aa7f
 801a974:	682b      	ldr	r3, [r5, #0]
 801a976:	1d1a      	adds	r2, r3, #4
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	602a      	str	r2, [r5, #0]
 801a97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a984:	2301      	movs	r3, #1
 801a986:	e0a3      	b.n	801aad0 <_printf_i+0x1f4>
 801a988:	6820      	ldr	r0, [r4, #0]
 801a98a:	6829      	ldr	r1, [r5, #0]
 801a98c:	0606      	lsls	r6, r0, #24
 801a98e:	f101 0304 	add.w	r3, r1, #4
 801a992:	d50a      	bpl.n	801a9aa <_printf_i+0xce>
 801a994:	680e      	ldr	r6, [r1, #0]
 801a996:	602b      	str	r3, [r5, #0]
 801a998:	2e00      	cmp	r6, #0
 801a99a:	da03      	bge.n	801a9a4 <_printf_i+0xc8>
 801a99c:	232d      	movs	r3, #45	; 0x2d
 801a99e:	4276      	negs	r6, r6
 801a9a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9a4:	485e      	ldr	r0, [pc, #376]	; (801ab20 <_printf_i+0x244>)
 801a9a6:	230a      	movs	r3, #10
 801a9a8:	e019      	b.n	801a9de <_printf_i+0x102>
 801a9aa:	680e      	ldr	r6, [r1, #0]
 801a9ac:	602b      	str	r3, [r5, #0]
 801a9ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a9b2:	bf18      	it	ne
 801a9b4:	b236      	sxthne	r6, r6
 801a9b6:	e7ef      	b.n	801a998 <_printf_i+0xbc>
 801a9b8:	682b      	ldr	r3, [r5, #0]
 801a9ba:	6820      	ldr	r0, [r4, #0]
 801a9bc:	1d19      	adds	r1, r3, #4
 801a9be:	6029      	str	r1, [r5, #0]
 801a9c0:	0601      	lsls	r1, r0, #24
 801a9c2:	d501      	bpl.n	801a9c8 <_printf_i+0xec>
 801a9c4:	681e      	ldr	r6, [r3, #0]
 801a9c6:	e002      	b.n	801a9ce <_printf_i+0xf2>
 801a9c8:	0646      	lsls	r6, r0, #25
 801a9ca:	d5fb      	bpl.n	801a9c4 <_printf_i+0xe8>
 801a9cc:	881e      	ldrh	r6, [r3, #0]
 801a9ce:	4854      	ldr	r0, [pc, #336]	; (801ab20 <_printf_i+0x244>)
 801a9d0:	2f6f      	cmp	r7, #111	; 0x6f
 801a9d2:	bf0c      	ite	eq
 801a9d4:	2308      	moveq	r3, #8
 801a9d6:	230a      	movne	r3, #10
 801a9d8:	2100      	movs	r1, #0
 801a9da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a9de:	6865      	ldr	r5, [r4, #4]
 801a9e0:	60a5      	str	r5, [r4, #8]
 801a9e2:	2d00      	cmp	r5, #0
 801a9e4:	bfa2      	ittt	ge
 801a9e6:	6821      	ldrge	r1, [r4, #0]
 801a9e8:	f021 0104 	bicge.w	r1, r1, #4
 801a9ec:	6021      	strge	r1, [r4, #0]
 801a9ee:	b90e      	cbnz	r6, 801a9f4 <_printf_i+0x118>
 801a9f0:	2d00      	cmp	r5, #0
 801a9f2:	d04d      	beq.n	801aa90 <_printf_i+0x1b4>
 801a9f4:	4615      	mov	r5, r2
 801a9f6:	fbb6 f1f3 	udiv	r1, r6, r3
 801a9fa:	fb03 6711 	mls	r7, r3, r1, r6
 801a9fe:	5dc7      	ldrb	r7, [r0, r7]
 801aa00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801aa04:	4637      	mov	r7, r6
 801aa06:	42bb      	cmp	r3, r7
 801aa08:	460e      	mov	r6, r1
 801aa0a:	d9f4      	bls.n	801a9f6 <_printf_i+0x11a>
 801aa0c:	2b08      	cmp	r3, #8
 801aa0e:	d10b      	bne.n	801aa28 <_printf_i+0x14c>
 801aa10:	6823      	ldr	r3, [r4, #0]
 801aa12:	07de      	lsls	r6, r3, #31
 801aa14:	d508      	bpl.n	801aa28 <_printf_i+0x14c>
 801aa16:	6923      	ldr	r3, [r4, #16]
 801aa18:	6861      	ldr	r1, [r4, #4]
 801aa1a:	4299      	cmp	r1, r3
 801aa1c:	bfde      	ittt	le
 801aa1e:	2330      	movle	r3, #48	; 0x30
 801aa20:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aa24:	f105 35ff 	addle.w	r5, r5, #4294967295
 801aa28:	1b52      	subs	r2, r2, r5
 801aa2a:	6122      	str	r2, [r4, #16]
 801aa2c:	f8cd a000 	str.w	sl, [sp]
 801aa30:	464b      	mov	r3, r9
 801aa32:	aa03      	add	r2, sp, #12
 801aa34:	4621      	mov	r1, r4
 801aa36:	4640      	mov	r0, r8
 801aa38:	f7ff fee2 	bl	801a800 <_printf_common>
 801aa3c:	3001      	adds	r0, #1
 801aa3e:	d14c      	bne.n	801aada <_printf_i+0x1fe>
 801aa40:	f04f 30ff 	mov.w	r0, #4294967295
 801aa44:	b004      	add	sp, #16
 801aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa4a:	4835      	ldr	r0, [pc, #212]	; (801ab20 <_printf_i+0x244>)
 801aa4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801aa50:	6829      	ldr	r1, [r5, #0]
 801aa52:	6823      	ldr	r3, [r4, #0]
 801aa54:	f851 6b04 	ldr.w	r6, [r1], #4
 801aa58:	6029      	str	r1, [r5, #0]
 801aa5a:	061d      	lsls	r5, r3, #24
 801aa5c:	d514      	bpl.n	801aa88 <_printf_i+0x1ac>
 801aa5e:	07df      	lsls	r7, r3, #31
 801aa60:	bf44      	itt	mi
 801aa62:	f043 0320 	orrmi.w	r3, r3, #32
 801aa66:	6023      	strmi	r3, [r4, #0]
 801aa68:	b91e      	cbnz	r6, 801aa72 <_printf_i+0x196>
 801aa6a:	6823      	ldr	r3, [r4, #0]
 801aa6c:	f023 0320 	bic.w	r3, r3, #32
 801aa70:	6023      	str	r3, [r4, #0]
 801aa72:	2310      	movs	r3, #16
 801aa74:	e7b0      	b.n	801a9d8 <_printf_i+0xfc>
 801aa76:	6823      	ldr	r3, [r4, #0]
 801aa78:	f043 0320 	orr.w	r3, r3, #32
 801aa7c:	6023      	str	r3, [r4, #0]
 801aa7e:	2378      	movs	r3, #120	; 0x78
 801aa80:	4828      	ldr	r0, [pc, #160]	; (801ab24 <_printf_i+0x248>)
 801aa82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aa86:	e7e3      	b.n	801aa50 <_printf_i+0x174>
 801aa88:	0659      	lsls	r1, r3, #25
 801aa8a:	bf48      	it	mi
 801aa8c:	b2b6      	uxthmi	r6, r6
 801aa8e:	e7e6      	b.n	801aa5e <_printf_i+0x182>
 801aa90:	4615      	mov	r5, r2
 801aa92:	e7bb      	b.n	801aa0c <_printf_i+0x130>
 801aa94:	682b      	ldr	r3, [r5, #0]
 801aa96:	6826      	ldr	r6, [r4, #0]
 801aa98:	6961      	ldr	r1, [r4, #20]
 801aa9a:	1d18      	adds	r0, r3, #4
 801aa9c:	6028      	str	r0, [r5, #0]
 801aa9e:	0635      	lsls	r5, r6, #24
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	d501      	bpl.n	801aaa8 <_printf_i+0x1cc>
 801aaa4:	6019      	str	r1, [r3, #0]
 801aaa6:	e002      	b.n	801aaae <_printf_i+0x1d2>
 801aaa8:	0670      	lsls	r0, r6, #25
 801aaaa:	d5fb      	bpl.n	801aaa4 <_printf_i+0x1c8>
 801aaac:	8019      	strh	r1, [r3, #0]
 801aaae:	2300      	movs	r3, #0
 801aab0:	6123      	str	r3, [r4, #16]
 801aab2:	4615      	mov	r5, r2
 801aab4:	e7ba      	b.n	801aa2c <_printf_i+0x150>
 801aab6:	682b      	ldr	r3, [r5, #0]
 801aab8:	1d1a      	adds	r2, r3, #4
 801aaba:	602a      	str	r2, [r5, #0]
 801aabc:	681d      	ldr	r5, [r3, #0]
 801aabe:	6862      	ldr	r2, [r4, #4]
 801aac0:	2100      	movs	r1, #0
 801aac2:	4628      	mov	r0, r5
 801aac4:	f7e5 fb9c 	bl	8000200 <memchr>
 801aac8:	b108      	cbz	r0, 801aace <_printf_i+0x1f2>
 801aaca:	1b40      	subs	r0, r0, r5
 801aacc:	6060      	str	r0, [r4, #4]
 801aace:	6863      	ldr	r3, [r4, #4]
 801aad0:	6123      	str	r3, [r4, #16]
 801aad2:	2300      	movs	r3, #0
 801aad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aad8:	e7a8      	b.n	801aa2c <_printf_i+0x150>
 801aada:	6923      	ldr	r3, [r4, #16]
 801aadc:	462a      	mov	r2, r5
 801aade:	4649      	mov	r1, r9
 801aae0:	4640      	mov	r0, r8
 801aae2:	47d0      	blx	sl
 801aae4:	3001      	adds	r0, #1
 801aae6:	d0ab      	beq.n	801aa40 <_printf_i+0x164>
 801aae8:	6823      	ldr	r3, [r4, #0]
 801aaea:	079b      	lsls	r3, r3, #30
 801aaec:	d413      	bmi.n	801ab16 <_printf_i+0x23a>
 801aaee:	68e0      	ldr	r0, [r4, #12]
 801aaf0:	9b03      	ldr	r3, [sp, #12]
 801aaf2:	4298      	cmp	r0, r3
 801aaf4:	bfb8      	it	lt
 801aaf6:	4618      	movlt	r0, r3
 801aaf8:	e7a4      	b.n	801aa44 <_printf_i+0x168>
 801aafa:	2301      	movs	r3, #1
 801aafc:	4632      	mov	r2, r6
 801aafe:	4649      	mov	r1, r9
 801ab00:	4640      	mov	r0, r8
 801ab02:	47d0      	blx	sl
 801ab04:	3001      	adds	r0, #1
 801ab06:	d09b      	beq.n	801aa40 <_printf_i+0x164>
 801ab08:	3501      	adds	r5, #1
 801ab0a:	68e3      	ldr	r3, [r4, #12]
 801ab0c:	9903      	ldr	r1, [sp, #12]
 801ab0e:	1a5b      	subs	r3, r3, r1
 801ab10:	42ab      	cmp	r3, r5
 801ab12:	dcf2      	bgt.n	801aafa <_printf_i+0x21e>
 801ab14:	e7eb      	b.n	801aaee <_printf_i+0x212>
 801ab16:	2500      	movs	r5, #0
 801ab18:	f104 0619 	add.w	r6, r4, #25
 801ab1c:	e7f5      	b.n	801ab0a <_printf_i+0x22e>
 801ab1e:	bf00      	nop
 801ab20:	0801dcdf 	.word	0x0801dcdf
 801ab24:	0801dcf0 	.word	0x0801dcf0

0801ab28 <_read_r>:
 801ab28:	b538      	push	{r3, r4, r5, lr}
 801ab2a:	4d07      	ldr	r5, [pc, #28]	; (801ab48 <_read_r+0x20>)
 801ab2c:	4604      	mov	r4, r0
 801ab2e:	4608      	mov	r0, r1
 801ab30:	4611      	mov	r1, r2
 801ab32:	2200      	movs	r2, #0
 801ab34:	602a      	str	r2, [r5, #0]
 801ab36:	461a      	mov	r2, r3
 801ab38:	f7e7 fdf6 	bl	8002728 <_read>
 801ab3c:	1c43      	adds	r3, r0, #1
 801ab3e:	d102      	bne.n	801ab46 <_read_r+0x1e>
 801ab40:	682b      	ldr	r3, [r5, #0]
 801ab42:	b103      	cbz	r3, 801ab46 <_read_r+0x1e>
 801ab44:	6023      	str	r3, [r4, #0]
 801ab46:	bd38      	pop	{r3, r4, r5, pc}
 801ab48:	2000dc04 	.word	0x2000dc04

0801ab4c <abort>:
 801ab4c:	b508      	push	{r3, lr}
 801ab4e:	2006      	movs	r0, #6
 801ab50:	f000 f87e 	bl	801ac50 <raise>
 801ab54:	2001      	movs	r0, #1
 801ab56:	f7e7 fddd 	bl	8002714 <_exit>
	...

0801ab5c <_fstat_r>:
 801ab5c:	b538      	push	{r3, r4, r5, lr}
 801ab5e:	4d07      	ldr	r5, [pc, #28]	; (801ab7c <_fstat_r+0x20>)
 801ab60:	2300      	movs	r3, #0
 801ab62:	4604      	mov	r4, r0
 801ab64:	4608      	mov	r0, r1
 801ab66:	4611      	mov	r1, r2
 801ab68:	602b      	str	r3, [r5, #0]
 801ab6a:	f7e7 fe22 	bl	80027b2 <_fstat>
 801ab6e:	1c43      	adds	r3, r0, #1
 801ab70:	d102      	bne.n	801ab78 <_fstat_r+0x1c>
 801ab72:	682b      	ldr	r3, [r5, #0]
 801ab74:	b103      	cbz	r3, 801ab78 <_fstat_r+0x1c>
 801ab76:	6023      	str	r3, [r4, #0]
 801ab78:	bd38      	pop	{r3, r4, r5, pc}
 801ab7a:	bf00      	nop
 801ab7c:	2000dc04 	.word	0x2000dc04

0801ab80 <_isatty_r>:
 801ab80:	b538      	push	{r3, r4, r5, lr}
 801ab82:	4d06      	ldr	r5, [pc, #24]	; (801ab9c <_isatty_r+0x1c>)
 801ab84:	2300      	movs	r3, #0
 801ab86:	4604      	mov	r4, r0
 801ab88:	4608      	mov	r0, r1
 801ab8a:	602b      	str	r3, [r5, #0]
 801ab8c:	f7e7 fe21 	bl	80027d2 <_isatty>
 801ab90:	1c43      	adds	r3, r0, #1
 801ab92:	d102      	bne.n	801ab9a <_isatty_r+0x1a>
 801ab94:	682b      	ldr	r3, [r5, #0]
 801ab96:	b103      	cbz	r3, 801ab9a <_isatty_r+0x1a>
 801ab98:	6023      	str	r3, [r4, #0]
 801ab9a:	bd38      	pop	{r3, r4, r5, pc}
 801ab9c:	2000dc04 	.word	0x2000dc04

0801aba0 <_realloc_r>:
 801aba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aba4:	4680      	mov	r8, r0
 801aba6:	4614      	mov	r4, r2
 801aba8:	460e      	mov	r6, r1
 801abaa:	b921      	cbnz	r1, 801abb6 <_realloc_r+0x16>
 801abac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abb0:	4611      	mov	r1, r2
 801abb2:	f7fe bded 	b.w	8019790 <_malloc_r>
 801abb6:	b92a      	cbnz	r2, 801abc4 <_realloc_r+0x24>
 801abb8:	f7ff fb20 	bl	801a1fc <_free_r>
 801abbc:	4625      	mov	r5, r4
 801abbe:	4628      	mov	r0, r5
 801abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abc4:	f000 f860 	bl	801ac88 <_malloc_usable_size_r>
 801abc8:	4284      	cmp	r4, r0
 801abca:	4607      	mov	r7, r0
 801abcc:	d802      	bhi.n	801abd4 <_realloc_r+0x34>
 801abce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801abd2:	d812      	bhi.n	801abfa <_realloc_r+0x5a>
 801abd4:	4621      	mov	r1, r4
 801abd6:	4640      	mov	r0, r8
 801abd8:	f7fe fdda 	bl	8019790 <_malloc_r>
 801abdc:	4605      	mov	r5, r0
 801abde:	2800      	cmp	r0, #0
 801abe0:	d0ed      	beq.n	801abbe <_realloc_r+0x1e>
 801abe2:	42bc      	cmp	r4, r7
 801abe4:	4622      	mov	r2, r4
 801abe6:	4631      	mov	r1, r6
 801abe8:	bf28      	it	cs
 801abea:	463a      	movcs	r2, r7
 801abec:	f7fe fd7f 	bl	80196ee <memcpy>
 801abf0:	4631      	mov	r1, r6
 801abf2:	4640      	mov	r0, r8
 801abf4:	f7ff fb02 	bl	801a1fc <_free_r>
 801abf8:	e7e1      	b.n	801abbe <_realloc_r+0x1e>
 801abfa:	4635      	mov	r5, r6
 801abfc:	e7df      	b.n	801abbe <_realloc_r+0x1e>

0801abfe <_raise_r>:
 801abfe:	291f      	cmp	r1, #31
 801ac00:	b538      	push	{r3, r4, r5, lr}
 801ac02:	4604      	mov	r4, r0
 801ac04:	460d      	mov	r5, r1
 801ac06:	d904      	bls.n	801ac12 <_raise_r+0x14>
 801ac08:	2316      	movs	r3, #22
 801ac0a:	6003      	str	r3, [r0, #0]
 801ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ac10:	bd38      	pop	{r3, r4, r5, pc}
 801ac12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ac14:	b112      	cbz	r2, 801ac1c <_raise_r+0x1e>
 801ac16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ac1a:	b94b      	cbnz	r3, 801ac30 <_raise_r+0x32>
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	f000 f831 	bl	801ac84 <_getpid_r>
 801ac22:	462a      	mov	r2, r5
 801ac24:	4601      	mov	r1, r0
 801ac26:	4620      	mov	r0, r4
 801ac28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac2c:	f000 b818 	b.w	801ac60 <_kill_r>
 801ac30:	2b01      	cmp	r3, #1
 801ac32:	d00a      	beq.n	801ac4a <_raise_r+0x4c>
 801ac34:	1c59      	adds	r1, r3, #1
 801ac36:	d103      	bne.n	801ac40 <_raise_r+0x42>
 801ac38:	2316      	movs	r3, #22
 801ac3a:	6003      	str	r3, [r0, #0]
 801ac3c:	2001      	movs	r0, #1
 801ac3e:	e7e7      	b.n	801ac10 <_raise_r+0x12>
 801ac40:	2400      	movs	r4, #0
 801ac42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ac46:	4628      	mov	r0, r5
 801ac48:	4798      	blx	r3
 801ac4a:	2000      	movs	r0, #0
 801ac4c:	e7e0      	b.n	801ac10 <_raise_r+0x12>
	...

0801ac50 <raise>:
 801ac50:	4b02      	ldr	r3, [pc, #8]	; (801ac5c <raise+0xc>)
 801ac52:	4601      	mov	r1, r0
 801ac54:	6818      	ldr	r0, [r3, #0]
 801ac56:	f7ff bfd2 	b.w	801abfe <_raise_r>
 801ac5a:	bf00      	nop
 801ac5c:	2000016c 	.word	0x2000016c

0801ac60 <_kill_r>:
 801ac60:	b538      	push	{r3, r4, r5, lr}
 801ac62:	4d07      	ldr	r5, [pc, #28]	; (801ac80 <_kill_r+0x20>)
 801ac64:	2300      	movs	r3, #0
 801ac66:	4604      	mov	r4, r0
 801ac68:	4608      	mov	r0, r1
 801ac6a:	4611      	mov	r1, r2
 801ac6c:	602b      	str	r3, [r5, #0]
 801ac6e:	f7e7 fd3f 	bl	80026f0 <_kill>
 801ac72:	1c43      	adds	r3, r0, #1
 801ac74:	d102      	bne.n	801ac7c <_kill_r+0x1c>
 801ac76:	682b      	ldr	r3, [r5, #0]
 801ac78:	b103      	cbz	r3, 801ac7c <_kill_r+0x1c>
 801ac7a:	6023      	str	r3, [r4, #0]
 801ac7c:	bd38      	pop	{r3, r4, r5, pc}
 801ac7e:	bf00      	nop
 801ac80:	2000dc04 	.word	0x2000dc04

0801ac84 <_getpid_r>:
 801ac84:	f7e7 bd2c 	b.w	80026e0 <_getpid>

0801ac88 <_malloc_usable_size_r>:
 801ac88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac8c:	1f18      	subs	r0, r3, #4
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	bfbc      	itt	lt
 801ac92:	580b      	ldrlt	r3, [r1, r0]
 801ac94:	18c0      	addlt	r0, r0, r3
 801ac96:	4770      	bx	lr

0801ac98 <_init>:
 801ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac9a:	bf00      	nop
 801ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac9e:	bc08      	pop	{r3}
 801aca0:	469e      	mov	lr, r3
 801aca2:	4770      	bx	lr

0801aca4 <_fini>:
 801aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aca6:	bf00      	nop
 801aca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acaa:	bc08      	pop	{r3}
 801acac:	469e      	mov	lr, r3
 801acae:	4770      	bx	lr
