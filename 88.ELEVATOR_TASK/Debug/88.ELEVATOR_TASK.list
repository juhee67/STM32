
88.ELEVATOR_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009880  08009880  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009888  08009888  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009888  08009888  00019888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000aec  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b60  20000b60  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb63  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bc3  00000000  00000000  0003ec07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  000427d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001818  00000000  00000000  00044158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ed4  00000000  00000000  00045970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4b3  00000000  00000000  0004a844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa519  00000000  00000000  00069cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164210  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007554  00000000  00000000  00164260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009690 	.word	0x08009690

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08009690 	.word	0x08009690

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <elevator_init>:



// elevator 초기화 함수
void elevator_init()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 800059a:	f000 f891 	bl	80006c0 <i2c_lcd_init>
//	init_dotmatrix_up();
//	init_dotmatrix_down();

	// elevator 내부 조명
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);	// LED0 off
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <elevator_init+0x44>)
 80005a6:	f003 f8dd 	bl	8003764 <HAL_GPIO_WritePin>

	//초기화
	char lcd_buff[40];
	move_cursor(0,0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 f8b5 	bl	800071c <move_cursor>
	sprintf(lcd_buff, "=== ELEVATOR ===");
 80005b2:	463b      	mov	r3, r7
 80005b4:	4909      	ldr	r1, [pc, #36]	; (80005dc <elevator_init+0x48>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f008 f872 	bl	80086a0 <siprintf>
	lcd_string(lcd_buff);
 80005bc:	463b      	mov	r3, r7
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f897 	bl	80006f2 <lcd_string>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f640 417e 	movw	r1, #3198	; 0xc7e
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <elevator_init+0x4c>)
 80005cc:	f003 f8ca 	bl	8003764 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	; 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021400 	.word	0x40021400
 80005dc:	0800970c 	.word	0x0800970c
 80005e0:	40020400 	.word	0x40020400

080005e4 <elevator_main>:
}


#if 1
void elevator_main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	//초기화
	elevator_init();
 80005e8:	f7ff ffd4 	bl	8000594 <elevator_init>

	//동작
	void elevator_run();
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f023 030f 	bic.w	r3, r3, #15
 8000600:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	f043 030c 	orr.w	r3, r3, #12
 800060e:	b2db      	uxtb	r3, r3
 8000610:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	b2db      	uxtb	r3, r3
 800061a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	f043 030c 	orr.w	r3, r3, #12
 8000622:	b2db      	uxtb	r3, r3
 8000624:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	b2db      	uxtb	r3, r3
 800062e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000630:	bf00      	nop
 8000632:	f107 0208 	add.w	r2, r7, #8
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2304      	movs	r3, #4
 800063c:	214e      	movs	r1, #78	; 0x4e
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <lcd_command+0x64>)
 8000640:	f003 fa20 	bl	8003a84 <HAL_I2C_Master_Transmit>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1f3      	bne.n	8000632 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800064a:	bf00      	nop
}
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000304 	.word	0x20000304

08000658 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f023 030f 	bic.w	r3, r3, #15
 8000668:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f043 030d 	orr.w	r3, r3, #13
 8000676:	b2db      	uxtb	r3, r3
 8000678:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f043 0309 	orr.w	r3, r3, #9
 8000680:	b2db      	uxtb	r3, r3
 8000682:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	f043 030d 	orr.w	r3, r3, #13
 800068a:	b2db      	uxtb	r3, r3
 800068c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	f043 0309 	orr.w	r3, r3, #9
 8000694:	b2db      	uxtb	r3, r3
 8000696:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000698:	bf00      	nop
 800069a:	f107 0208 	add.w	r2, r7, #8
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2304      	movs	r3, #4
 80006a4:	214e      	movs	r1, #78	; 0x4e
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <lcd_data+0x64>)
 80006a8:	f003 f9ec 	bl	8003a84 <HAL_I2C_Master_Transmit>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f3      	bne.n	800069a <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80006b2:	bf00      	nop
}
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000304 	.word	0x20000304

080006c0 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80006c4:	2033      	movs	r0, #51	; 0x33
 80006c6:	f7ff ff93 	bl	80005f0 <lcd_command>
	lcd_command(0x32);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f7ff ff90 	bl	80005f0 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80006d0:	2028      	movs	r0, #40	; 0x28
 80006d2:	f7ff ff8d 	bl	80005f0 <lcd_command>
	lcd_command(DISPLAY_ON);
 80006d6:	200c      	movs	r0, #12
 80006d8:	f7ff ff8a 	bl	80005f0 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80006dc:	2006      	movs	r0, #6
 80006de:	f7ff ff87 	bl	80005f0 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ff84 	bl	80005f0 <lcd_command>
	HAL_Delay(2);
 80006e8:	2002      	movs	r0, #2
 80006ea:	f001 fd13 	bl	8002114 <HAL_Delay>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	while(*str)
 80006fa:	e006      	b.n	800070a <lcd_string+0x18>
	{
		lcd_data(*str++);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffa7 	bl	8000658 <lcd_data>
	while(*str)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1f4      	bne.n	80006fc <lcd_string+0xa>
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	019b      	lsls	r3, r3, #6
 8000730:	b2da      	uxtb	r2, r3
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	4313      	orrs	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff56 	bl	80005f0 <lcd_command>
	return;
 8000744:	bf00      	nop
}
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_SYSTICK_Handler+0x18>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_SYSTICK_Handler+0x18>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000ac8 	.word	0x20000ac8

08000768 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000770:	1d39      	adds	r1, r7, #4
 8000772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000776:	2201      	movs	r2, #1
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <__io_putchar+0x20>)
 800077a:	f006 fbbc 	bl	8006ef6 <HAL_UART_Transmit>

  return ch;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000528 	.word	0x20000528

0800078c <HAL_TIM_PeriodElapsedCallback>:
//----------  printf end ----------

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d109      	bne.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007a6:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007b0:	6013      	str	r3, [r2, #0]
	}
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40014400 	.word	0x40014400
 80007c4:	20000ac0 	.word	0x20000ac0
 80007c8:	20000ac4 	.word	0x20000ac4

080007cc <HAL_GPIO_EXTI_Callback>:

// 1. move from Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c
// 2. enter here every external interrupt
volatile int ext_int_no = -1;	// for comparing with GPIO_Pin0
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007dc:	d02d      	beq.n	800083a <HAL_GPIO_EXTI_Callback+0x6e>
 80007de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007e2:	dc35      	bgt.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	d01c      	beq.n	8000822 <HAL_GPIO_EXTI_Callback+0x56>
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	dc31      	bgt.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d002      	beq.n	80007f6 <HAL_GPIO_EXTI_Callback+0x2a>
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d00b      	beq.n	800080c <HAL_GPIO_EXTI_Callback+0x40>
		ext_int_no = GPIO_Pin;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LED1
		current_floor = 4;
		break;
	}
}
 80007f4:	e02c      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
		ext_int_no = GPIO_Pin;
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007fa:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LED1
 80007fc:	2101      	movs	r1, #1
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <HAL_GPIO_EXTI_Callback+0x90>)
 8000800:	f002 ffc9 	bl	8003796 <HAL_GPIO_TogglePin>
		current_floor = 1;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_GPIO_EXTI_Callback+0x94>)
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
		break;
 800080a:	e021      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
		ext_int_no = GPIO_Pin;
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000810:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);   // LED2
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <HAL_GPIO_EXTI_Callback+0x90>)
 8000816:	f002 ffbe 	bl	8003796 <HAL_GPIO_TogglePin>
		current_floor = 2;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_GPIO_EXTI_Callback+0x94>)
 800081c:	2202      	movs	r2, #2
 800081e:	601a      	str	r2, [r3, #0]
		break;
 8000820:	e016      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
		ext_int_no = GPIO_Pin;
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000826:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);   // LED3
 8000828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <HAL_GPIO_EXTI_Callback+0x90>)
 800082e:	f002 ffb2 	bl	8003796 <HAL_GPIO_TogglePin>
		current_floor = 3;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_GPIO_EXTI_Callback+0x94>)
 8000834:	2203      	movs	r2, #3
 8000836:	601a      	str	r2, [r3, #0]
		break;
 8000838:	e00a      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
		ext_int_no = GPIO_Pin;
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <HAL_GPIO_EXTI_Callback+0x8c>)
 800083e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LED1
 8000840:	2101      	movs	r1, #1
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <HAL_GPIO_EXTI_Callback+0x90>)
 8000844:	f002 ffa7 	bl	8003796 <HAL_GPIO_TogglePin>
		current_floor = 4;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_GPIO_EXTI_Callback+0x94>)
 800084a:	2204      	movs	r2, #4
 800084c:	601a      	str	r2, [r3, #0]
		break;
 800084e:	bf00      	nop
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	40020400 	.word	0x40020400
 8000860:	20000090 	.word	0x20000090

08000864 <HAL_ADC_ConvCpltCallback>:


uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_ADC_ConvCpltCallback+0x30>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d109      	bne.n	800088a <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000876:	4808      	ldr	r0, [pc, #32]	; (8000898 <HAL_ADC_ConvCpltCallback+0x34>)
 8000878:	f001 fea2 	bl	80025c0 <HAL_ADC_GetValue>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_ADC_ConvCpltCallback+0x38>)
 8000882:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <HAL_ADC_ConvCpltCallback+0x34>)
 8000886:	f001 fcad 	bl	80021e4 <HAL_ADC_Start_IT>
	}
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40012000 	.word	0x40012000
 8000898:	2000020c 	.word	0x2000020c
 800089c:	20000acc 	.word	0x20000acc

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f001 fbc4 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f85e 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f000 fc3e 	bl	800112c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008b0:	f000 fbba 	bl	8001028 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008b4:	f000 fc0c 	bl	80010d0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80008b8:	f000 fbe0 	bl	800107c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80008bc:	f000 fb6c 	bl	8000f98 <MX_TIM10_Init>
  MX_TIM11_Init();
 80008c0:	f000 fb8e 	bl	8000fe0 <MX_TIM11_Init>
  MX_TIM3_Init();
 80008c4:	f000 fa50 	bl	8000d68 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008c8:	f000 faa2 	bl	8000e10 <MX_TIM4_Init>
  MX_TIM2_Init();
 80008cc:	f000 f9f2 	bl	8000cb4 <MX_TIM2_Init>
  MX_RTC_Init();
 80008d0:	f000 f996 	bl	8000c00 <MX_RTC_Init>
  MX_TIM5_Init();
 80008d4:	f000 faea 	bl	8000eac <MX_TIM5_Init>
  MX_I2C1_Init();
 80008d8:	f000 f952 	bl	8000b80 <MX_I2C1_Init>
  MX_ADC1_Init();
 80008dc:	f000 f8b0 	bl	8000a40 <MX_ADC1_Init>
  MX_ETH_Init();
 80008e0:	f000 f900 	bl	8000ae4 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 80008e4:	2201      	movs	r2, #1
 80008e6:	4914      	ldr	r1, [pc, #80]	; (8000938 <main+0x98>)
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <main+0x9c>)
 80008ea:	f006 fb96 	bl	800701a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 80008ee:	2201      	movs	r2, #1
 80008f0:	4913      	ldr	r1, [pc, #76]	; (8000940 <main+0xa0>)
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <main+0xa4>)
 80008f4:	f006 fb91 	bl	800701a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <main+0xa8>)
 80008fa:	f004 fe3f 	bl	800557c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <main+0xac>)
 8000900:	f004 fe3c 	bl	800557c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000904:	2100      	movs	r1, #0
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <main+0xb0>)
 8000908:	f005 f926 	bl	8005b58 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 800090c:	2100      	movs	r1, #0
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <main+0xb4>)
 8000910:	f004 ffbc 	bl	800588c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000914:	2100      	movs	r1, #0
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <main+0xb8>)
 8000918:	f004 fef0 	bl	80056fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 800091c:	210c      	movs	r1, #12
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <main+0xbc>)
 8000920:	f004 feec 	bl	80056fc <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);	// Start
 8000924:	480e      	ldr	r0, [pc, #56]	; (8000960 <main+0xc0>)
 8000926:	f001 fc5d 	bl	80021e4 <HAL_ADC_Start_IT>


//  DHT11_Init();
//  i2c_lcd_init();

  TIM10_10ms_counter=0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <main+0xc4>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
//  init_dotmatrix_up();
//  init_dotmatrix_down();


//  cds_led();
  elevator_main();
 8000930:	f7ff fe58 	bl	80005e4 <elevator_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000934:	e7fe      	b.n	8000934 <main+0x94>
 8000936:	bf00      	nop
 8000938:	20000abc 	.word	0x20000abc
 800093c:	20000528 	.word	0x20000528
 8000940:	20000abd 	.word	0x20000abd
 8000944:	2000056c 	.word	0x2000056c
 8000948:	20000498 	.word	0x20000498
 800094c:	200004e0 	.word	0x200004e0
 8000950:	200003c0 	.word	0x200003c0
 8000954:	20000408 	.word	0x20000408
 8000958:	20000378 	.word	0x20000378
 800095c:	20000450 	.word	0x20000450
 8000960:	2000020c 	.word	0x2000020c
 8000964:	20000ac0 	.word	0x20000ac0

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f007 fe14 	bl	80085a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <SystemClock_Config+0xd0>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <SystemClock_Config+0xd0>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <SystemClock_Config+0xd0>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <SystemClock_Config+0xd4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <SystemClock_Config+0xd4>)
 80009b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <SystemClock_Config+0xd4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009c4:	2309      	movs	r3, #9
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009ce:	2301      	movs	r3, #1
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009e0:	23a8      	movs	r3, #168	; 0xa8
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009e8:	2307      	movs	r3, #7
 80009ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 fce7 	bl	80043c4 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009fc:	f000 fce8 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2105      	movs	r1, #5
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 ff48 	bl	80048b4 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a2a:	f000 fcd1 	bl	80013d0 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3750      	adds	r7, #80	; 0x50
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a54:	4a21      	ldr	r2, [pc, #132]	; (8000adc <MX_ADC1_Init+0x9c>)
 8000a56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <MX_ADC1_Init+0xa0>)
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000aa2:	f001 fb5b 	bl	800215c <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000aac:	f000 fc90 	bl	80013d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_ADC1_Init+0x98>)
 8000ac2:	f001 fd9f 	bl	8002604 <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000acc:	f000 fc80 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000020c 	.word	0x2000020c
 8000adc:	40012000 	.word	0x40012000
 8000ae0:	0f000001 	.word	0x0f000001

08000ae4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_ETH_Init+0x84>)
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <MX_ETH_Init+0x88>)
 8000aec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000afc:	22e1      	movs	r2, #225	; 0xe1
 8000afe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <MX_ETH_Init+0x8c>)
 8000b16:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b1e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <MX_ETH_Init+0x90>)
 8000b24:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_ETH_Init+0x94>)
 8000b2a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b32:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_ETH_Init+0x84>)
 8000b36:	f002 f941 	bl	8002dbc <HAL_ETH_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b40:	f000 fc46 	bl	80013d0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b44:	2238      	movs	r2, #56	; 0x38
 8000b46:	2100      	movs	r1, #0
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b4a:	f007 fd2b 	bl	80085a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b50:	2221      	movs	r2, #33	; 0x21
 8000b52:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b56:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b5a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_ETH_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000254 	.word	0x20000254
 8000b6c:	40028000 	.word	0x40028000
 8000b70:	20000ad4 	.word	0x20000ad4
 8000b74:	2000016c 	.word	0x2000016c
 8000b78:	200000cc 	.word	0x200000cc
 8000b7c:	20000094 	.word	0x20000094

08000b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <MX_I2C1_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x7c>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bbe:	f002 fe1d 	bl	80037fc <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc8:	f000 fc02 	bl	80013d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bd0:	f003 fa5f 	bl	8004092 <HAL_I2CEx_ConfigAnalogFilter>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bda:	f000 fbf9 	bl	80013d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000be2:	f003 fa92 	bl	800410a <HAL_I2CEx_ConfigDigitalFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bec:	f000 fbf0 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000304 	.word	0x20000304
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	000186a0 	.word	0x000186a0

08000c00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_RTC_Init+0xac>)
 8000c1a:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <MX_RTC_Init+0xb0>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_RTC_Init+0xac>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_RTC_Init+0xac>)
 8000c26:	227f      	movs	r2, #127	; 0x7f
 8000c28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_RTC_Init+0xac>)
 8000c2c:	22ff      	movs	r2, #255	; 0xff
 8000c2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_RTC_Init+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_RTC_Init+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_RTC_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c42:	481a      	ldr	r0, [pc, #104]	; (8000cac <MX_RTC_Init+0xac>)
 8000c44:	f004 fa16 	bl	8005074 <HAL_RTC_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000c4e:	f000 fbbf 	bl	80013d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000c52:	2309      	movs	r3, #9
 8000c54:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000c56:	2338      	movs	r3, #56	; 0x38
 8000c58:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_RTC_Init+0xac>)
 8000c6e:	f004 fa77 	bl	8005160 <HAL_RTC_SetTime>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000c78:	f000 fbaa 	bl	80013d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000c80:	2310      	movs	r3, #16
 8000c82:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000c84:	2316      	movs	r3, #22
 8000c86:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000c88:	2323      	movs	r3, #35	; 0x23
 8000c8a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_RTC_Init+0xac>)
 8000c94:	f004 fafe 	bl	8005294 <HAL_RTC_SetDate>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c9e:	f000 fb97 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000358 	.word	0x20000358
 8000cb0:	40002800 	.word	0x40002800

08000cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000ce0:	f240 628f 	movw	r2, #1679	; 0x68f
 8000ce4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000cee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d00:	4818      	ldr	r0, [pc, #96]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000d02:	f004 fcab 	bl	800565c <HAL_TIM_PWM_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d0c:	f000 fb60 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000d20:	f006 f80c 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d2a:	f000 fb51 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2e:	2360      	movs	r3, #96	; 0x60
 8000d30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000d32:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000d36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000d48:	f005 f9d2 	bl	80060f0 <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000d52:	f000 fb3d 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <MX_TIM2_Init+0xb0>)
 8000d58:	f000 fde4 	bl	8001924 <HAL_TIM_MspPostInit>

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000378 	.word	0x20000378

08000d68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <MX_TIM3_Init+0xa4>)
 8000d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000d8c:	2253      	movs	r2, #83	; 0x53
 8000d8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000daa:	4817      	ldr	r0, [pc, #92]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000dac:	f004 fe84 	bl	8005ab8 <HAL_TIM_IC_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 fb0b 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480f      	ldr	r0, [pc, #60]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000dca:	f005 ffb7 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 fafc 	bl	80013d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000dd8:	230a      	movs	r3, #10
 8000dda:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_TIM3_Init+0xa0>)
 8000df0:	f005 f8e2 	bl	8005fb8 <HAL_TIM_IC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000dfa:	f000 fae9 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200003c0 	.word	0x200003c0
 8000e0c:	40000400 	.word	0x40000400

08000e10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <MX_TIM4_Init+0x98>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e34:	f240 3247 	movw	r2, #839	; 0x347
 8000e38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e42:	2263      	movs	r2, #99	; 0x63
 8000e44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e54:	f004 fb43 	bl	80054de <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e5e:	f000 fab7 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e70:	f005 fa00 	bl	8006274 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 faa9 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM4_Init+0x94>)
 8000e8c:	f005 ff56 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e96:	f000 fa9b 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000408 	.word	0x20000408
 8000ea8:	40000800 	.word	0x40000800

08000eac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000ede:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <MX_TIM5_Init+0xe8>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000ee4:	2233      	movs	r2, #51	; 0x33
 8000ee6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000ef0:	f240 128f 	movw	r2, #399	; 0x18f
 8000ef4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f02:	4823      	ldr	r0, [pc, #140]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000f04:	f004 faeb 	bl	80054de <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000f0e:	f000 fa5f 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481c      	ldr	r0, [pc, #112]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000f20:	f005 f9a8 	bl	8006274 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000f2a:	f000 fa51 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f2e:	4818      	ldr	r0, [pc, #96]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000f30:	f004 fb94 	bl	800565c <HAL_TIM_PWM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 fa49 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4810      	ldr	r0, [pc, #64]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000f4e:	f005 fef5 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f58:	f000 fa3a 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5c:	2360      	movs	r3, #96	; 0x60
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000f60:	23c7      	movs	r3, #199	; 0xc7
 8000f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	220c      	movs	r2, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000f74:	f005 f8bc 	bl	80060f0 <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000f7e:	f000 fa27 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM5_Init+0xe4>)
 8000f84:	f000 fcce 	bl	8001924 <HAL_TIM_MspPostInit>

}
 8000f88:	bf00      	nop
 8000f8a:	3738      	adds	r7, #56	; 0x38
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000450 	.word	0x20000450
 8000f94:	40000c00 	.word	0x40000c00

08000f98 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_TIM10_Init+0x40>)
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MX_TIM10_Init+0x44>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <MX_TIM10_Init+0x40>)
 8000fa4:	22a7      	movs	r2, #167	; 0xa7
 8000fa6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_TIM10_Init+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_TIM10_Init+0x40>)
 8000fb0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fb4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_TIM10_Init+0x40>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_TIM10_Init+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM10_Init+0x40>)
 8000fc4:	f004 fa8b 	bl	80054de <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000fce:	f000 f9ff 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000498 	.word	0x20000498
 8000fdc:	40014400 	.word	0x40014400

08000fe0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_TIM11_Init+0x40>)
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <MX_TIM11_Init+0x44>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_TIM11_Init+0x40>)
 8000fec:	22a7      	movs	r2, #167	; 0xa7
 8000fee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_TIM11_Init+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_TIM11_Init+0x40>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_TIM11_Init+0x40>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_TIM11_Init+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM11_Init+0x40>)
 800100c:	f004 fa67 	bl	80054de <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001016:	f000 f9db 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200004e0 	.word	0x200004e0
 8001024:	40014800 	.word	0x40014800

08001028 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <MX_USART3_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001034:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001060:	f005 fefc 	bl	8006e5c <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f000 f9b1 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000528 	.word	0x20000528
 8001078:	40004800 	.word	0x40004800

0800107c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART6_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001088:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800108c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010b4:	f005 fed2 	bl	8006e5c <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f000 f987 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000056c 	.word	0x2000056c
 80010cc:	40011400 	.word	0x40011400

080010d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010de:	2204      	movs	r2, #4
 80010e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001108:	2201      	movs	r2, #1
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001114:	f003 f838 	bl	8004188 <HAL_PCD_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800111e:	f000 f957 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200005b0 	.word	0x200005b0

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
 8001146:	4b9a      	ldr	r3, [pc, #616]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a99      	ldr	r2, [pc, #612]	; (80013b0 <MX_GPIO_Init+0x284>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b97      	ldr	r3, [pc, #604]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	4b93      	ldr	r3, [pc, #588]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a92      	ldr	r2, [pc, #584]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b90      	ldr	r3, [pc, #576]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	4b8c      	ldr	r3, [pc, #560]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a8b      	ldr	r2, [pc, #556]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b89      	ldr	r3, [pc, #548]	; (80013b0 <MX_GPIO_Init+0x284>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <MX_GPIO_Init+0x284>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a84      	ldr	r2, [pc, #528]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b82      	ldr	r3, [pc, #520]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b7e      	ldr	r3, [pc, #504]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a7d      	ldr	r2, [pc, #500]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b7b      	ldr	r3, [pc, #492]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b77      	ldr	r3, [pc, #476]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a76      	ldr	r2, [pc, #472]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b74      	ldr	r3, [pc, #464]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b70      	ldr	r3, [pc, #448]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a6f      	ldr	r2, [pc, #444]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <MX_GPIO_Init+0x284>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <MX_GPIO_Init+0x284>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a68      	ldr	r2, [pc, #416]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <MX_GPIO_Init+0x284>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001222:	2200      	movs	r2, #0
 8001224:	f242 31fc 	movw	r1, #9212	; 0x23fc
 8001228:	4862      	ldr	r0, [pc, #392]	; (80013b4 <MX_GPIO_Init+0x288>)
 800122a:	f002 fa9b 	bl	8003764 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	4861      	ldr	r0, [pc, #388]	; (80013b8 <MX_GPIO_Init+0x28c>)
 8001234:	f002 fa96 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND7_Pin|FND6_Pin|FND10_Pin
 8001238:	2200      	movs	r2, #0
 800123a:	f644 41ff 	movw	r1, #19711	; 0x4cff
 800123e:	485f      	ldr	r0, [pc, #380]	; (80013bc <MX_GPIO_Init+0x290>)
 8001240:	f002 fa90 	bl	8003764 <HAL_GPIO_WritePin>
                          |FND5_Pin|LD3_Pin|FND4_Pin|FND2_Pin
                          |FND1_Pin|FND9_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ULTRASONIC_TRIGGER_Pin|LED0_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800124a:	485d      	ldr	r0, [pc, #372]	; (80013c0 <MX_GPIO_Init+0x294>)
 800124c:	f002 fa8a 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001250:	2200      	movs	r2, #0
 8001252:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001256:	485b      	ldr	r0, [pc, #364]	; (80013c4 <MX_GPIO_Init+0x298>)
 8001258:	f002 fa84 	bl	8003764 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f244 2140 	movw	r1, #16960	; 0x4240
 8001262:	4859      	ldr	r0, [pc, #356]	; (80013c8 <MX_GPIO_Init+0x29c>)
 8001264:	f002 fa7e 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001268:	f242 33fc 	movw	r3, #9212	; 0x23fc
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	484c      	ldr	r0, [pc, #304]	; (80013b4 <MX_GPIO_Init+0x288>)
 8001282:	f002 f8c3 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin
                           PHOTO3_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin
 8001286:	f243 030d 	movw	r3, #12301	; 0x300d
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PHOTO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	484b      	ldr	r0, [pc, #300]	; (80013cc <MX_GPIO_Init+0x2a0>)
 800129e:	f002 f8b5 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80012a2:	2301      	movs	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	483f      	ldr	r0, [pc, #252]	; (80013b8 <MX_GPIO_Init+0x28c>)
 80012ba:	f002 f8a7 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND7_Pin FND6_Pin FND10_Pin
                           FND5_Pin LD3_Pin FND4_Pin FND2_Pin
                           FND1_Pin FND9_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND7_Pin|FND6_Pin|FND10_Pin
 80012be:	f644 43ff 	movw	r3, #19711	; 0x4cff
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |FND5_Pin|LD3_Pin|FND4_Pin|FND2_Pin
                          |FND1_Pin|FND9_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4839      	ldr	r0, [pc, #228]	; (80013bc <MX_GPIO_Init+0x290>)
 80012d8:	f002 f898 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIGGER_Pin LED0_Pin LED3_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin|LED0_Pin|LED3_Pin;
 80012dc:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4832      	ldr	r0, [pc, #200]	; (80013c0 <MX_GPIO_Init+0x294>)
 80012f6:	f002 f889 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON4_Pin BUTTON2_Pin BUTTON1_Pin
                           BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON4_Pin|BUTTON2_Pin|BUTTON1_Pin
 80012fa:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |BUTTON0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4829      	ldr	r0, [pc, #164]	; (80013b4 <MX_GPIO_Init+0x288>)
 8001310:	f002 f87c 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001314:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4825      	ldr	r0, [pc, #148]	; (80013c4 <MX_GPIO_Init+0x298>)
 800132e:	f002 f86d 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LED1_Pin|LED2_Pin;
 8001332:	f244 2340 	movw	r3, #16960	; 0x4240
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	481f      	ldr	r0, [pc, #124]	; (80013c8 <MX_GPIO_Init+0x29c>)
 800134c:	f002 f85e 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	4819      	ldr	r0, [pc, #100]	; (80013c8 <MX_GPIO_Init+0x29c>)
 8001364:	f002 f852 	bl	800340c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2006      	movs	r0, #6
 800136e:	f001 fc5c 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001372:	2006      	movs	r0, #6
 8001374:	f001 fc75 	bl	8002c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2008      	movs	r0, #8
 800137e:	f001 fc54 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001382:	2008      	movs	r0, #8
 8001384:	f001 fc6d 	bl	8002c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2009      	movs	r0, #9
 800138e:	f001 fc4c 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001392:	2009      	movs	r0, #9
 8001394:	f001 fc65 	bl	8002c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f001 fc44 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013a2:	2028      	movs	r0, #40	; 0x28
 80013a4:	f001 fc5d 	bl	8002c62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40020800 	.word	0x40020800

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_MspInit+0x4c>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_MspInit+0x4c>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_ADC_MspInit+0x8c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12f      	bne.n	80014ae <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_ADC_MspInit+0x90>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_ADC_MspInit+0x90>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_ADC_MspInit+0x90>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_ADC_MspInit+0x90>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_ADC_MspInit+0x90>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_ADC_MspInit+0x90>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001486:	2310      	movs	r3, #16
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <HAL_ADC_MspInit+0x94>)
 800149a:	f001 ffb7 	bl	800340c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2012      	movs	r0, #18
 80014a4:	f001 fbc1 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014a8:	2012      	movs	r0, #18
 80014aa:	f001 fbda 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a55      	ldr	r2, [pc, #340]	; (8001638 <HAL_ETH_MspInit+0x174>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	f040 80a4 	bne.w	8001630 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_ETH_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_ETH_MspInit+0x178>)
 80014f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_ETH_MspInit+0x178>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	623b      	str	r3, [r7, #32]
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <HAL_ETH_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_ETH_MspInit+0x178>)
 800150e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	4b45      	ldr	r3, [pc, #276]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <HAL_ETH_MspInit+0x178>)
 800152a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a3d      	ldr	r2, [pc, #244]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_ETH_MspInit+0x178>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_ETH_MspInit+0x178>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a36      	ldr	r2, [pc, #216]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_ETH_MspInit+0x178>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_ETH_MspInit+0x178>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a2f      	ldr	r2, [pc, #188]	; (800163c <HAL_ETH_MspInit+0x178>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_ETH_MspInit+0x178>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_ETH_MspInit+0x178>)
 800159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_ETH_MspInit+0x178>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015ac:	2332      	movs	r3, #50	; 0x32
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015bc:	230b      	movs	r3, #11
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	481e      	ldr	r0, [pc, #120]	; (8001640 <HAL_ETH_MspInit+0x17c>)
 80015c8:	f001 ff20 	bl	800340c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015cc:	2386      	movs	r3, #134	; 0x86
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015dc:	230b      	movs	r3, #11
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <HAL_ETH_MspInit+0x180>)
 80015e8:	f001 ff10 	bl	800340c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fe:	230b      	movs	r3, #11
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <HAL_ETH_MspInit+0x184>)
 800160a:	f001 feff 	bl	800340c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800160e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001620:	230b      	movs	r3, #11
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_ETH_MspInit+0x188>)
 800162c:	f001 feee 	bl	800340c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3738      	adds	r7, #56	; 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40028000 	.word	0x40028000
 800163c:	40023800 	.word	0x40023800
 8001640:	40020800 	.word	0x40020800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40021800 	.word	0x40021800

08001650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_I2C_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12c      	bne.n	80016cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800168e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a0:	2304      	movs	r3, #4
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <HAL_I2C_MspInit+0x8c>)
 80016ac:	f001 feae 	bl	800340c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	; 0x38
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2230      	movs	r2, #48	; 0x30
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 ff57 	bl	80085a4 <memset>
  if(hrtc->Instance==RTC)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_RTC_MspInit+0x4c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d111      	bne.n	8001724 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001700:	2320      	movs	r3, #32
 8001702:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f003 faf0 	bl	8004cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800171a:	f7ff fe59 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_RTC_MspInit+0x50>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3738      	adds	r7, #56	; 0x38
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40002800 	.word	0x40002800
 8001730:	42470e3c 	.word	0x42470e3c

08001734 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d115      	bne.n	8001772 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_TIM_PWM_MspInit+0x48>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_TIM_PWM_MspInit+0x48>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_TIM_PWM_MspInit+0x48>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	201c      	movs	r0, #28
 8001768:	f001 fa5f 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800176c:	201c      	movs	r0, #28
 800176e:	f001 fa78 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_TIM_IC_MspInit+0x94>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d133      	bne.n	800180a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_TIM_IC_MspInit+0x98>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_TIM_IC_MspInit+0x98>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_TIM_IC_MspInit+0x98>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_TIM_IC_MspInit+0x98>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_TIM_IC_MspInit+0x98>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_TIM_IC_MspInit+0x98>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80017da:	2340      	movs	r3, #64	; 0x40
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ea:	2302      	movs	r3, #2
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <HAL_TIM_IC_MspInit+0x9c>)
 80017f6:	f001 fe09 	bl	800340c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	201d      	movs	r0, #29
 8001800:	f001 fa13 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001804:	201d      	movs	r0, #29
 8001806:	f001 fa2c 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40000400 	.word	0x40000400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_TIM_Base_MspInit+0xf0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d116      	bne.n	8001860 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a36      	ldr	r2, [pc, #216]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201e      	movs	r0, #30
 8001854:	f001 f9e9 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001858:	201e      	movs	r0, #30
 800185a:	f001 fa02 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800185e:	e052      	b.n	8001906 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <HAL_TIM_Base_MspInit+0xf8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d116      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2032      	movs	r0, #50	; 0x32
 800188c:	f001 f9cd 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001890:	2032      	movs	r0, #50	; 0x32
 8001892:	f001 f9e6 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 8001896:	e036      	b.n	8001906 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1f      	ldr	r2, [pc, #124]	; (800191c <HAL_TIM_Base_MspInit+0xfc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d116      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2019      	movs	r0, #25
 80018c4:	f001 f9b1 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018c8:	2019      	movs	r0, #25
 80018ca:	f001 f9ca 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 80018ce:	e01a      	b.n	8001906 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_TIM_Base_MspInit+0x100>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d115      	bne.n	8001906 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_TIM_Base_MspInit+0xf4>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	201a      	movs	r0, #26
 80018fc:	f001 f995 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001900:	201a      	movs	r0, #26
 8001902:	f001 f9ae 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40000800 	.word	0x40000800
 8001914:	40023800 	.word	0x40023800
 8001918:	40000c00 	.word	0x40000c00
 800191c:	40014400 	.word	0x40014400
 8001920:	40014800 	.word	0x40014800

08001924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001944:	d11e      	bne.n	8001984 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_TIM_MspPostInit+0xb0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <HAL_TIM_MspPostInit+0xb0>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <HAL_TIM_MspPostInit+0xb0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001962:	2320      	movs	r3, #32
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001972:	2301      	movs	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4816      	ldr	r0, [pc, #88]	; (80019d8 <HAL_TIM_MspPostInit+0xb4>)
 800197e:	f001 fd45 	bl	800340c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001982:	e022      	b.n	80019ca <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_TIM_MspPostInit+0xb8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d11d      	bne.n	80019ca <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_TIM_MspPostInit+0xb0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_TIM_MspPostInit+0xb0>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_TIM_MspPostInit+0xb0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019aa:	2308      	movs	r3, #8
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019ba:	2302      	movs	r3, #2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <HAL_TIM_MspPostInit+0xb4>)
 80019c6:	f001 fd21 	bl	800340c <HAL_GPIO_Init>
}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40000c00 	.word	0x40000c00

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <HAL_UART_MspInit+0x108>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d135      	bne.n	8001a6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a38      	ldr	r2, [pc, #224]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a31      	ldr	r2, [pc, #196]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4826      	ldr	r0, [pc, #152]	; (8001af0 <HAL_UART_MspInit+0x110>)
 8001a58:	f001 fcd8 	bl	800340c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2027      	movs	r0, #39	; 0x27
 8001a62:	f001 f8e2 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a66:	2027      	movs	r0, #39	; 0x27
 8001a68:	f001 f8fb 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a6c:	e038      	b.n	8001ae0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <HAL_UART_MspInit+0x114>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d133      	bne.n	8001ae0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	6453      	str	r3, [r2, #68]	; 0x44
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0x10c>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <HAL_UART_MspInit+0x118>)
 8001acc:	f001 fc9e 	bl	800340c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2047      	movs	r0, #71	; 0x47
 8001ad6:	f001 f8a8 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ada:	2047      	movs	r0, #71	; 0x47
 8001adc:	f001 f8c1 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 8001ae0:	bf00      	nop
 8001ae2:	3730      	adds	r7, #48	; 0x30
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40011400 	.word	0x40011400
 8001af8:	40020800 	.word	0x40020800

08001afc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1c:	d13f      	bne.n	8001b9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4815      	ldr	r0, [pc, #84]	; (8001bac <HAL_PCD_MspInit+0xb0>)
 8001b58:	f001 fc58 	bl	800340c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480e      	ldr	r0, [pc, #56]	; (8001bac <HAL_PCD_MspInit+0xb0>)
 8001b72:	f001 fc4b 	bl	800340c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b80:	6353      	str	r3, [r2, #52]	; 0x34
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_PCD_MspInit+0xac>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 fa6a 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8001c00:	f7fe fda4 	bl	800074c <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f001 fddd 	bl	80037cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 8001c1a:	2004      	movs	r0, #4
 8001c1c:	f001 fdd6 	bl	80037cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 8001c28:	2008      	movs	r0, #8
 8001c2a:	f001 fdcf 	bl	80037cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <ADC_IRQHandler+0x10>)
 8001c3a:	f000 fbb1 	bl	80023a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000020c 	.word	0x2000020c

08001c48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c4e:	f004 f8ab 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000498 	.word	0x20000498

08001c5c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c62:	f004 f8a1 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200004e0 	.word	0x200004e0

08001c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM2_IRQHandler+0x10>)
 8001c76:	f004 f897 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000378 	.word	0x20000378

08001c84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <TIM3_IRQHandler+0x10>)
 8001c8a:	f004 f88d 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200003c0 	.word	0x200003c0

08001c98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM4_IRQHandler+0x10>)
 8001c9e:	f004 f883 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000408 	.word	0x20000408

08001cac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <USART3_IRQHandler+0x10>)
 8001cb2:	f005 f9e3 	bl	800707c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000528 	.word	0x20000528

08001cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO3_Pin);
 8001cc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cc8:	f001 fd80 	bl	80037cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ccc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cd0:	f001 fd7c 	bl	80037cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <TIM5_IRQHandler+0x10>)
 8001cde:	f004 f863 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000450 	.word	0x20000450

08001cec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <USART6_IRQHandler+0x10>)
 8001cf2:	f005 f9c3 	bl	800707c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000056c 	.word	0x2000056c

08001d00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e00a      	b.n	8001d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d12:	f3af 8000 	nop.w
 8001d16:	4601      	mov	r1, r0
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf0      	blt.n	8001d12 <_read+0x12>
  }

  return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e009      	b.n	8001d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fd07 	bl	8000768 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf1      	blt.n	8001d4c <_write+0x12>
  }
  return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_close>:

int _close(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_isatty>:

int _isatty(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f006 fba0 	bl	8008550 <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20030000 	.word	0x20030000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	20000adc 	.word	0x20000adc
 8001e44:	20000b60 	.word	0x20000b60

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a32      	ldr	r2, [pc, #200]	; (8001f40 <HAL_UART_RxCpltCallback+0xd4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12c      	bne.n	8001ed6 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_UART_RxCpltCallback+0xd8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b27      	cmp	r3, #39	; 0x27
 8001e82:	dc1d      	bgt.n	8001ec0 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001e84:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <HAL_UART_RxCpltCallback+0xdc>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b0a      	cmp	r3, #10
 8001e8a:	d003      	beq.n	8001e94 <HAL_UART_RxCpltCallback+0x28>
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_UART_RxCpltCallback+0xdc>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b0d      	cmp	r3, #13
 8001e92:	d10b      	bne.n	8001eac <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_UART_RxCpltCallback+0xd8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_UART_RxCpltCallback+0xe0>)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_UART_RxCpltCallback+0xe4>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_UART_RxCpltCallback+0xd8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e00f      	b.n	8001ecc <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_UART_RxCpltCallback+0xd8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	4924      	ldr	r1, [pc, #144]	; (8001f44 <HAL_UART_RxCpltCallback+0xd8>)
 8001eb4:	600a      	str	r2, [r1, #0]
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_UART_RxCpltCallback+0xdc>)
 8001eb8:	7811      	ldrb	r1, [r2, #0]
 8001eba:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <HAL_UART_RxCpltCallback+0xe0>)
 8001ebc:	54d1      	strb	r1, [r2, r3]
 8001ebe:	e005      	b.n	8001ecc <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_UART_RxCpltCallback+0xd8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001ec6:	4823      	ldr	r0, [pc, #140]	; (8001f54 <HAL_UART_RxCpltCallback+0xe8>)
 8001ec8:	f006 fbe2 	bl	8008690 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	491e      	ldr	r1, [pc, #120]	; (8001f48 <HAL_UART_RxCpltCallback+0xdc>)
 8001ed0:	481b      	ldr	r0, [pc, #108]	; (8001f40 <HAL_UART_RxCpltCallback+0xd4>)
 8001ed2:	f005 f8a2 	bl	800701a <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_UART_RxCpltCallback+0xec>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12c      	bne.n	8001f38 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001ede:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_UART_RxCpltCallback+0xf0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b27      	cmp	r3, #39	; 0x27
 8001ee4:	dc1d      	bgt.n	8001f22 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_UART_RxCpltCallback+0xf4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b0a      	cmp	r3, #10
 8001eec:	d003      	beq.n	8001ef6 <HAL_UART_RxCpltCallback+0x8a>
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_UART_RxCpltCallback+0xf4>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b0d      	cmp	r3, #13
 8001ef4:	d10b      	bne.n	8001f0e <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_UART_RxCpltCallback+0xd8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <HAL_UART_RxCpltCallback+0xf8>)
 8001efc:	2100      	movs	r1, #0
 8001efe:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_UART_RxCpltCallback+0xfc>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_UART_RxCpltCallback+0xf0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e00f      	b.n	8001f2e <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_UART_RxCpltCallback+0xf0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	4911      	ldr	r1, [pc, #68]	; (8001f5c <HAL_UART_RxCpltCallback+0xf0>)
 8001f16:	600a      	str	r2, [r1, #0]
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_UART_RxCpltCallback+0xf4>)
 8001f1a:	7811      	ldrb	r1, [r2, #0]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_UART_RxCpltCallback+0xf8>)
 8001f1e:	54d1      	strb	r1, [r2, r3]
 8001f20:	e005      	b.n	8001f2e <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_UART_RxCpltCallback+0xf0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001f28:	4810      	ldr	r0, [pc, #64]	; (8001f6c <HAL_UART_RxCpltCallback+0x100>)
 8001f2a:	f006 fbb1 	bl	8008690 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	490b      	ldr	r1, [pc, #44]	; (8001f60 <HAL_UART_RxCpltCallback+0xf4>)
 8001f32:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_UART_RxCpltCallback+0xec>)
 8001f34:	f005 f871 	bl	800701a <HAL_UART_Receive_IT>
	}
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000528 	.word	0x20000528
 8001f44:	20000b08 	.word	0x20000b08
 8001f48:	20000abc 	.word	0x20000abc
 8001f4c:	20000ae0 	.word	0x20000ae0
 8001f50:	20000b0c 	.word	0x20000b0c
 8001f54:	08009720 	.word	0x08009720
 8001f58:	2000056c 	.word	0x2000056c
 8001f5c:	20000b38 	.word	0x20000b38
 8001f60:	20000abd 	.word	0x20000abd
 8001f64:	20000b10 	.word	0x20000b10
 8001f68:	20000b3c 	.word	0x20000b3c
 8001f6c:	08009738 	.word	0x08009738

08001f70 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d11f      	bne.n	8001fc2 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001f9a:	e012      	b.n	8001fc2 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001fac:	2100      	movs	r1, #0
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f004 fa28 	bl	8006404 <HAL_TIM_ReadCapturedValue>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001fba:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	20000b48 	.word	0x20000b48
 8001fd4:	20000b40 	.word	0x20000b40
 8001fd8:	20000b44 	.word	0x20000b44

08001fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff8:	4c0b      	ldr	r4, [pc, #44]	; (8002028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002006:	f7ff ff1f 	bl	8001e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f006 faa7 	bl	800855c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200e:	f7fe fc47 	bl	80008a0 <main>
  bx  lr    
 8002012:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002014:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002020:	08009890 	.word	0x08009890
  ldr r2, =_sbss
 8002024:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002028:	20000b60 	.word	0x20000b60

0800202c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800202c:	e7fe      	b.n	800202c <CAN1_RX0_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_Init+0x40>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_Init+0x40>)
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x40>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 fddb 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff f9ba 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fdf3 	bl	8002c7e <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 fdbb 	bl	8002c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000004 	.word	0x20000004
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	20000b4c 	.word	0x20000b4c

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000b4c 	.word	0x20000b4c

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000000c 	.word	0x2000000c

0800215c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e033      	b.n	80021da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff f956 	bl	800142c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021a2:	f023 0302 	bic.w	r3, r3, #2
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fb5a 	bl	8002868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ca:	e001      	b.n	80021d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Start_IT+0x1a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0bd      	b.n	800237a <HAL_ADC_Start_IT+0x196>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d018      	beq.n	8002246 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002224:	4b58      	ldr	r3, [pc, #352]	; (8002388 <HAL_ADC_Start_IT+0x1a4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_ADC_Start_IT+0x1a8>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0c9a      	lsrs	r2, r3, #18
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002238:	e002      	b.n	8002240 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3b01      	subs	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 8085 	bne.w	8002360 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002294:	d106      	bne.n	80022a4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f023 0206 	bic.w	r2, r3, #6
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
 80022a2:	e002      	b.n	80022aa <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_ADC_Start_IT+0x1ac>)
 80022b4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022be:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022ce:	f043 0320 	orr.w	r3, r3, #32
 80022d2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d12a      	bne.n	8002336 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_ADC_Start_IT+0x1b0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d015      	beq.n	8002316 <HAL_ADC_Start_IT+0x132>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_ADC_Start_IT+0x1b4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_Start_IT+0x11c>
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_ADC_Start_IT+0x1ac>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_ADC_Start_IT+0x1b8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d136      	bne.n	8002378 <HAL_ADC_Start_IT+0x194>
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_ADC_Start_IT+0x1ac>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d130      	bne.n	8002378 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d129      	bne.n	8002378 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e020      	b.n	8002378 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_ADC_Start_IT+0x1b0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d11b      	bne.n	8002378 <HAL_ADC_Start_IT+0x194>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d114      	bne.n	8002378 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	e00b      	b.n	8002378 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f043 0210 	orr.w	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000004 	.word	0x20000004
 800238c:	431bde83 	.word	0x431bde83
 8002390:	40012300 	.word	0x40012300
 8002394:	40012000 	.word	0x40012000
 8002398:	40012100 	.word	0x40012100
 800239c:	40012200 	.word	0x40012200

080023a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d049      	beq.n	800246a <HAL_ADC_IRQHandler+0xca>
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d046      	beq.n	800246a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12b      	bne.n	800245a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d127      	bne.n	800245a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002422:	2b00      	cmp	r3, #0
 8002424:	d119      	bne.n	800245a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0220 	bic.w	r2, r2, #32
 8002434:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fa02 	bl	8000864 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0212 	mvn.w	r2, #18
 8002468:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d057      	beq.n	8002530 <HAL_ADC_IRQHandler+0x190>
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d054      	beq.n	8002530 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d139      	bne.n	8002520 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d12b      	bne.n	8002520 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d124      	bne.n	8002520 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11d      	bne.n	8002520 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d119      	bne.n	8002520 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fa9d 	bl	8002a60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f06f 020c 	mvn.w	r2, #12
 800252e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d017      	beq.n	8002576 <HAL_ADC_IRQHandler+0x1d6>
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d014      	beq.n	8002576 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10d      	bne.n	8002576 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f837 	bl	80025da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0201 	mvn.w	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002584:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <HAL_ADC_IRQHandler+0x218>
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f06f 0220 	mvn.w	r2, #32
 80025a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f820 	bl	80025ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f06f 0220 	mvn.w	r2, #32
 80025b6:	601a      	str	r2, [r3, #0]
  }
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e113      	b.n	8002848 <HAL_ADC_ConfigChannel+0x244>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b09      	cmp	r3, #9
 800262e:	d925      	bls.n	800267c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68d9      	ldr	r1, [r3, #12]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	3b1e      	subs	r3, #30
 8002646:	2207      	movs	r2, #7
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68d9      	ldr	r1, [r3, #12]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	4603      	mov	r3, r0
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4403      	add	r3, r0
 800266e:	3b1e      	subs	r3, #30
 8002670:	409a      	lsls	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	e022      	b.n	80026c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6919      	ldr	r1, [r3, #16]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	2207      	movs	r2, #7
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4403      	add	r3, r0
 80026b8:	409a      	lsls	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d824      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b05      	subs	r3, #5
 80026dc:	221f      	movs	r2, #31
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	400a      	ands	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b05      	subs	r3, #5
 8002706:	fa00 f203 	lsl.w	r2, r0, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
 8002712:	e04c      	b.n	80027ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	d824      	bhi.n	8002766 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b23      	subs	r3, #35	; 0x23
 800272e:	221f      	movs	r2, #31
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43da      	mvns	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	400a      	ands	r2, r1
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b23      	subs	r3, #35	; 0x23
 8002758:	fa00 f203 	lsl.w	r2, r0, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
 8002764:	e023      	b.n	80027ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b41      	subs	r3, #65	; 0x41
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b41      	subs	r3, #65	; 0x41
 80027a2:	fa00 f203 	lsl.w	r2, r0, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <HAL_ADC_ConfigChannel+0x250>)
 80027b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <HAL_ADC_ConfigChannel+0x254>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10f      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1d8>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d10b      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_ADC_ConfigChannel+0x254>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d12b      	bne.n	800283e <HAL_ADC_ConfigChannel+0x23a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_ADC_ConfigChannel+0x258>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x1f4>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b11      	cmp	r3, #17
 80027f6:	d122      	bne.n	800283e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_ADC_ConfigChannel+0x258>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d111      	bne.n	800283e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_ADC_ConfigChannel+0x25c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_ADC_ConfigChannel+0x260>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	0c9a      	lsrs	r2, r3, #18
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002830:	e002      	b.n	8002838 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40012300 	.word	0x40012300
 8002858:	40012000 	.word	0x40012000
 800285c:	10000012 	.word	0x10000012
 8002860:	20000004 	.word	0x20000004
 8002864:	431bde83 	.word	0x431bde83

08002868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002870:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <ADC_Init+0x1f0>)
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800289c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	021a      	lsls	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <ADC_Init+0x1f4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800290e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	e00f      	b.n	8002966 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002964:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0202 	bic.w	r2, r2, #2
 8002974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6899      	ldr	r1, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7e1b      	ldrb	r3, [r3, #24]
 8002980:	005a      	lsls	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	3b01      	subs	r3, #1
 80029c0:	035a      	lsls	r2, r3, #13
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	e007      	b.n	80029dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	051a      	lsls	r2, r3, #20
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a1e:	025a      	lsls	r2, r3, #9
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6899      	ldr	r1, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	029a      	lsls	r2, r3, #10
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40012300 	.word	0x40012300
 8002a5c:	0f000001 	.word	0x0f000001

08002a60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4907      	ldr	r1, [pc, #28]	; (8002b10 <__NVIC_EnableIRQ+0x38>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f7ff ff8e 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff29 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff3e 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff8e 	bl	8002b68 <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff31 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffa2 	bl	8002bd0 <SysTick_Config>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff fa2a 	bl	80020fc <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d008      	beq.n	8002cc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e052      	b.n	8002d6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0216 	bic.w	r2, r2, #22
 8002cd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <HAL_DMA_Abort+0x62>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0208 	bic.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d18:	e013      	b.n	8002d42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1a:	f7ff f9ef 	bl	80020fc <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d90c      	bls.n	8002d42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2203      	movs	r2, #3
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e015      	b.n	8002d6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e4      	bne.n	8002d1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	223f      	movs	r2, #63	; 0x3f
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e00c      	b.n	8002dae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2205      	movs	r2, #5
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06c      	b.n	8002ea8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2223      	movs	r2, #35	; 0x23
 8002ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fe fb6f 	bl	80014c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_ETH_Init+0xf4>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	4a30      	ldr	r2, [pc, #192]	; (8002eb0 <HAL_ETH_Init+0xf4>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	; 0x44
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_ETH_Init+0xf4>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_ETH_Init+0xf8>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_ETH_Init+0xf8>)
 8002e08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_ETH_Init+0xf8>)
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <HAL_ETH_Init+0xf8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_ETH_Init+0xf8>)
 8002e1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e38:	f7ff f960 	bl	80020fc <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e3e:	e011      	b.n	8002e64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e40:	f7ff f95c 	bl	80020fc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e4e:	d909      	bls.n	8002e64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2204      	movs	r2, #4
 8002e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	22e0      	movs	r2, #224	; 0xe0
 8002e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e021      	b.n	8002ea8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e4      	bne.n	8002e40 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f958 	bl	800312c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f9ff 	bl	8003280 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fa55 	bl	8003332 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2100      	movs	r1, #0
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f9bd 	bl	8003210 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40013800 	.word	0x40013800

08002eb8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4b51      	ldr	r3, [pc, #324]	; (8003014 <ETH_SetMACConfig+0x15c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	7c1b      	ldrb	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <ETH_SetMACConfig+0x28>
 8002eda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ede:	e000      	b.n	8002ee2 <ETH_SetMACConfig+0x2a>
 8002ee0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	7c5b      	ldrb	r3, [r3, #17]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <ETH_SetMACConfig+0x38>
 8002eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eee:	e000      	b.n	8002ef2 <ETH_SetMACConfig+0x3a>
 8002ef0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ef2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ef8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	7fdb      	ldrb	r3, [r3, #31]
 8002efe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f00:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	7f92      	ldrb	r2, [r2, #30]
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d102      	bne.n	8002f16 <ETH_SetMACConfig+0x5e>
 8002f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f14:	e000      	b.n	8002f18 <ETH_SetMACConfig+0x60>
 8002f16:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	7f1b      	ldrb	r3, [r3, #28]
 8002f1e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f20:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	791b      	ldrb	r3, [r3, #4]
 8002f2c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f36:	2a00      	cmp	r2, #0
 8002f38:	d102      	bne.n	8002f40 <ETH_SetMACConfig+0x88>
 8002f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3e:	e000      	b.n	8002f42 <ETH_SetMACConfig+0x8a>
 8002f40:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	7bdb      	ldrb	r3, [r3, #15]
 8002f48:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f4a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f58:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff f8ce 	bl	8002114 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d101      	bne.n	8002fa6 <ETH_SetMACConfig+0xee>
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	e000      	b.n	8002fa8 <ETH_SetMACConfig+0xf0>
 8002fa6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fa8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002fb6:	2a01      	cmp	r2, #1
 8002fb8:	d101      	bne.n	8002fbe <ETH_SetMACConfig+0x106>
 8002fba:	2208      	movs	r2, #8
 8002fbc:	e000      	b.n	8002fc0 <ETH_SetMACConfig+0x108>
 8002fbe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002fc0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002fc8:	2a01      	cmp	r2, #1
 8002fca:	d101      	bne.n	8002fd0 <ETH_SetMACConfig+0x118>
 8002fcc:	2204      	movs	r2, #4
 8002fce:	e000      	b.n	8002fd2 <ETH_SetMACConfig+0x11a>
 8002fd0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002fda:	2a01      	cmp	r2, #1
 8002fdc:	d101      	bne.n	8002fe2 <ETH_SetMACConfig+0x12a>
 8002fde:	2202      	movs	r2, #2
 8002fe0:	e000      	b.n	8002fe4 <ETH_SetMACConfig+0x12c>
 8002fe2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7ff f889 	bl	8002114 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	619a      	str	r2, [r3, #24]
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	ff20810f 	.word	0xff20810f

08003018 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <ETH_SetDMAConfig+0x110>)
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	7b1b      	ldrb	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <ETH_SetDMAConfig+0x2c>
 800303e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003042:	e000      	b.n	8003046 <ETH_SetDMAConfig+0x2e>
 8003044:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	7b5b      	ldrb	r3, [r3, #13]
 800304a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800304c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	7f52      	ldrb	r2, [r2, #29]
 8003052:	2a00      	cmp	r2, #0
 8003054:	d102      	bne.n	800305c <ETH_SetDMAConfig+0x44>
 8003056:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800305a:	e000      	b.n	800305e <ETH_SetDMAConfig+0x46>
 800305c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800305e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	7b9b      	ldrb	r3, [r3, #14]
 8003064:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003066:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800306c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	7f1b      	ldrb	r3, [r3, #28]
 8003072:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003074:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	7f9b      	ldrb	r3, [r3, #30]
 800307a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800307c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003082:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800308a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800308c:	4313      	orrs	r3, r2
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309c:	461a      	mov	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ae:	2001      	movs	r0, #1
 80030b0:	f7ff f830 	bl	8002114 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030bc:	461a      	mov	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800310c:	2001      	movs	r0, #1
 800310e:	f7ff f801 	bl	8002114 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	f8de3f23 	.word	0xf8de3f23

0800312c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b0a6      	sub	sp, #152	; 0x98
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003140:	2300      	movs	r3, #0
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003168:	2300      	movs	r3, #0
 800316a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003172:	2300      	movs	r3, #0
 8003174:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800318e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003198:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fe86 	bl	8002eb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031b0:	2301      	movs	r3, #1
 80031b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031d8:	2301      	movs	r3, #1
 80031da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff08 	bl	8003018 <ETH_SetDMAConfig>
}
 8003208:	bf00      	nop
 800320a:	3798      	adds	r7, #152	; 0x98
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3305      	adds	r3, #5
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	3204      	adds	r2, #4
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <ETH_MACAddressConfig+0x68>)
 8003232:	4413      	add	r3, r2
 8003234:	461a      	mov	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3303      	adds	r3, #3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	061a      	lsls	r2, r3, #24
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3302      	adds	r3, #2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3301      	adds	r3, #1
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	4313      	orrs	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <ETH_MACAddressConfig+0x6c>)
 8003262:	4413      	add	r3, r2
 8003264:	461a      	mov	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6013      	str	r3, [r2, #0]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40028040 	.word	0x40028040
 800327c:	40028044 	.word	0x40028044

08003280 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e03e      	b.n	800330c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	3206      	adds	r2, #6
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d80c      	bhi.n	80032f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68d9      	ldr	r1, [r3, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	e004      	b.n	80032fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3301      	adds	r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d9bd      	bls.n	800328e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003324:	611a      	str	r2, [r3, #16]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e046      	b.n	80033ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6919      	ldr	r1, [r3, #16]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2200      	movs	r2, #0
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800337c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003384:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	3212      	adds	r2, #18
 800339a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d80c      	bhi.n	80033be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6919      	ldr	r1, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	e004      	b.n	80033c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d9b5      	bls.n	8003340 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fe:	60da      	str	r2, [r3, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	e177      	b.n	8003718 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003428:	2201      	movs	r2, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	f040 8166 	bne.w	8003712 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d005      	beq.n	800345e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345a:	2b02      	cmp	r3, #2
 800345c:	d130      	bne.n	80034c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2203      	movs	r2, #3
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003494:	2201      	movs	r2, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 0201 	and.w	r2, r3, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d017      	beq.n	80034fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d123      	bne.n	8003550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	08da      	lsrs	r2, r3, #3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3208      	adds	r2, #8
 8003510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	220f      	movs	r2, #15
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	08da      	lsrs	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3208      	adds	r2, #8
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0203 	and.w	r2, r3, #3
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80c0 	beq.w	8003712 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_GPIO_Init+0x324>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_GPIO_Init+0x324>)
 800359c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_GPIO_Init+0x324>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ae:	4a61      	ldr	r2, [pc, #388]	; (8003734 <HAL_GPIO_Init+0x328>)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_GPIO_Init+0x32c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d037      	beq.n	800364a <HAL_GPIO_Init+0x23e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a57      	ldr	r2, [pc, #348]	; (800373c <HAL_GPIO_Init+0x330>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_GPIO_Init+0x23a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a56      	ldr	r2, [pc, #344]	; (8003740 <HAL_GPIO_Init+0x334>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02b      	beq.n	8003642 <HAL_GPIO_Init+0x236>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a55      	ldr	r2, [pc, #340]	; (8003744 <HAL_GPIO_Init+0x338>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d025      	beq.n	800363e <HAL_GPIO_Init+0x232>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a54      	ldr	r2, [pc, #336]	; (8003748 <HAL_GPIO_Init+0x33c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <HAL_GPIO_Init+0x22e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a53      	ldr	r2, [pc, #332]	; (800374c <HAL_GPIO_Init+0x340>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d019      	beq.n	8003636 <HAL_GPIO_Init+0x22a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_GPIO_Init+0x344>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_GPIO_Init+0x226>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_GPIO_Init+0x348>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x222>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_GPIO_Init+0x34c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x21e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4f      	ldr	r2, [pc, #316]	; (800375c <HAL_GPIO_Init+0x350>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x21a>
 8003622:	2309      	movs	r3, #9
 8003624:	e012      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003626:	230a      	movs	r3, #10
 8003628:	e010      	b.n	800364c <HAL_GPIO_Init+0x240>
 800362a:	2308      	movs	r3, #8
 800362c:	e00e      	b.n	800364c <HAL_GPIO_Init+0x240>
 800362e:	2307      	movs	r3, #7
 8003630:	e00c      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003632:	2306      	movs	r3, #6
 8003634:	e00a      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003636:	2305      	movs	r3, #5
 8003638:	e008      	b.n	800364c <HAL_GPIO_Init+0x240>
 800363a:	2304      	movs	r3, #4
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x240>
 800363e:	2303      	movs	r3, #3
 8003640:	e004      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003642:	2302      	movs	r3, #2
 8003644:	e002      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_GPIO_Init+0x240>
 800364a:	2300      	movs	r3, #0
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	f002 0203 	and.w	r2, r2, #3
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	4093      	lsls	r3, r2
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800365c:	4935      	ldr	r1, [pc, #212]	; (8003734 <HAL_GPIO_Init+0x328>)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366a:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_GPIO_Init+0x354>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800368e:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_GPIO_Init+0x354>)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003694:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_GPIO_Init+0x354>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036b8:	4a29      	ldr	r2, [pc, #164]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e2:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_GPIO_Init+0x354>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	f67f ae84 	bls.w	8003428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40013800 	.word	0x40013800
 8003738:	40020000 	.word	0x40020000
 800373c:	40020400 	.word	0x40020400
 8003740:	40020800 	.word	0x40020800
 8003744:	40020c00 	.word	0x40020c00
 8003748:	40021000 	.word	0x40021000
 800374c:	40021400 	.word	0x40021400
 8003750:	40021800 	.word	0x40021800
 8003754:	40021c00 	.word	0x40021c00
 8003758:	40022000 	.word	0x40022000
 800375c:	40022400 	.word	0x40022400
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003780:	e003      	b.n	800378a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	619a      	str	r2, [r3, #24]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037a8:	887a      	ldrh	r2, [r7, #2]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	041a      	lsls	r2, r3, #16
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	400b      	ands	r3, r1
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fc ffee 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e12b      	b.n	8003a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd ff14 	bl	8001650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003860:	f001 fa20 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 8003864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a81      	ldr	r2, [pc, #516]	; (8003a70 <HAL_I2C_Init+0x274>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d807      	bhi.n	8003880 <HAL_I2C_Init+0x84>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a80      	ldr	r2, [pc, #512]	; (8003a74 <HAL_I2C_Init+0x278>)
 8003874:	4293      	cmp	r3, r2
 8003876:	bf94      	ite	ls
 8003878:	2301      	movls	r3, #1
 800387a:	2300      	movhi	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e006      	b.n	800388e <HAL_I2C_Init+0x92>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a7d      	ldr	r2, [pc, #500]	; (8003a78 <HAL_I2C_Init+0x27c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	bf94      	ite	ls
 8003888:	2301      	movls	r3, #1
 800388a:	2300      	movhi	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0e7      	b.n	8003a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a78      	ldr	r2, [pc, #480]	; (8003a7c <HAL_I2C_Init+0x280>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9b      	lsrs	r3, r3, #18
 80038a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <HAL_I2C_Init+0x274>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d802      	bhi.n	80038d0 <HAL_I2C_Init+0xd4>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3301      	adds	r3, #1
 80038ce:	e009      	b.n	80038e4 <HAL_I2C_Init+0xe8>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	4a69      	ldr	r2, [pc, #420]	; (8003a80 <HAL_I2C_Init+0x284>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	099b      	lsrs	r3, r3, #6
 80038e2:	3301      	adds	r3, #1
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	495c      	ldr	r1, [pc, #368]	; (8003a70 <HAL_I2C_Init+0x274>)
 8003900:	428b      	cmp	r3, r1
 8003902:	d819      	bhi.n	8003938 <HAL_I2C_Init+0x13c>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e59      	subs	r1, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003918:	400b      	ands	r3, r1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_I2C_Init+0x138>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1e59      	subs	r1, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fbb1 f3f3 	udiv	r3, r1, r3
 800392c:	3301      	adds	r3, #1
 800392e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003932:	e051      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003934:	2304      	movs	r3, #4
 8003936:	e04f      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d111      	bne.n	8003964 <HAL_I2C_Init+0x168>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	440b      	add	r3, r1
 800394e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003952:	3301      	adds	r3, #1
 8003954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e012      	b.n	800398a <HAL_I2C_Init+0x18e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	0099      	lsls	r1, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	fbb0 f3f3 	udiv	r3, r0, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x196>
 800398e:	2301      	movs	r3, #1
 8003990:	e022      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <HAL_I2C_Init+0x1bc>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e58      	subs	r0, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	440b      	add	r3, r1
 80039a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b6:	e00f      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	6809      	ldr	r1, [r1, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6911      	ldr	r1, [r2, #16]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	4311      	orrs	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	000186a0 	.word	0x000186a0
 8003a74:	001e847f 	.word	0x001e847f
 8003a78:	003d08ff 	.word	0x003d08ff
 8003a7c:	431bde83 	.word	0x431bde83
 8003a80:	10624dd3 	.word	0x10624dd3

08003a84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
 8003a94:	4613      	mov	r3, r2
 8003a96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7fe fb30 	bl	80020fc <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	f040 80e0 	bne.w	8003c6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2319      	movs	r3, #25
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4970      	ldr	r1, [pc, #448]	; (8003c78 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f964 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e0d3      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2C_Master_Transmit+0x50>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e0cc      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d007      	beq.n	8003afa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2210      	movs	r2, #16
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	893a      	ldrh	r2, [r7, #8]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a50      	ldr	r2, [pc, #320]	; (8003c7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b3c:	8979      	ldrh	r1, [r7, #10]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f89c 	bl	8003c80 <I2C_MasterRequestWrite>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e08d      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b68:	e066      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	6a39      	ldr	r1, [r7, #32]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f9de 	bl	8003f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d107      	bne.n	8003b92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06b      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11b      	bne.n	8003c0c <HAL_I2C_Master_Transmit+0x188>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	6a39      	ldr	r1, [r7, #32]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f9ce 	bl	8003fb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d107      	bne.n	8003c34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e01a      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d194      	bne.n	8003b6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000

08003c80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d006      	beq.n	8003caa <I2C_MasterRequestWrite+0x2a>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d003      	beq.n	8003caa <I2C_MasterRequestWrite+0x2a>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ca8:	d108      	bne.n	8003cbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e00b      	b.n	8003cd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	2b12      	cmp	r3, #18
 8003cc2:	d107      	bne.n	8003cd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f84f 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfa:	d103      	bne.n	8003d04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e035      	b.n	8003d74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d10:	d108      	bne.n	8003d24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]
 8003d22:	e01b      	b.n	8003d5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d24:	897b      	ldrh	r3, [r7, #10]
 8003d26:	11db      	asrs	r3, r3, #7
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 0306 	and.w	r3, r3, #6
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f063 030f 	orn	r3, r3, #15
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	490e      	ldr	r1, [pc, #56]	; (8003d7c <I2C_MasterRequestWrite+0xfc>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f875 	bl	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e010      	b.n	8003d74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4907      	ldr	r1, [pc, #28]	; (8003d80 <I2C_MasterRequestWrite+0x100>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f865 	bl	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	00010008 	.word	0x00010008
 8003d80:	00010002 	.word	0x00010002

08003d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d94:	e025      	b.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d021      	beq.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7fe f9ad 	bl	80020fc <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d116      	bne.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e023      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10d      	bne.n	8003e08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	e00c      	b.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d0b6      	beq.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e40:	e051      	b.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e50:	d123      	bne.n	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e046      	b.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d021      	beq.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe f92b 	bl	80020fc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d116      	bne.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e020      	b.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10c      	bne.n	8003f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	e00b      	b.n	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d18d      	bne.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f3c:	e02d      	b.n	8003f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f878 	bl	8004034 <I2C_IsAcknowledgeFailed>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e02d      	b.n	8003faa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d021      	beq.n	8003f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe f8d1 	bl	80020fc <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d116      	bne.n	8003f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e007      	b.n	8003faa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d1ca      	bne.n	8003f3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fbe:	e02d      	b.n	800401c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f837 	bl	8004034 <I2C_IsAcknowledgeFailed>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e02d      	b.n	800402c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d021      	beq.n	800401c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd8:	f7fe f890 	bl	80020fc <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d302      	bcc.n	8003fee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d116      	bne.n	800401c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e007      	b.n	800402c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d1ca      	bne.n	8003fc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d11b      	bne.n	8004084 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004054:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f043 0204 	orr.w	r2, r3, #4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d129      	bne.n	80040fc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0210 	bic.w	r2, r2, #16
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b20      	cmp	r3, #32
 8004122:	d12a      	bne.n	800417a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004144:	89fb      	ldrh	r3, [r7, #14]
 8004146:	f023 030f 	bic.w	r3, r3, #15
 800414a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	b29a      	uxth	r2, r3
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	4313      	orrs	r3, r2
 8004154:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	89fa      	ldrh	r2, [r7, #14]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e000      	b.n	800417c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
  }
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418a:	b08f      	sub	sp, #60	; 0x3c
 800418c:	af0a      	add	r7, sp, #40	; 0x28
 800418e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e10f      	b.n	80043ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fd fca1 	bl	8001afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f003 ff18 	bl	800800e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	687e      	ldr	r6, [r7, #4]
 80041e6:	466d      	mov	r5, sp
 80041e8:	f106 0410 	add.w	r4, r6, #16
 80041ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80041fc:	1d33      	adds	r3, r6, #4
 80041fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004200:	6838      	ldr	r0, [r7, #0]
 8004202:	f003 fea3 	bl	8007f4c <USB_CoreInit>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0d0      	b.n	80043ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f003 ff06 	bl	8008030 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e04a      	b.n	80042c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	333d      	adds	r3, #61	; 0x3d
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800423e:	7bfa      	ldrb	r2, [r7, #15]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	333c      	adds	r3, #60	; 0x3c
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	b298      	uxth	r0, r3
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	3344      	adds	r3, #68	; 0x44
 8004266:	4602      	mov	r2, r0
 8004268:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3340      	adds	r3, #64	; 0x40
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3348      	adds	r3, #72	; 0x48
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	334c      	adds	r3, #76	; 0x4c
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	3354      	adds	r3, #84	; 0x54
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	3301      	adds	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d3af      	bcc.n	800422a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e044      	b.n	800435a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	3301      	adds	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	d3b5      	bcc.n	80042d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	687e      	ldr	r6, [r7, #4]
 800436c:	466d      	mov	r5, sp
 800436e:	f106 0410 	add.w	r4, r6, #16
 8004372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800437a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800437e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004382:	1d33      	adds	r3, r6, #4
 8004384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004386:	6838      	ldr	r0, [r7, #0]
 8004388:	f003 fe9e 	bl	80080c8 <USB_DevInit>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e00d      	b.n	80043ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 f869 	bl	800848a <USB_DevDisconnect>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e267      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d075      	beq.n	80044ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043e2:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d00c      	beq.n	8004408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ee:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d112      	bne.n	8004420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fa:	4b82      	ldr	r3, [pc, #520]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004406:	d10b      	bne.n	8004420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	4b7e      	ldr	r3, [pc, #504]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d05b      	beq.n	80044cc <HAL_RCC_OscConfig+0x108>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d157      	bne.n	80044cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e242      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x74>
 800442a:	4b76      	ldr	r3, [pc, #472]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a75      	ldr	r2, [pc, #468]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e01d      	b.n	8004474 <HAL_RCC_OscConfig+0xb0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x98>
 8004442:	4b70      	ldr	r3, [pc, #448]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a6f      	ldr	r2, [pc, #444]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b6d      	ldr	r3, [pc, #436]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a6c      	ldr	r2, [pc, #432]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0xb0>
 800445c:	4b69      	ldr	r3, [pc, #420]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a68      	ldr	r2, [pc, #416]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b66      	ldr	r3, [pc, #408]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a65      	ldr	r2, [pc, #404]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd fe3e 	bl	80020fc <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd fe3a 	bl	80020fc <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e207      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b5b      	ldr	r3, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0xc0>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fd fe2a 	bl	80020fc <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fd fe26 	bl	80020fc <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e1f3      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044be:	4b51      	ldr	r3, [pc, #324]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0xe8>
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d063      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044da:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e6:	4b47      	ldr	r3, [pc, #284]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d11c      	bne.n	800452c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044f2:	4b44      	ldr	r3, [pc, #272]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d116      	bne.n	800452c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	4b41      	ldr	r3, [pc, #260]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_RCC_OscConfig+0x152>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d001      	beq.n	8004516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e1c7      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4937      	ldr	r1, [pc, #220]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	e03a      	b.n	80045a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004534:	4b34      	ldr	r3, [pc, #208]	; (8004608 <HAL_RCC_OscConfig+0x244>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7fd fddf 	bl	80020fc <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004542:	f7fd fddb 	bl	80020fc <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e1a8      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004554:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4925      	ldr	r1, [pc, #148]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
 8004574:	e015      	b.n	80045a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_RCC_OscConfig+0x244>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fdbe 	bl	80020fc <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004584:	f7fd fdba 	bl	80020fc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e187      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d036      	beq.n	800461c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d016      	beq.n	80045e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_RCC_OscConfig+0x248>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd fd9e 	bl	80020fc <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c4:	f7fd fd9a 	bl	80020fc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e167      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCC_OscConfig+0x240>)
 80045d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x200>
 80045e2:	e01b      	b.n	800461c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_OscConfig+0x248>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ea:	f7fd fd87 	bl	80020fc <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	e00e      	b.n	8004610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fd fd83 	bl	80020fc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d907      	bls.n	8004610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e150      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
 8004604:	40023800 	.word	0x40023800
 8004608:	42470000 	.word	0x42470000
 800460c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	4b88      	ldr	r3, [pc, #544]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ea      	bne.n	80045f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8097 	beq.w	8004758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462e:	4b81      	ldr	r3, [pc, #516]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10f      	bne.n	800465a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	4b7d      	ldr	r3, [pc, #500]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	4a7c      	ldr	r2, [pc, #496]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	6413      	str	r3, [r2, #64]	; 0x40
 800464a:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	4b77      	ldr	r3, [pc, #476]	; (8004838 <HAL_RCC_OscConfig+0x474>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d118      	bne.n	8004698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004666:	4b74      	ldr	r3, [pc, #464]	; (8004838 <HAL_RCC_OscConfig+0x474>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a73      	ldr	r2, [pc, #460]	; (8004838 <HAL_RCC_OscConfig+0x474>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004672:	f7fd fd43 	bl	80020fc <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467a:	f7fd fd3f 	bl	80020fc <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e10c      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468c:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <HAL_RCC_OscConfig+0x474>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d106      	bne.n	80046ae <HAL_RCC_OscConfig+0x2ea>
 80046a0:	4b64      	ldr	r3, [pc, #400]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a63      	ldr	r2, [pc, #396]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	e01c      	b.n	80046e8 <HAL_RCC_OscConfig+0x324>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCC_OscConfig+0x30c>
 80046b6:	4b5f      	ldr	r3, [pc, #380]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a5e      	ldr	r2, [pc, #376]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046bc:	f043 0304 	orr.w	r3, r3, #4
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
 80046c2:	4b5c      	ldr	r3, [pc, #368]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a5b      	ldr	r2, [pc, #364]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
 80046ce:	e00b      	b.n	80046e8 <HAL_RCC_OscConfig+0x324>
 80046d0:	4b58      	ldr	r3, [pc, #352]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a57      	ldr	r2, [pc, #348]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	4b55      	ldr	r3, [pc, #340]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	4a54      	ldr	r2, [pc, #336]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80046e2:	f023 0304 	bic.w	r3, r3, #4
 80046e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d015      	beq.n	800471c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fd fd04 	bl	80020fc <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fd fd00 	bl	80020fc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0cb      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	4b49      	ldr	r3, [pc, #292]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0ee      	beq.n	80046f8 <HAL_RCC_OscConfig+0x334>
 800471a:	e014      	b.n	8004746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471c:	f7fd fcee 	bl	80020fc <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004722:	e00a      	b.n	800473a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fd fcea 	bl	80020fc <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0b5      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473a:	4b3e      	ldr	r3, [pc, #248]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ee      	bne.n	8004724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474c:	4b39      	ldr	r3, [pc, #228]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	4a38      	ldr	r2, [pc, #224]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80a1 	beq.w	80048a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b08      	cmp	r3, #8
 800476c:	d05c      	beq.n	8004828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d141      	bne.n	80047fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004776:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_RCC_OscConfig+0x478>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd fcbe 	bl	80020fc <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004784:	f7fd fcba 	bl	80020fc <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e087      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	019b      	lsls	r3, r3, #6
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	3b01      	subs	r3, #1
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	491b      	ldr	r1, [pc, #108]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x478>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d2:	f7fd fc93 	bl	80020fc <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047da:	f7fd fc8f 	bl	80020fc <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e05c      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x416>
 80047f8:	e054      	b.n	80048a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <HAL_RCC_OscConfig+0x478>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fd fc7c 	bl	80020fc <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004808:	f7fd fc78 	bl	80020fc <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e045      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_OscConfig+0x470>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x444>
 8004826:	e03d      	b.n	80048a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d107      	bne.n	8004840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e038      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
 8004834:	40023800 	.word	0x40023800
 8004838:	40007000 	.word	0x40007000
 800483c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x4ec>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d028      	beq.n	80048a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d121      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d11a      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004870:	4013      	ands	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004878:	4293      	cmp	r3, r2
 800487a:	d111      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	3b01      	subs	r3, #1
 800488a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800

080048b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0cc      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048c8:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d90c      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d6:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0b8      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004908:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800492a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	494d      	ldr	r1, [pc, #308]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d044      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d119      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e07f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d003      	beq.n	8004972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496e:	2b03      	cmp	r3, #3
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e06f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004982:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e067      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4934      	ldr	r1, [pc, #208]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049a4:	f7fd fbaa 	bl	80020fc <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fd fba6 	bl	80020fc <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e04f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 020c 	and.w	r2, r3, #12
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1eb      	bne.n	80049ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d20c      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e032      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a08:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4916      	ldr	r1, [pc, #88]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	490e      	ldr	r1, [pc, #56]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a3a:	f000 f821 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	490a      	ldr	r1, [pc, #40]	; (8004a74 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	5ccb      	ldrb	r3, [r1, r3]
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fd fb0a 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023c00 	.word	0x40023c00
 8004a70:	40023800 	.word	0x40023800
 8004a74:	080097d0 	.word	0x080097d0
 8004a78:	20000004 	.word	0x20000004
 8004a7c:	20000008 	.word	0x20000008

08004a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a84:	b094      	sub	sp, #80	; 0x50
 8004a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a90:	2300      	movs	r3, #0
 8004a92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a98:	4b79      	ldr	r3, [pc, #484]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	f200 80e1 	bhi.w	8004c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d003      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x3a>
 8004ab2:	e0db      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab4:	4b73      	ldr	r3, [pc, #460]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ab8:	e0db      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aba:	4b73      	ldr	r3, [pc, #460]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8004abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004abe:	e0d8      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac0:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aca:	4b6d      	ldr	r3, [pc, #436]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d063      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	2200      	movs	r2, #0
 8004ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aea:	2300      	movs	r3, #0
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
 8004aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	f04f 0000 	mov.w	r0, #0
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	0159      	lsls	r1, r3, #5
 8004b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b04:	0150      	lsls	r0, r2, #5
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	1a51      	subs	r1, r2, r1
 8004b0e:	6139      	str	r1, [r7, #16]
 8004b10:	4629      	mov	r1, r5
 8004b12:	eb63 0301 	sbc.w	r3, r3, r1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b24:	4659      	mov	r1, fp
 8004b26:	018b      	lsls	r3, r1, #6
 8004b28:	4651      	mov	r1, sl
 8004b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b2e:	4651      	mov	r1, sl
 8004b30:	018a      	lsls	r2, r1, #6
 8004b32:	4651      	mov	r1, sl
 8004b34:	ebb2 0801 	subs.w	r8, r2, r1
 8004b38:	4659      	mov	r1, fp
 8004b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b52:	4690      	mov	r8, r2
 8004b54:	4699      	mov	r9, r3
 8004b56:	4623      	mov	r3, r4
 8004b58:	eb18 0303 	adds.w	r3, r8, r3
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	462b      	mov	r3, r5
 8004b60:	eb49 0303 	adc.w	r3, r9, r3
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b72:	4629      	mov	r1, r5
 8004b74:	024b      	lsls	r3, r1, #9
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	024a      	lsls	r2, r1, #9
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b86:	2200      	movs	r2, #0
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b90:	f7fb fb7e 	bl	8000290 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b9c:	e058      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4611      	mov	r1, r2
 8004baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	f04f 0000 	mov.w	r0, #0
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	0159      	lsls	r1, r3, #5
 8004bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bca:	0150      	lsls	r0, r2, #5
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	00eb      	lsls	r3, r5, #3
 8004c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c06:	00e2      	lsls	r2, r4, #3
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	18e3      	adds	r3, r4, r3
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	464b      	mov	r3, r9
 8004c14:	eb45 0303 	adc.w	r3, r5, r3
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c26:	4629      	mov	r1, r5
 8004c28:	028b      	lsls	r3, r1, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c30:	4621      	mov	r1, r4
 8004c32:	028a      	lsls	r2, r1, #10
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	61fa      	str	r2, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	f7fb fb24 	bl	8000290 <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c6a:	e002      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3750      	adds	r7, #80	; 0x50
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
 8004c84:	00f42400 	.word	0x00f42400
 8004c88:	007a1200 	.word	0x007a1200

08004c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c92:	681b      	ldr	r3, [r3, #0]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000004 	.word	0x20000004

08004ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca8:	f7ff fff0 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0a9b      	lsrs	r3, r3, #10
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	080097e0 	.word	0x080097e0

08004ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cd0:	f7ff ffdc 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	0b5b      	lsrs	r3, r3, #13
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	080097e0 	.word	0x080097e0

08004cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d075      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d28:	4b91      	ldr	r3, [pc, #580]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fd f9e5 	bl	80020fc <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d36:	f7fd f9e1 	bl	80020fc <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e189      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d48:	4b8a      	ldr	r3, [pc, #552]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	019a      	lsls	r2, r3, #6
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	071b      	lsls	r3, r3, #28
 8004d6c:	4981      	ldr	r1, [pc, #516]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01f      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d80:	4b7c      	ldr	r3, [pc, #496]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	0f1b      	lsrs	r3, r3, #28
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	019a      	lsls	r2, r3, #6
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	071b      	lsls	r3, r3, #28
 8004da0:	4974      	ldr	r1, [pc, #464]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004da8:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dae:	f023 021f 	bic.w	r2, r3, #31
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	496e      	ldr	r1, [pc, #440]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	019a      	lsls	r2, r3, #6
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	071b      	lsls	r3, r3, #28
 8004de0:	4964      	ldr	r1, [pc, #400]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004de8:	4b61      	ldr	r3, [pc, #388]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dee:	f7fd f985 	bl	80020fc <HAL_GetTick>
 8004df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004df6:	f7fd f981 	bl	80020fc <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e129      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e08:	4b5a      	ldr	r3, [pc, #360]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d079      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e2c:	4b52      	ldr	r3, [pc, #328]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e32:	f7fd f963 	bl	80020fc <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e3a:	f7fd f95f 	bl	80020fc <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e107      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e4c:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e58:	d0ef      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d020      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	0f1b      	lsrs	r3, r3, #28
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	019a      	lsls	r2, r3, #6
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	061b      	lsls	r3, r3, #24
 8004e80:	431a      	orrs	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	071b      	lsls	r3, r3, #28
 8004e86:	493b      	ldr	r1, [pc, #236]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e8e:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	4934      	ldr	r1, [pc, #208]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01e      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eb4:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	0e1b      	lsrs	r3, r3, #24
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	019a      	lsls	r2, r3, #6
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	071b      	lsls	r3, r3, #28
 8004ed4:	4927      	ldr	r1, [pc, #156]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	4922      	ldr	r1, [pc, #136]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ef2:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef8:	f7fd f900 	bl	80020fc <HAL_GetTick>
 8004efc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f00:	f7fd f8fc 	bl	80020fc <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0a4      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f12:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1e:	d1ef      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 808b 	beq.w	8005044 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	4a0f      	ldr	r2, [pc, #60]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a0b      	ldr	r2, [pc, #44]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f56:	f7fd f8d1 	bl	80020fc <HAL_GetTick>
 8004f5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f5c:	e010      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fd f8cd 	bl	80020fc <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d909      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e075      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f70:	42470068 	.word	0x42470068
 8004f74:	40023800 	.word	0x40023800
 8004f78:	42470070 	.word	0x42470070
 8004f7c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f80:	4b38      	ldr	r3, [pc, #224]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0e8      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f8c:	4b36      	ldr	r3, [pc, #216]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d02f      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d028      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004faa:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb4:	4b2d      	ldr	r3, [pc, #180]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fba:	4b2c      	ldr	r3, [pc, #176]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fc0:	4a29      	ldr	r2, [pc, #164]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fc6:	4b28      	ldr	r3, [pc, #160]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d114      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fd2:	f7fd f893 	bl	80020fc <HAL_GetTick>
 8004fd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f7fd f88f 	bl	80020fc <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e035      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ee      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005008:	d10d      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800500a:	4b17      	ldr	r3, [pc, #92]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	4912      	ldr	r1, [pc, #72]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
 8005024:	e005      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800502c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005030:	6093      	str	r3, [r2, #8]
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503e:	490a      	ldr	r1, [pc, #40]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005040:	4313      	orrs	r3, r2
 8005042:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005058:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40007000 	.word	0x40007000
 8005068:	40023800 	.word	0x40023800
 800506c:	42470e40 	.word	0x42470e40
 8005070:	424711e0 	.word	0x424711e0

08005074 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e066      	b.n	8005158 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	7f5b      	ldrb	r3, [r3, #29]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fb20 	bl	80016e0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	22ca      	movs	r2, #202	; 0xca
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2253      	movs	r2, #83	; 0x53
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f998 	bl	80053ec <RTC_EnterInitMode>
 80050bc:	4603      	mov	r3, r0
 80050be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d12c      	bne.n	8005120 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68d2      	ldr	r2, [r2, #12]
 8005100:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6919      	ldr	r1, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	041a      	lsls	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f99f 	bl	800545a <RTC_ExitInitMode>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d113      	bne.n	800514e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	22ff      	movs	r2, #255	; 0xff
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	7f1b      	ldrb	r3, [r3, #28]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_RTC_SetTime+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e087      	b.n	800528c <HAL_RTC_SetTime+0x12c>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2202      	movs	r2, #2
 8005186:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d126      	bne.n	80051dc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2200      	movs	r2, #0
 80051a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f97c 	bl	80054a4 <RTC_ByteToBcd2>
 80051ac:	4603      	mov	r3, r0
 80051ae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f975 	bl	80054a4 <RTC_ByteToBcd2>
 80051ba:	4603      	mov	r3, r0
 80051bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051be:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	789b      	ldrb	r3, [r3, #2]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f96d 	bl	80054a4 <RTC_ByteToBcd2>
 80051ca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	78db      	ldrb	r3, [r3, #3]
 80051d4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e018      	b.n	800520e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2200      	movs	r2, #0
 80051ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051fc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005202:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	78db      	ldrb	r3, [r3, #3]
 8005208:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	22ca      	movs	r2, #202	; 0xca
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2253      	movs	r2, #83	; 0x53
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f8e4 	bl	80053ec <RTC_EnterInitMode>
 8005224:	4603      	mov	r3, r0
 8005226:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d120      	bne.n	8005270 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005238:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800523c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800524c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	431a      	orrs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f8f7 	bl	800545a <RTC_ExitInitMode>
 800526c:	4603      	mov	r3, r0
 800526e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	22ff      	movs	r2, #255	; 0xff
 8005282:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	771a      	strb	r2, [r3, #28]

  return status;
 800528a:	7cfb      	ldrb	r3, [r7, #19]
}
 800528c:	4618      	mov	r0, r3
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd90      	pop	{r4, r7, pc}

08005294 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	7f1b      	ldrb	r3, [r3, #28]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_RTC_SetDate+0x1c>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e071      	b.n	8005394 <HAL_RTC_SetDate+0x100>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2202      	movs	r2, #2
 80052ba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10e      	bne.n	80052e0 <HAL_RTC_SetDate+0x4c>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	330a      	adds	r3, #10
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11c      	bne.n	8005320 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f8da 	bl	80054a4 <RTC_ByteToBcd2>
 80052f0:	4603      	mov	r3, r0
 80052f2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f8d3 	bl	80054a4 <RTC_ByteToBcd2>
 80052fe:	4603      	mov	r3, r0
 8005300:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005302:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	789b      	ldrb	r3, [r3, #2]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f8cb 	bl	80054a4 <RTC_ByteToBcd2>
 800530e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005310:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e00e      	b.n	800533e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	78db      	ldrb	r3, [r3, #3]
 8005324:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800532c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005332:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	22ca      	movs	r2, #202	; 0xca
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2253      	movs	r2, #83	; 0x53
 800534c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f84c 	bl	80053ec <RTC_EnterInitMode>
 8005354:	4603      	mov	r3, r0
 8005356:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005368:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800536c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f873 	bl	800545a <RTC_ExitInitMode>
 8005374:	4603      	mov	r3, r0
 8005376:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	22ff      	movs	r2, #255	; 0xff
 800538a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	771a      	strb	r2, [r3, #28]

  return status;
 8005392:	7cfb      	ldrb	r3, [r7, #19]
}
 8005394:	4618      	mov	r0, r3
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}

0800539c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053b8:	f7fc fea0 	bl	80020fc <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053be:	e009      	b.n	80053d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053c0:	f7fc fe9c 	bl	80020fc <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ce:	d901      	bls.n	80053d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e007      	b.n	80053e4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ee      	beq.n	80053c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d122      	bne.n	8005450 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005418:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800541a:	f7fc fe6f 	bl	80020fc <HAL_GetTick>
 800541e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005420:	e00c      	b.n	800543c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005422:	f7fc fe6b 	bl	80020fc <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005430:	d904      	bls.n	800543c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2204      	movs	r2, #4
 8005436:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <RTC_EnterInitMode+0x64>
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d1e8      	bne.n	8005422 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005474:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ff89 	bl	800539c <HAL_RTC_WaitForSynchro>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80054b2:	e005      	b.n	80054c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	3301      	adds	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	3b0a      	subs	r3, #10
 80054be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	d8f6      	bhi.n	80054b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	b2db      	uxtb	r3, r3
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b082      	sub	sp, #8
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e041      	b.n	8005574 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fc f98b 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f000 ffd3 	bl	80064c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d001      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e04e      	b.n	8005632 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a23      	ldr	r2, [pc, #140]	; (8005640 <HAL_TIM_Base_Start_IT+0xc4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x80>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055be:	d01d      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x80>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <HAL_TIM_Base_Start_IT+0xc8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x80>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <HAL_TIM_Base_Start_IT+0xcc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x80>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1c      	ldr	r2, [pc, #112]	; (800564c <HAL_TIM_Base_Start_IT+0xd0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x80>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <HAL_TIM_Base_Start_IT+0xd4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x80>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a19      	ldr	r2, [pc, #100]	; (8005654 <HAL_TIM_Base_Start_IT+0xd8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x80>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a18      	ldr	r2, [pc, #96]	; (8005658 <HAL_TIM_Base_Start_IT+0xdc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d111      	bne.n	8005620 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b06      	cmp	r3, #6
 800560c:	d010      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0201 	orr.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561e:	e007      	b.n	8005630 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40001800 	.word	0x40001800

0800565c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e041      	b.n	80056f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fc f856 	bl	8001734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f000 ff14 	bl	80064c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_TIM_PWM_Start+0x24>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e022      	b.n	8005766 <HAL_TIM_PWM_Start+0x6a>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d109      	bne.n	800573a <HAL_TIM_PWM_Start+0x3e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	bf14      	ite	ne
 8005732:	2301      	movne	r3, #1
 8005734:	2300      	moveq	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	e015      	b.n	8005766 <HAL_TIM_PWM_Start+0x6a>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d109      	bne.n	8005754 <HAL_TIM_PWM_Start+0x58>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e008      	b.n	8005766 <HAL_TIM_PWM_Start+0x6a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e07c      	b.n	8005868 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <HAL_TIM_PWM_Start+0x82>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577c:	e013      	b.n	80057a6 <HAL_TIM_PWM_Start+0xaa>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d104      	bne.n	800578e <HAL_TIM_PWM_Start+0x92>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800578c:	e00b      	b.n	80057a6 <HAL_TIM_PWM_Start+0xaa>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d104      	bne.n	800579e <HAL_TIM_PWM_Start+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800579c:	e003      	b.n	80057a6 <HAL_TIM_PWM_Start+0xaa>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2201      	movs	r2, #1
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fa9e 	bl	8006cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2d      	ldr	r2, [pc, #180]	; (8005870 <HAL_TIM_PWM_Start+0x174>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d004      	beq.n	80057c8 <HAL_TIM_PWM_Start+0xcc>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a2c      	ldr	r2, [pc, #176]	; (8005874 <HAL_TIM_PWM_Start+0x178>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d101      	bne.n	80057cc <HAL_TIM_PWM_Start+0xd0>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <HAL_TIM_PWM_Start+0xd2>
 80057cc:	2300      	movs	r3, #0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a22      	ldr	r2, [pc, #136]	; (8005870 <HAL_TIM_PWM_Start+0x174>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d022      	beq.n	8005832 <HAL_TIM_PWM_Start+0x136>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f4:	d01d      	beq.n	8005832 <HAL_TIM_PWM_Start+0x136>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_TIM_PWM_Start+0x17c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d018      	beq.n	8005832 <HAL_TIM_PWM_Start+0x136>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1d      	ldr	r2, [pc, #116]	; (800587c <HAL_TIM_PWM_Start+0x180>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_TIM_PWM_Start+0x136>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_TIM_PWM_Start+0x184>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_TIM_PWM_Start+0x136>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <HAL_TIM_PWM_Start+0x178>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_TIM_PWM_Start+0x136>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <HAL_TIM_PWM_Start+0x188>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIM_PWM_Start+0x136>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a16      	ldr	r2, [pc, #88]	; (8005888 <HAL_TIM_PWM_Start+0x18c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d111      	bne.n	8005856 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b06      	cmp	r3, #6
 8005842:	d010      	beq.n	8005866 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	e007      	b.n	8005866 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40014000 	.word	0x40014000
 8005888:	40001800 	.word	0x40001800

0800588c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d109      	bne.n	80058b4 <HAL_TIM_PWM_Start_IT+0x28>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e022      	b.n	80058fa <HAL_TIM_PWM_Start_IT+0x6e>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d109      	bne.n	80058ce <HAL_TIM_PWM_Start_IT+0x42>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	bf14      	ite	ne
 80058c6:	2301      	movne	r3, #1
 80058c8:	2300      	moveq	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	e015      	b.n	80058fa <HAL_TIM_PWM_Start_IT+0x6e>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d109      	bne.n	80058e8 <HAL_TIM_PWM_Start_IT+0x5c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	e008      	b.n	80058fa <HAL_TIM_PWM_Start_IT+0x6e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0c7      	b.n	8005a92 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Start_IT+0x86>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005910:	e013      	b.n	800593a <HAL_TIM_PWM_Start_IT+0xae>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d104      	bne.n	8005922 <HAL_TIM_PWM_Start_IT+0x96>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005920:	e00b      	b.n	800593a <HAL_TIM_PWM_Start_IT+0xae>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d104      	bne.n	8005932 <HAL_TIM_PWM_Start_IT+0xa6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005930:	e003      	b.n	800593a <HAL_TIM_PWM_Start_IT+0xae>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d841      	bhi.n	80059c4 <HAL_TIM_PWM_Start_IT+0x138>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800597d 	.word	0x0800597d
 800594c:	080059c5 	.word	0x080059c5
 8005950:	080059c5 	.word	0x080059c5
 8005954:	080059c5 	.word	0x080059c5
 8005958:	0800598f 	.word	0x0800598f
 800595c:	080059c5 	.word	0x080059c5
 8005960:	080059c5 	.word	0x080059c5
 8005964:	080059c5 	.word	0x080059c5
 8005968:	080059a1 	.word	0x080059a1
 800596c:	080059c5 	.word	0x080059c5
 8005970:	080059c5 	.word	0x080059c5
 8005974:	080059c5 	.word	0x080059c5
 8005978:	080059b3 	.word	0x080059b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0202 	orr.w	r2, r2, #2
 800598a:	60da      	str	r2, [r3, #12]
      break;
 800598c:	e01d      	b.n	80059ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0204 	orr.w	r2, r2, #4
 800599c:	60da      	str	r2, [r3, #12]
      break;
 800599e:	e014      	b.n	80059ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0208 	orr.w	r2, r2, #8
 80059ae:	60da      	str	r2, [r3, #12]
      break;
 80059b0:	e00b      	b.n	80059ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0210 	orr.w	r2, r2, #16
 80059c0:	60da      	str	r2, [r3, #12]
      break;
 80059c2:	e002      	b.n	80059ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d15f      	bne.n	8005a90 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2201      	movs	r2, #1
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 f989 	bl	8006cf0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2e      	ldr	r2, [pc, #184]	; (8005a9c <HAL_TIM_PWM_Start_IT+0x210>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIM_PWM_Start_IT+0x166>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2c      	ldr	r2, [pc, #176]	; (8005aa0 <HAL_TIM_PWM_Start_IT+0x214>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_PWM_Start_IT+0x16a>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_PWM_Start_IT+0x16c>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <HAL_TIM_PWM_Start_IT+0x210>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d022      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d01d      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <HAL_TIM_PWM_Start_IT+0x218>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d018      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d013      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <HAL_TIM_PWM_Start_IT+0x220>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <HAL_TIM_PWM_Start_IT+0x214>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d009      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <HAL_TIM_PWM_Start_IT+0x224>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <HAL_TIM_PWM_Start_IT+0x228>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d111      	bne.n	8005a80 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b06      	cmp	r3, #6
 8005a6c:	d010      	beq.n	8005a90 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7e:	e007      	b.n	8005a90 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40001800 	.word	0x40001800

08005ab8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e041      	b.n	8005b4e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb fe4e 	bl	8001780 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 fce6 	bl	80064c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIM_IC_Start_IT+0x1e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e013      	b.n	8005b9e <HAL_TIM_IC_Start_IT+0x46>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d104      	bne.n	8005b86 <HAL_TIM_IC_Start_IT+0x2e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e00b      	b.n	8005b9e <HAL_TIM_IC_Start_IT+0x46>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_IC_Start_IT+0x3e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	e003      	b.n	8005b9e <HAL_TIM_IC_Start_IT+0x46>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <HAL_TIM_IC_Start_IT+0x58>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e013      	b.n	8005bd8 <HAL_TIM_IC_Start_IT+0x80>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d104      	bne.n	8005bc0 <HAL_TIM_IC_Start_IT+0x68>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e00b      	b.n	8005bd8 <HAL_TIM_IC_Start_IT+0x80>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d104      	bne.n	8005bd0 <HAL_TIM_IC_Start_IT+0x78>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e003      	b.n	8005bd8 <HAL_TIM_IC_Start_IT+0x80>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d102      	bne.n	8005be6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005be0:	7b7b      	ldrb	r3, [r7, #13]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d001      	beq.n	8005bea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0cc      	b.n	8005d84 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_IC_Start_IT+0xa2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf8:	e013      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0xca>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_IC_Start_IT+0xb2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	e00b      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0xca>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_IC_Start_IT+0xc2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	e003      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0xca>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_IC_Start_IT+0xda>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	e013      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x102>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_IC_Start_IT+0xea>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c40:	e00b      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x102>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_IC_Start_IT+0xfa>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c50:	e003      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x102>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d841      	bhi.n	8005ce4 <HAL_TIM_IC_Start_IT+0x18c>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <HAL_TIM_IC_Start_IT+0x110>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005ce5 	.word	0x08005ce5
 8005c70:	08005ce5 	.word	0x08005ce5
 8005c74:	08005ce5 	.word	0x08005ce5
 8005c78:	08005caf 	.word	0x08005caf
 8005c7c:	08005ce5 	.word	0x08005ce5
 8005c80:	08005ce5 	.word	0x08005ce5
 8005c84:	08005ce5 	.word	0x08005ce5
 8005c88:	08005cc1 	.word	0x08005cc1
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005cd3 	.word	0x08005cd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0202 	orr.w	r2, r2, #2
 8005caa:	60da      	str	r2, [r3, #12]
      break;
 8005cac:	e01d      	b.n	8005cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0204 	orr.w	r2, r2, #4
 8005cbc:	60da      	str	r2, [r3, #12]
      break;
 8005cbe:	e014      	b.n	8005cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0208 	orr.w	r2, r2, #8
 8005cce:	60da      	str	r2, [r3, #12]
      break;
 8005cd0:	e00b      	b.n	8005cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0210 	orr.w	r2, r2, #16
 8005ce0:	60da      	str	r2, [r3, #12]
      break;
 8005ce2:	e002      	b.n	8005cea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d148      	bne.n	8005d82 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fff9 	bl	8006cf0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <HAL_TIM_IC_Start_IT+0x234>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d01d      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <HAL_TIM_IC_Start_IT+0x238>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <HAL_TIM_IC_Start_IT+0x23c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <HAL_TIM_IC_Start_IT+0x240>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <HAL_TIM_IC_Start_IT+0x244>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a18      	ldr	r2, [pc, #96]	; (8005da0 <HAL_TIM_IC_Start_IT+0x248>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <HAL_TIM_IC_Start_IT+0x24c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d010      	beq.n	8005d82 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d70:	e007      	b.n	8005d82 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40010400 	.word	0x40010400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40001800 	.word	0x40001800

08005da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0202 	mvn.w	r2, #2
 8005dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fc f8c0 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fb4a 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fb51 	bl	80064a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0204 	mvn.w	r2, #4
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fc f896 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb20 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fb27 	bl	80064a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0208 	mvn.w	r2, #8
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2204      	movs	r2, #4
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fc f86c 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 faf6 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fafd 	bl	80064a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d122      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d11b      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0210 	mvn.w	r2, #16
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fc f842 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 facc 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fad3 	bl	80064a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d10e      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0201 	mvn.w	r2, #1
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fa fc30 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d10e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d107      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 ff78 	bl	8006e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d10e      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa98 	bl	80064b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d10e      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d107      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0220 	mvn.w	r2, #32
 8005fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 ff42 	bl	8006e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e088      	b.n	80060e8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11b      	bne.n	800601c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6819      	ldr	r1, [r3, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f000 fcb8 	bl	8006968 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 020c 	bic.w	r2, r2, #12
 8006006:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6999      	ldr	r1, [r3, #24]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	619a      	str	r2, [r3, #24]
 800601a:	e060      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b04      	cmp	r3, #4
 8006020:	d11c      	bne.n	800605c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6819      	ldr	r1, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f000 fd3c 	bl	8006aae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006044:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6999      	ldr	r1, [r3, #24]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	021a      	lsls	r2, r3, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	619a      	str	r2, [r3, #24]
 800605a:	e040      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b08      	cmp	r3, #8
 8006060:	d11b      	bne.n	800609a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f000 fd89 	bl	8006b88 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 020c 	bic.w	r2, r2, #12
 8006084:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69d9      	ldr	r1, [r3, #28]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	61da      	str	r2, [r3, #28]
 8006098:	e021      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b0c      	cmp	r3, #12
 800609e:	d11c      	bne.n	80060da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6819      	ldr	r1, [r3, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f000 fda6 	bl	8006c00 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69d9      	ldr	r1, [r3, #28]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	61da      	str	r2, [r3, #28]
 80060d8:	e001      	b.n	80060de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800610a:	2302      	movs	r3, #2
 800610c:	e0ae      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b0c      	cmp	r3, #12
 800611a:	f200 809f 	bhi.w	800625c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006159 	.word	0x08006159
 8006128:	0800625d 	.word	0x0800625d
 800612c:	0800625d 	.word	0x0800625d
 8006130:	0800625d 	.word	0x0800625d
 8006134:	08006199 	.word	0x08006199
 8006138:	0800625d 	.word	0x0800625d
 800613c:	0800625d 	.word	0x0800625d
 8006140:	0800625d 	.word	0x0800625d
 8006144:	080061db 	.word	0x080061db
 8006148:	0800625d 	.word	0x0800625d
 800614c:	0800625d 	.word	0x0800625d
 8006150:	0800625d 	.word	0x0800625d
 8006154:	0800621b 	.word	0x0800621b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa52 	bl	8006608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0208 	orr.w	r2, r2, #8
 8006172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0204 	bic.w	r2, r2, #4
 8006182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6999      	ldr	r1, [r3, #24]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	619a      	str	r2, [r3, #24]
      break;
 8006196:	e064      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 faa2 	bl	80066e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	021a      	lsls	r2, r3, #8
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	619a      	str	r2, [r3, #24]
      break;
 80061d8:	e043      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 faf7 	bl	80067d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0208 	orr.w	r2, r2, #8
 80061f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0204 	bic.w	r2, r2, #4
 8006204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69d9      	ldr	r1, [r3, #28]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	61da      	str	r2, [r3, #28]
      break;
 8006218:	e023      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fb4b 	bl	80068bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69d9      	ldr	r1, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	021a      	lsls	r2, r3, #8
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	61da      	str	r2, [r3, #28]
      break;
 800625a:	e002      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
      break;
 8006260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIM_ConfigClockSource+0x1c>
 800628c:	2302      	movs	r3, #2
 800628e:	e0b4      	b.n	80063fa <HAL_TIM_ConfigClockSource+0x186>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c8:	d03e      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0xd4>
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ce:	f200 8087 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d6:	f000 8086 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x172>
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062de:	d87f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b70      	cmp	r3, #112	; 0x70
 80062e2:	d01a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0xa6>
 80062e4:	2b70      	cmp	r3, #112	; 0x70
 80062e6:	d87b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b60      	cmp	r3, #96	; 0x60
 80062ea:	d050      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x11a>
 80062ec:	2b60      	cmp	r3, #96	; 0x60
 80062ee:	d877      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b50      	cmp	r3, #80	; 0x50
 80062f2:	d03c      	beq.n	800636e <HAL_TIM_ConfigClockSource+0xfa>
 80062f4:	2b50      	cmp	r3, #80	; 0x50
 80062f6:	d873      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d058      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x13a>
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d86f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b30      	cmp	r3, #48	; 0x30
 8006302:	d064      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d86b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d060      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d867      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05c      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	2b10      	cmp	r3, #16
 8006316:	d05a      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15a>
 8006318:	e062      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f000 fcc1 	bl	8006cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800633c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
      break;
 8006346:	e04f      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6899      	ldr	r1, [r3, #8]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f000 fcaa 	bl	8006cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636a:	609a      	str	r2, [r3, #8]
      break;
 800636c:	e03c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	461a      	mov	r2, r3
 800637c:	f000 fb68 	bl	8006a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2150      	movs	r1, #80	; 0x50
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fc77 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 800638c:	e02c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	461a      	mov	r2, r3
 800639c:	f000 fbc4 	bl	8006b28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2160      	movs	r1, #96	; 0x60
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fc67 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 80063ac:	e01c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6859      	ldr	r1, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f000 fb48 	bl	8006a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2140      	movs	r1, #64	; 0x40
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fc57 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 80063cc:	e00c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f000 fc4e 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 80063de:	e003      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
      break;
 80063e4:	e000      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	d831      	bhi.n	800647c <HAL_TIM_ReadCapturedValue+0x78>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <HAL_TIM_ReadCapturedValue+0x1c>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006455 	.word	0x08006455
 8006424:	0800647d 	.word	0x0800647d
 8006428:	0800647d 	.word	0x0800647d
 800642c:	0800647d 	.word	0x0800647d
 8006430:	0800645f 	.word	0x0800645f
 8006434:	0800647d 	.word	0x0800647d
 8006438:	0800647d 	.word	0x0800647d
 800643c:	0800647d 	.word	0x0800647d
 8006440:	08006469 	.word	0x08006469
 8006444:	0800647d 	.word	0x0800647d
 8006448:	0800647d 	.word	0x0800647d
 800644c:	0800647d 	.word	0x0800647d
 8006450:	08006473 	.word	0x08006473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	60fb      	str	r3, [r7, #12]

      break;
 800645c:	e00f      	b.n	800647e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	60fb      	str	r3, [r7, #12]

      break;
 8006466:	e00a      	b.n	800647e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	60fb      	str	r3, [r7, #12]

      break;
 8006470:	e005      	b.n	800647e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	60fb      	str	r3, [r7, #12]

      break;
 800647a:	e000      	b.n	800647e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800647c:	bf00      	nop
  }

  return tmpreg;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a40      	ldr	r2, [pc, #256]	; (80065dc <TIM_Base_SetConfig+0x114>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d013      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e6:	d00f      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3d      	ldr	r2, [pc, #244]	; (80065e0 <TIM_Base_SetConfig+0x118>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00b      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3c      	ldr	r2, [pc, #240]	; (80065e4 <TIM_Base_SetConfig+0x11c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3b      	ldr	r2, [pc, #236]	; (80065e8 <TIM_Base_SetConfig+0x120>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a3a      	ldr	r2, [pc, #232]	; (80065ec <TIM_Base_SetConfig+0x124>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d108      	bne.n	800651a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a2f      	ldr	r2, [pc, #188]	; (80065dc <TIM_Base_SetConfig+0x114>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d02b      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006528:	d027      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2c      	ldr	r2, [pc, #176]	; (80065e0 <TIM_Base_SetConfig+0x118>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d023      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2b      	ldr	r2, [pc, #172]	; (80065e4 <TIM_Base_SetConfig+0x11c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01f      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <TIM_Base_SetConfig+0x120>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01b      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a29      	ldr	r2, [pc, #164]	; (80065ec <TIM_Base_SetConfig+0x124>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d017      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <TIM_Base_SetConfig+0x128>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a27      	ldr	r2, [pc, #156]	; (80065f4 <TIM_Base_SetConfig+0x12c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <TIM_Base_SetConfig+0x130>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a25      	ldr	r2, [pc, #148]	; (80065fc <TIM_Base_SetConfig+0x134>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a24      	ldr	r2, [pc, #144]	; (8006600 <TIM_Base_SetConfig+0x138>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a23      	ldr	r2, [pc, #140]	; (8006604 <TIM_Base_SetConfig+0x13c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <TIM_Base_SetConfig+0x114>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_Base_SetConfig+0xf8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <TIM_Base_SetConfig+0x124>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d103      	bne.n	80065c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	615a      	str	r2, [r3, #20]
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40010000 	.word	0x40010000
 80065e0:	40000400 	.word	0x40000400
 80065e4:	40000800 	.word	0x40000800
 80065e8:	40000c00 	.word	0x40000c00
 80065ec:	40010400 	.word	0x40010400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800
 80065fc:	40001800 	.word	0x40001800
 8006600:	40001c00 	.word	0x40001c00
 8006604:	40002000 	.word	0x40002000

08006608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 0302 	bic.w	r3, r3, #2
 8006650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <TIM_OC1_SetConfig+0xd8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC1_SetConfig+0x64>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a1f      	ldr	r2, [pc, #124]	; (80066e4 <TIM_OC1_SetConfig+0xdc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d10c      	bne.n	8006686 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0308 	bic.w	r3, r3, #8
 8006672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f023 0304 	bic.w	r3, r3, #4
 8006684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <TIM_OC1_SetConfig+0xd8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_OC1_SetConfig+0x8e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <TIM_OC1_SetConfig+0xdc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d111      	bne.n	80066ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800669c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	621a      	str	r2, [r3, #32]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400

080066e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f023 0210 	bic.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0320 	bic.w	r3, r3, #32
 8006732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a22      	ldr	r2, [pc, #136]	; (80067cc <TIM_OC2_SetConfig+0xe4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC2_SetConfig+0x68>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <TIM_OC2_SetConfig+0xe8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10d      	bne.n	800676c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a17      	ldr	r2, [pc, #92]	; (80067cc <TIM_OC2_SetConfig+0xe4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <TIM_OC2_SetConfig+0x94>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <TIM_OC2_SetConfig+0xe8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d113      	bne.n	80067a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800678a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	621a      	str	r2, [r3, #32]
}
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40010400 	.word	0x40010400

080067d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <TIM_OC3_SetConfig+0xe0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC3_SetConfig+0x66>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a20      	ldr	r2, [pc, #128]	; (80068b8 <TIM_OC3_SetConfig+0xe4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d10d      	bne.n	8006856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a16      	ldr	r2, [pc, #88]	; (80068b4 <TIM_OC3_SetConfig+0xe0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x92>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <TIM_OC3_SetConfig+0xe4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d113      	bne.n	800688e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	621a      	str	r2, [r3, #32]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40010400 	.word	0x40010400

080068bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a12      	ldr	r2, [pc, #72]	; (8006960 <TIM_OC4_SetConfig+0xa4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_OC4_SetConfig+0x68>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a11      	ldr	r2, [pc, #68]	; (8006964 <TIM_OC4_SetConfig+0xa8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d109      	bne.n	8006938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	019b      	lsls	r3, r3, #6
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40010400 	.word	0x40010400

08006968 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a28      	ldr	r2, [pc, #160]	; (8006a34 <TIM_TI1_SetConfig+0xcc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01b      	beq.n	80069ce <TIM_TI1_SetConfig+0x66>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699c:	d017      	beq.n	80069ce <TIM_TI1_SetConfig+0x66>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a25      	ldr	r2, [pc, #148]	; (8006a38 <TIM_TI1_SetConfig+0xd0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <TIM_TI1_SetConfig+0x66>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a24      	ldr	r2, [pc, #144]	; (8006a3c <TIM_TI1_SetConfig+0xd4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00f      	beq.n	80069ce <TIM_TI1_SetConfig+0x66>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <TIM_TI1_SetConfig+0xd8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <TIM_TI1_SetConfig+0x66>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a22      	ldr	r2, [pc, #136]	; (8006a44 <TIM_TI1_SetConfig+0xdc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <TIM_TI1_SetConfig+0x66>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a21      	ldr	r2, [pc, #132]	; (8006a48 <TIM_TI1_SetConfig+0xe0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_TI1_SetConfig+0x66>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a20      	ldr	r2, [pc, #128]	; (8006a4c <TIM_TI1_SetConfig+0xe4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <TIM_TI1_SetConfig+0x6a>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <TIM_TI1_SetConfig+0x6c>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e003      	b.n	80069f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f043 0301 	orr.w	r3, r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f023 030a 	bic.w	r3, r3, #10
 8006a0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f003 030a 	and.w	r3, r3, #10
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40010000 	.word	0x40010000
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40010400 	.word	0x40010400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40001800 	.word	0x40001800

08006a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0201 	bic.w	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 030a 	bic.w	r3, r3, #10
 8006a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f023 0210 	bic.w	r2, r3, #16
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ada:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	031b      	lsls	r3, r3, #12
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	621a      	str	r2, [r3, #32]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f023 0210 	bic.w	r2, r3, #16
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	031b      	lsls	r3, r3, #12
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	621a      	str	r2, [r3, #32]
}
 8006b7c:	bf00      	nop
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 0303 	bic.w	r3, r3, #3
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006bd8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	621a      	str	r2, [r3, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	031b      	lsls	r3, r3, #12
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	031b      	lsls	r3, r3, #12
 8006c58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f043 0307 	orr.w	r3, r3, #7
 8006c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	609a      	str	r2, [r3, #8]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	609a      	str	r2, [r3, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f003 031f 	and.w	r3, r3, #31
 8006d02:	2201      	movs	r2, #1
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1a      	ldr	r2, [r3, #32]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	401a      	ands	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1a      	ldr	r2, [r3, #32]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	fa01 f303 	lsl.w	r3, r1, r3
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e05a      	b.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d01d      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10c      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40001800 	.word	0x40001800

08006e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e03f      	b.n	8006eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fa fdac 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2224      	movs	r2, #36	; 0x24
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fddf 	bl	8007a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b08a      	sub	sp, #40	; 0x28
 8006efa:	af02      	add	r7, sp, #8
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	4613      	mov	r3, r2
 8006f04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d17c      	bne.n	8007010 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_UART_Transmit+0x2c>
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e075      	b.n	8007012 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_UART_Transmit+0x3e>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e06e      	b.n	8007012 <HAL_UART_Transmit+0x11c>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2221      	movs	r2, #33	; 0x21
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f4a:	f7fb f8d7 	bl	80020fc <HAL_GetTick>
 8006f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d108      	bne.n	8006f78 <HAL_UART_Transmit+0x82>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e003      	b.n	8006f80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f88:	e02a      	b.n	8006fe0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fb1f 	bl	80075d8 <UART_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e036      	b.n	8007012 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	e007      	b.n	8006fd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1cf      	bne.n	8006f8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2140      	movs	r1, #64	; 0x40
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 faef 	bl	80075d8 <UART_WaitOnFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e006      	b.n	8007012 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	e000      	b.n	8007012 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007010:	2302      	movs	r3, #2
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	4613      	mov	r3, r2
 8007026:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b20      	cmp	r3, #32
 8007032:	d11d      	bne.n	8007070 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_UART_Receive_IT+0x26>
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e016      	b.n	8007072 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_UART_Receive_IT+0x38>
 800704e:	2302      	movs	r3, #2
 8007050:	e00f      	b.n	8007072 <HAL_UART_Receive_IT+0x58>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007060:	88fb      	ldrh	r3, [r7, #6]
 8007062:	461a      	mov	r2, r3
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fb24 	bl	80076b4 <UART_Start_Receive_IT>
 800706c:	4603      	mov	r3, r0
 800706e:	e000      	b.n	8007072 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b0ba      	sub	sp, #232	; 0xe8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10f      	bne.n	80070e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <HAL_UART_IRQHandler+0x66>
 80070ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fc07 	bl	80078ee <UART_Receive_IT>
      return;
 80070e0:	e256      	b.n	8007590 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80de 	beq.w	80072a8 <HAL_UART_IRQHandler+0x22c>
 80070ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d106      	bne.n	8007106 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80d1 	beq.w	80072a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_UART_IRQHandler+0xae>
 8007112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f043 0201 	orr.w	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <HAL_UART_IRQHandler+0xd2>
 8007136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f043 0202 	orr.w	r2, r3, #2
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <HAL_UART_IRQHandler+0xf6>
 800715a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f043 0204 	orr.w	r2, r3, #4
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d011      	beq.n	80071a2 <HAL_UART_IRQHandler+0x126>
 800717e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800718a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	f043 0208 	orr.w	r2, r3, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 81ed 	beq.w	8007586 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_UART_IRQHandler+0x14e>
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fb92 	bl	80078ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <HAL_UART_IRQHandler+0x17a>
 80071ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d04f      	beq.n	8007296 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa9a 	bl	8007730 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d141      	bne.n	800728e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3314      	adds	r3, #20
 8007210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3314      	adds	r3, #20
 8007232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800723a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800724e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1d9      	bne.n	800720a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	2b00      	cmp	r3, #0
 800725c:	d013      	beq.n	8007286 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	4a7d      	ldr	r2, [pc, #500]	; (8007458 <HAL_UART_IRQHandler+0x3dc>)
 8007264:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	4618      	mov	r0, r3
 800726c:	f7fb fd83 	bl	8002d76 <HAL_DMA_Abort_IT>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d016      	beq.n	80072a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e00e      	b.n	80072a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f990 	bl	80075ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e00a      	b.n	80072a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f98c 	bl	80075ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	e006      	b.n	80072a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f988 	bl	80075ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072a2:	e170      	b.n	8007586 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a4:	bf00      	nop
    return;
 80072a6:	e16e      	b.n	8007586 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	f040 814a 	bne.w	8007546 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8143 	beq.w	8007546 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 813c 	beq.w	8007546 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ce:	2300      	movs	r3, #0
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	f040 80b4 	bne.w	800745c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8140 	beq.w	800758a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800730e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007312:	429a      	cmp	r2, r3
 8007314:	f080 8139 	bcs.w	800758a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800731e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732a:	f000 8088 	beq.w	800743e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800734c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800735a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800735e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007366:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1d9      	bne.n	800732e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3314      	adds	r3, #20
 8007380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800738a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800739e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e1      	bne.n	800737a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e3      	bne.n	80073b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800740c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740e:	f023 0310 	bic.w	r3, r3, #16
 8007412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007420:	65ba      	str	r2, [r7, #88]	; 0x58
 8007422:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800742e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e3      	bne.n	80073fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	4618      	mov	r0, r3
 800743a:	f7fb fc2c 	bl	8002c96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007446:	b29b      	uxth	r3, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	b29b      	uxth	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8b6 	bl	80075c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007454:	e099      	b.n	800758a <HAL_UART_IRQHandler+0x50e>
 8007456:	bf00      	nop
 8007458:	080077f7 	.word	0x080077f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007464:	b29b      	uxth	r3, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 808b 	beq.w	800758e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8086 	beq.w	800758e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	330c      	adds	r3, #12
 80074a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074a6:	647a      	str	r2, [r7, #68]	; 0x44
 80074a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e3      	bne.n	8007482 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3314      	adds	r3, #20
 80074da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074de:	633a      	str	r2, [r7, #48]	; 0x30
 80074e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e3      	bne.n	80074ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0310 	bic.w	r3, r3, #16
 8007516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007524:	61fa      	str	r2, [r7, #28]
 8007526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	617b      	str	r3, [r7, #20]
   return(result);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e3      	bne.n	8007500 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f83e 	bl	80075c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007544:	e023      	b.n	800758e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <HAL_UART_IRQHandler+0x4ea>
 8007552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f95d 	bl	800781e <UART_Transmit_IT>
    return;
 8007564:	e014      	b.n	8007590 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00e      	beq.n	8007590 <HAL_UART_IRQHandler+0x514>
 8007572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f99d 	bl	80078be <UART_EndTransmit_IT>
    return;
 8007584:	e004      	b.n	8007590 <HAL_UART_IRQHandler+0x514>
    return;
 8007586:	bf00      	nop
 8007588:	e002      	b.n	8007590 <HAL_UART_IRQHandler+0x514>
      return;
 800758a:	bf00      	nop
 800758c:	e000      	b.n	8007590 <HAL_UART_IRQHandler+0x514>
      return;
 800758e:	bf00      	nop
  }
}
 8007590:	37e8      	adds	r7, #232	; 0xe8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop

08007598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b090      	sub	sp, #64	; 0x40
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	4613      	mov	r3, r2
 80075e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e8:	e050      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d04c      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <UART_WaitOnFlagUntilTimeout+0x30>
 80075f8:	f7fa fd80 	bl	80020fc <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007604:	429a      	cmp	r2, r3
 8007606:	d241      	bcs.n	800768c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	330c      	adds	r3, #12
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	330c      	adds	r3, #12
 8007626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007628:	637a      	str	r2, [r7, #52]	; 0x34
 800762a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800762e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e5      	bne.n	8007608 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3314      	adds	r3, #20
 8007642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	613b      	str	r3, [r7, #16]
   return(result);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f023 0301 	bic.w	r3, r3, #1
 8007652:	63bb      	str	r3, [r7, #56]	; 0x38
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3314      	adds	r3, #20
 800765a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800765c:	623a      	str	r2, [r7, #32]
 800765e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	69f9      	ldr	r1, [r7, #28]
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	61bb      	str	r3, [r7, #24]
   return(result);
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e5      	bne.n	800763c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e00f      	b.n	80076ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d09f      	beq.n	80075ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3740      	adds	r7, #64	; 0x40
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	88fa      	ldrh	r2, [r7, #6]
 80076d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2222      	movs	r2, #34	; 0x22
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d007      	beq.n	8007702 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007700:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695a      	ldr	r2, [r3, #20]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0201 	orr.w	r2, r2, #1
 8007710:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0220 	orr.w	r2, r2, #32
 8007720:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b095      	sub	sp, #84	; 0x54
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800774e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007758:	643a      	str	r2, [r7, #64]	; 0x40
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800775e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e5      	bne.n	8007738 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3314      	adds	r3, #20
 8007772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	61fb      	str	r3, [r7, #28]
   return(result);
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	64bb      	str	r3, [r7, #72]	; 0x48
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3314      	adds	r3, #20
 800778a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800778c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e5      	bne.n	800776c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d119      	bne.n	80077dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f023 0310 	bic.w	r3, r3, #16
 80077be:	647b      	str	r3, [r7, #68]	; 0x44
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077c8:	61ba      	str	r2, [r7, #24]
 80077ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6979      	ldr	r1, [r7, #20]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	613b      	str	r3, [r7, #16]
   return(result);
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077ea:	bf00      	nop
 80077ec:	3754      	adds	r7, #84	; 0x54
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7ff fecb 	bl	80075ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b21      	cmp	r3, #33	; 0x21
 8007830:	d13e      	bne.n	80078b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783a:	d114      	bne.n	8007866 <UART_Transmit_IT+0x48>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d110      	bne.n	8007866 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007858:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	1c9a      	adds	r2, r3, #2
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	621a      	str	r2, [r3, #32]
 8007864:	e008      	b.n	8007878 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	1c59      	adds	r1, r3, #1
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6211      	str	r1, [r2, #32]
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29b      	uxth	r3, r3
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	4619      	mov	r1, r3
 8007886:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10f      	bne.n	80078ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800789a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e000      	b.n	80078b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fe5a 	bl	8007598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b08c      	sub	sp, #48	; 0x30
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b22      	cmp	r3, #34	; 0x22
 8007900:	f040 80ab 	bne.w	8007a5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790c:	d117      	bne.n	800793e <UART_Receive_IT+0x50>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d113      	bne.n	800793e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792c:	b29a      	uxth	r2, r3
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	1c9a      	adds	r2, r3, #2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	629a      	str	r2, [r3, #40]	; 0x28
 800793c:	e026      	b.n	800798c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007950:	d007      	beq.n	8007962 <UART_Receive_IT+0x74>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <UART_Receive_IT+0x82>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e008      	b.n	8007982 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797c:	b2da      	uxtb	r2, r3
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29b      	uxth	r3, r3
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4619      	mov	r1, r3
 800799a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800799c:	2b00      	cmp	r3, #0
 800799e:	d15a      	bne.n	8007a56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0220 	bic.w	r2, r2, #32
 80079ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695a      	ldr	r2, [r3, #20]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d135      	bne.n	8007a4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	330c      	adds	r3, #12
 80079ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	613b      	str	r3, [r7, #16]
   return(result);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f023 0310 	bic.w	r3, r3, #16
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a06:	623a      	str	r2, [r7, #32]
 8007a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	69f9      	ldr	r1, [r7, #28]
 8007a0c:	6a3a      	ldr	r2, [r7, #32]
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b10      	cmp	r3, #16
 8007a26:	d10a      	bne.n	8007a3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff fdbb 	bl	80075c0 <HAL_UARTEx_RxEventCallback>
 8007a4a:	e002      	b.n	8007a52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fa fa0d 	bl	8001e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e002      	b.n	8007a5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	e000      	b.n	8007a5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a5a:	2302      	movs	r3, #2
  }
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3730      	adds	r7, #48	; 0x30
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a68:	b0c0      	sub	sp, #256	; 0x100
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a80:	68d9      	ldr	r1, [r3, #12]
 8007a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	ea40 0301 	orr.w	r3, r0, r1
 8007a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007abc:	f021 010c 	bic.w	r1, r1, #12
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007aca:	430b      	orrs	r3, r1
 8007acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ade:	6999      	ldr	r1, [r3, #24]
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	ea40 0301 	orr.w	r3, r0, r1
 8007aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b8f      	ldr	r3, [pc, #572]	; (8007d30 <UART_SetConfig+0x2cc>)
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d005      	beq.n	8007b04 <UART_SetConfig+0xa0>
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	4b8d      	ldr	r3, [pc, #564]	; (8007d34 <UART_SetConfig+0x2d0>)
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d104      	bne.n	8007b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b04:	f7fd f8e2 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8007b08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b0c:	e003      	b.n	8007b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b0e:	f7fd f8c9 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 8007b12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b20:	f040 810c 	bne.w	8007d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b36:	4622      	mov	r2, r4
 8007b38:	462b      	mov	r3, r5
 8007b3a:	1891      	adds	r1, r2, r2
 8007b3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b3e:	415b      	adcs	r3, r3
 8007b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b46:	4621      	mov	r1, r4
 8007b48:	eb12 0801 	adds.w	r8, r2, r1
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	eb43 0901 	adc.w	r9, r3, r1
 8007b52:	f04f 0200 	mov.w	r2, #0
 8007b56:	f04f 0300 	mov.w	r3, #0
 8007b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b66:	4690      	mov	r8, r2
 8007b68:	4699      	mov	r9, r3
 8007b6a:	4623      	mov	r3, r4
 8007b6c:	eb18 0303 	adds.w	r3, r8, r3
 8007b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b74:	462b      	mov	r3, r5
 8007b76:	eb49 0303 	adc.w	r3, r9, r3
 8007b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b92:	460b      	mov	r3, r1
 8007b94:	18db      	adds	r3, r3, r3
 8007b96:	653b      	str	r3, [r7, #80]	; 0x50
 8007b98:	4613      	mov	r3, r2
 8007b9a:	eb42 0303 	adc.w	r3, r2, r3
 8007b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ba8:	f7f8 fb72 	bl	8000290 <__aeabi_uldivmod>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4b61      	ldr	r3, [pc, #388]	; (8007d38 <UART_SetConfig+0x2d4>)
 8007bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	011c      	lsls	r4, r3, #4
 8007bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bcc:	4642      	mov	r2, r8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	1891      	adds	r1, r2, r2
 8007bd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bd4:	415b      	adcs	r3, r3
 8007bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bdc:	4641      	mov	r1, r8
 8007bde:	eb12 0a01 	adds.w	sl, r2, r1
 8007be2:	4649      	mov	r1, r9
 8007be4:	eb43 0b01 	adc.w	fp, r3, r1
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bfc:	4692      	mov	sl, r2
 8007bfe:	469b      	mov	fp, r3
 8007c00:	4643      	mov	r3, r8
 8007c02:	eb1a 0303 	adds.w	r3, sl, r3
 8007c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	18db      	adds	r3, r3, r3
 8007c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c2e:	4613      	mov	r3, r2
 8007c30:	eb42 0303 	adc.w	r3, r2, r3
 8007c34:	647b      	str	r3, [r7, #68]	; 0x44
 8007c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c3e:	f7f8 fb27 	bl	8000290 <__aeabi_uldivmod>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4611      	mov	r1, r2
 8007c48:	4b3b      	ldr	r3, [pc, #236]	; (8007d38 <UART_SetConfig+0x2d4>)
 8007c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	2264      	movs	r2, #100	; 0x64
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	1acb      	subs	r3, r1, r3
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c5e:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <UART_SetConfig+0x2d4>)
 8007c60:	fba3 2302 	umull	r2, r3, r3, r2
 8007c64:	095b      	lsrs	r3, r3, #5
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c6c:	441c      	add	r4, r3
 8007c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c80:	4642      	mov	r2, r8
 8007c82:	464b      	mov	r3, r9
 8007c84:	1891      	adds	r1, r2, r2
 8007c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c90:	4641      	mov	r1, r8
 8007c92:	1851      	adds	r1, r2, r1
 8007c94:	6339      	str	r1, [r7, #48]	; 0x30
 8007c96:	4649      	mov	r1, r9
 8007c98:	414b      	adcs	r3, r1
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ca8:	4659      	mov	r1, fp
 8007caa:	00cb      	lsls	r3, r1, #3
 8007cac:	4651      	mov	r1, sl
 8007cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cb2:	4651      	mov	r1, sl
 8007cb4:	00ca      	lsls	r2, r1, #3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	189b      	adds	r3, r3, r2
 8007cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	eb42 0303 	adc.w	r3, r2, r3
 8007ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	18db      	adds	r3, r3, r3
 8007ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cea:	4613      	mov	r3, r2
 8007cec:	eb42 0303 	adc.w	r3, r2, r3
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cfa:	f7f8 fac9 	bl	8000290 <__aeabi_uldivmod>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <UART_SetConfig+0x2d4>)
 8007d04:	fba3 1302 	umull	r1, r3, r3, r2
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	2164      	movs	r1, #100	; 0x64
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	3332      	adds	r3, #50	; 0x32
 8007d16:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <UART_SetConfig+0x2d4>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	f003 0207 	and.w	r2, r3, #7
 8007d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4422      	add	r2, r4
 8007d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d2c:	e105      	b.n	8007f3a <UART_SetConfig+0x4d6>
 8007d2e:	bf00      	nop
 8007d30:	40011000 	.word	0x40011000
 8007d34:	40011400 	.word	0x40011400
 8007d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d4e:	4642      	mov	r2, r8
 8007d50:	464b      	mov	r3, r9
 8007d52:	1891      	adds	r1, r2, r2
 8007d54:	6239      	str	r1, [r7, #32]
 8007d56:	415b      	adcs	r3, r3
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d5e:	4641      	mov	r1, r8
 8007d60:	1854      	adds	r4, r2, r1
 8007d62:	4649      	mov	r1, r9
 8007d64:	eb43 0501 	adc.w	r5, r3, r1
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	00eb      	lsls	r3, r5, #3
 8007d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d76:	00e2      	lsls	r2, r4, #3
 8007d78:	4614      	mov	r4, r2
 8007d7a:	461d      	mov	r5, r3
 8007d7c:	4643      	mov	r3, r8
 8007d7e:	18e3      	adds	r3, r4, r3
 8007d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d84:	464b      	mov	r3, r9
 8007d86:	eb45 0303 	adc.w	r3, r5, r3
 8007d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007daa:	4629      	mov	r1, r5
 8007dac:	008b      	lsls	r3, r1, #2
 8007dae:	4621      	mov	r1, r4
 8007db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007db4:	4621      	mov	r1, r4
 8007db6:	008a      	lsls	r2, r1, #2
 8007db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007dbc:	f7f8 fa68 	bl	8000290 <__aeabi_uldivmod>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4b60      	ldr	r3, [pc, #384]	; (8007f48 <UART_SetConfig+0x4e4>)
 8007dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dca:	095b      	lsrs	r3, r3, #5
 8007dcc:	011c      	lsls	r4, r3, #4
 8007dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007de0:	4642      	mov	r2, r8
 8007de2:	464b      	mov	r3, r9
 8007de4:	1891      	adds	r1, r2, r2
 8007de6:	61b9      	str	r1, [r7, #24]
 8007de8:	415b      	adcs	r3, r3
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007df0:	4641      	mov	r1, r8
 8007df2:	1851      	adds	r1, r2, r1
 8007df4:	6139      	str	r1, [r7, #16]
 8007df6:	4649      	mov	r1, r9
 8007df8:	414b      	adcs	r3, r1
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e08:	4659      	mov	r1, fp
 8007e0a:	00cb      	lsls	r3, r1, #3
 8007e0c:	4651      	mov	r1, sl
 8007e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e12:	4651      	mov	r1, sl
 8007e14:	00ca      	lsls	r2, r1, #3
 8007e16:	4610      	mov	r0, r2
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	189b      	adds	r3, r3, r2
 8007e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e24:	464b      	mov	r3, r9
 8007e26:	460a      	mov	r2, r1
 8007e28:	eb42 0303 	adc.w	r3, r2, r3
 8007e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e48:	4649      	mov	r1, r9
 8007e4a:	008b      	lsls	r3, r1, #2
 8007e4c:	4641      	mov	r1, r8
 8007e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e52:	4641      	mov	r1, r8
 8007e54:	008a      	lsls	r2, r1, #2
 8007e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e5a:	f7f8 fa19 	bl	8000290 <__aeabi_uldivmod>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <UART_SetConfig+0x4e4>)
 8007e64:	fba3 1302 	umull	r1, r3, r3, r2
 8007e68:	095b      	lsrs	r3, r3, #5
 8007e6a:	2164      	movs	r1, #100	; 0x64
 8007e6c:	fb01 f303 	mul.w	r3, r1, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	3332      	adds	r3, #50	; 0x32
 8007e76:	4a34      	ldr	r2, [pc, #208]	; (8007f48 <UART_SetConfig+0x4e4>)
 8007e78:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e82:	441c      	add	r4, r3
 8007e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e88:	2200      	movs	r2, #0
 8007e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e8c:	677a      	str	r2, [r7, #116]	; 0x74
 8007e8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e92:	4642      	mov	r2, r8
 8007e94:	464b      	mov	r3, r9
 8007e96:	1891      	adds	r1, r2, r2
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	415b      	adcs	r3, r3
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	1851      	adds	r1, r2, r1
 8007ea6:	6039      	str	r1, [r7, #0]
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	414b      	adcs	r3, r1
 8007eac:	607b      	str	r3, [r7, #4]
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007eba:	4659      	mov	r1, fp
 8007ebc:	00cb      	lsls	r3, r1, #3
 8007ebe:	4651      	mov	r1, sl
 8007ec0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ec4:	4651      	mov	r1, sl
 8007ec6:	00ca      	lsls	r2, r1, #3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4603      	mov	r3, r0
 8007ece:	4642      	mov	r2, r8
 8007ed0:	189b      	adds	r3, r3, r2
 8007ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	460a      	mov	r2, r1
 8007ed8:	eb42 0303 	adc.w	r3, r2, r3
 8007edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ee8:	667a      	str	r2, [r7, #100]	; 0x64
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	008b      	lsls	r3, r1, #2
 8007efa:	4641      	mov	r1, r8
 8007efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f00:	4641      	mov	r1, r8
 8007f02:	008a      	lsls	r2, r1, #2
 8007f04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f08:	f7f8 f9c2 	bl	8000290 <__aeabi_uldivmod>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <UART_SetConfig+0x4e4>)
 8007f12:	fba3 1302 	umull	r1, r3, r3, r2
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	2164      	movs	r1, #100	; 0x64
 8007f1a:	fb01 f303 	mul.w	r3, r1, r3
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	3332      	adds	r3, #50	; 0x32
 8007f24:	4a08      	ldr	r2, [pc, #32]	; (8007f48 <UART_SetConfig+0x4e4>)
 8007f26:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	f003 020f 	and.w	r2, r3, #15
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4422      	add	r2, r4
 8007f38:	609a      	str	r2, [r3, #8]
}
 8007f3a:	bf00      	nop
 8007f3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f40:	46bd      	mov	sp, r7
 8007f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f46:	bf00      	nop
 8007f48:	51eb851f 	.word	0x51eb851f

08007f4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	f107 001c 	add.w	r0, r7, #28
 8007f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d122      	bne.n	8007faa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d105      	bne.n	8007f9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 faa2 	bl	80084e8 <USB_CoreReset>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
 8007fa8:	e01a      	b.n	8007fe0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa96 	bl	80084e8 <USB_CoreReset>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	639a      	str	r2, [r3, #56]	; 0x38
 8007fd2:	e005      	b.n	8007fe0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d10b      	bne.n	8007ffe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f043 0206 	orr.w	r2, r3, #6
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f043 0220 	orr.w	r2, r3, #32
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800800a:	b004      	add	sp, #16
 800800c:	4770      	bx	lr

0800800e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f023 0201 	bic.w	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d115      	bne.n	800807e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800805e:	2001      	movs	r0, #1
 8008060:	f7fa f858 	bl	8002114 <HAL_Delay>
      ms++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa2e 	bl	80084cc <USB_GetMode>
 8008070:	4603      	mov	r3, r0
 8008072:	2b01      	cmp	r3, #1
 8008074:	d01e      	beq.n	80080b4 <USB_SetCurrentMode+0x84>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b31      	cmp	r3, #49	; 0x31
 800807a:	d9f0      	bls.n	800805e <USB_SetCurrentMode+0x2e>
 800807c:	e01a      	b.n	80080b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d115      	bne.n	80080b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008090:	2001      	movs	r0, #1
 8008092:	f7fa f83f 	bl	8002114 <HAL_Delay>
      ms++;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fa15 	bl	80084cc <USB_GetMode>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <USB_SetCurrentMode+0x84>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b31      	cmp	r3, #49	; 0x31
 80080ac:	d9f0      	bls.n	8008090 <USB_SetCurrentMode+0x60>
 80080ae:	e001      	b.n	80080b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e005      	b.n	80080c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b32      	cmp	r3, #50	; 0x32
 80080b8:	d101      	bne.n	80080be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e000      	b.n	80080c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080c8:	b084      	sub	sp, #16
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b086      	sub	sp, #24
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	e009      	b.n	80080fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3340      	adds	r3, #64	; 0x40
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	2200      	movs	r2, #0
 80080f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	3301      	adds	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b0e      	cmp	r3, #14
 8008100:	d9f2      	bls.n	80080e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d11c      	bne.n	8008142 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008116:	f043 0302 	orr.w	r3, r3, #2
 800811a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	639a      	str	r2, [r3, #56]	; 0x38
 8008140:	e00b      	b.n	800815a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008160:	461a      	mov	r2, r3
 8008162:	2300      	movs	r3, #0
 8008164:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816c:	4619      	mov	r1, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008174:	461a      	mov	r2, r3
 8008176:	680b      	ldr	r3, [r1, #0]
 8008178:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	2b01      	cmp	r3, #1
 800817e:	d10c      	bne.n	800819a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008186:	2100      	movs	r1, #0
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f965 	bl	8008458 <USB_SetDevSpeed>
 800818e:	e008      	b.n	80081a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008190:	2101      	movs	r1, #1
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f960 	bl	8008458 <USB_SetDevSpeed>
 8008198:	e003      	b.n	80081a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800819a:	2103      	movs	r1, #3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f95b 	bl	8008458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081a2:	2110      	movs	r1, #16
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8f3 	bl	8008390 <USB_FlushTxFifo>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f91f 	bl	80083f8 <USB_FlushRxFifo>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	461a      	mov	r2, r3
 80081cc:	2300      	movs	r3, #0
 80081ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	461a      	mov	r2, r3
 80081d8:	2300      	movs	r3, #0
 80081da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e2:	461a      	mov	r2, r3
 80081e4:	2300      	movs	r3, #0
 80081e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081e8:	2300      	movs	r3, #0
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	e043      	b.n	8008276 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008204:	d118      	bne.n	8008238 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008218:	461a      	mov	r2, r3
 800821a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	e013      	b.n	800824a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822e:	461a      	mov	r2, r3
 8008230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	e008      	b.n	800824a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008244:	461a      	mov	r2, r3
 8008246:	2300      	movs	r3, #0
 8008248:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008256:	461a      	mov	r2, r3
 8008258:	2300      	movs	r3, #0
 800825a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008268:	461a      	mov	r2, r3
 800826a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800826e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3301      	adds	r3, #1
 8008274:	613b      	str	r3, [r7, #16]
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	429a      	cmp	r2, r3
 800827c:	d3b7      	bcc.n	80081ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800827e:	2300      	movs	r3, #0
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	e043      	b.n	800830c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800829a:	d118      	bne.n	80082ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	461a      	mov	r2, r3
 80082b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	e013      	b.n	80082e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c4:	461a      	mov	r2, r3
 80082c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	e008      	b.n	80082e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	461a      	mov	r2, r3
 80082dc:	2300      	movs	r3, #0
 80082de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ec:	461a      	mov	r2, r3
 80082ee:	2300      	movs	r3, #0
 80082f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fe:	461a      	mov	r2, r3
 8008300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008304:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	3301      	adds	r3, #1
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	429a      	cmp	r2, r3
 8008312:	d3b7      	bcc.n	8008284 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008326:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008334:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f043 0210 	orr.w	r2, r3, #16
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699a      	ldr	r2, [r3, #24]
 800834c:	4b0f      	ldr	r3, [pc, #60]	; (800838c <USB_DevInit+0x2c4>)
 800834e:	4313      	orrs	r3, r2
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f043 0208 	orr.w	r2, r3, #8
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008368:	2b01      	cmp	r3, #1
 800836a:	d107      	bne.n	800837c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008374:	f043 0304 	orr.w	r3, r3, #4
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008388:	b004      	add	sp, #16
 800838a:	4770      	bx	lr
 800838c:	803c3800 	.word	0x803c3800

08008390 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <USB_FlushTxFifo+0x64>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d901      	bls.n	80083b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e01b      	b.n	80083e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	daf2      	bge.n	800839e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	019b      	lsls	r3, r3, #6
 80083c0:	f043 0220 	orr.w	r2, r3, #32
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3301      	adds	r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <USB_FlushTxFifo+0x64>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d901      	bls.n	80083da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e006      	b.n	80083e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d0f0      	beq.n	80083c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	00030d40 	.word	0x00030d40

080083f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4a11      	ldr	r2, [pc, #68]	; (8008454 <USB_FlushRxFifo+0x5c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e018      	b.n	8008448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	daf2      	bge.n	8008404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2210      	movs	r2, #16
 8008426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3301      	adds	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a08      	ldr	r2, [pc, #32]	; (8008454 <USB_FlushRxFifo+0x5c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d901      	bls.n	800843a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e006      	b.n	8008448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0310 	and.w	r3, r3, #16
 8008442:	2b10      	cmp	r3, #16
 8008444:	d0f0      	beq.n	8008428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	00030d40 	.word	0x00030d40

08008458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008478:	4313      	orrs	r3, r2
 800847a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084a4:	f023 0303 	bic.w	r3, r3, #3
 80084a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084b8:	f043 0302 	orr.w	r3, r3, #2
 80084bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	f003 0301 	and.w	r3, r3, #1
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3301      	adds	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a13      	ldr	r2, [pc, #76]	; (800854c <USB_CoreReset+0x64>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d901      	bls.n	8008506 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e01b      	b.n	800853e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	daf2      	bge.n	80084f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f043 0201 	orr.w	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4a09      	ldr	r2, [pc, #36]	; (800854c <USB_CoreReset+0x64>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d901      	bls.n	8008530 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e006      	b.n	800853e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b01      	cmp	r3, #1
 800853a:	d0f0      	beq.n	800851e <USB_CoreReset+0x36>

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	00030d40 	.word	0x00030d40

08008550 <__errno>:
 8008550:	4b01      	ldr	r3, [pc, #4]	; (8008558 <__errno+0x8>)
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	20000010 	.word	0x20000010

0800855c <__libc_init_array>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	4d0d      	ldr	r5, [pc, #52]	; (8008594 <__libc_init_array+0x38>)
 8008560:	4c0d      	ldr	r4, [pc, #52]	; (8008598 <__libc_init_array+0x3c>)
 8008562:	1b64      	subs	r4, r4, r5
 8008564:	10a4      	asrs	r4, r4, #2
 8008566:	2600      	movs	r6, #0
 8008568:	42a6      	cmp	r6, r4
 800856a:	d109      	bne.n	8008580 <__libc_init_array+0x24>
 800856c:	4d0b      	ldr	r5, [pc, #44]	; (800859c <__libc_init_array+0x40>)
 800856e:	4c0c      	ldr	r4, [pc, #48]	; (80085a0 <__libc_init_array+0x44>)
 8008570:	f001 f88e 	bl	8009690 <_init>
 8008574:	1b64      	subs	r4, r4, r5
 8008576:	10a4      	asrs	r4, r4, #2
 8008578:	2600      	movs	r6, #0
 800857a:	42a6      	cmp	r6, r4
 800857c:	d105      	bne.n	800858a <__libc_init_array+0x2e>
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	f855 3b04 	ldr.w	r3, [r5], #4
 8008584:	4798      	blx	r3
 8008586:	3601      	adds	r6, #1
 8008588:	e7ee      	b.n	8008568 <__libc_init_array+0xc>
 800858a:	f855 3b04 	ldr.w	r3, [r5], #4
 800858e:	4798      	blx	r3
 8008590:	3601      	adds	r6, #1
 8008592:	e7f2      	b.n	800857a <__libc_init_array+0x1e>
 8008594:	08009888 	.word	0x08009888
 8008598:	08009888 	.word	0x08009888
 800859c:	08009888 	.word	0x08009888
 80085a0:	0800988c 	.word	0x0800988c

080085a4 <memset>:
 80085a4:	4402      	add	r2, r0
 80085a6:	4603      	mov	r3, r0
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d100      	bne.n	80085ae <memset+0xa>
 80085ac:	4770      	bx	lr
 80085ae:	f803 1b01 	strb.w	r1, [r3], #1
 80085b2:	e7f9      	b.n	80085a8 <memset+0x4>

080085b4 <_puts_r>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	460e      	mov	r6, r1
 80085b8:	4605      	mov	r5, r0
 80085ba:	b118      	cbz	r0, 80085c4 <_puts_r+0x10>
 80085bc:	6983      	ldr	r3, [r0, #24]
 80085be:	b90b      	cbnz	r3, 80085c4 <_puts_r+0x10>
 80085c0:	f000 fa68 	bl	8008a94 <__sinit>
 80085c4:	69ab      	ldr	r3, [r5, #24]
 80085c6:	68ac      	ldr	r4, [r5, #8]
 80085c8:	b913      	cbnz	r3, 80085d0 <_puts_r+0x1c>
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 fa62 	bl	8008a94 <__sinit>
 80085d0:	4b2c      	ldr	r3, [pc, #176]	; (8008684 <_puts_r+0xd0>)
 80085d2:	429c      	cmp	r4, r3
 80085d4:	d120      	bne.n	8008618 <_puts_r+0x64>
 80085d6:	686c      	ldr	r4, [r5, #4]
 80085d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085da:	07db      	lsls	r3, r3, #31
 80085dc:	d405      	bmi.n	80085ea <_puts_r+0x36>
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	0598      	lsls	r0, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_puts_r+0x36>
 80085e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e6:	f000 faf3 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	0719      	lsls	r1, r3, #28
 80085ee:	d51d      	bpl.n	800862c <_puts_r+0x78>
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	b1db      	cbz	r3, 800862c <_puts_r+0x78>
 80085f4:	3e01      	subs	r6, #1
 80085f6:	68a3      	ldr	r3, [r4, #8]
 80085f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085fc:	3b01      	subs	r3, #1
 80085fe:	60a3      	str	r3, [r4, #8]
 8008600:	bb39      	cbnz	r1, 8008652 <_puts_r+0x9e>
 8008602:	2b00      	cmp	r3, #0
 8008604:	da38      	bge.n	8008678 <_puts_r+0xc4>
 8008606:	4622      	mov	r2, r4
 8008608:	210a      	movs	r1, #10
 800860a:	4628      	mov	r0, r5
 800860c:	f000 f868 	bl	80086e0 <__swbuf_r>
 8008610:	3001      	adds	r0, #1
 8008612:	d011      	beq.n	8008638 <_puts_r+0x84>
 8008614:	250a      	movs	r5, #10
 8008616:	e011      	b.n	800863c <_puts_r+0x88>
 8008618:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <_puts_r+0xd4>)
 800861a:	429c      	cmp	r4, r3
 800861c:	d101      	bne.n	8008622 <_puts_r+0x6e>
 800861e:	68ac      	ldr	r4, [r5, #8]
 8008620:	e7da      	b.n	80085d8 <_puts_r+0x24>
 8008622:	4b1a      	ldr	r3, [pc, #104]	; (800868c <_puts_r+0xd8>)
 8008624:	429c      	cmp	r4, r3
 8008626:	bf08      	it	eq
 8008628:	68ec      	ldreq	r4, [r5, #12]
 800862a:	e7d5      	b.n	80085d8 <_puts_r+0x24>
 800862c:	4621      	mov	r1, r4
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f8a8 	bl	8008784 <__swsetup_r>
 8008634:	2800      	cmp	r0, #0
 8008636:	d0dd      	beq.n	80085f4 <_puts_r+0x40>
 8008638:	f04f 35ff 	mov.w	r5, #4294967295
 800863c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800863e:	07da      	lsls	r2, r3, #31
 8008640:	d405      	bmi.n	800864e <_puts_r+0x9a>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	059b      	lsls	r3, r3, #22
 8008646:	d402      	bmi.n	800864e <_puts_r+0x9a>
 8008648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800864a:	f000 fac2 	bl	8008bd2 <__retarget_lock_release_recursive>
 800864e:	4628      	mov	r0, r5
 8008650:	bd70      	pop	{r4, r5, r6, pc}
 8008652:	2b00      	cmp	r3, #0
 8008654:	da04      	bge.n	8008660 <_puts_r+0xac>
 8008656:	69a2      	ldr	r2, [r4, #24]
 8008658:	429a      	cmp	r2, r3
 800865a:	dc06      	bgt.n	800866a <_puts_r+0xb6>
 800865c:	290a      	cmp	r1, #10
 800865e:	d004      	beq.n	800866a <_puts_r+0xb6>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	7019      	strb	r1, [r3, #0]
 8008668:	e7c5      	b.n	80085f6 <_puts_r+0x42>
 800866a:	4622      	mov	r2, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f837 	bl	80086e0 <__swbuf_r>
 8008672:	3001      	adds	r0, #1
 8008674:	d1bf      	bne.n	80085f6 <_puts_r+0x42>
 8008676:	e7df      	b.n	8008638 <_puts_r+0x84>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	250a      	movs	r5, #10
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	6022      	str	r2, [r4, #0]
 8008680:	701d      	strb	r5, [r3, #0]
 8008682:	e7db      	b.n	800863c <_puts_r+0x88>
 8008684:	0800980c 	.word	0x0800980c
 8008688:	0800982c 	.word	0x0800982c
 800868c:	080097ec 	.word	0x080097ec

08008690 <puts>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <puts+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f7ff bf8d 	b.w	80085b4 <_puts_r>
 800869a:	bf00      	nop
 800869c:	20000010 	.word	0x20000010

080086a0 <siprintf>:
 80086a0:	b40e      	push	{r1, r2, r3}
 80086a2:	b500      	push	{lr}
 80086a4:	b09c      	sub	sp, #112	; 0x70
 80086a6:	ab1d      	add	r3, sp, #116	; 0x74
 80086a8:	9002      	str	r0, [sp, #8]
 80086aa:	9006      	str	r0, [sp, #24]
 80086ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086b0:	4809      	ldr	r0, [pc, #36]	; (80086d8 <siprintf+0x38>)
 80086b2:	9107      	str	r1, [sp, #28]
 80086b4:	9104      	str	r1, [sp, #16]
 80086b6:	4909      	ldr	r1, [pc, #36]	; (80086dc <siprintf+0x3c>)
 80086b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086bc:	9105      	str	r1, [sp, #20]
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	a902      	add	r1, sp, #8
 80086c4:	f000 fc28 	bl	8008f18 <_svfiprintf_r>
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	b01c      	add	sp, #112	; 0x70
 80086d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d4:	b003      	add	sp, #12
 80086d6:	4770      	bx	lr
 80086d8:	20000010 	.word	0x20000010
 80086dc:	ffff0208 	.word	0xffff0208

080086e0 <__swbuf_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	460e      	mov	r6, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	4605      	mov	r5, r0
 80086e8:	b118      	cbz	r0, 80086f2 <__swbuf_r+0x12>
 80086ea:	6983      	ldr	r3, [r0, #24]
 80086ec:	b90b      	cbnz	r3, 80086f2 <__swbuf_r+0x12>
 80086ee:	f000 f9d1 	bl	8008a94 <__sinit>
 80086f2:	4b21      	ldr	r3, [pc, #132]	; (8008778 <__swbuf_r+0x98>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d12b      	bne.n	8008750 <__swbuf_r+0x70>
 80086f8:	686c      	ldr	r4, [r5, #4]
 80086fa:	69a3      	ldr	r3, [r4, #24]
 80086fc:	60a3      	str	r3, [r4, #8]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	071a      	lsls	r2, r3, #28
 8008702:	d52f      	bpl.n	8008764 <__swbuf_r+0x84>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	b36b      	cbz	r3, 8008764 <__swbuf_r+0x84>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	6820      	ldr	r0, [r4, #0]
 800870c:	1ac0      	subs	r0, r0, r3
 800870e:	6963      	ldr	r3, [r4, #20]
 8008710:	b2f6      	uxtb	r6, r6
 8008712:	4283      	cmp	r3, r0
 8008714:	4637      	mov	r7, r6
 8008716:	dc04      	bgt.n	8008722 <__swbuf_r+0x42>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f926 	bl	800896c <_fflush_r>
 8008720:	bb30      	cbnz	r0, 8008770 <__swbuf_r+0x90>
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	3b01      	subs	r3, #1
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	701e      	strb	r6, [r3, #0]
 8008730:	6963      	ldr	r3, [r4, #20]
 8008732:	3001      	adds	r0, #1
 8008734:	4283      	cmp	r3, r0
 8008736:	d004      	beq.n	8008742 <__swbuf_r+0x62>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	07db      	lsls	r3, r3, #31
 800873c:	d506      	bpl.n	800874c <__swbuf_r+0x6c>
 800873e:	2e0a      	cmp	r6, #10
 8008740:	d104      	bne.n	800874c <__swbuf_r+0x6c>
 8008742:	4621      	mov	r1, r4
 8008744:	4628      	mov	r0, r5
 8008746:	f000 f911 	bl	800896c <_fflush_r>
 800874a:	b988      	cbnz	r0, 8008770 <__swbuf_r+0x90>
 800874c:	4638      	mov	r0, r7
 800874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <__swbuf_r+0x9c>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d101      	bne.n	800875a <__swbuf_r+0x7a>
 8008756:	68ac      	ldr	r4, [r5, #8]
 8008758:	e7cf      	b.n	80086fa <__swbuf_r+0x1a>
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <__swbuf_r+0xa0>)
 800875c:	429c      	cmp	r4, r3
 800875e:	bf08      	it	eq
 8008760:	68ec      	ldreq	r4, [r5, #12]
 8008762:	e7ca      	b.n	80086fa <__swbuf_r+0x1a>
 8008764:	4621      	mov	r1, r4
 8008766:	4628      	mov	r0, r5
 8008768:	f000 f80c 	bl	8008784 <__swsetup_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	d0cb      	beq.n	8008708 <__swbuf_r+0x28>
 8008770:	f04f 37ff 	mov.w	r7, #4294967295
 8008774:	e7ea      	b.n	800874c <__swbuf_r+0x6c>
 8008776:	bf00      	nop
 8008778:	0800980c 	.word	0x0800980c
 800877c:	0800982c 	.word	0x0800982c
 8008780:	080097ec 	.word	0x080097ec

08008784 <__swsetup_r>:
 8008784:	4b32      	ldr	r3, [pc, #200]	; (8008850 <__swsetup_r+0xcc>)
 8008786:	b570      	push	{r4, r5, r6, lr}
 8008788:	681d      	ldr	r5, [r3, #0]
 800878a:	4606      	mov	r6, r0
 800878c:	460c      	mov	r4, r1
 800878e:	b125      	cbz	r5, 800879a <__swsetup_r+0x16>
 8008790:	69ab      	ldr	r3, [r5, #24]
 8008792:	b913      	cbnz	r3, 800879a <__swsetup_r+0x16>
 8008794:	4628      	mov	r0, r5
 8008796:	f000 f97d 	bl	8008a94 <__sinit>
 800879a:	4b2e      	ldr	r3, [pc, #184]	; (8008854 <__swsetup_r+0xd0>)
 800879c:	429c      	cmp	r4, r3
 800879e:	d10f      	bne.n	80087c0 <__swsetup_r+0x3c>
 80087a0:	686c      	ldr	r4, [r5, #4]
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a8:	0719      	lsls	r1, r3, #28
 80087aa:	d42c      	bmi.n	8008806 <__swsetup_r+0x82>
 80087ac:	06dd      	lsls	r5, r3, #27
 80087ae:	d411      	bmi.n	80087d4 <__swsetup_r+0x50>
 80087b0:	2309      	movs	r3, #9
 80087b2:	6033      	str	r3, [r6, #0]
 80087b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295
 80087be:	e03e      	b.n	800883e <__swsetup_r+0xba>
 80087c0:	4b25      	ldr	r3, [pc, #148]	; (8008858 <__swsetup_r+0xd4>)
 80087c2:	429c      	cmp	r4, r3
 80087c4:	d101      	bne.n	80087ca <__swsetup_r+0x46>
 80087c6:	68ac      	ldr	r4, [r5, #8]
 80087c8:	e7eb      	b.n	80087a2 <__swsetup_r+0x1e>
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <__swsetup_r+0xd8>)
 80087cc:	429c      	cmp	r4, r3
 80087ce:	bf08      	it	eq
 80087d0:	68ec      	ldreq	r4, [r5, #12]
 80087d2:	e7e6      	b.n	80087a2 <__swsetup_r+0x1e>
 80087d4:	0758      	lsls	r0, r3, #29
 80087d6:	d512      	bpl.n	80087fe <__swsetup_r+0x7a>
 80087d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087da:	b141      	cbz	r1, 80087ee <__swsetup_r+0x6a>
 80087dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087e0:	4299      	cmp	r1, r3
 80087e2:	d002      	beq.n	80087ea <__swsetup_r+0x66>
 80087e4:	4630      	mov	r0, r6
 80087e6:	f000 fa5b 	bl	8008ca0 <_free_r>
 80087ea:	2300      	movs	r3, #0
 80087ec:	6363      	str	r3, [r4, #52]	; 0x34
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	2300      	movs	r3, #0
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f043 0308 	orr.w	r3, r3, #8
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	b94b      	cbnz	r3, 800881e <__swsetup_r+0x9a>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008814:	d003      	beq.n	800881e <__swsetup_r+0x9a>
 8008816:	4621      	mov	r1, r4
 8008818:	4630      	mov	r0, r6
 800881a:	f000 fa01 	bl	8008c20 <__smakebuf_r>
 800881e:	89a0      	ldrh	r0, [r4, #12]
 8008820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008824:	f010 0301 	ands.w	r3, r0, #1
 8008828:	d00a      	beq.n	8008840 <__swsetup_r+0xbc>
 800882a:	2300      	movs	r3, #0
 800882c:	60a3      	str	r3, [r4, #8]
 800882e:	6963      	ldr	r3, [r4, #20]
 8008830:	425b      	negs	r3, r3
 8008832:	61a3      	str	r3, [r4, #24]
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	b943      	cbnz	r3, 800884a <__swsetup_r+0xc6>
 8008838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800883c:	d1ba      	bne.n	80087b4 <__swsetup_r+0x30>
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	0781      	lsls	r1, r0, #30
 8008842:	bf58      	it	pl
 8008844:	6963      	ldrpl	r3, [r4, #20]
 8008846:	60a3      	str	r3, [r4, #8]
 8008848:	e7f4      	b.n	8008834 <__swsetup_r+0xb0>
 800884a:	2000      	movs	r0, #0
 800884c:	e7f7      	b.n	800883e <__swsetup_r+0xba>
 800884e:	bf00      	nop
 8008850:	20000010 	.word	0x20000010
 8008854:	0800980c 	.word	0x0800980c
 8008858:	0800982c 	.word	0x0800982c
 800885c:	080097ec 	.word	0x080097ec

08008860 <__sflush_r>:
 8008860:	898a      	ldrh	r2, [r1, #12]
 8008862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008866:	4605      	mov	r5, r0
 8008868:	0710      	lsls	r0, r2, #28
 800886a:	460c      	mov	r4, r1
 800886c:	d458      	bmi.n	8008920 <__sflush_r+0xc0>
 800886e:	684b      	ldr	r3, [r1, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	dc05      	bgt.n	8008880 <__sflush_r+0x20>
 8008874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	dc02      	bgt.n	8008880 <__sflush_r+0x20>
 800887a:	2000      	movs	r0, #0
 800887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008882:	2e00      	cmp	r6, #0
 8008884:	d0f9      	beq.n	800887a <__sflush_r+0x1a>
 8008886:	2300      	movs	r3, #0
 8008888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800888c:	682f      	ldr	r7, [r5, #0]
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	d032      	beq.n	80088f8 <__sflush_r+0x98>
 8008892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	075a      	lsls	r2, r3, #29
 8008898:	d505      	bpl.n	80088a6 <__sflush_r+0x46>
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	1ac0      	subs	r0, r0, r3
 800889e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088a0:	b10b      	cbz	r3, 80088a6 <__sflush_r+0x46>
 80088a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088a4:	1ac0      	subs	r0, r0, r3
 80088a6:	2300      	movs	r3, #0
 80088a8:	4602      	mov	r2, r0
 80088aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ac:	6a21      	ldr	r1, [r4, #32]
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b0      	blx	r6
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	d106      	bne.n	80088c6 <__sflush_r+0x66>
 80088b8:	6829      	ldr	r1, [r5, #0]
 80088ba:	291d      	cmp	r1, #29
 80088bc:	d82c      	bhi.n	8008918 <__sflush_r+0xb8>
 80088be:	4a2a      	ldr	r2, [pc, #168]	; (8008968 <__sflush_r+0x108>)
 80088c0:	40ca      	lsrs	r2, r1
 80088c2:	07d6      	lsls	r6, r2, #31
 80088c4:	d528      	bpl.n	8008918 <__sflush_r+0xb8>
 80088c6:	2200      	movs	r2, #0
 80088c8:	6062      	str	r2, [r4, #4]
 80088ca:	04d9      	lsls	r1, r3, #19
 80088cc:	6922      	ldr	r2, [r4, #16]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	d504      	bpl.n	80088dc <__sflush_r+0x7c>
 80088d2:	1c42      	adds	r2, r0, #1
 80088d4:	d101      	bne.n	80088da <__sflush_r+0x7a>
 80088d6:	682b      	ldr	r3, [r5, #0]
 80088d8:	b903      	cbnz	r3, 80088dc <__sflush_r+0x7c>
 80088da:	6560      	str	r0, [r4, #84]	; 0x54
 80088dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088de:	602f      	str	r7, [r5, #0]
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d0ca      	beq.n	800887a <__sflush_r+0x1a>
 80088e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e8:	4299      	cmp	r1, r3
 80088ea:	d002      	beq.n	80088f2 <__sflush_r+0x92>
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 f9d7 	bl	8008ca0 <_free_r>
 80088f2:	2000      	movs	r0, #0
 80088f4:	6360      	str	r0, [r4, #52]	; 0x34
 80088f6:	e7c1      	b.n	800887c <__sflush_r+0x1c>
 80088f8:	6a21      	ldr	r1, [r4, #32]
 80088fa:	2301      	movs	r3, #1
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b0      	blx	r6
 8008900:	1c41      	adds	r1, r0, #1
 8008902:	d1c7      	bne.n	8008894 <__sflush_r+0x34>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0c4      	beq.n	8008894 <__sflush_r+0x34>
 800890a:	2b1d      	cmp	r3, #29
 800890c:	d001      	beq.n	8008912 <__sflush_r+0xb2>
 800890e:	2b16      	cmp	r3, #22
 8008910:	d101      	bne.n	8008916 <__sflush_r+0xb6>
 8008912:	602f      	str	r7, [r5, #0]
 8008914:	e7b1      	b.n	800887a <__sflush_r+0x1a>
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	e7ad      	b.n	800887c <__sflush_r+0x1c>
 8008920:	690f      	ldr	r7, [r1, #16]
 8008922:	2f00      	cmp	r7, #0
 8008924:	d0a9      	beq.n	800887a <__sflush_r+0x1a>
 8008926:	0793      	lsls	r3, r2, #30
 8008928:	680e      	ldr	r6, [r1, #0]
 800892a:	bf08      	it	eq
 800892c:	694b      	ldreq	r3, [r1, #20]
 800892e:	600f      	str	r7, [r1, #0]
 8008930:	bf18      	it	ne
 8008932:	2300      	movne	r3, #0
 8008934:	eba6 0807 	sub.w	r8, r6, r7
 8008938:	608b      	str	r3, [r1, #8]
 800893a:	f1b8 0f00 	cmp.w	r8, #0
 800893e:	dd9c      	ble.n	800887a <__sflush_r+0x1a>
 8008940:	6a21      	ldr	r1, [r4, #32]
 8008942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008944:	4643      	mov	r3, r8
 8008946:	463a      	mov	r2, r7
 8008948:	4628      	mov	r0, r5
 800894a:	47b0      	blx	r6
 800894c:	2800      	cmp	r0, #0
 800894e:	dc06      	bgt.n	800895e <__sflush_r+0xfe>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	e78e      	b.n	800887c <__sflush_r+0x1c>
 800895e:	4407      	add	r7, r0
 8008960:	eba8 0800 	sub.w	r8, r8, r0
 8008964:	e7e9      	b.n	800893a <__sflush_r+0xda>
 8008966:	bf00      	nop
 8008968:	20400001 	.word	0x20400001

0800896c <_fflush_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	690b      	ldr	r3, [r1, #16]
 8008970:	4605      	mov	r5, r0
 8008972:	460c      	mov	r4, r1
 8008974:	b913      	cbnz	r3, 800897c <_fflush_r+0x10>
 8008976:	2500      	movs	r5, #0
 8008978:	4628      	mov	r0, r5
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	b118      	cbz	r0, 8008986 <_fflush_r+0x1a>
 800897e:	6983      	ldr	r3, [r0, #24]
 8008980:	b90b      	cbnz	r3, 8008986 <_fflush_r+0x1a>
 8008982:	f000 f887 	bl	8008a94 <__sinit>
 8008986:	4b14      	ldr	r3, [pc, #80]	; (80089d8 <_fflush_r+0x6c>)
 8008988:	429c      	cmp	r4, r3
 800898a:	d11b      	bne.n	80089c4 <_fflush_r+0x58>
 800898c:	686c      	ldr	r4, [r5, #4]
 800898e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0ef      	beq.n	8008976 <_fflush_r+0xa>
 8008996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008998:	07d0      	lsls	r0, r2, #31
 800899a:	d404      	bmi.n	80089a6 <_fflush_r+0x3a>
 800899c:	0599      	lsls	r1, r3, #22
 800899e:	d402      	bmi.n	80089a6 <_fflush_r+0x3a>
 80089a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a2:	f000 f915 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 80089a6:	4628      	mov	r0, r5
 80089a8:	4621      	mov	r1, r4
 80089aa:	f7ff ff59 	bl	8008860 <__sflush_r>
 80089ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b0:	07da      	lsls	r2, r3, #31
 80089b2:	4605      	mov	r5, r0
 80089b4:	d4e0      	bmi.n	8008978 <_fflush_r+0xc>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	059b      	lsls	r3, r3, #22
 80089ba:	d4dd      	bmi.n	8008978 <_fflush_r+0xc>
 80089bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089be:	f000 f908 	bl	8008bd2 <__retarget_lock_release_recursive>
 80089c2:	e7d9      	b.n	8008978 <_fflush_r+0xc>
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <_fflush_r+0x70>)
 80089c6:	429c      	cmp	r4, r3
 80089c8:	d101      	bne.n	80089ce <_fflush_r+0x62>
 80089ca:	68ac      	ldr	r4, [r5, #8]
 80089cc:	e7df      	b.n	800898e <_fflush_r+0x22>
 80089ce:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <_fflush_r+0x74>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	bf08      	it	eq
 80089d4:	68ec      	ldreq	r4, [r5, #12]
 80089d6:	e7da      	b.n	800898e <_fflush_r+0x22>
 80089d8:	0800980c 	.word	0x0800980c
 80089dc:	0800982c 	.word	0x0800982c
 80089e0:	080097ec 	.word	0x080097ec

080089e4 <std>:
 80089e4:	2300      	movs	r3, #0
 80089e6:	b510      	push	{r4, lr}
 80089e8:	4604      	mov	r4, r0
 80089ea:	e9c0 3300 	strd	r3, r3, [r0]
 80089ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089f2:	6083      	str	r3, [r0, #8]
 80089f4:	8181      	strh	r1, [r0, #12]
 80089f6:	6643      	str	r3, [r0, #100]	; 0x64
 80089f8:	81c2      	strh	r2, [r0, #14]
 80089fa:	6183      	str	r3, [r0, #24]
 80089fc:	4619      	mov	r1, r3
 80089fe:	2208      	movs	r2, #8
 8008a00:	305c      	adds	r0, #92	; 0x5c
 8008a02:	f7ff fdcf 	bl	80085a4 <memset>
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <std+0x38>)
 8008a08:	6263      	str	r3, [r4, #36]	; 0x24
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <std+0x3c>)
 8008a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a0e:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <std+0x40>)
 8008a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <std+0x44>)
 8008a14:	6224      	str	r4, [r4, #32]
 8008a16:	6323      	str	r3, [r4, #48]	; 0x30
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08009461 	.word	0x08009461
 8008a20:	08009483 	.word	0x08009483
 8008a24:	080094bb 	.word	0x080094bb
 8008a28:	080094df 	.word	0x080094df

08008a2c <_cleanup_r>:
 8008a2c:	4901      	ldr	r1, [pc, #4]	; (8008a34 <_cleanup_r+0x8>)
 8008a2e:	f000 b8af 	b.w	8008b90 <_fwalk_reent>
 8008a32:	bf00      	nop
 8008a34:	0800896d 	.word	0x0800896d

08008a38 <__sfmoreglue>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	2268      	movs	r2, #104	; 0x68
 8008a3c:	1e4d      	subs	r5, r1, #1
 8008a3e:	4355      	muls	r5, r2
 8008a40:	460e      	mov	r6, r1
 8008a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a46:	f000 f997 	bl	8008d78 <_malloc_r>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	b140      	cbz	r0, 8008a60 <__sfmoreglue+0x28>
 8008a4e:	2100      	movs	r1, #0
 8008a50:	e9c0 1600 	strd	r1, r6, [r0]
 8008a54:	300c      	adds	r0, #12
 8008a56:	60a0      	str	r0, [r4, #8]
 8008a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a5c:	f7ff fda2 	bl	80085a4 <memset>
 8008a60:	4620      	mov	r0, r4
 8008a62:	bd70      	pop	{r4, r5, r6, pc}

08008a64 <__sfp_lock_acquire>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__sfp_lock_acquire+0x8>)
 8008a66:	f000 b8b3 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20000b51 	.word	0x20000b51

08008a70 <__sfp_lock_release>:
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <__sfp_lock_release+0x8>)
 8008a72:	f000 b8ae 	b.w	8008bd2 <__retarget_lock_release_recursive>
 8008a76:	bf00      	nop
 8008a78:	20000b51 	.word	0x20000b51

08008a7c <__sinit_lock_acquire>:
 8008a7c:	4801      	ldr	r0, [pc, #4]	; (8008a84 <__sinit_lock_acquire+0x8>)
 8008a7e:	f000 b8a7 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 8008a82:	bf00      	nop
 8008a84:	20000b52 	.word	0x20000b52

08008a88 <__sinit_lock_release>:
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <__sinit_lock_release+0x8>)
 8008a8a:	f000 b8a2 	b.w	8008bd2 <__retarget_lock_release_recursive>
 8008a8e:	bf00      	nop
 8008a90:	20000b52 	.word	0x20000b52

08008a94 <__sinit>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	4604      	mov	r4, r0
 8008a98:	f7ff fff0 	bl	8008a7c <__sinit_lock_acquire>
 8008a9c:	69a3      	ldr	r3, [r4, #24]
 8008a9e:	b11b      	cbz	r3, 8008aa8 <__sinit+0x14>
 8008aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa4:	f7ff bff0 	b.w	8008a88 <__sinit_lock_release>
 8008aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008aac:	6523      	str	r3, [r4, #80]	; 0x50
 8008aae:	4b13      	ldr	r3, [pc, #76]	; (8008afc <__sinit+0x68>)
 8008ab0:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <__sinit+0x6c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ab6:	42a3      	cmp	r3, r4
 8008ab8:	bf04      	itt	eq
 8008aba:	2301      	moveq	r3, #1
 8008abc:	61a3      	streq	r3, [r4, #24]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f820 	bl	8008b04 <__sfp>
 8008ac4:	6060      	str	r0, [r4, #4]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f81c 	bl	8008b04 <__sfp>
 8008acc:	60a0      	str	r0, [r4, #8]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 f818 	bl	8008b04 <__sfp>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	60e0      	str	r0, [r4, #12]
 8008ad8:	2104      	movs	r1, #4
 8008ada:	6860      	ldr	r0, [r4, #4]
 8008adc:	f7ff ff82 	bl	80089e4 <std>
 8008ae0:	68a0      	ldr	r0, [r4, #8]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	2109      	movs	r1, #9
 8008ae6:	f7ff ff7d 	bl	80089e4 <std>
 8008aea:	68e0      	ldr	r0, [r4, #12]
 8008aec:	2202      	movs	r2, #2
 8008aee:	2112      	movs	r1, #18
 8008af0:	f7ff ff78 	bl	80089e4 <std>
 8008af4:	2301      	movs	r3, #1
 8008af6:	61a3      	str	r3, [r4, #24]
 8008af8:	e7d2      	b.n	8008aa0 <__sinit+0xc>
 8008afa:	bf00      	nop
 8008afc:	080097e8 	.word	0x080097e8
 8008b00:	08008a2d 	.word	0x08008a2d

08008b04 <__sfp>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	4607      	mov	r7, r0
 8008b08:	f7ff ffac 	bl	8008a64 <__sfp_lock_acquire>
 8008b0c:	4b1e      	ldr	r3, [pc, #120]	; (8008b88 <__sfp+0x84>)
 8008b0e:	681e      	ldr	r6, [r3, #0]
 8008b10:	69b3      	ldr	r3, [r6, #24]
 8008b12:	b913      	cbnz	r3, 8008b1a <__sfp+0x16>
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff ffbd 	bl	8008a94 <__sinit>
 8008b1a:	3648      	adds	r6, #72	; 0x48
 8008b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	d503      	bpl.n	8008b2c <__sfp+0x28>
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	b30b      	cbz	r3, 8008b6c <__sfp+0x68>
 8008b28:	6836      	ldr	r6, [r6, #0]
 8008b2a:	e7f7      	b.n	8008b1c <__sfp+0x18>
 8008b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b30:	b9d5      	cbnz	r5, 8008b68 <__sfp+0x64>
 8008b32:	4b16      	ldr	r3, [pc, #88]	; (8008b8c <__sfp+0x88>)
 8008b34:	60e3      	str	r3, [r4, #12]
 8008b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b3c:	f000 f847 	bl	8008bce <__retarget_lock_init_recursive>
 8008b40:	f7ff ff96 	bl	8008a70 <__sfp_lock_release>
 8008b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b4c:	6025      	str	r5, [r4, #0]
 8008b4e:	61a5      	str	r5, [r4, #24]
 8008b50:	2208      	movs	r2, #8
 8008b52:	4629      	mov	r1, r5
 8008b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b58:	f7ff fd24 	bl	80085a4 <memset>
 8008b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b64:	4620      	mov	r0, r4
 8008b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b68:	3468      	adds	r4, #104	; 0x68
 8008b6a:	e7d9      	b.n	8008b20 <__sfp+0x1c>
 8008b6c:	2104      	movs	r1, #4
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f7ff ff62 	bl	8008a38 <__sfmoreglue>
 8008b74:	4604      	mov	r4, r0
 8008b76:	6030      	str	r0, [r6, #0]
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d1d5      	bne.n	8008b28 <__sfp+0x24>
 8008b7c:	f7ff ff78 	bl	8008a70 <__sfp_lock_release>
 8008b80:	230c      	movs	r3, #12
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	e7ee      	b.n	8008b64 <__sfp+0x60>
 8008b86:	bf00      	nop
 8008b88:	080097e8 	.word	0x080097e8
 8008b8c:	ffff0001 	.word	0xffff0001

08008b90 <_fwalk_reent>:
 8008b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	4606      	mov	r6, r0
 8008b96:	4688      	mov	r8, r1
 8008b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b9c:	2700      	movs	r7, #0
 8008b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ba6:	d505      	bpl.n	8008bb4 <_fwalk_reent+0x24>
 8008ba8:	6824      	ldr	r4, [r4, #0]
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	d1f7      	bne.n	8008b9e <_fwalk_reent+0xe>
 8008bae:	4638      	mov	r0, r7
 8008bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb4:	89ab      	ldrh	r3, [r5, #12]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d907      	bls.n	8008bca <_fwalk_reent+0x3a>
 8008bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	d003      	beq.n	8008bca <_fwalk_reent+0x3a>
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	47c0      	blx	r8
 8008bc8:	4307      	orrs	r7, r0
 8008bca:	3568      	adds	r5, #104	; 0x68
 8008bcc:	e7e9      	b.n	8008ba2 <_fwalk_reent+0x12>

08008bce <__retarget_lock_init_recursive>:
 8008bce:	4770      	bx	lr

08008bd0 <__retarget_lock_acquire_recursive>:
 8008bd0:	4770      	bx	lr

08008bd2 <__retarget_lock_release_recursive>:
 8008bd2:	4770      	bx	lr

08008bd4 <__swhatbuf_r>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	460e      	mov	r6, r1
 8008bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	b096      	sub	sp, #88	; 0x58
 8008be0:	4614      	mov	r4, r2
 8008be2:	461d      	mov	r5, r3
 8008be4:	da08      	bge.n	8008bf8 <__swhatbuf_r+0x24>
 8008be6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	061a      	lsls	r2, r3, #24
 8008bf0:	d410      	bmi.n	8008c14 <__swhatbuf_r+0x40>
 8008bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf6:	e00e      	b.n	8008c16 <__swhatbuf_r+0x42>
 8008bf8:	466a      	mov	r2, sp
 8008bfa:	f000 fc97 	bl	800952c <_fstat_r>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	dbf1      	blt.n	8008be6 <__swhatbuf_r+0x12>
 8008c02:	9a01      	ldr	r2, [sp, #4]
 8008c04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c0c:	425a      	negs	r2, r3
 8008c0e:	415a      	adcs	r2, r3
 8008c10:	602a      	str	r2, [r5, #0]
 8008c12:	e7ee      	b.n	8008bf2 <__swhatbuf_r+0x1e>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	2000      	movs	r0, #0
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	b016      	add	sp, #88	; 0x58
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c20 <__smakebuf_r>:
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c24:	079d      	lsls	r5, r3, #30
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d507      	bpl.n	8008c3c <__smakebuf_r+0x1c>
 8008c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	2301      	movs	r3, #1
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	b002      	add	sp, #8
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	ab01      	add	r3, sp, #4
 8008c3e:	466a      	mov	r2, sp
 8008c40:	f7ff ffc8 	bl	8008bd4 <__swhatbuf_r>
 8008c44:	9900      	ldr	r1, [sp, #0]
 8008c46:	4605      	mov	r5, r0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f000 f895 	bl	8008d78 <_malloc_r>
 8008c4e:	b948      	cbnz	r0, 8008c64 <__smakebuf_r+0x44>
 8008c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d4ef      	bmi.n	8008c38 <__smakebuf_r+0x18>
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	f043 0302 	orr.w	r3, r3, #2
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	e7e3      	b.n	8008c2c <__smakebuf_r+0xc>
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <__smakebuf_r+0x7c>)
 8008c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	6020      	str	r0, [r4, #0]
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	81a3      	strh	r3, [r4, #12]
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	6163      	str	r3, [r4, #20]
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	6120      	str	r0, [r4, #16]
 8008c7a:	b15b      	cbz	r3, 8008c94 <__smakebuf_r+0x74>
 8008c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 fc65 	bl	8009550 <_isatty_r>
 8008c86:	b128      	cbz	r0, 8008c94 <__smakebuf_r+0x74>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	89a0      	ldrh	r0, [r4, #12]
 8008c96:	4305      	orrs	r5, r0
 8008c98:	81a5      	strh	r5, [r4, #12]
 8008c9a:	e7cd      	b.n	8008c38 <__smakebuf_r+0x18>
 8008c9c:	08008a2d 	.word	0x08008a2d

08008ca0 <_free_r>:
 8008ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	d044      	beq.n	8008d30 <_free_r+0x90>
 8008ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008caa:	9001      	str	r0, [sp, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f1a1 0404 	sub.w	r4, r1, #4
 8008cb2:	bfb8      	it	lt
 8008cb4:	18e4      	addlt	r4, r4, r3
 8008cb6:	f000 fc95 	bl	80095e4 <__malloc_lock>
 8008cba:	4a1e      	ldr	r2, [pc, #120]	; (8008d34 <_free_r+0x94>)
 8008cbc:	9801      	ldr	r0, [sp, #4]
 8008cbe:	6813      	ldr	r3, [r2, #0]
 8008cc0:	b933      	cbnz	r3, 8008cd0 <_free_r+0x30>
 8008cc2:	6063      	str	r3, [r4, #4]
 8008cc4:	6014      	str	r4, [r2, #0]
 8008cc6:	b003      	add	sp, #12
 8008cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ccc:	f000 bc90 	b.w	80095f0 <__malloc_unlock>
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d908      	bls.n	8008ce6 <_free_r+0x46>
 8008cd4:	6825      	ldr	r5, [r4, #0]
 8008cd6:	1961      	adds	r1, r4, r5
 8008cd8:	428b      	cmp	r3, r1
 8008cda:	bf01      	itttt	eq
 8008cdc:	6819      	ldreq	r1, [r3, #0]
 8008cde:	685b      	ldreq	r3, [r3, #4]
 8008ce0:	1949      	addeq	r1, r1, r5
 8008ce2:	6021      	streq	r1, [r4, #0]
 8008ce4:	e7ed      	b.n	8008cc2 <_free_r+0x22>
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	b10b      	cbz	r3, 8008cf0 <_free_r+0x50>
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d9fa      	bls.n	8008ce6 <_free_r+0x46>
 8008cf0:	6811      	ldr	r1, [r2, #0]
 8008cf2:	1855      	adds	r5, r2, r1
 8008cf4:	42a5      	cmp	r5, r4
 8008cf6:	d10b      	bne.n	8008d10 <_free_r+0x70>
 8008cf8:	6824      	ldr	r4, [r4, #0]
 8008cfa:	4421      	add	r1, r4
 8008cfc:	1854      	adds	r4, r2, r1
 8008cfe:	42a3      	cmp	r3, r4
 8008d00:	6011      	str	r1, [r2, #0]
 8008d02:	d1e0      	bne.n	8008cc6 <_free_r+0x26>
 8008d04:	681c      	ldr	r4, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	6053      	str	r3, [r2, #4]
 8008d0a:	4421      	add	r1, r4
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	e7da      	b.n	8008cc6 <_free_r+0x26>
 8008d10:	d902      	bls.n	8008d18 <_free_r+0x78>
 8008d12:	230c      	movs	r3, #12
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	e7d6      	b.n	8008cc6 <_free_r+0x26>
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	1961      	adds	r1, r4, r5
 8008d1c:	428b      	cmp	r3, r1
 8008d1e:	bf04      	itt	eq
 8008d20:	6819      	ldreq	r1, [r3, #0]
 8008d22:	685b      	ldreq	r3, [r3, #4]
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	bf04      	itt	eq
 8008d28:	1949      	addeq	r1, r1, r5
 8008d2a:	6021      	streq	r1, [r4, #0]
 8008d2c:	6054      	str	r4, [r2, #4]
 8008d2e:	e7ca      	b.n	8008cc6 <_free_r+0x26>
 8008d30:	b003      	add	sp, #12
 8008d32:	bd30      	pop	{r4, r5, pc}
 8008d34:	20000b54 	.word	0x20000b54

08008d38 <sbrk_aligned>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	4e0e      	ldr	r6, [pc, #56]	; (8008d74 <sbrk_aligned+0x3c>)
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	6831      	ldr	r1, [r6, #0]
 8008d40:	4605      	mov	r5, r0
 8008d42:	b911      	cbnz	r1, 8008d4a <sbrk_aligned+0x12>
 8008d44:	f000 fb7c 	bl	8009440 <_sbrk_r>
 8008d48:	6030      	str	r0, [r6, #0]
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 fb77 	bl	8009440 <_sbrk_r>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	d00a      	beq.n	8008d6c <sbrk_aligned+0x34>
 8008d56:	1cc4      	adds	r4, r0, #3
 8008d58:	f024 0403 	bic.w	r4, r4, #3
 8008d5c:	42a0      	cmp	r0, r4
 8008d5e:	d007      	beq.n	8008d70 <sbrk_aligned+0x38>
 8008d60:	1a21      	subs	r1, r4, r0
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 fb6c 	bl	8009440 <_sbrk_r>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d101      	bne.n	8008d70 <sbrk_aligned+0x38>
 8008d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d70:	4620      	mov	r0, r4
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	20000b58 	.word	0x20000b58

08008d78 <_malloc_r>:
 8008d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7c:	1ccd      	adds	r5, r1, #3
 8008d7e:	f025 0503 	bic.w	r5, r5, #3
 8008d82:	3508      	adds	r5, #8
 8008d84:	2d0c      	cmp	r5, #12
 8008d86:	bf38      	it	cc
 8008d88:	250c      	movcc	r5, #12
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	db01      	blt.n	8008d94 <_malloc_r+0x1c>
 8008d90:	42a9      	cmp	r1, r5
 8008d92:	d905      	bls.n	8008da0 <_malloc_r+0x28>
 8008d94:	230c      	movs	r3, #12
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	2600      	movs	r6, #0
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	4e2e      	ldr	r6, [pc, #184]	; (8008e5c <_malloc_r+0xe4>)
 8008da2:	f000 fc1f 	bl	80095e4 <__malloc_lock>
 8008da6:	6833      	ldr	r3, [r6, #0]
 8008da8:	461c      	mov	r4, r3
 8008daa:	bb34      	cbnz	r4, 8008dfa <_malloc_r+0x82>
 8008dac:	4629      	mov	r1, r5
 8008dae:	4638      	mov	r0, r7
 8008db0:	f7ff ffc2 	bl	8008d38 <sbrk_aligned>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	4604      	mov	r4, r0
 8008db8:	d14d      	bne.n	8008e56 <_malloc_r+0xde>
 8008dba:	6834      	ldr	r4, [r6, #0]
 8008dbc:	4626      	mov	r6, r4
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	d140      	bne.n	8008e44 <_malloc_r+0xcc>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	eb04 0803 	add.w	r8, r4, r3
 8008dcc:	f000 fb38 	bl	8009440 <_sbrk_r>
 8008dd0:	4580      	cmp	r8, r0
 8008dd2:	d13a      	bne.n	8008e4a <_malloc_r+0xd2>
 8008dd4:	6821      	ldr	r1, [r4, #0]
 8008dd6:	3503      	adds	r5, #3
 8008dd8:	1a6d      	subs	r5, r5, r1
 8008dda:	f025 0503 	bic.w	r5, r5, #3
 8008dde:	3508      	adds	r5, #8
 8008de0:	2d0c      	cmp	r5, #12
 8008de2:	bf38      	it	cc
 8008de4:	250c      	movcc	r5, #12
 8008de6:	4629      	mov	r1, r5
 8008de8:	4638      	mov	r0, r7
 8008dea:	f7ff ffa5 	bl	8008d38 <sbrk_aligned>
 8008dee:	3001      	adds	r0, #1
 8008df0:	d02b      	beq.n	8008e4a <_malloc_r+0xd2>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	442b      	add	r3, r5
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	e00e      	b.n	8008e18 <_malloc_r+0xa0>
 8008dfa:	6822      	ldr	r2, [r4, #0]
 8008dfc:	1b52      	subs	r2, r2, r5
 8008dfe:	d41e      	bmi.n	8008e3e <_malloc_r+0xc6>
 8008e00:	2a0b      	cmp	r2, #11
 8008e02:	d916      	bls.n	8008e32 <_malloc_r+0xba>
 8008e04:	1961      	adds	r1, r4, r5
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	6025      	str	r5, [r4, #0]
 8008e0a:	bf18      	it	ne
 8008e0c:	6059      	strne	r1, [r3, #4]
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	bf08      	it	eq
 8008e12:	6031      	streq	r1, [r6, #0]
 8008e14:	5162      	str	r2, [r4, r5]
 8008e16:	604b      	str	r3, [r1, #4]
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f104 060b 	add.w	r6, r4, #11
 8008e1e:	f000 fbe7 	bl	80095f0 <__malloc_unlock>
 8008e22:	f026 0607 	bic.w	r6, r6, #7
 8008e26:	1d23      	adds	r3, r4, #4
 8008e28:	1af2      	subs	r2, r6, r3
 8008e2a:	d0b6      	beq.n	8008d9a <_malloc_r+0x22>
 8008e2c:	1b9b      	subs	r3, r3, r6
 8008e2e:	50a3      	str	r3, [r4, r2]
 8008e30:	e7b3      	b.n	8008d9a <_malloc_r+0x22>
 8008e32:	6862      	ldr	r2, [r4, #4]
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	bf0c      	ite	eq
 8008e38:	6032      	streq	r2, [r6, #0]
 8008e3a:	605a      	strne	r2, [r3, #4]
 8008e3c:	e7ec      	b.n	8008e18 <_malloc_r+0xa0>
 8008e3e:	4623      	mov	r3, r4
 8008e40:	6864      	ldr	r4, [r4, #4]
 8008e42:	e7b2      	b.n	8008daa <_malloc_r+0x32>
 8008e44:	4634      	mov	r4, r6
 8008e46:	6876      	ldr	r6, [r6, #4]
 8008e48:	e7b9      	b.n	8008dbe <_malloc_r+0x46>
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	603b      	str	r3, [r7, #0]
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f000 fbce 	bl	80095f0 <__malloc_unlock>
 8008e54:	e7a1      	b.n	8008d9a <_malloc_r+0x22>
 8008e56:	6025      	str	r5, [r4, #0]
 8008e58:	e7de      	b.n	8008e18 <_malloc_r+0xa0>
 8008e5a:	bf00      	nop
 8008e5c:	20000b54 	.word	0x20000b54

08008e60 <__ssputs_r>:
 8008e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e64:	688e      	ldr	r6, [r1, #8]
 8008e66:	429e      	cmp	r6, r3
 8008e68:	4682      	mov	sl, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4690      	mov	r8, r2
 8008e6e:	461f      	mov	r7, r3
 8008e70:	d838      	bhi.n	8008ee4 <__ssputs_r+0x84>
 8008e72:	898a      	ldrh	r2, [r1, #12]
 8008e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e78:	d032      	beq.n	8008ee0 <__ssputs_r+0x80>
 8008e7a:	6825      	ldr	r5, [r4, #0]
 8008e7c:	6909      	ldr	r1, [r1, #16]
 8008e7e:	eba5 0901 	sub.w	r9, r5, r1
 8008e82:	6965      	ldr	r5, [r4, #20]
 8008e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	444b      	add	r3, r9
 8008e90:	106d      	asrs	r5, r5, #1
 8008e92:	429d      	cmp	r5, r3
 8008e94:	bf38      	it	cc
 8008e96:	461d      	movcc	r5, r3
 8008e98:	0553      	lsls	r3, r2, #21
 8008e9a:	d531      	bpl.n	8008f00 <__ssputs_r+0xa0>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	f7ff ff6b 	bl	8008d78 <_malloc_r>
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	b950      	cbnz	r0, 8008ebc <__ssputs_r+0x5c>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	f8ca 3000 	str.w	r3, [sl]
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebc:	6921      	ldr	r1, [r4, #16]
 8008ebe:	464a      	mov	r2, r9
 8008ec0:	f000 fb68 	bl	8009594 <memcpy>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	6126      	str	r6, [r4, #16]
 8008ed2:	6165      	str	r5, [r4, #20]
 8008ed4:	444e      	add	r6, r9
 8008ed6:	eba5 0509 	sub.w	r5, r5, r9
 8008eda:	6026      	str	r6, [r4, #0]
 8008edc:	60a5      	str	r5, [r4, #8]
 8008ede:	463e      	mov	r6, r7
 8008ee0:	42be      	cmp	r6, r7
 8008ee2:	d900      	bls.n	8008ee6 <__ssputs_r+0x86>
 8008ee4:	463e      	mov	r6, r7
 8008ee6:	6820      	ldr	r0, [r4, #0]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4641      	mov	r1, r8
 8008eec:	f000 fb60 	bl	80095b0 <memmove>
 8008ef0:	68a3      	ldr	r3, [r4, #8]
 8008ef2:	1b9b      	subs	r3, r3, r6
 8008ef4:	60a3      	str	r3, [r4, #8]
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	4433      	add	r3, r6
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	2000      	movs	r0, #0
 8008efe:	e7db      	b.n	8008eb8 <__ssputs_r+0x58>
 8008f00:	462a      	mov	r2, r5
 8008f02:	f000 fb7b 	bl	80095fc <_realloc_r>
 8008f06:	4606      	mov	r6, r0
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1e1      	bne.n	8008ed0 <__ssputs_r+0x70>
 8008f0c:	6921      	ldr	r1, [r4, #16]
 8008f0e:	4650      	mov	r0, sl
 8008f10:	f7ff fec6 	bl	8008ca0 <_free_r>
 8008f14:	e7c7      	b.n	8008ea6 <__ssputs_r+0x46>
	...

08008f18 <_svfiprintf_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	4698      	mov	r8, r3
 8008f1e:	898b      	ldrh	r3, [r1, #12]
 8008f20:	061b      	lsls	r3, r3, #24
 8008f22:	b09d      	sub	sp, #116	; 0x74
 8008f24:	4607      	mov	r7, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	4614      	mov	r4, r2
 8008f2a:	d50e      	bpl.n	8008f4a <_svfiprintf_r+0x32>
 8008f2c:	690b      	ldr	r3, [r1, #16]
 8008f2e:	b963      	cbnz	r3, 8008f4a <_svfiprintf_r+0x32>
 8008f30:	2140      	movs	r1, #64	; 0x40
 8008f32:	f7ff ff21 	bl	8008d78 <_malloc_r>
 8008f36:	6028      	str	r0, [r5, #0]
 8008f38:	6128      	str	r0, [r5, #16]
 8008f3a:	b920      	cbnz	r0, 8008f46 <_svfiprintf_r+0x2e>
 8008f3c:	230c      	movs	r3, #12
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	e0d1      	b.n	80090ea <_svfiprintf_r+0x1d2>
 8008f46:	2340      	movs	r3, #64	; 0x40
 8008f48:	616b      	str	r3, [r5, #20]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f4e:	2320      	movs	r3, #32
 8008f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f58:	2330      	movs	r3, #48	; 0x30
 8008f5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009104 <_svfiprintf_r+0x1ec>
 8008f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f62:	f04f 0901 	mov.w	r9, #1
 8008f66:	4623      	mov	r3, r4
 8008f68:	469a      	mov	sl, r3
 8008f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f6e:	b10a      	cbz	r2, 8008f74 <_svfiprintf_r+0x5c>
 8008f70:	2a25      	cmp	r2, #37	; 0x25
 8008f72:	d1f9      	bne.n	8008f68 <_svfiprintf_r+0x50>
 8008f74:	ebba 0b04 	subs.w	fp, sl, r4
 8008f78:	d00b      	beq.n	8008f92 <_svfiprintf_r+0x7a>
 8008f7a:	465b      	mov	r3, fp
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4638      	mov	r0, r7
 8008f82:	f7ff ff6d 	bl	8008e60 <__ssputs_r>
 8008f86:	3001      	adds	r0, #1
 8008f88:	f000 80aa 	beq.w	80090e0 <_svfiprintf_r+0x1c8>
 8008f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f8e:	445a      	add	r2, fp
 8008f90:	9209      	str	r2, [sp, #36]	; 0x24
 8008f92:	f89a 3000 	ldrb.w	r3, [sl]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80a2 	beq.w	80090e0 <_svfiprintf_r+0x1c8>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa6:	f10a 0a01 	add.w	sl, sl, #1
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	9307      	str	r3, [sp, #28]
 8008fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb4:	4654      	mov	r4, sl
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbc:	4851      	ldr	r0, [pc, #324]	; (8009104 <_svfiprintf_r+0x1ec>)
 8008fbe:	f7f7 f917 	bl	80001f0 <memchr>
 8008fc2:	9a04      	ldr	r2, [sp, #16]
 8008fc4:	b9d8      	cbnz	r0, 8008ffe <_svfiprintf_r+0xe6>
 8008fc6:	06d0      	lsls	r0, r2, #27
 8008fc8:	bf44      	itt	mi
 8008fca:	2320      	movmi	r3, #32
 8008fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd0:	0711      	lsls	r1, r2, #28
 8008fd2:	bf44      	itt	mi
 8008fd4:	232b      	movmi	r3, #43	; 0x2b
 8008fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fda:	f89a 3000 	ldrb.w	r3, [sl]
 8008fde:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe0:	d015      	beq.n	800900e <_svfiprintf_r+0xf6>
 8008fe2:	9a07      	ldr	r2, [sp, #28]
 8008fe4:	4654      	mov	r4, sl
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f04f 0c0a 	mov.w	ip, #10
 8008fec:	4621      	mov	r1, r4
 8008fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff2:	3b30      	subs	r3, #48	; 0x30
 8008ff4:	2b09      	cmp	r3, #9
 8008ff6:	d94e      	bls.n	8009096 <_svfiprintf_r+0x17e>
 8008ff8:	b1b0      	cbz	r0, 8009028 <_svfiprintf_r+0x110>
 8008ffa:	9207      	str	r2, [sp, #28]
 8008ffc:	e014      	b.n	8009028 <_svfiprintf_r+0x110>
 8008ffe:	eba0 0308 	sub.w	r3, r0, r8
 8009002:	fa09 f303 	lsl.w	r3, r9, r3
 8009006:	4313      	orrs	r3, r2
 8009008:	9304      	str	r3, [sp, #16]
 800900a:	46a2      	mov	sl, r4
 800900c:	e7d2      	b.n	8008fb4 <_svfiprintf_r+0x9c>
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	1d19      	adds	r1, r3, #4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	9103      	str	r1, [sp, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	bfbb      	ittet	lt
 800901a:	425b      	neglt	r3, r3
 800901c:	f042 0202 	orrlt.w	r2, r2, #2
 8009020:	9307      	strge	r3, [sp, #28]
 8009022:	9307      	strlt	r3, [sp, #28]
 8009024:	bfb8      	it	lt
 8009026:	9204      	strlt	r2, [sp, #16]
 8009028:	7823      	ldrb	r3, [r4, #0]
 800902a:	2b2e      	cmp	r3, #46	; 0x2e
 800902c:	d10c      	bne.n	8009048 <_svfiprintf_r+0x130>
 800902e:	7863      	ldrb	r3, [r4, #1]
 8009030:	2b2a      	cmp	r3, #42	; 0x2a
 8009032:	d135      	bne.n	80090a0 <_svfiprintf_r+0x188>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	1d1a      	adds	r2, r3, #4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfb8      	it	lt
 8009040:	f04f 33ff 	movlt.w	r3, #4294967295
 8009044:	3402      	adds	r4, #2
 8009046:	9305      	str	r3, [sp, #20]
 8009048:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009114 <_svfiprintf_r+0x1fc>
 800904c:	7821      	ldrb	r1, [r4, #0]
 800904e:	2203      	movs	r2, #3
 8009050:	4650      	mov	r0, sl
 8009052:	f7f7 f8cd 	bl	80001f0 <memchr>
 8009056:	b140      	cbz	r0, 800906a <_svfiprintf_r+0x152>
 8009058:	2340      	movs	r3, #64	; 0x40
 800905a:	eba0 000a 	sub.w	r0, r0, sl
 800905e:	fa03 f000 	lsl.w	r0, r3, r0
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	4303      	orrs	r3, r0
 8009066:	3401      	adds	r4, #1
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	4826      	ldr	r0, [pc, #152]	; (8009108 <_svfiprintf_r+0x1f0>)
 8009070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009074:	2206      	movs	r2, #6
 8009076:	f7f7 f8bb 	bl	80001f0 <memchr>
 800907a:	2800      	cmp	r0, #0
 800907c:	d038      	beq.n	80090f0 <_svfiprintf_r+0x1d8>
 800907e:	4b23      	ldr	r3, [pc, #140]	; (800910c <_svfiprintf_r+0x1f4>)
 8009080:	bb1b      	cbnz	r3, 80090ca <_svfiprintf_r+0x1b2>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	3307      	adds	r3, #7
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	3308      	adds	r3, #8
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009090:	4433      	add	r3, r6
 8009092:	9309      	str	r3, [sp, #36]	; 0x24
 8009094:	e767      	b.n	8008f66 <_svfiprintf_r+0x4e>
 8009096:	fb0c 3202 	mla	r2, ip, r2, r3
 800909a:	460c      	mov	r4, r1
 800909c:	2001      	movs	r0, #1
 800909e:	e7a5      	b.n	8008fec <_svfiprintf_r+0xd4>
 80090a0:	2300      	movs	r3, #0
 80090a2:	3401      	adds	r4, #1
 80090a4:	9305      	str	r3, [sp, #20]
 80090a6:	4619      	mov	r1, r3
 80090a8:	f04f 0c0a 	mov.w	ip, #10
 80090ac:	4620      	mov	r0, r4
 80090ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b2:	3a30      	subs	r2, #48	; 0x30
 80090b4:	2a09      	cmp	r2, #9
 80090b6:	d903      	bls.n	80090c0 <_svfiprintf_r+0x1a8>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0c5      	beq.n	8009048 <_svfiprintf_r+0x130>
 80090bc:	9105      	str	r1, [sp, #20]
 80090be:	e7c3      	b.n	8009048 <_svfiprintf_r+0x130>
 80090c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c4:	4604      	mov	r4, r0
 80090c6:	2301      	movs	r3, #1
 80090c8:	e7f0      	b.n	80090ac <_svfiprintf_r+0x194>
 80090ca:	ab03      	add	r3, sp, #12
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	462a      	mov	r2, r5
 80090d0:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <_svfiprintf_r+0x1f8>)
 80090d2:	a904      	add	r1, sp, #16
 80090d4:	4638      	mov	r0, r7
 80090d6:	f3af 8000 	nop.w
 80090da:	1c42      	adds	r2, r0, #1
 80090dc:	4606      	mov	r6, r0
 80090de:	d1d6      	bne.n	800908e <_svfiprintf_r+0x176>
 80090e0:	89ab      	ldrh	r3, [r5, #12]
 80090e2:	065b      	lsls	r3, r3, #25
 80090e4:	f53f af2c 	bmi.w	8008f40 <_svfiprintf_r+0x28>
 80090e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ea:	b01d      	add	sp, #116	; 0x74
 80090ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f0:	ab03      	add	r3, sp, #12
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	462a      	mov	r2, r5
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <_svfiprintf_r+0x1f8>)
 80090f8:	a904      	add	r1, sp, #16
 80090fa:	4638      	mov	r0, r7
 80090fc:	f000 f87a 	bl	80091f4 <_printf_i>
 8009100:	e7eb      	b.n	80090da <_svfiprintf_r+0x1c2>
 8009102:	bf00      	nop
 8009104:	0800984c 	.word	0x0800984c
 8009108:	08009856 	.word	0x08009856
 800910c:	00000000 	.word	0x00000000
 8009110:	08008e61 	.word	0x08008e61
 8009114:	08009852 	.word	0x08009852

08009118 <_printf_common>:
 8009118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	4616      	mov	r6, r2
 800911e:	4699      	mov	r9, r3
 8009120:	688a      	ldr	r2, [r1, #8]
 8009122:	690b      	ldr	r3, [r1, #16]
 8009124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009128:	4293      	cmp	r3, r2
 800912a:	bfb8      	it	lt
 800912c:	4613      	movlt	r3, r2
 800912e:	6033      	str	r3, [r6, #0]
 8009130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009134:	4607      	mov	r7, r0
 8009136:	460c      	mov	r4, r1
 8009138:	b10a      	cbz	r2, 800913e <_printf_common+0x26>
 800913a:	3301      	adds	r3, #1
 800913c:	6033      	str	r3, [r6, #0]
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	0699      	lsls	r1, r3, #26
 8009142:	bf42      	ittt	mi
 8009144:	6833      	ldrmi	r3, [r6, #0]
 8009146:	3302      	addmi	r3, #2
 8009148:	6033      	strmi	r3, [r6, #0]
 800914a:	6825      	ldr	r5, [r4, #0]
 800914c:	f015 0506 	ands.w	r5, r5, #6
 8009150:	d106      	bne.n	8009160 <_printf_common+0x48>
 8009152:	f104 0a19 	add.w	sl, r4, #25
 8009156:	68e3      	ldr	r3, [r4, #12]
 8009158:	6832      	ldr	r2, [r6, #0]
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	42ab      	cmp	r3, r5
 800915e:	dc26      	bgt.n	80091ae <_printf_common+0x96>
 8009160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009164:	1e13      	subs	r3, r2, #0
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	bf18      	it	ne
 800916a:	2301      	movne	r3, #1
 800916c:	0692      	lsls	r2, r2, #26
 800916e:	d42b      	bmi.n	80091c8 <_printf_common+0xb0>
 8009170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009174:	4649      	mov	r1, r9
 8009176:	4638      	mov	r0, r7
 8009178:	47c0      	blx	r8
 800917a:	3001      	adds	r0, #1
 800917c:	d01e      	beq.n	80091bc <_printf_common+0xa4>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	68e5      	ldr	r5, [r4, #12]
 8009182:	6832      	ldr	r2, [r6, #0]
 8009184:	f003 0306 	and.w	r3, r3, #6
 8009188:	2b04      	cmp	r3, #4
 800918a:	bf08      	it	eq
 800918c:	1aad      	subeq	r5, r5, r2
 800918e:	68a3      	ldr	r3, [r4, #8]
 8009190:	6922      	ldr	r2, [r4, #16]
 8009192:	bf0c      	ite	eq
 8009194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009198:	2500      	movne	r5, #0
 800919a:	4293      	cmp	r3, r2
 800919c:	bfc4      	itt	gt
 800919e:	1a9b      	subgt	r3, r3, r2
 80091a0:	18ed      	addgt	r5, r5, r3
 80091a2:	2600      	movs	r6, #0
 80091a4:	341a      	adds	r4, #26
 80091a6:	42b5      	cmp	r5, r6
 80091a8:	d11a      	bne.n	80091e0 <_printf_common+0xc8>
 80091aa:	2000      	movs	r0, #0
 80091ac:	e008      	b.n	80091c0 <_printf_common+0xa8>
 80091ae:	2301      	movs	r3, #1
 80091b0:	4652      	mov	r2, sl
 80091b2:	4649      	mov	r1, r9
 80091b4:	4638      	mov	r0, r7
 80091b6:	47c0      	blx	r8
 80091b8:	3001      	adds	r0, #1
 80091ba:	d103      	bne.n	80091c4 <_printf_common+0xac>
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c4:	3501      	adds	r5, #1
 80091c6:	e7c6      	b.n	8009156 <_printf_common+0x3e>
 80091c8:	18e1      	adds	r1, r4, r3
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	2030      	movs	r0, #48	; 0x30
 80091ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091d2:	4422      	add	r2, r4
 80091d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091dc:	3302      	adds	r3, #2
 80091de:	e7c7      	b.n	8009170 <_printf_common+0x58>
 80091e0:	2301      	movs	r3, #1
 80091e2:	4622      	mov	r2, r4
 80091e4:	4649      	mov	r1, r9
 80091e6:	4638      	mov	r0, r7
 80091e8:	47c0      	blx	r8
 80091ea:	3001      	adds	r0, #1
 80091ec:	d0e6      	beq.n	80091bc <_printf_common+0xa4>
 80091ee:	3601      	adds	r6, #1
 80091f0:	e7d9      	b.n	80091a6 <_printf_common+0x8e>
	...

080091f4 <_printf_i>:
 80091f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	7e0f      	ldrb	r7, [r1, #24]
 80091fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091fc:	2f78      	cmp	r7, #120	; 0x78
 80091fe:	4691      	mov	r9, r2
 8009200:	4680      	mov	r8, r0
 8009202:	460c      	mov	r4, r1
 8009204:	469a      	mov	sl, r3
 8009206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800920a:	d807      	bhi.n	800921c <_printf_i+0x28>
 800920c:	2f62      	cmp	r7, #98	; 0x62
 800920e:	d80a      	bhi.n	8009226 <_printf_i+0x32>
 8009210:	2f00      	cmp	r7, #0
 8009212:	f000 80d8 	beq.w	80093c6 <_printf_i+0x1d2>
 8009216:	2f58      	cmp	r7, #88	; 0x58
 8009218:	f000 80a3 	beq.w	8009362 <_printf_i+0x16e>
 800921c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009224:	e03a      	b.n	800929c <_printf_i+0xa8>
 8009226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800922a:	2b15      	cmp	r3, #21
 800922c:	d8f6      	bhi.n	800921c <_printf_i+0x28>
 800922e:	a101      	add	r1, pc, #4	; (adr r1, 8009234 <_printf_i+0x40>)
 8009230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009234:	0800928d 	.word	0x0800928d
 8009238:	080092a1 	.word	0x080092a1
 800923c:	0800921d 	.word	0x0800921d
 8009240:	0800921d 	.word	0x0800921d
 8009244:	0800921d 	.word	0x0800921d
 8009248:	0800921d 	.word	0x0800921d
 800924c:	080092a1 	.word	0x080092a1
 8009250:	0800921d 	.word	0x0800921d
 8009254:	0800921d 	.word	0x0800921d
 8009258:	0800921d 	.word	0x0800921d
 800925c:	0800921d 	.word	0x0800921d
 8009260:	080093ad 	.word	0x080093ad
 8009264:	080092d1 	.word	0x080092d1
 8009268:	0800938f 	.word	0x0800938f
 800926c:	0800921d 	.word	0x0800921d
 8009270:	0800921d 	.word	0x0800921d
 8009274:	080093cf 	.word	0x080093cf
 8009278:	0800921d 	.word	0x0800921d
 800927c:	080092d1 	.word	0x080092d1
 8009280:	0800921d 	.word	0x0800921d
 8009284:	0800921d 	.word	0x0800921d
 8009288:	08009397 	.word	0x08009397
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	1d1a      	adds	r2, r3, #4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	602a      	str	r2, [r5, #0]
 8009294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800929c:	2301      	movs	r3, #1
 800929e:	e0a3      	b.n	80093e8 <_printf_i+0x1f4>
 80092a0:	6820      	ldr	r0, [r4, #0]
 80092a2:	6829      	ldr	r1, [r5, #0]
 80092a4:	0606      	lsls	r6, r0, #24
 80092a6:	f101 0304 	add.w	r3, r1, #4
 80092aa:	d50a      	bpl.n	80092c2 <_printf_i+0xce>
 80092ac:	680e      	ldr	r6, [r1, #0]
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	2e00      	cmp	r6, #0
 80092b2:	da03      	bge.n	80092bc <_printf_i+0xc8>
 80092b4:	232d      	movs	r3, #45	; 0x2d
 80092b6:	4276      	negs	r6, r6
 80092b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092bc:	485e      	ldr	r0, [pc, #376]	; (8009438 <_printf_i+0x244>)
 80092be:	230a      	movs	r3, #10
 80092c0:	e019      	b.n	80092f6 <_printf_i+0x102>
 80092c2:	680e      	ldr	r6, [r1, #0]
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092ca:	bf18      	it	ne
 80092cc:	b236      	sxthne	r6, r6
 80092ce:	e7ef      	b.n	80092b0 <_printf_i+0xbc>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	6820      	ldr	r0, [r4, #0]
 80092d4:	1d19      	adds	r1, r3, #4
 80092d6:	6029      	str	r1, [r5, #0]
 80092d8:	0601      	lsls	r1, r0, #24
 80092da:	d501      	bpl.n	80092e0 <_printf_i+0xec>
 80092dc:	681e      	ldr	r6, [r3, #0]
 80092de:	e002      	b.n	80092e6 <_printf_i+0xf2>
 80092e0:	0646      	lsls	r6, r0, #25
 80092e2:	d5fb      	bpl.n	80092dc <_printf_i+0xe8>
 80092e4:	881e      	ldrh	r6, [r3, #0]
 80092e6:	4854      	ldr	r0, [pc, #336]	; (8009438 <_printf_i+0x244>)
 80092e8:	2f6f      	cmp	r7, #111	; 0x6f
 80092ea:	bf0c      	ite	eq
 80092ec:	2308      	moveq	r3, #8
 80092ee:	230a      	movne	r3, #10
 80092f0:	2100      	movs	r1, #0
 80092f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092f6:	6865      	ldr	r5, [r4, #4]
 80092f8:	60a5      	str	r5, [r4, #8]
 80092fa:	2d00      	cmp	r5, #0
 80092fc:	bfa2      	ittt	ge
 80092fe:	6821      	ldrge	r1, [r4, #0]
 8009300:	f021 0104 	bicge.w	r1, r1, #4
 8009304:	6021      	strge	r1, [r4, #0]
 8009306:	b90e      	cbnz	r6, 800930c <_printf_i+0x118>
 8009308:	2d00      	cmp	r5, #0
 800930a:	d04d      	beq.n	80093a8 <_printf_i+0x1b4>
 800930c:	4615      	mov	r5, r2
 800930e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009312:	fb03 6711 	mls	r7, r3, r1, r6
 8009316:	5dc7      	ldrb	r7, [r0, r7]
 8009318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800931c:	4637      	mov	r7, r6
 800931e:	42bb      	cmp	r3, r7
 8009320:	460e      	mov	r6, r1
 8009322:	d9f4      	bls.n	800930e <_printf_i+0x11a>
 8009324:	2b08      	cmp	r3, #8
 8009326:	d10b      	bne.n	8009340 <_printf_i+0x14c>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	07de      	lsls	r6, r3, #31
 800932c:	d508      	bpl.n	8009340 <_printf_i+0x14c>
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	6861      	ldr	r1, [r4, #4]
 8009332:	4299      	cmp	r1, r3
 8009334:	bfde      	ittt	le
 8009336:	2330      	movle	r3, #48	; 0x30
 8009338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800933c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009340:	1b52      	subs	r2, r2, r5
 8009342:	6122      	str	r2, [r4, #16]
 8009344:	f8cd a000 	str.w	sl, [sp]
 8009348:	464b      	mov	r3, r9
 800934a:	aa03      	add	r2, sp, #12
 800934c:	4621      	mov	r1, r4
 800934e:	4640      	mov	r0, r8
 8009350:	f7ff fee2 	bl	8009118 <_printf_common>
 8009354:	3001      	adds	r0, #1
 8009356:	d14c      	bne.n	80093f2 <_printf_i+0x1fe>
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	b004      	add	sp, #16
 800935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009362:	4835      	ldr	r0, [pc, #212]	; (8009438 <_printf_i+0x244>)
 8009364:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009368:	6829      	ldr	r1, [r5, #0]
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009370:	6029      	str	r1, [r5, #0]
 8009372:	061d      	lsls	r5, r3, #24
 8009374:	d514      	bpl.n	80093a0 <_printf_i+0x1ac>
 8009376:	07df      	lsls	r7, r3, #31
 8009378:	bf44      	itt	mi
 800937a:	f043 0320 	orrmi.w	r3, r3, #32
 800937e:	6023      	strmi	r3, [r4, #0]
 8009380:	b91e      	cbnz	r6, 800938a <_printf_i+0x196>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	f023 0320 	bic.w	r3, r3, #32
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	2310      	movs	r3, #16
 800938c:	e7b0      	b.n	80092f0 <_printf_i+0xfc>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	f043 0320 	orr.w	r3, r3, #32
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	2378      	movs	r3, #120	; 0x78
 8009398:	4828      	ldr	r0, [pc, #160]	; (800943c <_printf_i+0x248>)
 800939a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800939e:	e7e3      	b.n	8009368 <_printf_i+0x174>
 80093a0:	0659      	lsls	r1, r3, #25
 80093a2:	bf48      	it	mi
 80093a4:	b2b6      	uxthmi	r6, r6
 80093a6:	e7e6      	b.n	8009376 <_printf_i+0x182>
 80093a8:	4615      	mov	r5, r2
 80093aa:	e7bb      	b.n	8009324 <_printf_i+0x130>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	6826      	ldr	r6, [r4, #0]
 80093b0:	6961      	ldr	r1, [r4, #20]
 80093b2:	1d18      	adds	r0, r3, #4
 80093b4:	6028      	str	r0, [r5, #0]
 80093b6:	0635      	lsls	r5, r6, #24
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	d501      	bpl.n	80093c0 <_printf_i+0x1cc>
 80093bc:	6019      	str	r1, [r3, #0]
 80093be:	e002      	b.n	80093c6 <_printf_i+0x1d2>
 80093c0:	0670      	lsls	r0, r6, #25
 80093c2:	d5fb      	bpl.n	80093bc <_printf_i+0x1c8>
 80093c4:	8019      	strh	r1, [r3, #0]
 80093c6:	2300      	movs	r3, #0
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	4615      	mov	r5, r2
 80093cc:	e7ba      	b.n	8009344 <_printf_i+0x150>
 80093ce:	682b      	ldr	r3, [r5, #0]
 80093d0:	1d1a      	adds	r2, r3, #4
 80093d2:	602a      	str	r2, [r5, #0]
 80093d4:	681d      	ldr	r5, [r3, #0]
 80093d6:	6862      	ldr	r2, [r4, #4]
 80093d8:	2100      	movs	r1, #0
 80093da:	4628      	mov	r0, r5
 80093dc:	f7f6 ff08 	bl	80001f0 <memchr>
 80093e0:	b108      	cbz	r0, 80093e6 <_printf_i+0x1f2>
 80093e2:	1b40      	subs	r0, r0, r5
 80093e4:	6060      	str	r0, [r4, #4]
 80093e6:	6863      	ldr	r3, [r4, #4]
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	2300      	movs	r3, #0
 80093ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f0:	e7a8      	b.n	8009344 <_printf_i+0x150>
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	462a      	mov	r2, r5
 80093f6:	4649      	mov	r1, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	47d0      	blx	sl
 80093fc:	3001      	adds	r0, #1
 80093fe:	d0ab      	beq.n	8009358 <_printf_i+0x164>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	079b      	lsls	r3, r3, #30
 8009404:	d413      	bmi.n	800942e <_printf_i+0x23a>
 8009406:	68e0      	ldr	r0, [r4, #12]
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	4298      	cmp	r0, r3
 800940c:	bfb8      	it	lt
 800940e:	4618      	movlt	r0, r3
 8009410:	e7a4      	b.n	800935c <_printf_i+0x168>
 8009412:	2301      	movs	r3, #1
 8009414:	4632      	mov	r2, r6
 8009416:	4649      	mov	r1, r9
 8009418:	4640      	mov	r0, r8
 800941a:	47d0      	blx	sl
 800941c:	3001      	adds	r0, #1
 800941e:	d09b      	beq.n	8009358 <_printf_i+0x164>
 8009420:	3501      	adds	r5, #1
 8009422:	68e3      	ldr	r3, [r4, #12]
 8009424:	9903      	ldr	r1, [sp, #12]
 8009426:	1a5b      	subs	r3, r3, r1
 8009428:	42ab      	cmp	r3, r5
 800942a:	dcf2      	bgt.n	8009412 <_printf_i+0x21e>
 800942c:	e7eb      	b.n	8009406 <_printf_i+0x212>
 800942e:	2500      	movs	r5, #0
 8009430:	f104 0619 	add.w	r6, r4, #25
 8009434:	e7f5      	b.n	8009422 <_printf_i+0x22e>
 8009436:	bf00      	nop
 8009438:	0800985d 	.word	0x0800985d
 800943c:	0800986e 	.word	0x0800986e

08009440 <_sbrk_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4d06      	ldr	r5, [pc, #24]	; (800945c <_sbrk_r+0x1c>)
 8009444:	2300      	movs	r3, #0
 8009446:	4604      	mov	r4, r0
 8009448:	4608      	mov	r0, r1
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	f7f8 fcc6 	bl	8001ddc <_sbrk>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_sbrk_r+0x1a>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_sbrk_r+0x1a>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	20000b5c 	.word	0x20000b5c

08009460 <__sread>:
 8009460:	b510      	push	{r4, lr}
 8009462:	460c      	mov	r4, r1
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	f000 f8f8 	bl	800965c <_read_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	bfab      	itete	ge
 8009470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009472:	89a3      	ldrhlt	r3, [r4, #12]
 8009474:	181b      	addge	r3, r3, r0
 8009476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800947a:	bfac      	ite	ge
 800947c:	6563      	strge	r3, [r4, #84]	; 0x54
 800947e:	81a3      	strhlt	r3, [r4, #12]
 8009480:	bd10      	pop	{r4, pc}

08009482 <__swrite>:
 8009482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	461f      	mov	r7, r3
 8009488:	898b      	ldrh	r3, [r1, #12]
 800948a:	05db      	lsls	r3, r3, #23
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4616      	mov	r6, r2
 8009492:	d505      	bpl.n	80094a0 <__swrite+0x1e>
 8009494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009498:	2302      	movs	r3, #2
 800949a:	2200      	movs	r2, #0
 800949c:	f000 f868 	bl	8009570 <_lseek_r>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	f000 b817 	b.w	80094e8 <_write_r>

080094ba <__sseek>:
 80094ba:	b510      	push	{r4, lr}
 80094bc:	460c      	mov	r4, r1
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 f855 	bl	8009570 <_lseek_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	bf15      	itete	ne
 80094cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094d6:	81a3      	strheq	r3, [r4, #12]
 80094d8:	bf18      	it	ne
 80094da:	81a3      	strhne	r3, [r4, #12]
 80094dc:	bd10      	pop	{r4, pc}

080094de <__sclose>:
 80094de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e2:	f000 b813 	b.w	800950c <_close_r>
	...

080094e8 <_write_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d07      	ldr	r5, [pc, #28]	; (8009508 <_write_r+0x20>)
 80094ec:	4604      	mov	r4, r0
 80094ee:	4608      	mov	r0, r1
 80094f0:	4611      	mov	r1, r2
 80094f2:	2200      	movs	r2, #0
 80094f4:	602a      	str	r2, [r5, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	f7f8 fc1f 	bl	8001d3a <_write>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_write_r+0x1e>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_write_r+0x1e>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20000b5c 	.word	0x20000b5c

0800950c <_close_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d06      	ldr	r5, [pc, #24]	; (8009528 <_close_r+0x1c>)
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7f8 fc2b 	bl	8001d72 <_close>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_close_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_close_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20000b5c 	.word	0x20000b5c

0800952c <_fstat_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	; (800954c <_fstat_r+0x20>)
 8009530:	2300      	movs	r3, #0
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	4611      	mov	r1, r2
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	f7f8 fc26 	bl	8001d8a <_fstat>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d102      	bne.n	8009548 <_fstat_r+0x1c>
 8009542:	682b      	ldr	r3, [r5, #0]
 8009544:	b103      	cbz	r3, 8009548 <_fstat_r+0x1c>
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	bd38      	pop	{r3, r4, r5, pc}
 800954a:	bf00      	nop
 800954c:	20000b5c 	.word	0x20000b5c

08009550 <_isatty_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d06      	ldr	r5, [pc, #24]	; (800956c <_isatty_r+0x1c>)
 8009554:	2300      	movs	r3, #0
 8009556:	4604      	mov	r4, r0
 8009558:	4608      	mov	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7f8 fc25 	bl	8001daa <_isatty>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_isatty_r+0x1a>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_isatty_r+0x1a>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20000b5c 	.word	0x20000b5c

08009570 <_lseek_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d07      	ldr	r5, [pc, #28]	; (8009590 <_lseek_r+0x20>)
 8009574:	4604      	mov	r4, r0
 8009576:	4608      	mov	r0, r1
 8009578:	4611      	mov	r1, r2
 800957a:	2200      	movs	r2, #0
 800957c:	602a      	str	r2, [r5, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f7f8 fc1e 	bl	8001dc0 <_lseek>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_lseek_r+0x1e>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_lseek_r+0x1e>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	20000b5c 	.word	0x20000b5c

08009594 <memcpy>:
 8009594:	440a      	add	r2, r1
 8009596:	4291      	cmp	r1, r2
 8009598:	f100 33ff 	add.w	r3, r0, #4294967295
 800959c:	d100      	bne.n	80095a0 <memcpy+0xc>
 800959e:	4770      	bx	lr
 80095a0:	b510      	push	{r4, lr}
 80095a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095aa:	4291      	cmp	r1, r2
 80095ac:	d1f9      	bne.n	80095a2 <memcpy+0xe>
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <memmove>:
 80095b0:	4288      	cmp	r0, r1
 80095b2:	b510      	push	{r4, lr}
 80095b4:	eb01 0402 	add.w	r4, r1, r2
 80095b8:	d902      	bls.n	80095c0 <memmove+0x10>
 80095ba:	4284      	cmp	r4, r0
 80095bc:	4623      	mov	r3, r4
 80095be:	d807      	bhi.n	80095d0 <memmove+0x20>
 80095c0:	1e43      	subs	r3, r0, #1
 80095c2:	42a1      	cmp	r1, r4
 80095c4:	d008      	beq.n	80095d8 <memmove+0x28>
 80095c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ce:	e7f8      	b.n	80095c2 <memmove+0x12>
 80095d0:	4402      	add	r2, r0
 80095d2:	4601      	mov	r1, r0
 80095d4:	428a      	cmp	r2, r1
 80095d6:	d100      	bne.n	80095da <memmove+0x2a>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095e2:	e7f7      	b.n	80095d4 <memmove+0x24>

080095e4 <__malloc_lock>:
 80095e4:	4801      	ldr	r0, [pc, #4]	; (80095ec <__malloc_lock+0x8>)
 80095e6:	f7ff baf3 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 80095ea:	bf00      	nop
 80095ec:	20000b50 	.word	0x20000b50

080095f0 <__malloc_unlock>:
 80095f0:	4801      	ldr	r0, [pc, #4]	; (80095f8 <__malloc_unlock+0x8>)
 80095f2:	f7ff baee 	b.w	8008bd2 <__retarget_lock_release_recursive>
 80095f6:	bf00      	nop
 80095f8:	20000b50 	.word	0x20000b50

080095fc <_realloc_r>:
 80095fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009600:	4680      	mov	r8, r0
 8009602:	4614      	mov	r4, r2
 8009604:	460e      	mov	r6, r1
 8009606:	b921      	cbnz	r1, 8009612 <_realloc_r+0x16>
 8009608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800960c:	4611      	mov	r1, r2
 800960e:	f7ff bbb3 	b.w	8008d78 <_malloc_r>
 8009612:	b92a      	cbnz	r2, 8009620 <_realloc_r+0x24>
 8009614:	f7ff fb44 	bl	8008ca0 <_free_r>
 8009618:	4625      	mov	r5, r4
 800961a:	4628      	mov	r0, r5
 800961c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009620:	f000 f82e 	bl	8009680 <_malloc_usable_size_r>
 8009624:	4284      	cmp	r4, r0
 8009626:	4607      	mov	r7, r0
 8009628:	d802      	bhi.n	8009630 <_realloc_r+0x34>
 800962a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800962e:	d812      	bhi.n	8009656 <_realloc_r+0x5a>
 8009630:	4621      	mov	r1, r4
 8009632:	4640      	mov	r0, r8
 8009634:	f7ff fba0 	bl	8008d78 <_malloc_r>
 8009638:	4605      	mov	r5, r0
 800963a:	2800      	cmp	r0, #0
 800963c:	d0ed      	beq.n	800961a <_realloc_r+0x1e>
 800963e:	42bc      	cmp	r4, r7
 8009640:	4622      	mov	r2, r4
 8009642:	4631      	mov	r1, r6
 8009644:	bf28      	it	cs
 8009646:	463a      	movcs	r2, r7
 8009648:	f7ff ffa4 	bl	8009594 <memcpy>
 800964c:	4631      	mov	r1, r6
 800964e:	4640      	mov	r0, r8
 8009650:	f7ff fb26 	bl	8008ca0 <_free_r>
 8009654:	e7e1      	b.n	800961a <_realloc_r+0x1e>
 8009656:	4635      	mov	r5, r6
 8009658:	e7df      	b.n	800961a <_realloc_r+0x1e>
	...

0800965c <_read_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d07      	ldr	r5, [pc, #28]	; (800967c <_read_r+0x20>)
 8009660:	4604      	mov	r4, r0
 8009662:	4608      	mov	r0, r1
 8009664:	4611      	mov	r1, r2
 8009666:	2200      	movs	r2, #0
 8009668:	602a      	str	r2, [r5, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f7f8 fb48 	bl	8001d00 <_read>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_read_r+0x1e>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_read_r+0x1e>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	20000b5c 	.word	0x20000b5c

08009680 <_malloc_usable_size_r>:
 8009680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009684:	1f18      	subs	r0, r3, #4
 8009686:	2b00      	cmp	r3, #0
 8009688:	bfbc      	itt	lt
 800968a:	580b      	ldrlt	r3, [r1, r0]
 800968c:	18c0      	addlt	r0, r0, r3
 800968e:	4770      	bx	lr

08009690 <_init>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr

0800969c <_fini>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	bf00      	nop
 80096a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a2:	bc08      	pop	{r3}
 80096a4:	469e      	mov	lr, r3
 80096a6:	4770      	bx	lr
